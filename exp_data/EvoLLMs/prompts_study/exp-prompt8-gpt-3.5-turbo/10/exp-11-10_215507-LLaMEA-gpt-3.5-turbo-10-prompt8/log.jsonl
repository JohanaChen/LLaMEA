{"id": "927eef4f-0cc3-4b0d-a61f-1fb665f90d72", "solution": "import numpy as np\n\nclass ParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best):\n            return self.w * p + self.c1 * np.random.rand() * (particle_best - p) + self.c2 * np.random.rand() * (g_best - p)\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n\n        return g_best", "name": "ParticleResonanceOptimization", "description": "A novel optimization algorithm inspired by the concept of particle resonance that leverages the interaction between particles to guide the search process towards global optima.", "configspace": "", "generation": 0, "fitness": 0.09031762864907883, "feedback": "The algorithm ParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.15.", "error": "", "parent_id": null, "metadata": {"aucs": [0.13423059058933595, 0.12329824106208709, 0.13552921162074094, 0.169861725817664, 0.14088455463538363, 0.15129079830164027, 0.15622401040864786, 0.11816287142113957, 0.17091513834034744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035263402671284916, 0.015869944642214584, 0.03281325847918526, 0.03972733730709732, 0.01519628626942282, 0.038099976709862315, 0.020748769260996447, 0.020700491617229422, 0.03932605906647346, 0.03320759300339471, 0.028356978584533343, 0.01877885253378786, 0.040072059438662655, 0.0014043331047556284, 0.022997844210247975, 0.013209218759113517, 9.999999999998899e-05, 0.006136143185557885, 0.9871564816300193, 0.9956751556431128, 0.9812426013393643, 0.1010029533872816, 0.07496684667389675, 0.9866698884008894, 0.9793474104762092, 0.0873367855397168, 0.10056822847659608, 0.03423291215549429, 0.03743778305808809, 0.051670712467052016, 0.09650448838858605, 0.04502942670622745, 0.08426495950680235, 0.03654346989157764, 0.030826009991682946, 9.999999999998899e-05, 0.1526028332883259, 0.069322788181298, 0.06123624575282283, 0.11362258785038559, 0.1516741021511976, 0.06564885915990903, 0.054862833774495634, 0.0802603153729462, 0.08845569131372011, 0.002649618526073705, 9.999999999998899e-05, 0.017053510093995472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0289038175640417, 0.047137609970551275, 0.009282048911491758, 0.009358467514750557, 0.07947109971770883, 9.999999999998899e-05, 0.1045562332409603, 0.003575436996644754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031881670354058755, 0.0006728719258962679, 0.017081733986327174, 0.043235541962641566, 9.999999999998899e-05, 9.999999999998899e-05, 0.013478833655216627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16443628958828305, 0.14148663138841344, 0.17887074536152048, 0.157214756913179, 0.12050675697725532, 0.2289557248067453, 0.2093279436952602, 0.18314337093152777, 0.13120342376639815, 0.040621920812517365, 0.031846064591487644, 0.025011535198725454, 0.047559723570619106, 0.016658256564233698, 0.022306140110052386, 0.031967115204498464, 0.024885248796228, 0.041441133824645426, 0.1022101767302025, 0.10442241412254805, 0.12200393326802839, 0.13336983585977957, 0.1334432076870795, 0.13495281320805697, 0.10080406567982281, 0.10477644334917513, 0.13330409870210025, 0.1484532235229884, 0.13529412927750362, 0.14498947169071474, 0.14746996490632225, 0.14506752994244887, 0.15105289283191992, 0.14459088186519675, 0.17377774300845283, 0.17053234473640355, 0.10219094989413824, 0.055515475022411165, 0.07807243419362353, 0.08883944067530591, 0.07130313075891992, 0.08465400379904076, 0.09391607102623589, 0.10417410084384415, 0.11431101455118131, 0.17506021247108472, 0.11098093262223685, 0.13345086981233123, 0.1405490904589315, 0.12584102359602112, 0.12871111353929976, 0.13826224877077298, 0.1387341784244991, 0.14612346774033447, 0.11859282094663726, 9.999999999998899e-05, 0.14762455453848888, 0.008003069752987924, 0.0839375867297173, 9.999999999998899e-05, 0.12522608500117727, 9.999999999998899e-05, 0.06949239662031192, 0.13776754537851343, 0.13973355961916167, 0.11263836352042922, 0.14809351727418796, 0.15777060094226725, 0.101355392078058, 0.08172313858999114, 0.14457506564889078, 0.15140906753509387, 0.13439226234010293, 0.12003069661259191, 0.14139708809261742, 0.07903736828108465, 0.10404364273124811, 0.14130505752322065, 0.10991896256540223, 0.07839806116711623, 0.08672126225219978, 0.16362938378693248, 0.18419638087719836, 0.1652263546821796, 0.1557726293974221, 0.1715989554886821, 0.1800112203517401, 0.17843394736263019, 0.174605054241192, 0.1593344287686459, 0.04021223150993769, 0.037264079997695765, 0.03333863991207364, 0.03779922856088014, 0.036502067743857114, 0.025487157980942587, 0.03284068193146594, 0.04058796324809977, 0.02572594988854393]}, "mutation_prompt": null}
{"id": "c1de7b87-9614-41d1-97f8-835e7f2f2770", "solution": "import numpy as np\n\nclass AdaptiveInertiaParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w_max=0.9, w_min=0.4, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w_max = w_max\n        self.w_min = w_min\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best, inertia_weight):\n            return inertia_weight * p + self.c1 * np.random.rand() * (particle_best - p) + self.c2 * np.random.rand() * (g_best - p)\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        inertia_weights = np.full(self.num_particles, self.w_max)\n\n        for t in range(self.budget):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i], inertia_weights[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                # Dynamic inertia weight adjustment based on particle performance\n                if func(particles[i]) < func(particle_best[i]):\n                    inertia_weights[i] = self.w_max - ((self.w_max - self.w_min) * t / self.budget)\n\n        return g_best", "name": "AdaptiveInertiaParticleResonanceOptimization", "description": "Introducing dynamic inertia weight adjustment based on particle performance to adaptively control exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.08875473607535456, "feedback": "The algorithm AdaptiveInertiaParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": "927eef4f-0cc3-4b0d-a61f-1fb665f90d72", "metadata": {"aucs": [0.10691006657194269, 0.14744978514052542, 0.13310813102471653, 0.1525871969973126, 0.15441992276730143, 0.12294932937866254, 0.12160362498617139, 0.12650909664094434, 0.11379479075611365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01788888612006012, 0.027324339806651166, 0.03355247075499901, 0.014736076143490373, 0.024540064879847168, 0.009472287452111594, 0.018248263482334326, 0.016673316935967852, 0.017965615204337926, 9.999999999998899e-05, 9.999999999998899e-05, 0.015671923553929212, 0.027457264179256535, 0.0004952459975243739, 0.0018418364913758145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.993420593543363, 0.985268446747957, 0.9741122868454916, 0.9124634773752515, 0.9812933788498228, 0.9882923833351814, 0.9702875520795806, 0.9411542381765068, 0.09943575209125688, 0.025479452122444624, 0.06250561752703976, 0.04312782290217876, 0.011779370851345061, 0.027144105149797704, 0.009273954747648139, 9.999999999998899e-05, 0.03406613390946023, 9.999999999998899e-05, 0.1116631560258835, 0.05303864161824967, 0.052233822106523387, 0.08627531346280426, 0.08478513512675967, 0.04619989106578337, 0.04688602965762034, 0.05931056463008866, 0.034813491575998556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009251269032036769, 0.009718437437910898, 0.009523301069138457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029970166027809553, 9.999999999998899e-05, 0.0061151659821376825, 0.04918418740066277, 9.999999999998899e-05, 9.999999999998899e-05, 0.011832151600304819, 0.0019154045364064842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.13879659513922615, 0.17116561321981683, 0.14194181680296258, 0.12234401933491612, 0.13345344186352526, 0.16545619575017267, 0.11557744741191833, 0.1210557193025883, 0.029072565051604715, 0.020940168122183578, 0.022785452909078963, 0.026370918297954682, 0.0010413771766117907, 0.020410605079887345, 0.016928035807080022, 0.018150970471313532, 0.0267656688986897, 0.114277225669275, 0.09928372785181161, 0.12512350918430604, 0.11577242878439664, 0.12811867996825732, 0.10478491314606964, 0.10039041413606609, 0.08989513460762666, 0.12693031805530752, 0.12099676427393657, 0.13772032491308206, 0.1512599403400734, 0.13817830245727813, 0.15387136117796874, 0.13006606466612103, 0.12487599477330791, 0.17377774300845283, 0.15292147510276077, 0.056173663908333005, 0.09199506668618906, 0.07423388571396228, 0.09411788901629048, 0.07244474606808049, 0.07372567194133861, 0.08767169406865327, 0.0997711199450243, 0.07686941619074272, 0.15234845421644094, 0.10380309328458115, 0.13345086981233123, 0.12233482385596817, 0.09434828557590758, 0.11831234936525803, 0.13591888747979886, 0.1316095435828606, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08520447957906019, 0.11177980384272157, 0.10886810715639861, 0.08757907265115095, 0.100627403432619, 0.14384368284907922, 0.07440168067780273, 0.08700586254788212, 0.09937538066127727, 0.12069593189040884, 0.14375642489694385, 0.10051730792859848, 0.06564752330392953, 0.0506857903344724, 0.060577226492973035, 0.045511073114331335, 0.04710981821569438, 0.09687270398166004, 0.0910895991242271, 0.1593374258415, 0.16643702713297537, 0.17144629555052215, 0.1502195031179494, 0.2169621676108161, 0.15655962160115755, 0.1747884849236463, 0.16091411717030568, 0.1744951205735631, 0.02866652352833421, 0.031097920143962954, 0.031393493129599714, 0.02836050060925721, 0.03425093938292756, 0.03273692926204019, 0.023659805136602374, 0.008982950860977557, 0.017811151812464177]}, "mutation_prompt": null}
{"id": "c06c7087-1809-4a33-9b04-7a4478bc54de", "solution": "import numpy as np\n\nclass FastParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w_max=0.9, w_min=0.4, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w_max = w_max\n        self.w_min = w_min\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best, inertia_weight):\n            return inertia_weight * p + self.c1 * np.random.rand() * (particle_best - p) + self.c2 * np.random.rand() * (g_best - p)\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        inertia_weight = self.w_max\n\n        for t in range(1, self.budget + 1):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i], inertia_weight)\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n            inertia_weight = self.w_max - (self.w_max - self.w_min) * t / self.budget\n\n        return g_best", "name": "FastParticleResonanceOptimization", "description": "Introducing dynamic inertia weight adaptation to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 2, "fitness": 0.08957149946777454, "feedback": "The algorithm FastParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": "927eef4f-0cc3-4b0d-a61f-1fb665f90d72", "metadata": {"aucs": [0.10714147505974236, 0.14799063269944768, 0.13341847752593528, 0.15284551336397834, 0.15498469303945717, 0.12300601191827776, 0.12221217287721464, 0.12655630708628085, 0.11480399043303646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01825490539401542, 0.027659608920848622, 0.03364379816785823, 0.014842698674708887, 0.024654848453249723, 0.009501090008127377, 0.018248263482334326, 0.016819577882285608, 0.017986267157011904, 9.999999999998899e-05, 9.999999999998899e-05, 0.015846933033317523, 0.028502213810922106, 0.0008576830955886461, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9946567692009021, 0.98921240710571, 0.9817802827584302, 0.940681363027644, 0.9865735158671981, 0.991226184385616, 0.9792354833473124, 0.9598142962880899, 0.09958372109668723, 0.02559311318112034, 0.06271694752734425, 0.04323216439451516, 0.011856721522577551, 0.027646027293191433, 0.00931287021799887, 9.999999999998899e-05, 0.034172279379180104, 9.999999999998899e-05, 0.1258221006581014, 0.05354789612405353, 0.052233822106523387, 0.08650278393927269, 0.0863213056946952, 0.04631168225357518, 0.046973958388096815, 0.05931056463008866, 0.035063160308203445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009575818365763156, 0.00988823162455943, 0.009807122437071714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008472370119762651, 9.999999999998899e-05, 0.0064234037299496505, 0.053164220818924135, 9.999999999998899e-05, 9.999999999998899e-05, 0.012393982513680735, 0.0043026174589840815, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10960367982087083, 0.13879659513922615, 0.17165792639255173, 0.14227227334182702, 0.12319602560188336, 0.13362960451892247, 0.16550280874311374, 0.115682077536016, 0.1210557193025883, 0.02917205152290936, 0.02096534500907221, 0.02286760654355291, 0.028299734947278887, 0.0010400729792076069, 0.023252873678926145, 0.01737160753962219, 0.018287509820801295, 0.0267656688986897, 0.1156605281697275, 0.11003434878457041, 0.10106691983626626, 0.11433235168819444, 0.12921062838592956, 0.09169227722137097, 0.09984193467992541, 0.07801599855123054, 0.1257409140349417, 0.12138716185401377, 0.1373851012970001, 0.15166815593727967, 0.141436317345207, 0.1540104186264829, 0.13016299878110804, 0.1251727967079338, 0.17377774300845283, 0.15318055478634252, 0.05682748669282789, 0.08175363671755354, 0.07532742694045702, 0.09840108191374553, 0.07416635109595338, 0.07375708300819062, 0.08804006212206839, 0.0997711199450243, 0.07710607720925344, 0.14328036374317, 0.10281422926146011, 0.13520010797997473, 0.13272702505201595, 0.09603983279590977, 0.10200814349316312, 0.13088342219252425, 0.11863099889026363, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 0.012634092279837805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09867039554349954, 0.12304248070190493, 0.10650258673208757, 0.08761968777256157, 0.10081152591798126, 0.14402455544930692, 0.07044514248145206, 0.08460553043351848, 0.10132690636088137, 0.12203344618484169, 0.14413773286028586, 0.10051730792859848, 0.0748109882497231, 0.0506857903344724, 0.05899634574193802, 0.045511073114331335, 0.053173029521043635, 0.09713792461703374, 0.09217028842548514, 0.16407856583762037, 0.16181443487732527, 0.1704106162083564, 0.15867806721042, 0.22093102161559341, 0.17181875633164512, 0.16005677420174325, 0.17800389059861266, 0.2032393060144665, 0.0305413175220296, 0.03110401897963999, 0.031393493129599714, 0.027851618937021372, 0.03425093938292756, 0.0329219322548131, 0.033281201199291566, 0.014420409643020826, 0.01747719908144607]}, "mutation_prompt": null}
{"id": "e03920e0-b150-4281-810e-0678dc75b3f0", "solution": "class AdaptiveInertiaParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best, w):\n            return w * p + self.c1 * np.random.rand() * (particle_best - p) + self.c2 * np.random.rand() * (g_best - p)\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        w = 0.9  # Initial inertia weight\n\n        for t in range(1, self.budget + 1):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i], w)\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n            w = 0.4 + 0.5 * (self.budget - t) / self.budget\n\n        return g_best", "name": "AdaptiveInertiaParticleResonanceOptimization", "description": "Introducing adaptive inertia weight to dynamically adjust the exploration and exploitation trade-off during optimization to speed up convergence.", "configspace": "", "generation": 3, "fitness": 0.08957149946780643, "feedback": "The algorithm AdaptiveInertiaParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": "927eef4f-0cc3-4b0d-a61f-1fb665f90d72", "metadata": {"aucs": [0.10714147505974236, 0.14799063269944768, 0.13341847752593528, 0.15284551336397834, 0.15498469303945717, 0.12300601191827776, 0.12221217287721464, 0.12655630708628085, 0.11480399043303646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01825490539401542, 0.027659608920848622, 0.03364379816785823, 0.014842698674708887, 0.024654848453249723, 0.009501090008127377, 0.018248263482334326, 0.016819577882285608, 0.017986267157011904, 9.999999999998899e-05, 9.999999999998899e-05, 0.015846933033317523, 0.028502213810922106, 0.0008576830955886461, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9946567692009021, 0.98921240710571, 0.9817802827584302, 0.940681363027644, 0.9865735158671981, 0.991226184385616, 0.9792354833473124, 0.9598142962880899, 0.09958372109668723, 0.02559311318112034, 0.06271694752734425, 0.04323216439451516, 0.011856721522577551, 0.027646027293191433, 0.00931287021799887, 9.999999999998899e-05, 0.034172279379180104, 9.999999999998899e-05, 0.1258221006581014, 0.05354789612405353, 0.052233822106523387, 0.08650278393927269, 0.0863213056946952, 0.04631168225357518, 0.046973958388096815, 0.05931056463008866, 0.035063160308203445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009575818365763156, 0.00988823162455943, 0.009807122437071714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008472370119762651, 9.999999999998899e-05, 0.006423403737313094, 0.053164220818924135, 9.999999999998899e-05, 9.999999999998899e-05, 0.012393982513680735, 0.0043026174589840815, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10960367982087083, 0.13879659513922615, 0.17165792639255173, 0.14227227334182702, 0.12319602560188336, 0.13362960451892247, 0.16550280874311374, 0.115682077536016, 0.1210557193025883, 0.02917205152290936, 0.02096534500907221, 0.02286760654355291, 0.028299734947278887, 0.0010400729792076069, 0.023252873678926145, 0.01737160753962219, 0.018287509820801295, 0.0267656688986897, 0.1156605281697275, 0.11003434878457041, 0.10106691983617488, 0.11433235168819444, 0.12921062838592956, 0.09169227722137097, 0.09984193467992541, 0.07801599855123054, 0.1257409140349417, 0.12138716185401377, 0.1373851012970001, 0.15166815593727967, 0.141436317345207, 0.1540104186264829, 0.13016299878110804, 0.12517279670793358, 0.17377774300845283, 0.15318055478634252, 0.05682748669282789, 0.08175363671755354, 0.07532742694045702, 0.09840108191374553, 0.07416635109595338, 0.07375708300819062, 0.08804006212206839, 0.0997711199450243, 0.07710607720925344, 0.14328036374325093, 0.10281422926143113, 0.13520010797997473, 0.13272702505201595, 0.09603983279547523, 0.10200814349316312, 0.13088342219252425, 0.11863099889026363, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 0.012634092279837805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09867039554349954, 0.12304248070190493, 0.10650258673208757, 0.08761968777256157, 0.10081152591798126, 0.14402455544930692, 0.07044514248145206, 0.08460553043351848, 0.10132690636088137, 0.12203344618484169, 0.14413773286028586, 0.10051730792859848, 0.0748109882497231, 0.0506857903344724, 0.05899634574193802, 0.045511073114331335, 0.053173029521043635, 0.09713792461703374, 0.09217028842548514, 0.16407856583762037, 0.16181443487732527, 0.1704106162083564, 0.15867806721042, 0.22093102161559341, 0.17181875633164512, 0.16005677420174325, 0.17800389059861266, 0.2032393060144665, 0.0305413175220296, 0.03110401897963999, 0.031393493129599714, 0.027851618937021372, 0.03425093938292756, 0.0329219322548131, 0.033281201199291566, 0.014420409643020826, 0.01747719908144607]}, "mutation_prompt": null}
{"id": "4f8c273d-40a1-43eb-a7a3-a2f25db53827", "solution": "import numpy as np\n\nclass ParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best):\n            return self.w * p + self.c1 * np.random.rand() * (particle_best - p) + self.c2 * np.random.rand() * (g_best - p)\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n\n        return g_best", "name": "ParticleResonanceOptimization", "description": "A novel optimization algorithm inspired by the concept of particle resonance that leverages the interaction between particles to guide the search process towards global optima.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "927eef4f-0cc3-4b0d-a61f-1fb665f90d72", "metadata": {"aucs": [0.13423059058933595, 0.12329824106208709, 0.13552921162074094, 0.169861725817664, 0.14088455463538363, 0.15129079830164027, 0.15622401040864786, 0.11816287142113957, 0.17091513834034744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035263402671284916, 0.015869944642214584, 0.03281325847918526, 0.03972733730709732, 0.01519628626942282, 0.038099976709862315, 0.020748769260996447, 0.020700491617229422, 0.03932605906647346, 0.03320759300339471, 0.028356978584533343, 0.01877885253378786, 0.040072059438662655, 0.0014043331047556284, 0.022997844210247975, 0.013209218759113517, 9.999999999998899e-05, 0.006136143185557885, 0.9871564816300193, 0.9956751556431128, 0.9812426013393643, 0.1010029533872816, 0.07496684667389675, 0.9866698884008894, 0.9793474104762092, 0.0873367855397168, 0.10056822847659608, 0.03423291215549429, 0.03743778305808809, 0.051670712467052016, 0.09650448838858605, 0.04502942670622745, 0.08426495950680235, 0.03654346989157764, 0.030826009991682946, 9.999999999998899e-05, 0.1526028332883259, 0.069322788181298, 0.06123624575282283, 0.11362258785038559, 0.1516741021511976, 0.06564885915990903, 0.054862833774495634, 0.0802603153729462, 0.08845569131372011, 0.002649618526073705, 9.999999999998899e-05, 0.017053510093995472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0289038175640417, 0.047137609970551275, 0.009282048911491758, 0.009358467514750557, 0.07947109971770883, 9.999999999998899e-05, 0.1045562332409603, 0.003575436996644754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031881670354058755, 0.0006728719258962679, 0.017081733986327174, 0.043235541962641566, 9.999999999998899e-05, 9.999999999998899e-05, 0.013478833655216627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16443628958828305, 0.14148663138841344, 0.17887074536152048, 0.157214756913179, 0.12050675697725532, 0.2289557248067453, 0.2093279436952602, 0.18314337093152777, 0.13120342376639815, 0.040621920812517365, 0.031846064591487644, 0.025011535198725454, 0.047559723570619106, 0.016658256564233698, 0.022306140110052386, 0.031967115204498464, 0.024885248796228, 0.041441133824645426, 0.1022101767302025, 0.10442241412254805, 0.12200393326802839, 0.13336983585977957, 0.1334432076870795, 0.13495281320805697, 0.10080406567982281, 0.10477644334917513, 0.13330409870210025, 0.1484532235229884, 0.13529412927750362, 0.14498947169071474, 0.14746996490632225, 0.14506752994244887, 0.15105289283191992, 0.14459088186519675, 0.17377774300845283, 0.17053234473640355, 0.10219094989413824, 0.055515475022411165, 0.07807243419362353, 0.08883944067530591, 0.07130313075891992, 0.08465400379904076, 0.09391607102623589, 0.10417410084384415, 0.11431101455118131, 0.17506021247108472, 0.11098093262223685, 0.13345086981233123, 0.1405490904589315, 0.12584102359602112, 0.12871111353929976, 0.13826224877077298, 0.1387341784244991, 0.14612346774033447, 0.11859282094663726, 9.999999999998899e-05, 0.14762455453848888, 0.008003069752987924, 0.0839375867297173, 9.999999999998899e-05, 0.12522608500117727, 9.999999999998899e-05, 0.06949239662031192, 0.13776754537851343, 0.13973355961916167, 0.11263836352042922, 0.14809351727418796, 0.15777060094226725, 0.101355392078058, 0.08172313858999114, 0.14457506564889078, 0.15140906753509387, 0.13439226234010293, 0.12003069661259191, 0.14139708809261742, 0.07903736828108465, 0.10404364273124811, 0.14130505752322065, 0.10991896256540223, 0.07839806116711623, 0.08672126225219978, 0.16362938378693248, 0.18419638087719836, 0.1652263546821796, 0.1557726293974221, 0.1715989554886821, 0.1800112203517401, 0.17843394736263019, 0.174605054241192, 0.1593344287686459, 0.04021223150993769, 0.037264079997695765, 0.03333863991207364, 0.03779922856088014, 0.036502067743857114, 0.025487157980942587, 0.03284068193146594, 0.04058796324809977, 0.02572594988854393]}, "mutation_prompt": null}
{"id": "5206b863-5c14-422b-9ffc-f3d56ce199e5", "solution": "import numpy as np\n\nclass ParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best):\n            return self.w * p + self.c1 * np.random.rand() * (particle_best - p) + self.c2 * np.random.rand() * (g_best - p)\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n\n        return g_best", "name": "ParticleResonanceOptimization", "description": "A novel optimization algorithm inspired by the concept of particle resonance that leverages the interaction between particles to guide the search process towards global optima.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "927eef4f-0cc3-4b0d-a61f-1fb665f90d72", "metadata": {"aucs": [0.13423059058933595, 0.12329824106208709, 0.13552921162074094, 0.169861725817664, 0.14088455463538363, 0.15129079830164027, 0.15622401040864786, 0.11816287142113957, 0.17091513834034744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035263402671284916, 0.015869944642214584, 0.03281325847918526, 0.03972733730709732, 0.01519628626942282, 0.038099976709862315, 0.020748769260996447, 0.020700491617229422, 0.03932605906647346, 0.03320759300339471, 0.028356978584533343, 0.01877885253378786, 0.040072059438662655, 0.0014043331047556284, 0.022997844210247975, 0.013209218759113517, 9.999999999998899e-05, 0.006136143185557885, 0.9871564816300193, 0.9956751556431128, 0.9812426013393643, 0.1010029533872816, 0.07496684667389675, 0.9866698884008894, 0.9793474104762092, 0.0873367855397168, 0.10056822847659608, 0.03423291215549429, 0.03743778305808809, 0.051670712467052016, 0.09650448838858605, 0.04502942670622745, 0.08426495950680235, 0.03654346989157764, 0.030826009991682946, 9.999999999998899e-05, 0.1526028332883259, 0.069322788181298, 0.06123624575282283, 0.11362258785038559, 0.1516741021511976, 0.06564885915990903, 0.054862833774495634, 0.0802603153729462, 0.08845569131372011, 0.002649618526073705, 9.999999999998899e-05, 0.017053510093995472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0289038175640417, 0.047137609970551275, 0.009282048911491758, 0.009358467514750557, 0.07947109971770883, 9.999999999998899e-05, 0.1045562332409603, 0.003575436996644754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031881670354058755, 0.0006728719258962679, 0.017081733986327174, 0.043235541962641566, 9.999999999998899e-05, 9.999999999998899e-05, 0.013478833655216627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16443628958828305, 0.14148663138841344, 0.17887074536152048, 0.157214756913179, 0.12050675697725532, 0.2289557248067453, 0.2093279436952602, 0.18314337093152777, 0.13120342376639815, 0.040621920812517365, 0.031846064591487644, 0.025011535198725454, 0.047559723570619106, 0.016658256564233698, 0.022306140110052386, 0.031967115204498464, 0.024885248796228, 0.041441133824645426, 0.1022101767302025, 0.10442241412254805, 0.12200393326802839, 0.13336983585977957, 0.1334432076870795, 0.13495281320805697, 0.10080406567982281, 0.10477644334917513, 0.13330409870210025, 0.1484532235229884, 0.13529412927750362, 0.14498947169071474, 0.14746996490632225, 0.14506752994244887, 0.15105289283191992, 0.14459088186519675, 0.17377774300845283, 0.17053234473640355, 0.10219094989413824, 0.055515475022411165, 0.07807243419362353, 0.08883944067530591, 0.07130313075891992, 0.08465400379904076, 0.09391607102623589, 0.10417410084384415, 0.11431101455118131, 0.17506021247108472, 0.11098093262223685, 0.13345086981233123, 0.1405490904589315, 0.12584102359602112, 0.12871111353929976, 0.13826224877077298, 0.1387341784244991, 0.14612346774033447, 0.11859282094663726, 9.999999999998899e-05, 0.14762455453848888, 0.008003069752987924, 0.0839375867297173, 9.999999999998899e-05, 0.12522608500117727, 9.999999999998899e-05, 0.06949239662031192, 0.13776754537851343, 0.13973355961916167, 0.11263836352042922, 0.14809351727418796, 0.15777060094226725, 0.101355392078058, 0.08172313858999114, 0.14457506564889078, 0.15140906753509387, 0.13439226234010293, 0.12003069661259191, 0.14139708809261742, 0.07903736828108465, 0.10404364273124811, 0.14130505752322065, 0.10991896256540223, 0.07839806116711623, 0.08672126225219978, 0.16362938378693248, 0.18419638087719836, 0.1652263546821796, 0.1557726293974221, 0.1715989554886821, 0.1800112203517401, 0.17843394736263019, 0.174605054241192, 0.1593344287686459, 0.04021223150993769, 0.037264079997695765, 0.03333863991207364, 0.03779922856088014, 0.036502067743857114, 0.025487157980942587, 0.03284068193146594, 0.04058796324809977, 0.02572594988854393]}, "mutation_prompt": null}
{"id": "81cac615-646f-4da6-8514-70e35b82d506", "solution": "import numpy as np\n\nclass ParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best):\n            return self.w * p + self.c1 * np.random.rand() * (particle_best - p) + self.c2 * np.random.rand() * (g_best - p)\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n\n        return g_best", "name": "ParticleResonanceOptimization", "description": "A novel optimization algorithm inspired by the concept of particle resonance that leverages the interaction between particles to guide the search process towards global optima.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "927eef4f-0cc3-4b0d-a61f-1fb665f90d72", "metadata": {"aucs": [0.13423059058933595, 0.12329824106208709, 0.13552921162074094, 0.169861725817664, 0.14088455463538363, 0.15129079830164027, 0.15622401040864786, 0.11816287142113957, 0.17091513834034744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035263402671284916, 0.015869944642214584, 0.03281325847918526, 0.03972733730709732, 0.01519628626942282, 0.038099976709862315, 0.020748769260996447, 0.020700491617229422, 0.03932605906647346, 0.03320759300339471, 0.028356978584533343, 0.01877885253378786, 0.040072059438662655, 0.0014043331047556284, 0.022997844210247975, 0.013209218759113517, 9.999999999998899e-05, 0.006136143185557885, 0.9871564816300193, 0.9956751556431128, 0.9812426013393643, 0.1010029533872816, 0.07496684667389675, 0.9866698884008894, 0.9793474104762092, 0.0873367855397168, 0.10056822847659608, 0.03423291215549429, 0.03743778305808809, 0.051670712467052016, 0.09650448838858605, 0.04502942670622745, 0.08426495950680235, 0.03654346989157764, 0.030826009991682946, 9.999999999998899e-05, 0.1526028332883259, 0.069322788181298, 0.06123624575282283, 0.11362258785038559, 0.1516741021511976, 0.06564885915990903, 0.054862833774495634, 0.0802603153729462, 0.08845569131372011, 0.002649618526073705, 9.999999999998899e-05, 0.017053510093995472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0289038175640417, 0.047137609970551275, 0.009282048911491758, 0.009358467514750557, 0.07947109971770883, 9.999999999998899e-05, 0.1045562332409603, 0.003575436996644754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031881670354058755, 0.0006728719258962679, 0.017081733986327174, 0.043235541962641566, 9.999999999998899e-05, 9.999999999998899e-05, 0.013478833655216627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16443628958828305, 0.14148663138841344, 0.17887074536152048, 0.157214756913179, 0.12050675697725532, 0.2289557248067453, 0.2093279436952602, 0.18314337093152777, 0.13120342376639815, 0.040621920812517365, 0.031846064591487644, 0.025011535198725454, 0.047559723570619106, 0.016658256564233698, 0.022306140110052386, 0.031967115204498464, 0.024885248796228, 0.041441133824645426, 0.1022101767302025, 0.10442241412254805, 0.12200393326802839, 0.13336983585977957, 0.1334432076870795, 0.13495281320805697, 0.10080406567982281, 0.10477644334917513, 0.13330409870210025, 0.1484532235229884, 0.13529412927750362, 0.14498947169071474, 0.14746996490632225, 0.14506752994244887, 0.15105289283191992, 0.14459088186519675, 0.17377774300845283, 0.17053234473640355, 0.10219094989413824, 0.055515475022411165, 0.07807243419362353, 0.08883944067530591, 0.07130313075891992, 0.08465400379904076, 0.09391607102623589, 0.10417410084384415, 0.11431101455118131, 0.17506021247108472, 0.11098093262223685, 0.13345086981233123, 0.1405490904589315, 0.12584102359602112, 0.12871111353929976, 0.13826224877077298, 0.1387341784244991, 0.14612346774033447, 0.11859282094663726, 9.999999999998899e-05, 0.14762455453848888, 0.008003069752987924, 0.0839375867297173, 9.999999999998899e-05, 0.12522608500117727, 9.999999999998899e-05, 0.06949239662031192, 0.13776754537851343, 0.13973355961916167, 0.11263836352042922, 0.14809351727418796, 0.15777060094226725, 0.101355392078058, 0.08172313858999114, 0.14457506564889078, 0.15140906753509387, 0.13439226234010293, 0.12003069661259191, 0.14139708809261742, 0.07903736828108465, 0.10404364273124811, 0.14130505752322065, 0.10991896256540223, 0.07839806116711623, 0.08672126225219978, 0.16362938378693248, 0.18419638087719836, 0.1652263546821796, 0.1557726293974221, 0.1715989554886821, 0.1800112203517401, 0.17843394736263019, 0.174605054241192, 0.1593344287686459, 0.04021223150993769, 0.037264079997695765, 0.03333863991207364, 0.03779922856088014, 0.036502067743857114, 0.025487157980942587, 0.03284068193146594, 0.04058796324809977, 0.02572594988854393]}, "mutation_prompt": null}
{"id": "c57aea7c-21ca-4d96-a772-704aa77aa090", "solution": "import numpy as np\n\nclass DynamicInertiaParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w_max=0.9, w_min=0.4, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w_max = w_max\n        self.w_min = w_min\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best, current_iter, max_iter):\n            w = self.w_max - (self.w_max - self.w_min) * current_iter / max_iter\n            return w * p + self.c1 * np.random.rand() * (particle_best - p) + self.c2 * np.random.rand() * (g_best - p)\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n\n        for current_iter in range(self.budget):\n            for i in range(self.num_particles):\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i], current_iter, self.budget)\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n\n        return g_best", "name": "DynamicInertiaParticleResonanceOptimization", "description": "Introducing dynamic inertia weight to adaptively adjust the exploration and exploitation balance based on the optimization progress.", "configspace": "", "generation": 7, "fitness": 0.08957149946777454, "feedback": "The algorithm DynamicInertiaParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": "927eef4f-0cc3-4b0d-a61f-1fb665f90d72", "metadata": {"aucs": [0.10714147505974236, 0.14799063269944768, 0.13341847752593528, 0.15284551336397834, 0.15498469303945717, 0.12300601191827776, 0.12221217287721464, 0.12655630708628085, 0.11480399043303646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01825490539401542, 0.027659608920848622, 0.03364379816785823, 0.014842698674708887, 0.024654848453249723, 0.009501090008127377, 0.018248263482334326, 0.016819577882285608, 0.017986267157011904, 9.999999999998899e-05, 9.999999999998899e-05, 0.015846933033317523, 0.028502213810922106, 0.0008576830955886461, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9946567692009021, 0.98921240710571, 0.9817802827584302, 0.940681363027644, 0.9865735158671981, 0.991226184385616, 0.9792354833473124, 0.9598142962880899, 0.09958372109668723, 0.02559311318112034, 0.06271694752734425, 0.04323216439451516, 0.011856721522577551, 0.027646027293191433, 0.00931287021799887, 9.999999999998899e-05, 0.034172279379180104, 9.999999999998899e-05, 0.1258221006581014, 0.05354789612405353, 0.052233822106523387, 0.08650278393927269, 0.0863213056946952, 0.04631168225357518, 0.046973958388096815, 0.05931056463008866, 0.035063160308203445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009575818365763156, 0.00988823162455943, 0.009807122437071714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008472370119762651, 9.999999999998899e-05, 0.0064234037299496505, 0.053164220818924135, 9.999999999998899e-05, 9.999999999998899e-05, 0.012393982513680735, 0.0043026174589840815, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10960367982087083, 0.13879659513922615, 0.17165792639255173, 0.14227227334182702, 0.12319602560188336, 0.13362960451892247, 0.16550280874311374, 0.115682077536016, 0.1210557193025883, 0.02917205152290936, 0.02096534500907221, 0.02286760654355291, 0.028299734947278887, 0.0010400729792076069, 0.023252873678926145, 0.01737160753962219, 0.018287509820801295, 0.0267656688986897, 0.1156605281697275, 0.11003434878457041, 0.10106691983626626, 0.11433235168819444, 0.12921062838592956, 0.09169227722137097, 0.09984193467992541, 0.07801599855123054, 0.1257409140349417, 0.12138716185401377, 0.1373851012970001, 0.15166815593727967, 0.141436317345207, 0.1540104186264829, 0.13016299878110804, 0.1251727967079338, 0.17377774300845283, 0.15318055478634252, 0.05682748669282789, 0.08175363671755354, 0.07532742694045702, 0.09840108191374553, 0.07416635109595338, 0.07375708300819062, 0.08804006212206839, 0.0997711199450243, 0.07710607720925344, 0.14328036374317, 0.10281422926146011, 0.13520010797997473, 0.13272702505201595, 0.09603983279590977, 0.10200814349316312, 0.13088342219252425, 0.11863099889026363, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 0.012634092279837805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09867039554349954, 0.12304248070190493, 0.10650258673208757, 0.08761968777256157, 0.10081152591798126, 0.14402455544930692, 0.07044514248145206, 0.08460553043351848, 0.10132690636088137, 0.12203344618484169, 0.14413773286028586, 0.10051730792859848, 0.0748109882497231, 0.0506857903344724, 0.05899634574193802, 0.045511073114331335, 0.053173029521043635, 0.09713792461703374, 0.09217028842548514, 0.16407856583762037, 0.16181443487732527, 0.1704106162083564, 0.15867806721042, 0.22093102161559341, 0.17181875633164512, 0.16005677420174325, 0.17800389059861266, 0.2032393060144665, 0.0305413175220296, 0.03110401897963999, 0.031393493129599714, 0.027851618937021372, 0.03425093938292756, 0.0329219322548131, 0.033281201199291566, 0.014420409643020826, 0.01747719908144607]}, "mutation_prompt": null}
{"id": "fb1aea45-65e7-4333-b480-e1fec2f8d233", "solution": "import numpy as np\n\nclass ImprovedParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            return self.w * p + cognitive + social\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)  # Dynamic inertia weight adjustment\n                c1 = self.c1 * (1 - self.beta)  # Dynamic cognitive component adjustment\n                c2 = self.c2 * (1 + self.beta)  # Dynamic social component adjustment\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n\n        return g_best", "name": "ImprovedParticleResonanceOptimization", "description": "Introducing dynamic adjustment of cognitive and social components to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 8, "fitness": 0.10232105299731781, "feedback": "The algorithm ImprovedParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.16.", "error": "", "parent_id": "927eef4f-0cc3-4b0d-a61f-1fb665f90d72", "metadata": {"aucs": [0.26226925574084836, 0.16374520288591043, 0.24531587649002518, 0.17678277554497768, 0.14511670642857322, 0.14669364438899102, 0.14781194743896098, 0.12727074087170187, 0.1467436600997245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032765768393954064, 0.015194851412534405, 0.026836145020874724, 0.03992666040574533, 0.002049490990995939, 0.0319564105028054, 0.02506096781739975, 0.014215965645682949, 0.021880965053138413, 0.024565816829172804, 0.019740941587472527, 0.014095905950228693, 0.03244884245915747, 0.020897986467001806, 0.04465460657579223, 0.011151311181437307, 0.012897864604951237, 0.003397145308850713, 0.9848123585660407, 0.995673012863424, 0.9794128689805012, 0.0992796497959969, 0.07493505485505791, 0.9869956949125244, 0.9754314773123728, 0.9215639306602231, 0.0999794547304449, 0.04240984543070192, 0.03764324867596347, 0.05481439707665958, 0.11405029932744615, 0.038803405243526545, 0.038222215901167145, 0.04965543642523784, 0.03228997109963094, 0.0031637449037132948, 0.16473678240652712, 0.05038708217908461, 0.07341554900865399, 0.12671163825595044, 0.17714370338917684, 0.12950048563020866, 0.12582370963318612, 0.0634947648668649, 0.09651734028006975, 0.057821128185157944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024142883276579097, 0.03545389606398297, 0.10405326135725412, 0.007491048671213085, 0.008973705989903658, 0.08720675727587934, 9.999999999998899e-05, 0.139979229108532, 0.02333696757859738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03807429807983176, 0.011976802876391246, 0.011608053271273677, 0.03601505476265976, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007647964169780197, 0.02149313770712924, 0.01494710206107952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18433416203582598, 0.15229046045582617, 0.2597571807055661, 0.18267141664622533, 0.1365587001813806, 0.16674767546286717, 0.22780759301070197, 0.20017102375959728, 0.1704701590630615, 0.04986086810550516, 0.04468642236384135, 0.05860936839037789, 0.06260400996612514, 0.04147875762253139, 0.028912292555339225, 0.016778603727944708, 0.06426757992277832, 0.03209760283070451, 0.13360970481855416, 0.10866175705680692, 0.12935147086383691, 0.16359786960956424, 0.1217199886373943, 0.10994295609781202, 0.1256181776945655, 0.10118713744714802, 0.13134476142674445, 0.12647499488925895, 0.1611077697387565, 0.15044242597699065, 0.1566924422575786, 0.15856055925350143, 0.16204714312131796, 0.16599157148263188, 0.17377774300845283, 0.16471293827409905, 0.12066928327334903, 0.052433744757842016, 0.0666123666703432, 0.11718007959567311, 0.11667254054971055, 0.10315887724803285, 0.09944530580354072, 0.10199185838876945, 0.11078754232623056, 0.16901385803699198, 0.1229061172938205, 0.1334577665066321, 0.16889773405849062, 0.12348216230739273, 0.13501889310957105, 0.1698194781910033, 0.14654816900354506, 0.17158243132698336, 0.14315618852212397, 9.999999999998899e-05, 0.15350974887905267, 0.14200121512655373, 0.15771461988174773, 0.1337479309790951, 0.16219133854386636, 0.13134675914745475, 0.020807269823429286, 0.22132114438390205, 0.17159607127933874, 0.11361483576096965, 0.15845940120344237, 0.154666736973182, 0.13481701836828086, 0.11681293539575421, 0.11709734450683718, 0.10070930636636422, 0.12172988915050587, 0.11678083019048702, 0.08241649588789446, 0.10114539495527175, 0.0722048045085465, 0.11021271366657004, 0.07243997048032691, 0.07452175271880823, 0.10086600538831703, 0.16557420539708145, 0.1641706718663528, 0.16666796896612213, 0.16547778407647273, 0.1804088471627996, 0.15870053661837824, 0.18387030530323378, 0.19572296240493614, 0.17300682146639557, 0.03432561579267279, 0.029771930941781655, 0.038296405322071014, 0.031642487619118365, 0.050972945711723505, 0.04003712079541255, 0.07217717014229041, 0.028605496064868063, 0.060914251581970724]}, "mutation_prompt": null}
{"id": "938fcd4c-9b05-48d3-a655-d2d4593fa739", "solution": "import numpy as np\n\nclass ImprovedParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            return self.w * p + cognitive + social\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)  # Dynamic inertia weight adjustment\n                c1 = self.c1 * (1 - self.beta)  # Dynamic cognitive component adjustment\n                c2 = self.c2 * (1 + self.beta)  # Dynamic social component adjustment\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n\n        return g_best", "name": "ImprovedParticleResonanceOptimization", "description": "Introducing dynamic adjustment of cognitive and social components to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb1aea45-65e7-4333-b480-e1fec2f8d233", "metadata": {"aucs": [0.26226925574084836, 0.16374520288591043, 0.24531587649002518, 0.17678277554497768, 0.14511670642857322, 0.14669364438899102, 0.14781194743896098, 0.12727074087170187, 0.1467436600997245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032765768393954064, 0.015194851412534405, 0.026836145020874724, 0.03992666040574533, 0.002049490990995939, 0.0319564105028054, 0.02506096781739975, 0.014215965645682949, 0.021880965053138413, 0.024565816829172804, 0.019740941587472527, 0.014095905950228693, 0.03244884245915747, 0.020897986467001806, 0.04465460657579223, 0.011151311181437307, 0.012897864604951237, 0.003397145308850713, 0.9848123585660407, 0.995673012863424, 0.9794128689805012, 0.0992796497959969, 0.07493505485505791, 0.9869956949125244, 0.9754314773123728, 0.9215639306602231, 0.0999794547304449, 0.04240984543070192, 0.03764324867596347, 0.05481439707665958, 0.11405029932744615, 0.038803405243526545, 0.038222215901167145, 0.04965543642523784, 0.03228997109963094, 0.0031637449037132948, 0.16473678240652712, 0.05038708217908461, 0.07341554900865399, 0.12671163825595044, 0.17714370338917684, 0.12950048563020866, 0.12582370963318612, 0.0634947648668649, 0.09651734028006975, 0.057821128185157944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024142883276579097, 0.03545389606398297, 0.10405326135725412, 0.007491048671213085, 0.008973705989903658, 0.08720675727587934, 9.999999999998899e-05, 0.139979229108532, 0.02333696757859738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03807429807983176, 0.011976802876391246, 0.011608053271273677, 0.03601505476265976, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007647964169780197, 0.02149313770712924, 0.01494710206107952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18433416203582598, 0.15229046045582617, 0.2597571807055661, 0.18267141664622533, 0.1365587001813806, 0.16674767546286717, 0.22780759301070197, 0.20017102375959728, 0.1704701590630615, 0.04986086810550516, 0.04468642236384135, 0.05860936839037789, 0.06260400996612514, 0.04147875762253139, 0.028912292555339225, 0.016778603727944708, 0.06426757992277832, 0.03209760283070451, 0.13360970481855416, 0.10866175705680692, 0.12935147086383691, 0.16359786960956424, 0.1217199886373943, 0.10994295609781202, 0.1256181776945655, 0.10118713744714802, 0.13134476142674445, 0.12647499488925895, 0.1611077697387565, 0.15044242597699065, 0.1566924422575786, 0.15856055925350143, 0.16204714312131796, 0.16599157148263188, 0.17377774300845283, 0.16471293827409905, 0.12066928327334903, 0.052433744757842016, 0.0666123666703432, 0.11718007959567311, 0.11667254054971055, 0.10315887724803285, 0.09944530580354072, 0.10199185838876945, 0.11078754232623056, 0.16901385803699198, 0.1229061172938205, 0.1334577665066321, 0.16889773405849062, 0.12348216230739273, 0.13501889310957105, 0.1698194781910033, 0.14654816900354506, 0.17158243132698336, 0.14315618852212397, 9.999999999998899e-05, 0.15350974887905267, 0.14200121512655373, 0.15771461988174773, 0.1337479309790951, 0.16219133854386636, 0.13134675914745475, 0.020807269823429286, 0.22132114438390205, 0.17159607127933874, 0.11361483576096965, 0.15845940120344237, 0.154666736973182, 0.13481701836828086, 0.11681293539575421, 0.11709734450683718, 0.10070930636636422, 0.12172988915050587, 0.11678083019048702, 0.08241649588789446, 0.10114539495527175, 0.0722048045085465, 0.11021271366657004, 0.07243997048032691, 0.07452175271880823, 0.10086600538831703, 0.16557420539708145, 0.1641706718663528, 0.16666796896612213, 0.16547778407647273, 0.1804088471627996, 0.15870053661837824, 0.18387030530323378, 0.19572296240493614, 0.17300682146639557, 0.03432561579267279, 0.029771930941781655, 0.038296405322071014, 0.031642487619118365, 0.050972945711723505, 0.04003712079541255, 0.07217717014229041, 0.028605496064868063, 0.060914251581970724]}, "mutation_prompt": null}
{"id": "10521787-90b8-4d9f-be57-8d5cc0be0edc", "solution": "import numpy as np\n\nclass ImprovedParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            return self.w * p + cognitive + social\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)  # Dynamic inertia weight adjustment\n                c1 = self.c1 * (1 - self.beta)  # Dynamic cognitive component adjustment\n                c2 = self.c2 * (1 + self.beta)  # Dynamic social component adjustment\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n\n        return g_best", "name": "ImprovedParticleResonanceOptimization", "description": "Introducing dynamic adjustment of cognitive and social components to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fb1aea45-65e7-4333-b480-e1fec2f8d233", "metadata": {"aucs": [0.26226925574084836, 0.16374520288591043, 0.24531587649002518, 0.17678277554497768, 0.14511670642857322, 0.14669364438899102, 0.14781194743896098, 0.12727074087170187, 0.1467436600997245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032765768393954064, 0.015194851412534405, 0.026836145020874724, 0.03992666040574533, 0.002049490990995939, 0.0319564105028054, 0.02506096781739975, 0.014215965645682949, 0.021880965053138413, 0.024565816829172804, 0.019740941587472527, 0.014095905950228693, 0.03244884245915747, 0.020897986467001806, 0.04465460657579223, 0.011151311181437307, 0.012897864604951237, 0.003397145308850713, 0.9848123585660407, 0.995673012863424, 0.9794128689805012, 0.0992796497959969, 0.07493505485505791, 0.9869956949125244, 0.9754314773123728, 0.9215639306602231, 0.0999794547304449, 0.04240984543070192, 0.03764324867596347, 0.05481439707665958, 0.11405029932744615, 0.038803405243526545, 0.038222215901167145, 0.04965543642523784, 0.03228997109963094, 0.0031637449037132948, 0.16473678240652712, 0.05038708217908461, 0.07341554900865399, 0.12671163825595044, 0.17714370338917684, 0.12950048563020866, 0.12582370963318612, 0.0634947648668649, 0.09651734028006975, 0.057821128185157944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024142883276579097, 0.03545389606398297, 0.10405326135725412, 0.007491048671213085, 0.008973705989903658, 0.08720675727587934, 9.999999999998899e-05, 0.139979229108532, 0.02333696757859738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03807429807983176, 0.011976802876391246, 0.011608053271273677, 0.03601505476265976, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007647964169780197, 0.02149313770712924, 0.01494710206107952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18433416203582598, 0.15229046045582617, 0.2597571807055661, 0.18267141664622533, 0.1365587001813806, 0.16674767546286717, 0.22780759301070197, 0.20017102375959728, 0.1704701590630615, 0.04986086810550516, 0.04468642236384135, 0.05860936839037789, 0.06260400996612514, 0.04147875762253139, 0.028912292555339225, 0.016778603727944708, 0.06426757992277832, 0.03209760283070451, 0.13360970481855416, 0.10866175705680692, 0.12935147086383691, 0.16359786960956424, 0.1217199886373943, 0.10994295609781202, 0.1256181776945655, 0.10118713744714802, 0.13134476142674445, 0.12647499488925895, 0.1611077697387565, 0.15044242597699065, 0.1566924422575786, 0.15856055925350143, 0.16204714312131796, 0.16599157148263188, 0.17377774300845283, 0.16471293827409905, 0.12066928327334903, 0.052433744757842016, 0.0666123666703432, 0.11718007959567311, 0.11667254054971055, 0.10315887724803285, 0.09944530580354072, 0.10199185838876945, 0.11078754232623056, 0.16901385803699198, 0.1229061172938205, 0.1334577665066321, 0.16889773405849062, 0.12348216230739273, 0.13501889310957105, 0.1698194781910033, 0.14654816900354506, 0.17158243132698336, 0.14315618852212397, 9.999999999998899e-05, 0.15350974887905267, 0.14200121512655373, 0.15771461988174773, 0.1337479309790951, 0.16219133854386636, 0.13134675914745475, 0.020807269823429286, 0.22132114438390205, 0.17159607127933874, 0.11361483576096965, 0.15845940120344237, 0.154666736973182, 0.13481701836828086, 0.11681293539575421, 0.11709734450683718, 0.10070930636636422, 0.12172988915050587, 0.11678083019048702, 0.08241649588789446, 0.10114539495527175, 0.0722048045085465, 0.11021271366657004, 0.07243997048032691, 0.07452175271880823, 0.10086600538831703, 0.16557420539708145, 0.1641706718663528, 0.16666796896612213, 0.16547778407647273, 0.1804088471627996, 0.15870053661837824, 0.18387030530323378, 0.19572296240493614, 0.17300682146639557, 0.03432561579267279, 0.029771930941781655, 0.038296405322071014, 0.031642487619118365, 0.050972945711723505, 0.04003712079541255, 0.07217717014229041, 0.028605496064868063, 0.060914251581970724]}, "mutation_prompt": null}
{"id": "922f916c-8ed7-4277-aa20-713b05546633", "solution": "import numpy as np\n\nclass ImprovedParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            return self.w * p + cognitive + social\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)  # Dynamic inertia weight adjustment\n                c1 = self.c1 * (1 - self.beta)  # Dynamic cognitive component adjustment\n                c2 = self.c2 * (1 + self.beta)  # Dynamic social component adjustment\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n\n        return g_best", "name": "ImprovedParticleResonanceOptimization", "description": "Introducing dynamic adjustment of cognitive and social components to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb1aea45-65e7-4333-b480-e1fec2f8d233", "metadata": {"aucs": [0.26226925574084836, 0.16374520288591043, 0.24531587649002518, 0.17678277554497768, 0.14511670642857322, 0.14669364438899102, 0.14781194743896098, 0.12727074087170187, 0.1467436600997245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032765768393954064, 0.015194851412534405, 0.026836145020874724, 0.03992666040574533, 0.002049490990995939, 0.0319564105028054, 0.02506096781739975, 0.014215965645682949, 0.021880965053138413, 0.024565816829172804, 0.019740941587472527, 0.014095905950228693, 0.03244884245915747, 0.020897986467001806, 0.04465460657579223, 0.011151311181437307, 0.012897864604951237, 0.003397145308850713, 0.9848123585660407, 0.995673012863424, 0.9794128689805012, 0.0992796497959969, 0.07493505485505791, 0.9869956949125244, 0.9754314773123728, 0.9215639306602231, 0.0999794547304449, 0.04240984543070192, 0.03764324867596347, 0.05481439707665958, 0.11405029932744615, 0.038803405243526545, 0.038222215901167145, 0.04965543642523784, 0.03228997109963094, 0.0031637449037132948, 0.16473678240652712, 0.05038708217908461, 0.07341554900865399, 0.12671163825595044, 0.17714370338917684, 0.12950048563020866, 0.12582370963318612, 0.0634947648668649, 0.09651734028006975, 0.057821128185157944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024142883276579097, 0.03545389606398297, 0.10405326135725412, 0.007491048671213085, 0.008973705989903658, 0.08720675727587934, 9.999999999998899e-05, 0.139979229108532, 0.02333696757859738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03807429807983176, 0.011976802876391246, 0.011608053271273677, 0.03601505476265976, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007647964169780197, 0.02149313770712924, 0.01494710206107952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18433416203582598, 0.15229046045582617, 0.2597571807055661, 0.18267141664622533, 0.1365587001813806, 0.16674767546286717, 0.22780759301070197, 0.20017102375959728, 0.1704701590630615, 0.04986086810550516, 0.04468642236384135, 0.05860936839037789, 0.06260400996612514, 0.04147875762253139, 0.028912292555339225, 0.016778603727944708, 0.06426757992277832, 0.03209760283070451, 0.13360970481855416, 0.10866175705680692, 0.12935147086383691, 0.16359786960956424, 0.1217199886373943, 0.10994295609781202, 0.1256181776945655, 0.10118713744714802, 0.13134476142674445, 0.12647499488925895, 0.1611077697387565, 0.15044242597699065, 0.1566924422575786, 0.15856055925350143, 0.16204714312131796, 0.16599157148263188, 0.17377774300845283, 0.16471293827409905, 0.12066928327334903, 0.052433744757842016, 0.0666123666703432, 0.11718007959567311, 0.11667254054971055, 0.10315887724803285, 0.09944530580354072, 0.10199185838876945, 0.11078754232623056, 0.16901385803699198, 0.1229061172938205, 0.1334577665066321, 0.16889773405849062, 0.12348216230739273, 0.13501889310957105, 0.1698194781910033, 0.14654816900354506, 0.17158243132698336, 0.14315618852212397, 9.999999999998899e-05, 0.15350974887905267, 0.14200121512655373, 0.15771461988174773, 0.1337479309790951, 0.16219133854386636, 0.13134675914745475, 0.020807269823429286, 0.22132114438390205, 0.17159607127933874, 0.11361483576096965, 0.15845940120344237, 0.154666736973182, 0.13481701836828086, 0.11681293539575421, 0.11709734450683718, 0.10070930636636422, 0.12172988915050587, 0.11678083019048702, 0.08241649588789446, 0.10114539495527175, 0.0722048045085465, 0.11021271366657004, 0.07243997048032691, 0.07452175271880823, 0.10086600538831703, 0.16557420539708145, 0.1641706718663528, 0.16666796896612213, 0.16547778407647273, 0.1804088471627996, 0.15870053661837824, 0.18387030530323378, 0.19572296240493614, 0.17300682146639557, 0.03432561579267279, 0.029771930941781655, 0.038296405322071014, 0.031642487619118365, 0.050972945711723505, 0.04003712079541255, 0.07217717014229041, 0.028605496064868063, 0.060914251581970724]}, "mutation_prompt": null}
{"id": "242a59b4-0d55-4ba1-892f-815929ba3715", "solution": "import numpy as np\n\nclass EnhancedParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            return self.w * p + cognitive + social\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta * func(particles[i]) / func(g_best)), 0.4, 0.9)  # Dynamic inertia weight adjustment based on particle performance\n                c1 = self.c1 * (1 - self.beta)  # Dynamic cognitive component adjustment\n                c2 = self.c2 * (1 + self.beta)  # Dynamic social component adjustment\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n\n        return g_best", "name": "EnhancedParticleResonanceOptimization", "description": "Introducing dynamic adjustment of inertia weight based on individual particle performance to accelerate convergence speed.", "configspace": "", "generation": 12, "fitness": 0.09846559425602805, "feedback": "The algorithm EnhancedParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.16.", "error": "", "parent_id": "fb1aea45-65e7-4333-b480-e1fec2f8d233", "metadata": {"aucs": [0.23921039382784437, 0.16275449271299025, 0.21486187145091362, 0.1765520925263796, 0.14411139662289785, 0.14653250170579302, 0.14689005334557914, 0.12677926050490984, 0.14623803302698402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02804284134093482, 0.015060037624344824, 0.027256541955695268, 0.03482691654508452, 0.0018809998938875694, 0.02915874653431927, 0.024826107679300158, 0.013775490072351237, 0.021497207896600812, 0.007040240283756938, 0.006968517775224448, 0.006118693257228136, 0.029481082225127686, 0.01830659600664042, 0.04137111387128878, 0.010449084470370185, 0.012068818448844332, 0.002697308438518342, 0.9806395551105017, 0.9881162036257071, 0.9729133009201654, 0.09895219051561366, 0.0748962946731172, 0.9817541192712784, 0.9643942938858706, 0.8835857238107115, 0.09980083176671362, 0.042367140912892176, 0.03643352724672244, 0.054293314364434964, 0.10411344186433635, 0.0381538068633257, 0.03818127521560277, 0.06709094558531381, 0.039737436680938876, 9.999999999998899e-05, 0.16325392044444254, 0.04953456436242609, 0.0730791816039591, 0.12506210331555545, 0.1732974501146911, 0.1284160119204787, 0.12439968718804562, 0.05931056463008866, 0.09316466471527618, 0.057486880731952406, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02194328165986592, 0.02828869011179036, 0.07441200888496191, 0.006114043675148562, 0.008337218123569023, 0.06906709064608263, 9.999999999998899e-05, 0.11467695520907151, 0.020509479689728494, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035673897918364506, 0.011746713788276963, 0.009029621145718592, 0.034979006942589486, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010295792395720316, 0.020895171761693976, 0.013834755371792906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1270366365148844, 0.14282297120220955, 0.15274102194285755, 0.14555547921167566, 0.12349132879480862, 0.1889594590505823, 0.20858012043313234, 0.18128420536446332, 0.1693104747895421, 0.04896078709929208, 0.043545994656949194, 0.05800919032217722, 0.06171788164285896, 0.040122751429661374, 0.025742010392646786, 0.016163610455003807, 0.05734299357996864, 0.036491245194654076, 0.13185836373406123, 0.10625032389284239, 0.12674790359827925, 0.162575342730084, 0.11959303461085069, 0.10499507607538594, 0.11876108866594892, 0.0992085588338869, 0.1313013099247492, 0.12717296680321377, 0.14726418415892362, 0.17183412571773493, 0.15584738607417714, 0.14649958991199397, 0.15948603221660473, 0.16446106291989637, 0.17377774300845283, 0.1645544282658422, 0.12111396998189772, 0.052241146798915006, 0.06630538561394517, 0.11618441360918474, 0.11198726657981029, 0.1008110595672238, 0.09911701748663904, 0.10195647362722193, 0.10640206062658475, 0.15798466692835278, 0.11631560332986501, 0.15093678728352955, 0.16761671899678254, 0.1211986629554731, 0.13387420268378625, 0.16721016343416428, 0.13672762980922182, 0.16914116473186258, 9.999999999998899e-05, 9.999999999998899e-05, 0.10853226586393216, 0.1341875730594897, 0.1529773824195747, 0.11542663971220923, 0.1499122459765917, 0.11303164617845218, 0.01408514067570632, 0.2163785880876099, 0.16336698044083264, 0.11354886059955793, 0.15740439939845652, 0.15035444161271483, 0.13442972618316473, 0.11360766322572557, 0.11681875790293617, 0.0981571301902453, 0.12172761665844123, 0.11649340363309124, 0.07949676839736752, 0.0987451093564683, 0.07206463218204062, 0.10885240302230925, 0.17422277597153168, 0.09882361321768407, 0.09326297762611979, 0.16403044716288095, 0.15947757607498703, 0.16242819495573768, 0.1623418026019865, 0.17481758773005152, 0.15422037168434477, 0.18073546071090263, 0.19454568395781058, 0.17035523059719415, 0.03300277600842039, 0.02934579357220246, 0.03763438434328914, 0.030347138218927316, 0.050287641318044196, 0.03936508221167423, 0.06736726185185016, 0.025171662674329465, 0.058198680533832925]}, "mutation_prompt": null}
{"id": "75553910-4ba4-4989-b1f2-4fa92c1647e1", "solution": "import numpy as np\n\nclass ImprovedParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            return self.w * p + cognitive + social\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)  # Dynamic inertia weight adjustment\n                c1 = self.c1 * (1 - self.beta)  # Dynamic cognitive component adjustment\n                c2 = self.c2 * (1 + self.beta)  # Dynamic social component adjustment\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n\n        return g_best", "name": "ImprovedParticleResonanceOptimization", "description": "Introducing dynamic adjustment of cognitive and social components to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fb1aea45-65e7-4333-b480-e1fec2f8d233", "metadata": {"aucs": [0.26226925574084836, 0.16374520288591043, 0.24531587649002518, 0.17678277554497768, 0.14511670642857322, 0.14669364438899102, 0.14781194743896098, 0.12727074087170187, 0.1467436600997245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032765768393954064, 0.015194851412534405, 0.026836145020874724, 0.03992666040574533, 0.002049490990995939, 0.0319564105028054, 0.02506096781739975, 0.014215965645682949, 0.021880965053138413, 0.024565816829172804, 0.019740941587472527, 0.014095905950228693, 0.03244884245915747, 0.020897986467001806, 0.04465460657579223, 0.011151311181437307, 0.012897864604951237, 0.003397145308850713, 0.9848123585660407, 0.995673012863424, 0.9794128689805012, 0.0992796497959969, 0.07493505485505791, 0.9869956949125244, 0.9754314773123728, 0.9215639306602231, 0.0999794547304449, 0.04240984543070192, 0.03764324867596347, 0.05481439707665958, 0.11405029932744615, 0.038803405243526545, 0.038222215901167145, 0.04965543642523784, 0.03228997109963094, 0.0031637449037132948, 0.16473678240652712, 0.05038708217908461, 0.07341554900865399, 0.12671163825595044, 0.17714370338917684, 0.12950048563020866, 0.12582370963318612, 0.0634947648668649, 0.09651734028006975, 0.057821128185157944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024142883276579097, 0.03545389606398297, 0.10405326135725412, 0.007491048671213085, 0.008973705989903658, 0.08720675727587934, 9.999999999998899e-05, 0.139979229108532, 0.02333696757859738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03807429807983176, 0.011976802876391246, 0.011608053271273677, 0.03601505476265976, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007647964169780197, 0.02149313770712924, 0.01494710206107952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18433416203582598, 0.15229046045582617, 0.2597571807055661, 0.18267141664622533, 0.1365587001813806, 0.16674767546286717, 0.22780759301070197, 0.20017102375959728, 0.1704701590630615, 0.04986086810550516, 0.04468642236384135, 0.05860936839037789, 0.06260400996612514, 0.04147875762253139, 0.028912292555339225, 0.016778603727944708, 0.06426757992277832, 0.03209760283070451, 0.13360970481855416, 0.10866175705680692, 0.12935147086383691, 0.16359786960956424, 0.1217199886373943, 0.10994295609781202, 0.1256181776945655, 0.10118713744714802, 0.13134476142674445, 0.12647499488925895, 0.1611077697387565, 0.15044242597699065, 0.1566924422575786, 0.15856055925350143, 0.16204714312131796, 0.16599157148263188, 0.17377774300845283, 0.16471293827409905, 0.12066928327334903, 0.052433744757842016, 0.0666123666703432, 0.11718007959567311, 0.11667254054971055, 0.10315887724803285, 0.09944530580354072, 0.10199185838876945, 0.11078754232623056, 0.16901385803699198, 0.1229061172938205, 0.1334577665066321, 0.16889773405849062, 0.12348216230739273, 0.13501889310957105, 0.1698194781910033, 0.14654816900354506, 0.17158243132698336, 0.14315618852212397, 9.999999999998899e-05, 0.15350974887905267, 0.14200121512655373, 0.15771461988174773, 0.1337479309790951, 0.16219133854386636, 0.13134675914745475, 0.020807269823429286, 0.22132114438390205, 0.17159607127933874, 0.11361483576096965, 0.15845940120344237, 0.154666736973182, 0.13481701836828086, 0.11681293539575421, 0.11709734450683718, 0.10070930636636422, 0.12172988915050587, 0.11678083019048702, 0.08241649588789446, 0.10114539495527175, 0.0722048045085465, 0.11021271366657004, 0.07243997048032691, 0.07452175271880823, 0.10086600538831703, 0.16557420539708145, 0.1641706718663528, 0.16666796896612213, 0.16547778407647273, 0.1804088471627996, 0.15870053661837824, 0.18387030530323378, 0.19572296240493614, 0.17300682146639557, 0.03432561579267279, 0.029771930941781655, 0.038296405322071014, 0.031642487619118365, 0.050972945711723505, 0.04003712079541255, 0.07217717014229041, 0.028605496064868063, 0.060914251581970724]}, "mutation_prompt": null}
{"id": "29f62d41-f5be-43f4-b8eb-2affd48f9540", "solution": "import numpy as np\n\nclass EnhancedParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n        self.elitism_rate = elitism_rate\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            return self.w * p + cognitive + social\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)  # Dynamic inertia weight adjustment\n                c1 = self.c1 * (1 - self.beta)  # Dynamic cognitive component adjustment\n                c2 = self.c2 * (1 + self.beta)  # Dynamic social component adjustment\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n            # Introducing Elitism\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate*self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedParticleResonanceOptimization", "description": "Introducing elitism strategy to preserve the best solutions and enhance exploitation for faster convergence.", "configspace": "", "generation": 14, "fitness": 0.10389185342495605, "feedback": "The algorithm EnhancedParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.16.", "error": "", "parent_id": "fb1aea45-65e7-4333-b480-e1fec2f8d233", "metadata": {"aucs": [0.21256118704109261, 0.16340368504498437, 0.29069877525708354, 0.1767530027830453, 0.14014876858146197, 0.14669364438899102, 0.14774836924701817, 0.12709761657483776, 0.1492336254661797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0441251410276724, 0.01467079663371329, 0.033774209117767295, 0.02786411036718983, 0.020705436181499004, 0.03497656413322203, 0.01835693872004973, 0.02322628441952279, 0.019963932575147947, 0.025270700669624224, 0.027066031569920268, 0.01685863119866915, 0.03376539154541647, 0.007984945930581633, 0.035054947072184595, 0.007880443800219239, 0.009887472098987438, 0.003874823060593169, 0.9822249243590642, 0.995673012863424, 0.9766886518059691, 0.09917538573163076, 0.07492594628400295, 0.9869956949125244, 0.9702307153216347, 0.9033309437840291, 0.09997685153201508, 0.04240984543070192, 0.03722456620418946, 0.053517244151198295, 0.12278284869480305, 0.035693341222269526, 0.038222215901167145, 0.05037241218294164, 0.03635130613150561, 9.999999999998899e-05, 0.1641130582138085, 0.0517663993298656, 0.08741267292020294, 0.1427090718156493, 0.1750078362377826, 0.12920914492267488, 0.062184669786968905, 0.05931056463008866, 0.08178637689317181, 0.057765558351072666, 9.999999999998899e-05, 0.0049574676423661534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08576161700373008, 0.08250664321307777, 0.003884505421175577, 0.06839073614770586, 0.1587761438744063, 0.04689849854110484, 0.11554231765569078, 0.003700246341400981, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02268179540527271, 0.0008426622287586172, 0.013759232006431144, 0.035557974842040485, 9.999999999998899e-05, 9.999999999998899e-05, 0.020832710687259115, 0.009538313190473158, 0.009242063396908473, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23811249647167498, 0.16390884288657848, 0.28735971957854867, 0.17244334789420568, 0.1348798917661005, 0.18420031933296754, 0.2548548236173961, 0.24672336569354347, 0.2435239735135224, 0.049437043655342294, 0.0351896535733347, 0.05843360185991786, 0.06225360041113259, 0.03644173072128665, 0.052281646704676166, 0.013423221174832523, 0.0497926748702201, 0.032081335362183605, 0.09644205992593446, 0.10884437497590138, 0.10290124498407893, 0.12765805500086302, 0.12511668911445573, 0.12237083411491279, 0.14280347914978975, 0.09809664063565182, 0.1336951869528048, 0.11955619020839126, 0.13192881214979257, 0.15177160825220815, 0.15980334229621562, 0.1412149698650348, 0.15430428084336567, 0.16126615841699732, 0.17377774300845283, 0.1713299476190967, 0.12433142633238836, 0.05250433371669738, 0.07799617708072804, 0.1153903374431553, 0.13294772472403948, 0.10981674035973754, 0.09929757606093514, 0.1052831909248978, 0.09302073980315295, 0.16857631683726082, 0.13237632692477697, 0.13345086981233123, 0.1683960076578731, 0.15225716098829467, 0.136201451024744, 0.16776653308596634, 0.1510772851542752, 0.17279284131068473, 0.1336546797123307, 9.999999999998899e-05, 0.15907647719277795, 0.14549972937178335, 0.15828948095013962, 0.12995396465153608, 0.14875535802770268, 0.15240321573378424, 0.11253090972070745, 0.1631415083791975, 0.1648426122351997, 0.11361483576096965, 0.15761966728172616, 0.14882648549607114, 0.1579063216312554, 0.10963589762870618, 0.12277822132427496, 0.10011137152178484, 0.1521808063686283, 0.1165558778608512, 0.07658387838118719, 0.14853106975931873, 0.09740683053758259, 0.12885271520822117, 0.07093517125011839, 0.07558281298430813, 0.10022628785345444, 0.16420753941622246, 0.15244092251442654, 0.17079842857590377, 0.1540363060745289, 0.17500325698222474, 0.16455595912190057, 0.17317492071277152, 0.19533577064217356, 0.16598345346334298, 0.0403220233131637, 0.028153521479818977, 0.033487160644089964, 0.03953164843425405, 0.05237161483059116, 0.036450850874283014, 0.06314485135801684, 0.03316523734274668, 0.05689507962424045]}, "mutation_prompt": null}
{"id": "129cccbe-aaaf-4768-9e5b-88cfbf5282c1", "solution": "import numpy as np\n\nclass EnhancedParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n        self.elitism_rate = elitism_rate\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            return self.w * p + cognitive + social\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)  # Dynamic inertia weight adjustment\n                c1 = self.c1 * (1 - self.beta) * (1 - min(1, (func(particles[i]) - func(g_best)) / func(g_best)))  # Dynamic cognitive component adjustment\n                c2 = self.c2 * (1 + self.beta) * (1 - min(1, (func(particles[i]) - func(g_best)) / func(g_best)))  # Dynamic social component adjustment\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n            # Introducing Elitism\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate*self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedParticleResonanceOptimization", "description": "Introducing dynamic adjustment of the cognitive and social components based on particle performance to enhance exploitation.", "configspace": "", "generation": 15, "fitness": 0.0957743910816452, "feedback": "The algorithm EnhancedParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.16.", "error": "", "parent_id": "29f62d41-f5be-43f4-b8eb-2affd48f9540", "metadata": {"aucs": [0.18199889359639132, 0.16043155452622382, 0.2509844176021244, 0.1760609537272516, 0.138590357910933, 0.1462102163393969, 0.14537535751347608, 0.12562317547446622, 0.14534317243248984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03968194296731986, 0.01467079663371329, 0.03067690792763278, 0.019494762059064863, 0.017783278806217773, 0.03238912186336951, 0.018248263482334326, 0.021645963073040564, 0.018859585401493906, 0.02252092461840549, 0.01886376093548403, 0.014097085603289594, 0.03230616760801219, 0.007921505898881298, 0.033123881171360336, 0.00710522239599809, 0.009067053932864111, 9.999999999998899e-05, 0.9631768356749575, 0.9929573182464839, 0.9495592126634905, 0.09819300789048069, 0.07480966573818115, 0.9712709679887865, 0.9371191650421286, 0.7895562416188892, 0.09944098264082168, 0.042281731877272466, 0.030629969359337372, 0.051982568365621984, 0.10598698346109836, 0.0348678680943485, 0.038099393844473695, 0.045545832431997724, 0.035141651662774165, 9.999999999998899e-05, 0.15966447232755576, 0.049961047989163454, 0.0756501394246889, 0.1396987887476524, 0.16567110760883896, 0.1259557237934823, 0.056701190650148, 0.05931056463008866, 0.07077033608292094, 0.05676281599145583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0615578875810987, 0.05746288846709535, 9.999999999998899e-05, 0.04677932602096735, 0.08204653387572924, 0.021355526290491644, 0.07137569045333547, 0.0004431514416688431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01351091062371601, 0.0007250943659984355, 0.011922459846355538, 0.032449831381835215, 9.999999999998899e-05, 9.999999999998899e-05, 0.01566551549698647, 0.00042197938597687834, 0.004607882119421758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19608783903465477, 0.15580890147652315, 0.25458852229073414, 0.15109742576599272, 0.13125548132223064, 0.1685895089736016, 0.20444718542039864, 0.200650198704872, 0.1947082458814966, 0.04673680063670471, 0.03217370589724833, 0.056633067655315616, 0.059659261022203425, 0.03454329890940988, 0.04615223753227271, 0.013034980052841094, 0.04661830393145172, 0.031967463082537506, 0.08964637834234968, 0.10764155887197924, 0.09359688893294482, 0.11118440044706768, 0.11419360518816635, 0.09905602371968658, 0.12081337256691482, 0.08617725851924973, 0.13277965253860202, 0.11799376185076749, 0.1296690420123383, 0.146121154343671, 0.15722011060779373, 0.13682271876316243, 0.14441322358594266, 0.15980891914134243, 0.17377774300845283, 0.16963619785562345, 0.10194427118076621, 0.05187017300811825, 0.0724698292708521, 0.10815603525010897, 0.11298268506721465, 0.09654013354546065, 0.0983127111102281, 0.1021832755134301, 0.0909145605451096, 0.16562316121132192, 0.1295979056453076, 0.13345086981233123, 0.16455296247274764, 0.14222443524974115, 0.13084807806970278, 0.16424128045811448, 0.14238552895865486, 0.1693358657355264, 0.085432457178928, 9.999999999998899e-05, 0.14773231621412597, 0.13422264842211773, 0.14503502329159623, 0.10054639992381909, 0.11735708817855361, 0.1354032851257163, 0.05329667783938752, 0.15559396078031618, 0.13758400683956518, 0.11341691027673495, 0.15364929214618184, 0.13280167848875535, 0.15113876400691206, 0.10264275696734526, 0.11613392920154242, 0.0892839182534515, 0.12922016070657716, 0.11537901201633594, 0.05980296912958205, 0.10935297631037466, 0.08637412314573745, 0.11597687865273398, 0.06782246880290244, 0.07379967652886277, 0.09709893614128173, 0.15652963569372536, 0.15015255183618825, 0.16705590821839778, 0.1496566039953302, 0.17041182505251673, 0.14846316752351285, 0.16713362285392452, 0.1918039353007993, 0.15642584527224357, 0.02953277822812339, 0.02408442411070122, 0.03347244551713502, 0.027577098208638184, 0.05148758637734541, 0.03194727894329119, 0.0582121796592211, 0.025071831472886386, 0.05394865611161259]}, "mutation_prompt": null}
{"id": "72fcb2be-9e6d-4b27-9f84-e5b8fb64340c", "solution": "import numpy as np\n\nclass EnhancedParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best, prev_velocity):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            velocity = self.w * prev_velocity + cognitive + social\n            return velocity\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)\n                c1 = self.c1 * (1 - self.beta)\n                c2 = self.c2 * (1 + self.beta)\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i], prev_velocities[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate*self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedParticleResonanceOptimization", "description": "Introducing adaptive velocity update with momentum for faster convergence.", "configspace": "", "generation": 16, "fitness": 0.1511771648454496, "feedback": "The algorithm EnhancedParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.18.", "error": "", "parent_id": "29f62d41-f5be-43f4-b8eb-2affd48f9540", "metadata": {"aucs": [0.2502709119452977, 0.33382099805139176, 0.5824294390689704, 0.25000545632771587, 0.47419662598369594, 0.2463172208597103, 0.39662311234606973, 0.2862607437330468, 0.3613386013837603, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09664161935985827, 0.06277355946342211, 0.092623098305744, 0.05070072368182332, 0.05799394933721125, 0.10836462577772421, 0.06268170493923353, 0.04823718757284878, 0.07907220954607708, 0.06032287122793478, 0.04547319288645446, 0.08285564079232954, 0.07488281018046894, 0.0350027297305785, 0.025570237093618053, 0.04798778429928807, 0.032259283678432116, 0.008661769118408325, 0.0748540243211997, 0.9905869292876984, 0.983620780349931, 0.09960484368137801, 0.975503498267262, 0.09899435756795061, 0.9826644034488561, 0.9758228713245167, 0.9684083968714964, 0.10393487961938952, 0.0865840523612269, 0.0918268527311853, 0.10032529147770564, 0.1343541846656291, 0.06037552165783111, 0.12113516595860219, 0.06519948205869919, 0.06776750375033358, 0.210892362053966, 0.11611409749840329, 0.13146031475853726, 0.1958408435582102, 0.30300638046787187, 0.1456474968126249, 0.07470682329761624, 0.13931163804962288, 0.1371981767114654, 0.1590182620091931, 9.999999999998899e-05, 9.999999999998899e-05, 0.043895352936638155, 0.036752413976933185, 9.999999999998899e-05, 0.3167395419079114, 0.01105280813970988, 0.11132771101808303, 0.1072958463283592, 9.999999999998899e-05, 0.2693573653063539, 0.1467431532983785, 0.13446702353770146, 0.12546854311844724, 9.999999999998899e-05, 9.999999999998899e-05, 0.19045692912886503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06495970287471664, 0.03802878865156778, 0.071580857134379, 0.07274751026426785, 0.006643186034885895, 0.004553649628903478, 0.12092490743625495, 0.06631542896134213, 0.057609681353743336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029782506654787322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12915476216055066, 0.11736784676424794, 0.21609354199860187, 9.999999999998899e-05, 0.017143802017870247, 0.02234107417342679, 9.999999999998899e-05, 0.023645195583795298, 0.09993716421254262, 0.363014662771764, 0.2912072838422748, 0.463526683013049, 0.21660201916748134, 0.2953573819502563, 0.24476235617528108, 0.4875774421037601, 0.3353735203373399, 0.37911110533314296, 0.03617298629798715, 0.064404295399617, 0.09925950774109593, 0.07428114898129246, 0.08981296396894178, 0.09172137513149514, 0.055038563040554433, 0.08248757110554084, 0.07305903090465404, 0.11813500731477067, 0.1368724285383741, 0.12986719875633335, 0.13021172231502864, 0.22134577331457572, 0.15685584918993012, 0.16888575829116148, 0.11480176351026206, 0.14038941886428913, 0.18168182319558424, 0.19722019159054416, 0.1638215328090007, 0.17314368907797162, 0.23073532694581989, 0.25378915500267196, 0.1968620672183211, 0.20706180480426017, 0.23063304426189046, 0.06502598775233526, 0.08927428907596424, 0.09622687359983995, 0.16115128382995514, 0.12967149403955358, 0.13339117952728885, 0.1715543362852442, 0.15287397851396345, 0.11186344197677045, 0.2031880429498124, 0.15448015974521512, 0.17932376237938674, 0.18322245015588845, 0.24861762373997454, 0.17573457026324724, 0.23028042549157257, 0.1953980576478208, 0.217851641830352, 0.16978547839150637, 0.16469396754248633, 0.17165672241587238, 0.16169217038266948, 0.18929609142826698, 0.16301805665912328, 0.18816901032020728, 0.17950169229132829, 0.20398154643420863, 0.1251102529378928, 0.163262427453977, 0.11914040688821348, 0.3460477548926987, 0.20068636308142607, 0.18897547433159767, 0.09955179653796498, 0.16894622003288118, 0.5654209650581521, 0.30849698137726234, 0.15694029779668106, 0.20648006737760183, 0.09158473051829574, 0.16755693430674512, 0.16748252886181159, 0.10533499310349492, 0.10357627369722977, 0.2856172971005533, 0.16702240590008854, 0.1758240980610546, 0.18186719136558704, 0.1661442114470496, 0.16247299009068483, 0.1672548325397174, 0.20166397591465302, 0.1899267942602133, 0.16945487885084332, 0.061114298975333825, 0.05315249749727313, 0.07592910067156522, 0.08866493673444242, 0.08496157767938106, 0.07384672620153909, 0.049208129112156884, 0.06677750065201649, 0.05884807246008239]}, "mutation_prompt": null}
{"id": "9f1e21a0-815a-44ef-a1ec-f23249861e15", "solution": "import numpy as np\n\nclass EnhancedParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best, prev_velocity):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            velocity = self.w * prev_velocity + cognitive + social\n            return velocity\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n        \n        w_min = 0.4\n        w_max = 0.9\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), w_min, w_max)\n                c1 = self.c1 * (1 - self.beta)\n                c2 = self.c2 * (1 + self.beta)\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i], prev_velocities[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate*self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedParticleResonanceOptimization", "description": "Introducing dynamic inertia weight adaptation based on particle performance for improved convergence.", "configspace": "", "generation": 17, "fitness": 0.1511771648454496, "feedback": "The algorithm EnhancedParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.18.", "error": "", "parent_id": "72fcb2be-9e6d-4b27-9f84-e5b8fb64340c", "metadata": {"aucs": [0.2502709119452977, 0.33382099805139176, 0.5824294390689704, 0.25000545632771587, 0.47419662598369594, 0.2463172208597103, 0.39662311234606973, 0.2862607437330468, 0.3613386013837603, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09664161935985827, 0.06277355946342211, 0.092623098305744, 0.05070072368182332, 0.05799394933721125, 0.10836462577772421, 0.06268170493923353, 0.04823718757284878, 0.07907220954607708, 0.06032287122793478, 0.04547319288645446, 0.08285564079232954, 0.07488281018046894, 0.0350027297305785, 0.025570237093618053, 0.04798778429928807, 0.032259283678432116, 0.008661769118408325, 0.0748540243211997, 0.9905869292876984, 0.983620780349931, 0.09960484368137801, 0.975503498267262, 0.09899435756795061, 0.9826644034488561, 0.9758228713245167, 0.9684083968714964, 0.10393487961938952, 0.0865840523612269, 0.0918268527311853, 0.10032529147770564, 0.1343541846656291, 0.06037552165783111, 0.12113516595860219, 0.06519948205869919, 0.06776750375033358, 0.210892362053966, 0.11611409749840329, 0.13146031475853726, 0.1958408435582102, 0.30300638046787187, 0.1456474968126249, 0.07470682329761624, 0.13931163804962288, 0.1371981767114654, 0.1590182620091931, 9.999999999998899e-05, 9.999999999998899e-05, 0.043895352936638155, 0.036752413976933185, 9.999999999998899e-05, 0.3167395419079114, 0.01105280813970988, 0.11132771101808303, 0.1072958463283592, 9.999999999998899e-05, 0.2693573653063539, 0.1467431532983785, 0.13446702353770146, 0.12546854311844724, 9.999999999998899e-05, 9.999999999998899e-05, 0.19045692912886503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06495970287471664, 0.03802878865156778, 0.071580857134379, 0.07274751026426785, 0.006643186034885895, 0.004553649628903478, 0.12092490743625495, 0.06631542896134213, 0.057609681353743336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029782506654787322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12915476216055066, 0.11736784676424794, 0.21609354199860187, 9.999999999998899e-05, 0.017143802017870247, 0.02234107417342679, 9.999999999998899e-05, 0.023645195583795298, 0.09993716421254262, 0.363014662771764, 0.2912072838422748, 0.463526683013049, 0.21660201916748134, 0.2953573819502563, 0.24476235617528108, 0.4875774421037601, 0.3353735203373399, 0.37911110533314296, 0.03617298629798715, 0.064404295399617, 0.09925950774109593, 0.07428114898129246, 0.08981296396894178, 0.09172137513149514, 0.055038563040554433, 0.08248757110554084, 0.07305903090465404, 0.11813500731477067, 0.1368724285383741, 0.12986719875633335, 0.13021172231502864, 0.22134577331457572, 0.15685584918993012, 0.16888575829116148, 0.11480176351026206, 0.14038941886428913, 0.18168182319558424, 0.19722019159054416, 0.1638215328090007, 0.17314368907797162, 0.23073532694581989, 0.25378915500267196, 0.1968620672183211, 0.20706180480426017, 0.23063304426189046, 0.06502598775233526, 0.08927428907596424, 0.09622687359983995, 0.16115128382995514, 0.12967149403955358, 0.13339117952728885, 0.1715543362852442, 0.15287397851396345, 0.11186344197677045, 0.2031880429498124, 0.15448015974521512, 0.17932376237938674, 0.18322245015588845, 0.24861762373997454, 0.17573457026324724, 0.23028042549157257, 0.1953980576478208, 0.217851641830352, 0.16978547839150637, 0.16469396754248633, 0.17165672241587238, 0.16169217038266948, 0.18929609142826698, 0.16301805665912328, 0.18816901032020728, 0.17950169229132829, 0.20398154643420863, 0.1251102529378928, 0.163262427453977, 0.11914040688821348, 0.3460477548926987, 0.20068636308142607, 0.18897547433159767, 0.09955179653796498, 0.16894622003288118, 0.5654209650581521, 0.30849698137726234, 0.15694029779668106, 0.20648006737760183, 0.09158473051829574, 0.16755693430674512, 0.16748252886181159, 0.10533499310349492, 0.10357627369722977, 0.2856172971005533, 0.16702240590008854, 0.1758240980610546, 0.18186719136558704, 0.1661442114470496, 0.16247299009068483, 0.1672548325397174, 0.20166397591465302, 0.1899267942602133, 0.16945487885084332, 0.061114298975333825, 0.05315249749727313, 0.07592910067156522, 0.08866493673444242, 0.08496157767938106, 0.07384672620153909, 0.049208129112156884, 0.06677750065201649, 0.05884807246008239]}, "mutation_prompt": null}
{"id": "dec690ee-8d2d-47a4-a17b-1315367ccaa2", "solution": "import numpy as np\n\nclass EnhancedParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best, prev_velocity):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            velocity = self.w * prev_velocity + cognitive + social\n            return velocity\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)\n                self.beta = np.clip(self.beta * (1 - self.momentum), 0.3, 0.8)  # Dynamic adaptation of beta\n                c1 = self.c1 * (1 - self.beta)\n                c2 = self.c2 * (1 + self.beta)  # Dynamic adaptation of cognitive and social components\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i], prev_velocities[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate*self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedParticleResonanceOptimization", "description": "Introducing dynamic adaptation of cognitive and social components to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 18, "fitness": 0.1511771648454496, "feedback": "The algorithm EnhancedParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.18.", "error": "", "parent_id": "72fcb2be-9e6d-4b27-9f84-e5b8fb64340c", "metadata": {"aucs": [0.2502709119452977, 0.33382099805139176, 0.5824294390689704, 0.25000545632771587, 0.47419662598369594, 0.2463172208597103, 0.39662311234606973, 0.2862607437330468, 0.3613386013837603, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09664161935985827, 0.06277355946342211, 0.092623098305744, 0.05070072368182332, 0.05799394933721125, 0.10836462577772421, 0.06268170493923353, 0.04823718757284878, 0.07907220954607708, 0.06032287122793478, 0.04547319288645446, 0.08285564079232954, 0.07488281018046894, 0.0350027297305785, 0.025570237093618053, 0.04798778429928807, 0.032259283678432116, 0.008661769118408325, 0.0748540243211997, 0.9905869292876984, 0.983620780349931, 0.09960484368137801, 0.975503498267262, 0.09899435756795061, 0.9826644034488561, 0.9758228713245167, 0.9684083968714964, 0.10393487961938952, 0.0865840523612269, 0.0918268527311853, 0.10032529147770564, 0.1343541846656291, 0.06037552165783111, 0.12113516595860219, 0.06519948205869919, 0.06776750375033358, 0.210892362053966, 0.11611409749840329, 0.13146031475853726, 0.1958408435582102, 0.30300638046787187, 0.1456474968126249, 0.07470682329761624, 0.13931163804962288, 0.1371981767114654, 0.1590182620091931, 9.999999999998899e-05, 9.999999999998899e-05, 0.043895352936638155, 0.036752413976933185, 9.999999999998899e-05, 0.3167395419079114, 0.01105280813970988, 0.11132771101808303, 0.1072958463283592, 9.999999999998899e-05, 0.2693573653063539, 0.1467431532983785, 0.13446702353770146, 0.12546854311844724, 9.999999999998899e-05, 9.999999999998899e-05, 0.19045692912886503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06495970287471664, 0.03802878865156778, 0.071580857134379, 0.07274751026426785, 0.006643186034885895, 0.004553649628903478, 0.12092490743625495, 0.06631542896134213, 0.057609681353743336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029782506654787322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12915476216055066, 0.11736784676424794, 0.21609354199860187, 9.999999999998899e-05, 0.017143802017870247, 0.02234107417342679, 9.999999999998899e-05, 0.023645195583795298, 0.09993716421254262, 0.363014662771764, 0.2912072838422748, 0.463526683013049, 0.21660201916748134, 0.2953573819502563, 0.24476235617528108, 0.4875774421037601, 0.3353735203373399, 0.37911110533314296, 0.03617298629798715, 0.064404295399617, 0.09925950774109593, 0.07428114898129246, 0.08981296396894178, 0.09172137513149514, 0.055038563040554433, 0.08248757110554084, 0.07305903090465404, 0.11813500731477067, 0.1368724285383741, 0.12986719875633335, 0.13021172231502864, 0.22134577331457572, 0.15685584918993012, 0.16888575829116148, 0.11480176351026206, 0.14038941886428913, 0.18168182319558424, 0.19722019159054416, 0.1638215328090007, 0.17314368907797162, 0.23073532694581989, 0.25378915500267196, 0.1968620672183211, 0.20706180480426017, 0.23063304426189046, 0.06502598775233526, 0.08927428907596424, 0.09622687359983995, 0.16115128382995514, 0.12967149403955358, 0.13339117952728885, 0.1715543362852442, 0.15287397851396345, 0.11186344197677045, 0.2031880429498124, 0.15448015974521512, 0.17932376237938674, 0.18322245015588845, 0.24861762373997454, 0.17573457026324724, 0.23028042549157257, 0.1953980576478208, 0.217851641830352, 0.16978547839150637, 0.16469396754248633, 0.17165672241587238, 0.16169217038266948, 0.18929609142826698, 0.16301805665912328, 0.18816901032020728, 0.17950169229132829, 0.20398154643420863, 0.1251102529378928, 0.163262427453977, 0.11914040688821348, 0.3460477548926987, 0.20068636308142607, 0.18897547433159767, 0.09955179653796498, 0.16894622003288118, 0.5654209650581521, 0.30849698137726234, 0.15694029779668106, 0.20648006737760183, 0.09158473051829574, 0.16755693430674512, 0.16748252886181159, 0.10533499310349492, 0.10357627369722977, 0.2856172971005533, 0.16702240590008854, 0.1758240980610546, 0.18186719136558704, 0.1661442114470496, 0.16247299009068483, 0.1672548325397174, 0.20166397591465302, 0.1899267942602133, 0.16945487885084332, 0.061114298975333825, 0.05315249749727313, 0.07592910067156522, 0.08866493673444242, 0.08496157767938106, 0.07384672620153909, 0.049208129112156884, 0.06677750065201649, 0.05884807246008239]}, "mutation_prompt": null}
{"id": "e95900c5-231f-4c5d-9e15-38ca7d17c22c", "solution": "class EnhancedParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5  # Initialize beta\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best, prev_velocity):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            velocity = self.w * prev_velocity + cognitive + social\n            return velocity\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)\n                self.beta = max(0.1, self.beta - 0.01)  # Adaptive beta update\n                c1 = self.c1 * (1 - self.beta)\n                c2 = self.c2 * (1 + self.beta)  # Adjust c2 based on beta\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i], prev_velocities[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate*self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedParticleResonanceOptimization", "description": "Introducing a novel adaptive beta update mechanism to dynamically adjust cognitive and social parameters during optimization for improved convergence.", "configspace": "", "generation": 19, "fitness": 0.1511771648454496, "feedback": "The algorithm EnhancedParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.18.", "error": "", "parent_id": "72fcb2be-9e6d-4b27-9f84-e5b8fb64340c", "metadata": {"aucs": [0.2502709119452977, 0.33382099805139176, 0.5824294390689704, 0.25000545632771587, 0.47419662598369594, 0.2463172208597103, 0.39662311234606973, 0.2862607437330468, 0.3613386013837603, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09664161935985827, 0.06277355946342211, 0.092623098305744, 0.05070072368182332, 0.05799394933721125, 0.10836462577772421, 0.06268170493923353, 0.04823718757284878, 0.07907220954607708, 0.06032287122793478, 0.04547319288645446, 0.08285564079232954, 0.07488281018046894, 0.0350027297305785, 0.025570237093618053, 0.04798778429928807, 0.032259283678432116, 0.008661769118408325, 0.0748540243211997, 0.9905869292876984, 0.983620780349931, 0.09960484368137801, 0.975503498267262, 0.09899435756795061, 0.9826644034488561, 0.9758228713245167, 0.9684083968714964, 0.10393487961938952, 0.0865840523612269, 0.0918268527311853, 0.10032529147770564, 0.1343541846656291, 0.06037552165783111, 0.12113516595860219, 0.06519948205869919, 0.06776750375033358, 0.210892362053966, 0.11611409749840329, 0.13146031475853726, 0.1958408435582102, 0.30300638046787187, 0.1456474968126249, 0.07470682329761624, 0.13931163804962288, 0.1371981767114654, 0.1590182620091931, 9.999999999998899e-05, 9.999999999998899e-05, 0.043895352936638155, 0.036752413976933185, 9.999999999998899e-05, 0.3167395419079114, 0.01105280813970988, 0.11132771101808303, 0.1072958463283592, 9.999999999998899e-05, 0.2693573653063539, 0.1467431532983785, 0.13446702353770146, 0.12546854311844724, 9.999999999998899e-05, 9.999999999998899e-05, 0.19045692912886503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06495970287471664, 0.03802878865156778, 0.071580857134379, 0.07274751026426785, 0.006643186034885895, 0.004553649628903478, 0.12092490743625495, 0.06631542896134213, 0.057609681353743336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029782506654787322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12915476216055066, 0.11736784676424794, 0.21609354199860187, 9.999999999998899e-05, 0.017143802017870247, 0.02234107417342679, 9.999999999998899e-05, 0.023645195583795298, 0.09993716421254262, 0.363014662771764, 0.2912072838422748, 0.463526683013049, 0.21660201916748134, 0.2953573819502563, 0.24476235617528108, 0.4875774421037601, 0.3353735203373399, 0.37911110533314296, 0.03617298629798715, 0.064404295399617, 0.09925950774109593, 0.07428114898129246, 0.08981296396894178, 0.09172137513149514, 0.055038563040554433, 0.08248757110554084, 0.07305903090465404, 0.11813500731477067, 0.1368724285383741, 0.12986719875633335, 0.13021172231502864, 0.22134577331457572, 0.15685584918993012, 0.16888575829116148, 0.11480176351026206, 0.14038941886428913, 0.18168182319558424, 0.19722019159054416, 0.1638215328090007, 0.17314368907797162, 0.23073532694581989, 0.25378915500267196, 0.1968620672183211, 0.20706180480426017, 0.23063304426189046, 0.06502598775233526, 0.08927428907596424, 0.09622687359983995, 0.16115128382995514, 0.12967149403955358, 0.13339117952728885, 0.1715543362852442, 0.15287397851396345, 0.11186344197677045, 0.2031880429498124, 0.15448015974521512, 0.17932376237938674, 0.18322245015588845, 0.24861762373997454, 0.17573457026324724, 0.23028042549157257, 0.1953980576478208, 0.217851641830352, 0.16978547839150637, 0.16469396754248633, 0.17165672241587238, 0.16169217038266948, 0.18929609142826698, 0.16301805665912328, 0.18816901032020728, 0.17950169229132829, 0.20398154643420863, 0.1251102529378928, 0.163262427453977, 0.11914040688821348, 0.3460477548926987, 0.20068636308142607, 0.18897547433159767, 0.09955179653796498, 0.16894622003288118, 0.5654209650581521, 0.30849698137726234, 0.15694029779668106, 0.20648006737760183, 0.09158473051829574, 0.16755693430674512, 0.16748252886181159, 0.10533499310349492, 0.10357627369722977, 0.2856172971005533, 0.16702240590008854, 0.1758240980610546, 0.18186719136558704, 0.1661442114470496, 0.16247299009068483, 0.1672548325397174, 0.20166397591465302, 0.1899267942602133, 0.16945487885084332, 0.061114298975333825, 0.05315249749727313, 0.07592910067156522, 0.08866493673444242, 0.08496157767938106, 0.07384672620153909, 0.049208129112156884, 0.06677750065201649, 0.05884807246008239]}, "mutation_prompt": null}
{"id": "f4a63d7b-1dda-43a5-af70-78489158e2cc", "solution": "import numpy as np\n\nclass EnhancedParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best, prev_velocity):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            velocity = self.w * prev_velocity + cognitive + social\n            return velocity\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)\n                c1 = self.c1 * (1 - self.beta)\n                c2 = self.c2 * (1 + self.beta)\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i], prev_velocities[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate*self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedParticleResonanceOptimization", "description": "Introducing adaptive velocity update with momentum for faster convergence.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "72fcb2be-9e6d-4b27-9f84-e5b8fb64340c", "metadata": {"aucs": [0.2502709119452977, 0.33382099805139176, 0.5824294390689704, 0.25000545632771587, 0.47419662598369594, 0.2463172208597103, 0.39662311234606973, 0.2862607437330468, 0.3613386013837603, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09664161935985827, 0.06277355946342211, 0.092623098305744, 0.05070072368182332, 0.05799394933721125, 0.10836462577772421, 0.06268170493923353, 0.04823718757284878, 0.07907220954607708, 0.06032287122793478, 0.04547319288645446, 0.08285564079232954, 0.07488281018046894, 0.0350027297305785, 0.025570237093618053, 0.04798778429928807, 0.032259283678432116, 0.008661769118408325, 0.0748540243211997, 0.9905869292876984, 0.983620780349931, 0.09960484368137801, 0.975503498267262, 0.09899435756795061, 0.9826644034488561, 0.9758228713245167, 0.9684083968714964, 0.10393487961938952, 0.0865840523612269, 0.0918268527311853, 0.10032529147770564, 0.1343541846656291, 0.06037552165783111, 0.12113516595860219, 0.06519948205869919, 0.06776750375033358, 0.210892362053966, 0.11611409749840329, 0.13146031475853726, 0.1958408435582102, 0.30300638046787187, 0.1456474968126249, 0.07470682329761624, 0.13931163804962288, 0.1371981767114654, 0.1590182620091931, 9.999999999998899e-05, 9.999999999998899e-05, 0.043895352936638155, 0.036752413976933185, 9.999999999998899e-05, 0.3167395419079114, 0.01105280813970988, 0.11132771101808303, 0.1072958463283592, 9.999999999998899e-05, 0.2693573653063539, 0.1467431532983785, 0.13446702353770146, 0.12546854311844724, 9.999999999998899e-05, 9.999999999998899e-05, 0.19045692912886503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06495970287471664, 0.03802878865156778, 0.071580857134379, 0.07274751026426785, 0.006643186034885895, 0.004553649628903478, 0.12092490743625495, 0.06631542896134213, 0.057609681353743336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029782506654787322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12915476216055066, 0.11736784676424794, 0.21609354199860187, 9.999999999998899e-05, 0.017143802017870247, 0.02234107417342679, 9.999999999998899e-05, 0.023645195583795298, 0.09993716421254262, 0.363014662771764, 0.2912072838422748, 0.463526683013049, 0.21660201916748134, 0.2953573819502563, 0.24476235617528108, 0.4875774421037601, 0.3353735203373399, 0.37911110533314296, 0.03617298629798715, 0.064404295399617, 0.09925950774109593, 0.07428114898129246, 0.08981296396894178, 0.09172137513149514, 0.055038563040554433, 0.08248757110554084, 0.07305903090465404, 0.11813500731477067, 0.1368724285383741, 0.12986719875633335, 0.13021172231502864, 0.22134577331457572, 0.15685584918993012, 0.16888575829116148, 0.11480176351026206, 0.14038941886428913, 0.18168182319558424, 0.19722019159054416, 0.1638215328090007, 0.17314368907797162, 0.23073532694581989, 0.25378915500267196, 0.1968620672183211, 0.20706180480426017, 0.23063304426189046, 0.06502598775233526, 0.08927428907596424, 0.09622687359983995, 0.16115128382995514, 0.12967149403955358, 0.13339117952728885, 0.1715543362852442, 0.15287397851396345, 0.11186344197677045, 0.2031880429498124, 0.15448015974521512, 0.17932376237938674, 0.18322245015588845, 0.24861762373997454, 0.17573457026324724, 0.23028042549157257, 0.1953980576478208, 0.217851641830352, 0.16978547839150637, 0.16469396754248633, 0.17165672241587238, 0.16169217038266948, 0.18929609142826698, 0.16301805665912328, 0.18816901032020728, 0.17950169229132829, 0.20398154643420863, 0.1251102529378928, 0.163262427453977, 0.11914040688821348, 0.3460477548926987, 0.20068636308142607, 0.18897547433159767, 0.09955179653796498, 0.16894622003288118, 0.5654209650581521, 0.30849698137726234, 0.15694029779668106, 0.20648006737760183, 0.09158473051829574, 0.16755693430674512, 0.16748252886181159, 0.10533499310349492, 0.10357627369722977, 0.2856172971005533, 0.16702240590008854, 0.1758240980610546, 0.18186719136558704, 0.1661442114470496, 0.16247299009068483, 0.1672548325397174, 0.20166397591465302, 0.1899267942602133, 0.16945487885084332, 0.061114298975333825, 0.05315249749727313, 0.07592910067156522, 0.08866493673444242, 0.08496157767938106, 0.07384672620153909, 0.049208129112156884, 0.06677750065201649, 0.05884807246008239]}, "mutation_prompt": null}
{"id": "1ca41660-635e-4774-9bfc-439183b5109c", "solution": "class EnhancedParticleResonanceOptimizationEnhanced:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best, prev_velocity):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            velocity = self.w * prev_velocity + cognitive + social\n            return velocity\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)\n                c1 = self.c1 * (1 - self.beta)\n                c2 = self.c2 * (1 + self.beta)\n                if func(particles[i]) < func(particle_best[i]):\n                    self.c1 += 0.1\n                    self.c2 -= 0.1\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i], prev_velocities[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate*self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedParticleResonanceOptimizationEnhanced", "description": "Introducing dynamic adjustment of cognitive and social parameters based on particle performance for enhanced convergence.", "configspace": "", "generation": 21, "fitness": 0.14871848708833044, "feedback": "The algorithm EnhancedParticleResonanceOptimizationEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "72fcb2be-9e6d-4b27-9f84-e5b8fb64340c", "metadata": {"aucs": [0.24675496168443756, 0.3302066044197509, 0.5683967210815052, 0.24717027122870938, 0.46257610969853735, 0.24330294604866698, 0.38945657792402855, 0.283034077535085, 0.3516848742028086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09527301660249865, 0.06226772449811291, 0.09135200613970573, 0.05000984194044977, 0.05708989545472465, 0.10634357895520519, 0.061435846656632154, 0.04763760979229481, 0.07844613129231492, 0.05913749433828175, 0.044820259202601465, 0.08143412049446308, 0.07403663696948681, 0.03466807680554118, 0.02460199257398521, 0.047066454617855746, 0.03158051561284725, 0.008200861655832892, 0.07478493175265466, 0.9871386559608556, 0.9779189464493638, 0.09945713186427951, 0.9658574820212211, 0.09859015132331317, 0.9765216552684798, 0.9663476002051448, 0.9565856213512953, 0.10143651907578366, 0.08516666550837348, 0.09111991206014114, 0.09762459556902381, 0.13271499164302458, 0.0589552938511686, 0.11907593104872272, 0.06442329686097892, 0.06479075404996604, 0.20981845229505813, 0.11559768428076278, 0.13091173559870928, 0.19558097593067147, 0.29850966624555353, 0.1446940334651987, 0.07447779418755907, 0.13900268230564483, 0.13643447330712244, 0.1529757834542803, 9.999999999998899e-05, 9.999999999998899e-05, 0.04146283610144508, 0.034355776224658796, 9.999999999998899e-05, 0.3079632334882497, 0.010442890714281394, 0.10359221233944138, 0.10463647038557178, 9.999999999998899e-05, 0.25989335618783005, 0.14314661735752654, 0.1326948735921335, 0.12290762094257623, 9.999999999998899e-05, 9.999999999998899e-05, 0.18828157034238646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06323139414044121, 0.0357725825545242, 0.06972994572128033, 0.0712659008244515, 0.006169776640878477, 0.004230670090123012, 0.11835313165343364, 0.06484819986746915, 0.05520032292426824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02642999570956306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12411745491529058, 0.11347144504756923, 0.2102818529096343, 9.999999999998899e-05, 0.016249889943944384, 0.02104535441196187, 9.999999999998899e-05, 0.022851822845388448, 0.09663053140294575, 0.3576416084136347, 0.28428049002108824, 0.4567062462512752, 0.21374015477364572, 0.291107429307899, 0.24039848555708154, 0.47733852109116803, 0.33065041567877984, 0.37395989554557707, 0.03588625010476387, 0.06324298028385278, 0.09792166116244794, 0.07300249652578128, 0.08805427990243808, 0.09000411456194046, 0.054297253519565714, 0.08128587587403324, 0.0724223496805767, 0.11634948876130091, 0.1334810212707953, 0.12856595722361652, 0.1275472139191468, 0.21649294082688852, 0.15483699535794682, 0.16794069074008255, 0.11401615487872496, 0.13910257888139, 0.18000289762255417, 0.19590164128750776, 0.1631278895484194, 0.1726344833057759, 0.2294348717289446, 0.25076846588856994, 0.19575582220656418, 0.20604437184665458, 0.22910825730429463, 0.06464740254239132, 0.08791743055441015, 0.09462635065550062, 0.1596099177959699, 0.12905469703050143, 0.1324737323477364, 0.16939552524959234, 0.15182896725711725, 0.11093407485035545, 0.19916763036345497, 0.15203611935816186, 0.17045186973981907, 0.17662389634875986, 0.24051730465495202, 0.17226808066522514, 0.22582105128925, 0.1876764013538369, 0.21528496237308148, 0.16886532001320997, 0.16132948264740077, 0.1708417833210889, 0.15861283779533042, 0.1873817344823525, 0.16199330006213952, 0.18759703574671815, 0.17808781073613522, 0.20258883474754907, 0.12411536562465975, 0.16009459759774258, 0.11862740696284602, 0.3371162164484717, 0.1997105857931356, 0.18731484633791995, 0.09942404450159825, 0.16822188871227006, 0.5435990015192632, 0.3044465307852764, 0.15634413969693084, 0.2030974102016907, 0.09043951951865725, 0.16677592436402444, 0.16595032615356287, 0.10518217882666336, 0.10277378974687568, 0.28099183939381145, 0.16618192017906308, 0.16859659617080502, 0.1637617055481806, 0.16233457581846722, 0.1608169866610033, 0.16385903334571394, 0.19724203280596175, 0.17800298526812097, 0.1656817350715979, 0.05800651350064745, 0.05235291599549363, 0.07424260798404125, 0.08526641372371446, 0.08361745551355393, 0.07189731968759372, 0.046391564192059365, 0.06527919946539917, 0.05759387948580785]}, "mutation_prompt": null}
{"id": "bb901d8e-5ded-4f80-85fe-581e15ef7a46", "solution": "import numpy as np\n\nclass EnhancedDynamicParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best, prev_velocity):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            velocity = self.w * prev_velocity + cognitive + social\n            return velocity\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)\n                c1 = self.c1 * np.clip(1 - self.beta * np.random.rand(), 0.5, 2.0)\n                c2 = self.c2 * np.clip(1 + self.beta * np.random.rand(), 0.5, 2.0)\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i], prev_velocities[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate*self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimization", "description": "Introducing dynamic adaptation of cognitive and social parameters to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 22, "fitness": 0.15610243170593602, "feedback": "The algorithm EnhancedDynamicParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "72fcb2be-9e6d-4b27-9f84-e5b8fb64340c", "metadata": {"aucs": [0.3375689030563601, 0.7616709255831029, 0.5705623585683186, 0.3080552813308367, 0.24330720332905387, 0.32009260061388123, 0.24255242062475946, 0.4065195678714645, 0.35076944606352034, 9.999999999998899e-05, 0.052701855134075104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06036770447870243, 0.062095370241406656, 0.0462061845585271, 0.06710179839604202, 0.04965902781386888, 0.0508062958511567, 0.05466118625295335, 0.10695513872497486, 0.12220142138149082, 0.05614204767774522, 0.060785293375104965, 0.06610507626998496, 0.10184550038699514, 0.0219747776033119, 0.025969734090056984, 0.04678611468367544, 0.0351838645467466, 0.01762974625761049, 0.9837080663106954, 0.9905330750618795, 0.9657110121469334, 0.09929143157963394, 0.8447029843250249, 0.09902751177471458, 0.9759270796569768, 0.9874310846615948, 0.975262005255178, 0.1507592129045121, 0.14711372064506245, 0.0755533792357439, 0.11006418329652556, 0.17462994458765557, 0.1463194382161429, 0.1360013431750391, 0.14030219078295958, 0.0054780010378472355, 0.13127865500729552, 0.07842043224544504, 0.10779296909244607, 0.2803961612131467, 0.11431487539560425, 0.2069854710096971, 0.0933947832526526, 0.1186259613375934, 0.15748923388290914, 9.999999999998899e-05, 0.07145709338102246, 0.020218511833450803, 0.06598101536399259, 0.12818219637686545, 9.999999999998899e-05, 0.12722535766467102, 0.2354657335245094, 0.12692196240746356, 0.14973464575793782, 0.16808519505272956, 0.005813549715105948, 0.26285374587803567, 0.046642676894749435, 0.12188174989250822, 9.999999999998899e-05, 9.999999999998899e-05, 0.002898533742378806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0056210196604729035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13298773446535106, 0.038722531284618, 0.09558262256160921, 0.06476156754381279, 0.002141958408451994, 0.011661439630903492, 0.12248424684978798, 0.058270148118038545, 0.11747782221993186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07927059422511196, 9.999999999998899e-05, 0.02561334128184478, 0.07812079693642204, 0.09159786485381805, 9.999999999998899e-05, 0.04246270290091869, 0.03803088399068166, 9.999999999998899e-05, 0.09164224916205821, 0.06301879918791486, 0.31683050678834845, 0.44624134748861455, 0.4368385945550918, 0.25976358901401686, 0.2396359048064015, 0.263388589702619, 0.4441846904834057, 0.38071752735783926, 0.3392119411912309, 0.08226888663006215, 0.06092993142274228, 0.026224052169080636, 0.06949526991909838, 0.08289166524271419, 0.06396484896348031, 0.05583027835081755, 0.07053301161590642, 0.08453530942299547, 0.11650322733912066, 0.12902434938950114, 0.13528581024264508, 0.17646997627130367, 0.17081002001286538, 0.18204892079042378, 0.16971625440804072, 0.13871392857167464, 0.14492516069402173, 0.1337558520133345, 0.12196457105820313, 0.15409919846735443, 0.2743213794235707, 0.2128967302386452, 0.18669125085386806, 0.16190212674028936, 0.22963096697334806, 0.15878056294674503, 0.08017982857429962, 0.0741001024946436, 0.1144873640570937, 0.22206023155827503, 0.18981931630329585, 0.16594880968552628, 0.19065535442807202, 0.20181213209696292, 0.14933541832148234, 0.19363167756627597, 0.17127909286637932, 0.2012568509247209, 0.22898375447947106, 0.1996652552653181, 0.1720100033463472, 0.1829973502648926, 0.18789077898415363, 0.2041169363431803, 0.18257727385499534, 0.16925137210606622, 0.19223372470325073, 0.17508643215383124, 0.17748024395398276, 0.16406826034377953, 0.16379028391289197, 0.19381639584578092, 0.1535297456783914, 0.18285094193697382, 0.1172763599916754, 0.16377629750059497, 0.4777817094896274, 0.19807743974204473, 0.2014991260915856, 0.10300473957935952, 0.1675954572872933, 0.2599538869202178, 0.35174651235477217, 0.1566208760989053, 0.07280993632559218, 0.19905520819228306, 0.1552425387231231, 0.1795319586569296, 0.1048363865052514, 0.10498025416716794, 0.17121365105662922, 0.19937028852435135, 0.17636832940517033, 0.1754373351980052, 0.17074019298911536, 0.20568561011236097, 0.16840467385532187, 0.1615483587647234, 0.1896301381742419, 0.1933355667679093, 0.06017782745245237, 0.06505296111289349, 0.061221426665064804, 0.10858621083471043, 0.07233914164178878, 0.08527895654475415, 0.04466245469989849, 0.0667394988757043, 0.08398143194710139]}, "mutation_prompt": null}
{"id": "eeb4bcbd-159d-4424-b20a-91245660d995", "solution": "import numpy as np\n\nclass EnhancedDynamicParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best, prev_velocity):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            velocity = self.w * prev_velocity + cognitive + social\n            return velocity\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)\n                c1 = self.c1 * np.clip(1 - self.beta * np.random.rand(), 0.5, 2.0)\n                c2 = self.c2 * np.clip(1 + self.beta * np.random.rand(), 0.5, 2.0)\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i], prev_velocities[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate*self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimization", "description": "Introducing dynamic adaptation of cognitive and social parameters to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "bb901d8e-5ded-4f80-85fe-581e15ef7a46", "metadata": {"aucs": [0.3375689030563601, 0.7616709255831029, 0.5705623585683186, 0.3080552813308367, 0.24330720332905387, 0.32009260061388123, 0.24255242062475946, 0.4065195678714645, 0.35076944606352034, 9.999999999998899e-05, 0.052701855134075104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06036770447870243, 0.062095370241406656, 0.0462061845585271, 0.06710179839604202, 0.04965902781386888, 0.0508062958511567, 0.05466118625295335, 0.10695513872497486, 0.12220142138149082, 0.05614204767774522, 0.060785293375104965, 0.06610507626998496, 0.10184550038699514, 0.0219747776033119, 0.025969734090056984, 0.04678611468367544, 0.0351838645467466, 0.01762974625761049, 0.9837080663106954, 0.9905330750618795, 0.9657110121469334, 0.09929143157963394, 0.8447029843250249, 0.09902751177471458, 0.9759270796569768, 0.9874310846615948, 0.975262005255178, 0.1507592129045121, 0.14711372064506245, 0.0755533792357439, 0.11006418329652556, 0.17462994458765557, 0.1463194382161429, 0.1360013431750391, 0.14030219078295958, 0.0054780010378472355, 0.13127865500729552, 0.07842043224544504, 0.10779296909244607, 0.2803961612131467, 0.11431487539560425, 0.2069854710096971, 0.0933947832526526, 0.1186259613375934, 0.15748923388290914, 9.999999999998899e-05, 0.07145709338102246, 0.020218511833450803, 0.06598101536399259, 0.12818219637686545, 9.999999999998899e-05, 0.12722535766467102, 0.2354657335245094, 0.12692196240746356, 0.14973464575793782, 0.16808519505272956, 0.005813549715105948, 0.26285374587803567, 0.046642676894749435, 0.12188174989250822, 9.999999999998899e-05, 9.999999999998899e-05, 0.002898533742378806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0056210196604729035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13298773446535106, 0.038722531284618, 0.09558262256160921, 0.06476156754381279, 0.002141958408451994, 0.011661439630903492, 0.12248424684978798, 0.058270148118038545, 0.11747782221993186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07927059422511196, 9.999999999998899e-05, 0.02561334128184478, 0.07812079693642204, 0.09159786485381805, 9.999999999998899e-05, 0.04246270290091869, 0.03803088399068166, 9.999999999998899e-05, 0.09164224916205821, 0.06301879918791486, 0.31683050678834845, 0.44624134748861455, 0.4368385945550918, 0.25976358901401686, 0.2396359048064015, 0.263388589702619, 0.4441846904834057, 0.38071752735783926, 0.3392119411912309, 0.08226888663006215, 0.06092993142274228, 0.026224052169080636, 0.06949526991909838, 0.08289166524271419, 0.06396484896348031, 0.05583027835081755, 0.07053301161590642, 0.08453530942299547, 0.11650322733912066, 0.12902434938950114, 0.13528581024264508, 0.17646997627130367, 0.17081002001286538, 0.18204892079042378, 0.16971625440804072, 0.13871392857167464, 0.14492516069402173, 0.1337558520133345, 0.12196457105820313, 0.15409919846735443, 0.2743213794235707, 0.2128967302386452, 0.18669125085386806, 0.16190212674028936, 0.22963096697334806, 0.15878056294674503, 0.08017982857429962, 0.0741001024946436, 0.1144873640570937, 0.22206023155827503, 0.18981931630329585, 0.16594880968552628, 0.19065535442807202, 0.20181213209696292, 0.14933541832148234, 0.19363167756627597, 0.17127909286637932, 0.2012568509247209, 0.22898375447947106, 0.1996652552653181, 0.1720100033463472, 0.1829973502648926, 0.18789077898415363, 0.2041169363431803, 0.18257727385499534, 0.16925137210606622, 0.19223372470325073, 0.17508643215383124, 0.17748024395398276, 0.16406826034377953, 0.16379028391289197, 0.19381639584578092, 0.1535297456783914, 0.18285094193697382, 0.1172763599916754, 0.16377629750059497, 0.4777817094896274, 0.19807743974204473, 0.2014991260915856, 0.10300473957935952, 0.1675954572872933, 0.2599538869202178, 0.35174651235477217, 0.1566208760989053, 0.07280993632559218, 0.19905520819228306, 0.1552425387231231, 0.1795319586569296, 0.1048363865052514, 0.10498025416716794, 0.17121365105662922, 0.19937028852435135, 0.17636832940517033, 0.1754373351980052, 0.17074019298911536, 0.20568561011236097, 0.16840467385532187, 0.1615483587647234, 0.1896301381742419, 0.1933355667679093, 0.06017782745245237, 0.06505296111289349, 0.061221426665064804, 0.10858621083471043, 0.07233914164178878, 0.08527895654475415, 0.04466245469989849, 0.0667394988757043, 0.08398143194710139]}, "mutation_prompt": null}
{"id": "2f4992d2-7df5-4340-8b16-26b57ceac7e1", "solution": "class FastDynamicParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best, prev_velocity, particle_performance):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            adaptive_w = self.w * (1 - np.tanh(particle_performance))\n            velocity = adaptive_w * prev_velocity + cognitive + social\n            return velocity\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n        particle_performance = np.zeros(self.num_particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)\n                c1 = self.c1 * np.clip(1 - self.beta * np.random.rand(), 0.5, 2.0)\n                c2 = self.c2 * np.clip(1 + self.beta * np.random.rand(), 0.5, 2.0)\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i], prev_velocities[i], particle_performance[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particle_performance[i] = 1 / (1 + func(particles[i]))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate*self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "FastDynamicParticleResonanceOptimization", "description": "Introducing adaptive inertia weight and dynamic cognitive and social parameter adjustments based on particle performance to enhance convergence speed.", "configspace": "", "generation": 24, "fitness": 0.15256074922852184, "feedback": "The algorithm FastDynamicParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.18.", "error": "", "parent_id": "bb901d8e-5ded-4f80-85fe-581e15ef7a46", "metadata": {"aucs": [0.37427880196660523, 0.7167461675947623, 0.4022304415177671, 0.33526586197672004, 0.2418813611631625, 0.32646635967536286, 0.24041546046515228, 0.37555119055535446, 0.36054217613797257, 9.999999999998899e-05, 0.0480922745757103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0636589271721063, 0.061682491563866626, 0.04602836702750024, 0.06792496365018219, 0.04904259048522186, 0.046911500420381724, 0.05564404588251959, 0.12704227062359297, 0.12992626451532907, 0.05529894732912366, 0.06083763554033672, 0.06836902201677442, 0.06954186392638761, 0.021541872539446172, 0.0257872241597894, 0.04643632749636495, 0.03497561341472488, 0.01729790912235507, 0.9809750523528968, 0.9888912618720455, 0.9592328827731269, 0.09915546113043183, 0.8140922763232088, 0.09884152755827658, 0.9712956734578223, 0.9850038798935848, 0.9704925575794919, 0.13980712527706196, 0.13788037615120718, 0.0726633476020263, 0.10831920161825159, 0.17606449708538252, 0.14616058249845132, 0.13361401429601683, 0.13687560274825572, 0.005352143515564234, 0.13147617275038082, 0.07836928712639268, 0.1076873204052996, 0.27820597732327157, 0.11210553000107226, 0.2058511689153789, 0.09363721700018324, 0.11851099343489002, 0.1477803719801838, 9.999999999998899e-05, 0.14245071459625347, 0.02141545747297846, 0.0706411757094334, 0.12712000536769752, 9.999999999998899e-05, 0.14140553797073097, 0.23003847900177665, 0.12212838217441091, 0.12168063198695922, 0.16887000584799006, 0.005758701048556247, 0.2432731448317208, 0.04550700189841517, 0.11626079415614532, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028760870386328463, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0054557738456892935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1304122129412093, 0.038760714841473254, 0.08275225090670335, 0.07266177610760682, 0.002096476229670907, 0.017365634485838166, 0.12869812602293385, 0.06417167891129616, 0.1006056156153936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07726382399880949, 9.999999999998899e-05, 0.013128434391443622, 0.07944444953048313, 0.09230827611998083, 9.999999999998899e-05, 0.04240790140762696, 0.03838619520825082, 9.999999999998899e-05, 0.0719012726802728, 0.06779553154169515, 0.25696538837537686, 0.37093120218577946, 0.4238096155653218, 0.25685000976587957, 0.22826512233750262, 0.2687350064860795, 0.3584652339535852, 0.3783814236475207, 0.3436699557726254, 0.07094339831195429, 0.06037978924413112, 0.02788122821584582, 0.07046312739291738, 0.08212082110830488, 0.06796196166781776, 0.05570582282043657, 0.06631293380520309, 0.0860137522898875, 0.13682773779672175, 0.1483966399667166, 0.11797844421467274, 0.16033895366611084, 0.19861242258091338, 0.1929643518043116, 0.17730453286432168, 0.13270469935325868, 0.15223458563339531, 0.14680978146263957, 0.12199242888855166, 0.1536295215065615, 0.2487930219903064, 0.19795988113626928, 0.1852096501923508, 0.16164024863929427, 0.22273040176483827, 0.15850318136025765, 0.0787408473708392, 0.07315462678366424, 0.10443571303288679, 0.19727708011364353, 0.24275774952558382, 0.13277680173870354, 0.19079226115232817, 0.20883453435266375, 0.12430924721944925, 0.18780790113449108, 0.19153714319149295, 0.17775032861225504, 0.196308554877069, 0.22111616088777442, 0.18072877090646722, 0.19958154789894456, 0.2295904746792563, 0.2026293547536332, 0.1822037330621613, 0.16684080179389604, 0.19167184052090547, 0.17311171064750197, 0.16636786767636003, 0.16382516317151785, 0.16255076932825907, 0.19329844634728444, 0.15246758545070538, 0.18082592487201155, 0.11806679097540307, 0.15812945678306367, 0.34954273395808755, 0.1955224985919688, 0.20119248400651235, 0.1046042760798368, 0.16718086304806368, 0.25774941168981624, 0.3471674530884761, 0.15620332292530203, 0.07262269024108825, 0.1992897707761624, 0.15236502238084426, 0.18186949754046178, 0.10465535597380693, 0.10482037600543859, 0.16382632846635148, 0.16919758249086425, 0.1677030090868955, 0.18026426690975406, 0.16121083381213464, 0.1662922187477538, 0.16990573359660555, 0.1754494031618704, 0.1798935405548585, 0.19343158845068265, 0.07177911462626707, 0.07579154932966559, 0.06428905229778081, 0.08671036382648623, 0.07180567513594727, 0.09054141645681013, 0.042537738979511075, 0.06930271552849299, 0.06462677989543608]}, "mutation_prompt": null}
{"id": "069d9e22-1ed4-4733-8139-b365d45b6513", "solution": "import numpy as np\n\nclass EnhancedDynamicParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best, prev_velocity):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            velocity = self.w * prev_velocity + cognitive + social\n            return velocity\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)\n                c1 = self.c1 * np.clip(1 - self.beta * np.random.rand(), 0.5, 2.0)\n                c2 = self.c2 * np.clip(1 + self.beta * np.random.rand(), 0.5, 2.0)\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i], prev_velocities[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate*self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimization", "description": "Introducing dynamic adaptation of cognitive and social parameters to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb901d8e-5ded-4f80-85fe-581e15ef7a46", "metadata": {"aucs": [0.3375689030563601, 0.7616709255831029, 0.5705623585683186, 0.3080552813308367, 0.24330720332905387, 0.32009260061388123, 0.24255242062475946, 0.4065195678714645, 0.35076944606352034, 9.999999999998899e-05, 0.052701855134075104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06036770447870243, 0.062095370241406656, 0.0462061845585271, 0.06710179839604202, 0.04965902781386888, 0.0508062958511567, 0.05466118625295335, 0.10695513872497486, 0.12220142138149082, 0.05614204767774522, 0.060785293375104965, 0.06610507626998496, 0.10184550038699514, 0.0219747776033119, 0.025969734090056984, 0.04678611468367544, 0.0351838645467466, 0.01762974625761049, 0.9837080663106954, 0.9905330750618795, 0.9657110121469334, 0.09929143157963394, 0.8447029843250249, 0.09902751177471458, 0.9759270796569768, 0.9874310846615948, 0.975262005255178, 0.1507592129045121, 0.14711372064506245, 0.0755533792357439, 0.11006418329652556, 0.17462994458765557, 0.1463194382161429, 0.1360013431750391, 0.14030219078295958, 0.0054780010378472355, 0.13127865500729552, 0.07842043224544504, 0.10779296909244607, 0.2803961612131467, 0.11431487539560425, 0.2069854710096971, 0.0933947832526526, 0.1186259613375934, 0.15748923388290914, 9.999999999998899e-05, 0.07145709338102246, 0.020218511833450803, 0.06598101536399259, 0.12818219637686545, 9.999999999998899e-05, 0.12722535766467102, 0.2354657335245094, 0.12692196240746356, 0.14973464575793782, 0.16808519505272956, 0.005813549715105948, 0.26285374587803567, 0.046642676894749435, 0.12188174989250822, 9.999999999998899e-05, 9.999999999998899e-05, 0.002898533742378806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0056210196604729035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13298773446535106, 0.038722531284618, 0.09558262256160921, 0.06476156754381279, 0.002141958408451994, 0.011661439630903492, 0.12248424684978798, 0.058270148118038545, 0.11747782221993186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07927059422511196, 9.999999999998899e-05, 0.02561334128184478, 0.07812079693642204, 0.09159786485381805, 9.999999999998899e-05, 0.04246270290091869, 0.03803088399068166, 9.999999999998899e-05, 0.09164224916205821, 0.06301879918791486, 0.31683050678834845, 0.44624134748861455, 0.4368385945550918, 0.25976358901401686, 0.2396359048064015, 0.263388589702619, 0.4441846904834057, 0.38071752735783926, 0.3392119411912309, 0.08226888663006215, 0.06092993142274228, 0.026224052169080636, 0.06949526991909838, 0.08289166524271419, 0.06396484896348031, 0.05583027835081755, 0.07053301161590642, 0.08453530942299547, 0.11650322733912066, 0.12902434938950114, 0.13528581024264508, 0.17646997627130367, 0.17081002001286538, 0.18204892079042378, 0.16971625440804072, 0.13871392857167464, 0.14492516069402173, 0.1337558520133345, 0.12196457105820313, 0.15409919846735443, 0.2743213794235707, 0.2128967302386452, 0.18669125085386806, 0.16190212674028936, 0.22963096697334806, 0.15878056294674503, 0.08017982857429962, 0.0741001024946436, 0.1144873640570937, 0.22206023155827503, 0.18981931630329585, 0.16594880968552628, 0.19065535442807202, 0.20181213209696292, 0.14933541832148234, 0.19363167756627597, 0.17127909286637932, 0.2012568509247209, 0.22898375447947106, 0.1996652552653181, 0.1720100033463472, 0.1829973502648926, 0.18789077898415363, 0.2041169363431803, 0.18257727385499534, 0.16925137210606622, 0.19223372470325073, 0.17508643215383124, 0.17748024395398276, 0.16406826034377953, 0.16379028391289197, 0.19381639584578092, 0.1535297456783914, 0.18285094193697382, 0.1172763599916754, 0.16377629750059497, 0.4777817094896274, 0.19807743974204473, 0.2014991260915856, 0.10300473957935952, 0.1675954572872933, 0.2599538869202178, 0.35174651235477217, 0.1566208760989053, 0.07280993632559218, 0.19905520819228306, 0.1552425387231231, 0.1795319586569296, 0.1048363865052514, 0.10498025416716794, 0.17121365105662922, 0.19937028852435135, 0.17636832940517033, 0.1754373351980052, 0.17074019298911536, 0.20568561011236097, 0.16840467385532187, 0.1615483587647234, 0.1896301381742419, 0.1933355667679093, 0.06017782745245237, 0.06505296111289349, 0.061221426665064804, 0.10858621083471043, 0.07233914164178878, 0.08527895654475415, 0.04466245469989849, 0.0667394988757043, 0.08398143194710139]}, "mutation_prompt": null}
{"id": "b2fe5cc5-b3df-4d3f-be5a-5faf0e737650", "solution": "import numpy as np\n\nclass EnhancedDynamicParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.beta = 0.5\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n\n    def __call__(self, func):\n        def init_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_velocity(p, g_best, particle_best, prev_velocity):\n            cognitive = self.c1 * np.random.rand() * (particle_best - p)\n            social = self.c2 * np.random.rand() * (g_best - p)\n            velocity = self.w * prev_velocity + cognitive + social\n            return velocity\n\n        particles = init_particles()\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                self.w = np.clip(self.w * (1 - self.beta), 0.4, 0.9)\n                c1 = self.c1 * np.clip(1 - self.beta * np.random.rand(), 0.5, 2.0)\n                c2 = self.c2 * np.clip(1 + self.beta * np.random.rand(), 0.5, 2.0)\n                velocities[i] = update_velocity(particles[i], g_best, particle_best[i], prev_velocities[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate*self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimization", "description": "Introducing dynamic adaptation of cognitive and social parameters to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb901d8e-5ded-4f80-85fe-581e15ef7a46", "metadata": {"aucs": [0.3375689030563601, 0.7616709255831029, 0.5705623585683186, 0.3080552813308367, 0.24330720332905387, 0.32009260061388123, 0.24255242062475946, 0.4065195678714645, 0.35076944606352034, 9.999999999998899e-05, 0.052701855134075104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06036770447870243, 0.062095370241406656, 0.0462061845585271, 0.06710179839604202, 0.04965902781386888, 0.0508062958511567, 0.05466118625295335, 0.10695513872497486, 0.12220142138149082, 0.05614204767774522, 0.060785293375104965, 0.06610507626998496, 0.10184550038699514, 0.0219747776033119, 0.025969734090056984, 0.04678611468367544, 0.0351838645467466, 0.01762974625761049, 0.9837080663106954, 0.9905330750618795, 0.9657110121469334, 0.09929143157963394, 0.8447029843250249, 0.09902751177471458, 0.9759270796569768, 0.9874310846615948, 0.975262005255178, 0.1507592129045121, 0.14711372064506245, 0.0755533792357439, 0.11006418329652556, 0.17462994458765557, 0.1463194382161429, 0.1360013431750391, 0.14030219078295958, 0.0054780010378472355, 0.13127865500729552, 0.07842043224544504, 0.10779296909244607, 0.2803961612131467, 0.11431487539560425, 0.2069854710096971, 0.0933947832526526, 0.1186259613375934, 0.15748923388290914, 9.999999999998899e-05, 0.07145709338102246, 0.020218511833450803, 0.06598101536399259, 0.12818219637686545, 9.999999999998899e-05, 0.12722535766467102, 0.2354657335245094, 0.12692196240746356, 0.14973464575793782, 0.16808519505272956, 0.005813549715105948, 0.26285374587803567, 0.046642676894749435, 0.12188174989250822, 9.999999999998899e-05, 9.999999999998899e-05, 0.002898533742378806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0056210196604729035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13298773446535106, 0.038722531284618, 0.09558262256160921, 0.06476156754381279, 0.002141958408451994, 0.011661439630903492, 0.12248424684978798, 0.058270148118038545, 0.11747782221993186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07927059422511196, 9.999999999998899e-05, 0.02561334128184478, 0.07812079693642204, 0.09159786485381805, 9.999999999998899e-05, 0.04246270290091869, 0.03803088399068166, 9.999999999998899e-05, 0.09164224916205821, 0.06301879918791486, 0.31683050678834845, 0.44624134748861455, 0.4368385945550918, 0.25976358901401686, 0.2396359048064015, 0.263388589702619, 0.4441846904834057, 0.38071752735783926, 0.3392119411912309, 0.08226888663006215, 0.06092993142274228, 0.026224052169080636, 0.06949526991909838, 0.08289166524271419, 0.06396484896348031, 0.05583027835081755, 0.07053301161590642, 0.08453530942299547, 0.11650322733912066, 0.12902434938950114, 0.13528581024264508, 0.17646997627130367, 0.17081002001286538, 0.18204892079042378, 0.16971625440804072, 0.13871392857167464, 0.14492516069402173, 0.1337558520133345, 0.12196457105820313, 0.15409919846735443, 0.2743213794235707, 0.2128967302386452, 0.18669125085386806, 0.16190212674028936, 0.22963096697334806, 0.15878056294674503, 0.08017982857429962, 0.0741001024946436, 0.1144873640570937, 0.22206023155827503, 0.18981931630329585, 0.16594880968552628, 0.19065535442807202, 0.20181213209696292, 0.14933541832148234, 0.19363167756627597, 0.17127909286637932, 0.2012568509247209, 0.22898375447947106, 0.1996652552653181, 0.1720100033463472, 0.1829973502648926, 0.18789077898415363, 0.2041169363431803, 0.18257727385499534, 0.16925137210606622, 0.19223372470325073, 0.17508643215383124, 0.17748024395398276, 0.16406826034377953, 0.16379028391289197, 0.19381639584578092, 0.1535297456783914, 0.18285094193697382, 0.1172763599916754, 0.16377629750059497, 0.4777817094896274, 0.19807743974204473, 0.2014991260915856, 0.10300473957935952, 0.1675954572872933, 0.2599538869202178, 0.35174651235477217, 0.1566208760989053, 0.07280993632559218, 0.19905520819228306, 0.1552425387231231, 0.1795319586569296, 0.1048363865052514, 0.10498025416716794, 0.17121365105662922, 0.19937028852435135, 0.17636832940517033, 0.1754373351980052, 0.17074019298911536, 0.20568561011236097, 0.16840467385532187, 0.1615483587647234, 0.1896301381742419, 0.1933355667679093, 0.06017782745245237, 0.06505296111289349, 0.061221426665064804, 0.10858621083471043, 0.07233914164178878, 0.08527895654475415, 0.04466245469989849, 0.0667394988757043, 0.08398143194710139]}, "mutation_prompt": null}
{"id": "efb9070a-22db-48ce-83b4-61a6d24ec23e", "solution": "class EnhancedDynamicParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                velocities[i] = self.w * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimization", "description": "Implementing a dynamic mutation strategy to enhance exploration capability and balance exploitation for faster convergence.", "configspace": "", "generation": 27, "fitness": 0.18896343791129583, "feedback": "The algorithm EnhancedDynamicParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "bb901d8e-5ded-4f80-85fe-581e15ef7a46", "metadata": {"aucs": [0.3958071481648744, 0.3941696686974212, 0.4394662538667389, 0.44107654022443, 0.3792658533346024, 0.40851149765290606, 0.4076148647041915, 0.411750566934017, 0.3869693429944344, 9.999999999998899e-05, 0.004238210868571901, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07792838889883791, 0.09334405173745186, 0.10062134699794711, 0.09520489280661637, 0.08467836354007086, 0.08747773388938063, 0.06933190818999901, 0.09397007240457056, 0.08248721901776768, 0.07952475773626011, 0.07420457836919891, 0.07247083504058538, 0.07615977692933396, 0.07487796135568947, 0.05473468903970591, 0.080385301633491, 0.09121545913773155, 0.060798945517544056, 0.9440351399390686, 0.9859581021637919, 0.9835593030048996, 0.8456422057424968, 0.9595395212813249, 0.8377749479175062, 0.9608684636374204, 0.9441081622990907, 0.9632409398571902, 0.2463301770461872, 0.24506996650765012, 0.20527368994693396, 0.2807873402805401, 0.24569924288475453, 0.2315973962144363, 0.2649926818223758, 0.22202410293878727, 0.22440431486479695, 0.22163586787994172, 0.20485826899171666, 0.2956236984230972, 0.22755555989648735, 0.26923008961703876, 0.24246975426473627, 0.1948010539615943, 0.20440803954390363, 0.22576257250477305, 0.1426115140721984, 0.1093626895326999, 0.11731908082065712, 0.13515908985844216, 0.12641810260325215, 0.12154438908681009, 0.15178451960798378, 0.11063517233344677, 0.14584608728062376, 0.14553960835562407, 0.14088941001011912, 0.11311648716639133, 0.12287372399560736, 0.14509609338862572, 0.13507840535776483, 0.12297204331041545, 0.12140561841651543, 0.12187752414427411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018060058747903507, 0.0478585443806101, 0.031658982178258355, 0.06596935958990158, 0.053708947003598184, 9.999999999998899e-05, 0.00956434783151161, 0.09707732052335227, 0.04270939512849514, 0.03230571409601457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0687252421784853, 0.08980184050114348, 0.08442684107963416, 0.08296235331279944, 0.04900205887101783, 0.05621662630941737, 0.08259524959630349, 0.0646366700815344, 0.06432138602388326, 0.3917385434853523, 0.36468178904747806, 0.3844369525848994, 0.34578632374628215, 0.3629307638568722, 0.3528358926909876, 0.38358575641806303, 0.3800571255560632, 0.3660533001928541, 0.07179526154331273, 0.07166138513696607, 0.05956545796564516, 0.07846122058231197, 0.0802332298296915, 0.09564086500653046, 0.06298402840154571, 0.07099129232936319, 0.07271480558399035, 0.15089882473363725, 0.1779652555760235, 0.20929967786867465, 0.18522025779257079, 0.14229165013467426, 0.14106342408334382, 0.27657521043190114, 0.16329326276146772, 0.1921964732657454, 0.2420331901846835, 0.2622741607030251, 0.2586103297664518, 0.26118757327626496, 0.2507734099573039, 0.27803318773617713, 0.26129589813765786, 0.259883933737016, 0.2559150662298816, 0.15880535166804077, 0.18879133401493875, 0.1793691589375016, 0.22401611419825518, 0.1627739762761795, 0.18366049438929122, 0.21104469873634157, 0.2147770364074304, 0.2220169105790083, 0.1944995506903635, 0.15750879247504668, 0.16982574749444979, 0.17576870558802526, 0.17244521719639183, 0.19538844299889424, 0.19157969106926898, 0.1701015756408697, 0.16886118897581726, 0.2095457599424655, 0.1785820757546711, 0.17709398342576843, 0.18264667765935072, 0.2387443907994674, 0.19036759620268873, 0.17596006463644465, 0.17165677285612668, 0.1720134367731574, 0.5299009063360209, 0.12518667783113013, 0.16313291585945822, 0.17012811215944545, 0.19670050520321947, 0.1964822923062668, 0.09912196980346033, 0.16757308851196218, 0.6078431764022562, 0.6097764073341361, 0.155254653056751, 0.0726195095258585, 0.20338978609628022, 0.16673416856047774, 0.20433361018532992, 0.3041344162660302, 0.10461254461744973, 0.391645526873299, 0.17876525705928326, 0.1555220332849665, 0.160460296872877, 0.17584433820568535, 0.17971144154139207, 0.16596381339652921, 0.16546727723575827, 0.16411923569299525, 0.16072432727065022, 0.0704897831974789, 0.06368379025705839, 0.06764325021618733, 0.07720073998083099, 0.08216152934298449, 0.07957567181293412, 0.0713961105634493, 0.08078015678792072, 0.07594641357889154]}, "mutation_prompt": null}
{"id": "553966b5-35d0-445c-9514-d4d855a75898", "solution": "class EnhancedDynamicParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                velocities[i] = self.w * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimization", "description": "Implementing a dynamic mutation strategy to enhance exploration capability and balance exploitation for faster convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "efb9070a-22db-48ce-83b4-61a6d24ec23e", "metadata": {"aucs": [0.3958071481648744, 0.3941696686974212, 0.4394662538667389, 0.44107654022443, 0.3792658533346024, 0.40851149765290606, 0.4076148647041915, 0.411750566934017, 0.3869693429944344, 9.999999999998899e-05, 0.004238210868571901, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07792838889883791, 0.09334405173745186, 0.10062134699794711, 0.09520489280661637, 0.08467836354007086, 0.08747773388938063, 0.06933190818999901, 0.09397007240457056, 0.08248721901776768, 0.07952475773626011, 0.07420457836919891, 0.07247083504058538, 0.07615977692933396, 0.07487796135568947, 0.05473468903970591, 0.080385301633491, 0.09121545913773155, 0.060798945517544056, 0.9440351399390686, 0.9859581021637919, 0.9835593030048996, 0.8456422057424968, 0.9595395212813249, 0.8377749479175062, 0.9608684636374204, 0.9441081622990907, 0.9632409398571902, 0.2463301770461872, 0.24506996650765012, 0.20527368994693396, 0.2807873402805401, 0.24569924288475453, 0.2315973962144363, 0.2649926818223758, 0.22202410293878727, 0.22440431486479695, 0.22163586787994172, 0.20485826899171666, 0.2956236984230972, 0.22755555989648735, 0.26923008961703876, 0.24246975426473627, 0.1948010539615943, 0.20440803954390363, 0.22576257250477305, 0.1426115140721984, 0.1093626895326999, 0.11731908082065712, 0.13515908985844216, 0.12641810260325215, 0.12154438908681009, 0.15178451960798378, 0.11063517233344677, 0.14584608728062376, 0.14553960835562407, 0.14088941001011912, 0.11311648716639133, 0.12287372399560736, 0.14509609338862572, 0.13507840535776483, 0.12297204331041545, 0.12140561841651543, 0.12187752414427411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018060058747903507, 0.0478585443806101, 0.031658982178258355, 0.06596935958990158, 0.053708947003598184, 9.999999999998899e-05, 0.00956434783151161, 0.09707732052335227, 0.04270939512849514, 0.03230571409601457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0687252421784853, 0.08980184050114348, 0.08442684107963416, 0.08296235331279944, 0.04900205887101783, 0.05621662630941737, 0.08259524959630349, 0.0646366700815344, 0.06432138602388326, 0.3917385434853523, 0.36468178904747806, 0.3844369525848994, 0.34578632374628215, 0.3629307638568722, 0.3528358926909876, 0.38358575641806303, 0.3800571255560632, 0.3660533001928541, 0.07179526154331273, 0.07166138513696607, 0.05956545796564516, 0.07846122058231197, 0.0802332298296915, 0.09564086500653046, 0.06298402840154571, 0.07099129232936319, 0.07271480558399035, 0.15089882473363725, 0.1779652555760235, 0.20929967786867465, 0.18522025779257079, 0.14229165013467426, 0.14106342408334382, 0.27657521043190114, 0.16329326276146772, 0.1921964732657454, 0.2420331901846835, 0.2622741607030251, 0.2586103297664518, 0.26118757327626496, 0.2507734099573039, 0.27803318773617713, 0.26129589813765786, 0.259883933737016, 0.2559150662298816, 0.15880535166804077, 0.18879133401493875, 0.1793691589375016, 0.22401611419825518, 0.1627739762761795, 0.18366049438929122, 0.21104469873634157, 0.2147770364074304, 0.2220169105790083, 0.1944995506903635, 0.15750879247504668, 0.16982574749444979, 0.17576870558802526, 0.17244521719639183, 0.19538844299889424, 0.19157969106926898, 0.1701015756408697, 0.16886118897581726, 0.2095457599424655, 0.1785820757546711, 0.17709398342576843, 0.18264667765935072, 0.2387443907994674, 0.19036759620268873, 0.17596006463644465, 0.17165677285612668, 0.1720134367731574, 0.5299009063360209, 0.12518667783113013, 0.16313291585945822, 0.17012811215944545, 0.19670050520321947, 0.1964822923062668, 0.09912196980346033, 0.16757308851196218, 0.6078431764022562, 0.6097764073341361, 0.155254653056751, 0.0726195095258585, 0.20338978609628022, 0.16673416856047774, 0.20433361018532992, 0.3041344162660302, 0.10461254461744973, 0.391645526873299, 0.17876525705928326, 0.1555220332849665, 0.160460296872877, 0.17584433820568535, 0.17971144154139207, 0.16596381339652921, 0.16546727723575827, 0.16411923569299525, 0.16072432727065022, 0.0704897831974789, 0.06368379025705839, 0.06764325021618733, 0.07720073998083099, 0.08216152934298449, 0.07957567181293412, 0.0713961105634493, 0.08078015678792072, 0.07594641357889154]}, "mutation_prompt": null}
{"id": "41d39d9e-9bde-4997-97b5-7782c5d26d11", "solution": "class EnhancedDynamicParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                velocities[i] = self.w * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimization", "description": "Implementing a dynamic mutation strategy to enhance exploration capability and balance exploitation for faster convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "efb9070a-22db-48ce-83b4-61a6d24ec23e", "metadata": {"aucs": [0.3958071481648744, 0.3941696686974212, 0.4394662538667389, 0.44107654022443, 0.3792658533346024, 0.40851149765290606, 0.4076148647041915, 0.411750566934017, 0.3869693429944344, 9.999999999998899e-05, 0.004238210868571901, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07792838889883791, 0.09334405173745186, 0.10062134699794711, 0.09520489280661637, 0.08467836354007086, 0.08747773388938063, 0.06933190818999901, 0.09397007240457056, 0.08248721901776768, 0.07952475773626011, 0.07420457836919891, 0.07247083504058538, 0.07615977692933396, 0.07487796135568947, 0.05473468903970591, 0.080385301633491, 0.09121545913773155, 0.060798945517544056, 0.9440351399390686, 0.9859581021637919, 0.9835593030048996, 0.8456422057424968, 0.9595395212813249, 0.8377749479175062, 0.9608684636374204, 0.9441081622990907, 0.9632409398571902, 0.2463301770461872, 0.24506996650765012, 0.20527368994693396, 0.2807873402805401, 0.24569924288475453, 0.2315973962144363, 0.2649926818223758, 0.22202410293878727, 0.22440431486479695, 0.22163586787994172, 0.20485826899171666, 0.2956236984230972, 0.22755555989648735, 0.26923008961703876, 0.24246975426473627, 0.1948010539615943, 0.20440803954390363, 0.22576257250477305, 0.1426115140721984, 0.1093626895326999, 0.11731908082065712, 0.13515908985844216, 0.12641810260325215, 0.12154438908681009, 0.15178451960798378, 0.11063517233344677, 0.14584608728062376, 0.14553960835562407, 0.14088941001011912, 0.11311648716639133, 0.12287372399560736, 0.14509609338862572, 0.13507840535776483, 0.12297204331041545, 0.12140561841651543, 0.12187752414427411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018060058747903507, 0.0478585443806101, 0.031658982178258355, 0.06596935958990158, 0.053708947003598184, 9.999999999998899e-05, 0.00956434783151161, 0.09707732052335227, 0.04270939512849514, 0.03230571409601457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0687252421784853, 0.08980184050114348, 0.08442684107963416, 0.08296235331279944, 0.04900205887101783, 0.05621662630941737, 0.08259524959630349, 0.0646366700815344, 0.06432138602388326, 0.3917385434853523, 0.36468178904747806, 0.3844369525848994, 0.34578632374628215, 0.3629307638568722, 0.3528358926909876, 0.38358575641806303, 0.3800571255560632, 0.3660533001928541, 0.07179526154331273, 0.07166138513696607, 0.05956545796564516, 0.07846122058231197, 0.0802332298296915, 0.09564086500653046, 0.06298402840154571, 0.07099129232936319, 0.07271480558399035, 0.15089882473363725, 0.1779652555760235, 0.20929967786867465, 0.18522025779257079, 0.14229165013467426, 0.14106342408334382, 0.27657521043190114, 0.16329326276146772, 0.1921964732657454, 0.2420331901846835, 0.2622741607030251, 0.2586103297664518, 0.26118757327626496, 0.2507734099573039, 0.27803318773617713, 0.26129589813765786, 0.259883933737016, 0.2559150662298816, 0.15880535166804077, 0.18879133401493875, 0.1793691589375016, 0.22401611419825518, 0.1627739762761795, 0.18366049438929122, 0.21104469873634157, 0.2147770364074304, 0.2220169105790083, 0.1944995506903635, 0.15750879247504668, 0.16982574749444979, 0.17576870558802526, 0.17244521719639183, 0.19538844299889424, 0.19157969106926898, 0.1701015756408697, 0.16886118897581726, 0.2095457599424655, 0.1785820757546711, 0.17709398342576843, 0.18264667765935072, 0.2387443907994674, 0.19036759620268873, 0.17596006463644465, 0.17165677285612668, 0.1720134367731574, 0.5299009063360209, 0.12518667783113013, 0.16313291585945822, 0.17012811215944545, 0.19670050520321947, 0.1964822923062668, 0.09912196980346033, 0.16757308851196218, 0.6078431764022562, 0.6097764073341361, 0.155254653056751, 0.0726195095258585, 0.20338978609628022, 0.16673416856047774, 0.20433361018532992, 0.3041344162660302, 0.10461254461744973, 0.391645526873299, 0.17876525705928326, 0.1555220332849665, 0.160460296872877, 0.17584433820568535, 0.17971144154139207, 0.16596381339652921, 0.16546727723575827, 0.16411923569299525, 0.16072432727065022, 0.0704897831974789, 0.06368379025705839, 0.06764325021618733, 0.07720073998083099, 0.08216152934298449, 0.07957567181293412, 0.0713961105634493, 0.08078015678792072, 0.07594641357889154]}, "mutation_prompt": null}
{"id": "34cd7671-2421-4b67-9906-9caf38163dc6", "solution": "class EnhancedDynamicParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                velocities[i] = self.w * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimization", "description": "Implementing a dynamic mutation strategy to enhance exploration capability and balance exploitation for faster convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "efb9070a-22db-48ce-83b4-61a6d24ec23e", "metadata": {"aucs": [0.3958071481648744, 0.3941696686974212, 0.4394662538667389, 0.44107654022443, 0.3792658533346024, 0.40851149765290606, 0.4076148647041915, 0.411750566934017, 0.3869693429944344, 9.999999999998899e-05, 0.004238210868571901, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07792838889883791, 0.09334405173745186, 0.10062134699794711, 0.09520489280661637, 0.08467836354007086, 0.08747773388938063, 0.06933190818999901, 0.09397007240457056, 0.08248721901776768, 0.07952475773626011, 0.07420457836919891, 0.07247083504058538, 0.07615977692933396, 0.07487796135568947, 0.05473468903970591, 0.080385301633491, 0.09121545913773155, 0.060798945517544056, 0.9440351399390686, 0.9859581021637919, 0.9835593030048996, 0.8456422057424968, 0.9595395212813249, 0.8377749479175062, 0.9608684636374204, 0.9441081622990907, 0.9632409398571902, 0.2463301770461872, 0.24506996650765012, 0.20527368994693396, 0.2807873402805401, 0.24569924288475453, 0.2315973962144363, 0.2649926818223758, 0.22202410293878727, 0.22440431486479695, 0.22163586787994172, 0.20485826899171666, 0.2956236984230972, 0.22755555989648735, 0.26923008961703876, 0.24246975426473627, 0.1948010539615943, 0.20440803954390363, 0.22576257250477305, 0.1426115140721984, 0.1093626895326999, 0.11731908082065712, 0.13515908985844216, 0.12641810260325215, 0.12154438908681009, 0.15178451960798378, 0.11063517233344677, 0.14584608728062376, 0.14553960835562407, 0.14088941001011912, 0.11311648716639133, 0.12287372399560736, 0.14509609338862572, 0.13507840535776483, 0.12297204331041545, 0.12140561841651543, 0.12187752414427411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018060058747903507, 0.0478585443806101, 0.031658982178258355, 0.06596935958990158, 0.053708947003598184, 9.999999999998899e-05, 0.00956434783151161, 0.09707732052335227, 0.04270939512849514, 0.03230571409601457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0687252421784853, 0.08980184050114348, 0.08442684107963416, 0.08296235331279944, 0.04900205887101783, 0.05621662630941737, 0.08259524959630349, 0.0646366700815344, 0.06432138602388326, 0.3917385434853523, 0.36468178904747806, 0.3844369525848994, 0.34578632374628215, 0.3629307638568722, 0.3528358926909876, 0.38358575641806303, 0.3800571255560632, 0.3660533001928541, 0.07179526154331273, 0.07166138513696607, 0.05956545796564516, 0.07846122058231197, 0.0802332298296915, 0.09564086500653046, 0.06298402840154571, 0.07099129232936319, 0.07271480558399035, 0.15089882473363725, 0.1779652555760235, 0.20929967786867465, 0.18522025779257079, 0.14229165013467426, 0.14106342408334382, 0.27657521043190114, 0.16329326276146772, 0.1921964732657454, 0.2420331901846835, 0.2622741607030251, 0.2586103297664518, 0.26118757327626496, 0.2507734099573039, 0.27803318773617713, 0.26129589813765786, 0.259883933737016, 0.2559150662298816, 0.15880535166804077, 0.18879133401493875, 0.1793691589375016, 0.22401611419825518, 0.1627739762761795, 0.18366049438929122, 0.21104469873634157, 0.2147770364074304, 0.2220169105790083, 0.1944995506903635, 0.15750879247504668, 0.16982574749444979, 0.17576870558802526, 0.17244521719639183, 0.19538844299889424, 0.19157969106926898, 0.1701015756408697, 0.16886118897581726, 0.2095457599424655, 0.1785820757546711, 0.17709398342576843, 0.18264667765935072, 0.2387443907994674, 0.19036759620268873, 0.17596006463644465, 0.17165677285612668, 0.1720134367731574, 0.5299009063360209, 0.12518667783113013, 0.16313291585945822, 0.17012811215944545, 0.19670050520321947, 0.1964822923062668, 0.09912196980346033, 0.16757308851196218, 0.6078431764022562, 0.6097764073341361, 0.155254653056751, 0.0726195095258585, 0.20338978609628022, 0.16673416856047774, 0.20433361018532992, 0.3041344162660302, 0.10461254461744973, 0.391645526873299, 0.17876525705928326, 0.1555220332849665, 0.160460296872877, 0.17584433820568535, 0.17971144154139207, 0.16596381339652921, 0.16546727723575827, 0.16411923569299525, 0.16072432727065022, 0.0704897831974789, 0.06368379025705839, 0.06764325021618733, 0.07720073998083099, 0.08216152934298449, 0.07957567181293412, 0.0713961105634493, 0.08078015678792072, 0.07594641357889154]}, "mutation_prompt": null}
{"id": "c9a814d0-6f7e-4502-9512-98eb80c2d1fd", "solution": "class EnhancedDynamicParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                velocities[i] = self.w * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimization", "description": "Implementing a dynamic mutation strategy to enhance exploration capability and balance exploitation for faster convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "efb9070a-22db-48ce-83b4-61a6d24ec23e", "metadata": {"aucs": [0.3958071481648744, 0.3941696686974212, 0.4394662538667389, 0.44107654022443, 0.3792658533346024, 0.40851149765290606, 0.4076148647041915, 0.411750566934017, 0.3869693429944344, 9.999999999998899e-05, 0.004238210868571901, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07792838889883791, 0.09334405173745186, 0.10062134699794711, 0.09520489280661637, 0.08467836354007086, 0.08747773388938063, 0.06933190818999901, 0.09397007240457056, 0.08248721901776768, 0.07952475773626011, 0.07420457836919891, 0.07247083504058538, 0.07615977692933396, 0.07487796135568947, 0.05473468903970591, 0.080385301633491, 0.09121545913773155, 0.060798945517544056, 0.9440351399390686, 0.9859581021637919, 0.9835593030048996, 0.8456422057424968, 0.9595395212813249, 0.8377749479175062, 0.9608684636374204, 0.9441081622990907, 0.9632409398571902, 0.2463301770461872, 0.24506996650765012, 0.20527368994693396, 0.2807873402805401, 0.24569924288475453, 0.2315973962144363, 0.2649926818223758, 0.22202410293878727, 0.22440431486479695, 0.22163586787994172, 0.20485826899171666, 0.2956236984230972, 0.22755555989648735, 0.26923008961703876, 0.24246975426473627, 0.1948010539615943, 0.20440803954390363, 0.22576257250477305, 0.1426115140721984, 0.1093626895326999, 0.11731908082065712, 0.13515908985844216, 0.12641810260325215, 0.12154438908681009, 0.15178451960798378, 0.11063517233344677, 0.14584608728062376, 0.14553960835562407, 0.14088941001011912, 0.11311648716639133, 0.12287372399560736, 0.14509609338862572, 0.13507840535776483, 0.12297204331041545, 0.12140561841651543, 0.12187752414427411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018060058747903507, 0.0478585443806101, 0.031658982178258355, 0.06596935958990158, 0.053708947003598184, 9.999999999998899e-05, 0.00956434783151161, 0.09707732052335227, 0.04270939512849514, 0.03230571409601457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0687252421784853, 0.08980184050114348, 0.08442684107963416, 0.08296235331279944, 0.04900205887101783, 0.05621662630941737, 0.08259524959630349, 0.0646366700815344, 0.06432138602388326, 0.3917385434853523, 0.36468178904747806, 0.3844369525848994, 0.34578632374628215, 0.3629307638568722, 0.3528358926909876, 0.38358575641806303, 0.3800571255560632, 0.3660533001928541, 0.07179526154331273, 0.07166138513696607, 0.05956545796564516, 0.07846122058231197, 0.0802332298296915, 0.09564086500653046, 0.06298402840154571, 0.07099129232936319, 0.07271480558399035, 0.15089882473363725, 0.1779652555760235, 0.20929967786867465, 0.18522025779257079, 0.14229165013467426, 0.14106342408334382, 0.27657521043190114, 0.16329326276146772, 0.1921964732657454, 0.2420331901846835, 0.2622741607030251, 0.2586103297664518, 0.26118757327626496, 0.2507734099573039, 0.27803318773617713, 0.26129589813765786, 0.259883933737016, 0.2559150662298816, 0.15880535166804077, 0.18879133401493875, 0.1793691589375016, 0.22401611419825518, 0.1627739762761795, 0.18366049438929122, 0.21104469873634157, 0.2147770364074304, 0.2220169105790083, 0.1944995506903635, 0.15750879247504668, 0.16982574749444979, 0.17576870558802526, 0.17244521719639183, 0.19538844299889424, 0.19157969106926898, 0.1701015756408697, 0.16886118897581726, 0.2095457599424655, 0.1785820757546711, 0.17709398342576843, 0.18264667765935072, 0.2387443907994674, 0.19036759620268873, 0.17596006463644465, 0.17165677285612668, 0.1720134367731574, 0.5299009063360209, 0.12518667783113013, 0.16313291585945822, 0.17012811215944545, 0.19670050520321947, 0.1964822923062668, 0.09912196980346033, 0.16757308851196218, 0.6078431764022562, 0.6097764073341361, 0.155254653056751, 0.0726195095258585, 0.20338978609628022, 0.16673416856047774, 0.20433361018532992, 0.3041344162660302, 0.10461254461744973, 0.391645526873299, 0.17876525705928326, 0.1555220332849665, 0.160460296872877, 0.17584433820568535, 0.17971144154139207, 0.16596381339652921, 0.16546727723575827, 0.16411923569299525, 0.16072432727065022, 0.0704897831974789, 0.06368379025705839, 0.06764325021618733, 0.07720073998083099, 0.08216152934298449, 0.07957567181293412, 0.0713961105634493, 0.08078015678792072, 0.07594641357889154]}, "mutation_prompt": null}
{"id": "b7fde23b-b361-44f1-9170-37ac1d1cc0c7", "solution": "class EnhancedDynamicParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                velocities[i] = self.w * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimization", "description": "Implementing a dynamic mutation strategy to enhance exploration capability and balance exploitation for faster convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "efb9070a-22db-48ce-83b4-61a6d24ec23e", "metadata": {"aucs": [0.3958071481648744, 0.3941696686974212, 0.4394662538667389, 0.44107654022443, 0.3792658533346024, 0.40851149765290606, 0.4076148647041915, 0.411750566934017, 0.3869693429944344, 9.999999999998899e-05, 0.004238210868571901, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07792838889883791, 0.09334405173745186, 0.10062134699794711, 0.09520489280661637, 0.08467836354007086, 0.08747773388938063, 0.06933190818999901, 0.09397007240457056, 0.08248721901776768, 0.07952475773626011, 0.07420457836919891, 0.07247083504058538, 0.07615977692933396, 0.07487796135568947, 0.05473468903970591, 0.080385301633491, 0.09121545913773155, 0.060798945517544056, 0.9440351399390686, 0.9859581021637919, 0.9835593030048996, 0.8456422057424968, 0.9595395212813249, 0.8377749479175062, 0.9608684636374204, 0.9441081622990907, 0.9632409398571902, 0.2463301770461872, 0.24506996650765012, 0.20527368994693396, 0.2807873402805401, 0.24569924288475453, 0.2315973962144363, 0.2649926818223758, 0.22202410293878727, 0.22440431486479695, 0.22163586787994172, 0.20485826899171666, 0.2956236984230972, 0.22755555989648735, 0.26923008961703876, 0.24246975426473627, 0.1948010539615943, 0.20440803954390363, 0.22576257250477305, 0.1426115140721984, 0.1093626895326999, 0.11731908082065712, 0.13515908985844216, 0.12641810260325215, 0.12154438908681009, 0.15178451960798378, 0.11063517233344677, 0.14584608728062376, 0.14553960835562407, 0.14088941001011912, 0.11311648716639133, 0.12287372399560736, 0.14509609338862572, 0.13507840535776483, 0.12297204331041545, 0.12140561841651543, 0.12187752414427411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018060058747903507, 0.0478585443806101, 0.031658982178258355, 0.06596935958990158, 0.053708947003598184, 9.999999999998899e-05, 0.00956434783151161, 0.09707732052335227, 0.04270939512849514, 0.03230571409601457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0687252421784853, 0.08980184050114348, 0.08442684107963416, 0.08296235331279944, 0.04900205887101783, 0.05621662630941737, 0.08259524959630349, 0.0646366700815344, 0.06432138602388326, 0.3917385434853523, 0.36468178904747806, 0.3844369525848994, 0.34578632374628215, 0.3629307638568722, 0.3528358926909876, 0.38358575641806303, 0.3800571255560632, 0.3660533001928541, 0.07179526154331273, 0.07166138513696607, 0.05956545796564516, 0.07846122058231197, 0.0802332298296915, 0.09564086500653046, 0.06298402840154571, 0.07099129232936319, 0.07271480558399035, 0.15089882473363725, 0.1779652555760235, 0.20929967786867465, 0.18522025779257079, 0.14229165013467426, 0.14106342408334382, 0.27657521043190114, 0.16329326276146772, 0.1921964732657454, 0.2420331901846835, 0.2622741607030251, 0.2586103297664518, 0.26118757327626496, 0.2507734099573039, 0.27803318773617713, 0.26129589813765786, 0.259883933737016, 0.2559150662298816, 0.15880535166804077, 0.18879133401493875, 0.1793691589375016, 0.22401611419825518, 0.1627739762761795, 0.18366049438929122, 0.21104469873634157, 0.2147770364074304, 0.2220169105790083, 0.1944995506903635, 0.15750879247504668, 0.16982574749444979, 0.17576870558802526, 0.17244521719639183, 0.19538844299889424, 0.19157969106926898, 0.1701015756408697, 0.16886118897581726, 0.2095457599424655, 0.1785820757546711, 0.17709398342576843, 0.18264667765935072, 0.2387443907994674, 0.19036759620268873, 0.17596006463644465, 0.17165677285612668, 0.1720134367731574, 0.5299009063360209, 0.12518667783113013, 0.16313291585945822, 0.17012811215944545, 0.19670050520321947, 0.1964822923062668, 0.09912196980346033, 0.16757308851196218, 0.6078431764022562, 0.6097764073341361, 0.155254653056751, 0.0726195095258585, 0.20338978609628022, 0.16673416856047774, 0.20433361018532992, 0.3041344162660302, 0.10461254461744973, 0.391645526873299, 0.17876525705928326, 0.1555220332849665, 0.160460296872877, 0.17584433820568535, 0.17971144154139207, 0.16596381339652921, 0.16546727723575827, 0.16411923569299525, 0.16072432727065022, 0.0704897831974789, 0.06368379025705839, 0.06764325021618733, 0.07720073998083099, 0.08216152934298449, 0.07957567181293412, 0.0713961105634493, 0.08078015678792072, 0.07594641357889154]}, "mutation_prompt": null}
{"id": "1a2de3b1-3700-457e-aa51-2893f61b38bf", "solution": "class EnhancedDynamicParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                velocities[i] = self.w * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimization", "description": "Implementing a dynamic mutation strategy to enhance exploration capability and balance exploitation for faster convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "efb9070a-22db-48ce-83b4-61a6d24ec23e", "metadata": {"aucs": [0.3958071481648744, 0.3941696686974212, 0.4394662538667389, 0.44107654022443, 0.3792658533346024, 0.40851149765290606, 0.4076148647041915, 0.411750566934017, 0.3869693429944344, 9.999999999998899e-05, 0.004238210868571901, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07792838889883791, 0.09334405173745186, 0.10062134699794711, 0.09520489280661637, 0.08467836354007086, 0.08747773388938063, 0.06933190818999901, 0.09397007240457056, 0.08248721901776768, 0.07952475773626011, 0.07420457836919891, 0.07247083504058538, 0.07615977692933396, 0.07487796135568947, 0.05473468903970591, 0.080385301633491, 0.09121545913773155, 0.060798945517544056, 0.9440351399390686, 0.9859581021637919, 0.9835593030048996, 0.8456422057424968, 0.9595395212813249, 0.8377749479175062, 0.9608684636374204, 0.9441081622990907, 0.9632409398571902, 0.2463301770461872, 0.24506996650765012, 0.20527368994693396, 0.2807873402805401, 0.24569924288475453, 0.2315973962144363, 0.2649926818223758, 0.22202410293878727, 0.22440431486479695, 0.22163586787994172, 0.20485826899171666, 0.2956236984230972, 0.22755555989648735, 0.26923008961703876, 0.24246975426473627, 0.1948010539615943, 0.20440803954390363, 0.22576257250477305, 0.1426115140721984, 0.1093626895326999, 0.11731908082065712, 0.13515908985844216, 0.12641810260325215, 0.12154438908681009, 0.15178451960798378, 0.11063517233344677, 0.14584608728062376, 0.14553960835562407, 0.14088941001011912, 0.11311648716639133, 0.12287372399560736, 0.14509609338862572, 0.13507840535776483, 0.12297204331041545, 0.12140561841651543, 0.12187752414427411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018060058747903507, 0.0478585443806101, 0.031658982178258355, 0.06596935958990158, 0.053708947003598184, 9.999999999998899e-05, 0.00956434783151161, 0.09707732052335227, 0.04270939512849514, 0.03230571409601457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0687252421784853, 0.08980184050114348, 0.08442684107963416, 0.08296235331279944, 0.04900205887101783, 0.05621662630941737, 0.08259524959630349, 0.0646366700815344, 0.06432138602388326, 0.3917385434853523, 0.36468178904747806, 0.3844369525848994, 0.34578632374628215, 0.3629307638568722, 0.3528358926909876, 0.38358575641806303, 0.3800571255560632, 0.3660533001928541, 0.07179526154331273, 0.07166138513696607, 0.05956545796564516, 0.07846122058231197, 0.0802332298296915, 0.09564086500653046, 0.06298402840154571, 0.07099129232936319, 0.07271480558399035, 0.15089882473363725, 0.1779652555760235, 0.20929967786867465, 0.18522025779257079, 0.14229165013467426, 0.14106342408334382, 0.27657521043190114, 0.16329326276146772, 0.1921964732657454, 0.2420331901846835, 0.2622741607030251, 0.2586103297664518, 0.26118757327626496, 0.2507734099573039, 0.27803318773617713, 0.26129589813765786, 0.259883933737016, 0.2559150662298816, 0.15880535166804077, 0.18879133401493875, 0.1793691589375016, 0.22401611419825518, 0.1627739762761795, 0.18366049438929122, 0.21104469873634157, 0.2147770364074304, 0.2220169105790083, 0.1944995506903635, 0.15750879247504668, 0.16982574749444979, 0.17576870558802526, 0.17244521719639183, 0.19538844299889424, 0.19157969106926898, 0.1701015756408697, 0.16886118897581726, 0.2095457599424655, 0.1785820757546711, 0.17709398342576843, 0.18264667765935072, 0.2387443907994674, 0.19036759620268873, 0.17596006463644465, 0.17165677285612668, 0.1720134367731574, 0.5299009063360209, 0.12518667783113013, 0.16313291585945822, 0.17012811215944545, 0.19670050520321947, 0.1964822923062668, 0.09912196980346033, 0.16757308851196218, 0.6078431764022562, 0.6097764073341361, 0.155254653056751, 0.0726195095258585, 0.20338978609628022, 0.16673416856047774, 0.20433361018532992, 0.3041344162660302, 0.10461254461744973, 0.391645526873299, 0.17876525705928326, 0.1555220332849665, 0.160460296872877, 0.17584433820568535, 0.17971144154139207, 0.16596381339652921, 0.16546727723575827, 0.16411923569299525, 0.16072432727065022, 0.0704897831974789, 0.06368379025705839, 0.06764325021618733, 0.07720073998083099, 0.08216152934298449, 0.07957567181293412, 0.0713961105634493, 0.08078015678792072, 0.07594641357889154]}, "mutation_prompt": null}
{"id": "e2236aba-ce4d-44df-9b41-e5638d8f344b", "solution": "class EnhancedDynamicParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                velocities[i] = self.w * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimization", "description": "Implementing a dynamic mutation strategy to enhance exploration capability and balance exploitation for faster convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "efb9070a-22db-48ce-83b4-61a6d24ec23e", "metadata": {"aucs": [0.3958071481648744, 0.3941696686974212, 0.4394662538667389, 0.44107654022443, 0.3792658533346024, 0.40851149765290606, 0.4076148647041915, 0.411750566934017, 0.3869693429944344, 9.999999999998899e-05, 0.004238210868571901, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07792838889883791, 0.09334405173745186, 0.10062134699794711, 0.09520489280661637, 0.08467836354007086, 0.08747773388938063, 0.06933190818999901, 0.09397007240457056, 0.08248721901776768, 0.07952475773626011, 0.07420457836919891, 0.07247083504058538, 0.07615977692933396, 0.07487796135568947, 0.05473468903970591, 0.080385301633491, 0.09121545913773155, 0.060798945517544056, 0.9440351399390686, 0.9859581021637919, 0.9835593030048996, 0.8456422057424968, 0.9595395212813249, 0.8377749479175062, 0.9608684636374204, 0.9441081622990907, 0.9632409398571902, 0.2463301770461872, 0.24506996650765012, 0.20527368994693396, 0.2807873402805401, 0.24569924288475453, 0.2315973962144363, 0.2649926818223758, 0.22202410293878727, 0.22440431486479695, 0.22163586787994172, 0.20485826899171666, 0.2956236984230972, 0.22755555989648735, 0.26923008961703876, 0.24246975426473627, 0.1948010539615943, 0.20440803954390363, 0.22576257250477305, 0.1426115140721984, 0.1093626895326999, 0.11731908082065712, 0.13515908985844216, 0.12641810260325215, 0.12154438908681009, 0.15178451960798378, 0.11063517233344677, 0.14584608728062376, 0.14553960835562407, 0.14088941001011912, 0.11311648716639133, 0.12287372399560736, 0.14509609338862572, 0.13507840535776483, 0.12297204331041545, 0.12140561841651543, 0.12187752414427411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018060058747903507, 0.0478585443806101, 0.031658982178258355, 0.06596935958990158, 0.053708947003598184, 9.999999999998899e-05, 0.00956434783151161, 0.09707732052335227, 0.04270939512849514, 0.03230571409601457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0687252421784853, 0.08980184050114348, 0.08442684107963416, 0.08296235331279944, 0.04900205887101783, 0.05621662630941737, 0.08259524959630349, 0.0646366700815344, 0.06432138602388326, 0.3917385434853523, 0.36468178904747806, 0.3844369525848994, 0.34578632374628215, 0.3629307638568722, 0.3528358926909876, 0.38358575641806303, 0.3800571255560632, 0.3660533001928541, 0.07179526154331273, 0.07166138513696607, 0.05956545796564516, 0.07846122058231197, 0.0802332298296915, 0.09564086500653046, 0.06298402840154571, 0.07099129232936319, 0.07271480558399035, 0.15089882473363725, 0.1779652555760235, 0.20929967786867465, 0.18522025779257079, 0.14229165013467426, 0.14106342408334382, 0.27657521043190114, 0.16329326276146772, 0.1921964732657454, 0.2420331901846835, 0.2622741607030251, 0.2586103297664518, 0.26118757327626496, 0.2507734099573039, 0.27803318773617713, 0.26129589813765786, 0.259883933737016, 0.2559150662298816, 0.15880535166804077, 0.18879133401493875, 0.1793691589375016, 0.22401611419825518, 0.1627739762761795, 0.18366049438929122, 0.21104469873634157, 0.2147770364074304, 0.2220169105790083, 0.1944995506903635, 0.15750879247504668, 0.16982574749444979, 0.17576870558802526, 0.17244521719639183, 0.19538844299889424, 0.19157969106926898, 0.1701015756408697, 0.16886118897581726, 0.2095457599424655, 0.1785820757546711, 0.17709398342576843, 0.18264667765935072, 0.2387443907994674, 0.19036759620268873, 0.17596006463644465, 0.17165677285612668, 0.1720134367731574, 0.5299009063360209, 0.12518667783113013, 0.16313291585945822, 0.17012811215944545, 0.19670050520321947, 0.1964822923062668, 0.09912196980346033, 0.16757308851196218, 0.6078431764022562, 0.6097764073341361, 0.155254653056751, 0.0726195095258585, 0.20338978609628022, 0.16673416856047774, 0.20433361018532992, 0.3041344162660302, 0.10461254461744973, 0.391645526873299, 0.17876525705928326, 0.1555220332849665, 0.160460296872877, 0.17584433820568535, 0.17971144154139207, 0.16596381339652921, 0.16546727723575827, 0.16411923569299525, 0.16072432727065022, 0.0704897831974789, 0.06368379025705839, 0.06764325021618733, 0.07720073998083099, 0.08216152934298449, 0.07957567181293412, 0.0713961105634493, 0.08078015678792072, 0.07594641357889154]}, "mutation_prompt": null}
{"id": "3c4e3c3a-8760-4bd4-8a23-587b62015534", "solution": "class EnhancedDynamicParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                velocities[i] = self.w * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimization", "description": "Implementing a dynamic mutation strategy to enhance exploration capability and balance exploitation for faster convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "efb9070a-22db-48ce-83b4-61a6d24ec23e", "metadata": {"aucs": [0.3958071481648744, 0.3941696686974212, 0.4394662538667389, 0.44107654022443, 0.3792658533346024, 0.40851149765290606, 0.4076148647041915, 0.411750566934017, 0.3869693429944344, 9.999999999998899e-05, 0.004238210868571901, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07792838889883791, 0.09334405173745186, 0.10062134699794711, 0.09520489280661637, 0.08467836354007086, 0.08747773388938063, 0.06933190818999901, 0.09397007240457056, 0.08248721901776768, 0.07952475773626011, 0.07420457836919891, 0.07247083504058538, 0.07615977692933396, 0.07487796135568947, 0.05473468903970591, 0.080385301633491, 0.09121545913773155, 0.060798945517544056, 0.9440351399390686, 0.9859581021637919, 0.9835593030048996, 0.8456422057424968, 0.9595395212813249, 0.8377749479175062, 0.9608684636374204, 0.9441081622990907, 0.9632409398571902, 0.2463301770461872, 0.24506996650765012, 0.20527368994693396, 0.2807873402805401, 0.24569924288475453, 0.2315973962144363, 0.2649926818223758, 0.22202410293878727, 0.22440431486479695, 0.22163586787994172, 0.20485826899171666, 0.2956236984230972, 0.22755555989648735, 0.26923008961703876, 0.24246975426473627, 0.1948010539615943, 0.20440803954390363, 0.22576257250477305, 0.1426115140721984, 0.1093626895326999, 0.11731908082065712, 0.13515908985844216, 0.12641810260325215, 0.12154438908681009, 0.15178451960798378, 0.11063517233344677, 0.14584608728062376, 0.14553960835562407, 0.14088941001011912, 0.11311648716639133, 0.12287372399560736, 0.14509609338862572, 0.13507840535776483, 0.12297204331041545, 0.12140561841651543, 0.12187752414427411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018060058747903507, 0.0478585443806101, 0.031658982178258355, 0.06596935958990158, 0.053708947003598184, 9.999999999998899e-05, 0.00956434783151161, 0.09707732052335227, 0.04270939512849514, 0.03230571409601457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0687252421784853, 0.08980184050114348, 0.08442684107963416, 0.08296235331279944, 0.04900205887101783, 0.05621662630941737, 0.08259524959630349, 0.0646366700815344, 0.06432138602388326, 0.3917385434853523, 0.36468178904747806, 0.3844369525848994, 0.34578632374628215, 0.3629307638568722, 0.3528358926909876, 0.38358575641806303, 0.3800571255560632, 0.3660533001928541, 0.07179526154331273, 0.07166138513696607, 0.05956545796564516, 0.07846122058231197, 0.0802332298296915, 0.09564086500653046, 0.06298402840154571, 0.07099129232936319, 0.07271480558399035, 0.15089882473363725, 0.1779652555760235, 0.20929967786867465, 0.18522025779257079, 0.14229165013467426, 0.14106342408334382, 0.27657521043190114, 0.16329326276146772, 0.1921964732657454, 0.2420331901846835, 0.2622741607030251, 0.2586103297664518, 0.26118757327626496, 0.2507734099573039, 0.27803318773617713, 0.26129589813765786, 0.259883933737016, 0.2559150662298816, 0.15880535166804077, 0.18879133401493875, 0.1793691589375016, 0.22401611419825518, 0.1627739762761795, 0.18366049438929122, 0.21104469873634157, 0.2147770364074304, 0.2220169105790083, 0.1944995506903635, 0.15750879247504668, 0.16982574749444979, 0.17576870558802526, 0.17244521719639183, 0.19538844299889424, 0.19157969106926898, 0.1701015756408697, 0.16886118897581726, 0.2095457599424655, 0.1785820757546711, 0.17709398342576843, 0.18264667765935072, 0.2387443907994674, 0.19036759620268873, 0.17596006463644465, 0.17165677285612668, 0.1720134367731574, 0.5299009063360209, 0.12518667783113013, 0.16313291585945822, 0.17012811215944545, 0.19670050520321947, 0.1964822923062668, 0.09912196980346033, 0.16757308851196218, 0.6078431764022562, 0.6097764073341361, 0.155254653056751, 0.0726195095258585, 0.20338978609628022, 0.16673416856047774, 0.20433361018532992, 0.3041344162660302, 0.10461254461744973, 0.391645526873299, 0.17876525705928326, 0.1555220332849665, 0.160460296872877, 0.17584433820568535, 0.17971144154139207, 0.16596381339652921, 0.16546727723575827, 0.16411923569299525, 0.16072432727065022, 0.0704897831974789, 0.06368379025705839, 0.06764325021618733, 0.07720073998083099, 0.08216152934298449, 0.07957567181293412, 0.0713961105634493, 0.08078015678792072, 0.07594641357889154]}, "mutation_prompt": null}
{"id": "6ed512ec-3772-45e7-ba03-fbf872359a24", "solution": "import numpy as np\n\nclass EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.chaos_map_param = 0.5\n\n    def chaos_map(self, x):\n        return 4 * x * (1 - x)\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                # Introduce chaos map for diversity maintenance\n                chaos_values = np.array([self.chaos_map(val) for val in particles[i]])\n                velocities[i] = self.w * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i] + chaos_values, -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing diversity maintenance through a chaotic map to enhance exploration and local search capabilities for faster convergence.", "configspace": "", "generation": 36, "fitness": 0.04533570040479952, "feedback": "The algorithm EnhancedDynamicParticleResonanceOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "efb9070a-22db-48ce-83b4-61a6d24ec23e", "metadata": {"aucs": [0.08774815958588056, 0.06432772651221763, 0.09169502728636048, 0.08952233024927114, 0.062138895920524906, 0.09270366728707813, 0.11406675323491255, 0.07431300570909605, 0.06863468668670525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 0.005375109906600173, 0.010643411704069683, 0.0012186513362246743, 0.006669962766643223, 0.018248263482334326, 9.999999999998899e-05, 0.010674738340807233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.0004952459975243739, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04882795056221534, 0.04219942533172094, 0.04287777107098589, 0.10782580112501294, 0.07779626762473058, 0.09543352718591291, 0.21745549165585265, 0.1508891473976699, 0.2799139522348232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015696465111761926, 0.00031549654350837564, 0.019460899947580934, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.052233822106523387, 0.0667108215001172, 0.02725496812965944, 9.999999999998899e-05, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.13879659513922615, 0.14838054695461433, 0.09425923977458062, 0.09708865527373767, 0.09580441870675127, 0.16112956940342849, 0.09716408355800721, 0.1210557193025883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.08488940002307188, 0.08609370886951495, 0.06202484883204873, 0.09855305120349966, 0.10852972522114013, 0.08365341288986039, 0.08808199726801991, 0.12189008528550926, 0.1063135203692036, 0.10880427187198605, 0.0962505644704219, 0.14352810184653642, 0.13800672315110074, 0.1138073754026484, 0.10384517204939925, 0.12028165949079228, 0.17377774300845283, 0.11363346445524236, 0.03812976025022474, 0.034008147686441226, 0.05463654710198407, 0.056957211629895754, 0.06406947898089654, 0.06342850570876157, 0.0837317855149382, 0.0997711199450243, 0.06412526395900253, 0.11943364695601921, 0.09388200728521401, 0.13345086981233123, 0.10289055837941885, 0.08463360551400423, 0.09307045902971678, 0.12245976138762271, 0.07872931414554718, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568623559107733, 0.07470026171088817, 0.08546898494208621, 0.06718871428537254, 0.1207914665021157, 0.06661401029160186, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.056093584489529724, 0.0506857903344724, 0.03738259240699027, 0.045511073114331335, 0.04690376827171172, 0.04019044166964181, 0.04143420019681854, 0.15514635601589, 0.16732469077502377, 0.17894884865258287, 0.16701835004135135, 0.1571761298465464, 0.15615515598217022, 0.1679663745552078, 0.15878492344179995, 0.17996298541164268, 0.007565743619712739, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.020045516730027746, 0.016228383701229143, 9.999999999998899e-05, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 37, "fitness": 0.19434072547619655, "feedback": "The algorithm EnhancedDynamicParticleResonanceOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "efb9070a-22db-48ce-83b4-61a6d24ec23e", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "dc56b618-7474-4904-9acc-e41571d6831a", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "5695d30c-bc90-4b50-899a-8514dc999b79", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "76fb2847-5335-4590-bda5-846810f9e1c9", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "0385ffb4-61c8-4336-abf4-a852659ff844", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "cbc28642-9094-407c-95a6-3c3ff2d305e2", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "e6605fae-e7c7-45e6-ac8f-b98b32453efa", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "c0240542-aa20-4c56-a1cd-857057545948", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "adeb92f7-5d98-4934-9e06-3fdd164894b9", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "99243a95-912e-4916-84b0-411a13dab521", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "af34f702-175b-4536-9219-3760b0cc2b75", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "e67f5d36-f8b0-4151-91a5-86e91099ddc2", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "c084b837-7864-4bd5-8e75-315daf68d7eb", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "5e06441e-7fb0-4c1c-8bc8-ac71bd335926", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "942c3714-0a85-422b-9ce2-76633ae24bed", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "92322cf2-4d62-437e-99ba-09350db7f025", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "58fea347-1fc7-4390-a9b8-7a72ab7ceca3", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "396a6604-6d57-41e5-9f40-33b05ad6a9ef", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "d5e8e4c1-b317-4ba5-abd0-defbd64c033a", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "861dd47a-a679-482c-90bc-c9d822941809", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "7760f60e-8d4d-4207-9806-082255e2ad15", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "12687ad7-dc70-411e-8306-bb85d422ae00", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "0dbb7a30-de49-4d39-bbcd-ab1e7d936321", "solution": "class EnhancedDynamicMutationParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, mutation_rate):\n            return particle + np.random.normal(0, mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            mutation_rate = self.mutation_rate * (1 - (t / self.budget))  # Dynamic mutation rate adaptation\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], mutation_rate)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicMutationParticleResonanceOptimizationImproved", "description": "Utilizing a dynamic mutation rate adaptation based on convergence speed to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 59, "fitness": 0.1939212905629534, "feedback": "The algorithm EnhancedDynamicMutationParticleResonanceOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.44327808461039986, 0.42396541710015045, 0.42050845134076675, 0.4355158251811505, 0.4178481071366539, 0.4149766412921515, 0.4291424418482599, 0.4248088212841077, 0.4138942107098178, 0.00031659071428224994, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08237295649137322, 0.10345682889859564, 0.06919609990858211, 0.05608069495817014, 0.07558198110336067, 0.09365364226200912, 0.07565034398401072, 0.1136405201702484, 0.07252427164052733, 0.08217542329621352, 0.07853535050397586, 0.06702413546766872, 0.08814871287144921, 0.04034037960122783, 0.061639200135086725, 0.059143081840680845, 0.04756405000731645, 0.06308600944116571, 0.8974171931936322, 0.9859581623213275, 0.9835593123031209, 0.5545603649227182, 0.9248793277865245, 0.7823069014199533, 0.9589081748800692, 0.9435413038168887, 0.9736362960825534, 0.2592548418863714, 0.26058919575756667, 0.27581890950892407, 0.2644174442552796, 0.26966384295846924, 0.23779161138990357, 0.2690485989393937, 0.2431732949170603, 0.24519686640169502, 0.21854980504137134, 0.11067497823691796, 0.21647393581588348, 0.2878541080824297, 0.2976577874433908, 0.1980571510238427, 0.15586306932049898, 0.16837907162607113, 0.23143807753907963, 0.12516455240202573, 0.11995981435993797, 0.11730456716913873, 0.11846105645161586, 0.12718711507242275, 0.14816777489666255, 0.21688374661763155, 0.1527000523792138, 0.15652522462085305, 0.12986115972198897, 0.13427331300158307, 0.12527152417044762, 0.16041826703133977, 0.12017029838108317, 0.1368638583294718, 0.12651216257880027, 0.1581406877187932, 0.09535354149777775, 0.0028455309575723398, 9.999999999998899e-05, 9.999999999998899e-05, 0.00903879163465049, 9.999999999998899e-05, 0.0008779888754963938, 9.999999999998899e-05, 9.999999999998899e-05, 0.017519981865095957, 0.03261884584862473, 0.02869021868306665, 0.0661167010513194, 0.06308057527135913, 9.999999999998899e-05, 0.026327493020064874, 0.09756486811949694, 0.056818378089562804, 0.029272695916131464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10748376902105994, 0.09321470098998363, 0.10737181773648208, 0.09610020282803888, 0.06657381043654731, 0.07318825208717494, 0.11181874878592535, 0.09682197096566181, 0.08589469449481824, 0.39404292198765856, 0.4085427370110203, 0.40751285181541785, 0.40122071208653376, 0.40175964130890784, 0.3832398277706235, 0.3875303746866259, 0.41512320110856893, 0.4116586918429065, 0.05810768041238301, 0.06972954510062868, 0.06964043982135715, 0.10799910966038528, 0.08007486793682017, 0.08019180311146412, 0.07626654718178649, 0.08291617715216582, 0.08402170279714805, 0.20177265171750336, 0.17314462858622504, 0.22467676922266067, 0.2641292907985342, 0.2677395565441103, 0.1639264302309693, 0.2366943967482149, 0.23539643498633356, 0.20671674065861023, 0.21013569936567023, 0.25574043671612, 0.19774487208130287, 0.2892012905611495, 0.25542896076492794, 0.2798119747944128, 0.30173582429287293, 0.27063518110889495, 0.28918830169437015, 0.13108214004945673, 0.24680010690217136, 0.168714736132488, 0.24230620882070686, 0.19345039623627713, 0.16520364466984627, 0.19240638938311827, 0.19476058641157834, 0.22936997451124197, 0.19725854607135085, 0.19268644779621613, 0.16735285327601546, 0.18441760970881937, 0.20676025799211006, 0.17223870693479404, 0.18020510887833607, 0.18656412162796432, 0.20187676469028248, 0.18584532633454054, 0.18836497710193878, 0.1870911543037449, 0.2052328442178507, 0.19114082907728513, 0.18302172003823403, 0.2159796286430643, 0.2218930622838715, 0.19384198589823054, 0.6458293661960076, 0.12598573356399845, 0.18731417527519478, 0.17167225657535967, 0.200526470711767, 0.19978660507191093, 0.09965151067307398, 0.16920208013542337, 0.7317157363025308, 0.6304867620612602, 0.15657396085795494, 0.07271909949532185, 0.20289547006648823, 0.1677915560903981, 0.20729513752140905, 0.32737568184919075, 0.10494184985055377, 0.2939395583012636, 0.17070034850278049, 0.18383820572860754, 0.17250120295559956, 0.16208792287132479, 0.19549785298764377, 0.16367763235958988, 0.16665439291501627, 0.17738044239859374, 0.17278949202399385, 0.06680445106832344, 0.07174266514357364, 0.053323592797579256, 0.07278452909237842, 0.08138176997822355, 0.08345699204654522, 0.07416330599607135, 0.07893688696138468, 0.06481300976551974]}, "mutation_prompt": null}
{"id": "831bea37-f7da-4d94-baa0-f939df4fa262", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "859edd35-a6ea-4e72-86bf-f05f18e86999", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "890436d8-e0d8-4f4b-a972-a70773370eb6", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "5a09bbb0-de83-49fe-9ba9-f16a2331f033", "solution": "class EnhancedDynamicMutationOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate_range=(0.1, 0.5), inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate_range = mutation_rate_range\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, mutation_rate):\n            return particle + np.random.normal(0, mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            mutation_rate = self.mutation_rate_range[0] + (self.mutation_rate_range[1] - self.mutation_rate_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], mutation_rate)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicMutationOptimization", "description": "Introducing a dynamic mutation rate adaptation based on particle performance to enhance exploration and exploit promising search regions for faster convergence.", "configspace": "", "generation": 63, "fitness": 0.19400688092595691, "feedback": "The algorithm EnhancedDynamicMutationOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4439072574001881, 0.43718968031605343, 0.4325363171740161, 0.4357305796048324, 0.4475695223411945, 0.41660961615103365, 0.42971738745689103, 0.4141247535008914, 0.42075300352692024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08060644667879002, 0.10106458757911774, 0.0708212294199535, 0.05781238240266484, 0.07880116571920093, 0.09642336107920113, 0.07716292538906577, 0.12974527353828869, 0.06984184643484181, 0.0805925815148878, 0.057571818730204005, 0.06530655950879083, 0.10005183042204735, 0.040017560868236934, 0.06201950180062488, 0.08520077344569077, 0.034494322000711675, 0.06789171875318711, 0.8974126448431792, 0.985957861591126, 0.9835592658341676, 0.5558607143227096, 0.9248778977539189, 0.7822917814833792, 0.9589076281061013, 0.9435396623873625, 0.9736362215711745, 0.27684507997481855, 0.2932808750533964, 0.28149067837355046, 0.27314223110295055, 0.27360406976149454, 0.24608626580592052, 0.278073437024271, 0.24257566697098054, 0.24326518143973297, 0.2249976797470543, 0.1199586532855692, 0.2170025552934126, 0.2192069210964861, 0.328169734283698, 0.18079467803757454, 0.131410970741213, 0.21504275178534382, 0.2312891477701482, 0.12519788867777537, 0.12318248316053138, 0.11317329623191186, 0.12153340262985024, 0.1271853119329588, 0.15031877937088978, 0.21678904469710458, 0.1473888174071517, 0.163218230787201, 0.13049227458168133, 0.13793034681738314, 0.12498639742268902, 0.16617530172793737, 0.10872482589035659, 0.1374261001113013, 0.1283408389020444, 0.15900253574412215, 0.09461784619434999, 0.021516368154934518, 9.999999999998899e-05, 9.999999999998899e-05, 0.017806038186735318, 9.999999999998899e-05, 0.004348505359458299, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016128508865511648, 0.03403783601006527, 0.027495828595567207, 0.06816487941573013, 0.062387877076996445, 0.000501401380814781, 0.0278001885967174, 0.09563480384930678, 0.057071936085221764, 0.029478463910882047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10822692472888407, 0.0952625305362017, 0.10776485784488121, 0.08399581186384952, 0.07340942307902276, 0.08707994209080794, 0.09199905102965344, 0.10068011109821351, 0.08663074374179136, 0.403533102553449, 0.3962142079477169, 0.40662461298964836, 0.3964705814132361, 0.3710678533661994, 0.3775860104342105, 0.4113199532269114, 0.4146991939040541, 0.3998331620926302, 0.058324696458633696, 0.07117396456134883, 0.06280813749097613, 0.10361509209526376, 0.07996034243889849, 0.08551195954550239, 0.06132559235666035, 0.06956224486107354, 0.08587150277747768, 0.19141861886421874, 0.19534289160524243, 0.24830260474750143, 0.24583924841207172, 0.24736594749806118, 0.1617907173970733, 0.265948014353234, 0.2424741013915125, 0.18440536745738167, 0.21557077350943354, 0.2691464228493493, 0.1933451251222038, 0.3008492021412633, 0.24973027594835284, 0.2751820272673422, 0.29372674839794444, 0.27486566982754634, 0.2831906790092197, 0.08487227854887902, 0.2356219588163373, 0.1845306006940528, 0.24038183390644674, 0.19666795088966627, 0.1792792657301736, 0.19620703275119733, 0.2064132371710935, 0.22015790504097155, 0.1911664565403849, 0.16247454575755504, 0.19518841218508687, 0.23374593022003776, 0.16554077961172387, 0.17900583710400808, 0.17725254715047578, 0.1834811721115519, 0.17756367220800873, 0.19658906616280203, 0.1863259744325394, 0.1878859037725975, 0.20595371878947832, 0.19097943350045854, 0.1844327011342125, 0.21840705524519577, 0.2286777634655187, 0.19522446691997242, 0.6301257232468813, 0.1260025689595775, 0.18730165960407352, 0.17160696100652162, 0.20052376486228674, 0.19975719690662253, 0.09965749786812306, 0.16919438925152464, 0.7320608030537129, 0.6298163207800452, 0.15656575155780406, 0.0727196876165015, 0.20268435928283057, 0.16778177989255505, 0.2071465846002135, 0.3182371372853542, 0.10494232330582631, 0.30599358455455583, 0.16379754605012353, 0.16970456835062375, 0.1756429708130367, 0.17440699057649012, 0.1629297568701248, 0.16450998210008672, 0.18543734037648008, 0.15984409654355913, 0.1675923086857325, 0.057193827148789955, 0.07291035102662058, 0.051863066331214736, 0.07447162332470869, 0.07586150208171216, 0.08441858642239786, 0.06461424598877219, 0.07724935093860474, 0.06616157256154898]}, "mutation_prompt": null}
{"id": "2a754b35-92e5-4385-9642-73ec4294a878", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "d1ec21fe-82d5-4480-a4a5-591a4f6e0129", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "7e562760-9caa-4742-89fb-67cd42181e2c", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "57c046ac-d11d-4e1c-89d8-6fb030ff2d07", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "e6c95bc7-35fe-4362-a31e-147bf96bbde9", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "666cc8c7-9f5e-4a34-9d8c-933a934a40ad", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "c4741198-d5bf-4db2-aa40-160fc92e9b45", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "cbc7e5f0-f75f-43cf-8356-9704056acc94", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "d40fe769-fc39-4ed3-9750-3705ad46cfb2", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "5781e227-eadc-43c3-a4ef-43a4cf72122c", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "78e0909f-2e92-4432-a521-9dc69ebf9f61", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "f97d92bf-2764-4b9d-80d0-cc12caf92ea2", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "3513f56e-6dad-424d-aef1-96156b0ded5e", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "468dedfe-d846-4eee-8358-870331bacb23", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "51f1542c-fcf2-40b7-bf8a-2c843e948c0a", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "c5aa5c0b-1cf5-4aa6-9708-0760b467a782", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "a30e0daf-2b94-46c1-b5aa-40d702325019", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "cd7428fc-9f81-462d-8cc4-07216f10a1ef", "solution": "class EnhancedDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle):\n            return particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.4433049808906939, 0.4388050806345858, 0.4201777744580948, 0.43556141441672014, 0.4343726777665696, 0.4147184364637959, 0.42926971197989194, 0.42467430161846054, 0.4145874083181973, 0.0003256913355502711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08116162824357198, 0.10321183886852081, 0.07351555989631997, 0.05637737738568471, 0.07720659935724672, 0.08958414778721357, 0.07565829209404706, 0.12123762323206433, 0.0701149183857942, 0.08299434629296742, 0.06499549216873346, 0.06715611352931627, 0.08090154855225173, 0.04040785415128867, 0.05882711274244068, 0.07238307368513508, 0.07233750876356804, 0.06616291755697223, 0.8974162814698576, 0.9859581021637919, 0.9835593030048996, 0.5545856150260708, 0.9248790414563989, 0.7823038403125566, 0.9589080654007365, 0.9435409752379283, 0.9736362811771144, 0.2550490058051168, 0.26064316523578757, 0.26181425623419396, 0.2659619326037125, 0.2791613349860317, 0.23709742476683393, 0.2780644502780655, 0.2431300362467732, 0.22633433226039357, 0.2192395755141029, 0.11072305876255906, 0.21579121176241678, 0.25507012620556657, 0.28517800948875227, 0.18950761035558827, 0.12064851531479703, 0.18036858406376743, 0.23143807753907963, 0.12482170023659678, 0.12140997599018644, 0.11600519650064511, 0.11886282419391214, 0.12718720073543976, 0.14636431153452067, 0.21668097653938945, 0.15221134953887772, 0.15749699423577457, 0.1298422172263276, 0.13507903939849708, 0.125216192716323, 0.16052651705996124, 0.12039156163796594, 0.13675198173015402, 0.1265456076773609, 0.16280877786901515, 0.09185203674995246, 0.008564678302110607, 9.999999999998899e-05, 9.999999999998899e-05, 0.030557594778695796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017015572045228855, 0.032691135354041445, 0.02833278490742519, 0.06713713917122444, 0.06307791518086103, 9.999999999998899e-05, 0.026430979052176506, 0.09759513376787798, 0.05692608109476571, 0.02932091896144373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10199173284906227, 0.09310921837179686, 0.10745416165375121, 0.08161314251813823, 0.06594360829624057, 0.08189775512101549, 0.11271118763913313, 0.10473195770018906, 0.08632751090869495, 0.4078635666204644, 0.38694028301193617, 0.4073351800455264, 0.39637450829688714, 0.39867263518918217, 0.38395713293822964, 0.411554345030393, 0.4150535609295689, 0.4211179746588166, 0.05901561154666579, 0.06910922511854312, 0.07019588152251943, 0.10985813588645232, 0.08381308108899899, 0.07663432049487673, 0.08379177971206409, 0.06829068674416117, 0.0840362863128461, 0.19753875434476376, 0.15514087666989962, 0.21780973571087192, 0.24294717237029928, 0.2752895757284535, 0.21937911123690823, 0.23037444820924724, 0.2129135316234223, 0.2125196126997877, 0.2127946705684962, 0.27363897948968996, 0.24482918522374741, 0.2955532008632282, 0.265981438788953, 0.2829126483708637, 0.289500371120193, 0.26667459988728337, 0.2858379243262662, 0.10468294069246875, 0.21862946120311466, 0.1884884767694811, 0.2613317619062767, 0.19420295302337898, 0.1925840804296015, 0.18830535395017145, 0.1872459853500087, 0.2216521366935027, 0.19493672627522474, 0.15882665981233657, 0.16563137938086114, 0.22146463518397952, 0.1863313112560483, 0.17178770459779202, 0.1846143395057872, 0.22195360156235222, 0.22348777349699867, 0.18556419304840532, 0.18623161404958954, 0.1899095816817029, 0.20524572352292803, 0.19110907469109395, 0.18344243853745523, 0.21738706417141507, 0.22235802359556733, 0.19305797976975103, 0.6458479942251805, 0.12598504446830905, 0.18731170272073783, 0.17167217519008804, 0.20052594760940845, 0.19978517441867494, 0.09965150748876772, 0.16919370687339175, 0.7317995431790503, 0.6303659907788433, 0.1565723777933492, 0.0727191286897394, 0.2026465108389338, 0.1677907838214433, 0.20729133043906944, 0.32762312435436847, 0.10494976432745295, 0.298649167967895, 0.19566768106232046, 0.16065773119701365, 0.1663023469508922, 0.1670735141939893, 0.1924455646210047, 0.1669009951714957, 0.1630863936019914, 0.18674387672997284, 0.16925733557633282, 0.06564322133811329, 0.07363418826584589, 0.05788580473462335, 0.0727261429589422, 0.08578497432824128, 0.08285271686073681, 0.0636817352523269, 0.06923342172536506, 0.06600076407338451]}, "mutation_prompt": null}
{"id": "91a94dec-2490-4bf8-be50-17cb4721338d", "solution": "class EnhancedHybridDynamicFireflyOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, mutation_rate=0.1, inertia_range=(0.1, 0.9), alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.mutation_rate = mutation_rate\n        self.inertia_range = inertia_range\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def firefly_move(particle, best_particle):\n            beta = self.beta0 * np.exp(-self.gamma * np.linalg.norm(particle - best_particle))\n            return particle + beta * (np.random.rand(self.dim) - 0.5)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = firefly_move(particles[i], g_best)\n                particles[i] = mutate(particles[i])\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedHybridDynamicFireflyOptimizationImproved", "description": "Introducing a hybrid approach by incorporating firefly algorithm-inspired global search behavior to enhance exploration capabilities for faster convergence.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutate' is not defined\").", "error": "NameError(\"name 'mutate' is not defined\")", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {}, "mutation_prompt": null}
{"id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], self.diversity_rate * np.std(particles, axis=0))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "AdaptiveMutationDynamicParticleResonanceOptimizationImproved", "description": "Introducing a novel adaptive mutation strategy based on particle diversity to enhance exploration and improve convergence speed.", "configspace": "", "generation": 83, "fitness": 0.226524425989757, "feedback": "The algorithm AdaptiveMutationDynamicParticleResonanceOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "83d2cff3-1431-4048-b35a-adc89d8897d0", "metadata": {"aucs": [0.6754817437682447, 0.7797698170655321, 0.8318669547835941, 0.7310452797711814, 0.716910889626618, 0.6462835065673505, 0.8332438791154774, 0.8201280922944464, 0.8218336937015804, 0.012614817429666303, 0.1080464594797137, 0.1738711956994119, 0.041841955739378656, 0.07506968382008505, 0.08912880845565319, 0.08238600982098454, 0.0358826111807512, 0.07293239328002343, 0.09210933421549983, 0.06633249161841615, 0.11522007824024605, 0.13049222826583406, 0.07475934689592345, 0.09658794353692779, 0.06943930306850943, 0.10281136228881238, 0.1322552185051571, 0.08717456605970819, 0.10693955268263167, 0.04346137912155623, 0.11350403996040126, 0.08053358699769508, 0.035725463730887363, 0.10645175693137987, 0.027962525093550017, 0.027357564712612303, 0.9040213861355177, 0.9852517087912385, 0.9834880716478911, 0.8321842457776356, 0.9557103589666064, 0.847598187073435, 0.9597986607060442, 0.880783234932794, 0.9381776838003475, 0.3507367453687593, 0.285187873803767, 0.1656271325242924, 0.3069417672221497, 0.3532910703428821, 0.18616130977126433, 0.561273177443673, 0.13895436077579493, 0.11603643252643814, 0.164303061427025, 0.10220071626607807, 0.13585484035175122, 0.19435607696744672, 0.1983102879598101, 0.1927157426277628, 0.1075110347621725, 0.17515548513107349, 0.23672200173461377, 0.3185972466408755, 0.12128603408303973, 0.1105177790425067, 0.12875346520975706, 0.12627714115030153, 0.0675805910952385, 0.6315352787646404, 0.1219555722015877, 0.1659232234402369, 0.13203200739342735, 0.11894251912758425, 0.18266440351623947, 0.14208859004661267, 0.16932437960810443, 0.13370114603831662, 0.2051019798562279, 0.03236057734101616, 0.10636895273131408, 0.05276196067687433, 9.999999999998899e-05, 0.0032567838371422297, 0.036346267620336214, 9.999999999998899e-05, 0.017256515075625756, 0.017364588319978447, 9.999999999998899e-05, 0.025335045857096672, 0.048027213696868465, 0.05443613867660191, 0.0872377758371069, 0.06705767252385453, 9.999999999998899e-05, 0.0024322268145416936, 0.09381936206478536, 0.043224278400148086, 0.03959688883736634, 0.09923662234673702, 0.1357162018353043, 0.05167647628874639, 0.07365777151001951, 0.1749205823866392, 0.06181599115685221, 0.10198878511850029, 0.09902302403867858, 0.06966095621054047, 0.18455927929385307, 0.1497197185278335, 0.1127183879857887, 0.02573367933046955, 0.09881424796565352, 0.1189052932881437, 0.2658974621579593, 0.06267923125392261, 0.1449556148739568, 0.5055699638416082, 0.46869304386427024, 0.5178688222495138, 0.46957150589938357, 0.5237673424139142, 0.5424160717941795, 0.5020844275610195, 0.4859855667815228, 0.5802950815733319, 0.07591962691272147, 0.05701476548801998, 0.11792406711458536, 0.10915941602550505, 0.04570121415161754, 0.08701352317089406, 0.07795205544059114, 0.04841179266624329, 0.06627643095952407, 0.18142797768546615, 0.26802913866370504, 0.15061479535318545, 0.2562243228195291, 0.2827139126224779, 0.2648223378989437, 0.3621001090633166, 0.12519169462191948, 0.2585629022088095, 0.19863395678010076, 0.29481741713763543, 0.2014025317874193, 0.29693296950269454, 0.22130976935034063, 0.2223230468030818, 0.19763545834817853, 0.26584582625197806, 0.36136609296692457, 0.14882461182829143, 0.22224151126691583, 0.15750634847336986, 0.17988592346338284, 0.14388283319445583, 0.11546694885708952, 0.17799307756562632, 0.16207715259096278, 0.1663604120965294, 0.18280164380488073, 0.160174317667357, 0.17473817410329062, 0.20889425991794208, 0.1943899408596057, 0.21166007844241042, 0.17755385326427453, 0.1802688491133747, 0.2216079795379684, 0.1881135328775001, 0.22830885649856236, 0.2043750777873422, 0.1868870549962146, 0.1678871220094783, 0.1586833118059645, 0.16400212432508943, 0.18308688462890355, 0.18150304759020552, 0.8243282475628102, 0.12631580019884026, 0.15378791204172393, 0.7238095991979427, 0.20058616297703924, 0.11635888844334263, 0.09981188757726411, 0.16888746448653713, 0.9173550290718058, 0.5763006416627752, 0.1564082131255753, 0.10813681009331799, 0.19687524846520366, 0.16860995561737369, 0.20681711744060427, 0.10408397371302613, 0.10499794048333899, 0.29603500380280445, 0.1711913162529035, 0.16941198670910762, 0.193504112330665, 0.15976509435743724, 0.17657465489975055, 0.15329639440203446, 0.17841965703781426, 0.16271210570808836, 0.17530938979479704, 0.07776849036534628, 0.0834663180133115, 0.055811441230861236, 0.08275321790825585, 0.061889904153208275, 0.0698678495741537, 0.0664506211914273, 0.07906182747302415, 0.07071071062421141]}, "mutation_prompt": null}
{"id": "f9a9867e-9a95-4ec9-bde4-5d023e4941fd", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], self.diversity_rate * np.std(particles, axis=0))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "AdaptiveMutationDynamicParticleResonanceOptimizationImproved", "description": "Introducing a novel adaptive mutation strategy based on particle diversity to enhance exploration and improve convergence speed.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {"aucs": [0.6754817437682447, 0.7797698170655321, 0.8318669547835941, 0.7310452797711814, 0.716910889626618, 0.6462835065673505, 0.8332438791154774, 0.8201280922944464, 0.8218336937015804, 0.012614817429666303, 0.1080464594797137, 0.1738711956994119, 0.041841955739378656, 0.07506968382008505, 0.08912880845565319, 0.08238600982098454, 0.0358826111807512, 0.07293239328002343, 0.09210933421549983, 0.06633249161841615, 0.11522007824024605, 0.13049222826583406, 0.07475934689592345, 0.09658794353692779, 0.06943930306850943, 0.10281136228881238, 0.1322552185051571, 0.08717456605970819, 0.10693955268263167, 0.04346137912155623, 0.11350403996040126, 0.08053358699769508, 0.035725463730887363, 0.10645175693137987, 0.027962525093550017, 0.027357564712612303, 0.9040213861355177, 0.9852517087912385, 0.9834880716478911, 0.8321842457776356, 0.9557103589666064, 0.847598187073435, 0.9597986607060442, 0.880783234932794, 0.9381776838003475, 0.3507367453687593, 0.285187873803767, 0.1656271325242924, 0.3069417672221497, 0.3532910703428821, 0.18616130977126433, 0.561273177443673, 0.13895436077579493, 0.11603643252643814, 0.164303061427025, 0.10220071626607807, 0.13585484035175122, 0.19435607696744672, 0.1983102879598101, 0.1927157426277628, 0.1075110347621725, 0.17515548513107349, 0.23672200173461377, 0.3185972466408755, 0.12128603408303973, 0.1105177790425067, 0.12875346520975706, 0.12627714115030153, 0.0675805910952385, 0.6315352787646404, 0.1219555722015877, 0.1659232234402369, 0.13203200739342735, 0.11894251912758425, 0.18266440351623947, 0.14208859004661267, 0.16932437960810443, 0.13370114603831662, 0.2051019798562279, 0.03236057734101616, 0.10636895273131408, 0.05276196067687433, 9.999999999998899e-05, 0.0032567838371422297, 0.036346267620336214, 9.999999999998899e-05, 0.017256515075625756, 0.017364588319978447, 9.999999999998899e-05, 0.025335045857096672, 0.048027213696868465, 0.05443613867660191, 0.0872377758371069, 0.06705767252385453, 9.999999999998899e-05, 0.0024322268145416936, 0.09381936206478536, 0.043224278400148086, 0.03959688883736634, 0.09923662234673702, 0.1357162018353043, 0.05167647628874639, 0.07365777151001951, 0.1749205823866392, 0.06181599115685221, 0.10198878511850029, 0.09902302403867858, 0.06966095621054047, 0.18455927929385307, 0.1497197185278335, 0.1127183879857887, 0.02573367933046955, 0.09881424796565352, 0.1189052932881437, 0.2658974621579593, 0.06267923125392261, 0.1449556148739568, 0.5055699638416082, 0.46869304386427024, 0.5178688222495138, 0.46957150589938357, 0.5237673424139142, 0.5424160717941795, 0.5020844275610195, 0.4859855667815228, 0.5802950815733319, 0.07591962691272147, 0.05701476548801998, 0.11792406711458536, 0.10915941602550505, 0.04570121415161754, 0.08701352317089406, 0.07795205544059114, 0.04841179266624329, 0.06627643095952407, 0.18142797768546615, 0.26802913866370504, 0.15061479535318545, 0.2562243228195291, 0.2827139126224779, 0.2648223378989437, 0.3621001090633166, 0.12519169462191948, 0.2585629022088095, 0.19863395678010076, 0.29481741713763543, 0.2014025317874193, 0.29693296950269454, 0.22130976935034063, 0.2223230468030818, 0.19763545834817853, 0.26584582625197806, 0.36136609296692457, 0.14882461182829143, 0.22224151126691583, 0.15750634847336986, 0.17988592346338284, 0.14388283319445583, 0.11546694885708952, 0.17799307756562632, 0.16207715259096278, 0.1663604120965294, 0.18280164380488073, 0.160174317667357, 0.17473817410329062, 0.20889425991794208, 0.1943899408596057, 0.21166007844241042, 0.17755385326427453, 0.1802688491133747, 0.2216079795379684, 0.1881135328775001, 0.22830885649856236, 0.2043750777873422, 0.1868870549962146, 0.1678871220094783, 0.1586833118059645, 0.16400212432508943, 0.18308688462890355, 0.18150304759020552, 0.8243282475628102, 0.12631580019884026, 0.15378791204172393, 0.7238095991979427, 0.20058616297703924, 0.11635888844334263, 0.09981188757726411, 0.16888746448653713, 0.9173550290718058, 0.5763006416627752, 0.1564082131255753, 0.10813681009331799, 0.19687524846520366, 0.16860995561737369, 0.20681711744060427, 0.10408397371302613, 0.10499794048333899, 0.29603500380280445, 0.1711913162529035, 0.16941198670910762, 0.193504112330665, 0.15976509435743724, 0.17657465489975055, 0.15329639440203446, 0.17841965703781426, 0.16271210570808836, 0.17530938979479704, 0.07776849036534628, 0.0834663180133115, 0.055811441230861236, 0.08275321790825585, 0.061889904153208275, 0.0698678495741537, 0.0664506211914273, 0.07906182747302415, 0.07071071062421141]}, "mutation_prompt": null}
{"id": "3f8736f2-0f1e-4d01-b5ef-9c0f8570a994", "solution": "class AdaptiveMutationDynamicParticleResonanceOptimizationImprovedEnhanced:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (min(t, self.budget) / self.budget)  # Dynamic inertia weight\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], self.diversity_rate * np.std(particles, axis=0))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "AdaptiveMutationDynamicParticleResonanceOptimizationImprovedEnhanced", "description": "Improving convergence speed by introducing a dynamic inertia weight adaptation mechanism based on particle fitness.", "configspace": "", "generation": 85, "fitness": 0.226524425989757, "feedback": "The algorithm AdaptiveMutationDynamicParticleResonanceOptimizationImprovedEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {"aucs": [0.6754817437682447, 0.7797698170655321, 0.8318669547835941, 0.7310452797711814, 0.716910889626618, 0.6462835065673505, 0.8332438791154774, 0.8201280922944464, 0.8218336937015804, 0.012614817429666303, 0.1080464594797137, 0.1738711956994119, 0.041841955739378656, 0.07506968382008505, 0.08912880845565319, 0.08238600982098454, 0.0358826111807512, 0.07293239328002343, 0.09210933421549983, 0.06633249161841615, 0.11522007824024605, 0.13049222826583406, 0.07475934689592345, 0.09658794353692779, 0.06943930306850943, 0.10281136228881238, 0.1322552185051571, 0.08717456605970819, 0.10693955268263167, 0.04346137912155623, 0.11350403996040126, 0.08053358699769508, 0.035725463730887363, 0.10645175693137987, 0.027962525093550017, 0.027357564712612303, 0.9040213861355177, 0.9852517087912385, 0.9834880716478911, 0.8321842457776356, 0.9557103589666064, 0.847598187073435, 0.9597986607060442, 0.880783234932794, 0.9381776838003475, 0.3507367453687593, 0.285187873803767, 0.1656271325242924, 0.3069417672221497, 0.3532910703428821, 0.18616130977126433, 0.561273177443673, 0.13895436077579493, 0.11603643252643814, 0.164303061427025, 0.10220071626607807, 0.13585484035175122, 0.19435607696744672, 0.1983102879598101, 0.1927157426277628, 0.1075110347621725, 0.17515548513107349, 0.23672200173461377, 0.3185972466408755, 0.12128603408303973, 0.1105177790425067, 0.12875346520975706, 0.12627714115030153, 0.0675805910952385, 0.6315352787646404, 0.1219555722015877, 0.1659232234402369, 0.13203200739342735, 0.11894251912758425, 0.18266440351623947, 0.14208859004661267, 0.16932437960810443, 0.13370114603831662, 0.2051019798562279, 0.03236057734101616, 0.10636895273131408, 0.05276196067687433, 9.999999999998899e-05, 0.0032567838371422297, 0.036346267620336214, 9.999999999998899e-05, 0.017256515075625756, 0.017364588319978447, 9.999999999998899e-05, 0.025335045857096672, 0.048027213696868465, 0.05443613867660191, 0.0872377758371069, 0.06705767252385453, 9.999999999998899e-05, 0.0024322268145416936, 0.09381936206478536, 0.043224278400148086, 0.03959688883736634, 0.09923662234673702, 0.1357162018353043, 0.05167647628874639, 0.07365777151001951, 0.1749205823866392, 0.06181599115685221, 0.10198878511850029, 0.09902302403867858, 0.06966095621054047, 0.18455927929385307, 0.1497197185278335, 0.1127183879857887, 0.02573367933046955, 0.09881424796565352, 0.1189052932881437, 0.2658974621579593, 0.06267923125392261, 0.1449556148739568, 0.5055699638416082, 0.46869304386427024, 0.5178688222495138, 0.46957150589938357, 0.5237673424139142, 0.5424160717941795, 0.5020844275610195, 0.4859855667815228, 0.5802950815733319, 0.07591962691272147, 0.05701476548801998, 0.11792406711458536, 0.10915941602550505, 0.04570121415161754, 0.08701352317089406, 0.07795205544059114, 0.04841179266624329, 0.06627643095952407, 0.18142797768546615, 0.26802913866370504, 0.15061479535318545, 0.2562243228195291, 0.2827139126224779, 0.2648223378989437, 0.3621001090633166, 0.12519169462191948, 0.2585629022088095, 0.19863395678010076, 0.29481741713763543, 0.2014025317874193, 0.29693296950269454, 0.22130976935034063, 0.2223230468030818, 0.19763545834817853, 0.26584582625197806, 0.36136609296692457, 0.14882461182829143, 0.22224151126691583, 0.15750634847336986, 0.17988592346338284, 0.14388283319445583, 0.11546694885708952, 0.17799307756562632, 0.16207715259096278, 0.1663604120965294, 0.18280164380488073, 0.160174317667357, 0.17473817410329062, 0.20889425991794208, 0.1943899408596057, 0.21166007844241042, 0.17755385326427453, 0.1802688491133747, 0.2216079795379684, 0.1881135328775001, 0.22830885649856236, 0.2043750777873422, 0.1868870549962146, 0.1678871220094783, 0.1586833118059645, 0.16400212432508943, 0.18308688462890355, 0.18150304759020552, 0.8243282475628102, 0.12631580019884026, 0.15378791204172393, 0.7238095991979427, 0.20058616297703924, 0.11635888844334263, 0.09981188757726411, 0.16888746448653713, 0.9173550290718058, 0.5763006416627752, 0.1564082131255753, 0.10813681009331799, 0.19687524846520366, 0.16860995561737369, 0.20681711744060427, 0.10408397371302613, 0.10499794048333899, 0.29603500380280445, 0.1711913162529035, 0.16941198670910762, 0.193504112330665, 0.15976509435743724, 0.17657465489975055, 0.15329639440203446, 0.17841965703781426, 0.16271210570808836, 0.17530938979479704, 0.07776849036534628, 0.0834663180133115, 0.055811441230861236, 0.08275321790825585, 0.061889904153208275, 0.0698678495741537, 0.0664506211914273, 0.07906182747302415, 0.07071071062421141]}, "mutation_prompt": null}
{"id": "24bac752-83f1-4058-98f2-ddfbe8f5ab36", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], self.diversity_rate * np.std(particles, axis=0))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "AdaptiveMutationDynamicParticleResonanceOptimizationImproved", "description": "Introducing a novel adaptive mutation strategy based on particle diversity to enhance exploration and improve convergence speed.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {"aucs": [0.6754817437682447, 0.7797698170655321, 0.8318669547835941, 0.7310452797711814, 0.716910889626618, 0.6462835065673505, 0.8332438791154774, 0.8201280922944464, 0.8218336937015804, 0.012614817429666303, 0.1080464594797137, 0.1738711956994119, 0.041841955739378656, 0.07506968382008505, 0.08912880845565319, 0.08238600982098454, 0.0358826111807512, 0.07293239328002343, 0.09210933421549983, 0.06633249161841615, 0.11522007824024605, 0.13049222826583406, 0.07475934689592345, 0.09658794353692779, 0.06943930306850943, 0.10281136228881238, 0.1322552185051571, 0.08717456605970819, 0.10693955268263167, 0.04346137912155623, 0.11350403996040126, 0.08053358699769508, 0.035725463730887363, 0.10645175693137987, 0.027962525093550017, 0.027357564712612303, 0.9040213861355177, 0.9852517087912385, 0.9834880716478911, 0.8321842457776356, 0.9557103589666064, 0.847598187073435, 0.9597986607060442, 0.880783234932794, 0.9381776838003475, 0.3507367453687593, 0.285187873803767, 0.1656271325242924, 0.3069417672221497, 0.3532910703428821, 0.18616130977126433, 0.561273177443673, 0.13895436077579493, 0.11603643252643814, 0.164303061427025, 0.10220071626607807, 0.13585484035175122, 0.19435607696744672, 0.1983102879598101, 0.1927157426277628, 0.1075110347621725, 0.17515548513107349, 0.23672200173461377, 0.3185972466408755, 0.12128603408303973, 0.1105177790425067, 0.12875346520975706, 0.12627714115030153, 0.0675805910952385, 0.6315352787646404, 0.1219555722015877, 0.1659232234402369, 0.13203200739342735, 0.11894251912758425, 0.18266440351623947, 0.14208859004661267, 0.16932437960810443, 0.13370114603831662, 0.2051019798562279, 0.03236057734101616, 0.10636895273131408, 0.05276196067687433, 9.999999999998899e-05, 0.0032567838371422297, 0.036346267620336214, 9.999999999998899e-05, 0.017256515075625756, 0.017364588319978447, 9.999999999998899e-05, 0.025335045857096672, 0.048027213696868465, 0.05443613867660191, 0.0872377758371069, 0.06705767252385453, 9.999999999998899e-05, 0.0024322268145416936, 0.09381936206478536, 0.043224278400148086, 0.03959688883736634, 0.09923662234673702, 0.1357162018353043, 0.05167647628874639, 0.07365777151001951, 0.1749205823866392, 0.06181599115685221, 0.10198878511850029, 0.09902302403867858, 0.06966095621054047, 0.18455927929385307, 0.1497197185278335, 0.1127183879857887, 0.02573367933046955, 0.09881424796565352, 0.1189052932881437, 0.2658974621579593, 0.06267923125392261, 0.1449556148739568, 0.5055699638416082, 0.46869304386427024, 0.5178688222495138, 0.46957150589938357, 0.5237673424139142, 0.5424160717941795, 0.5020844275610195, 0.4859855667815228, 0.5802950815733319, 0.07591962691272147, 0.05701476548801998, 0.11792406711458536, 0.10915941602550505, 0.04570121415161754, 0.08701352317089406, 0.07795205544059114, 0.04841179266624329, 0.06627643095952407, 0.18142797768546615, 0.26802913866370504, 0.15061479535318545, 0.2562243228195291, 0.2827139126224779, 0.2648223378989437, 0.3621001090633166, 0.12519169462191948, 0.2585629022088095, 0.19863395678010076, 0.29481741713763543, 0.2014025317874193, 0.29693296950269454, 0.22130976935034063, 0.2223230468030818, 0.19763545834817853, 0.26584582625197806, 0.36136609296692457, 0.14882461182829143, 0.22224151126691583, 0.15750634847336986, 0.17988592346338284, 0.14388283319445583, 0.11546694885708952, 0.17799307756562632, 0.16207715259096278, 0.1663604120965294, 0.18280164380488073, 0.160174317667357, 0.17473817410329062, 0.20889425991794208, 0.1943899408596057, 0.21166007844241042, 0.17755385326427453, 0.1802688491133747, 0.2216079795379684, 0.1881135328775001, 0.22830885649856236, 0.2043750777873422, 0.1868870549962146, 0.1678871220094783, 0.1586833118059645, 0.16400212432508943, 0.18308688462890355, 0.18150304759020552, 0.8243282475628102, 0.12631580019884026, 0.15378791204172393, 0.7238095991979427, 0.20058616297703924, 0.11635888844334263, 0.09981188757726411, 0.16888746448653713, 0.9173550290718058, 0.5763006416627752, 0.1564082131255753, 0.10813681009331799, 0.19687524846520366, 0.16860995561737369, 0.20681711744060427, 0.10408397371302613, 0.10499794048333899, 0.29603500380280445, 0.1711913162529035, 0.16941198670910762, 0.193504112330665, 0.15976509435743724, 0.17657465489975055, 0.15329639440203446, 0.17841965703781426, 0.16271210570808836, 0.17530938979479704, 0.07776849036534628, 0.0834663180133115, 0.055811441230861236, 0.08275321790825585, 0.061889904153208275, 0.0698678495741537, 0.0664506211914273, 0.07906182747302415, 0.07071071062421141]}, "mutation_prompt": null}
{"id": "13de49a4-e4ee-428f-87c9-0b4da10d4e26", "solution": "import numpy as np\n\nclass EnhancedVelocityOptimization(AdaptiveMutationDynamicParticleResonanceOptimizationImproved):\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n        memory = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i]) + 0.1 * memory[i]\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], self.diversity_rate * np.std(particles, axis=0))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n                memory[i] = np.where(func(particles[i]) < func(particle_best[i]), 0.1 * memory[i] + 0.9 * (particle_best[i] - particles[i]), memory[i])\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedVelocityOptimization", "description": "Introducing an enhanced velocity update mechanism by incorporating a memory component to guide particle movement towards promising regions for faster convergence.", "configspace": "", "generation": 87, "fitness": 0.21078556369422077, "feedback": "The algorithm EnhancedVelocityOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.22.", "error": "", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {"aucs": [0.5668334195196436, 0.6921841733678955, 0.7652654073641065, 0.6244999455692275, 0.6134099002243925, 0.5054203027207078, 0.7671713816190056, 0.7487634015806728, 0.7512097860997071, 9.999999999998899e-05, 0.048251030514544935, 0.11090058058740238, 0.026026554565387938, 0.036054132022011576, 0.043265093309750924, 0.04478298040939077, 0.024226058465232736, 0.040977918208024655, 0.09056928515247342, 0.06481672784120185, 0.1123967340832902, 0.1267398918841287, 0.07274445848547839, 0.0951733336267302, 0.06827909671969701, 0.09998637352814987, 0.12920384189178347, 0.08514662396066519, 0.10344426110869898, 0.04251007764891579, 0.1099983909737714, 0.07855173920859237, 0.03442311022238698, 0.10279353128477342, 0.027309247571258077, 0.02648646887518935, 0.8661232643616479, 0.9804572531599514, 0.9777915368574004, 0.7657763154694621, 0.938921397978581, 0.7873348944646932, 0.9446979510564504, 0.8336746608792105, 0.9139668690271425, 0.327506771298559, 0.23066687952402254, 0.14964176660024986, 0.27799360654754357, 0.2674380782646456, 0.14385732973712617, 0.5160142110142423, 0.11213382572169794, 0.09766208807724397, 0.16292057779408764, 0.10161722643781723, 0.13534208586908103, 0.1934143910446119, 0.19744527481440022, 0.19110494244714704, 0.10596845207309746, 0.17385174196148634, 0.2347525535668592, 0.274237718808531, 0.11383415352793402, 0.10030457846342256, 0.12409376783229198, 0.12258494501682238, 0.04020199251996359, 0.5085217366893697, 0.11468816847551078, 0.15896811208716677, 0.12881664421164674, 0.10875872973002443, 0.1713672727156521, 0.13674673108370428, 0.14805299377795544, 0.1310155922787506, 0.17254956001345545, 0.0019736604859029727, 0.10281396107718332, 0.042602672484339243, 9.999999999998899e-05, 9.999999999998899e-05, 0.0317187660817424, 9.999999999998899e-05, 0.015098470754158932, 0.007493091889112291, 9.999999999998899e-05, 0.004930513945996751, 0.046627595485532414, 0.05224131910029228, 0.08364076175403246, 0.06449581753387923, 9.999999999998899e-05, 0.0012482360233807555, 0.08906632702720385, 0.040159474996476985, 0.0380221309773342, 0.08824516854713438, 0.1271153304214735, 0.032418786369197705, 0.06688944688884035, 0.15873177054015974, 0.028197936314918515, 0.09471518034156434, 0.09049009470320868, 0.06362144269574832, 0.16803160823542074, 0.14172226053560244, 0.10643663956458405, 0.0237678538692091, 0.09494028517207243, 0.11283120469009578, 0.25105405163953287, 0.05889097508882346, 0.14083586729157904, 0.4698217492190402, 0.42842565218127626, 0.4881759821758417, 0.43852055688289626, 0.5012159556830773, 0.5202688613635896, 0.46695820422989, 0.4431534032182536, 0.5287309324946231, 0.07512012619090602, 0.0563459250661994, 0.11299729520229262, 0.10656111082145492, 0.04463962926485254, 0.0849182453863414, 0.07610381332693106, 0.047345229350007734, 0.0655799771611073, 0.1751167203914381, 0.2488452021196753, 0.14318459342019574, 0.21776172923685366, 0.2573272388917618, 0.23627354795989097, 0.29834682093608333, 0.11109434239142102, 0.24539678285077926, 0.19631600068761434, 0.289593960291491, 0.19943481174227995, 0.29239646710258804, 0.21697633476233547, 0.22069095077066414, 0.1959016157774074, 0.2630292907281768, 0.34937199127904106, 0.14583111756495515, 0.2172381503101517, 0.1522154635151075, 0.17298241024697558, 0.14196156251145842, 0.11492058696781715, 0.1755829879138301, 0.1596141344710149, 0.16333271485638523, 0.1790827972963438, 0.1545153803294308, 0.16598358094842114, 0.19909722931216867, 0.18089756430201065, 0.2018733031432942, 0.17602365469265746, 0.17453571058114536, 0.2058143138843307, 0.18645509414026196, 0.22523466812004478, 0.2029848083070691, 0.1858276372270844, 0.16654581231045174, 0.15723281281076906, 0.16351166780653692, 0.18143631119235692, 0.17975712926863363, 0.7546556302576211, 0.12569838069379857, 0.15308689648676577, 0.6810799688256401, 0.1996142083790432, 0.1158681548229259, 0.09961021580366614, 0.16796128968464363, 0.8848620848311602, 0.5424988709435996, 0.15555309724026434, 0.10609269261731369, 0.18932943746354602, 0.167789808094301, 0.20324492248829507, 0.10340933184311174, 0.1046862578597555, 0.2628969486046858, 0.16987203771513193, 0.16645342637476535, 0.19323407423749783, 0.15783393025975678, 0.16636851714719436, 0.15067547291664052, 0.17469458416805062, 0.15945195722388594, 0.17303344987400993, 0.07619364852240529, 0.0785296813792391, 0.05504871635125963, 0.0803518198494163, 0.05907768764436838, 0.06895542496750473, 0.0638055685875053, 0.07204572338403181, 0.06938557979921867]}, "mutation_prompt": null}
{"id": "b983794d-5178-4ee7-9da0-4ba4b9fcb948", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def chaotic_selection(particles, num_select):\n            chaos_indices = np.random.permutation(len(particles))\n            return particles[chaos_indices[:num_select]]\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            selected_particles = chaotic_selection(particles, self.num_particles // 2)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = particles[i] + np.random.normal(0, self.diversity_rate, size=self.dim)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedAdaptiveMutationDynamicParticleResonanceOptimizationImproved", "description": "Introducing a novel selection mechanism based on chaotic dynamics to promote diverse exploration and exploit promising regions effectively, enhancing convergence speed.", "configspace": "", "generation": 88, "fitness": 0.1915553088528132, "feedback": "The algorithm EnhancedAdaptiveMutationDynamicParticleResonanceOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {"aucs": [0.4100846469487115, 0.4276623754611184, 0.44193317532814047, 0.4080558836351572, 0.3923588813861184, 0.43415840514988147, 0.4122668992576539, 0.44135153338397426, 0.449327350966112, 0.0005327169430793255, 0.010384597741351365, 9.999999999998899e-05, 0.00013001000750212377, 0.018328148574814573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0697071525688967, 0.11325402417163022, 0.07220366143521495, 0.07836210349880579, 0.08167490271717726, 0.08045080384606484, 0.07459127135731303, 0.09126367141348746, 0.08547853992917431, 0.05603073159667471, 0.06181073137246751, 0.04790421356918961, 0.08463729555219057, 0.08147532707902805, 0.05593091106829906, 0.036521664860917014, 0.04082650571745672, 0.08823609215425532, 0.9590084298955174, 0.9721908056049441, 0.9693993005182289, 0.7597694519518878, 0.7032402734527679, 0.8563299025419175, 0.9528560390427959, 0.8696529440011487, 0.97881018398251, 0.22911583412654424, 0.22161264671612657, 0.2961632894960061, 0.2745945457876994, 0.24343581636485256, 0.2625411114113818, 0.2686264913163091, 0.2632279151399515, 0.23189925427385272, 0.214100819975528, 0.31764144030913755, 0.15777334994490544, 0.21178031091082106, 0.18583259889486858, 0.18430613541503726, 0.1362894279924216, 0.1336955219019741, 0.1825002814006932, 0.13536293438673896, 0.11734159679213918, 0.10366503965050655, 0.14584883982482533, 0.1409250295707496, 0.15166085269176055, 0.1919553119520705, 0.10892003304453901, 0.1273935877268566, 0.1311271943601483, 0.19124001801841128, 0.14668166600300503, 0.1359337259097212, 0.11478187734595557, 0.13091700839970366, 0.18064365030452156, 0.02078631478428883, 0.11606095891526202, 0.06376976652213906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031285451618919824, 0.03707568817845053, 0.022172984212870506, 0.06569028459394033, 0.06500451832605392, 0.0007697098971186644, 9.999999999998899e-05, 0.07988459514335922, 0.05889347972013914, 0.07475114829816265, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07802820332247251, 0.09109289776417917, 0.08995397910564185, 0.10604382505381837, 0.0914367306893411, 0.09442280584679263, 0.07934210965701172, 0.09515737935701618, 0.07632952213765443, 0.40571725630733835, 0.38638334031179067, 0.4135756449721202, 0.4050491052990032, 0.3913930273114383, 0.39503923955478915, 0.4136230820742569, 0.3988075493961133, 0.41292727215717573, 0.06593148463261933, 0.07522991939317303, 0.09108771048281683, 0.11400071534117218, 0.08250797617136796, 0.08565515969171689, 0.0659422578598795, 0.08939690954716573, 0.06508974365238951, 0.20698396053679524, 0.22642002741991085, 0.1718530227925561, 0.2540694644006789, 0.23401787711273891, 0.22309846878399375, 0.2567562106567738, 0.1598211705656527, 0.20823624739177293, 0.22340741818648646, 0.26937859373441975, 0.25269658783417503, 0.25788134775006366, 0.22722792313124907, 0.23971695600888066, 0.2311358865222839, 0.28453554170510775, 0.23767820327406375, 0.08644059274117366, 0.1869891042623748, 0.18975947876107935, 0.2179288016303068, 0.17751799127578238, 0.1387061685816281, 0.23521166193915433, 0.22472202463960955, 0.1947525160125697, 0.2220917880009059, 0.15166440377389134, 0.16010491392349036, 0.19280668920641197, 0.1948694271331266, 0.18753552991830424, 0.2042573376408503, 0.2133284760875771, 0.18480461146246485, 0.1898239579462755, 0.21008944368752913, 0.17586251543718245, 0.18379738543636281, 0.24196692171967193, 0.17223893624130937, 0.1847829936917048, 0.23856352162175298, 0.17662791912473752, 0.7100272881892555, 0.12582824378373658, 0.15384165325361576, 0.17346556317041673, 0.1993567251478262, 0.11677113251482518, 0.09972007840983643, 0.16995052553288403, 0.5703644244378208, 0.38784588609309, 0.15493989625896387, 0.5241539053657007, 0.21018188512341152, 0.16743014683529145, 0.20446122596900707, 0.10392295691488307, 0.10385657970956652, 0.4450997971154852, 0.15847575432254357, 0.22639627642777482, 0.17710695111559416, 0.16205073851999463, 0.1696488215674915, 0.18592694914113972, 0.17555514592376387, 0.16585771787368264, 0.16791750811242823, 0.07262083516349904, 0.06813585787245935, 0.06602287064572943, 0.07538589929883, 0.08679158865887071, 0.08026059947910635, 0.07242377648760445, 0.06676639038541166, 0.06814553979400695]}, "mutation_prompt": null}
{"id": "29f214d9-a4d1-451c-9005-966b71247ae6", "solution": "import numpy as np\n\nclass EnhancedDynamicParticleResonanceOptimization:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * ((self.budget-t) / self.budget)  # Update inertia weight dynamically\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], self.diversity_rate * np.std(particles, axis=0))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "EnhancedDynamicParticleResonanceOptimization", "description": "Enhancing the convergence speed by dynamically adjusting the inertia weight to promote global exploration in the optimization process.", "configspace": "", "generation": 89, "fitness": 0.13620479972443172, "feedback": "The algorithm EnhancedDynamicParticleResonanceOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.18.", "error": "", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {"aucs": [0.23093350860365958, 0.2786464823632051, 0.2499572297099335, 0.21754012686468427, 0.17834186449728695, 0.2657918769239229, 0.24119075499857623, 0.2785513545686553, 0.17482258875925438, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048589930908820356, 0.05715632384472469, 0.055918998777369944, 0.060632857440750976, 0.052564573980452556, 0.057458311168959164, 0.06090954736451526, 0.05699441653599846, 0.05883959902483982, 0.03859507148126995, 0.040350752268125345, 0.04093844938051794, 0.044993987646092304, 0.02734284589296454, 0.03477482361697837, 0.04065749814407571, 0.041506684669467386, 0.04067883776096659, 0.9668223848902642, 0.9852517087912385, 0.9834880716478911, 0.723230410793831, 0.9599995867377029, 0.9092611832560478, 0.9708070346807495, 0.9301294968201009, 0.9595772359688142, 0.0912099962434626, 0.1371765154948944, 0.060700093742282135, 0.10083837633103254, 0.10189462157058882, 0.08297459917494743, 0.09648874117568051, 0.086188571232649, 0.07439307364962855, 0.1497032595529212, 0.1165030683868461, 0.15460351155569352, 0.15609114743787833, 0.20069461592452087, 0.1440369231908296, 0.1328121543359717, 0.1596200766490088, 0.14954876958860164, 0.03078457900724385, 0.01126296267205451, 0.04919034178710535, 0.036806876720149706, 0.0658048485935786, 9.999999999998899e-05, 0.05506964690314453, 0.09627635429139703, 0.024960727280021633, 0.04238712560502622, 0.03140067894308196, 0.043314118033879856, 0.05206828452601531, 0.0013958966442702003, 0.04042825901680813, 0.01128320018516693, 0.019932219765500636, 0.008395827042206983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015248972562155405, 0.014456872863765402, 0.03322591821464116, 0.053924097812413474, 9.999999999998899e-05, 9.999999999998899e-05, 0.01461400104916577, 0.03843477071460644, 0.023435505307605076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0075557573322992955, 0.008933689334001738, 0.037921622920220166, 9.999999999998899e-05, 0.0248420130029684, 0.03981926695903237, 0.022609494362291427, 0.01924141181369321, 0.04612090722905737, 0.25918940751945474, 0.26028291063562126, 0.2868034571948347, 0.23633991080225492, 0.25167789513269545, 0.19783250810907027, 0.2906984930454619, 0.2532211815206947, 0.24841786324420134, 0.05428667963003986, 0.05486086955400027, 0.03515421624198767, 0.05357833687952129, 0.05570327792260921, 0.05859306661835362, 0.05091738742272611, 0.05264260606447446, 0.06380388496199918, 0.12579097631481673, 0.10948958201205483, 0.11434920580326924, 0.1441170332174454, 0.16986507778213678, 0.11455667335341946, 0.1285754401116952, 0.14157986386663957, 0.13791820805704103, 0.20882957444426342, 0.18964254345048392, 0.22180790460194533, 0.21426947250931927, 0.18096548367505683, 0.20617916697919214, 0.2123820902604594, 0.19908581372858591, 0.1914546519973105, 0.11868886137405332, 0.12620001104143097, 0.12542401139678327, 0.1272075717607417, 0.14029560140245834, 0.13037151583678586, 0.1249985911952306, 0.14435909219296938, 0.1564286560851681, 0.14370651711969984, 0.12151163317796365, 0.14503906866271665, 0.15860482769222672, 0.15691666565304274, 0.1628849738285134, 0.14386796219396525, 0.15965345822394883, 0.1446739194301112, 0.1624233509182068, 0.16176116589578782, 0.1498507466466077, 0.1606770166784619, 0.16317945050687854, 0.14865648771966222, 0.16110449757135126, 0.15999341763893704, 0.15663625975944218, 0.18137367608541521, 0.15393938942625152, 0.1481133274336256, 0.2174659885647089, 0.17484628801059843, 0.15499390020156045, 0.09854550455040956, 0.16014865166943038, 0.22848906637561894, 0.2353477427957108, 0.1541176832938529, 0.14564496066971844, 0.1617816137392365, 0.13315883157728825, 0.18377039023862007, 0.16726486154879583, 0.18377475492085815, 0.1730139702185023, 0.17067885074719857, 0.17588821365701113, 0.193504112330665, 0.16050856897503674, 0.16795827578461486, 0.1703872763729558, 0.17096835431217583, 0.17503735741526494, 0.15920243711502813, 0.05213167023604659, 0.059186978022378045, 0.057391557710038454, 0.05705322447245542, 0.05882341339906583, 0.057313622484654436, 0.04803371614802743, 0.05320221320398555, 0.06422747598745604]}, "mutation_prompt": null}
{"id": "41bbc790-90eb-4101-a59e-92b2224e3c4d", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], self.diversity_rate * np.std(particles, axis=0))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "AdaptiveMutationDynamicParticleResonanceOptimizationImproved", "description": "Introducing a novel adaptive mutation strategy based on particle diversity to enhance exploration and improve convergence speed.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {"aucs": [0.6754817437682447, 0.7797698170655321, 0.8318669547835941, 0.7310452797711814, 0.716910889626618, 0.6462835065673505, 0.8332438791154774, 0.8201280922944464, 0.8218336937015804, 0.012614817429666303, 0.1080464594797137, 0.1738711956994119, 0.041841955739378656, 0.07506968382008505, 0.08912880845565319, 0.08238600982098454, 0.0358826111807512, 0.07293239328002343, 0.09210933421549983, 0.06633249161841615, 0.11522007824024605, 0.13049222826583406, 0.07475934689592345, 0.09658794353692779, 0.06943930306850943, 0.10281136228881238, 0.1322552185051571, 0.08717456605970819, 0.10693955268263167, 0.04346137912155623, 0.11350403996040126, 0.08053358699769508, 0.035725463730887363, 0.10645175693137987, 0.027962525093550017, 0.027357564712612303, 0.9040213861355177, 0.9852517087912385, 0.9834880716478911, 0.8321842457776356, 0.9557103589666064, 0.847598187073435, 0.9597986607060442, 0.880783234932794, 0.9381776838003475, 0.3507367453687593, 0.285187873803767, 0.1656271325242924, 0.3069417672221497, 0.3532910703428821, 0.18616130977126433, 0.561273177443673, 0.13895436077579493, 0.11603643252643814, 0.164303061427025, 0.10220071626607807, 0.13585484035175122, 0.19435607696744672, 0.1983102879598101, 0.1927157426277628, 0.1075110347621725, 0.17515548513107349, 0.23672200173461377, 0.3185972466408755, 0.12128603408303973, 0.1105177790425067, 0.12875346520975706, 0.12627714115030153, 0.0675805910952385, 0.6315352787646404, 0.1219555722015877, 0.1659232234402369, 0.13203200739342735, 0.11894251912758425, 0.18266440351623947, 0.14208859004661267, 0.16932437960810443, 0.13370114603831662, 0.2051019798562279, 0.03236057734101616, 0.10636895273131408, 0.05276196067687433, 9.999999999998899e-05, 0.0032567838371422297, 0.036346267620336214, 9.999999999998899e-05, 0.017256515075625756, 0.017364588319978447, 9.999999999998899e-05, 0.025335045857096672, 0.048027213696868465, 0.05443613867660191, 0.0872377758371069, 0.06705767252385453, 9.999999999998899e-05, 0.0024322268145416936, 0.09381936206478536, 0.043224278400148086, 0.03959688883736634, 0.09923662234673702, 0.1357162018353043, 0.05167647628874639, 0.07365777151001951, 0.1749205823866392, 0.06181599115685221, 0.10198878511850029, 0.09902302403867858, 0.06966095621054047, 0.18455927929385307, 0.1497197185278335, 0.1127183879857887, 0.02573367933046955, 0.09881424796565352, 0.1189052932881437, 0.2658974621579593, 0.06267923125392261, 0.1449556148739568, 0.5055699638416082, 0.46869304386427024, 0.5178688222495138, 0.46957150589938357, 0.5237673424139142, 0.5424160717941795, 0.5020844275610195, 0.4859855667815228, 0.5802950815733319, 0.07591962691272147, 0.05701476548801998, 0.11792406711458536, 0.10915941602550505, 0.04570121415161754, 0.08701352317089406, 0.07795205544059114, 0.04841179266624329, 0.06627643095952407, 0.18142797768546615, 0.26802913866370504, 0.15061479535318545, 0.2562243228195291, 0.2827139126224779, 0.2648223378989437, 0.3621001090633166, 0.12519169462191948, 0.2585629022088095, 0.19863395678010076, 0.29481741713763543, 0.2014025317874193, 0.29693296950269454, 0.22130976935034063, 0.2223230468030818, 0.19763545834817853, 0.26584582625197806, 0.36136609296692457, 0.14882461182829143, 0.22224151126691583, 0.15750634847336986, 0.17988592346338284, 0.14388283319445583, 0.11546694885708952, 0.17799307756562632, 0.16207715259096278, 0.1663604120965294, 0.18280164380488073, 0.160174317667357, 0.17473817410329062, 0.20889425991794208, 0.1943899408596057, 0.21166007844241042, 0.17755385326427453, 0.1802688491133747, 0.2216079795379684, 0.1881135328775001, 0.22830885649856236, 0.2043750777873422, 0.1868870549962146, 0.1678871220094783, 0.1586833118059645, 0.16400212432508943, 0.18308688462890355, 0.18150304759020552, 0.8243282475628102, 0.12631580019884026, 0.15378791204172393, 0.7238095991979427, 0.20058616297703924, 0.11635888844334263, 0.09981188757726411, 0.16888746448653713, 0.9173550290718058, 0.5763006416627752, 0.1564082131255753, 0.10813681009331799, 0.19687524846520366, 0.16860995561737369, 0.20681711744060427, 0.10408397371302613, 0.10499794048333899, 0.29603500380280445, 0.1711913162529035, 0.16941198670910762, 0.193504112330665, 0.15976509435743724, 0.17657465489975055, 0.15329639440203446, 0.17841965703781426, 0.16271210570808836, 0.17530938979479704, 0.07776849036534628, 0.0834663180133115, 0.055811441230861236, 0.08275321790825585, 0.061889904153208275, 0.0698678495741537, 0.0664506211914273, 0.07906182747302415, 0.07071071062421141]}, "mutation_prompt": null}
{"id": "7137c690-bd76-4ba7-a875-ffd31146c3e0", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], self.diversity_rate * np.std(particles, axis=0))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "AdaptiveMutationDynamicParticleResonanceOptimizationImproved", "description": "Introducing a novel adaptive mutation strategy based on particle diversity to enhance exploration and improve convergence speed.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {"aucs": [0.6754817437682447, 0.7797698170655321, 0.8318669547835941, 0.7310452797711814, 0.716910889626618, 0.6462835065673505, 0.8332438791154774, 0.8201280922944464, 0.8218336937015804, 0.012614817429666303, 0.1080464594797137, 0.1738711956994119, 0.041841955739378656, 0.07506968382008505, 0.08912880845565319, 0.08238600982098454, 0.0358826111807512, 0.07293239328002343, 0.09210933421549983, 0.06633249161841615, 0.11522007824024605, 0.13049222826583406, 0.07475934689592345, 0.09658794353692779, 0.06943930306850943, 0.10281136228881238, 0.1322552185051571, 0.08717456605970819, 0.10693955268263167, 0.04346137912155623, 0.11350403996040126, 0.08053358699769508, 0.035725463730887363, 0.10645175693137987, 0.027962525093550017, 0.027357564712612303, 0.9040213861355177, 0.9852517087912385, 0.9834880716478911, 0.8321842457776356, 0.9557103589666064, 0.847598187073435, 0.9597986607060442, 0.880783234932794, 0.9381776838003475, 0.3507367453687593, 0.285187873803767, 0.1656271325242924, 0.3069417672221497, 0.3532910703428821, 0.18616130977126433, 0.561273177443673, 0.13895436077579493, 0.11603643252643814, 0.164303061427025, 0.10220071626607807, 0.13585484035175122, 0.19435607696744672, 0.1983102879598101, 0.1927157426277628, 0.1075110347621725, 0.17515548513107349, 0.23672200173461377, 0.3185972466408755, 0.12128603408303973, 0.1105177790425067, 0.12875346520975706, 0.12627714115030153, 0.0675805910952385, 0.6315352787646404, 0.1219555722015877, 0.1659232234402369, 0.13203200739342735, 0.11894251912758425, 0.18266440351623947, 0.14208859004661267, 0.16932437960810443, 0.13370114603831662, 0.2051019798562279, 0.03236057734101616, 0.10636895273131408, 0.05276196067687433, 9.999999999998899e-05, 0.0032567838371422297, 0.036346267620336214, 9.999999999998899e-05, 0.017256515075625756, 0.017364588319978447, 9.999999999998899e-05, 0.025335045857096672, 0.048027213696868465, 0.05443613867660191, 0.0872377758371069, 0.06705767252385453, 9.999999999998899e-05, 0.0024322268145416936, 0.09381936206478536, 0.043224278400148086, 0.03959688883736634, 0.09923662234673702, 0.1357162018353043, 0.05167647628874639, 0.07365777151001951, 0.1749205823866392, 0.06181599115685221, 0.10198878511850029, 0.09902302403867858, 0.06966095621054047, 0.18455927929385307, 0.1497197185278335, 0.1127183879857887, 0.02573367933046955, 0.09881424796565352, 0.1189052932881437, 0.2658974621579593, 0.06267923125392261, 0.1449556148739568, 0.5055699638416082, 0.46869304386427024, 0.5178688222495138, 0.46957150589938357, 0.5237673424139142, 0.5424160717941795, 0.5020844275610195, 0.4859855667815228, 0.5802950815733319, 0.07591962691272147, 0.05701476548801998, 0.11792406711458536, 0.10915941602550505, 0.04570121415161754, 0.08701352317089406, 0.07795205544059114, 0.04841179266624329, 0.06627643095952407, 0.18142797768546615, 0.26802913866370504, 0.15061479535318545, 0.2562243228195291, 0.2827139126224779, 0.2648223378989437, 0.3621001090633166, 0.12519169462191948, 0.2585629022088095, 0.19863395678010076, 0.29481741713763543, 0.2014025317874193, 0.29693296950269454, 0.22130976935034063, 0.2223230468030818, 0.19763545834817853, 0.26584582625197806, 0.36136609296692457, 0.14882461182829143, 0.22224151126691583, 0.15750634847336986, 0.17988592346338284, 0.14388283319445583, 0.11546694885708952, 0.17799307756562632, 0.16207715259096278, 0.1663604120965294, 0.18280164380488073, 0.160174317667357, 0.17473817410329062, 0.20889425991794208, 0.1943899408596057, 0.21166007844241042, 0.17755385326427453, 0.1802688491133747, 0.2216079795379684, 0.1881135328775001, 0.22830885649856236, 0.2043750777873422, 0.1868870549962146, 0.1678871220094783, 0.1586833118059645, 0.16400212432508943, 0.18308688462890355, 0.18150304759020552, 0.8243282475628102, 0.12631580019884026, 0.15378791204172393, 0.7238095991979427, 0.20058616297703924, 0.11635888844334263, 0.09981188757726411, 0.16888746448653713, 0.9173550290718058, 0.5763006416627752, 0.1564082131255753, 0.10813681009331799, 0.19687524846520366, 0.16860995561737369, 0.20681711744060427, 0.10408397371302613, 0.10499794048333899, 0.29603500380280445, 0.1711913162529035, 0.16941198670910762, 0.193504112330665, 0.15976509435743724, 0.17657465489975055, 0.15329639440203446, 0.17841965703781426, 0.16271210570808836, 0.17530938979479704, 0.07776849036534628, 0.0834663180133115, 0.055811441230861236, 0.08275321790825585, 0.061889904153208275, 0.0698678495741537, 0.0664506211914273, 0.07906182747302415, 0.07071071062421141]}, "mutation_prompt": null}
{"id": "c8b6e7fd-5c6d-4870-a80b-0e126d96cb4d", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], self.diversity_rate * np.std(particles, axis=0))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "AdaptiveMutationDynamicParticleResonanceOptimizationImproved", "description": "Introducing a novel adaptive mutation strategy based on particle diversity to enhance exploration and improve convergence speed.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {"aucs": [0.6754817437682447, 0.7797698170655321, 0.8318669547835941, 0.7310452797711814, 0.716910889626618, 0.6462835065673505, 0.8332438791154774, 0.8201280922944464, 0.8218336937015804, 0.012614817429666303, 0.1080464594797137, 0.1738711956994119, 0.041841955739378656, 0.07506968382008505, 0.08912880845565319, 0.08238600982098454, 0.0358826111807512, 0.07293239328002343, 0.09210933421549983, 0.06633249161841615, 0.11522007824024605, 0.13049222826583406, 0.07475934689592345, 0.09658794353692779, 0.06943930306850943, 0.10281136228881238, 0.1322552185051571, 0.08717456605970819, 0.10693955268263167, 0.04346137912155623, 0.11350403996040126, 0.08053358699769508, 0.035725463730887363, 0.10645175693137987, 0.027962525093550017, 0.027357564712612303, 0.9040213861355177, 0.9852517087912385, 0.9834880716478911, 0.8321842457776356, 0.9557103589666064, 0.847598187073435, 0.9597986607060442, 0.880783234932794, 0.9381776838003475, 0.3507367453687593, 0.285187873803767, 0.1656271325242924, 0.3069417672221497, 0.3532910703428821, 0.18616130977126433, 0.561273177443673, 0.13895436077579493, 0.11603643252643814, 0.164303061427025, 0.10220071626607807, 0.13585484035175122, 0.19435607696744672, 0.1983102879598101, 0.1927157426277628, 0.1075110347621725, 0.17515548513107349, 0.23672200173461377, 0.3185972466408755, 0.12128603408303973, 0.1105177790425067, 0.12875346520975706, 0.12627714115030153, 0.0675805910952385, 0.6315352787646404, 0.1219555722015877, 0.1659232234402369, 0.13203200739342735, 0.11894251912758425, 0.18266440351623947, 0.14208859004661267, 0.16932437960810443, 0.13370114603831662, 0.2051019798562279, 0.03236057734101616, 0.10636895273131408, 0.05276196067687433, 9.999999999998899e-05, 0.0032567838371422297, 0.036346267620336214, 9.999999999998899e-05, 0.017256515075625756, 0.017364588319978447, 9.999999999998899e-05, 0.025335045857096672, 0.048027213696868465, 0.05443613867660191, 0.0872377758371069, 0.06705767252385453, 9.999999999998899e-05, 0.0024322268145416936, 0.09381936206478536, 0.043224278400148086, 0.03959688883736634, 0.09923662234673702, 0.1357162018353043, 0.05167647628874639, 0.07365777151001951, 0.1749205823866392, 0.06181599115685221, 0.10198878511850029, 0.09902302403867858, 0.06966095621054047, 0.18455927929385307, 0.1497197185278335, 0.1127183879857887, 0.02573367933046955, 0.09881424796565352, 0.1189052932881437, 0.2658974621579593, 0.06267923125392261, 0.1449556148739568, 0.5055699638416082, 0.46869304386427024, 0.5178688222495138, 0.46957150589938357, 0.5237673424139142, 0.5424160717941795, 0.5020844275610195, 0.4859855667815228, 0.5802950815733319, 0.07591962691272147, 0.05701476548801998, 0.11792406711458536, 0.10915941602550505, 0.04570121415161754, 0.08701352317089406, 0.07795205544059114, 0.04841179266624329, 0.06627643095952407, 0.18142797768546615, 0.26802913866370504, 0.15061479535318545, 0.2562243228195291, 0.2827139126224779, 0.2648223378989437, 0.3621001090633166, 0.12519169462191948, 0.2585629022088095, 0.19863395678010076, 0.29481741713763543, 0.2014025317874193, 0.29693296950269454, 0.22130976935034063, 0.2223230468030818, 0.19763545834817853, 0.26584582625197806, 0.36136609296692457, 0.14882461182829143, 0.22224151126691583, 0.15750634847336986, 0.17988592346338284, 0.14388283319445583, 0.11546694885708952, 0.17799307756562632, 0.16207715259096278, 0.1663604120965294, 0.18280164380488073, 0.160174317667357, 0.17473817410329062, 0.20889425991794208, 0.1943899408596057, 0.21166007844241042, 0.17755385326427453, 0.1802688491133747, 0.2216079795379684, 0.1881135328775001, 0.22830885649856236, 0.2043750777873422, 0.1868870549962146, 0.1678871220094783, 0.1586833118059645, 0.16400212432508943, 0.18308688462890355, 0.18150304759020552, 0.8243282475628102, 0.12631580019884026, 0.15378791204172393, 0.7238095991979427, 0.20058616297703924, 0.11635888844334263, 0.09981188757726411, 0.16888746448653713, 0.9173550290718058, 0.5763006416627752, 0.1564082131255753, 0.10813681009331799, 0.19687524846520366, 0.16860995561737369, 0.20681711744060427, 0.10408397371302613, 0.10499794048333899, 0.29603500380280445, 0.1711913162529035, 0.16941198670910762, 0.193504112330665, 0.15976509435743724, 0.17657465489975055, 0.15329639440203446, 0.17841965703781426, 0.16271210570808836, 0.17530938979479704, 0.07776849036534628, 0.0834663180133115, 0.055811441230861236, 0.08275321790825585, 0.061889904153208275, 0.0698678495741537, 0.0664506211914273, 0.07906182747302415, 0.07071071062421141]}, "mutation_prompt": null}
{"id": "a844e072-3c8d-4c74-af6c-5836ead81b6f", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], self.diversity_rate * np.std(particles, axis=0))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "AdaptiveMutationDynamicParticleResonanceOptimizationImproved", "description": "Introducing a novel adaptive mutation strategy based on particle diversity to enhance exploration and improve convergence speed.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {"aucs": [0.6754817437682447, 0.7797698170655321, 0.8318669547835941, 0.7310452797711814, 0.716910889626618, 0.6462835065673505, 0.8332438791154774, 0.8201280922944464, 0.8218336937015804, 0.012614817429666303, 0.1080464594797137, 0.1738711956994119, 0.041841955739378656, 0.07506968382008505, 0.08912880845565319, 0.08238600982098454, 0.0358826111807512, 0.07293239328002343, 0.09210933421549983, 0.06633249161841615, 0.11522007824024605, 0.13049222826583406, 0.07475934689592345, 0.09658794353692779, 0.06943930306850943, 0.10281136228881238, 0.1322552185051571, 0.08717456605970819, 0.10693955268263167, 0.04346137912155623, 0.11350403996040126, 0.08053358699769508, 0.035725463730887363, 0.10645175693137987, 0.027962525093550017, 0.027357564712612303, 0.9040213861355177, 0.9852517087912385, 0.9834880716478911, 0.8321842457776356, 0.9557103589666064, 0.847598187073435, 0.9597986607060442, 0.880783234932794, 0.9381776838003475, 0.3507367453687593, 0.285187873803767, 0.1656271325242924, 0.3069417672221497, 0.3532910703428821, 0.18616130977126433, 0.561273177443673, 0.13895436077579493, 0.11603643252643814, 0.164303061427025, 0.10220071626607807, 0.13585484035175122, 0.19435607696744672, 0.1983102879598101, 0.1927157426277628, 0.1075110347621725, 0.17515548513107349, 0.23672200173461377, 0.3185972466408755, 0.12128603408303973, 0.1105177790425067, 0.12875346520975706, 0.12627714115030153, 0.0675805910952385, 0.6315352787646404, 0.1219555722015877, 0.1659232234402369, 0.13203200739342735, 0.11894251912758425, 0.18266440351623947, 0.14208859004661267, 0.16932437960810443, 0.13370114603831662, 0.2051019798562279, 0.03236057734101616, 0.10636895273131408, 0.05276196067687433, 9.999999999998899e-05, 0.0032567838371422297, 0.036346267620336214, 9.999999999998899e-05, 0.017256515075625756, 0.017364588319978447, 9.999999999998899e-05, 0.025335045857096672, 0.048027213696868465, 0.05443613867660191, 0.0872377758371069, 0.06705767252385453, 9.999999999998899e-05, 0.0024322268145416936, 0.09381936206478536, 0.043224278400148086, 0.03959688883736634, 0.09923662234673702, 0.1357162018353043, 0.05167647628874639, 0.07365777151001951, 0.1749205823866392, 0.06181599115685221, 0.10198878511850029, 0.09902302403867858, 0.06966095621054047, 0.18455927929385307, 0.1497197185278335, 0.1127183879857887, 0.02573367933046955, 0.09881424796565352, 0.1189052932881437, 0.2658974621579593, 0.06267923125392261, 0.1449556148739568, 0.5055699638416082, 0.46869304386427024, 0.5178688222495138, 0.46957150589938357, 0.5237673424139142, 0.5424160717941795, 0.5020844275610195, 0.4859855667815228, 0.5802950815733319, 0.07591962691272147, 0.05701476548801998, 0.11792406711458536, 0.10915941602550505, 0.04570121415161754, 0.08701352317089406, 0.07795205544059114, 0.04841179266624329, 0.06627643095952407, 0.18142797768546615, 0.26802913866370504, 0.15061479535318545, 0.2562243228195291, 0.2827139126224779, 0.2648223378989437, 0.3621001090633166, 0.12519169462191948, 0.2585629022088095, 0.19863395678010076, 0.29481741713763543, 0.2014025317874193, 0.29693296950269454, 0.22130976935034063, 0.2223230468030818, 0.19763545834817853, 0.26584582625197806, 0.36136609296692457, 0.14882461182829143, 0.22224151126691583, 0.15750634847336986, 0.17988592346338284, 0.14388283319445583, 0.11546694885708952, 0.17799307756562632, 0.16207715259096278, 0.1663604120965294, 0.18280164380488073, 0.160174317667357, 0.17473817410329062, 0.20889425991794208, 0.1943899408596057, 0.21166007844241042, 0.17755385326427453, 0.1802688491133747, 0.2216079795379684, 0.1881135328775001, 0.22830885649856236, 0.2043750777873422, 0.1868870549962146, 0.1678871220094783, 0.1586833118059645, 0.16400212432508943, 0.18308688462890355, 0.18150304759020552, 0.8243282475628102, 0.12631580019884026, 0.15378791204172393, 0.7238095991979427, 0.20058616297703924, 0.11635888844334263, 0.09981188757726411, 0.16888746448653713, 0.9173550290718058, 0.5763006416627752, 0.1564082131255753, 0.10813681009331799, 0.19687524846520366, 0.16860995561737369, 0.20681711744060427, 0.10408397371302613, 0.10499794048333899, 0.29603500380280445, 0.1711913162529035, 0.16941198670910762, 0.193504112330665, 0.15976509435743724, 0.17657465489975055, 0.15329639440203446, 0.17841965703781426, 0.16271210570808836, 0.17530938979479704, 0.07776849036534628, 0.0834663180133115, 0.055811441230861236, 0.08275321790825585, 0.061889904153208275, 0.0698678495741537, 0.0664506211914273, 0.07906182747302415, 0.07071071062421141]}, "mutation_prompt": null}
{"id": "d6ee8064-599a-49f4-a2f3-c0e55c38005f", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], self.diversity_rate * np.std(particles, axis=0))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "AdaptiveMutationDynamicParticleResonanceOptimizationImproved", "description": "Introducing a novel adaptive mutation strategy based on particle diversity to enhance exploration and improve convergence speed.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {"aucs": [0.6754817437682447, 0.7797698170655321, 0.8318669547835941, 0.7310452797711814, 0.716910889626618, 0.6462835065673505, 0.8332438791154774, 0.8201280922944464, 0.8218336937015804, 0.012614817429666303, 0.1080464594797137, 0.1738711956994119, 0.041841955739378656, 0.07506968382008505, 0.08912880845565319, 0.08238600982098454, 0.0358826111807512, 0.07293239328002343, 0.09210933421549983, 0.06633249161841615, 0.11522007824024605, 0.13049222826583406, 0.07475934689592345, 0.09658794353692779, 0.06943930306850943, 0.10281136228881238, 0.1322552185051571, 0.08717456605970819, 0.10693955268263167, 0.04346137912155623, 0.11350403996040126, 0.08053358699769508, 0.035725463730887363, 0.10645175693137987, 0.027962525093550017, 0.027357564712612303, 0.9040213861355177, 0.9852517087912385, 0.9834880716478911, 0.8321842457776356, 0.9557103589666064, 0.847598187073435, 0.9597986607060442, 0.880783234932794, 0.9381776838003475, 0.3507367453687593, 0.285187873803767, 0.1656271325242924, 0.3069417672221497, 0.3532910703428821, 0.18616130977126433, 0.561273177443673, 0.13895436077579493, 0.11603643252643814, 0.164303061427025, 0.10220071626607807, 0.13585484035175122, 0.19435607696744672, 0.1983102879598101, 0.1927157426277628, 0.1075110347621725, 0.17515548513107349, 0.23672200173461377, 0.3185972466408755, 0.12128603408303973, 0.1105177790425067, 0.12875346520975706, 0.12627714115030153, 0.0675805910952385, 0.6315352787646404, 0.1219555722015877, 0.1659232234402369, 0.13203200739342735, 0.11894251912758425, 0.18266440351623947, 0.14208859004661267, 0.16932437960810443, 0.13370114603831662, 0.2051019798562279, 0.03236057734101616, 0.10636895273131408, 0.05276196067687433, 9.999999999998899e-05, 0.0032567838371422297, 0.036346267620336214, 9.999999999998899e-05, 0.017256515075625756, 0.017364588319978447, 9.999999999998899e-05, 0.025335045857096672, 0.048027213696868465, 0.05443613867660191, 0.0872377758371069, 0.06705767252385453, 9.999999999998899e-05, 0.0024322268145416936, 0.09381936206478536, 0.043224278400148086, 0.03959688883736634, 0.09923662234673702, 0.1357162018353043, 0.05167647628874639, 0.07365777151001951, 0.1749205823866392, 0.06181599115685221, 0.10198878511850029, 0.09902302403867858, 0.06966095621054047, 0.18455927929385307, 0.1497197185278335, 0.1127183879857887, 0.02573367933046955, 0.09881424796565352, 0.1189052932881437, 0.2658974621579593, 0.06267923125392261, 0.1449556148739568, 0.5055699638416082, 0.46869304386427024, 0.5178688222495138, 0.46957150589938357, 0.5237673424139142, 0.5424160717941795, 0.5020844275610195, 0.4859855667815228, 0.5802950815733319, 0.07591962691272147, 0.05701476548801998, 0.11792406711458536, 0.10915941602550505, 0.04570121415161754, 0.08701352317089406, 0.07795205544059114, 0.04841179266624329, 0.06627643095952407, 0.18142797768546615, 0.26802913866370504, 0.15061479535318545, 0.2562243228195291, 0.2827139126224779, 0.2648223378989437, 0.3621001090633166, 0.12519169462191948, 0.2585629022088095, 0.19863395678010076, 0.29481741713763543, 0.2014025317874193, 0.29693296950269454, 0.22130976935034063, 0.2223230468030818, 0.19763545834817853, 0.26584582625197806, 0.36136609296692457, 0.14882461182829143, 0.22224151126691583, 0.15750634847336986, 0.17988592346338284, 0.14388283319445583, 0.11546694885708952, 0.17799307756562632, 0.16207715259096278, 0.1663604120965294, 0.18280164380488073, 0.160174317667357, 0.17473817410329062, 0.20889425991794208, 0.1943899408596057, 0.21166007844241042, 0.17755385326427453, 0.1802688491133747, 0.2216079795379684, 0.1881135328775001, 0.22830885649856236, 0.2043750777873422, 0.1868870549962146, 0.1678871220094783, 0.1586833118059645, 0.16400212432508943, 0.18308688462890355, 0.18150304759020552, 0.8243282475628102, 0.12631580019884026, 0.15378791204172393, 0.7238095991979427, 0.20058616297703924, 0.11635888844334263, 0.09981188757726411, 0.16888746448653713, 0.9173550290718058, 0.5763006416627752, 0.1564082131255753, 0.10813681009331799, 0.19687524846520366, 0.16860995561737369, 0.20681711744060427, 0.10408397371302613, 0.10499794048333899, 0.29603500380280445, 0.1711913162529035, 0.16941198670910762, 0.193504112330665, 0.15976509435743724, 0.17657465489975055, 0.15329639440203446, 0.17841965703781426, 0.16271210570808836, 0.17530938979479704, 0.07776849036534628, 0.0834663180133115, 0.055811441230861236, 0.08275321790825585, 0.061889904153208275, 0.0698678495741537, 0.0664506211914273, 0.07906182747302415, 0.07071071062421141]}, "mutation_prompt": null}
{"id": "4a3bac4b-39de-436b-88b8-51f3a26665ea", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], self.diversity_rate * np.std(particles, axis=0))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "AdaptiveMutationDynamicParticleResonanceOptimizationImproved", "description": "Introducing a novel adaptive mutation strategy based on particle diversity to enhance exploration and improve convergence speed.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {"aucs": [0.6754817437682447, 0.7797698170655321, 0.8318669547835941, 0.7310452797711814, 0.716910889626618, 0.6462835065673505, 0.8332438791154774, 0.8201280922944464, 0.8218336937015804, 0.012614817429666303, 0.1080464594797137, 0.1738711956994119, 0.041841955739378656, 0.07506968382008505, 0.08912880845565319, 0.08238600982098454, 0.0358826111807512, 0.07293239328002343, 0.09210933421549983, 0.06633249161841615, 0.11522007824024605, 0.13049222826583406, 0.07475934689592345, 0.09658794353692779, 0.06943930306850943, 0.10281136228881238, 0.1322552185051571, 0.08717456605970819, 0.10693955268263167, 0.04346137912155623, 0.11350403996040126, 0.08053358699769508, 0.035725463730887363, 0.10645175693137987, 0.027962525093550017, 0.027357564712612303, 0.9040213861355177, 0.9852517087912385, 0.9834880716478911, 0.8321842457776356, 0.9557103589666064, 0.847598187073435, 0.9597986607060442, 0.880783234932794, 0.9381776838003475, 0.3507367453687593, 0.285187873803767, 0.1656271325242924, 0.3069417672221497, 0.3532910703428821, 0.18616130977126433, 0.561273177443673, 0.13895436077579493, 0.11603643252643814, 0.164303061427025, 0.10220071626607807, 0.13585484035175122, 0.19435607696744672, 0.1983102879598101, 0.1927157426277628, 0.1075110347621725, 0.17515548513107349, 0.23672200173461377, 0.3185972466408755, 0.12128603408303973, 0.1105177790425067, 0.12875346520975706, 0.12627714115030153, 0.0675805910952385, 0.6315352787646404, 0.1219555722015877, 0.1659232234402369, 0.13203200739342735, 0.11894251912758425, 0.18266440351623947, 0.14208859004661267, 0.16932437960810443, 0.13370114603831662, 0.2051019798562279, 0.03236057734101616, 0.10636895273131408, 0.05276196067687433, 9.999999999998899e-05, 0.0032567838371422297, 0.036346267620336214, 9.999999999998899e-05, 0.017256515075625756, 0.017364588319978447, 9.999999999998899e-05, 0.025335045857096672, 0.048027213696868465, 0.05443613867660191, 0.0872377758371069, 0.06705767252385453, 9.999999999998899e-05, 0.0024322268145416936, 0.09381936206478536, 0.043224278400148086, 0.03959688883736634, 0.09923662234673702, 0.1357162018353043, 0.05167647628874639, 0.07365777151001951, 0.1749205823866392, 0.06181599115685221, 0.10198878511850029, 0.09902302403867858, 0.06966095621054047, 0.18455927929385307, 0.1497197185278335, 0.1127183879857887, 0.02573367933046955, 0.09881424796565352, 0.1189052932881437, 0.2658974621579593, 0.06267923125392261, 0.1449556148739568, 0.5055699638416082, 0.46869304386427024, 0.5178688222495138, 0.46957150589938357, 0.5237673424139142, 0.5424160717941795, 0.5020844275610195, 0.4859855667815228, 0.5802950815733319, 0.07591962691272147, 0.05701476548801998, 0.11792406711458536, 0.10915941602550505, 0.04570121415161754, 0.08701352317089406, 0.07795205544059114, 0.04841179266624329, 0.06627643095952407, 0.18142797768546615, 0.26802913866370504, 0.15061479535318545, 0.2562243228195291, 0.2827139126224779, 0.2648223378989437, 0.3621001090633166, 0.12519169462191948, 0.2585629022088095, 0.19863395678010076, 0.29481741713763543, 0.2014025317874193, 0.29693296950269454, 0.22130976935034063, 0.2223230468030818, 0.19763545834817853, 0.26584582625197806, 0.36136609296692457, 0.14882461182829143, 0.22224151126691583, 0.15750634847336986, 0.17988592346338284, 0.14388283319445583, 0.11546694885708952, 0.17799307756562632, 0.16207715259096278, 0.1663604120965294, 0.18280164380488073, 0.160174317667357, 0.17473817410329062, 0.20889425991794208, 0.1943899408596057, 0.21166007844241042, 0.17755385326427453, 0.1802688491133747, 0.2216079795379684, 0.1881135328775001, 0.22830885649856236, 0.2043750777873422, 0.1868870549962146, 0.1678871220094783, 0.1586833118059645, 0.16400212432508943, 0.18308688462890355, 0.18150304759020552, 0.8243282475628102, 0.12631580019884026, 0.15378791204172393, 0.7238095991979427, 0.20058616297703924, 0.11635888844334263, 0.09981188757726411, 0.16888746448653713, 0.9173550290718058, 0.5763006416627752, 0.1564082131255753, 0.10813681009331799, 0.19687524846520366, 0.16860995561737369, 0.20681711744060427, 0.10408397371302613, 0.10499794048333899, 0.29603500380280445, 0.1711913162529035, 0.16941198670910762, 0.193504112330665, 0.15976509435743724, 0.17657465489975055, 0.15329639440203446, 0.17841965703781426, 0.16271210570808836, 0.17530938979479704, 0.07776849036534628, 0.0834663180133115, 0.055811441230861236, 0.08275321790825585, 0.061889904153208275, 0.0698678495741537, 0.0664506211914273, 0.07906182747302415, 0.07071071062421141]}, "mutation_prompt": null}
{"id": "588dc122-a9d1-4b8e-8832-5f7418256d43", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            diversity_rate = self.diversity_rate * np.std(particles, axis=0)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], diversity_rate)\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "AdaptiveMutationDynamicParticleResonanceOptimizationImproved", "description": "Introducing dynamic adaptation of the diversity rate based on the particle fitness to accelerate convergence speed.", "configspace": "", "generation": 96, "fitness": 0.2261085078189798, "feedback": "The algorithm AdaptiveMutationDynamicParticleResonanceOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {"aucs": [0.5733792081738638, 0.8659777333465496, 0.6156396958261685, 0.8740719963341188, 0.6071489364493756, 0.49251118023767193, 0.7515049689514723, 0.8730987752245545, 0.5401942394419665, 0.006150392739970867, 0.14389397160444029, 0.24559320727245926, 0.057385356742399196, 0.15428652591905867, 0.024982509175878853, 0.15428592758995385, 0.08103937350809498, 0.09480017169521637, 0.09577654054926732, 0.11116297610269577, 0.09112142905232179, 0.08278211165323279, 0.06413117564389448, 0.08924133620349517, 0.07862968032737394, 0.10998052694067939, 0.12310787928664291, 0.06888635303842727, 0.07861872951019544, 0.05047788653565366, 0.10585587168406896, 0.06179548947237368, 0.0762187853452082, 0.061146707166140346, 0.03410922804070249, 0.024628216349334653, 0.9043187945696886, 0.985296704089754, 0.9834700589790665, 0.8626306492549933, 0.955598097934688, 0.7643206942886138, 0.9593555760887819, 0.941278435112622, 0.9383367547878323, 0.2514701650363165, 0.23730802752838975, 0.20774626579877853, 0.46416902393042625, 0.3020199290236596, 0.10075639921105561, 0.4511386546181181, 0.23178847616915665, 0.12216791457324438, 0.17487046416505692, 0.11665610222434897, 0.14928200861301155, 0.2032220925463375, 0.2102892583004896, 0.15008362239990514, 0.08629519413189246, 0.14543206256293129, 0.1810430933916325, 0.2707818897987645, 0.11401924553857623, 0.1189192882329475, 0.1176619476314803, 0.3560887692429857, 0.07207205314434362, 0.3085293897554403, 0.11590297857211518, 0.17486547126392127, 0.19562503572564915, 0.18276250774495362, 0.11225959428409027, 0.1443803922700887, 0.08852028606569562, 0.1316251002619785, 0.10991297213436979, 0.09197909234402302, 0.10691693820879267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029489007306689574, 0.0019522091083147286, 9.999999999998899e-05, 9.999999999998899e-05, 0.054979108088834217, 0.0005168892984848128, 0.05687871092588559, 0.05471607651504251, 0.08722816543354506, 0.06202143106423885, 0.003615472875747372, 9.999999999998899e-05, 0.16069975294556493, 0.04475191030820902, 0.02190584174638932, 0.17449151532426443, 0.14299570918923687, 0.06495413087770108, 0.03352155953836178, 0.12086130571873022, 0.16120491501254652, 0.09755404784998156, 0.10189286307380774, 0.06807093798239017, 0.35324129243684343, 0.18229891449637037, 0.11886922223839247, 0.022302368376769355, 0.08003825561254829, 0.3090616846344669, 0.2555366729695032, 0.07337414390151986, 0.11456526970313685, 0.5342211286450025, 0.5278483557448048, 0.47477198692066835, 0.5155376189881808, 0.4959870943085971, 0.5433470087657292, 0.5932024551718681, 0.4980203942399134, 0.5561620840746002, 0.06944526804556628, 0.06966434368127739, 0.04927616719626071, 0.10653159437587889, 0.029727720238616584, 0.07046631119272262, 0.06531718328480252, 0.10856581363137086, 0.09819056951272909, 0.1562488554245801, 0.18161364451994777, 0.18157801506248783, 0.22918289453316598, 0.24678242784607252, 0.21816093989676288, 0.3516954616143597, 0.15752236084115834, 0.2339229134282218, 0.17000907123036668, 0.38578332392564707, 0.2012926939030597, 0.2766694654431555, 0.24069111946661637, 0.21601488774624378, 0.16608508084751994, 0.2452002356108718, 0.28008971390395243, 0.09280117851838621, 0.2325050120635449, 0.12032558041817099, 0.3370632788370027, 0.172961310387179, 0.16724972164467777, 0.29620491362048285, 0.2084661624697688, 0.14471035751509387, 0.20553536065843037, 0.1877545857577173, 0.14125390762497514, 0.1936685448097637, 0.160923682266236, 0.2025263564944989, 0.16952813598792382, 0.19620383809003772, 0.1827987023817017, 0.18755248155921012, 0.19989107395462247, 0.20289944098234602, 0.20065448985466006, 0.20296066730843787, 0.17975809660447706, 0.20671742817133476, 0.16625778309247796, 0.17746765912776008, 0.8822870450418899, 0.12571950485198724, 0.15383671416504008, 0.6330049324524754, 0.20084318678777757, 0.11697983829509251, 0.09979761660337427, 0.16832940009956965, 0.9180279551944662, 0.7094189498456387, 0.15640427251598998, 0.10954625332022627, 0.19726091062389284, 0.16832166402213222, 0.20799414773927405, 0.10416706988465374, 0.105040694727218, 0.42357294155104164, 0.16890942673322007, 0.17785224643483832, 0.16907301554639964, 0.1679286136428667, 0.17465575066362726, 0.1721961893953936, 0.1687386577211626, 0.1704270611549069, 0.1622486534567461, 0.08392039403254326, 0.08617789276531918, 0.05750944951739534, 0.07566382152373785, 0.06650308197780308, 0.06249615616540172, 0.06308383387615868, 0.06628689277891886, 0.07277555108831679]}, "mutation_prompt": null}
{"id": "8b7a7437-c1b1-49e5-8e25-81f56160d952", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], self.diversity_rate * np.std(particles, axis=0))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "AdaptiveMutationDynamicParticleResonanceOptimizationImproved", "description": "Introducing a novel adaptive mutation strategy based on particle diversity to enhance exploration and improve convergence speed.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {"aucs": [0.6754817437682447, 0.7797698170655321, 0.8318669547835941, 0.7310452797711814, 0.716910889626618, 0.6462835065673505, 0.8332438791154774, 0.8201280922944464, 0.8218336937015804, 0.012614817429666303, 0.1080464594797137, 0.1738711956994119, 0.041841955739378656, 0.07506968382008505, 0.08912880845565319, 0.08238600982098454, 0.0358826111807512, 0.07293239328002343, 0.09210933421549983, 0.06633249161841615, 0.11522007824024605, 0.13049222826583406, 0.07475934689592345, 0.09658794353692779, 0.06943930306850943, 0.10281136228881238, 0.1322552185051571, 0.08717456605970819, 0.10693955268263167, 0.04346137912155623, 0.11350403996040126, 0.08053358699769508, 0.035725463730887363, 0.10645175693137987, 0.027962525093550017, 0.027357564712612303, 0.9040213861355177, 0.9852517087912385, 0.9834880716478911, 0.8321842457776356, 0.9557103589666064, 0.847598187073435, 0.9597986607060442, 0.880783234932794, 0.9381776838003475, 0.3507367453687593, 0.285187873803767, 0.1656271325242924, 0.3069417672221497, 0.3532910703428821, 0.18616130977126433, 0.561273177443673, 0.13895436077579493, 0.11603643252643814, 0.164303061427025, 0.10220071626607807, 0.13585484035175122, 0.19435607696744672, 0.1983102879598101, 0.1927157426277628, 0.1075110347621725, 0.17515548513107349, 0.23672200173461377, 0.3185972466408755, 0.12128603408303973, 0.1105177790425067, 0.12875346520975706, 0.12627714115030153, 0.0675805910952385, 0.6315352787646404, 0.1219555722015877, 0.1659232234402369, 0.13203200739342735, 0.11894251912758425, 0.18266440351623947, 0.14208859004661267, 0.16932437960810443, 0.13370114603831662, 0.2051019798562279, 0.03236057734101616, 0.10636895273131408, 0.05276196067687433, 9.999999999998899e-05, 0.0032567838371422297, 0.036346267620336214, 9.999999999998899e-05, 0.017256515075625756, 0.017364588319978447, 9.999999999998899e-05, 0.025335045857096672, 0.048027213696868465, 0.05443613867660191, 0.0872377758371069, 0.06705767252385453, 9.999999999998899e-05, 0.0024322268145416936, 0.09381936206478536, 0.043224278400148086, 0.03959688883736634, 0.09923662234673702, 0.1357162018353043, 0.05167647628874639, 0.07365777151001951, 0.1749205823866392, 0.06181599115685221, 0.10198878511850029, 0.09902302403867858, 0.06966095621054047, 0.18455927929385307, 0.1497197185278335, 0.1127183879857887, 0.02573367933046955, 0.09881424796565352, 0.1189052932881437, 0.2658974621579593, 0.06267923125392261, 0.1449556148739568, 0.5055699638416082, 0.46869304386427024, 0.5178688222495138, 0.46957150589938357, 0.5237673424139142, 0.5424160717941795, 0.5020844275610195, 0.4859855667815228, 0.5802950815733319, 0.07591962691272147, 0.05701476548801998, 0.11792406711458536, 0.10915941602550505, 0.04570121415161754, 0.08701352317089406, 0.07795205544059114, 0.04841179266624329, 0.06627643095952407, 0.18142797768546615, 0.26802913866370504, 0.15061479535318545, 0.2562243228195291, 0.2827139126224779, 0.2648223378989437, 0.3621001090633166, 0.12519169462191948, 0.2585629022088095, 0.19863395678010076, 0.29481741713763543, 0.2014025317874193, 0.29693296950269454, 0.22130976935034063, 0.2223230468030818, 0.19763545834817853, 0.26584582625197806, 0.36136609296692457, 0.14882461182829143, 0.22224151126691583, 0.15750634847336986, 0.17988592346338284, 0.14388283319445583, 0.11546694885708952, 0.17799307756562632, 0.16207715259096278, 0.1663604120965294, 0.18280164380488073, 0.160174317667357, 0.17473817410329062, 0.20889425991794208, 0.1943899408596057, 0.21166007844241042, 0.17755385326427453, 0.1802688491133747, 0.2216079795379684, 0.1881135328775001, 0.22830885649856236, 0.2043750777873422, 0.1868870549962146, 0.1678871220094783, 0.1586833118059645, 0.16400212432508943, 0.18308688462890355, 0.18150304759020552, 0.8243282475628102, 0.12631580019884026, 0.15378791204172393, 0.7238095991979427, 0.20058616297703924, 0.11635888844334263, 0.09981188757726411, 0.16888746448653713, 0.9173550290718058, 0.5763006416627752, 0.1564082131255753, 0.10813681009331799, 0.19687524846520366, 0.16860995561737369, 0.20681711744060427, 0.10408397371302613, 0.10499794048333899, 0.29603500380280445, 0.1711913162529035, 0.16941198670910762, 0.193504112330665, 0.15976509435743724, 0.17657465489975055, 0.15329639440203446, 0.17841965703781426, 0.16271210570808836, 0.17530938979479704, 0.07776849036534628, 0.0834663180133115, 0.055811441230861236, 0.08275321790825585, 0.061889904153208275, 0.0698678495741537, 0.0664506211914273, 0.07906182747302415, 0.07071071062421141]}, "mutation_prompt": null}
{"id": "90cf6939-3fd9-41f7-a02c-f9298f025fa9", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], self.diversity_rate * np.std(particles, axis=0))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n\n        return g_best", "name": "AdaptiveMutationDynamicParticleResonanceOptimizationImproved", "description": "Introducing a novel adaptive mutation strategy based on particle diversity to enhance exploration and improve convergence speed.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {"aucs": [0.6754817437682447, 0.7797698170655321, 0.8318669547835941, 0.7310452797711814, 0.716910889626618, 0.6462835065673505, 0.8332438791154774, 0.8201280922944464, 0.8218336937015804, 0.012614817429666303, 0.1080464594797137, 0.1738711956994119, 0.041841955739378656, 0.07506968382008505, 0.08912880845565319, 0.08238600982098454, 0.0358826111807512, 0.07293239328002343, 0.09210933421549983, 0.06633249161841615, 0.11522007824024605, 0.13049222826583406, 0.07475934689592345, 0.09658794353692779, 0.06943930306850943, 0.10281136228881238, 0.1322552185051571, 0.08717456605970819, 0.10693955268263167, 0.04346137912155623, 0.11350403996040126, 0.08053358699769508, 0.035725463730887363, 0.10645175693137987, 0.027962525093550017, 0.027357564712612303, 0.9040213861355177, 0.9852517087912385, 0.9834880716478911, 0.8321842457776356, 0.9557103589666064, 0.847598187073435, 0.9597986607060442, 0.880783234932794, 0.9381776838003475, 0.3507367453687593, 0.285187873803767, 0.1656271325242924, 0.3069417672221497, 0.3532910703428821, 0.18616130977126433, 0.561273177443673, 0.13895436077579493, 0.11603643252643814, 0.164303061427025, 0.10220071626607807, 0.13585484035175122, 0.19435607696744672, 0.1983102879598101, 0.1927157426277628, 0.1075110347621725, 0.17515548513107349, 0.23672200173461377, 0.3185972466408755, 0.12128603408303973, 0.1105177790425067, 0.12875346520975706, 0.12627714115030153, 0.0675805910952385, 0.6315352787646404, 0.1219555722015877, 0.1659232234402369, 0.13203200739342735, 0.11894251912758425, 0.18266440351623947, 0.14208859004661267, 0.16932437960810443, 0.13370114603831662, 0.2051019798562279, 0.03236057734101616, 0.10636895273131408, 0.05276196067687433, 9.999999999998899e-05, 0.0032567838371422297, 0.036346267620336214, 9.999999999998899e-05, 0.017256515075625756, 0.017364588319978447, 9.999999999998899e-05, 0.025335045857096672, 0.048027213696868465, 0.05443613867660191, 0.0872377758371069, 0.06705767252385453, 9.999999999998899e-05, 0.0024322268145416936, 0.09381936206478536, 0.043224278400148086, 0.03959688883736634, 0.09923662234673702, 0.1357162018353043, 0.05167647628874639, 0.07365777151001951, 0.1749205823866392, 0.06181599115685221, 0.10198878511850029, 0.09902302403867858, 0.06966095621054047, 0.18455927929385307, 0.1497197185278335, 0.1127183879857887, 0.02573367933046955, 0.09881424796565352, 0.1189052932881437, 0.2658974621579593, 0.06267923125392261, 0.1449556148739568, 0.5055699638416082, 0.46869304386427024, 0.5178688222495138, 0.46957150589938357, 0.5237673424139142, 0.5424160717941795, 0.5020844275610195, 0.4859855667815228, 0.5802950815733319, 0.07591962691272147, 0.05701476548801998, 0.11792406711458536, 0.10915941602550505, 0.04570121415161754, 0.08701352317089406, 0.07795205544059114, 0.04841179266624329, 0.06627643095952407, 0.18142797768546615, 0.26802913866370504, 0.15061479535318545, 0.2562243228195291, 0.2827139126224779, 0.2648223378989437, 0.3621001090633166, 0.12519169462191948, 0.2585629022088095, 0.19863395678010076, 0.29481741713763543, 0.2014025317874193, 0.29693296950269454, 0.22130976935034063, 0.2223230468030818, 0.19763545834817853, 0.26584582625197806, 0.36136609296692457, 0.14882461182829143, 0.22224151126691583, 0.15750634847336986, 0.17988592346338284, 0.14388283319445583, 0.11546694885708952, 0.17799307756562632, 0.16207715259096278, 0.1663604120965294, 0.18280164380488073, 0.160174317667357, 0.17473817410329062, 0.20889425991794208, 0.1943899408596057, 0.21166007844241042, 0.17755385326427453, 0.1802688491133747, 0.2216079795379684, 0.1881135328775001, 0.22830885649856236, 0.2043750777873422, 0.1868870549962146, 0.1678871220094783, 0.1586833118059645, 0.16400212432508943, 0.18308688462890355, 0.18150304759020552, 0.8243282475628102, 0.12631580019884026, 0.15378791204172393, 0.7238095991979427, 0.20058616297703924, 0.11635888844334263, 0.09981188757726411, 0.16888746448653713, 0.9173550290718058, 0.5763006416627752, 0.1564082131255753, 0.10813681009331799, 0.19687524846520366, 0.16860995561737369, 0.20681711744060427, 0.10408397371302613, 0.10499794048333899, 0.29603500380280445, 0.1711913162529035, 0.16941198670910762, 0.193504112330665, 0.15976509435743724, 0.17657465489975055, 0.15329639440203446, 0.17841965703781426, 0.16271210570808836, 0.17530938979479704, 0.07776849036534628, 0.0834663180133115, 0.055811441230861236, 0.08275321790825585, 0.061889904153208275, 0.0698678495741537, 0.0664506211914273, 0.07906182747302415, 0.07071071062421141]}, "mutation_prompt": null}
{"id": "c728545e-6a66-44dd-9cba-638b99ac68dc", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationDynamicParticleResonanceOptimizationImproved:\n    def __init__(self, budget, dim, num_particles=30, w=0.5, c1=1.5, c2=1.5, elitism_rate=0.1, momentum=0.1, diversity_rate=0.1, inertia_range=(0.1, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.elitism_rate = elitism_rate\n        self.momentum = momentum\n        self.diversity_rate = diversity_rate\n        self.inertia_range = inertia_range\n\n    def __call__(self, func):\n        def mutate(particle, diversity_rate):\n            return particle + np.random.normal(0, diversity_rate, size=self.dim)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        particle_best = particles.copy()\n        g_best = particle_best[np.argmin([func(p) for p in particles])]\n        velocities = np.zeros_like(particles)\n        prev_velocities = np.zeros_like(particles)\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (t / self.budget)\n            for i in range(self.num_particles):\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * np.random.rand() * (particle_best[i] - particles[i]) + self.c2 * np.random.rand() * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i], self.diversity_rate * np.std(particles, axis=0))\n                if func(particles[i]) < func(particle_best[i]):\n                    particle_best[i] = particles[i]\n                if func(particles[i]) < func(g_best):\n                    g_best = particles[i]\n                prev_velocities[i] = self.momentum * velocities[i]\n            elite_idx = np.argsort([func(p) for p in particles])[:int(self.elitism_rate * self.num_particles)]\n            particles[elite_idx] = particle_best[elite_idx]\n            \n            # Introducing a new adaptive mutation strategy based on best position memory\n            best_memories = particles[np.argsort([func(p) for p in particles])[:self.num_particles//5]]\n            for i in range(self.num_particles):\n                particles[i] = particles[i] + np.random.normal(0, np.abs(g_best - best_memories[i]) * 0.1, size=self.dim)\n\n        return g_best", "name": "EnhancedAdaptiveMutationDynamicParticleResonanceOptimizationImproved", "description": "Enhancing convergence speed by introducing a novel adaptive mutation strategy based on particle diversity and best position memory for improved exploration and exploitation.", "configspace": "", "generation": 99, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 6 is out of bounds for axis 0 with size 6').", "error": "IndexError('index 6 is out of bounds for axis 0 with size 6')", "parent_id": "b3e1187f-edfb-4cbf-bf2f-1d3cd90880c5", "metadata": {}, "mutation_prompt": null}
