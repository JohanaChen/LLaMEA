{"id": "d9eeb3fa-1e04-4933-afdf-5e04899a0538", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "702a04e9-3bb9-491d-979f-59c64ea05414", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 1, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d9eeb3fa-1e04-4933-afdf-5e04899a0538", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "a465baa7-469e-4e99-a097-88cc365fa016", "solution": "import numpy as np\n\nclass EnhancedMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            global_fitness_avg = np.mean(fitness)  # Calculate global fitness average\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind)) + 0.005 * (global_fitness_avg - func(ind))  # Dynamic mutation adjustment using global fitness\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "EnhancedMutationAlgorithm", "description": "Introducing a strategy to dynamically adjust mutation rates based on both individual and global fitness values to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "aae602c3-ad28-4bf1-8c3e-446bdb667a74", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "6e552e1b-2a40-4af0-9787-7c1a3eadc58e", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "61c3d8a9-03f9-4d3e-9203-d0b6faf82100", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "5cb99a74-7186-4dbe-b70d-4641e2cc4a6a", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            \n            mean_fitness = np.mean(fitness)\n            mutation_rate = self.mutation_rate + 0.01 * (mean_fitness - func(best_individual))  # Adaptive mutation adjustment based on population fitness\n            new_population = []\n            \n            for ind in population:\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedDynamicMutationAlgorithm", "description": "Introducing a self-adaptive mechanism to adjust the mutation rate based on the overall population fitness to enhance convergence speed.", "configspace": "", "generation": 6, "fitness": 0.09144843562834938, "feedback": "The algorithm ImprovedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "005bbd83-ff9b-467c-96bb-fd991cc10c38", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.ones(budget) * 0.1  # Initial mutation rates\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for i, ind in enumerate(population):\n                mutation_rate = self.mutation_rates[i] + 0.01 * (fitness[best_idx] - func(ind))  # Adaptive mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n                self.mutation_rates[i] = mutation_rate\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedDynamicMutationAlgorithm", "description": "Introducing adaptive individual learning rates to adjust mutation rates based on individual performance for faster convergence.", "configspace": "", "generation": 7, "fitness": 0.09144843562834938, "feedback": "The algorithm ImprovedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b02d64c1-06e7-4c81-aba6-fe7d33b87dd2", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "33f0805d-dfbf-45b6-b34e-3015e6f763fc", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "EnhancedDynamicMutationAlgorithm", "description": "Introducing adaptive search step sizes based on individual fitness to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 9, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "62954e42-b1f9-4aac-bf67-1719bcd78506", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "1ac1e1e1-83fc-48b3-bdcf-62c8756c46ab", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c160e3c2-acdc-499d-9be1-2f3d2210da4a", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "ac91a90e-06a2-4290-89c6-5f34d8dc68e3", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            mutation_rates = [self.mutation_rate + 0.01 * (fitness[best_idx] - f) for f in fitness]  # Dynamic mutation adjustment based on fitness\n            diversity_factor = np.std(population, axis=0)  # Measure population diversity\n            mutation_rates += 0.5 * diversity_factor * np.random.randn(self.budget)  # Incorporate population diversity\n\n            for ind, rate in zip(population, mutation_rates):\n                mutated = ind + rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "EnhancedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation algorithm with adaptive mutation rates based on a combination of individual fitness and population diversity to enhance convergence speed.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (5,) (10000,) ').", "error": "ValueError('operands could not be broadcast together with shapes (5,) (10000,) ')", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {}, "mutation_prompt": null}
{"id": "6a50973b-6cb8-4dac-ac47-b53ac2c96b27", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0f0cda2a-f054-4495-aebb-af065c9c0c44", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "5e71a38a-2762-4e57-b4db-35339200b2cc", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "48657450-5503-4985-8140-2d932f531ca2", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0f9cfdbb-568d-4b91-9965-cacd146d695a", "solution": "import numpy as np\n\nclass AdaptiveStepSizeES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.step_size = 0.1  # Initial step size\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                step_size = self.step_size * np.exp(0.01 * (fitness[best_idx] - func(ind)))  # Adaptive step size adjustment\n                mutated = ind + step_size * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AdaptiveStepSizeES", "description": "Implementing a novel Adaptive Step Size Evolution Strategy (AS-ES) by dynamically adjusting step sizes based on individual fitness for accelerated convergence.", "configspace": "", "generation": 18, "fitness": 0.09144843562834938, "feedback": "The algorithm AdaptiveStepSizeES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "1a698ffa-54bc-43da-a328-73af2fc70e6b", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            global_best_fitness = min(fitness)\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (global_best_fitness - func(ind))  # Enhanced dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy that incorporates a self-adaptive mechanism for mutation rate adjustment based on individual and global fitness information to enhance convergence rates.", "configspace": "", "generation": 19, "fitness": 0.09144843562834938, "feedback": "The algorithm ImprovedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "43a74d19-c45d-4e3d-ad64-ff1b830d173e", "solution": "import numpy as np\n\nclass EnhancedMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n        self.population_size = budget // 2  # Initial population size\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "EnhancedMutationAlgorithm", "description": "Integrating a self-adaptive parameter control mechanism to dynamically adjust both mutation rates and the population size for enhanced convergence speed.", "configspace": "", "generation": 20, "fitness": 0.08946331248363935, "feedback": "The algorithm EnhancedMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.18818139055183436, 0.1743435064021196, 0.1785507992358102, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03618932539327069, 0.039358615885642156, 0.03732066520661048, 0.03662342001376073, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.02522623681495484, 0.030929276720888965, 0.0481463786277756, 0.025965940872886173, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.029763828138413717, 0.08746944629118047, 0.06992874714624453, 0.09087431849796956, 0.08255278050690396, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053505462876194176, 0.062276416502640486, 0.05190122563388122, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10375357913913519, 0.08781766711623695, 0.1248938498681409, 0.1161373594082461, 0.1368487698841222, 0.1135869029704345, 9.999999999998899e-05, 9.999999999998899e-05, 0.003689195106263865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 9.999999999998899e-05, 0.06957272857429797, 9.999999999998899e-05, 0.007159387613177359, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.026730708648839974, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.17783153199113855, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1978530039868921, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.036156308771396306, 0.04401887178405428, 0.03996840984097694, 0.03847244148095974, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13709410100555053, 0.12097741977815568, 0.12602203673178558, 0.14106301975521696, 0.14115194246620144, 0.12439502916632517, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.15950729452706836, 0.16814906059237933, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16244737848268365, 0.17377774300845283, 0.14944136665615082, 0.1062088030534345, 0.10382166168941254, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.13862541120486005, 0.16233450221944246, 0.143986152955921, 0.1601583581414543, 0.1409445066431697, 0.16236042742370171, 0.14860716125581908, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.13697870895265896, 0.14164044590726022, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1571573551766411, 0.15096921747452707, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.15692009224327252, 0.15672808824074347, 0.1580636080386837, 0.16050779395916304, 0.150330135465925, 0.14870682596182816, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1684049600135309, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.188688463014553, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.04674619266333635]}, "mutation_prompt": null}
{"id": "0a8aea56-82ff-4791-818f-ae58f42ad5bb", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                fitness_diff = np.abs(fitness[best_idx] - func(ind))\n                mutation_rate = self.mutation_rate + 0.01 * fitness_diff\n                mutation_factor = np.random.normal(0, 1, self.dim)\n                mutated = ind + mutation_rate * mutation_factor\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedDynamicMutationAlgorithm", "description": "Introducing a non-uniform mutation that prioritizes exploring the search space with a probability distribution based on fitness differences.", "configspace": "", "generation": 21, "fitness": 0.09144843562834938, "feedback": "The algorithm ImprovedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e248ae4f-7a97-49a9-b016-7d1fa69277a1", "solution": "import numpy as np\n\nclass AdaptiveMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            diversity = np.mean(np.std(population, axis=0))  # Measure population diversity\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind)) + 0.005 * diversity  # Adaptive mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AdaptiveMutationAlgorithm", "description": "Utilizing an adaptive mutation strategy based on population diversity to enhance convergence speed.", "configspace": "", "generation": 22, "fitness": 0.09144843562834938, "feedback": "The algorithm AdaptiveMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "d2be30a3-aa90-45a2-bbad-7ca6b8121f3d", "solution": "import numpy as np\n\nclass FastDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            diversity = np.mean(np.std(population, axis=0))  # Calculate population diversity\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind)) + 0.1 * diversity  # Dynamic mutation adjustment with diversity\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "FastDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation mechanism that adapts based on the population diversity to enhance exploration and exploitation trade-off for faster convergence.", "configspace": "", "generation": 23, "fitness": 0.09144843562834938, "feedback": "The algorithm FastDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "6e2aff44-7c42-4a24-8a87-f3ac10c15a52", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e548bdf0-e3e8-4494-be1f-c1fdcf546f96", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "17c64605-623b-4cb7-b642-0e4ae6f18d06", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "837b895c-c103-42c9-96e6-9fd57d77e92e", "solution": "import numpy as np\n\nclass ElitistDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = [best_individual]  # Elitism - preserving the best individual\n            for _ in range(1, self.budget):\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(population[_]))  # Dynamic mutation adjustment\n                mutated = population[_] + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ElitistDynamicMutationAlgorithm", "description": "Introducing a elitism mechanism to preserve the best individual in each generation, enhancing convergence speed.", "configspace": "", "generation": 27, "fitness": 0.09144843562834938, "feedback": "The algorithm ElitistDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "435873df-40ae-4f22-b341-1f9a9fe30105", "solution": "import numpy as np\n\nclass AdaptiveMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n        self.history = []  # List to store historical information\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                self.history.append(mutation_rate)  # Store mutation rate in history\n                if len(self.history) > 1:\n                    mutation_rate += 0.1 * (self.history[-1] - self.history[-2])  # Adapt mutation rate based on historical information\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AdaptiveMutationAlgorithm", "description": "Introducing a mutation step size adaptation based on historical information to accelerate convergence while maintaining the original code's dynamic mutation strategy.", "configspace": "", "generation": 28, "fitness": 0.09144843562834938, "feedback": "The algorithm AdaptiveMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "95e6470a-c2c9-43a8-80d4-9b505e030d92", "solution": "import numpy as np\n\nclass DynamicSelectionMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def diversity(self, population):\n        return np.mean(np.std(population, axis=0))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            diversity_scores = [self.diversity(population)] * self.budget\n            combined_scores = np.array(fitness) + 0.5 * np.array(diversity_scores)  # Dynamic selection\n            best_idx = np.argmin(combined_scores)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for idx, ind in enumerate(population):\n                mutation_rate = self.mutation_rate + 0.01 * (combined_scores[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicSelectionMutationAlgorithm", "description": "Introducing a dynamic selection mechanism to prioritize individuals for mutation based on a combination of fitness and diversity to enhance exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicSelectionMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "6f05b68a-0c6e-41fb-a86e-6d5a6f505595", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Dynamic mutation adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation approach based on individual fitness to adaptively adjust mutation rates for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 31, "fitness": 0.0916071101569626, "feedback": "The algorithm AcceleratedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "702a04e9-3bb9-491d-979f-59c64ea05414", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "638c20aa-7be2-4f34-ae24-ccfe4306a056", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.02 * (fitness[best_idx] - func(ind))  # Adjusted mutation rate update\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "EnhancedDynamicMutationAlgorithm", "description": "Improved exploration and exploitation by dynamically adjusting mutation rates based on individual fitness, leading to faster convergence.", "configspace": "", "generation": 32, "fitness": 0.0916071101569626, "feedback": "The algorithm EnhancedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "c40c726b-58e3-48e0-9efe-5e370eb803d1", "solution": "import numpy as np\n\nclass SelfAdaptiveMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def diversity_measure(self, population):\n        return np.mean(np.std(population, axis=0))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            diversity = self.diversity_measure(population)\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * diversity\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "SelfAdaptiveMutationAlgorithm", "description": "Implementing a self-adaptive mutation strategy that adjusts the mutation rate based on the population's diversity to enhance exploration and exploitation, leading to faster convergence.", "configspace": "", "generation": 33, "fitness": 0.0916071101569626, "feedback": "The algorithm SelfAdaptiveMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "d9f8fb47-8360-4b68-abee-844978e640a1", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "f837bc70-ef52-4678-8d7b-651fa7b2aac2", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind)) + 0.005 * np.sum(np.abs(best_individual - ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithmImproved", "description": "Introducing a dynamic mutation rate adaptation based on the historical performance of individuals to enhance exploitation and convergence speed.", "configspace": "", "generation": 35, "fitness": 0.0916071101569626, "feedback": "The algorithm AcceleratedDynamicMutationAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "171caf68-4ddf-4ec9-b54b-988e49570096", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        mutation_rates = np.ones(self.budget) * 0.1\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for idx, ind in enumerate(population):\n                mutation_rate = mutation_rates[idx] + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutation_rates[idx] = mutation_rate\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithmImproved", "description": "Introducing a dynamic adaptive mutation strategy that incorporates individual learning rates based on personal progress to enhance exploration and exploitation dynamically.", "configspace": "", "generation": 36, "fitness": 0.0916071101569626, "feedback": "The algorithm AcceleratedDynamicMutationAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "ab9ab235-d6ac-4225-931b-0a7073f59544", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "2917fb67-860f-4645-9797-781b56257779", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "86744232-fb93-455c-bf6a-7a6faba37ecc", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "6f61e65d-5949-4a1b-82c4-cdcb48f42280", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "de6d1fba-ff25-420d-a527-94612703a4bf", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "953f6693-2110-4bae-899d-676b0292aaab", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.02 * (fitness[best_idx] - func(ind))  # Dynamic mutation rate update\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "EnhancedDynamicMutationAlgorithm", "description": "Introducing a dynamic mutation rate update based on the difference between the best individual and the current individual's fitness to enhance exploitation and accelerate convergence speed.", "configspace": "", "generation": 42, "fitness": 0.0916071101569626, "feedback": "The algorithm EnhancedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "cc986f2e-5640-4379-9e5b-e610d68005dc", "solution": "import numpy as np\n\nclass AdaptiveMutationControlAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.base_mutation_rate = 0.1\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                performance_difference = abs(fitness[best_idx] - func(ind))\n                mutation_rate = self.base_mutation_rate + 0.01 * performance_difference\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AdaptiveMutationControlAlgorithm", "description": "Introducing adaptive mutation control based on individual performance to dynamically adjust exploration rate, enhancing convergence speed.", "configspace": "", "generation": 43, "fitness": 0.0916071101569626, "feedback": "The algorithm AdaptiveMutationControlAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "9e7e0437-83f7-4423-9000-d9431f660867", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "c6763cde-583f-4e56-82b8-756fca913877", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * np.log(1 + np.abs(fitness[best_idx] - func(ind)))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedDynamicMutationAlgorithm", "description": "Introducing adaptive mutation rates based on a logarithmic scale to balance exploration and exploitation, enhancing convergence speed.", "configspace": "", "generation": 45, "fitness": 0.0916071101569626, "feedback": "The algorithm ImprovedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "e2c42f9d-c649-4d6d-82fd-cacae4300322", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "c287f795-4a75-4ef4-a84e-73a6062630cf", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "ba4fa436-adad-4d05-bacf-faac57a6a974", "solution": "import numpy as np\n\nclass ImprovedAcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_mutation_rate = 0.1\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        mutation_rate = np.full(self.budget, self.initial_mutation_rate)\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for idx, ind in enumerate(population):\n                mutation_rate[idx] += 0.01 * (fitness[best_idx] - func(ind))\n                mutation_rate[idx] = max(0.01, min(0.2, mutation_rate[idx]))  # Bound mutation rate\n                mutated = ind + mutation_rate[idx] * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedAcceleratedDynamicMutationAlgorithm", "description": "Introducing a self-adaptive mutation strategy that dynamically adjusts the mutation rate based on the population's performance to improve convergence speed.", "configspace": "", "generation": 48, "fitness": 0.0916071101569626, "feedback": "The algorithm ImprovedAcceleratedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "7fd01870-79f2-4c39-aa59-89e211878d43", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "c849bba6-f162-4795-8c77-980fc399abc5", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for idx, ind in enumerate(population):\n                mutation_rate = 0.1 + 0.9 * np.exp(-0.1 * idx)\n                mutated = ind + mutation_rate * (best_individual - ind) + 0.1 * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedDynamicMutationAlgorithm", "description": "Updating the mutation strategy to adapt individually for each individual based on a weighted average of the best individual and each candidate, enhancing exploration and exploitation.", "configspace": "", "generation": 50, "fitness": 0.0916071101569626, "feedback": "The algorithm ImprovedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "b7fb7cfe-30f5-44d0-be10-4116db2c38ff", "solution": "import numpy as np\n\nclass EnhancedAcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind)) + 0.005 * np.sum(np.abs(fitness - func(ind)))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "EnhancedAcceleratedDynamicMutationAlgorithm", "description": "Enhanced AcceleratedDynamicMutationAlgorithm with adaptive mutation scaling based on individual fitness improvements for faster convergence.", "configspace": "", "generation": 51, "fitness": 0.0916071101569626, "feedback": "The algorithm EnhancedAcceleratedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "a7390040-127e-4d06-8428-a3cbf7ce2fb9", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "9eec4890-acd1-4e63-987c-ae735f43ca5b", "solution": "import numpy as np\n\nclass AdaptiveDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.base_mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def diversity_based_mutation(self, fitness, best_fitness):\n        diversity = np.std(fitness) / best_fitness\n        return self.base_mutation_rate + 0.01 * diversity\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.diversity_based_mutation(fitness, fitness[best_idx])\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AdaptiveDynamicMutationAlgorithm", "description": "Introducing a dynamic mutation strategy that adapts based on the population's diversity to enhance exploration and exploitation, improving convergence speed.", "configspace": "", "generation": 53, "fitness": 0.0916071101569626, "feedback": "The algorithm AdaptiveDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "825e7a42-4584-4cfe-a553-736ae0535019", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind)) + 0.005 * np.random.randn()\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "EnhancedDynamicMutationAlgorithm", "description": "Improving convergence speed by incorporating a dynamic mutation rate based on individual fitness differences to adapt mutation more effectively.", "configspace": "", "generation": 54, "fitness": 0.0916071101569626, "feedback": "The algorithm EnhancedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "37ca4900-3697-47ca-b28c-c99c6ea8a10d", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind)) + 0.002 * np.sum(np.abs(ind - best_individual))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "EnhancedDynamicMutationAlgorithm", "description": "Introducing adaptive mutation rate adjustment based on individual fitness to enhance exploration and exploitation dynamically, improving convergence speed.", "configspace": "", "generation": 55, "fitness": 0.0916071101569626, "feedback": "The algorithm EnhancedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "c840b675-f240-484a-b9e5-b669abdaa4f5", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            performance_variance = np.var(fitness)\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * performance_variance\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "EnhancedDynamicMutationAlgorithm", "description": "Enhancing convergence speed by incorporating a novel adaptive mutation strategy based on individual performance variance.", "configspace": "", "generation": 56, "fitness": 0.0916071101569626, "feedback": "The algorithm EnhancedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "f8763844-49d7-450c-ba01-44ce2b3370bb", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            diversity = np.sum(np.std(population, axis=0))\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind)) + 0.005 * diversity\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual\n", "name": "ImprovedDynamicMutationAlgorithm", "description": "Introducing a self-adaptive mutation strategy that adjusts the mutation rate based on the population's diversity to improve convergence speed.", "configspace": "", "generation": 57, "fitness": 0.0916071101569626, "feedback": "The algorithm ImprovedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "6d9bc1f6-ce76-4470-8b35-066e3dd88512", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "feaa022d-295c-4b26-a2ff-291a59a99272", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "f7cf1e1c-9b08-40e9-a1d4-dfadbb60426e", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "4e1aeefa-f748-4f1f-9371-bc4eb8f03a7a", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "7ca0adfd-2faa-4769-b31b-a297fc577f45", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for idx, ind in enumerate(population):\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind)) + 0.005 * (fitness[best_idx] - fitness[idx])\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedDynamicMutationAlgorithm", "description": "Introducing adaptive mutation strategy with self-adaptation to individual performance dynamically during the optimization process to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 62, "fitness": 0.0916071101569626, "feedback": "The algorithm ImprovedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "987452cd-f90b-4c25-b311-21f8d9062469", "solution": "import numpy as np\n\nclass AdaptiveMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_mutation_rate = 0.1\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for idx, ind in enumerate(population):\n                if idx == best_idx:\n                    mutation_rate = self.initial_mutation_rate\n                else:\n                    mutation_rate = self.initial_mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AdaptiveMutationAlgorithm", "description": "Introducing adaptive mutation rates based on individual performance to dynamically adjust exploration and exploitation trade-off, enhancing convergence speed.", "configspace": "", "generation": 63, "fitness": 0.0916071101569626, "feedback": "The algorithm AdaptiveMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "b3e23925-d079-44b3-9fa4-dc3f9e319506", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.base_mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                individual_fitness = func(ind)\n                mutation_rate = self.base_mutation_rate + 0.01 * (fitness[best_idx] - individual_fitness) + 0.005 * individual_fitness\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "EnhancedDynamicMutationAlgorithm", "description": "Introducing a dynamic mutation control mechanism based on individual fitness performance to adaptively adjust exploration and exploitation rates, enhancing convergence speed.", "configspace": "", "generation": 64, "fitness": 0.0916071101569626, "feedback": "The algorithm EnhancedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "ee3c5b0d-676a-4dd1-9fad-ac7299e858e3", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "9194d1ee-58b2-4cb1-a0b7-5f4671aff5a2", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                diversity_factor = np.std(population)\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind)) * diversity_factor\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "EnhancedDynamicMutationAlgorithm", "description": "Introducing a self-adaptive mutation rate that adjusts based on the population's diversity to enhance exploration and exploitation effectively.", "configspace": "", "generation": 66, "fitness": 0.0916071101569626, "feedback": "The algorithm EnhancedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "fbbc0aa0-e7ef-4d35-aec2-c922c80c48fb", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutation_rate *= 0.9  # Adjust mutation rate for faster convergence\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedDynamicMutationAlgorithm", "description": "Introducing adaptive mutation step size adjustment based on individual fitness to accelerate convergence speed while maintaining diversity.", "configspace": "", "generation": 67, "fitness": 0.0916071101569626, "feedback": "The algorithm ImprovedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "46ab513e-f6bf-496b-b5ca-85b275ff4c1d", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "27cc0bfc-1e20-4930-881e-9f02a4d344c8", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "6e7cecac-e2e8-439b-aa6c-f54636a692dd", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "47b53e6f-2bac-4999-8d6e-5ca60356e50b", "solution": "import numpy as np\n\nclass AdaptiveMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_mutation_rate = 0.1\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for idx, ind in enumerate(population):\n                mutation_rate = self.initial_mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AdaptiveMutationAlgorithm", "description": "Implementing a novel adaptive mutation mechanism that adjusts mutation rates based on individual fitness to enhance local search capabilities and accelerate convergence speed.", "configspace": "", "generation": 71, "fitness": 0.0916071101569626, "feedback": "The algorithm AdaptiveMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "9bc660b3-3c0c-457c-b454-393ae3c919d4", "solution": "import numpy as np\n\nclass FastConvergingDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.base_mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for idx, ind in enumerate(population):\n                mutation_rate = self.base_mutation_rate + 0.01 * (fitness[best_idx] - fitness[idx])\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "FastConvergingDynamicMutationAlgorithm", "description": "Introducing a variable mutation rate based on individual fitness to adaptively adjust exploration and exploitation balance, enhancing convergence speed.", "configspace": "", "generation": 72, "fitness": 0.0916071101569626, "feedback": "The algorithm FastConvergingDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "39ef1734-bfa8-4acc-815b-4b75b27830d3", "solution": "import numpy as np\n\nclass ImprovedAcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))  # Adaptive mutation rate based on individual fitness\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedAcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy with adaptive mutation rates based on individual fitness to enhance exploration and exploitation, leading to accelerated convergence speed with improved adaptation.", "configspace": "", "generation": 73, "fitness": 0.0916071101569626, "feedback": "The algorithm ImprovedAcceleratedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "b33bd0f3-5fd6-48ef-b9ff-21c1602408b1", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedDynamicMutationAlgorithm", "description": "Introducing a self-adaptive mutation rate based on individual performance to dynamically adjust exploration and exploitation trade-off, enhancing convergence speed.", "configspace": "", "generation": 74, "fitness": 0.0916071101569626, "feedback": "The algorithm ImprovedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "603fae74-4434-4b8e-8e4e-468442fc6320", "solution": "import numpy as np\n\nclass AdaptiveDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for idx, ind in enumerate(population):\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n                if fitness[idx] < fitness[best_idx]:\n                    self.mutation_rate += 0.001\n                else:\n                    self.mutation_rate -= 0.001\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AdaptiveDynamicMutationAlgorithm", "description": "Implementing an adaptive mutation strategy based on individual performance to dynamically adjust mutation rates, enhancing exploration and exploitation for faster convergence.", "configspace": "", "generation": 75, "fitness": 0.0916071101569626, "feedback": "The algorithm AdaptiveDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "21aab1e0-319c-4859-b556-024100b3d78d", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "069abf4f-a61e-41c2-9f5b-69203ad85919", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "afb9dfe7-a7f2-40e7-ad79-e846e7f4b792", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "e3b14d1f-a220-4dbc-96f0-5cb41cb1c8d6", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "2255c9c1-bb1f-4d8b-875d-453cc3a1c1fb", "solution": "import numpy as np\n\nclass AdaptiveMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.base_mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_fitness = fitness[best_idx]\n            best_individual = population[best_idx]\n\n            new_population = []\n            for idx, ind in enumerate(population):\n                mutation_rate = self.base_mutation_rate + 0.01 * (best_fitness - fitness[idx])\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AdaptiveMutationAlgorithm", "description": "Introducing an adaptive mutation strategy based on individual performance to dynamically adjust mutation rates for each solution, promoting better exploitation of promising regions.", "configspace": "", "generation": 80, "fitness": 0.0916071101569626, "feedback": "The algorithm AdaptiveMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "0b737ec4-81a5-43df-9d90-2b40f70b2ec9", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "25211bd6-070b-4e85-b149-e6100769ec7b", "solution": "import numpy as np\n\nclass ImprovedAcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.base_mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.base_mutation_rate + 0.02 * (fitness[best_idx] - func(ind))  # Adaptive mutation rate adjustment\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedAcceleratedDynamicMutationAlgorithm", "description": "Utilizing adaptive mutation rates based on individual performance for accelerated convergence in optimization.", "configspace": "", "generation": 82, "fitness": 0.0916071101569626, "feedback": "The algorithm ImprovedAcceleratedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "04266bc6-9da8-4d83-bce5-6f0da05841ac", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_mutation_rate = 0.1\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for idx, ind in enumerate(population):\n                mutation_rate = self.initial_mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedDynamicMutationAlgorithm", "description": "Introducing a self-adaptive mutation strategy that dynamically adjusts the mutation rate for each individual based on its fitness, promoting faster convergence.", "configspace": "", "generation": 83, "fitness": 0.0916071101569626, "feedback": "The algorithm ImprovedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "7013020b-91ef-46d6-bd28-909e51812d27", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "649098b9-2c49-424b-96db-fe2bfcc78829", "solution": "import numpy as np\n\nclass FastConvergingDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for idx, ind in enumerate(population):\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutation_rate *= 1.2 if idx == best_idx else 0.8  # Non-uniform mutation\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "FastConvergingDynamicMutationAlgorithm", "description": "Utilizing a non-uniform mutation strategy based on a dynamic adaptation of the mutation rate per individual to enhance exploration and exploitation effectively.", "configspace": "", "generation": 85, "fitness": 0.0916071101569626, "feedback": "The algorithm FastConvergingDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "a21e1623-d853-4161-af82-9daf0cb6d6da", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "d7e4e5ec-b4e6-4052-97d0-3b923cd2d896", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_fitness = fitness[best_idx]\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind, fit in zip(population, fitness):\n                mutation_rate = self.mutation_rate + 0.01 * (best_fitness - fit)\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedDynamicMutationAlgorithm", "description": "Introducing a variable mutation rate based on individual fitness to adapt more effectively during optimization, enhancing convergence speed.", "configspace": "", "generation": 87, "fitness": 0.0916071101569626, "feedback": "The algorithm ImprovedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "1c4f3e26-4c09-45a5-be53-57858e76fa2d", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "31f51f57-3edb-48b8-bd5d-9baa4a2aacbc", "solution": "import numpy as np\n\nclass AdaptiveMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for idx, ind in enumerate(population):\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutation_rate *= 1.2 if idx == best_idx else 0.8  # Adaptive mutation\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AdaptiveMutationAlgorithm", "description": "Incorporating a novel adaptive mutation strategy based on individual fitness to dynamically adjust mutation rates for each individual, enhancing exploitation of promising solutions.", "configspace": "", "generation": 89, "fitness": 0.0916071101569626, "feedback": "The algorithm AdaptiveMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "443d0749-d270-4e94-985f-0a4873ea21bf", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedDynamicMutationAlgorithm", "description": "Implementing a self-adaptive mutation strategy by dynamically adjusting the mutation rate based on the population's performance to accelerate convergence speed.", "configspace": "", "generation": 90, "fitness": 0.0916071101569626, "feedback": "The algorithm ImprovedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "efc09421-ee40-4e1c-ad18-d0b4cf6b7afc", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "736c6f4b-7a7b-4bcc-b083-40a4d002cf57", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "d162ff5f-66f2-4438-b983-8114fd9757ab", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "9fefead1-4e14-4272-81f8-2892498cb832", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "a9bfa7c2-7df6-4038-b8f6-89166dd226b0", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "ImprovedDynamicMutationAlgorithm", "description": "Introducing adaptive mutation rates based on individual performance to dynamically adjust exploration and exploitation trade-off for faster convergence.", "configspace": "", "generation": 95, "fitness": 0.0916071101569626, "feedback": "The algorithm ImprovedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "7845726e-2aa9-4a86-8a52-a425fcdeea61", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for idx, ind in enumerate(population):\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - fitness[idx])\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "EnhancedDynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation strategy based on fitness differences to adapt mutation rates individually for each individual, enhancing exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 96, "fitness": 0.0916071101569626, "feedback": "The algorithm EnhancedDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "2fef6bd9-0aff-4905-b5df-e0201820a45d", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "5c1a61a2-e136-4d77-aa84-c161ba0d7139", "solution": "import numpy as np\n\nclass AdaptiveDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for idx, ind in enumerate(population):\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutation_rate *= 0.9 + 0.1 * (1 - idx / self.budget)  # Adaptive mutation control\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AdaptiveDynamicMutationAlgorithm", "description": "Implementing an adaptive mutation control mechanism based on individual performance to dynamically adjust exploration and exploitation balance, enhancing convergence speed.", "configspace": "", "generation": 98, "fitness": 0.0916071101569626, "feedback": "The algorithm AdaptiveDynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "1f54b2aa-d955-479a-a815-08279c7d59fb", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) + 0.1 * np.random.randn(self.budget, self.dim)\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            new_population = []\n            for ind in population:\n                mutation_rate = self.mutation_rate + 0.01 * (fitness[best_idx] - func(ind))\n                mutated = ind + mutation_rate * np.random.randn(self.dim)\n                mutated = np.clip(mutated, -5.0, 5.0)\n                new_population.append(mutated)\n\n            population = np.array(new_population)\n\n        return best_individual", "name": "AcceleratedDynamicMutationAlgorithm", "description": "Implementing a dynamic mutation strategy combined with a diverse population initialization to enhance exploration and exploitation, leading to accelerated convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6db6615-6b16-4835-9ad6-c7b421a7dbfa", "metadata": {"aucs": [0.1813267284886797, 0.16852541541505783, 0.17256308889114402, 0.17436519478607426, 0.18375012994119966, 0.17358439540249293, 0.18435623414664615, 0.15850990047593516, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630880941871943, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10748631261917507, 0.06808626118226335, 0.06418154916883234, 0.06033349705998203, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.056298107152826016, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768529387201382, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03834526146598671, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.15125485349205758, 0.1311896801468172, 0.13822126152437608, 0.15186661007409408, 0.15207967608211526, 0.1610247049519059, 0.1365075051046395, 0.14455977292227196, 0.1245616988971211, 0.17095687927186354, 0.15824439011111446, 0.170985216748341, 0.16285921545703008, 0.1992997412369646, 0.16894142980162719, 0.16299073921299145, 0.15417351062588436, 0.16807283341655732, 0.11386298133892592, 0.10801222049715509, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10311273968834955, 0.15296373356911974, 0.15802777303196125, 0.1534816553190943, 0.17631018712222413, 0.16098190023863312, 0.19198620757940832, 0.1554754643207954, 0.15290613322704594, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627470348586325, 0.1707982963387905, 0.15821739369022947, 0.15216386190809594, 0.13913292955502565, 0.16132125349530602, 0.16098574496717244, 0.1544504151064744, 0.19268810932513059, 0.15442093115593947, 0.16718454351337608, 0.1532703682469848, 0.15288336035820682, 0.20328738464559915, 0.17347432094284, 0.1870829858184364, 0.18373743432283995, 0.18849571706401147, 0.19262787004653603, 0.1920452591475338, 0.17291632449748562, 0.18356272786881522, 0.1980197645837849, 0.19178103982067674, 0.17682138605115705, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
