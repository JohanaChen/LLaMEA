{"id": "1e318fb5-c931-4b53-a65f-1f0ba6b69660", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearch", "description": "Harmony Search Algorithm: Harmony search is inspired by the musical improvisation process and generates new solutions by blending existing ones through a process of random selection and pitch adjustment.", "configspace": "", "generation": 0, "fitness": 0.085341616208651, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.16877238859426447, 0.15859783886812817, 0.1625988431974965, 0.1610893716927687, 0.1605245851436533, 0.1807453558451938, 0.17983786838872617, 0.1536295693662938, 0.19820767074923118, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06821644377078229, 0.048624832298319265, 0.05813008900562289, 0.03673339276655385, 0.03432361277562046, 0.04369334890188825, 0.05078051323826982, 0.04761846422653693, 0.052920927081487434, 0.026118874706033024, 0.026750302219244237, 0.02575291985502337, 0.027434902773804448, 0.02240746984446562, 0.018184181920029685, 0.04681271108471097, 0.03565924205481774, 0.01767407238423946, 0.07889925471272197, 0.07215938194353588, 0.08091132098990039, 0.07743514489656778, 0.07605263870410872, 0.09224256134534703, 0.06458968768798679, 0.09298886240753312, 0.07873645314954314, 0.04872060748870666, 0.06944694044122734, 0.06350591045149034, 0.053667193093793863, 0.056432389586090204, 0.08656945729677523, 0.08693405360680317, 0.04433222985050633, 0.056448171992894314, 0.14715220496147174, 0.14480364525194322, 0.10828852571367675, 0.11991922826545742, 0.09669335408094726, 0.14375922701909072, 0.1015092909527735, 0.10529708397719606, 0.17556251096932085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05911381329845444, 9.999999999998899e-05, 9.999999999998899e-05, 0.005743687249571083, 0.017077318076679004, 0.002489957374512075, 0.0006549789579382015, 0.014998576755312798, 9.999999999998899e-05, 0.004756955570065502, 0.0006005600082634732, 0.017946445235829223, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003340692786765187, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056147000497823174, 0.07158942266674728, 0.07238592434167435, 0.03292231803375434, 0.05963433108305294, 0.05882216619616065, 0.059594698477646535, 0.033480043284944805, 0.04123139008996746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010190061624612445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17485520144678324, 0.17138272178037572, 0.19086513278935646, 0.1994937063402462, 0.18653627998856104, 0.19173281237235684, 0.20448493917315158, 0.17239570811262894, 0.18645569873310508, 0.025857919039410038, 0.03810825241821969, 0.04272477905594174, 0.06728066829557577, 0.03923990105763864, 0.03841743492311811, 0.040507713509625454, 0.04025950324371552, 0.04276703400445003, 0.14348585354509835, 0.11562170991388121, 0.12180672919063074, 0.14564371482184724, 0.12479832885420894, 0.13345287580438525, 0.14851456645508299, 0.13052718070489477, 0.15365278341520516, 0.15888747351296384, 0.15135249201516676, 0.15769348309556586, 0.16638400218315186, 0.17106900915864065, 0.14567499005082207, 0.16263626577919255, 0.16102961136710436, 0.1637207216326405, 0.09040411882988209, 0.09671098955464963, 0.09399449287154205, 0.10969701696536138, 0.10352578697920745, 0.09691671923672651, 0.100516946445396, 0.11004495329506192, 0.10273016950748914, 0.13012558835582022, 0.14726124650237848, 0.18635975527450843, 0.148314727123537, 0.14684826015622277, 0.1497653675943157, 0.1498095903490354, 0.16013108330274062, 0.13924254353279464, 0.14188027249664514, 0.153736746695758, 0.10688047385817623, 0.12915853732781435, 0.1276224607137979, 0.14254186477331499, 0.1468041838105162, 0.1304253025734926, 0.13328091670360154, 0.1488683355206304, 0.14237828076093628, 0.1594164263301463, 0.15311012658747747, 0.14949771700094594, 0.14527263300899573, 0.22903131132090593, 0.2134584949881464, 0.16274947171428134, 0.14063897583996698, 0.16076937901709387, 0.19336551441011096, 0.12217330646056945, 0.20506316601498098, 0.15180785501882055, 0.11695065939622395, 0.16614873502604222, 0.13667717696612358, 0.1746891945939637, 0.17780787081936034, 0.186821980512764, 0.1837135691871702, 0.16761330289761134, 0.18595805339225924, 0.18205357984433335, 0.17823630603885465, 0.19071048674020907, 0.055559918679579656, 0.04853727847579381, 0.04506103546568774, 0.060269667820007644, 0.047978975628249154, 0.04659026024223745, 0.058622471819650634, 0.05326922994095007, 0.04996019928070328]}, "mutation_prompt": null}
{"id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "solution": "import numpy as np\n\nclass HarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_rate = 0.2\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < self.mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchImproved", "description": "Introducing a mutation operator that probabilistically adjusts a solution based on a weighted combination of its components to enhance diversity and convergence speed.", "configspace": "", "generation": 1, "fitness": 0.10501811235312918, "feedback": "The algorithm HarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "1e318fb5-c931-4b53-a65f-1f0ba6b69660", "metadata": {"aucs": [0.22210719973094784, 0.2200731624697737, 0.2286770107688556, 0.17220582286538044, 0.1732458782208972, 0.17362850077713232, 0.2107068285570478, 0.21960484335554276, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07227835472788136, 0.060624786095474836, 0.045399885617194324, 0.049493845586873086, 0.07462925226755412, 0.06443812482137512, 0.06503788294991752, 0.05920404205312846, 0.0595544775908613, 0.049637843721335395, 0.049087869870877876, 0.05163730567034486, 0.06335261712591778, 0.03714696372364856, 0.03896352097499334, 0.04111958784009817, 0.05500919255065562, 0.042496549030569764, 0.0758738577048047, 0.07253171098920863, 0.06203566985493403, 0.0793143714104192, 0.06865295222063306, 0.07354794947209553, 0.07074101086043105, 0.07364630187121057, 0.07416831032751192, 0.11276603352994974, 0.1275945399735765, 0.1306116613124172, 0.13882609077125385, 0.12521307172987906, 0.09944637010450297, 0.0838877027591387, 0.1059167899406499, 0.1033048556575773, 0.18448274804527276, 0.17726192734135204, 0.15599553603343885, 0.13547121958334318, 0.13893136997323852, 0.1639943189927603, 0.15659623081385265, 0.178537131983884, 0.15387395233525603, 0.03672109605031526, 0.019361363123082675, 0.0442503891839473, 0.1085765446263306, 0.05915638901199749, 0.031320724648522646, 0.03719944417545651, 0.052355067463684124, 0.04293544933613069, 0.0655718364975284, 0.04349898785779405, 0.06309338373860462, 0.04823371971195467, 0.06936060898395158, 0.05724167800155722, 0.053069261824271186, 0.0615553330002383, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032681890607714426, 0.0784608001094057, 0.04964709393679645, 0.0173762725054476, 0.01655098477419581, 0.05076880231721148, 0.07926365288341553, 0.04152414273551308, 0.04626772230224474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006297896163449335, 0.001875427142953745, 0.00820388086058299, 0.0005081479752995222, 0.0012529983707263437, 0.006790989268763981, 0.012158390240206263, 9.999999999998899e-05, 9.999999999998899e-05, 0.24817717525513527, 0.2525352208419185, 0.22738785565053032, 0.21020657416391408, 0.22273996922128103, 0.22397585181881563, 0.25828637599569404, 0.2318979969701669, 0.2542934353972618, 0.04170986525075282, 0.04610330158709819, 0.04620149067407597, 0.06661306657659882, 0.053124666021967415, 0.05132430276566102, 0.059120075787583826, 0.05551783259075871, 0.05374512067111081, 0.13622941858743254, 0.12328661707279664, 0.17903541035265402, 0.16738268846180215, 0.12817854528809092, 0.13796999003732613, 0.13530534903211833, 0.13491455065946234, 0.12112033474153394, 0.19368545232100465, 0.1746788560441359, 0.18669764709266312, 0.19383599777936333, 0.1854503344660806, 0.18744872301311988, 0.16219271579595318, 0.16336261593075319, 0.18215770505711204, 0.11346749029253933, 0.10702622510731907, 0.12799511001935393, 0.129689393077432, 0.13487217536183949, 0.12998534663738304, 0.11374709541489025, 0.12879982111529265, 0.1201399425140165, 0.17313227328351044, 0.19032928742406852, 0.16995606635237914, 0.16251793622058086, 0.1628394146282972, 0.1895988764424804, 0.17905076766020644, 0.18879513283369076, 0.18067612605646388, 0.1547182379835187, 0.16150636417355924, 0.17797674799315666, 0.15540262935578308, 0.16035790652093418, 0.1645443568890742, 0.1713681231152817, 0.15596963867555846, 0.15189487593350537, 0.22272185545801038, 0.2447677703736063, 0.1679210780071959, 0.2091584873698643, 0.1887352054674527, 0.24990490691686873, 0.22258541217945182, 0.19898415002709746, 0.19096240018476107, 0.15870420489063997, 0.16472319522754553, 0.2330722173172125, 0.16264641745986796, 0.2515039573446831, 0.15213561389343888, 0.13926974796325775, 0.1954318795279436, 0.16158552065498621, 0.1839732281421126, 0.17919075711475674, 0.1855347136855695, 0.17353635160294212, 0.18735380167498306, 0.1685082878229518, 0.17384652479557972, 0.1958752431870897, 0.1712925659891844, 0.06747309250023203, 0.06066212603819754, 0.05860603333854997, 0.057097623068000036, 0.06294665480172712, 0.0661112578543307, 0.05727300796005452, 0.07242053648533098, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "bcea2af3-27f8-45b5-86f6-7ac3ff5fba71", "solution": "import numpy as np\n\nclass ImprovedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_mutation_rate = 0.2\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = self.initial_mutation_rate\n\n        for itr in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n            mutation_rate = self.initial_mutation_rate * (1 - itr / self.budget)  # Dynamic mutation rate update\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "ImprovedHarmonySearch", "description": "Utilizing a dynamic mutation strategy by adapting the mutation rate based on the current iteration count to enhance exploitation and exploration balance for faster convergence.", "configspace": "", "generation": 2, "fitness": 0.10422447306873173, "feedback": "The algorithm ImprovedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.22582032231949734, 0.22931820337657116, 0.23832402582580436, 0.21268935346103668, 0.177410188947291, 0.19108293465016613, 0.209067393818272, 0.21958448682255471, 0.22264459567496953, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07413257329662992, 0.06662915074637166, 0.061237393497147186, 0.05826537050073044, 0.054754495900656175, 0.05563771183372679, 0.042730752972555686, 0.05476238221575391, 0.05160636343492386, 0.04638240695524842, 0.04841981697901865, 0.03442571370570224, 0.05857422261981282, 0.03929004992768714, 0.03997810519919309, 0.03449487140947749, 0.05287269810153705, 0.042977567777322645, 0.08074415724898176, 0.07208337301526624, 0.06478194866223619, 0.07751507732962659, 0.06865295222063306, 0.07322271273753955, 0.0724949083534, 0.07334608918460672, 0.08870647907714013, 0.11015464994767021, 0.12779201073044455, 0.12733475370598768, 0.10396609329223028, 0.08760320142307099, 0.13628742401497307, 0.07887935348197828, 0.08615339751600914, 0.09101463561796552, 0.18447362870422723, 0.15909988890334203, 0.13466563773894702, 0.12296674751455261, 0.13099336553083396, 0.16342216932124398, 0.20898578164502657, 0.18183103154816116, 0.15251120015098074, 0.05429179263434103, 0.04089667904439831, 0.08281685179327214, 0.1085765446263306, 9.999999999998899e-05, 0.032210042320412136, 0.048072464588859165, 0.03732136091547711, 0.04488359248570528, 0.05454364042249671, 0.08926937391923384, 0.08318402448790163, 0.0403705715714161, 0.0436768915979846, 0.08341224784586343, 0.05456003682027766, 0.06151268036889035, 0.035459930768538483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014837127028678676, 0.03552230459850647, 0.05203468741178008, 0.024619879919525967, 0.04395969516857401, 0.03022635247097083, 0.056882472807892936, 0.04285186301402433, 0.040651438499114234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005112055425273154, 0.006335210068281638, 0.017379267834731538, 0.003845623626059891, 9.999999999998899e-05, 0.0035290314742800755, 9.999999999998899e-05, 9.999999999998899e-05, 0.005298801374007733, 0.2334652084299207, 0.22846589794978522, 0.23233480262351092, 0.20577592481058216, 0.2203227440308413, 0.22710662498704137, 0.2599520849411925, 0.25614285225547617, 0.2341176971964236, 0.0492483429434164, 0.04960486381145779, 0.0398289794345843, 0.0509092634128272, 0.04358602865046779, 0.04853508058893419, 0.05935323264638137, 0.053185824563303896, 0.05214365137274035, 0.12839366684579978, 0.1232058710306887, 0.17903541035265402, 0.1673577849783342, 0.1118890555150096, 0.13785603762973808, 0.16268667879190957, 0.13468136829328736, 0.11839161755535299, 0.18515126718619657, 0.1715148164057515, 0.18646219716419044, 0.19010815342459642, 0.1972090419598026, 0.19228203341517436, 0.16311828158579433, 0.17059457969565406, 0.18767196808721853, 0.1249041984535244, 0.11005929032740058, 0.12203568596617409, 0.13145309635905322, 0.1214148144326942, 0.1242878373110492, 0.12643691868982787, 0.12315617210047836, 0.1340078312449846, 0.1715141726593038, 0.15664097603704907, 0.17284587059878054, 0.18660902342586727, 0.17311639727897787, 0.178882559469413, 0.15410773646526232, 0.1590295188794999, 0.16546354822264508, 0.1626316073342039, 0.16150490672015827, 0.16071182527558503, 0.15452373190468027, 0.16029150728027142, 0.16410047038687003, 0.15749557733269426, 0.1567830402543987, 0.15135658930422802, 0.19259136668266286, 0.2004790015470771, 0.15541656532584236, 0.18993958763246488, 0.21675314477801522, 0.28846325820202434, 0.19059232474503474, 0.17365363316694515, 0.20196077536757706, 0.16063397201621188, 0.16568829977126676, 0.32468077900794445, 0.17210075735816133, 0.25101900759569584, 0.15347867393589532, 0.1319907417583589, 0.1862655928084992, 0.16674847626568567, 0.18383983266849957, 0.1811579619813375, 0.1853950842375891, 0.17109384756909563, 0.1813443573414042, 0.17494302129662354, 0.17383416771738025, 0.1958730625021725, 0.17127360936095826, 0.06747309250023203, 0.06814463015219085, 0.056786542191415545, 0.0552159493814961, 0.05974434708175336, 0.05085189486452468, 0.07509058629342003, 0.07242053648533098, 0.06445350545431827]}, "mutation_prompt": null}
{"id": "c3a4d2c4-aeb2-4f1c-b8b9-632cc6748200", "solution": "import numpy as np\n\nclass HarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_rate = 0.2\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < self.mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchImproved", "description": "Introducing a mutation operator that probabilistically adjusts a solution based on a weighted combination of its components to enhance diversity and convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.22210719973094784, 0.2200731624697737, 0.2286770107688556, 0.17220582286538044, 0.1732458782208972, 0.17362850077713232, 0.2107068285570478, 0.21960484335554276, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07227835472788136, 0.060624786095474836, 0.045399885617194324, 0.049493845586873086, 0.07462925226755412, 0.06443812482137512, 0.06503788294991752, 0.05920404205312846, 0.0595544775908613, 0.049637843721335395, 0.049087869870877876, 0.05163730567034486, 0.06335261712591778, 0.03714696372364856, 0.03896352097499334, 0.04111958784009817, 0.05500919255065562, 0.042496549030569764, 0.0758738577048047, 0.07253171098920863, 0.06203566985493403, 0.0793143714104192, 0.06865295222063306, 0.07354794947209553, 0.07074101086043105, 0.07364630187121057, 0.07416831032751192, 0.11276603352994974, 0.1275945399735765, 0.1306116613124172, 0.13882609077125385, 0.12521307172987906, 0.09944637010450297, 0.0838877027591387, 0.1059167899406499, 0.1033048556575773, 0.18448274804527276, 0.17726192734135204, 0.15599553603343885, 0.13547121958334318, 0.13893136997323852, 0.1639943189927603, 0.15659623081385265, 0.178537131983884, 0.15387395233525603, 0.03672109605031526, 0.019361363123082675, 0.0442503891839473, 0.1085765446263306, 0.05915638901199749, 0.031320724648522646, 0.03719944417545651, 0.052355067463684124, 0.04293544933613069, 0.0655718364975284, 0.04349898785779405, 0.06309338373860462, 0.04823371971195467, 0.06936060898395158, 0.05724167800155722, 0.053069261824271186, 0.0615553330002383, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032681890607714426, 0.0784608001094057, 0.04964709393679645, 0.0173762725054476, 0.01655098477419581, 0.05076880231721148, 0.07926365288341553, 0.04152414273551308, 0.04626772230224474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006297896163449335, 0.001875427142953745, 0.00820388086058299, 0.0005081479752995222, 0.0012529983707263437, 0.006790989268763981, 0.012158390240206263, 9.999999999998899e-05, 9.999999999998899e-05, 0.24817717525513527, 0.2525352208419185, 0.22738785565053032, 0.21020657416391408, 0.22273996922128103, 0.22397585181881563, 0.25828637599569404, 0.2318979969701669, 0.2542934353972618, 0.04170986525075282, 0.04610330158709819, 0.04620149067407597, 0.06661306657659882, 0.053124666021967415, 0.05132430276566102, 0.059120075787583826, 0.05551783259075871, 0.05374512067111081, 0.13622941858743254, 0.12328661707279664, 0.17903541035265402, 0.16738268846180215, 0.12817854528809092, 0.13796999003732613, 0.13530534903211833, 0.13491455065946234, 0.12112033474153394, 0.19368545232100465, 0.1746788560441359, 0.18669764709266312, 0.19383599777936333, 0.1854503344660806, 0.18744872301311988, 0.16219271579595318, 0.16336261593075319, 0.18215770505711204, 0.11346749029253933, 0.10702622510731907, 0.12799511001935393, 0.129689393077432, 0.13487217536183949, 0.12998534663738304, 0.11374709541489025, 0.12879982111529265, 0.1201399425140165, 0.17313227328351044, 0.19032928742406852, 0.16995606635237914, 0.16251793622058086, 0.1628394146282972, 0.1895988764424804, 0.17905076766020644, 0.18879513283369076, 0.18067612605646388, 0.1547182379835187, 0.16150636417355924, 0.17797674799315666, 0.15540262935578308, 0.16035790652093418, 0.1645443568890742, 0.1713681231152817, 0.15596963867555846, 0.15189487593350537, 0.22272185545801038, 0.2447677703736063, 0.1679210780071959, 0.2091584873698643, 0.1887352054674527, 0.24990490691686873, 0.22258541217945182, 0.19898415002709746, 0.19096240018476107, 0.15870420489063997, 0.16472319522754553, 0.2330722173172125, 0.16264641745986796, 0.2515039573446831, 0.15213561389343888, 0.13926974796325775, 0.1954318795279436, 0.16158552065498621, 0.1839732281421126, 0.17919075711475674, 0.1855347136855695, 0.17353635160294212, 0.18735380167498306, 0.1685082878229518, 0.17384652479557972, 0.1958752431870897, 0.1712925659891844, 0.06747309250023203, 0.06066212603819754, 0.05860603333854997, 0.057097623068000036, 0.06294665480172712, 0.0661112578543307, 0.05727300796005452, 0.07242053648533098, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "ae0db0f5-6027-40a4-a0aa-f236ba61c49a", "solution": "import numpy as np\n\nclass HarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_rate = 0.2\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < self.mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchImproved", "description": "Introducing a mutation operator that probabilistically adjusts a solution based on a weighted combination of its components to enhance diversity and convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.22210719973094784, 0.2200731624697737, 0.2286770107688556, 0.17220582286538044, 0.1732458782208972, 0.17362850077713232, 0.2107068285570478, 0.21960484335554276, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07227835472788136, 0.060624786095474836, 0.045399885617194324, 0.049493845586873086, 0.07462925226755412, 0.06443812482137512, 0.06503788294991752, 0.05920404205312846, 0.0595544775908613, 0.049637843721335395, 0.049087869870877876, 0.05163730567034486, 0.06335261712591778, 0.03714696372364856, 0.03896352097499334, 0.04111958784009817, 0.05500919255065562, 0.042496549030569764, 0.0758738577048047, 0.07253171098920863, 0.06203566985493403, 0.0793143714104192, 0.06865295222063306, 0.07354794947209553, 0.07074101086043105, 0.07364630187121057, 0.07416831032751192, 0.11276603352994974, 0.1275945399735765, 0.1306116613124172, 0.13882609077125385, 0.12521307172987906, 0.09944637010450297, 0.0838877027591387, 0.1059167899406499, 0.1033048556575773, 0.18448274804527276, 0.17726192734135204, 0.15599553603343885, 0.13547121958334318, 0.13893136997323852, 0.1639943189927603, 0.15659623081385265, 0.178537131983884, 0.15387395233525603, 0.03672109605031526, 0.019361363123082675, 0.0442503891839473, 0.1085765446263306, 0.05915638901199749, 0.031320724648522646, 0.03719944417545651, 0.052355067463684124, 0.04293544933613069, 0.0655718364975284, 0.04349898785779405, 0.06309338373860462, 0.04823371971195467, 0.06936060898395158, 0.05724167800155722, 0.053069261824271186, 0.0615553330002383, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032681890607714426, 0.0784608001094057, 0.04964709393679645, 0.0173762725054476, 0.01655098477419581, 0.05076880231721148, 0.07926365288341553, 0.04152414273551308, 0.04626772230224474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006297896163449335, 0.001875427142953745, 0.00820388086058299, 0.0005081479752995222, 0.0012529983707263437, 0.006790989268763981, 0.012158390240206263, 9.999999999998899e-05, 9.999999999998899e-05, 0.24817717525513527, 0.2525352208419185, 0.22738785565053032, 0.21020657416391408, 0.22273996922128103, 0.22397585181881563, 0.25828637599569404, 0.2318979969701669, 0.2542934353972618, 0.04170986525075282, 0.04610330158709819, 0.04620149067407597, 0.06661306657659882, 0.053124666021967415, 0.05132430276566102, 0.059120075787583826, 0.05551783259075871, 0.05374512067111081, 0.13622941858743254, 0.12328661707279664, 0.17903541035265402, 0.16738268846180215, 0.12817854528809092, 0.13796999003732613, 0.13530534903211833, 0.13491455065946234, 0.12112033474153394, 0.19368545232100465, 0.1746788560441359, 0.18669764709266312, 0.19383599777936333, 0.1854503344660806, 0.18744872301311988, 0.16219271579595318, 0.16336261593075319, 0.18215770505711204, 0.11346749029253933, 0.10702622510731907, 0.12799511001935393, 0.129689393077432, 0.13487217536183949, 0.12998534663738304, 0.11374709541489025, 0.12879982111529265, 0.1201399425140165, 0.17313227328351044, 0.19032928742406852, 0.16995606635237914, 0.16251793622058086, 0.1628394146282972, 0.1895988764424804, 0.17905076766020644, 0.18879513283369076, 0.18067612605646388, 0.1547182379835187, 0.16150636417355924, 0.17797674799315666, 0.15540262935578308, 0.16035790652093418, 0.1645443568890742, 0.1713681231152817, 0.15596963867555846, 0.15189487593350537, 0.22272185545801038, 0.2447677703736063, 0.1679210780071959, 0.2091584873698643, 0.1887352054674527, 0.24990490691686873, 0.22258541217945182, 0.19898415002709746, 0.19096240018476107, 0.15870420489063997, 0.16472319522754553, 0.2330722173172125, 0.16264641745986796, 0.2515039573446831, 0.15213561389343888, 0.13926974796325775, 0.1954318795279436, 0.16158552065498621, 0.1839732281421126, 0.17919075711475674, 0.1855347136855695, 0.17353635160294212, 0.18735380167498306, 0.1685082878229518, 0.17384652479557972, 0.1958752431870897, 0.1712925659891844, 0.06747309250023203, 0.06066212603819754, 0.05860603333854997, 0.057097623068000036, 0.06294665480172712, 0.0661112578543307, 0.05727300796005452, 0.07242053648533098, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "d4469b1c-5a46-485d-907a-a0327e07dc27", "solution": "import numpy as np\n\nclass HarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_rate = 0.2\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < self.mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchImproved", "description": "Introducing a mutation operator that probabilistically adjusts a solution based on a weighted combination of its components to enhance diversity and convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.22210719973094784, 0.2200731624697737, 0.2286770107688556, 0.17220582286538044, 0.1732458782208972, 0.17362850077713232, 0.2107068285570478, 0.21960484335554276, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07227835472788136, 0.060624786095474836, 0.045399885617194324, 0.049493845586873086, 0.07462925226755412, 0.06443812482137512, 0.06503788294991752, 0.05920404205312846, 0.0595544775908613, 0.049637843721335395, 0.049087869870877876, 0.05163730567034486, 0.06335261712591778, 0.03714696372364856, 0.03896352097499334, 0.04111958784009817, 0.05500919255065562, 0.042496549030569764, 0.0758738577048047, 0.07253171098920863, 0.06203566985493403, 0.0793143714104192, 0.06865295222063306, 0.07354794947209553, 0.07074101086043105, 0.07364630187121057, 0.07416831032751192, 0.11276603352994974, 0.1275945399735765, 0.1306116613124172, 0.13882609077125385, 0.12521307172987906, 0.09944637010450297, 0.0838877027591387, 0.1059167899406499, 0.1033048556575773, 0.18448274804527276, 0.17726192734135204, 0.15599553603343885, 0.13547121958334318, 0.13893136997323852, 0.1639943189927603, 0.15659623081385265, 0.178537131983884, 0.15387395233525603, 0.03672109605031526, 0.019361363123082675, 0.0442503891839473, 0.1085765446263306, 0.05915638901199749, 0.031320724648522646, 0.03719944417545651, 0.052355067463684124, 0.04293544933613069, 0.0655718364975284, 0.04349898785779405, 0.06309338373860462, 0.04823371971195467, 0.06936060898395158, 0.05724167800155722, 0.053069261824271186, 0.0615553330002383, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032681890607714426, 0.0784608001094057, 0.04964709393679645, 0.0173762725054476, 0.01655098477419581, 0.05076880231721148, 0.07926365288341553, 0.04152414273551308, 0.04626772230224474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006297896163449335, 0.001875427142953745, 0.00820388086058299, 0.0005081479752995222, 0.0012529983707263437, 0.006790989268763981, 0.012158390240206263, 9.999999999998899e-05, 9.999999999998899e-05, 0.24817717525513527, 0.2525352208419185, 0.22738785565053032, 0.21020657416391408, 0.22273996922128103, 0.22397585181881563, 0.25828637599569404, 0.2318979969701669, 0.2542934353972618, 0.04170986525075282, 0.04610330158709819, 0.04620149067407597, 0.06661306657659882, 0.053124666021967415, 0.05132430276566102, 0.059120075787583826, 0.05551783259075871, 0.05374512067111081, 0.13622941858743254, 0.12328661707279664, 0.17903541035265402, 0.16738268846180215, 0.12817854528809092, 0.13796999003732613, 0.13530534903211833, 0.13491455065946234, 0.12112033474153394, 0.19368545232100465, 0.1746788560441359, 0.18669764709266312, 0.19383599777936333, 0.1854503344660806, 0.18744872301311988, 0.16219271579595318, 0.16336261593075319, 0.18215770505711204, 0.11346749029253933, 0.10702622510731907, 0.12799511001935393, 0.129689393077432, 0.13487217536183949, 0.12998534663738304, 0.11374709541489025, 0.12879982111529265, 0.1201399425140165, 0.17313227328351044, 0.19032928742406852, 0.16995606635237914, 0.16251793622058086, 0.1628394146282972, 0.1895988764424804, 0.17905076766020644, 0.18879513283369076, 0.18067612605646388, 0.1547182379835187, 0.16150636417355924, 0.17797674799315666, 0.15540262935578308, 0.16035790652093418, 0.1645443568890742, 0.1713681231152817, 0.15596963867555846, 0.15189487593350537, 0.22272185545801038, 0.2447677703736063, 0.1679210780071959, 0.2091584873698643, 0.1887352054674527, 0.24990490691686873, 0.22258541217945182, 0.19898415002709746, 0.19096240018476107, 0.15870420489063997, 0.16472319522754553, 0.2330722173172125, 0.16264641745986796, 0.2515039573446831, 0.15213561389343888, 0.13926974796325775, 0.1954318795279436, 0.16158552065498621, 0.1839732281421126, 0.17919075711475674, 0.1855347136855695, 0.17353635160294212, 0.18735380167498306, 0.1685082878229518, 0.17384652479557972, 0.1958752431870897, 0.1712925659891844, 0.06747309250023203, 0.06066212603819754, 0.05860603333854997, 0.057097623068000036, 0.06294665480172712, 0.0661112578543307, 0.05727300796005452, 0.07242053648533098, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "81be625e-0921-4cc8-8896-fc5874697777", "solution": "import numpy as np\n\nclass HarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_rate = 0.2\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < self.mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchImproved", "description": "Introducing a mutation operator that probabilistically adjusts a solution based on a weighted combination of its components to enhance diversity and convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.22210719973094784, 0.2200731624697737, 0.2286770107688556, 0.17220582286538044, 0.1732458782208972, 0.17362850077713232, 0.2107068285570478, 0.21960484335554276, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07227835472788136, 0.060624786095474836, 0.045399885617194324, 0.049493845586873086, 0.07462925226755412, 0.06443812482137512, 0.06503788294991752, 0.05920404205312846, 0.0595544775908613, 0.049637843721335395, 0.049087869870877876, 0.05163730567034486, 0.06335261712591778, 0.03714696372364856, 0.03896352097499334, 0.04111958784009817, 0.05500919255065562, 0.042496549030569764, 0.0758738577048047, 0.07253171098920863, 0.06203566985493403, 0.0793143714104192, 0.06865295222063306, 0.07354794947209553, 0.07074101086043105, 0.07364630187121057, 0.07416831032751192, 0.11276603352994974, 0.1275945399735765, 0.1306116613124172, 0.13882609077125385, 0.12521307172987906, 0.09944637010450297, 0.0838877027591387, 0.1059167899406499, 0.1033048556575773, 0.18448274804527276, 0.17726192734135204, 0.15599553603343885, 0.13547121958334318, 0.13893136997323852, 0.1639943189927603, 0.15659623081385265, 0.178537131983884, 0.15387395233525603, 0.03672109605031526, 0.019361363123082675, 0.0442503891839473, 0.1085765446263306, 0.05915638901199749, 0.031320724648522646, 0.03719944417545651, 0.052355067463684124, 0.04293544933613069, 0.0655718364975284, 0.04349898785779405, 0.06309338373860462, 0.04823371971195467, 0.06936060898395158, 0.05724167800155722, 0.053069261824271186, 0.0615553330002383, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032681890607714426, 0.0784608001094057, 0.04964709393679645, 0.0173762725054476, 0.01655098477419581, 0.05076880231721148, 0.07926365288341553, 0.04152414273551308, 0.04626772230224474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006297896163449335, 0.001875427142953745, 0.00820388086058299, 0.0005081479752995222, 0.0012529983707263437, 0.006790989268763981, 0.012158390240206263, 9.999999999998899e-05, 9.999999999998899e-05, 0.24817717525513527, 0.2525352208419185, 0.22738785565053032, 0.21020657416391408, 0.22273996922128103, 0.22397585181881563, 0.25828637599569404, 0.2318979969701669, 0.2542934353972618, 0.04170986525075282, 0.04610330158709819, 0.04620149067407597, 0.06661306657659882, 0.053124666021967415, 0.05132430276566102, 0.059120075787583826, 0.05551783259075871, 0.05374512067111081, 0.13622941858743254, 0.12328661707279664, 0.17903541035265402, 0.16738268846180215, 0.12817854528809092, 0.13796999003732613, 0.13530534903211833, 0.13491455065946234, 0.12112033474153394, 0.19368545232100465, 0.1746788560441359, 0.18669764709266312, 0.19383599777936333, 0.1854503344660806, 0.18744872301311988, 0.16219271579595318, 0.16336261593075319, 0.18215770505711204, 0.11346749029253933, 0.10702622510731907, 0.12799511001935393, 0.129689393077432, 0.13487217536183949, 0.12998534663738304, 0.11374709541489025, 0.12879982111529265, 0.1201399425140165, 0.17313227328351044, 0.19032928742406852, 0.16995606635237914, 0.16251793622058086, 0.1628394146282972, 0.1895988764424804, 0.17905076766020644, 0.18879513283369076, 0.18067612605646388, 0.1547182379835187, 0.16150636417355924, 0.17797674799315666, 0.15540262935578308, 0.16035790652093418, 0.1645443568890742, 0.1713681231152817, 0.15596963867555846, 0.15189487593350537, 0.22272185545801038, 0.2447677703736063, 0.1679210780071959, 0.2091584873698643, 0.1887352054674527, 0.24990490691686873, 0.22258541217945182, 0.19898415002709746, 0.19096240018476107, 0.15870420489063997, 0.16472319522754553, 0.2330722173172125, 0.16264641745986796, 0.2515039573446831, 0.15213561389343888, 0.13926974796325775, 0.1954318795279436, 0.16158552065498621, 0.1839732281421126, 0.17919075711475674, 0.1855347136855695, 0.17353635160294212, 0.18735380167498306, 0.1685082878229518, 0.17384652479557972, 0.1958752431870897, 0.1712925659891844, 0.06747309250023203, 0.06066212603819754, 0.05860603333854997, 0.057097623068000036, 0.06294665480172712, 0.0661112578543307, 0.05727300796005452, 0.07242053648533098, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "c0558e38-9b32-423c-8a23-e9fbd264c488", "solution": "import numpy as np\n\nclass HarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_mutation_rate = 0.2\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = np.full(self.dim, self.initial_mutation_rate)\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            adaptive_mutation_rate = mutation_rate * np.exp(-0.1 * np.arange(self.dim))  \n\n            if np.random.rand() < np.mean(adaptive_mutation_rate):\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n                for idx, _ in enumerate(adaptive_mutation_rate):\n                    if np.random.rand() < adaptive_mutation_rate[idx]:\n                        new_solution[idx] = harmony_memory[np.random.randint(population_size)][idx] + mutation_factor[idx] * (new_solution[idx] - harmony_memory[np.random.randint(population_size)][idx])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n            mutation_rate = 0.9 * mutation_rate + 0.1 * (new_solution - harmony_memory[index])\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchImproved", "description": "Enhancing convergence speed by incorporating adaptive mutation rates based on local search history to guide the search towards promising regions.", "configspace": "", "generation": 7, "fitness": 0.10269053680811721, "feedback": "The algorithm HarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.279796545183313, 0.2737883042999669, 0.26793526711846505, 0.2557555463542588, 0.23972538142713606, 0.22332779281796833, 0.3060266230408937, 0.25425817793079764, 0.2777790926313527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03431253885652896, 0.051346723819290174, 0.046193299418536116, 0.043733439956919584, 0.04303743741129806, 0.060722448048719735, 0.08824619475741147, 0.07263984099511378, 0.07735264573512124, 0.02556261199744314, 0.032314244713708806, 0.02263028728070371, 0.02624591341595295, 0.03569228097758392, 0.03699788564494322, 0.03031776867465774, 0.03973291071567797, 0.023038281507371305, 0.0675156425920983, 0.07170806550832454, 0.0798076585556049, 0.08366628762860928, 0.0944102043234698, 0.11456328318892883, 0.1107379320896944, 0.1009476801082263, 0.09907785935988955, 0.08290446426909293, 0.0671611892393772, 0.06533013872348636, 0.10357288323713854, 0.13545214940414885, 0.12471898926360259, 0.08303912975672123, 0.11549325586436643, 0.08954770218466457, 0.11266528479722127, 0.14392402540599758, 0.11789170337318733, 0.08617616982330023, 0.12461491122417412, 0.12520780908562812, 0.1112515744291408, 0.10521344160776647, 0.1505871383202646, 0.0888555960016929, 0.07188945075606368, 0.09144291319602327, 0.06399630990237215, 0.0696758895012286, 0.05707796336379145, 0.06968143143129923, 0.10576759368272559, 0.08444020271344088, 0.08578945268599725, 0.03782249306748631, 0.06918486608258301, 0.06080656839422505, 9.999999999998899e-05, 0.03920874427111032, 0.08158251649070536, 0.06984402413481128, 0.07545699565377617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05939728088360208, 0.020789409984459106, 0.0310940851258662, 0.030337939188915142, 0.0405421461151787, 0.029110245480070573, 0.008824393154704957, 0.04818006671009112, 0.024545804891405565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03313794569013406, 0.011708535933726116, 0.002666656700453629, 9.999999999998899e-05, 0.016185191614006333, 0.00017364894285309962, 0.04627214514730893, 0.025003576504774028, 0.021510292939762254, 0.29358239687444376, 0.3060757812806487, 0.2862658579023003, 0.20150673937631336, 0.18396421003785024, 0.2125254474660977, 0.2668358924479447, 0.28193234898031805, 0.3067063016659355, 0.03813039521016548, 0.03380470102891264, 0.042608483586090595, 0.09125958187674099, 0.08707446100617922, 0.07425401666104481, 0.07572687574473802, 0.08614989600244827, 0.06551413147478347, 0.12001248949435261, 0.13370160840758927, 0.121475064247622, 0.12712122909605827, 0.12301333338724019, 0.12017467124387204, 0.15689082416674904, 0.11786703496033546, 0.11193514112316749, 0.1723940207207062, 0.1642191678158822, 0.16214471074852577, 0.1699703243563705, 0.15190692173572717, 0.16377805903664644, 0.1632897649749997, 0.1629348751542271, 0.15626646770266583, 0.11970460696855167, 0.1303042391932191, 0.08863086400875764, 0.10634047481436959, 0.1014034236415402, 0.1251458003464575, 0.10250592585650498, 0.09310664463268548, 0.0903476552460013, 0.162083062244332, 0.14732655137143447, 0.17570403359497955, 0.17029549243836883, 0.15945925513724069, 0.1563308776190806, 0.15685676012621497, 0.15862457920868078, 0.15896715224665747, 0.12964799599069154, 0.15294139348493296, 0.1386703015005749, 0.17442751660282485, 0.16914207064921594, 0.1604577297610471, 0.1427703827983443, 0.113325074609399, 0.12183049622759756, 0.2327180218077377, 0.20258854060061593, 0.1744538580849423, 0.19239569208982488, 0.1824970031630193, 0.23371981023026067, 0.16330982440921638, 0.15038325902451033, 0.15785616837909966, 0.1527519887292592, 0.13283695799166018, 0.13879123956193684, 0.18960663329794947, 0.1594841950904824, 0.17807686276969947, 0.16718287003715926, 0.16996049921009193, 0.14902601104754853, 0.17891553129236504, 0.18873850381701518, 0.20533357523069007, 0.17717151575398327, 0.2071048880630424, 0.18064588324771902, 0.17837717979553924, 0.18572119582639535, 0.16754636671469803, 0.054977022416730637, 0.050228770565612146, 0.05880455545559693, 0.05556482068443125, 0.0529555201509484, 0.048333075038754614, 0.06815397245885979, 0.06974955679347272, 0.07523255997515077]}, "mutation_prompt": null}
{"id": "dacc346d-d78b-429c-b506-675b81e80857", "solution": "import numpy as np\n\nclass HarmonySearchImprovedFaster:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_mutation_rate = 0.2\n        self.mutation_rate_range = [0.1, 0.8]\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n                mutation_rate = max(self.mutation_rate_range[0], mutation_rate - 0.02)  # Dynamic adjustment\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchImprovedFaster", "description": "Enhancing the mutation process by dynamically adjusting the mutation rate based on the difference between new and current solutions to accelerate convergence.", "configspace": "", "generation": 8, "fitness": 0.09702178120913196, "feedback": "The algorithm HarmonySearchImprovedFaster got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.1988490074831053, 0.19525263818904381, 0.22106272234896152, 0.18228597032103777, 0.15014454534065713, 0.17444122420903974, 0.21163998241295046, 0.21099801286604702, 0.21230448572059268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055199099321204814, 0.05840881294295053, 0.05341259581371394, 0.052930652077938234, 0.042227385244728244, 0.04445872603646017, 0.049074223904049585, 0.048235205168467465, 0.058693134235374034, 0.0352934212573478, 0.03848445845799431, 0.049927708802589454, 0.046066919230488335, 0.05023454798839522, 0.03856588887092094, 0.05300891622531745, 0.04239750629828232, 0.03278646196259705, 0.06375328336513686, 0.07169022029240346, 0.08079858650788407, 0.08463780304879653, 0.0710256762882413, 0.07525370266389386, 0.0699896532313462, 0.09329884236444941, 0.08881135605225499, 0.10195303701961989, 0.08406460383912695, 0.0834048630419596, 0.08318874071989613, 0.10143687465157714, 0.08319992975907897, 0.0735952315874201, 0.09193800311901845, 0.09910877893217751, 0.1814906725309593, 0.13834072143711595, 0.14440798403858812, 0.11091305533289597, 0.17281032389464113, 0.143839196946135, 0.11795129859188436, 0.11541097631884589, 0.17463959290138542, 0.011076073196362612, 0.02920724730582447, 0.03343608139632248, 0.020400997679392963, 0.031246574116127523, 0.06140487729081556, 0.008793849696151823, 0.0221577701791581, 0.01665094557304514, 0.031313022497938214, 0.036636541061485284, 0.04355652121313103, 0.031263740626122694, 0.030446865194139194, 0.013186126840092016, 0.01700414389503313, 0.03088117482002506, 0.037635860430762835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04236107238754505, 0.03473890051072903, 0.025068976387452313, 0.022648413019148883, 0.06114770990171414, 0.029936629621743815, 0.055618427145745386, 0.038975372091586746, 0.039971484338160224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004670120200885863, 0.0037109331938165457, 0.0025988172999961145, 0.0008046486721057233, 9.999999999998899e-05, 0.0002780006419339509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23558472709790457, 0.21589233027973198, 0.24700832002898032, 0.2089532204233756, 0.203253563767827, 0.21561464005520548, 0.24438828115482347, 0.21052977408779405, 0.23044006970398312, 0.048236486696438985, 0.040495273128564824, 0.041315873339413, 0.057692150971568434, 0.04739399984826265, 0.054671214930392176, 0.04576495005054915, 0.05324485098974896, 0.0641388476675242, 0.12510207414576913, 0.10993207411329275, 0.18168094047090755, 0.166711353159668, 0.12056695417188634, 0.12155224929140873, 0.1279535846175548, 0.13453874916488162, 0.14501075301823507, 0.18841851982231206, 0.16827099655569877, 0.18183283363424485, 0.1757836511142672, 0.16984026644306738, 0.18326161547921405, 0.17104702537493577, 0.16524652599124978, 0.1591910258321817, 0.11516824643883283, 0.13125507298538452, 0.11605643178776304, 0.130274485115205, 0.11702826981246839, 0.13245302211999732, 0.14093954933850805, 0.12970392430913613, 0.11007627528085795, 0.16694866766666383, 0.17263150172796704, 0.18200709727097908, 0.16269349798175758, 0.14995631656581188, 0.14579014044294913, 0.16361346674505117, 0.16617251637764097, 0.16022672754614598, 0.15101658259845985, 0.15812522264313178, 0.15448950436148567, 0.15608854706344122, 0.15991710051631014, 0.14980432729848925, 0.16313170382770203, 0.15267516231407985, 0.15735195325604623, 0.14463693978581593, 0.1585849338945633, 0.19120520862552548, 0.15570399358870823, 0.18435906599093832, 0.2404701217993691, 0.1900134441289565, 0.19986972812163417, 0.2033288673852941, 0.14269254118642838, 0.17329765270946995, 0.21380015731288626, 0.1630148716992217, 0.24935303360094818, 0.16426802626528447, 0.16058804544630112, 0.17131045477222084, 0.1529222744365033, 0.1937687907049389, 0.17989149213941713, 0.18429404950059192, 0.17013323325086183, 0.18621199623425755, 0.18276291077507367, 0.17198899668046763, 0.18570270510925835, 0.1603593413252078, 0.06747309250023203, 0.047950566648016, 0.059392919760212104, 0.05553784114416738, 0.05850377423805053, 0.06489502502142475, 0.07149740059584941, 0.06270995969062076, 0.05879102545717618]}, "mutation_prompt": null}
{"id": "7f08a54a-7507-47a9-928a-b725187fa58f", "solution": "import numpy as np\n\nclass HarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_mutation_rate = 0.2\n        self.func_evals = 0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            self.func_evals += 1\n            current_mutation_rate = self.initial_mutation_rate * (1 - self.func_evals / self.budget)  # Adaptive mutation rate\n\n            if np.random.rand() < current_mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchImproved", "description": "Implementing an adaptive mutation strategy based on function evaluations to dynamically adjust the mutation rate for faster convergence.", "configspace": "", "generation": 9, "fitness": 0.10422382133294958, "feedback": "The algorithm HarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.22582032231949734, 0.22931820337657116, 0.23832402582580436, 0.21268935346103668, 0.177410188947291, 0.19108293465016613, 0.209067393818272, 0.21958448682255471, 0.22264459567496953, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07413257329662992, 0.06662915074637166, 0.061237393497147186, 0.05826537050073044, 0.054754495900656175, 0.05549693690478397, 0.042730752972555686, 0.05476238221575391, 0.05160636343492386, 0.04638240695524842, 0.04841981697901865, 0.03442571370570224, 0.05857422261981282, 0.03929004992768714, 0.03997810519919309, 0.03449487140947749, 0.05287269810153705, 0.042977567777322645, 0.08074415724898176, 0.07208337301526624, 0.06478194866223619, 0.07751507732962659, 0.06865295222063306, 0.07322271273753955, 0.0724949083534, 0.07334608918460672, 0.08870647907714013, 0.11015464994767021, 0.12779201073044455, 0.12733475370598768, 0.10396609329223028, 0.08760320142307099, 0.13628742401497307, 0.07887935348197828, 0.08615339751600914, 0.09101463561796552, 0.18447362870422723, 0.15909988890334203, 0.13466563773894702, 0.12296674751455261, 0.13099336553083396, 0.16342216932124398, 0.20898578164502657, 0.18183103154816116, 0.15251120015098074, 0.05429179263434103, 0.04089667904439831, 0.08281685179327214, 0.1085765446263306, 9.999999999998899e-05, 0.032210042320412136, 0.048072464588859165, 0.03732136091547711, 0.04488359248570528, 0.05454364042249671, 0.08926937391923384, 0.08318402448790163, 0.0403705715714161, 0.0436768915979846, 0.08341224784586343, 0.05456003682027766, 0.06151268036889035, 0.035459930768538483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014837127028678676, 0.03552230459850647, 0.05203468741178008, 0.024619879919525967, 0.04395969516857401, 0.03022635247097083, 0.056882472807892936, 0.04285186301402433, 0.040651438499114234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005112055425273154, 0.006335210068281638, 0.017379267834731538, 0.003845623626059891, 9.999999999998899e-05, 0.0035290314742800755, 9.999999999998899e-05, 9.999999999998899e-05, 0.005298801374007733, 0.2334652084299207, 0.22846589794978522, 0.23233480262351092, 0.20577592481058216, 0.2203227440308413, 0.22710662498704137, 0.2599520849411925, 0.25614285225547617, 0.2341176971964236, 0.0492483429434164, 0.04960486381145779, 0.0398289794345843, 0.0509092634128272, 0.04358602865046779, 0.04853508058893419, 0.05935323264638137, 0.053185824563303896, 0.05214365137274035, 0.12839366684579978, 0.1232058710306887, 0.17903541035265402, 0.1673577849783342, 0.1118890555150096, 0.13785603762973808, 0.16268667879190957, 0.13468136829328736, 0.11839161755535299, 0.18515126718619657, 0.1715148164057515, 0.18646219716419044, 0.19010815342459642, 0.1972090419598026, 0.19228203341517436, 0.16311828158579433, 0.17059457969565406, 0.18767196808721853, 0.1249041984535244, 0.11005929032740058, 0.12203568596617409, 0.13145309635905322, 0.1214148144326942, 0.1242878373110492, 0.12643691868982787, 0.12315617210047836, 0.1340078312449846, 0.1715141726593038, 0.15664097603704907, 0.17284587059878054, 0.18660902342586727, 0.17311639727897787, 0.178882559469413, 0.15410773646526232, 0.1590295188794999, 0.16546354822264508, 0.1626316073342039, 0.16150490672015827, 0.16071182527558503, 0.15452373190468027, 0.16029150728027142, 0.16410047038687003, 0.15749557733269426, 0.1567830402543987, 0.15135658930422802, 0.19259136668266286, 0.2004790015470771, 0.15541656532584236, 0.18993958763246488, 0.21675314477801522, 0.28846325820202434, 0.19059232474503474, 0.17365363316694515, 0.20196077536757706, 0.16063397201621188, 0.16568829977126676, 0.32468077900794445, 0.17210075735816133, 0.25101900759569584, 0.15347867393589532, 0.1319907417583589, 0.1862655928084992, 0.16674847626568567, 0.18383983266849957, 0.1811579619813375, 0.1853950842375891, 0.17109384756909563, 0.1813443573414042, 0.17494302129662354, 0.17383416771738025, 0.1958730625021725, 0.17127360936095826, 0.06747309250023203, 0.06814463015219085, 0.056786542191415545, 0.0552159493814961, 0.05974434708175336, 0.05085189486452468, 0.07509058629342003, 0.07242053648533098, 0.06445350545431827]}, "mutation_prompt": null}
{"id": "2542026b-d16d-4666-a39d-98f8cdd14143", "solution": "import numpy as np\n\nclass FastHarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_mutation_rate = 0.2\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n                if np.random.rand() < 0.1:  # Adjust mutation rate dynamically\n                    mutation_rate *= 0.95\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "FastHarmonySearchImproved", "description": "Enhancing convergence speed by adapting mutation with dynamic rate adjustment based on function landscape analysis.", "configspace": "", "generation": 10, "fitness": 0.10122376748555119, "feedback": "The algorithm FastHarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.2134884946161455, 0.21066832090095178, 0.22276480676783272, 0.18316287580457502, 0.1814944222524717, 0.20264563928464174, 0.21147974923733814, 0.18025099690833868, 0.21501129118780704, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06850554556777211, 0.0598928341661491, 0.05116788486808743, 0.05596496999418432, 0.048985961735073524, 0.052707657446520506, 0.03933129277428249, 0.054348249282949346, 0.05436301726228099, 0.04604457817648677, 0.042046795243200874, 0.038377313688890746, 0.04963605381934699, 0.03903289549979394, 0.045003714312562226, 0.04753063378756783, 0.06183110474699338, 0.027680184965503618, 0.07582683102463739, 0.07236551731743401, 0.08138464188357808, 0.08649294406086316, 0.06904347603620498, 0.07323493437609918, 0.07175427346216279, 0.08141582054212881, 0.0740872759580774, 0.11039642433415897, 0.09478834979461115, 0.11496764485581645, 0.08150174335700977, 0.10316077109741051, 0.08350749233644017, 0.0813882196021406, 0.09025807880501602, 0.10358205425456835, 0.16654648334161926, 0.1695818208465082, 0.16049198379694118, 0.1315775791315178, 0.12065760350331589, 0.14105220439128074, 0.144390730114203, 0.16711991212687294, 0.15324085863242376, 0.04089831102897168, 0.007899532202545356, 0.005425353849841663, 0.03330959154188695, 0.012272264181405479, 0.017515522352799184, 0.04914785296519131, 0.02841469304784683, 0.017333775021982856, 0.044164136217051064, 0.02870954236012535, 0.03305000030022398, 0.04235018033047855, 0.04568089422923982, 0.08487561089080986, 0.03984926109539433, 0.049024730622065915, 0.026145543694765405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05700338486294332, 0.04588744770334052, 0.051119150457177076, 0.046482616577829705, 0.04885072122587519, 0.02913671905595916, 0.05479194087399353, 0.05002650933778929, 0.04927147143511501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004741813665635197, 0.003577183407860174, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008601080431220876, 0.0009866526000467113, 0.005984953511258606, 0.023256617085386067, 9.999999999998899e-05, 0.23383744622033953, 0.22971607037647435, 0.2125721807437474, 0.23415572151537745, 0.2212167463420449, 0.2161852817946298, 0.2673130488940755, 0.2406778367965673, 0.21850634374053368, 0.05465367917059194, 0.04849713036487879, 0.051797144699640696, 0.06514822401981635, 0.0461055716119374, 0.053778378848918895, 0.08939381993096907, 0.061799014664499, 0.0573603710056092, 0.12605489053188212, 0.12495558338365231, 0.17917745302564292, 0.1474808538037058, 0.1213416402546007, 0.13602055984925043, 0.14236988500351688, 0.13990669625194552, 0.11947879172624065, 0.18670261884720718, 0.18252284379892403, 0.19342003960270493, 0.19848779856093302, 0.18917404636020851, 0.19183439320491236, 0.1964326286106206, 0.18035547472002778, 0.19072992560329982, 0.11952774445000325, 0.12262613941840228, 0.13156644308651555, 0.12500811046406435, 0.11909972421643833, 0.12442065513257161, 0.11164366564809136, 0.12052186198838466, 0.10793388797882819, 0.16960626477241314, 0.1681052931928263, 0.16485818438224653, 0.15014396719439704, 0.14983716290276516, 0.17202137214310642, 0.18546174025290518, 0.17063142138791243, 0.18614456538615065, 0.14454988221144216, 0.16063261102559467, 0.17016867824464132, 0.15823793818275422, 0.1556127209289483, 0.16473523651646793, 0.16466972281507952, 0.15428588638313323, 0.16030867358281742, 0.1597027124579523, 0.21908092861114825, 0.1648692675944834, 0.16635802090866036, 0.2610806822311198, 0.2484253272877176, 0.1609529225723234, 0.21006690976165743, 0.17923385701567718, 0.16234037760065, 0.15895480458518763, 0.16310937090917776, 0.1626311925652626, 0.2560928132951005, 0.1553216029552804, 0.1469168613597176, 0.17207086140148364, 0.3012817866439158, 0.18285066843787356, 0.1799535470763034, 0.19641091389929577, 0.1710479353552068, 0.18614917582255674, 0.17448059880491507, 0.1619792423178309, 0.1813323599602067, 0.1744443800321227, 0.058979753372468635, 0.06619583358762027, 0.05122287085324895, 0.05637032619530724, 0.05428071981974825, 0.07162532780985253, 0.05212266781021102, 0.06443648649638778, 0.062163942645810155]}, "mutation_prompt": null}
{"id": "4139d38a-bd2d-4630-ae44-b7d8169a12ed", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_mutation_rate = 0.2\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n                mutation_rate *= 0.95  # Adapt mutation rate based on improvement\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "AdaptiveHarmonySearchImproved", "description": "Enhancing convergence speed by implementing adaptive mutation rate adjustment based on solution evaluation history.", "configspace": "", "generation": 11, "fitness": 0.087788617035131, "feedback": "The algorithm AdaptiveHarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.18975328687452975, 0.20948923590235313, 0.18144144057306455, 0.20028089276670957, 0.1849824739638669, 0.16059022059194927, 0.16171455216179764, 0.15925915488050746, 0.20376118357315431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037747677894497844, 0.05140379426889796, 0.04657698191290005, 0.044363794988437566, 0.04200944208260082, 0.041921521115536264, 0.04412314292906283, 0.035424619180224215, 0.053226646454425985, 0.03228920471058572, 0.029433096145557336, 0.021280191802554138, 0.025081300119061734, 0.028171247125089893, 0.030252114873190794, 0.027235856219289367, 0.03275786310655027, 0.03200925076557892, 0.06732618520168054, 0.07192346876931732, 0.08254827281397592, 0.07930512598331729, 0.0702691358705706, 0.07211713836757694, 0.07920479842961592, 0.09329055024371391, 0.08385664297286644, 0.06843773251538754, 0.07119240853321696, 0.06273287767871005, 0.09195455489371085, 0.06605616499929057, 0.07242564577865218, 0.06313250845961105, 0.0745314246768698, 0.059319657676379256, 0.1127026262303702, 0.11234893032341642, 0.12566310468215358, 0.08067679645305148, 0.12863496775234384, 0.11384590260944483, 0.12663212367193866, 0.12438835529889036, 0.15196911356541298, 0.006046536073745834, 9.999999999998899e-05, 0.013774083517295699, 9.999999999998899e-05, 0.022586506908724324, 9.999999999998899e-05, 9.999999999998899e-05, 0.008272754985541697, 9.999999999998899e-05, 9.999999999998899e-05, 0.05281124104150314, 9.999999999998899e-05, 0.0135231668731296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017450803953540928, 0.012184373282413286, 0.0002565206639301154, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029518580928718063, 0.04331651510131218, 0.02664965700219457, 0.030306912413728626, 0.050912186073826526, 0.02956841982893388, 0.08138231612263203, 0.03816014718701066, 0.0389021922853412, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00451050078880233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013597684932209475, 0.0053103675034330555, 9.999999999998899e-05, 9.999999999998899e-05, 0.19455250327567597, 0.2211872314148523, 0.1850834623692561, 0.20229410474548815, 0.20699717458944056, 0.21250201356902687, 0.23253358403370117, 0.21472752836814601, 0.19739127357427522, 0.03889623448935653, 0.035355895878726784, 0.04278872834094927, 0.04159837529550059, 0.032294552693363454, 0.03591930301023516, 0.044418147272277775, 0.036972881461846185, 0.042966191236402884, 0.13387566312114252, 0.10938588920613779, 0.18137742376948107, 0.1660115985803664, 0.11836806886263762, 0.132300338593638, 0.12340850994524277, 0.13355119636280632, 0.11248957130366599, 0.1741872862014061, 0.168092361184069, 0.16174420980910686, 0.16827914098570496, 0.15442523318997614, 0.1569240337104706, 0.16440381155009987, 0.17869905217318205, 0.1546974922714266, 0.10470807780364466, 0.13075648698879827, 0.08855121958069179, 0.11696790482027375, 0.09752613235617791, 0.12513088760240576, 0.10462685906590663, 0.09910525124139546, 0.088879164450831, 0.17009753803950423, 0.1463353395140995, 0.1808741772512028, 0.191516836939564, 0.14825396596296125, 0.1629199963539364, 0.15393250233506572, 0.15147577154890945, 0.15109077021555073, 0.16765539172634858, 0.1483890030391285, 0.14964257563065642, 0.15040458878934337, 0.1541410193829439, 0.1333183856394573, 0.15241566319655508, 0.12021301354783098, 0.13454749808228295, 0.13305588594000362, 0.19495580835383575, 0.14303975675979086, 0.1624781032127497, 0.18771873307627673, 0.23395570816177735, 0.14844795404599298, 0.13071579665416788, 0.15821533333592375, 0.1894323768094468, 0.12751887733643175, 0.1283301833913405, 0.16117362897105503, 0.24578361356162903, 0.15819880167540779, 0.16052706622828028, 0.16961414019075982, 0.1565257041425051, 0.1681564581888495, 0.180146781042008, 0.17162079696220012, 0.17601546387223466, 0.18738402645161423, 0.17286679317861853, 0.17943783280141723, 0.18552774700118047, 0.19120453522369585, 0.06747309250023203, 0.04629740707553098, 0.053189980830894434, 0.05295322078206377, 0.055532038910941495, 0.046044702661116155, 0.052723597142452894, 0.051343236145837357, 0.05771384860694617]}, "mutation_prompt": null}
{"id": "01c4cad3-6385-4404-b2b5-32aa0edb438b", "solution": "import numpy as np\n\nclass DynamicHarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            mutation_rate = 0.2 - 0.1 * (_ / self.budget)  # Dynamic mutation rate\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicHarmonySearchImproved", "description": "Improving convergence speed by implementing a dynamic mutation strategy that adapts its exploration based on the fitness landscape to accelerate the optimization process.", "configspace": "", "generation": 12, "fitness": 0.1028266815806448, "feedback": "The algorithm DynamicHarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.22085653500579416, 0.23229738930007537, 0.22185358984509396, 0.17252812685997232, 0.17894335341602652, 0.16965029025809963, 0.20574926994379972, 0.2205232708408218, 0.22304762943824286, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06879403839779019, 0.06139637554131894, 0.05994723766729837, 0.052596834525587055, 0.05403808058523374, 0.056994710172350804, 0.0648601484340261, 0.04861638395179635, 0.06062697351278801, 0.043617222285735946, 0.0562550862018627, 0.052822503553095146, 0.0568556885318916, 0.03772334301408031, 0.04326452507280487, 0.040412479513810995, 0.056699729420492395, 0.043905373497628575, 0.07585888608179758, 0.07214669244047522, 0.0682834560638319, 0.07909445818847793, 0.06865295222063306, 0.07031359470792975, 0.07070156107969228, 0.07343520411818139, 0.07551944273328859, 0.09639809328155446, 0.09560392349021385, 0.13220401066271603, 0.10497521888258088, 0.09293613885851904, 0.13631663103354275, 0.07881497196460074, 0.10226006899270146, 0.10117942315761808, 0.18661270649017658, 0.17169624695182573, 0.1438175226340339, 0.13301112760598321, 0.13805309292565504, 0.16346134423860037, 0.14620594190802327, 0.17848901887190372, 0.15251120015098074, 0.028409604740440186, 0.005360023051782625, 0.0616927132098366, 0.1085765446263306, 0.007462904867821085, 0.010715672657449105, 0.03370177871218061, 0.052107982351284554, 0.040600036002743534, 0.0358528359952246, 0.028209674886262692, 0.08236499514412221, 0.06076045689534748, 0.07506807789204772, 0.04448902992360604, 0.04753199136296393, 0.06634217793829178, 0.058040370197263824, 0.0008665664220949276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009513249235407972, 0.03582857037103404, 0.049424750061865974, 0.02497165858716599, 0.013201182615071416, 0.02977281502429996, 0.05701670550084159, 0.04142404492310814, 0.04068229478979701, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0076346857184944605, 0.005319047968622925, 0.0015633461956801042, 0.0037033720854947605, 0.00590899310616988, 9.999999999998899e-05, 0.003896109485838184, 0.2220647663596399, 0.24235480897883843, 0.23359759436502592, 0.2098945929855408, 0.21314236966674027, 0.24482845344363646, 0.23974003648870268, 0.2342793097803979, 0.23100586395417566, 0.042642384161831415, 0.04610330158709819, 0.040910867801380535, 0.0790415545957126, 0.06546550510954618, 0.052883423442156685, 0.05784898423938645, 0.05455466515162499, 0.05524314368257732, 0.13382373076811072, 0.12322135331014883, 0.17903541035265402, 0.1673570937836979, 0.12745325275196262, 0.1378885954604775, 0.13417283867659247, 0.13482708493533901, 0.11927446140453524, 0.18189655969342544, 0.16842862350626653, 0.16700383515561423, 0.18042423190957757, 0.17791948476321828, 0.192295745252673, 0.16265973013066393, 0.16215466693246527, 0.18768954168525964, 0.12018671982644169, 0.10665365221555823, 0.12207391967246317, 0.1296072711437668, 0.1225847183725538, 0.12429689851959447, 0.11358735643506968, 0.12337518801488945, 0.1340799229855416, 0.15976210458260343, 0.15524600516072917, 0.1758504799372198, 0.1569277034187999, 0.15956605032770543, 0.18952153969283747, 0.16233439005698969, 0.16910445758021142, 0.16081146420499604, 0.15089155512103958, 0.16150636417355924, 0.16072394586811656, 0.1563866241667451, 0.16111247178415833, 0.16411262720520992, 0.15568056466488256, 0.1554554485566989, 0.15615013165419345, 0.2207536038996908, 0.16834772907997142, 0.1527833484575869, 0.18438069807140578, 0.22461894799882953, 0.28857598875832235, 0.2327797452930379, 0.19496553561768493, 0.18468599636386718, 0.15844415613854812, 0.16340450465682987, 0.32484595867741817, 0.1694698383774157, 0.2524336863799249, 0.18488919562796968, 0.13846505804767273, 0.18268063973459436, 0.18230433744873908, 0.1838979770982545, 0.18142890656371846, 0.18545450102396366, 0.17366754147597474, 0.18875362907043314, 0.17495215730354796, 0.1738382867434468, 0.1958752431870897, 0.17197176758780774, 0.06747309250023203, 0.061015754166737546, 0.054628750466988674, 0.05827986682975628, 0.05478271387742972, 0.05836702278422823, 0.0753602905330073, 0.07242053648533098, 0.06450539241351072]}, "mutation_prompt": null}
{"id": "37a12289-eb1e-409f-b1b7-7b1a4b6d0261", "solution": "import numpy as np\n\nclass HarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_rate = 0.2\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < self.mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchImproved", "description": "Introducing a mutation operator that probabilistically adjusts a solution based on a weighted combination of its components to enhance diversity and convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.22210719973094784, 0.2200731624697737, 0.2286770107688556, 0.17220582286538044, 0.1732458782208972, 0.17362850077713232, 0.2107068285570478, 0.21960484335554276, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07227835472788136, 0.060624786095474836, 0.045399885617194324, 0.049493845586873086, 0.07462925226755412, 0.06443812482137512, 0.06503788294991752, 0.05920404205312846, 0.0595544775908613, 0.049637843721335395, 0.049087869870877876, 0.05163730567034486, 0.06335261712591778, 0.03714696372364856, 0.03896352097499334, 0.04111958784009817, 0.05500919255065562, 0.042496549030569764, 0.0758738577048047, 0.07253171098920863, 0.06203566985493403, 0.0793143714104192, 0.06865295222063306, 0.07354794947209553, 0.07074101086043105, 0.07364630187121057, 0.07416831032751192, 0.11276603352994974, 0.1275945399735765, 0.1306116613124172, 0.13882609077125385, 0.12521307172987906, 0.09944637010450297, 0.0838877027591387, 0.1059167899406499, 0.1033048556575773, 0.18448274804527276, 0.17726192734135204, 0.15599553603343885, 0.13547121958334318, 0.13893136997323852, 0.1639943189927603, 0.15659623081385265, 0.178537131983884, 0.15387395233525603, 0.03672109605031526, 0.019361363123082675, 0.0442503891839473, 0.1085765446263306, 0.05915638901199749, 0.031320724648522646, 0.03719944417545651, 0.052355067463684124, 0.04293544933613069, 0.0655718364975284, 0.04349898785779405, 0.06309338373860462, 0.04823371971195467, 0.06936060898395158, 0.05724167800155722, 0.053069261824271186, 0.0615553330002383, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032681890607714426, 0.0784608001094057, 0.04964709393679645, 0.0173762725054476, 0.01655098477419581, 0.05076880231721148, 0.07926365288341553, 0.04152414273551308, 0.04626772230224474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006297896163449335, 0.001875427142953745, 0.00820388086058299, 0.0005081479752995222, 0.0012529983707263437, 0.006790989268763981, 0.012158390240206263, 9.999999999998899e-05, 9.999999999998899e-05, 0.24817717525513527, 0.2525352208419185, 0.22738785565053032, 0.21020657416391408, 0.22273996922128103, 0.22397585181881563, 0.25828637599569404, 0.2318979969701669, 0.2542934353972618, 0.04170986525075282, 0.04610330158709819, 0.04620149067407597, 0.06661306657659882, 0.053124666021967415, 0.05132430276566102, 0.059120075787583826, 0.05551783259075871, 0.05374512067111081, 0.13622941858743254, 0.12328661707279664, 0.17903541035265402, 0.16738268846180215, 0.12817854528809092, 0.13796999003732613, 0.13530534903211833, 0.13491455065946234, 0.12112033474153394, 0.19368545232100465, 0.1746788560441359, 0.18669764709266312, 0.19383599777936333, 0.1854503344660806, 0.18744872301311988, 0.16219271579595318, 0.16336261593075319, 0.18215770505711204, 0.11346749029253933, 0.10702622510731907, 0.12799511001935393, 0.129689393077432, 0.13487217536183949, 0.12998534663738304, 0.11374709541489025, 0.12879982111529265, 0.1201399425140165, 0.17313227328351044, 0.19032928742406852, 0.16995606635237914, 0.16251793622058086, 0.1628394146282972, 0.1895988764424804, 0.17905076766020644, 0.18879513283369076, 0.18067612605646388, 0.1547182379835187, 0.16150636417355924, 0.17797674799315666, 0.15540262935578308, 0.16035790652093418, 0.1645443568890742, 0.1713681231152817, 0.15596963867555846, 0.15189487593350537, 0.22272185545801038, 0.2447677703736063, 0.1679210780071959, 0.2091584873698643, 0.1887352054674527, 0.24990490691686873, 0.22258541217945182, 0.19898415002709746, 0.19096240018476107, 0.15870420489063997, 0.16472319522754553, 0.2330722173172125, 0.16264641745986796, 0.2515039573446831, 0.15213561389343888, 0.13926974796325775, 0.1954318795279436, 0.16158552065498621, 0.1839732281421126, 0.17919075711475674, 0.1855347136855695, 0.17353635160294212, 0.18735380167498306, 0.1685082878229518, 0.17384652479557972, 0.1958752431870897, 0.1712925659891844, 0.06747309250023203, 0.06066212603819754, 0.05860603333854997, 0.057097623068000036, 0.06294665480172712, 0.0661112578543307, 0.05727300796005452, 0.07242053648533098, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "654484d8-728f-4a57-abe2-af50ffaddf35", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n            \n            successful_mutations_ratio = sum([func(new_solution) < func(harmony) for harmony in harmony_memory]) / population_size\n            mutation_rate = 0.9 * mutation_rate + 0.1 * successful_mutations_ratio\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "AdaptiveHarmonySearch", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on historical performance to enhance convergence speed.", "configspace": "", "generation": 14, "fitness": 0.06026820995680847, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.12459743962920711, 0.12223129280175926, 0.15386469480448017, 0.12117984849846686, 0.11157057206711707, 0.10369600709165638, 0.14957956097013414, 0.10484596444373584, 0.1558366939136414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05025469345685274, 0.02363974557366111, 0.02540605613233493, 0.016572088840240973, 0.015673124588637566, 0.036083956907857595, 0.030012185685350246, 0.021773166236187524, 0.028688644088028736, 0.021310561288023333, 0.00963745813589545, 0.01229410153067545, 0.02905660004754973, 0.00882739080689976, 0.022014403164994145, 0.009743390165077859, 0.003718472317410848, 0.006023587097155336, 0.04758642067686902, 0.04600100467881929, 0.054497104098337745, 0.05876581674538994, 0.047557500869721325, 0.053154181081846, 0.051120944389030254, 0.05238583808319652, 0.05530617159597473, 0.033734803330514485, 0.0010485080422680815, 0.01741425714218936, 0.01755622857881045, 0.0418909774835996, 0.04447518927808758, 9.999999999998899e-05, 0.011283252637459551, 0.017297786060537113, 0.10020569211602792, 0.07161866057034572, 0.09384629546043055, 0.060377516380908824, 0.08353573274466286, 0.07644091352293891, 0.08406015931940625, 0.06434136437952853, 0.11446926027154003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011089029692789465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006885925989573494, 9.999999999998899e-05, 9.999999999998899e-05, 0.039545412091958276, 0.02643330926642795, 9.999999999998899e-05, 0.006798367510700842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12471127159818862, 0.19880676151349108, 0.16042256311292824, 0.13241641162069495, 0.17277325488627648, 0.16418104405924983, 0.19480460339194716, 0.13931981304460428, 0.17385978102403243, 0.026149663772666476, 0.02795046233772769, 0.02303926857273597, 0.026102225836940662, 0.015259667167717095, 0.019708913399329897, 0.02612404201672358, 0.024399717983446312, 0.03688697508056593, 0.09727004355948488, 0.10460665169393091, 0.09387932871467641, 0.09850531109839356, 0.078523976754171, 0.09240745315613164, 0.09365063315610644, 0.08984600920930119, 0.09137090047796503, 0.1197749928463534, 0.14514387532915551, 0.1405652198937858, 0.14063232093514855, 0.1340353357309494, 0.1362039053861357, 0.13685009424417627, 0.13312696507411637, 0.14351653480244697, 0.06656204832851476, 0.09250888067285401, 0.0717997173111451, 0.08725649040493277, 0.0673447760996363, 0.07208480536151529, 0.08959148443355369, 0.0962168910228991, 0.07898043235608443, 0.12476422140184062, 0.1258208710043517, 0.14216990232842563, 0.15279862007876577, 0.1361066288884909, 0.10850433485472954, 0.12254064809382237, 0.11439008967976338, 0.12615416845864025, 0.03319870909784517, 0.09047271692325942, 0.038271293368935755, 0.0795337851842347, 0.11574038231181716, 0.07490949193406227, 0.1376158817827834, 0.12212298319338266, 0.0004466235673132868, 0.10365885032082334, 0.12238726171581293, 0.11248637376230186, 0.10735562733569037, 0.1458429972195061, 0.1053648591040457, 0.09869055897750134, 0.10858184886396449, 0.10751754933624835, 0.15463839569005744, 0.06769607623629037, 0.1099488868311348, 0.11948203422258974, 0.09029690560526538, 0.06673695848677619, 0.14069260539647166, 0.07958155548088397, 0.1052204859970377, 0.14611607982272856, 0.15213260463296496, 0.14758484725334087, 0.15367394717342397, 0.17465236871079393, 0.14927480851641117, 0.16800798313427223, 0.14732406263166398, 0.15379479631125326, 0.06720346531663945, 0.028462557145462974, 0.03158949138038736, 0.031962582869593636, 0.037101786369586276, 0.036494137857263964, 0.04100082782233916, 0.031016242005670436, 0.03487273613621622]}, "mutation_prompt": null}
{"id": "befdc775-6aac-4464-b14d-e0ca84fc1724", "solution": "import numpy as np\n\nclass HarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_rate = 0.2\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < self.mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchImproved", "description": "Introducing a mutation operator that probabilistically adjusts a solution based on a weighted combination of its components to enhance diversity and convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.22210719973094784, 0.2200731624697737, 0.2286770107688556, 0.17220582286538044, 0.1732458782208972, 0.17362850077713232, 0.2107068285570478, 0.21960484335554276, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07227835472788136, 0.060624786095474836, 0.045399885617194324, 0.049493845586873086, 0.07462925226755412, 0.06443812482137512, 0.06503788294991752, 0.05920404205312846, 0.0595544775908613, 0.049637843721335395, 0.049087869870877876, 0.05163730567034486, 0.06335261712591778, 0.03714696372364856, 0.03896352097499334, 0.04111958784009817, 0.05500919255065562, 0.042496549030569764, 0.0758738577048047, 0.07253171098920863, 0.06203566985493403, 0.0793143714104192, 0.06865295222063306, 0.07354794947209553, 0.07074101086043105, 0.07364630187121057, 0.07416831032751192, 0.11276603352994974, 0.1275945399735765, 0.1306116613124172, 0.13882609077125385, 0.12521307172987906, 0.09944637010450297, 0.0838877027591387, 0.1059167899406499, 0.1033048556575773, 0.18448274804527276, 0.17726192734135204, 0.15599553603343885, 0.13547121958334318, 0.13893136997323852, 0.1639943189927603, 0.15659623081385265, 0.178537131983884, 0.15387395233525603, 0.03672109605031526, 0.019361363123082675, 0.0442503891839473, 0.1085765446263306, 0.05915638901199749, 0.031320724648522646, 0.03719944417545651, 0.052355067463684124, 0.04293544933613069, 0.0655718364975284, 0.04349898785779405, 0.06309338373860462, 0.04823371971195467, 0.06936060898395158, 0.05724167800155722, 0.053069261824271186, 0.0615553330002383, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032681890607714426, 0.0784608001094057, 0.04964709393679645, 0.0173762725054476, 0.01655098477419581, 0.05076880231721148, 0.07926365288341553, 0.04152414273551308, 0.04626772230224474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006297896163449335, 0.001875427142953745, 0.00820388086058299, 0.0005081479752995222, 0.0012529983707263437, 0.006790989268763981, 0.012158390240206263, 9.999999999998899e-05, 9.999999999998899e-05, 0.24817717525513527, 0.2525352208419185, 0.22738785565053032, 0.21020657416391408, 0.22273996922128103, 0.22397585181881563, 0.25828637599569404, 0.2318979969701669, 0.2542934353972618, 0.04170986525075282, 0.04610330158709819, 0.04620149067407597, 0.06661306657659882, 0.053124666021967415, 0.05132430276566102, 0.059120075787583826, 0.05551783259075871, 0.05374512067111081, 0.13622941858743254, 0.12328661707279664, 0.17903541035265402, 0.16738268846180215, 0.12817854528809092, 0.13796999003732613, 0.13530534903211833, 0.13491455065946234, 0.12112033474153394, 0.19368545232100465, 0.1746788560441359, 0.18669764709266312, 0.19383599777936333, 0.1854503344660806, 0.18744872301311988, 0.16219271579595318, 0.16336261593075319, 0.18215770505711204, 0.11346749029253933, 0.10702622510731907, 0.12799511001935393, 0.129689393077432, 0.13487217536183949, 0.12998534663738304, 0.11374709541489025, 0.12879982111529265, 0.1201399425140165, 0.17313227328351044, 0.19032928742406852, 0.16995606635237914, 0.16251793622058086, 0.1628394146282972, 0.1895988764424804, 0.17905076766020644, 0.18879513283369076, 0.18067612605646388, 0.1547182379835187, 0.16150636417355924, 0.17797674799315666, 0.15540262935578308, 0.16035790652093418, 0.1645443568890742, 0.1713681231152817, 0.15596963867555846, 0.15189487593350537, 0.22272185545801038, 0.2447677703736063, 0.1679210780071959, 0.2091584873698643, 0.1887352054674527, 0.24990490691686873, 0.22258541217945182, 0.19898415002709746, 0.19096240018476107, 0.15870420489063997, 0.16472319522754553, 0.2330722173172125, 0.16264641745986796, 0.2515039573446831, 0.15213561389343888, 0.13926974796325775, 0.1954318795279436, 0.16158552065498621, 0.1839732281421126, 0.17919075711475674, 0.1855347136855695, 0.17353635160294212, 0.18735380167498306, 0.1685082878229518, 0.17384652479557972, 0.1958752431870897, 0.1712925659891844, 0.06747309250023203, 0.06066212603819754, 0.05860603333854997, 0.057097623068000036, 0.06294665480172712, 0.0661112578543307, 0.05727300796005452, 0.07242053648533098, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "b2cd74a7-f1a9-48b3-9182-c54d6dd900f7", "solution": "import numpy as np\n\nclass HarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_rate = 0.2\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < self.mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchImproved", "description": "Introducing a mutation operator that probabilistically adjusts a solution based on a weighted combination of its components to enhance diversity and convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.22210719973094784, 0.2200731624697737, 0.2286770107688556, 0.17220582286538044, 0.1732458782208972, 0.17362850077713232, 0.2107068285570478, 0.21960484335554276, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07227835472788136, 0.060624786095474836, 0.045399885617194324, 0.049493845586873086, 0.07462925226755412, 0.06443812482137512, 0.06503788294991752, 0.05920404205312846, 0.0595544775908613, 0.049637843721335395, 0.049087869870877876, 0.05163730567034486, 0.06335261712591778, 0.03714696372364856, 0.03896352097499334, 0.04111958784009817, 0.05500919255065562, 0.042496549030569764, 0.0758738577048047, 0.07253171098920863, 0.06203566985493403, 0.0793143714104192, 0.06865295222063306, 0.07354794947209553, 0.07074101086043105, 0.07364630187121057, 0.07416831032751192, 0.11276603352994974, 0.1275945399735765, 0.1306116613124172, 0.13882609077125385, 0.12521307172987906, 0.09944637010450297, 0.0838877027591387, 0.1059167899406499, 0.1033048556575773, 0.18448274804527276, 0.17726192734135204, 0.15599553603343885, 0.13547121958334318, 0.13893136997323852, 0.1639943189927603, 0.15659623081385265, 0.178537131983884, 0.15387395233525603, 0.03672109605031526, 0.019361363123082675, 0.0442503891839473, 0.1085765446263306, 0.05915638901199749, 0.031320724648522646, 0.03719944417545651, 0.052355067463684124, 0.04293544933613069, 0.0655718364975284, 0.04349898785779405, 0.06309338373860462, 0.04823371971195467, 0.06936060898395158, 0.05724167800155722, 0.053069261824271186, 0.0615553330002383, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032681890607714426, 0.0784608001094057, 0.04964709393679645, 0.0173762725054476, 0.01655098477419581, 0.05076880231721148, 0.07926365288341553, 0.04152414273551308, 0.04626772230224474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006297896163449335, 0.001875427142953745, 0.00820388086058299, 0.0005081479752995222, 0.0012529983707263437, 0.006790989268763981, 0.012158390240206263, 9.999999999998899e-05, 9.999999999998899e-05, 0.24817717525513527, 0.2525352208419185, 0.22738785565053032, 0.21020657416391408, 0.22273996922128103, 0.22397585181881563, 0.25828637599569404, 0.2318979969701669, 0.2542934353972618, 0.04170986525075282, 0.04610330158709819, 0.04620149067407597, 0.06661306657659882, 0.053124666021967415, 0.05132430276566102, 0.059120075787583826, 0.05551783259075871, 0.05374512067111081, 0.13622941858743254, 0.12328661707279664, 0.17903541035265402, 0.16738268846180215, 0.12817854528809092, 0.13796999003732613, 0.13530534903211833, 0.13491455065946234, 0.12112033474153394, 0.19368545232100465, 0.1746788560441359, 0.18669764709266312, 0.19383599777936333, 0.1854503344660806, 0.18744872301311988, 0.16219271579595318, 0.16336261593075319, 0.18215770505711204, 0.11346749029253933, 0.10702622510731907, 0.12799511001935393, 0.129689393077432, 0.13487217536183949, 0.12998534663738304, 0.11374709541489025, 0.12879982111529265, 0.1201399425140165, 0.17313227328351044, 0.19032928742406852, 0.16995606635237914, 0.16251793622058086, 0.1628394146282972, 0.1895988764424804, 0.17905076766020644, 0.18879513283369076, 0.18067612605646388, 0.1547182379835187, 0.16150636417355924, 0.17797674799315666, 0.15540262935578308, 0.16035790652093418, 0.1645443568890742, 0.1713681231152817, 0.15596963867555846, 0.15189487593350537, 0.22272185545801038, 0.2447677703736063, 0.1679210780071959, 0.2091584873698643, 0.1887352054674527, 0.24990490691686873, 0.22258541217945182, 0.19898415002709746, 0.19096240018476107, 0.15870420489063997, 0.16472319522754553, 0.2330722173172125, 0.16264641745986796, 0.2515039573446831, 0.15213561389343888, 0.13926974796325775, 0.1954318795279436, 0.16158552065498621, 0.1839732281421126, 0.17919075711475674, 0.1855347136855695, 0.17353635160294212, 0.18735380167498306, 0.1685082878229518, 0.17384652479557972, 0.1958752431870897, 0.1712925659891844, 0.06747309250023203, 0.06066212603819754, 0.05860603333854997, 0.057097623068000036, 0.06294665480172712, 0.0661112578543307, 0.05727300796005452, 0.07242053648533098, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "bacdddac-7a68-4dbb-8fa2-76433f0ff661", "solution": "import numpy as np\n\nclass HarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_rate = 0.2\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < self.mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchImproved", "description": "Introducing a mutation operator that probabilistically adjusts a solution based on a weighted combination of its components to enhance diversity and convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.22210719973094784, 0.2200731624697737, 0.2286770107688556, 0.17220582286538044, 0.1732458782208972, 0.17362850077713232, 0.2107068285570478, 0.21960484335554276, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07227835472788136, 0.060624786095474836, 0.045399885617194324, 0.049493845586873086, 0.07462925226755412, 0.06443812482137512, 0.06503788294991752, 0.05920404205312846, 0.0595544775908613, 0.049637843721335395, 0.049087869870877876, 0.05163730567034486, 0.06335261712591778, 0.03714696372364856, 0.03896352097499334, 0.04111958784009817, 0.05500919255065562, 0.042496549030569764, 0.0758738577048047, 0.07253171098920863, 0.06203566985493403, 0.0793143714104192, 0.06865295222063306, 0.07354794947209553, 0.07074101086043105, 0.07364630187121057, 0.07416831032751192, 0.11276603352994974, 0.1275945399735765, 0.1306116613124172, 0.13882609077125385, 0.12521307172987906, 0.09944637010450297, 0.0838877027591387, 0.1059167899406499, 0.1033048556575773, 0.18448274804527276, 0.17726192734135204, 0.15599553603343885, 0.13547121958334318, 0.13893136997323852, 0.1639943189927603, 0.15659623081385265, 0.178537131983884, 0.15387395233525603, 0.03672109605031526, 0.019361363123082675, 0.0442503891839473, 0.1085765446263306, 0.05915638901199749, 0.031320724648522646, 0.03719944417545651, 0.052355067463684124, 0.04293544933613069, 0.0655718364975284, 0.04349898785779405, 0.06309338373860462, 0.04823371971195467, 0.06936060898395158, 0.05724167800155722, 0.053069261824271186, 0.0615553330002383, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032681890607714426, 0.0784608001094057, 0.04964709393679645, 0.0173762725054476, 0.01655098477419581, 0.05076880231721148, 0.07926365288341553, 0.04152414273551308, 0.04626772230224474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006297896163449335, 0.001875427142953745, 0.00820388086058299, 0.0005081479752995222, 0.0012529983707263437, 0.006790989268763981, 0.012158390240206263, 9.999999999998899e-05, 9.999999999998899e-05, 0.24817717525513527, 0.2525352208419185, 0.22738785565053032, 0.21020657416391408, 0.22273996922128103, 0.22397585181881563, 0.25828637599569404, 0.2318979969701669, 0.2542934353972618, 0.04170986525075282, 0.04610330158709819, 0.04620149067407597, 0.06661306657659882, 0.053124666021967415, 0.05132430276566102, 0.059120075787583826, 0.05551783259075871, 0.05374512067111081, 0.13622941858743254, 0.12328661707279664, 0.17903541035265402, 0.16738268846180215, 0.12817854528809092, 0.13796999003732613, 0.13530534903211833, 0.13491455065946234, 0.12112033474153394, 0.19368545232100465, 0.1746788560441359, 0.18669764709266312, 0.19383599777936333, 0.1854503344660806, 0.18744872301311988, 0.16219271579595318, 0.16336261593075319, 0.18215770505711204, 0.11346749029253933, 0.10702622510731907, 0.12799511001935393, 0.129689393077432, 0.13487217536183949, 0.12998534663738304, 0.11374709541489025, 0.12879982111529265, 0.1201399425140165, 0.17313227328351044, 0.19032928742406852, 0.16995606635237914, 0.16251793622058086, 0.1628394146282972, 0.1895988764424804, 0.17905076766020644, 0.18879513283369076, 0.18067612605646388, 0.1547182379835187, 0.16150636417355924, 0.17797674799315666, 0.15540262935578308, 0.16035790652093418, 0.1645443568890742, 0.1713681231152817, 0.15596963867555846, 0.15189487593350537, 0.22272185545801038, 0.2447677703736063, 0.1679210780071959, 0.2091584873698643, 0.1887352054674527, 0.24990490691686873, 0.22258541217945182, 0.19898415002709746, 0.19096240018476107, 0.15870420489063997, 0.16472319522754553, 0.2330722173172125, 0.16264641745986796, 0.2515039573446831, 0.15213561389343888, 0.13926974796325775, 0.1954318795279436, 0.16158552065498621, 0.1839732281421126, 0.17919075711475674, 0.1855347136855695, 0.17353635160294212, 0.18735380167498306, 0.1685082878229518, 0.17384652479557972, 0.1958752431870897, 0.1712925659891844, 0.06747309250023203, 0.06066212603819754, 0.05860603333854997, 0.057097623068000036, 0.06294665480172712, 0.0661112578543307, 0.05727300796005452, 0.07242053648533098, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "cf0c7cf8-a54a-4e7d-90e1-7d0f02a24bbd", "solution": "import numpy as np\n\nclass HarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_rate = 0.2\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < self.mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchImproved", "description": "Introducing a mutation operator that probabilistically adjusts a solution based on a weighted combination of its components to enhance diversity and convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.22210719973094784, 0.2200731624697737, 0.2286770107688556, 0.17220582286538044, 0.1732458782208972, 0.17362850077713232, 0.2107068285570478, 0.21960484335554276, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07227835472788136, 0.060624786095474836, 0.045399885617194324, 0.049493845586873086, 0.07462925226755412, 0.06443812482137512, 0.06503788294991752, 0.05920404205312846, 0.0595544775908613, 0.049637843721335395, 0.049087869870877876, 0.05163730567034486, 0.06335261712591778, 0.03714696372364856, 0.03896352097499334, 0.04111958784009817, 0.05500919255065562, 0.042496549030569764, 0.0758738577048047, 0.07253171098920863, 0.06203566985493403, 0.0793143714104192, 0.06865295222063306, 0.07354794947209553, 0.07074101086043105, 0.07364630187121057, 0.07416831032751192, 0.11276603352994974, 0.1275945399735765, 0.1306116613124172, 0.13882609077125385, 0.12521307172987906, 0.09944637010450297, 0.0838877027591387, 0.1059167899406499, 0.1033048556575773, 0.18448274804527276, 0.17726192734135204, 0.15599553603343885, 0.13547121958334318, 0.13893136997323852, 0.1639943189927603, 0.15659623081385265, 0.178537131983884, 0.15387395233525603, 0.03672109605031526, 0.019361363123082675, 0.0442503891839473, 0.1085765446263306, 0.05915638901199749, 0.031320724648522646, 0.03719944417545651, 0.052355067463684124, 0.04293544933613069, 0.0655718364975284, 0.04349898785779405, 0.06309338373860462, 0.04823371971195467, 0.06936060898395158, 0.05724167800155722, 0.053069261824271186, 0.0615553330002383, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032681890607714426, 0.0784608001094057, 0.04964709393679645, 0.0173762725054476, 0.01655098477419581, 0.05076880231721148, 0.07926365288341553, 0.04152414273551308, 0.04626772230224474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006297896163449335, 0.001875427142953745, 0.00820388086058299, 0.0005081479752995222, 0.0012529983707263437, 0.006790989268763981, 0.012158390240206263, 9.999999999998899e-05, 9.999999999998899e-05, 0.24817717525513527, 0.2525352208419185, 0.22738785565053032, 0.21020657416391408, 0.22273996922128103, 0.22397585181881563, 0.25828637599569404, 0.2318979969701669, 0.2542934353972618, 0.04170986525075282, 0.04610330158709819, 0.04620149067407597, 0.06661306657659882, 0.053124666021967415, 0.05132430276566102, 0.059120075787583826, 0.05551783259075871, 0.05374512067111081, 0.13622941858743254, 0.12328661707279664, 0.17903541035265402, 0.16738268846180215, 0.12817854528809092, 0.13796999003732613, 0.13530534903211833, 0.13491455065946234, 0.12112033474153394, 0.19368545232100465, 0.1746788560441359, 0.18669764709266312, 0.19383599777936333, 0.1854503344660806, 0.18744872301311988, 0.16219271579595318, 0.16336261593075319, 0.18215770505711204, 0.11346749029253933, 0.10702622510731907, 0.12799511001935393, 0.129689393077432, 0.13487217536183949, 0.12998534663738304, 0.11374709541489025, 0.12879982111529265, 0.1201399425140165, 0.17313227328351044, 0.19032928742406852, 0.16995606635237914, 0.16251793622058086, 0.1628394146282972, 0.1895988764424804, 0.17905076766020644, 0.18879513283369076, 0.18067612605646388, 0.1547182379835187, 0.16150636417355924, 0.17797674799315666, 0.15540262935578308, 0.16035790652093418, 0.1645443568890742, 0.1713681231152817, 0.15596963867555846, 0.15189487593350537, 0.22272185545801038, 0.2447677703736063, 0.1679210780071959, 0.2091584873698643, 0.1887352054674527, 0.24990490691686873, 0.22258541217945182, 0.19898415002709746, 0.19096240018476107, 0.15870420489063997, 0.16472319522754553, 0.2330722173172125, 0.16264641745986796, 0.2515039573446831, 0.15213561389343888, 0.13926974796325775, 0.1954318795279436, 0.16158552065498621, 0.1839732281421126, 0.17919075711475674, 0.1855347136855695, 0.17353635160294212, 0.18735380167498306, 0.1685082878229518, 0.17384652479557972, 0.1958752431870897, 0.1712925659891844, 0.06747309250023203, 0.06066212603819754, 0.05860603333854997, 0.057097623068000036, 0.06294665480172712, 0.0661112578543307, 0.05727300796005452, 0.07242053648533098, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "17352dee-45d3-4d3b-a6cc-81638dafcb0b", "solution": "import numpy as np\n\nclass HarmonySearchFastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_mutation_rate = 0.2\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n                best_solution = min(harmony_memory, key=func)\n                if func(new_solution) < func(best_solution):\n                    mutation_rate = max(0.05, min(0.5, mutation_rate * 1.1))  # Adaptive mutation adjustment\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchFastConvergence", "description": "Utilizing a novel adaptive mutation strategy that dynamically adjusts the mutation rate based on the local search progress to accelerate convergence speed.", "configspace": "", "generation": 19, "fitness": 0.10079677915114323, "feedback": "The algorithm HarmonySearchFastConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.21378641888447403, 0.2088489074875276, 0.22167152902735987, 0.1669026697917363, 0.16636304033894578, 0.16712661791585592, 0.19986091158757102, 0.21320080355235527, 0.1969069974602995, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06739958792880496, 0.05738218709830323, 0.04388550091893717, 0.047413522669391917, 0.0725443578634899, 0.06111778185644812, 0.0626927705408411, 0.05439359834374502, 0.056997890888137226, 0.045809324563968246, 0.044958734848465465, 0.0478304063367232, 0.06095204623676709, 0.03324762199536868, 0.03711831163587864, 0.036924976299990364, 0.05092703952748945, 0.0376759265255352, 0.07457341837935405, 0.07091718827896365, 0.06082213349205412, 0.07682126442987336, 0.06787057184319634, 0.07146417128998805, 0.06991479384556665, 0.07106632078980091, 0.07244254320816834, 0.10701955861877321, 0.11631335547105226, 0.1250071118277145, 0.13087377175818893, 0.11831504229217849, 0.0942793322942449, 0.07800710020773227, 0.09676699934515232, 0.09450843870827552, 0.18183307757774125, 0.16981419275233078, 0.14842211951401918, 0.12314917030698957, 0.1305393948420993, 0.15676743474170074, 0.150409751897836, 0.16963360145339523, 0.15138140501812902, 0.033322856209978324, 0.012754349258936037, 0.04040222804268434, 0.10485469034322614, 0.052708080051635076, 0.025939800495970444, 0.029344892443535664, 0.047480074897458535, 0.03625238712710055, 0.058881380359505076, 0.03876580370613736, 0.05597325274527443, 0.04444066336668673, 0.06414991017818938, 0.048647899233755565, 0.04713951797657623, 0.05686354355197054, 0.05075404940223793, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03072035034603271, 0.07327834843714154, 0.04529335271219426, 0.015512992451830354, 0.012918012992075067, 0.04749325200124732, 0.07226015429463839, 0.039763471551224616, 0.04273133529910933, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005312716531255868, 0.0014145154791065373, 0.006573720422142326, 0.00045261960596310047, 0.0005822671867612428, 0.005464515301122241, 0.010512375551869124, 9.999999999998899e-05, 9.999999999998899e-05, 0.2355121111995807, 0.24583466304288382, 0.22194726617743177, 0.2016991265872793, 0.2143716877666001, 0.21725455569205931, 0.24950433212881573, 0.2255102161136111, 0.2440177535683481, 0.040669827295492955, 0.044600558533235746, 0.04369520459590914, 0.06411196920581264, 0.04984856486959777, 0.04869706828304354, 0.055236899945425244, 0.050236453870220577, 0.05243647034175314, 0.13226547060324845, 0.12160761681634535, 0.17442108370816367, 0.16420620809048692, 0.12462144230678984, 0.13560665191878796, 0.1310078358992125, 0.1310543694253422, 0.11910157641801344, 0.19033117792877152, 0.16901604938898218, 0.18253123594766774, 0.18911684829491615, 0.17745904980371963, 0.18240656220880314, 0.15879846605488912, 0.15972419340924449, 0.17942940544783215, 0.1096761188449551, 0.10497103915348382, 0.12227244557887607, 0.1253235065394801, 0.12646371648709587, 0.1258148597598987, 0.11107522505445888, 0.12414938989197288, 0.1173184136785822, 0.16663963504953372, 0.18353025719493554, 0.1683519177384616, 0.15875442193716227, 0.1606991394239965, 0.18576720739618413, 0.17410187371587804, 0.18271128247160495, 0.17774597894549993, 0.14867952607507218, 0.1548275426369008, 0.17448645872124657, 0.14976280597738845, 0.15659020490567677, 0.16132728154256182, 0.169141481142548, 0.14993067156167472, 0.14625236828423327, 0.21241801224958867, 0.22728918087754435, 0.1584519930923134, 0.19879917006582615, 0.18353058985560633, 0.24010435338334635, 0.20154255780612862, 0.18906189314764632, 0.1804470238988961, 0.15326708712769943, 0.1610194574129118, 0.22515089064272664, 0.15951705221658286, 0.23818599752161973, 0.14661368270431918, 0.13271179138302502, 0.183181028450479, 0.15434700162723258, 0.1810012688554733, 0.17572286014726213, 0.1836669521864609, 0.17174964470593224, 0.18503607092573948, 0.16705159382394563, 0.17198719426123987, 0.19295039154331495, 0.17037800644972945, 0.06739220434515425, 0.05868153666974263, 0.055661123067281215, 0.05513155425454097, 0.059453030967392295, 0.06407951416814339, 0.055572399936836714, 0.06928661266485214, 0.06267670574922013]}, "mutation_prompt": null}
{"id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 20, "fitness": 0.10505246301517615, "feedback": "The algorithm HarmonySearchDynamicMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "655fa18b-c98f-4c46-baaa-aacc4aef2467", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "928e8fbd-00e9-4cfd-bf17-d7a1901c8033", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "af8381dd-0c8b-40f6-a9ec-ea2720a099da", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "7f475b27-490a-4245-a22f-8ba09e2c6a1a", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "7a69824e-30e8-4d08-b270-10ac4ca6f495", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "ea820f25-4452-4c8e-8e68-d2c87ef82941", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "4451fab5-9ea5-4f13-aab3-d7f92fef3fa2", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "de0ad75d-ea5d-4ce2-9b93-d86894736838", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "40d7d471-1ceb-4e23-947f-b397c1997ae8", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "4579eda7-ec66-4b28-aaf5-be7a505463d4", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "83485af7-2443-4555-963c-f30333436c66", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "dd035245-fdc6-4351-ac77-fbccf3edfdf5", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "00082674-57db-498c-9132-c6edbf0ec491", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "726e75c8-14ac-43ac-9a0e-881030204e98", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "c68ca48e-e5c8-4646-b353-174d9aa20791", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "cd6f3b91-62fd-42c9-bc22-7183dba7c545", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n            # Adaptive Population Size\n            if _ % 100 == 0 and population_size > 5:\n                if func(new_solution) < func(harmony_memory[np.argmax([func(h) for h in harmony_memory])]):\n                    population_size -= 1\n                else:\n                    population_size += 1\n                    harmony_memory = np.vstack((harmony_memory, new_solution))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutationImproved", "description": "Introducing a self-adaptive strategy to dynamically adjust the population size during the optimization process for improved convergence speed.", "configspace": "", "generation": 35, "fitness": 0.10451163114534551, "feedback": "The algorithm HarmonySearchDynamicMutationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.26901493143198973, 0.21284125988194014, 0.2419685754754013, 0.21929559491642014, 0.20978816772391506, 0.19379935353337818, 0.17896213373473724, 0.2568068312345365, 0.1955088670616587, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06075909933631918, 0.04848446064308887, 0.05836843333404018, 0.04465197495579254, 0.047827829133612054, 0.05135365070744391, 0.0582748501427659, 0.0482962774263197, 0.08045948238208944, 0.050992292083739454, 0.054700768560914326, 0.05717060819639608, 0.04514565065646314, 0.0554216081786304, 0.04987965911587233, 0.0561669761286383, 0.04885438226901351, 0.057955103058933144, 0.07261109568314228, 0.06562502992763275, 0.09453414364344304, 0.08007530973188037, 0.07227356468560409, 0.09262592723513008, 0.07340869521647997, 0.08035802700499184, 0.08375261426496705, 0.1172523800923525, 0.09836425583418573, 0.11404469870484735, 0.09968498222477351, 0.08951207598962885, 0.10406925799499844, 0.10099697758144288, 0.10455052492801897, 0.09894972442087602, 0.15404441972975147, 0.17982820938142652, 0.1541465178557846, 0.1394458687928014, 0.14102199135128102, 0.15327038442567575, 0.13929500026746378, 0.1500553573597776, 0.17219162475576233, 0.009540400440333552, 0.06016458030536964, 0.033969694287952934, 0.035754490313133824, 0.06212613694168434, 0.0053882099894921875, 0.027883630531259085, 0.047633445846185674, 0.060884834780610575, 0.05892039249113368, 0.05912451941387953, 0.06011470075599079, 0.02941373759749699, 0.0552870400916623, 0.09344676921964423, 0.05114895854782131, 0.04005054156770438, 0.0579627460834099, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04128779690626494, 0.06389399920515548, 0.017970573609106255, 0.0408125773057163, 0.022009900636482782, 0.033037735049098016, 0.03585798713279087, 0.0333457186158157, 0.03000545057326509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015133132709052144, 0.013769257944806323, 0.0014820757029725407, 0.004895002605634136, 0.0017480367621195425, 0.0027634980739108528, 0.0034819312864187157, 0.003014776059826585, 0.011521115729335674, 0.2369182747250187, 0.2345674807359025, 0.26856043880223046, 0.22440110736449193, 0.21504111152948424, 0.21858990696912817, 0.2503956525012664, 0.246265770219819, 0.23353821033036182, 0.04645875448037751, 0.05483859575630723, 0.04755110263062745, 0.05193962406239028, 0.04573282945511614, 0.051482575486045734, 0.04770885432797989, 0.06297428420750806, 0.06894389759773933, 0.12988581035316116, 0.12190022647261844, 0.12958474819988897, 0.16201888278019272, 0.13041657396381867, 0.12404550219913513, 0.12107450666265995, 0.14551755218451723, 0.14683754509468327, 0.17966155510618897, 0.1747533633131252, 0.20291620811800049, 0.18891872734297377, 0.17528570450558467, 0.18952962398647089, 0.1821956784995885, 0.18575973391383005, 0.18294655130190107, 0.11445400164989983, 0.11011657885941528, 0.1196377030669935, 0.14689568127606634, 0.12762218966002803, 0.13232966948484481, 0.1426751025934827, 0.14541946825834307, 0.12912092698775013, 0.15538659624823448, 0.1732552127202105, 0.16449229589589975, 0.1610852174717755, 0.1606120302451569, 0.15848496583230332, 0.16680506931764116, 0.16937641039437168, 0.1750062027352256, 0.17305202276222043, 0.1539388217144675, 0.15441425050526392, 0.15683663968387096, 0.1598466292933456, 0.15697670112250695, 0.1758231105984882, 0.15870448017332106, 0.15535902884489405, 0.18203922126104988, 0.2117736193638352, 0.1720426103994812, 0.24363205917577846, 0.1374206670268151, 0.16982099913339477, 0.25792659899077985, 0.2908066111108516, 0.14131180577944957, 0.1729474738135024, 0.166696199983559, 0.16150487241041733, 0.373090106111149, 0.19065153378728805, 0.19653701903983545, 0.17861954131155866, 0.19222782462135402, 0.149961813414489, 0.18092247885014745, 0.20579697290582877, 0.1840792449724037, 0.16885320621895716, 0.18015790797583942, 0.1851432208016297, 0.19883313806667824, 0.1862708590189135, 0.17586783932666783, 0.06780961887381542, 0.04913524316423734, 0.06030264885149428, 0.05851221520966643, 0.059760215495092917, 0.05362512144327902, 0.06097961450423117, 0.06063934975253982, 0.06564600715175928]}, "mutation_prompt": null}
{"id": "22528190-ff9d-4c7f-98c6-68a8ea583239", "solution": "import numpy as np\n\nclass FasterHarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for t in range(1, self.budget + 1):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * t)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n            \n            # Dynamic Population Size Adaptation\n            if t % 10 == 0 and t < self.budget and population_size < 20:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, (1, self.dim))))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "FasterHarmonySearchDynamicMutation", "description": "Introducing a dynamic population size adaptation mechanism to enhance diversity and convergence speed without altering the core mutation strategy.", "configspace": "", "generation": 36, "fitness": 0.10005209665463864, "feedback": "The algorithm FasterHarmonySearchDynamicMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.20776540305540192, 0.219242894972008, 0.23615039502971213, 0.20653901214274317, 0.17076468822377577, 0.17474408850276846, 0.23416357153274814, 0.20640593159512044, 0.1709176275852593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056917848791859016, 0.05063735247006118, 0.05759897459312435, 0.051557586878568484, 0.04553202197331341, 0.07109972014742694, 0.0649083813904675, 0.05275917704378574, 0.05953629401207161, 0.043068530002175476, 0.03523498965007543, 0.07142285312578822, 0.03178628599962774, 0.0426762033207837, 0.040937513941267434, 0.04020569713814659, 0.0515322954046844, 0.03561210807447501, 0.07517381969034609, 0.08362560766855931, 0.072875022340668, 0.06649362038440398, 0.07781104616012235, 0.07045554612317351, 0.07557925261928644, 0.07380329417313314, 0.07360391818601708, 0.092949957906033, 0.10485289591556735, 0.1125292485045769, 0.11230230796412999, 0.08647557512760817, 0.10419254460436311, 0.08353428192709123, 0.08200445753605823, 0.1212477619038429, 0.14994826747974843, 0.15920295513202964, 0.16325127062335487, 0.13255675056690075, 0.13410961854217507, 0.13399508640058033, 0.14246536573414537, 0.1439436412239451, 0.16825137303409465, 0.03483054771386729, 0.03244677328659307, 0.017145032271252192, 0.02901473610325067, 0.016812059070518415, 0.0164322422087827, 0.01484838054708304, 0.02351738449732077, 0.06807530037391607, 0.0651672967015382, 0.048448149522197115, 0.04018933002364955, 0.07456447019440571, 0.02463341747587744, 0.040929047234170346, 0.06569354338183386, 0.029597157623125536, 0.07962797110896025, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029505621961748885, 0.017553583592647026, 0.009066841190930264, 0.07424935185117032, 0.04210404210910934, 0.048625245573893916, 0.029448128087223857, 0.04983678226990229, 0.07205222354622531, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03683452305445678, 9.999999999998899e-05, 9.999999999998899e-05, 0.009659756562706234, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012097194133420253, 0.21834652445373592, 0.2353503210222354, 0.22895550508971452, 0.22919768810013552, 0.20588277559257884, 0.20791266292867505, 0.2285344311166445, 0.22371683915461027, 0.24636148635515898, 0.05041312112075924, 0.04309693917659263, 0.05272020102385466, 0.05311433174810609, 0.05670569535809189, 0.056260885270794314, 0.04741194352604394, 0.040346443739738946, 0.05635133365757261, 0.13359708066416565, 0.11560931797635077, 0.17978772738169313, 0.1332314424727361, 0.12472744296534655, 0.12501858476376548, 0.1464541106579511, 0.13893591476877576, 0.14334818270337069, 0.18992052286846395, 0.17132277462454715, 0.1754976404796682, 0.18793064763185352, 0.1839280562503457, 0.19844764334305187, 0.1688056991347484, 0.18853162735898976, 0.1715967482563725, 0.11749836579672757, 0.1083213114875059, 0.11608649225213807, 0.13758204696890752, 0.12656436639731072, 0.14050076677570267, 0.11713724783360668, 0.12023545467434282, 0.12225228150703005, 0.15066333787722708, 0.20406646152000307, 0.19735911680928353, 0.17286359936157802, 0.15512781632865968, 0.165254793915956, 0.16832329217834285, 0.16461820919017378, 0.17306413221836314, 0.16097389183659783, 0.1582412926432062, 0.15136682741390672, 0.1614343850737079, 0.149223764016156, 0.16017602447098767, 0.16017849239647985, 0.15702147827779556, 0.1524067900553493, 0.1616899187956351, 0.16020298007429556, 0.20345627957435142, 0.16988379881345228, 0.19553745335621364, 0.15956841576767788, 0.2284877553219724, 0.20257483800847098, 0.1547340838788872, 0.18762125284312225, 0.15944149540539643, 0.14069350505092748, 0.15912882119136806, 0.16431701727984216, 0.1939793481588017, 0.17127938008761334, 0.1547166913255198, 0.25879884407444065, 0.17895156420653735, 0.19243027615751984, 0.20682596269175446, 0.1711847910039198, 0.18055098363769995, 0.18423168275630508, 0.17939911273670528, 0.17390653643259268, 0.17580308963643332, 0.06747309250023203, 0.06732036521445062, 0.060288490459069366, 0.05884612693272118, 0.054833181332285874, 0.05414062648863638, 0.06530243239515299, 0.06055330544574422, 0.05590520120302478]}, "mutation_prompt": null}
{"id": "707d8bda-05dd-41f4-853e-e25c865c0507", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "b4ab5a8b-e031-4b15-81df-9523bf657c93", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Adaptive Memory Update\n            for i in range(population_size):\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n                    break\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing an adaptive memory update mechanism based on fitness improvement to accelerate convergence while maintaining exploration and exploitation balance.", "configspace": "", "generation": 38, "fitness": 0.06144690354947125, "feedback": "The algorithm HarmonySearchDynamicMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.1312736049460791, 0.11398865072243314, 0.12614584297548936, 0.13870200660781407, 0.09112816455089945, 0.12896574544863038, 0.10891612780159698, 0.12738875736785615, 0.10105656543050534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05356567132963064, 0.026237508600906012, 0.02598725745131525, 0.01595955546329697, 0.02167578447589935, 0.012396358359051729, 0.03370551748452677, 0.020897257626971255, 0.025896218051318254, 0.0220902463993905, 0.00932641083806518, 0.03696926151541524, 0.019584109309318087, 0.012250506669943761, 0.009071088299858476, 0.01523379335897479, 0.01110673530265327, 0.013891013293142018, 0.05230355721235014, 0.04352368913969351, 0.05344155930464345, 0.0773592628290074, 0.049190324608231806, 0.06915823956331857, 0.10293045761946018, 0.056654411332411114, 0.061636374108734904, 0.02641424480197696, 0.022635259864725255, 0.018152779864873847, 0.02117782653538436, 0.02860696338474933, 0.05161075831504858, 0.057348427570479754, 0.02293271705638511, 9.999999999998899e-05, 0.10021927427072241, 0.08009257387165725, 0.0823884847880374, 0.06747622940773368, 0.07614906479979877, 0.07592108119895313, 0.046772335793434094, 0.06748901289485998, 0.11430947059288488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007556862926490826, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008284987709960112, 9.999999999998899e-05, 9.999999999998899e-05, 0.0128440546013886, 0.021140638698973424, 9.999999999998899e-05, 0.012174829004173437, 9.999999999998899e-05, 0.0020345125085876603, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15807501410356162, 0.16074784146554122, 0.15747270927350077, 0.1656182078702424, 0.1758908539546259, 0.1598267995380256, 0.17297176311575624, 0.15417114710288937, 0.15639482826422502, 0.011977440006734286, 0.010532549416157555, 0.029504114322072894, 0.043664615804434814, 0.014231195934206187, 0.02779128081510951, 0.014677883042172324, 0.027630377929678596, 0.02675766679738989, 0.10075821697743792, 0.08475463310724485, 0.09230678502404843, 0.10975840773134293, 0.10858034123907023, 0.09995766369004466, 0.09689153198538458, 0.09203517896182944, 0.0772343363689999, 0.1248121185765444, 0.14419517305240004, 0.13117127502256154, 0.13126273333792104, 0.13854490938728048, 0.1358222559307063, 0.1270399468367801, 0.14245337567841632, 0.14409696994082533, 0.08322942910807374, 0.0811122889668191, 0.07059447623742976, 0.07593882761366655, 0.0780441297937352, 0.08674790744117, 0.07422670642759854, 0.09356161551980968, 0.08044107976804549, 0.1306701346537713, 0.11269029009095888, 0.13838969632421871, 0.12145885506636456, 0.1238237738128255, 0.1301016102556659, 0.13994002793093496, 0.12424367141536818, 0.12614862029253504, 0.10942407683406163, 0.1680484902442415, 0.11896525725318463, 0.013513280805500516, 9.999999999998899e-05, 0.10218491556990061, 0.0027075225971330275, 0.09112588298110513, 0.08481998490538956, 0.10072685804294779, 0.1373140702338178, 0.1886118592491457, 0.10933903926373145, 0.12890284845056443, 0.11995929652999626, 0.12273987846011625, 0.19422963437351914, 0.1143592455281921, 0.08382338229625164, 0.12164963313541444, 0.09504212590347672, 0.10767657573655653, 0.12281835030495425, 0.10192959494904352, 0.09787323307532969, 0.08673031218691718, 0.09557397931298872, 0.15907203929716485, 0.1654552397928637, 0.18080440258715835, 0.1572767456402291, 0.15725756385424616, 0.16091289241221507, 0.16996762538065702, 0.1402379749841942, 0.1565322629491126, 0.03378662655585207, 0.02976468585129044, 0.033381214152450545, 0.03753819416170079, 0.04712476176383262, 0.040844054172454736, 0.039656609984743074, 0.03051947595270854, 0.042094160785170254]}, "mutation_prompt": null}
{"id": "27b45219-9c10-486c-b900-5bb4a73c4209", "solution": "import numpy as np\n\nclass HarmonySearchAdaptiveMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Adaptive Dynamic Mutation Strategy based on individual fitness\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _) + 0.2 * (func(harmony_memory.min(axis=0)) - func(harmony_memory.max(axis=0)))  # Adjust mutation rate based on individual fitness\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchAdaptiveMutation", "description": "Implementing an adaptive dynamic mutation strategy based on individual fitness to enhance exploitation and exploration balance for faster convergence.", "configspace": "", "generation": 39, "fitness": 0.09191520922350128, "feedback": "The algorithm HarmonySearchAdaptiveMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.18568552510270397, 0.1770120635101814, 0.21532255159757552, 0.17274184909985413, 0.15568409103799297, 0.1250219965945496, 0.1586604554904565, 0.1492073042621318, 0.1916383170909658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059060302131648146, 0.05162866888678419, 0.057857371617738185, 0.03804286143672164, 0.03239520938696261, 0.06518362851743498, 0.04470000709107713, 0.0290193015553577, 0.0390307235765005, 0.052310888507518416, 0.05366071156182828, 0.08835264945453347, 0.05184056143481863, 0.055652014277049466, 0.039302884964752094, 0.055841420495055694, 0.0460026252177429, 0.06279220495348159, 0.08366424963472241, 0.0861652813451741, 0.0734539659597685, 0.06764115648311653, 0.07112813854935118, 0.05847594785718724, 0.07645607262934795, 0.09677439205011773, 0.07167796510594049, 0.0661513621566503, 0.08154823470152228, 0.046704030025705445, 0.052952240557300856, 0.05302276098231673, 0.061884095010451334, 0.13705294074829222, 0.1321551415492631, 0.08240142229660086, 0.14856372361756676, 0.11513374002100718, 0.13552294112537333, 0.14314245833360384, 0.15792646558731283, 0.12111221722004883, 0.1394277233386978, 0.13815094878757905, 0.14165924744074632, 0.09296901673701319, 0.04622566622734725, 0.0321273061085936, 0.01031683334936373, 0.01572932663114135, 0.049947439525206416, 0.08547160350600957, 0.04748051198541958, 0.12630199651362273, 0.006011099270392339, 0.06729512741432775, 0.059968914778536275, 0.056504492608593915, 0.07148772885984145, 0.025975292872684075, 0.0012120199846634705, 0.001910801144163865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026193402935343002, 0.012607795264151678, 0.015718938894553003, 0.07136285280063326, 0.0392440814951297, 0.029005985970085746, 0.039562534412438066, 0.08167728509116856, 0.030896229504731254, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002094566297437095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006085411673735219, 9.999999999998899e-05, 9.999999999998899e-05, 0.21092217982725148, 0.18330998730233916, 0.2086361367088858, 0.22365789313995788, 0.19428339859999189, 0.20621505484123803, 0.18071879550265346, 0.22750135954907869, 0.17865527934852365, 0.03720708557559316, 0.08108405236677807, 0.032851882627158324, 0.045802154745230306, 0.03221199369960326, 0.03150678882589841, 0.05530438502052726, 0.040088132262117715, 0.03532694482098231, 0.11405464854226888, 0.11266856389630409, 0.17497720156051744, 0.12271806204506397, 0.11784806647786605, 0.1345666668958604, 0.1096412937982777, 0.18120630079442657, 0.10322772228100097, 0.17013447523580982, 0.1602736753919266, 0.1705394601694199, 0.16468485886457163, 0.190007254649873, 0.21002413095866834, 0.1589989500679121, 0.16129980211462513, 0.15608879978534185, 0.11424765377258905, 0.11960545189275495, 0.09634740515824325, 0.1216067316613395, 0.12429653856173606, 0.11014092297602096, 0.1044776765345099, 0.16620949741423607, 0.08746050220109136, 0.15979817283510533, 0.15520703124282131, 0.16877152678279472, 0.18763009797346042, 0.16059151497162094, 0.16489172568817778, 0.14520694012390745, 0.15196292176115334, 0.15809619046557832, 0.1667034493896281, 0.14008056507293387, 0.15880758431429753, 0.14101494732019004, 0.14335925187232457, 0.13981015093549853, 0.1422434321127295, 0.1452574160994884, 0.1500825346136262, 0.13002470117038067, 0.1337442281969623, 0.16717993556483812, 0.18705302370127486, 0.14912730961730358, 0.20597887690138605, 0.13514061553606038, 0.1362080114155193, 0.14003663619126105, 0.186231232857054, 0.1380460842432225, 0.1540622976079984, 0.1668428064463786, 0.22470194076936745, 0.14176464969849079, 0.15986404688290057, 0.15217605080381058, 0.14021310255392927, 0.16318279752490328, 0.1634503729514699, 0.16814248103015927, 0.1709487650175595, 0.17164575512899105, 0.17241966591258273, 0.176932101791204, 0.17027074869883485, 0.17358821697033144, 0.0596220125027781, 0.06572815899115758, 0.052999303512701545, 0.05346848226386369, 0.05365592664537455, 0.05929842880823999, 0.05006080397937307, 0.0438771673729792, 0.05084273765608727]}, "mutation_prompt": null}
{"id": "c3c1db96-0ad7-4819-b49b-0555f36d89f9", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "7a9e691a-4b14-4ff6-90e3-e6da38411ac4", "solution": "import numpy as np\n\nclass HarmonySearchDynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Dynamic Mutation Strategy\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearchDynamicMutation", "description": "Implementing a dynamic mutation strategy that adapts the mutation rate based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.22249666543533564, 0.19829866018797115, 0.2286770107688556, 0.1951827539341996, 0.17333268460798423, 0.1731823185656074, 0.18499378452868365, 0.2195836527823316, 0.20470075560046697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0692689974521139, 0.05126375303094932, 0.056007286403926826, 0.057517570433054055, 0.0746769599504592, 0.06443812482137512, 0.06381417757275609, 0.059745322516092325, 0.0595544775908613, 0.05300904249534466, 0.06562866808027612, 0.05363750286241198, 0.0503354454721604, 0.03717708137581344, 0.0474707731577626, 0.059878181066397196, 0.05717809719393485, 0.045530553970697496, 0.07873897607854974, 0.07255808768455796, 0.06204319696814964, 0.07926085580362086, 0.06866686044243275, 0.07354794947209553, 0.06965706584478848, 0.07367117780574284, 0.07416831032751192, 0.15378416036292852, 0.12769327794395835, 0.11094524865500766, 0.08151877850849432, 0.123585898007606, 0.09151350151526128, 0.11135218330440222, 0.0784464649845964, 0.08944197830499634, 0.17992790043425444, 0.17461631762130436, 0.13833535889395898, 0.15121272143099118, 0.1390108919215468, 0.1639943189927603, 0.14668234007473224, 0.17864687761279252, 0.15232437928626874, 0.03603285833334835, 0.019397588882270056, 0.035194445507667704, 0.055351983908624613, 0.005181878595833633, 0.025646999333245768, 0.050656389471288255, 0.05134661014265607, 0.019568893542729504, 0.035836499687661894, 0.06400986283783572, 0.08535239061838129, 0.0439693969634507, 0.054760329524424, 0.0618975791917703, 0.06418509540800588, 0.0766307635908039, 0.056864888595184127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027575508693154505, 0.04219311268096626, 0.1022729431997148, 0.06543851309415982, 0.01332894331829082, 0.02909975095245132, 0.08000084838569532, 0.03870365786631391, 0.04971255232516014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038956285298782367, 9.999999999998899e-05, 0.00820388086058299, 9.999999999998899e-05, 0.0012572979295979447, 0.019193363394439222, 0.012141529005008644, 9.999999999998899e-05, 9.999999999998899e-05, 0.23913987765494416, 0.2644036311708676, 0.22738785565053032, 0.20168773461407008, 0.22034963775223504, 0.22406631430663349, 0.24586915021443656, 0.2880044365027443, 0.2402475446833544, 0.05612367186776268, 0.046131076930966075, 0.04620149067407597, 0.06477214194652248, 0.060347435673423155, 0.05830940498017212, 0.05113465677955542, 0.04320026233268004, 0.05374512067111081, 0.1351853504416498, 0.12332450609292411, 0.1801961503985311, 0.16884927097771651, 0.12822604938780346, 0.13593779117588378, 0.13685257179702115, 0.13427061639755378, 0.12094203924300506, 0.18441716202413572, 0.1884316700357701, 0.18669764709266312, 0.17998108398134538, 0.18552028529074815, 0.19798471287025998, 0.17465309062392442, 0.17863836709345304, 0.19284326075033165, 0.12016044969222717, 0.10762574020855331, 0.11398527382518531, 0.1323731667150616, 0.13497507134749664, 0.12995134652621598, 0.11154500451476324, 0.12886162154014036, 0.1297492846321675, 0.17087574058054056, 0.1762991985195873, 0.21602781231865753, 0.1531616613625978, 0.1854568102508669, 0.17566487627984861, 0.17156205807653802, 0.18871137168113328, 0.18067612605646388, 0.1610974526553982, 0.16181365544280324, 0.15492424651274928, 0.1567764309897739, 0.15819206162277155, 0.16022566177815045, 0.16161110060853812, 0.1572199077701889, 0.15827177874797926, 0.20692543237658145, 0.2299824042377384, 0.17295062961923902, 0.26220803880313415, 0.18877217438461513, 0.24990490691686873, 0.2099394873827094, 0.200606767797063, 0.19090368398557478, 0.17189455545213295, 0.16409883469196518, 0.2726224598283007, 0.17521303237066, 0.2517059447001333, 0.15928141771477677, 0.1421222395251185, 0.18950289994466507, 0.16108240650717653, 0.18344221345356826, 0.17951605714825014, 0.18545777711581668, 0.17336604281080237, 0.18737250902699287, 0.1685082878229518, 0.17240660239886496, 0.18614859431430142, 0.17117193166562905, 0.06747309250023203, 0.06455265651467812, 0.0566303548085858, 0.05707756539421882, 0.06298585565439119, 0.05885000916366412, 0.055661234988490516, 0.06423366169646161, 0.06496490371276342]}, "mutation_prompt": null}
{"id": "bd55b4fe-ba71-4791-9e91-3cac2e3d2f0b", "solution": "import numpy as np\n\nclass QuasiOppositionalHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Enhanced Mutation Strategy with Opposition-based Learning\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                if np.random.rand() < 0.5:\n                    new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n                else:\n                    new_solution = harmony_memory[np.random.randint(population_size)] - mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "QuasiOppositionalHarmonySearch", "description": "Implementing a quasi-oppositional harmony search algorithm by enhancing the mutation strategy with opposition-based learning to accelerate convergence.", "configspace": "", "generation": 42, "fitness": 0.14002744345026463, "feedback": "The algorithm QuasiOppositionalHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.17.", "error": "", "parent_id": "8e7f0a21-c602-44a4-860f-13df3fa76887", "metadata": {"aucs": [0.2290313404408988, 0.22547807346894022, 0.23277264174594214, 0.2177144213357779, 0.2191858592882665, 0.22702522794247237, 0.21485547882159495, 0.23774553360781614, 0.23222703025706226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003810831657420355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06529959999690416, 0.05659477261242429, 0.060427439621575485, 0.055795225562183304, 0.04937663325688413, 0.07264405791187889, 0.056946732251360155, 0.07200910289208073, 0.06285730624756247, 0.049042199021724464, 0.05408478069930911, 0.04866927624878137, 0.0499953643711315, 0.062112273176135435, 0.054897775617970046, 0.06381289805923074, 0.06478990693898268, 0.04889623769935003, 0.9660288343542435, 0.8803988856059857, 0.8902296691290839, 0.9230690681173579, 0.9120700633969572, 0.8363305551480291, 0.8251844091364707, 0.902671029801479, 0.9052806360599328, 0.10947411960271403, 0.12447064447280065, 0.11406260070396679, 0.10868360890487527, 0.13197464399406322, 0.1279458943515781, 0.09742055443831965, 0.08152976671654744, 0.0993922156729714, 0.15930294007916312, 0.16817917006637217, 0.14869698471324866, 0.15573834728273472, 0.17062922076685794, 0.13806114191078012, 0.1693890340702956, 0.14297595164185672, 0.1597394659360929, 0.030874954855702352, 0.044473626422652734, 0.042628838763517196, 0.0424319970354603, 0.04129301129161689, 0.03988762195258877, 0.050447864339313364, 0.06063465239472332, 0.030740532033625145, 0.03563186259595319, 0.06129036361283402, 0.05062002327033044, 0.07388003563304757, 0.07385254160309251, 0.030687442768116524, 0.04392404668947314, 0.050725966110205856, 0.08019686345346222, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04684823150135742, 0.053253912166216666, 0.03830398318469119, 0.05157821046382538, 0.028160092162224593, 0.03217124613574962, 0.037258278161402814, 0.03528116136646009, 0.07489123365825967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015029134013427536, 0.005404484837223444, 0.0014519246371810235, 9.999999999998899e-05, 0.0008419001810280324, 0.03009099236149071, 9.999999999998899e-05, 0.0006202344433199336, 0.021749142243233877, 0.2219767243980496, 0.24054392058706575, 0.2358494716417221, 0.22351877941067022, 0.22154286463365702, 0.2461157419700316, 0.24504618420071667, 0.2828227296500905, 0.23941190172919624, 0.0557771868267648, 0.06416340079374638, 0.05293689506815047, 0.061543223464604835, 0.05732090466588213, 0.05976127635895445, 0.053258153966193045, 0.0510022183853347, 0.06392905955193784, 0.14913844403853838, 0.13991391438659906, 0.1332508697287993, 0.147334663532251, 0.13093363905436217, 0.11565056388049011, 0.1281730933772346, 0.14613506617410188, 0.1149401308564949, 0.19574753909719023, 0.19063169160196547, 0.18054998467173178, 0.19191769576566398, 0.18436529363904808, 0.19456116307630222, 0.18711589945480378, 0.17684559811017753, 0.1906217216136501, 0.13198893978159265, 0.12745414597700877, 0.11974964532860888, 0.13963545639092279, 0.14580555524874295, 0.13907615797264095, 0.12794518475544614, 0.1579287411228153, 0.1325341817907909, 0.15866352429193697, 0.17104552005411555, 0.17133106766784423, 0.164910204845937, 0.15688584304315956, 0.1725557686840612, 0.173750913065153, 0.19911630061151186, 0.16197523655164836, 0.1568265207282299, 0.15348122093363947, 0.15665665667131434, 0.15487317165511794, 0.1601759594916603, 0.15157947116231463, 0.16098746060747726, 0.16089573950421487, 0.16312367299235375, 0.1707506136100535, 0.16162596426235254, 0.1861473794080849, 0.24273579740719775, 0.166305258063409, 0.2596697542890797, 0.15537285833923675, 0.2689441094986842, 0.19150858116248548, 0.18870688698342641, 0.16409067780174724, 0.1696656763111063, 0.21215641008901776, 0.12942088130067408, 0.18285647395191806, 0.16216442386015772, 0.20860390508082904, 0.19323497292727687, 0.16625531603355226, 0.18651280955737026, 0.17556878796589603, 0.17436195860576043, 0.18359618282438794, 0.1672958732252382, 0.17201676695413448, 0.18598264114873875, 0.18031159229632066, 0.06884918325647593, 0.06392044784201045, 0.08484465934257479, 0.0740205618343609, 0.06154319282655285, 0.057855095412936874, 0.0704755807803309, 0.05442469773484171, 0.06527780829894014]}, "mutation_prompt": null}
{"id": "8c9d5b8a-a9bb-48cb-8152-1955fc6cca87", "solution": "import numpy as np\n\nclass QuasiOppositionalHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            \n            # Enhanced Mutation Strategy with Opposition-based Learning\n            mutation_rate = 0.2 + 0.1 * np.exp(-0.1 * _)  # Adjust mutation rate based on iteration number\n            if np.random.rand() < mutation_rate:\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                if np.random.rand() < 0.5:\n                    new_solution = harmony_memory[np.random.randint(population_size)] + mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n                else:\n                    new_solution = harmony_memory[np.random.randint(population_size)] - mutation_factor * (new_solution - harmony_memory[np.random.randint(population_size)])\n\n            index = np.random.randint(population_size)\n            if func(new_solution) < func(harmony_memory[index]):\n                harmony_memory[index] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "QuasiOppositionalHarmonySearch", "description": "Implementing a quasi-oppositional harmony search algorithm by enhancing the mutation strategy with opposition-based learning to accelerate convergence.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bd55b4fe-ba71-4791-9e91-3cac2e3d2f0b", "metadata": {"aucs": [0.2290313404408988, 0.22547807346894022, 0.23277264174594214, 0.2177144213357779, 0.2191858592882665, 0.22702522794247237, 0.21485547882159495, 0.23774553360781614, 0.23222703025706226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003810831657420355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06529959999690416, 0.05659477261242429, 0.060427439621575485, 0.055795225562183304, 0.04937663325688413, 0.07264405791187889, 0.056946732251360155, 0.07200910289208073, 0.06285730624756247, 0.049042199021724464, 0.05408478069930911, 0.04866927624878137, 0.0499953643711315, 0.062112273176135435, 0.054897775617970046, 0.06381289805923074, 0.06478990693898268, 0.04889623769935003, 0.9660288343542435, 0.8803988856059857, 0.8902296691290839, 0.9230690681173579, 0.9120700633969572, 0.8363305551480291, 0.8251844091364707, 0.902671029801479, 0.9052806360599328, 0.10947411960271403, 0.12447064447280065, 0.11406260070396679, 0.10868360890487527, 0.13197464399406322, 0.1279458943515781, 0.09742055443831965, 0.08152976671654744, 0.0993922156729714, 0.15930294007916312, 0.16817917006637217, 0.14869698471324866, 0.15573834728273472, 0.17062922076685794, 0.13806114191078012, 0.1693890340702956, 0.14297595164185672, 0.1597394659360929, 0.030874954855702352, 0.044473626422652734, 0.042628838763517196, 0.0424319970354603, 0.04129301129161689, 0.03988762195258877, 0.050447864339313364, 0.06063465239472332, 0.030740532033625145, 0.03563186259595319, 0.06129036361283402, 0.05062002327033044, 0.07388003563304757, 0.07385254160309251, 0.030687442768116524, 0.04392404668947314, 0.050725966110205856, 0.08019686345346222, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04684823150135742, 0.053253912166216666, 0.03830398318469119, 0.05157821046382538, 0.028160092162224593, 0.03217124613574962, 0.037258278161402814, 0.03528116136646009, 0.07489123365825967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015029134013427536, 0.005404484837223444, 0.0014519246371810235, 9.999999999998899e-05, 0.0008419001810280324, 0.03009099236149071, 9.999999999998899e-05, 0.0006202344433199336, 0.021749142243233877, 0.2219767243980496, 0.24054392058706575, 0.2358494716417221, 0.22351877941067022, 0.22154286463365702, 0.2461157419700316, 0.24504618420071667, 0.2828227296500905, 0.23941190172919624, 0.0557771868267648, 0.06416340079374638, 0.05293689506815047, 0.061543223464604835, 0.05732090466588213, 0.05976127635895445, 0.053258153966193045, 0.0510022183853347, 0.06392905955193784, 0.14913844403853838, 0.13991391438659906, 0.1332508697287993, 0.147334663532251, 0.13093363905436217, 0.11565056388049011, 0.1281730933772346, 0.14613506617410188, 0.1149401308564949, 0.19574753909719023, 0.19063169160196547, 0.18054998467173178, 0.19191769576566398, 0.18436529363904808, 0.19456116307630222, 0.18711589945480378, 0.17684559811017753, 0.1906217216136501, 0.13198893978159265, 0.12745414597700877, 0.11974964532860888, 0.13963545639092279, 0.14580555524874295, 0.13907615797264095, 0.12794518475544614, 0.1579287411228153, 0.1325341817907909, 0.15866352429193697, 0.17104552005411555, 0.17133106766784423, 0.164910204845937, 0.15688584304315956, 0.1725557686840612, 0.173750913065153, 0.19911630061151186, 0.16197523655164836, 0.1568265207282299, 0.15348122093363947, 0.15665665667131434, 0.15487317165511794, 0.1601759594916603, 0.15157947116231463, 0.16098746060747726, 0.16089573950421487, 0.16312367299235375, 0.1707506136100535, 0.16162596426235254, 0.1861473794080849, 0.24273579740719775, 0.166305258063409, 0.2596697542890797, 0.15537285833923675, 0.2689441094986842, 0.19150858116248548, 0.18870688698342641, 0.16409067780174724, 0.1696656763111063, 0.21215641008901776, 0.12942088130067408, 0.18285647395191806, 0.16216442386015772, 0.20860390508082904, 0.19323497292727687, 0.16625531603355226, 0.18651280955737026, 0.17556878796589603, 0.17436195860576043, 0.18359618282438794, 0.1672958732252382, 0.17201676695413448, 0.18598264114873875, 0.18031159229632066, 0.06884918325647593, 0.06392044784201045, 0.08484465934257479, 0.0740205618343609, 0.06154319282655285, 0.057855095412936874, 0.0704755807803309, 0.05442469773484171, 0.06527780829894014]}, "mutation_prompt": null}
{"id": "d9474d06-c318-482a-9375-64a42d891148", "solution": "import numpy as np\n\nclass DynamicEnsembleMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rates = np.random.uniform(0.1, 0.3, population_size)\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                mutation_rate = mutation_rates[i]\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                if np.random.rand() < mutation_rate:\n                    if np.random.rand() < 0.5:\n                        new_solution = harmony_memory[i] + mutation_factor * (new_solution - harmony_memory[i])\n                    else:\n                        new_solution = harmony_memory[i] - mutation_factor * (new_solution - harmony_memory[i])\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n                    mutation_rates[i] += 0.05  # Update mutation rate dynamically\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicEnsembleMutationHarmonySearch", "description": "Introducing dynamic ensemble mutation rates based on adaptive memory, enhancing population diversity and exploitation capabilities for faster convergence.", "configspace": "", "generation": 44, "fitness": 0.23035076697798143, "feedback": "The algorithm DynamicEnsembleMutationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "bd55b4fe-ba71-4791-9e91-3cac2e3d2f0b", "metadata": {"aucs": [0.7804760684014619, 0.7536998042372994, 0.7237744091971132, 0.6791375978352154, 0.680312624819958, 0.7299612888240048, 0.6403714147603243, 0.7530545181599902, 0.7162278955408798, 0.061946713795367536, 0.06310307819484695, 0.10824381137939254, 0.04123932385490847, 0.08516833794817957, 0.2649568141391445, 0.07698382422030758, 0.04565443947026049, 0.08726267753615446, 0.12088311371793747, 0.07239563302219809, 0.07992861294900999, 0.11450552518665535, 0.09273664199040454, 0.08684197341118471, 0.09430877384860759, 0.08674585868528539, 0.10465534796456122, 0.096381469078482, 0.09294298190622852, 0.0776037654692936, 0.06942133236125869, 0.04185309419378469, 0.06931605486853609, 0.07457197430463436, 0.09227429203846438, 0.05727989096385666, 0.9354978276295065, 0.9537816774422502, 0.9502951431515866, 0.8980208731408728, 0.8610785142517625, 0.8700627904504843, 0.9652170144063568, 0.890576824445275, 0.94203695938522, 0.23294958300562252, 0.31326847713704287, 0.43493233480356375, 0.27814628365848926, 0.3383861731805994, 0.3140816569530064, 0.34623381031619094, 0.20731546953906588, 0.2835652403118504, 0.3087281261436774, 0.20188817694742178, 0.16328223211996717, 0.2034639016890355, 0.2641121071050968, 0.24053723974216457, 0.18263687715403643, 0.22191811941456774, 0.2632609603373147, 0.11337536443276663, 0.135296647841186, 0.1224553856376609, 0.13629109523155425, 0.21927180271603153, 0.155266816250058, 0.1291071888403329, 0.12996674907440298, 0.12313380656864614, 0.1799038660604516, 0.3039854993477972, 0.15755972222779968, 0.15563741953681476, 0.12905817969245037, 0.14987917089531078, 0.29679808633783833, 0.1876105526291385, 0.1499823051708037, 0.01199551050549108, 0.056427017941625524, 0.030746580518355437, 0.014912317331162717, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031185571910080645, 0.012309890207904628, 9.999999999998899e-05, 0.053475507017594515, 0.09722162440376891, 0.11872523858420514, 0.07073962154138314, 0.004148695198783248, 0.042367570860863624, 0.04047887899318614, 0.021236457464276493, 0.031199231180389697, 0.04201144932079137, 0.01172881630200151, 0.14241982610773563, 0.09346483288596463, 0.03315746143869869, 0.0392764868463632, 0.15453548491182867, 0.06676173162168342, 0.12725758715857738, 0.17272989832140317, 0.10627480023330649, 0.11363847641098979, 0.051140244855986894, 0.22022597065426597, 0.04053115874913349, 0.23094642452190706, 0.06712252866344193, 0.05757621593463624, 0.4724341091428542, 0.4906211079900339, 0.4762682271727534, 0.4320884409803081, 0.4902025830085238, 0.3881009735678389, 0.5070836148559277, 0.5103329296096126, 0.4963624236669665, 0.06814772879314857, 0.06820431898117962, 0.047872572792310164, 0.0775597621585592, 0.1050822011017386, 0.08427116014209368, 0.05643863491829293, 0.09393861254153435, 0.10826328522721707, 0.20061170474890055, 0.22393139725907008, 0.19716931314140962, 0.17183844834285333, 0.2212541402420125, 0.121457755537831, 0.1727624702733045, 0.1727492160386459, 0.13864832742315625, 0.20662565352868822, 0.2647523238944124, 0.16240452653439696, 0.27186677822721006, 0.2543994528914826, 0.27152822356139017, 0.24527082254872723, 0.22136488675563082, 0.21833230181254015, 0.19749074925007715, 0.24347246770608078, 0.13149283270652212, 0.20471521982822372, 0.1771051135916485, 0.28678006528157174, 0.21434127041740558, 0.16992092576111972, 0.23228231146675593, 0.20115356517713967, 0.22305826913097537, 0.2258729751489167, 0.16946670017942667, 0.19209463798839366, 0.19640379394273366, 0.18783714910630234, 0.21759031896913128, 0.18218901061555004, 0.1799003775303296, 0.16717469191873136, 0.16556608946012386, 0.1930224533073407, 0.1739792752363314, 0.18044803981648205, 0.1662869066778827, 0.19618067804888006, 0.16531619312497348, 0.6632631087726273, 0.4970740735700405, 0.1824426542660751, 0.7643852405113196, 0.5523436150132127, 0.1967530542303747, 0.6914753130524931, 0.3963355297308153, 0.16330585113383456, 0.2362404250714608, 0.13789147989477823, 0.5524540730438579, 0.16800358251604908, 0.15881902316291419, 0.49249680387893335, 0.11664537384031515, 0.15883819856612458, 0.1550537287700141, 0.1633027175675288, 0.16076179193930096, 0.16541055133342475, 0.16792428289973327, 0.19135578492610927, 0.19243449712699479, 0.15630420576165072, 0.1576930118769656, 0.18244398873411904, 0.06556012727972571, 0.07758936096157298, 0.07056092887560372, 0.0944520487653897, 0.07813451536482297, 0.10043111571513641, 0.07358929912314982, 0.09521205940842303, 0.09112461525051363]}, "mutation_prompt": null}
{"id": "1c5caae5-42a6-4719-b938-92485c7c07be", "solution": "import numpy as np\n\nclass EnhancedDynamicEnsembleMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rates = np.full(population_size, 0.2)\n        learning_rates = np.full(population_size, 0.01)\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                mutation_rate = mutation_rates[i]\n                learning_rate = learning_rates[i]\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                if np.random.rand() < mutation_rate:\n                    if np.random.rand() < 0.5:\n                        new_solution = harmony_memory[i] + mutation_factor * (new_solution - harmony_memory[i])\n                    else:\n                        new_solution = harmony_memory[i] - mutation_factor * (new_solution - harmony_memory[i])\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n                    mutation_rates[i] *= 1 - learning_rate  # Update mutation rate dynamically based on learning\n                    learning_rates[i] *= 1.1  # Update learning rate\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "EnhancedDynamicEnsembleMutationHarmonySearch", "description": "Enhancing convergence speed by employing a dynamic mutation strategy based on an adaptive learning rate mechanism, prioritizing better solutions for memory update.", "configspace": "", "generation": 45, "fitness": 0.15907809043301385, "feedback": "The algorithm EnhancedDynamicEnsembleMutationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "d9474d06-c318-482a-9375-64a42d891148", "metadata": {"aucs": [0.3335560505448584, 0.3461714744398592, 0.35009484939669566, 0.19362334267368198, 0.25823703649755547, 0.36894157961938134, 0.3040864299443261, 0.3000863155446375, 0.2544067703592695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05774463549778397, 0.0804142689253049, 0.06729360146362906, 0.06700187497206389, 0.09698604119579846, 0.07671782228260815, 0.061027194022829634, 0.06544436708942047, 0.09267518537897901, 0.05210303188114995, 0.05258380235159488, 0.053749962644350724, 0.08039593249562971, 0.0705135840079496, 0.06859031662252457, 0.07325104783981295, 0.04661698147890769, 0.07416750608103972, 0.8238942610033408, 0.7755899575395636, 0.94012387320726, 0.8372226051680899, 0.9792129297953072, 0.9655140000990065, 0.8565688078645562, 0.9013451665409989, 0.8808205182887225, 0.13376455927824393, 0.13076779904668534, 0.10822109574410843, 0.1117912137508068, 0.13090553070829625, 0.08557443635014517, 0.17338602028506067, 0.15339856995572987, 0.09463267183757385, 0.2086448773254389, 0.15968286140911658, 0.18103177855023944, 0.15954149082045643, 0.1561101020527409, 0.19306627568421553, 0.17090019720841498, 0.2129804236712305, 0.16003513169654038, 0.1004724943229941, 0.12082424071221454, 0.06908963151221237, 0.06337384936432788, 0.10633059623818775, 0.09074506570084873, 0.12234411379946486, 0.10315841550887073, 0.0869829887385436, 0.11498349974481004, 0.08934178369897727, 0.1249145273971286, 0.10044734574427061, 0.08869816716440604, 0.09442546302383903, 0.10998765139437583, 0.15971404116952703, 0.10513779191144512, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0765397654694967, 0.039998087181319586, 0.01851952001597834, 0.03578548173937157, 0.032704117295246915, 0.04274407944061076, 0.037713995068738626, 0.018595857846226638, 0.031730719121132234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02920245073144756, 0.027267420608234505, 0.06336859126101957, 0.0697988181977851, 0.0320848390082461, 0.020032536592678674, 9.999999999998899e-05, 0.01049773571104029, 0.030643059073443335, 0.3398572192117185, 0.32365450798605555, 0.29905173609327584, 0.2804455181585024, 0.2547041488252658, 0.2868259596017422, 0.30122516678543376, 0.27240899680677555, 0.32723447211151646, 0.05172251808464501, 0.06062636549581579, 0.04577791643006912, 0.054476033655416534, 0.05460124097289243, 0.06981204194051838, 0.07078601486917746, 0.07654209775066323, 0.05544222186475256, 0.16433248852463933, 0.12186640552906502, 0.13256541925793297, 0.14720193965264894, 0.13923868645150794, 0.13430691121096716, 0.126948066523367, 0.2117088617610301, 0.11995655375437797, 0.18873744065084908, 0.1603296536124501, 0.22082035479862017, 0.21053443882098832, 0.22754190701955723, 0.21371455258304273, 0.20291186152192375, 0.2144195643225698, 0.19161893351623338, 0.18144586277197905, 0.1515519440944687, 0.13803623713813962, 0.17336244680705126, 0.1378761406288469, 0.12761096322081755, 0.14848005711491696, 0.14767314235961004, 0.09930746787832212, 0.19264329035645056, 0.19054623247937474, 0.15904001914463484, 0.17097126903646132, 0.1522515806639967, 0.19870978789899274, 0.17147861364215677, 0.16241786045982864, 0.2173555318592172, 0.16201133468037643, 0.17958333184259534, 0.15887212781176607, 0.16114021363577613, 0.19416196793238427, 0.161500123310944, 0.16143213769600384, 0.16445543580048738, 0.17126422653742646, 0.2036397316253047, 0.1624317162533282, 0.17663798475182046, 0.3834096626651088, 0.47480449660734525, 0.48091106473675593, 0.197381671017694, 0.14393299345709443, 0.418952515541105, 0.21908893249024175, 0.17085751919992798, 0.22994590091598188, 0.16208846657838116, 0.2496299789716987, 0.1522162257126003, 0.19896397989904124, 0.19226093883183693, 0.13343637206952752, 0.16486217467550668, 0.1635065570543628, 0.18444448177427897, 0.1565023896676705, 0.17531885437014394, 0.16088019293565214, 0.1520442768965926, 0.17818153470989184, 0.1599342866429051, 0.06443966352778385, 0.061371041233922785, 0.06060743595380935, 0.07682219697073955, 0.08615205589597008, 0.0702555196223773, 0.060798196585255204, 0.05939196411397385, 0.08343009497433174]}, "mutation_prompt": null}
{"id": "453fc910-9782-43a2-bd52-2d167e3a3d40", "solution": "import numpy as np\n\nclass DynamicEnsembleMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rates = np.random.uniform(0.1, 0.3, population_size)\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                mutation_rate = mutation_rates[i]\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                if np.random.rand() < mutation_rate:\n                    if np.random.rand() < 0.5:\n                        new_solution = harmony_memory[i] + mutation_factor * (new_solution - harmony_memory[i])\n                    else:\n                        new_solution = harmony_memory[i] - mutation_factor * (new_solution - harmony_memory[i])\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n                    mutation_rates[i] += 0.05  # Update mutation rate dynamically\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicEnsembleMutationHarmonySearch", "description": "Introducing dynamic ensemble mutation rates based on adaptive memory, enhancing population diversity and exploitation capabilities for faster convergence.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9474d06-c318-482a-9375-64a42d891148", "metadata": {"aucs": [0.7804760684014619, 0.7536998042372994, 0.7237744091971132, 0.6791375978352154, 0.680312624819958, 0.7299612888240048, 0.6403714147603243, 0.7530545181599902, 0.7162278955408798, 0.061946713795367536, 0.06310307819484695, 0.10824381137939254, 0.04123932385490847, 0.08516833794817957, 0.2649568141391445, 0.07698382422030758, 0.04565443947026049, 0.08726267753615446, 0.12088311371793747, 0.07239563302219809, 0.07992861294900999, 0.11450552518665535, 0.09273664199040454, 0.08684197341118471, 0.09430877384860759, 0.08674585868528539, 0.10465534796456122, 0.096381469078482, 0.09294298190622852, 0.0776037654692936, 0.06942133236125869, 0.04185309419378469, 0.06931605486853609, 0.07457197430463436, 0.09227429203846438, 0.05727989096385666, 0.9354978276295065, 0.9537816774422502, 0.9502951431515866, 0.8980208731408728, 0.8610785142517625, 0.8700627904504843, 0.9652170144063568, 0.890576824445275, 0.94203695938522, 0.23294958300562252, 0.31326847713704287, 0.43493233480356375, 0.27814628365848926, 0.3383861731805994, 0.3140816569530064, 0.34623381031619094, 0.20731546953906588, 0.2835652403118504, 0.3087281261436774, 0.20188817694742178, 0.16328223211996717, 0.2034639016890355, 0.2641121071050968, 0.24053723974216457, 0.18263687715403643, 0.22191811941456774, 0.2632609603373147, 0.11337536443276663, 0.135296647841186, 0.1224553856376609, 0.13629109523155425, 0.21927180271603153, 0.155266816250058, 0.1291071888403329, 0.12996674907440298, 0.12313380656864614, 0.1799038660604516, 0.3039854993477972, 0.15755972222779968, 0.15563741953681476, 0.12905817969245037, 0.14987917089531078, 0.29679808633783833, 0.1876105526291385, 0.1499823051708037, 0.01199551050549108, 0.056427017941625524, 0.030746580518355437, 0.014912317331162717, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031185571910080645, 0.012309890207904628, 9.999999999998899e-05, 0.053475507017594515, 0.09722162440376891, 0.11872523858420514, 0.07073962154138314, 0.004148695198783248, 0.042367570860863624, 0.04047887899318614, 0.021236457464276493, 0.031199231180389697, 0.04201144932079137, 0.01172881630200151, 0.14241982610773563, 0.09346483288596463, 0.03315746143869869, 0.0392764868463632, 0.15453548491182867, 0.06676173162168342, 0.12725758715857738, 0.17272989832140317, 0.10627480023330649, 0.11363847641098979, 0.051140244855986894, 0.22022597065426597, 0.04053115874913349, 0.23094642452190706, 0.06712252866344193, 0.05757621593463624, 0.4724341091428542, 0.4906211079900339, 0.4762682271727534, 0.4320884409803081, 0.4902025830085238, 0.3881009735678389, 0.5070836148559277, 0.5103329296096126, 0.4963624236669665, 0.06814772879314857, 0.06820431898117962, 0.047872572792310164, 0.0775597621585592, 0.1050822011017386, 0.08427116014209368, 0.05643863491829293, 0.09393861254153435, 0.10826328522721707, 0.20061170474890055, 0.22393139725907008, 0.19716931314140962, 0.17183844834285333, 0.2212541402420125, 0.121457755537831, 0.1727624702733045, 0.1727492160386459, 0.13864832742315625, 0.20662565352868822, 0.2647523238944124, 0.16240452653439696, 0.27186677822721006, 0.2543994528914826, 0.27152822356139017, 0.24527082254872723, 0.22136488675563082, 0.21833230181254015, 0.19749074925007715, 0.24347246770608078, 0.13149283270652212, 0.20471521982822372, 0.1771051135916485, 0.28678006528157174, 0.21434127041740558, 0.16992092576111972, 0.23228231146675593, 0.20115356517713967, 0.22305826913097537, 0.2258729751489167, 0.16946670017942667, 0.19209463798839366, 0.19640379394273366, 0.18783714910630234, 0.21759031896913128, 0.18218901061555004, 0.1799003775303296, 0.16717469191873136, 0.16556608946012386, 0.1930224533073407, 0.1739792752363314, 0.18044803981648205, 0.1662869066778827, 0.19618067804888006, 0.16531619312497348, 0.6632631087726273, 0.4970740735700405, 0.1824426542660751, 0.7643852405113196, 0.5523436150132127, 0.1967530542303747, 0.6914753130524931, 0.3963355297308153, 0.16330585113383456, 0.2362404250714608, 0.13789147989477823, 0.5524540730438579, 0.16800358251604908, 0.15881902316291419, 0.49249680387893335, 0.11664537384031515, 0.15883819856612458, 0.1550537287700141, 0.1633027175675288, 0.16076179193930096, 0.16541055133342475, 0.16792428289973327, 0.19135578492610927, 0.19243449712699479, 0.15630420576165072, 0.1576930118769656, 0.18244398873411904, 0.06556012727972571, 0.07758936096157298, 0.07056092887560372, 0.0944520487653897, 0.07813451536482297, 0.10043111571513641, 0.07358929912314982, 0.09521205940842303, 0.09112461525051363]}, "mutation_prompt": null}
{"id": "38a2b393-cc02-474f-b8a7-82f168a02bc2", "solution": "import numpy as np\n\nclass EnhancedDynamicEnsembleMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rates = np.random.uniform(0.1, 0.3, population_size)\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                mutation_rate = mutation_rates[i]\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                if np.random.rand() < mutation_rate:\n                    if np.random.rand() < 0.5:\n                        new_solution = harmony_memory[i] + mutation_factor * (new_solution - harmony_memory[i])\n                    else:\n                        new_solution = harmony_memory[i] - mutation_factor * (new_solution - harmony_memory[i])\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n                    mutation_rates[i] += 0.05 * (1 - func(new_solution) / func(harmony_memory[i]))  # Update mutation rate based on solution performance\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "EnhancedDynamicEnsembleMutationHarmonySearch", "description": "Implementing a dynamic ensemble with adaptive mutation control based on individual solution performance to enhance convergence speed.", "configspace": "", "generation": 47, "fitness": 0.1628460093599538, "feedback": "The algorithm EnhancedDynamicEnsembleMutationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "d9474d06-c318-482a-9375-64a42d891148", "metadata": {"aucs": [0.3733377042256202, 0.3776075086789761, 0.3059246810178916, 0.345671093502543, 0.31285436255187726, 0.2812909769910146, 0.35925998871674236, 0.29271006614256523, 0.35248565943843824, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006377699189787922, 0.0024773295751898683, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08092335083503799, 0.05492097635057758, 0.07327307327566346, 0.05381938268773523, 0.07011370999923638, 0.05713880394339099, 0.07538860356510702, 0.10061497890591853, 0.08008055925437207, 0.048515129625914644, 0.0810869897314942, 0.05519350073216045, 0.0764785288847053, 0.06401333292303857, 0.05031945087153311, 0.059429614643191075, 0.08096793225589827, 0.08272424179188786, 0.950493600264985, 0.8548395811102514, 0.9258066712651019, 0.823615695253324, 0.7879059522829388, 0.8536289175819911, 0.8829161227678619, 0.8904556540930374, 0.9527007403582478, 0.11900812836602581, 0.15749455927934508, 0.13084885973770832, 0.12133756880432356, 0.15203690437300832, 0.15147026970830024, 0.1329969812894769, 0.10865701840002728, 0.1546207295635561, 0.19803763736767732, 0.1975762871735499, 0.16460630795613573, 0.28074321674181335, 0.15686707824948876, 0.22664351092568158, 0.2128303818259224, 0.14871516952665242, 0.26823661232127516, 0.08415625717017061, 0.07207338846779021, 0.056683163906192435, 0.10335461913143229, 0.09730476948538302, 0.08661932914783499, 0.11596896858308192, 0.0874098800268639, 0.1198197554786875, 0.11291566562132571, 0.11282173859348732, 0.10712901320678525, 0.0881880405591201, 0.12618685848041, 0.11024736273542024, 0.11076302266509575, 0.13630738828349076, 0.14870158516232623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061858080193854637, 0.04939613099244655, 0.05585911863195181, 0.04924613956538815, 0.021548848745151394, 0.006301777188649771, 0.06611853405346158, 0.06469736781901991, 0.06489107916905501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05819580515870093, 0.0699185716266435, 0.022433398715924313, 0.036921051826066975, 0.053443601834505916, 0.03710543005216427, 0.04555725268314459, 0.03529930576492446, 0.0055807346458590645, 0.326948862077182, 0.3516267588061872, 0.3437941933508376, 0.2917472450060359, 0.29023669429799903, 0.30955037767676763, 0.3474545572516792, 0.32155176309923905, 0.3180312464263223, 0.06296701923687598, 0.06011718245969899, 0.06924001979052241, 0.08984093269787208, 0.04104804290083941, 0.08556930910786209, 0.08432647678421745, 0.06722898946444911, 0.06995033907911707, 0.11577495694389894, 0.1585463643022651, 0.21599295347202274, 0.1271495747611432, 0.15440748627674217, 0.12352276682970675, 0.10259001219351593, 0.159726372977947, 0.11295376226894893, 0.24621185205353036, 0.22132955085692962, 0.22545119010418835, 0.25528059436323713, 0.18417284026301417, 0.23077144698577823, 0.21670221812714663, 0.16888463127955178, 0.17485509753718265, 0.16362793457338232, 0.1810688613964404, 0.1818731513288323, 0.2057874800322086, 0.1789973340109149, 0.1294628446500079, 0.18694100886915044, 0.1551623285559175, 0.14432549824759677, 0.1653391514547724, 0.17588587031965164, 0.16842444529678524, 0.16618912356424187, 0.17589906085076967, 0.15930299633678446, 0.17795324396220746, 0.17183872429417024, 0.18833383018786398, 0.17054409052889918, 0.17285580607602347, 0.16356986968865062, 0.1739292380296651, 0.1567336583292257, 0.16442671815182708, 0.18001687762152652, 0.2421207173769241, 0.15890499934538616, 0.1443346047918136, 0.4401750796130014, 0.19158631982226626, 0.14180397461163607, 0.18116306202808463, 0.37932382295538625, 0.1546086040156457, 0.2775818252214005, 0.15847180961016838, 0.16149128702160864, 0.13473351296940728, 0.33932690306982227, 0.17308170900550035, 0.13429352509035775, 0.2696973912351923, 0.1757281211895506, 0.23555501902554432, 0.10113715962605785, 0.15101305438032886, 0.17100546392150828, 0.15855881549610784, 0.1766519105765748, 0.16154232542455316, 0.15841158464714622, 0.1581586817416183, 0.18255670599938945, 0.17160732185950933, 0.06424945610581378, 0.05199349590322422, 0.06936867448878059, 0.06511047778542722, 0.0671248976033374, 0.06351873600931446, 0.06242380454563734, 0.05193235571736199, 0.07247549145544652]}, "mutation_prompt": null}
{"id": "ec4304ab-d211-43af-8bbc-c3d80c69b669", "solution": "import numpy as np\n\nclass DynamicEnsembleMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rates = np.random.uniform(0.1, 0.3, population_size)\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                mutation_rate = mutation_rates[i]\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                if np.random.rand() < mutation_rate:\n                    if np.random.rand() < 0.5:\n                        new_solution = harmony_memory[i] + mutation_factor * (new_solution - harmony_memory[i])\n                    else:\n                        new_solution = harmony_memory[i] - mutation_factor * (new_solution - harmony_memory[i])\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n                    mutation_rates[i] += 0.05  # Update mutation rate dynamically\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicEnsembleMutationHarmonySearch", "description": "Introducing dynamic ensemble mutation rates based on adaptive memory, enhancing population diversity and exploitation capabilities for faster convergence.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9474d06-c318-482a-9375-64a42d891148", "metadata": {"aucs": [0.7804760684014619, 0.7536998042372994, 0.7237744091971132, 0.6791375978352154, 0.680312624819958, 0.7299612888240048, 0.6403714147603243, 0.7530545181599902, 0.7162278955408798, 0.061946713795367536, 0.06310307819484695, 0.10824381137939254, 0.04123932385490847, 0.08516833794817957, 0.2649568141391445, 0.07698382422030758, 0.04565443947026049, 0.08726267753615446, 0.12088311371793747, 0.07239563302219809, 0.07992861294900999, 0.11450552518665535, 0.09273664199040454, 0.08684197341118471, 0.09430877384860759, 0.08674585868528539, 0.10465534796456122, 0.096381469078482, 0.09294298190622852, 0.0776037654692936, 0.06942133236125869, 0.04185309419378469, 0.06931605486853609, 0.07457197430463436, 0.09227429203846438, 0.05727989096385666, 0.9354978276295065, 0.9537816774422502, 0.9502951431515866, 0.8980208731408728, 0.8610785142517625, 0.8700627904504843, 0.9652170144063568, 0.890576824445275, 0.94203695938522, 0.23294958300562252, 0.31326847713704287, 0.43493233480356375, 0.27814628365848926, 0.3383861731805994, 0.3140816569530064, 0.34623381031619094, 0.20731546953906588, 0.2835652403118504, 0.3087281261436774, 0.20188817694742178, 0.16328223211996717, 0.2034639016890355, 0.2641121071050968, 0.24053723974216457, 0.18263687715403643, 0.22191811941456774, 0.2632609603373147, 0.11337536443276663, 0.135296647841186, 0.1224553856376609, 0.13629109523155425, 0.21927180271603153, 0.155266816250058, 0.1291071888403329, 0.12996674907440298, 0.12313380656864614, 0.1799038660604516, 0.3039854993477972, 0.15755972222779968, 0.15563741953681476, 0.12905817969245037, 0.14987917089531078, 0.29679808633783833, 0.1876105526291385, 0.1499823051708037, 0.01199551050549108, 0.056427017941625524, 0.030746580518355437, 0.014912317331162717, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031185571910080645, 0.012309890207904628, 9.999999999998899e-05, 0.053475507017594515, 0.09722162440376891, 0.11872523858420514, 0.07073962154138314, 0.004148695198783248, 0.042367570860863624, 0.04047887899318614, 0.021236457464276493, 0.031199231180389697, 0.04201144932079137, 0.01172881630200151, 0.14241982610773563, 0.09346483288596463, 0.03315746143869869, 0.0392764868463632, 0.15453548491182867, 0.06676173162168342, 0.12725758715857738, 0.17272989832140317, 0.10627480023330649, 0.11363847641098979, 0.051140244855986894, 0.22022597065426597, 0.04053115874913349, 0.23094642452190706, 0.06712252866344193, 0.05757621593463624, 0.4724341091428542, 0.4906211079900339, 0.4762682271727534, 0.4320884409803081, 0.4902025830085238, 0.3881009735678389, 0.5070836148559277, 0.5103329296096126, 0.4963624236669665, 0.06814772879314857, 0.06820431898117962, 0.047872572792310164, 0.0775597621585592, 0.1050822011017386, 0.08427116014209368, 0.05643863491829293, 0.09393861254153435, 0.10826328522721707, 0.20061170474890055, 0.22393139725907008, 0.19716931314140962, 0.17183844834285333, 0.2212541402420125, 0.121457755537831, 0.1727624702733045, 0.1727492160386459, 0.13864832742315625, 0.20662565352868822, 0.2647523238944124, 0.16240452653439696, 0.27186677822721006, 0.2543994528914826, 0.27152822356139017, 0.24527082254872723, 0.22136488675563082, 0.21833230181254015, 0.19749074925007715, 0.24347246770608078, 0.13149283270652212, 0.20471521982822372, 0.1771051135916485, 0.28678006528157174, 0.21434127041740558, 0.16992092576111972, 0.23228231146675593, 0.20115356517713967, 0.22305826913097537, 0.2258729751489167, 0.16946670017942667, 0.19209463798839366, 0.19640379394273366, 0.18783714910630234, 0.21759031896913128, 0.18218901061555004, 0.1799003775303296, 0.16717469191873136, 0.16556608946012386, 0.1930224533073407, 0.1739792752363314, 0.18044803981648205, 0.1662869066778827, 0.19618067804888006, 0.16531619312497348, 0.6632631087726273, 0.4970740735700405, 0.1824426542660751, 0.7643852405113196, 0.5523436150132127, 0.1967530542303747, 0.6914753130524931, 0.3963355297308153, 0.16330585113383456, 0.2362404250714608, 0.13789147989477823, 0.5524540730438579, 0.16800358251604908, 0.15881902316291419, 0.49249680387893335, 0.11664537384031515, 0.15883819856612458, 0.1550537287700141, 0.1633027175675288, 0.16076179193930096, 0.16541055133342475, 0.16792428289973327, 0.19135578492610927, 0.19243449712699479, 0.15630420576165072, 0.1576930118769656, 0.18244398873411904, 0.06556012727972571, 0.07758936096157298, 0.07056092887560372, 0.0944520487653897, 0.07813451536482297, 0.10043111571513641, 0.07358929912314982, 0.09521205940842303, 0.09112461525051363]}, "mutation_prompt": null}
{"id": "84b8855a-3904-42b4-8aa8-a00d5336b0c0", "solution": "import numpy as np\n\nclass ModifiedDynamicEnsembleMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rates = np.random.uniform(0.1, 0.3, population_size)\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                mutation_rate = mutation_rates[i]\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                if np.random.rand() < mutation_rate:\n                    if np.random.rand() < 0.5:\n                        new_solution = harmony_memory[i] + mutation_factor * (new_solution - harmony_memory[i])\n                    else:\n                        new_solution = harmony_memory[i] - mutation_factor * (new_solution - harmony_memory[i])\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n                    mutation_rates[i] += 0.05 * (1 - func(new_solution) / func(harmony_memory[i]))  # Update mutation rate based on individual fitness\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "ModifiedDynamicEnsembleMutationHarmonySearch", "description": "Implementing a dynamic ensemble mutation rate strategy based on individual fitness levels to enhance exploitation and exploration, leading to accelerated convergence.", "configspace": "", "generation": 49, "fitness": 0.1628460093599538, "feedback": "The algorithm ModifiedDynamicEnsembleMutationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "d9474d06-c318-482a-9375-64a42d891148", "metadata": {"aucs": [0.3733377042256202, 0.3776075086789761, 0.3059246810178916, 0.345671093502543, 0.31285436255187726, 0.2812909769910146, 0.35925998871674236, 0.29271006614256523, 0.35248565943843824, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006377699189787922, 0.0024773295751898683, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08092335083503799, 0.05492097635057758, 0.07327307327566346, 0.05381938268773523, 0.07011370999923638, 0.05713880394339099, 0.07538860356510702, 0.10061497890591853, 0.08008055925437207, 0.048515129625914644, 0.0810869897314942, 0.05519350073216045, 0.0764785288847053, 0.06401333292303857, 0.05031945087153311, 0.059429614643191075, 0.08096793225589827, 0.08272424179188786, 0.950493600264985, 0.8548395811102514, 0.9258066712651019, 0.823615695253324, 0.7879059522829388, 0.8536289175819911, 0.8829161227678619, 0.8904556540930374, 0.9527007403582478, 0.11900812836602581, 0.15749455927934508, 0.13084885973770832, 0.12133756880432356, 0.15203690437300832, 0.15147026970830024, 0.1329969812894769, 0.10865701840002728, 0.1546207295635561, 0.19803763736767732, 0.1975762871735499, 0.16460630795613573, 0.28074321674181335, 0.15686707824948876, 0.22664351092568158, 0.2128303818259224, 0.14871516952665242, 0.26823661232127516, 0.08415625717017061, 0.07207338846779021, 0.056683163906192435, 0.10335461913143229, 0.09730476948538302, 0.08661932914783499, 0.11596896858308192, 0.0874098800268639, 0.1198197554786875, 0.11291566562132571, 0.11282173859348732, 0.10712901320678525, 0.0881880405591201, 0.12618685848041, 0.11024736273542024, 0.11076302266509575, 0.13630738828349076, 0.14870158516232623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061858080193854637, 0.04939613099244655, 0.05585911863195181, 0.04924613956538815, 0.021548848745151394, 0.006301777188649771, 0.06611853405346158, 0.06469736781901991, 0.06489107916905501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05819580515870093, 0.0699185716266435, 0.022433398715924313, 0.036921051826066975, 0.053443601834505916, 0.03710543005216427, 0.04555725268314459, 0.03529930576492446, 0.0055807346458590645, 0.326948862077182, 0.3516267588061872, 0.3437941933508376, 0.2917472450060359, 0.29023669429799903, 0.30955037767676763, 0.3474545572516792, 0.32155176309923905, 0.3180312464263223, 0.06296701923687598, 0.06011718245969899, 0.06924001979052241, 0.08984093269787208, 0.04104804290083941, 0.08556930910786209, 0.08432647678421745, 0.06722898946444911, 0.06995033907911707, 0.11577495694389894, 0.1585463643022651, 0.21599295347202274, 0.1271495747611432, 0.15440748627674217, 0.12352276682970675, 0.10259001219351593, 0.159726372977947, 0.11295376226894893, 0.24621185205353036, 0.22132955085692962, 0.22545119010418835, 0.25528059436323713, 0.18417284026301417, 0.23077144698577823, 0.21670221812714663, 0.16888463127955178, 0.17485509753718265, 0.16362793457338232, 0.1810688613964404, 0.1818731513288323, 0.2057874800322086, 0.1789973340109149, 0.1294628446500079, 0.18694100886915044, 0.1551623285559175, 0.14432549824759677, 0.1653391514547724, 0.17588587031965164, 0.16842444529678524, 0.16618912356424187, 0.17589906085076967, 0.15930299633678446, 0.17795324396220746, 0.17183872429417024, 0.18833383018786398, 0.17054409052889918, 0.17285580607602347, 0.16356986968865062, 0.1739292380296651, 0.1567336583292257, 0.16442671815182708, 0.18001687762152652, 0.2421207173769241, 0.15890499934538616, 0.1443346047918136, 0.4401750796130014, 0.19158631982226626, 0.14180397461163607, 0.18116306202808463, 0.37932382295538625, 0.1546086040156457, 0.2775818252214005, 0.15847180961016838, 0.16149128702160864, 0.13473351296940728, 0.33932690306982227, 0.17308170900550035, 0.13429352509035775, 0.2696973912351923, 0.1757281211895506, 0.23555501902554432, 0.10113715962605785, 0.15101305438032886, 0.17100546392150828, 0.15855881549610784, 0.1766519105765748, 0.16154232542455316, 0.15841158464714622, 0.1581586817416183, 0.18255670599938945, 0.17160732185950933, 0.06424945610581378, 0.05199349590322422, 0.06936867448878059, 0.06511047778542722, 0.0671248976033374, 0.06351873600931446, 0.06242380454563734, 0.05193235571736199, 0.07247549145544652]}, "mutation_prompt": null}
{"id": "1640b936-8b4c-4a55-a3d1-7bbb1d112f85", "solution": "import numpy as np\n\nclass EnhancedDynamicEnsembleMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rates = np.random.uniform(0.1, 0.3, population_size)\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                mutation_rate = mutation_rates[i]\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                if np.random.rand() < mutation_rate:\n                    if np.random.rand() < 0.5:\n                        new_solution = harmony_memory[i] + mutation_factor * (new_solution - harmony_memory[i])\n                    else:\n                        new_solution = harmony_memory[i] - mutation_factor * (new_solution - harmony_memory[i])\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n                    mutation_rates[i] += 0.1 * (func(harmony_memory[i]) - func(new_solution))  # Adjust mutation rate based on local performance\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "EnhancedDynamicEnsembleMutationHarmonySearch", "description": "Enhancing convergence speed through adaptive mutation rate adjustment based on local search performance.", "configspace": "", "generation": 50, "fitness": 0.1628460093599538, "feedback": "The algorithm EnhancedDynamicEnsembleMutationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "d9474d06-c318-482a-9375-64a42d891148", "metadata": {"aucs": [0.3733377042256202, 0.3776075086789761, 0.3059246810178916, 0.345671093502543, 0.31285436255187726, 0.2812909769910146, 0.35925998871674236, 0.29271006614256523, 0.35248565943843824, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006377699189787922, 0.0024773295751898683, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08092335083503799, 0.05492097635057758, 0.07327307327566346, 0.05381938268773523, 0.07011370999923638, 0.05713880394339099, 0.07538860356510702, 0.10061497890591853, 0.08008055925437207, 0.048515129625914644, 0.0810869897314942, 0.05519350073216045, 0.0764785288847053, 0.06401333292303857, 0.05031945087153311, 0.059429614643191075, 0.08096793225589827, 0.08272424179188786, 0.950493600264985, 0.8548395811102514, 0.9258066712651019, 0.823615695253324, 0.7879059522829388, 0.8536289175819911, 0.8829161227678619, 0.8904556540930374, 0.9527007403582478, 0.11900812836602581, 0.15749455927934508, 0.13084885973770832, 0.12133756880432356, 0.15203690437300832, 0.15147026970830024, 0.1329969812894769, 0.10865701840002728, 0.1546207295635561, 0.19803763736767732, 0.1975762871735499, 0.16460630795613573, 0.28074321674181335, 0.15686707824948876, 0.22664351092568158, 0.2128303818259224, 0.14871516952665242, 0.26823661232127516, 0.08415625717017061, 0.07207338846779021, 0.056683163906192435, 0.10335461913143229, 0.09730476948538302, 0.08661932914783499, 0.11596896858308192, 0.0874098800268639, 0.1198197554786875, 0.11291566562132571, 0.11282173859348732, 0.10712901320678525, 0.0881880405591201, 0.12618685848041, 0.11024736273542024, 0.11076302266509575, 0.13630738828349076, 0.14870158516232623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061858080193854637, 0.04939613099244655, 0.05585911863195181, 0.04924613956538815, 0.021548848745151394, 0.006301777188649771, 0.06611853405346158, 0.06469736781901991, 0.06489107916905501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05819580515870093, 0.0699185716266435, 0.022433398715924313, 0.036921051826066975, 0.053443601834505916, 0.03710543005216427, 0.04555725268314459, 0.03529930576492446, 0.0055807346458590645, 0.326948862077182, 0.3516267588061872, 0.3437941933508376, 0.2917472450060359, 0.29023669429799903, 0.30955037767676763, 0.3474545572516792, 0.32155176309923905, 0.3180312464263223, 0.06296701923687598, 0.06011718245969899, 0.06924001979052241, 0.08984093269787208, 0.04104804290083941, 0.08556930910786209, 0.08432647678421745, 0.06722898946444911, 0.06995033907911707, 0.11577495694389894, 0.1585463643022651, 0.21599295347202274, 0.1271495747611432, 0.15440748627674217, 0.12352276682970675, 0.10259001219351593, 0.159726372977947, 0.11295376226894893, 0.24621185205353036, 0.22132955085692962, 0.22545119010418835, 0.25528059436323713, 0.18417284026301417, 0.23077144698577823, 0.21670221812714663, 0.16888463127955178, 0.17485509753718265, 0.16362793457338232, 0.1810688613964404, 0.1818731513288323, 0.2057874800322086, 0.1789973340109149, 0.1294628446500079, 0.18694100886915044, 0.1551623285559175, 0.14432549824759677, 0.1653391514547724, 0.17588587031965164, 0.16842444529678524, 0.16618912356424187, 0.17589906085076967, 0.15930299633678446, 0.17795324396220746, 0.17183872429417024, 0.18833383018786398, 0.17054409052889918, 0.17285580607602347, 0.16356986968865062, 0.1739292380296651, 0.1567336583292257, 0.16442671815182708, 0.18001687762152652, 0.2421207173769241, 0.15890499934538616, 0.1443346047918136, 0.4401750796130014, 0.19158631982226626, 0.14180397461163607, 0.18116306202808463, 0.37932382295538625, 0.1546086040156457, 0.2775818252214005, 0.15847180961016838, 0.16149128702160864, 0.13473351296940728, 0.33932690306982227, 0.17308170900550035, 0.13429352509035775, 0.2696973912351923, 0.1757281211895506, 0.23555501902554432, 0.10113715962605785, 0.15101305438032886, 0.17100546392150828, 0.15855881549610784, 0.1766519105765748, 0.16154232542455316, 0.15841158464714622, 0.1581586817416183, 0.18255670599938945, 0.17160732185950933, 0.06424945610581378, 0.05199349590322422, 0.06936867448878059, 0.06511047778542722, 0.0671248976033374, 0.06351873600931446, 0.06242380454563734, 0.05193235571736199, 0.07247549145544652]}, "mutation_prompt": null}
{"id": "07d42157-bc84-46a4-8041-7343e7b91540", "solution": "import numpy as np\n\nclass EnhancedDynamicEnsembleMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rates = np.full(population_size, 0.2)  # Initialize mutation rates uniformly\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                mutation_rate = mutation_rates[i]\n                mutation_factor = np.random.uniform(0.1, 0.3, self.dim)\n                if np.random.rand() < mutation_rate:\n                    if np.random.rand() < 0.5:\n                        new_solution = harmony_memory[i] + mutation_factor * (new_solution - harmony_memory[i])\n                    else:\n                        new_solution = harmony_memory[i] - mutation_factor * (new_solution - harmony_memory[i])\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n                    mutation_rates[i] *= 1.05  # Update mutation rate based on individual performance\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "EnhancedDynamicEnsembleMutationHarmonySearch", "description": "Enhancing convergence speed by introducing a novel adaptive mutation strategy based on individual performance feedback.", "configspace": "", "generation": 51, "fitness": 0.21421366522248111, "feedback": "The algorithm EnhancedDynamicEnsembleMutationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "d9474d06-c318-482a-9375-64a42d891148", "metadata": {"aucs": [0.6981936211216778, 0.6995711718240264, 0.7259258086166747, 0.5745340153254415, 0.4555952580700767, 0.595795433446261, 0.6349844263056645, 0.6276125354861778, 0.5380812736052133, 0.025446916137330078, 0.26692452485801776, 0.03272393859094669, 0.08730348788778808, 0.07141590897988104, 0.02860793101226866, 0.050358334780386205, 0.00224493284641214, 0.020836623634547302, 0.0753324663268351, 0.09077822238880195, 0.073780409478028, 0.08927726885203757, 0.11070589880930115, 0.09154948196937218, 0.09869791211127465, 0.07792408329123668, 0.09119912076653669, 0.06495624592937888, 0.08172070453650615, 0.05817796536575537, 0.0975857716912526, 0.0545908849063822, 0.057913930112459044, 0.07925849628155013, 0.06354278811501013, 0.054801497150427925, 0.9180501232407031, 0.8465024199144158, 0.9000166460804581, 0.8529854703706915, 0.9649728734983067, 0.9738002622968744, 0.8973052512728767, 0.687902011597993, 0.7500563525309725, 0.2204711361775188, 0.21583757972465023, 0.14234955678626937, 0.17203971908558757, 0.16356843382737496, 0.1734685447326807, 0.3423917818231178, 0.26017130453431614, 0.11065376969061469, 0.18739397668731994, 0.11276406069283473, 0.12501958929710144, 0.2751550809441149, 0.1504735237925886, 0.23441222615420498, 0.17195400148534135, 0.14292811537923167, 0.18997489730764472, 0.1539684709332365, 0.1523573098935298, 0.10453981696790493, 0.15526603835186592, 0.23545975010288434, 0.10248775334944893, 0.14686794398245706, 0.10762733629334764, 0.11784612722095111, 0.21107614567392696, 0.29040678486510374, 0.1352580894492088, 0.16450571441072204, 0.3213147071049547, 0.15214675600876326, 0.13619923682086832, 0.13595527251650696, 0.3412455157313464, 9.999999999998899e-05, 0.02072825060565009, 0.014714329701942863, 9.999999999998899e-05, 0.0020150847314198694, 0.07826652813132295, 0.02075075314887942, 9.999999999998899e-05, 0.0025235453619470993, 0.08818783440687772, 0.09589379534027609, 0.12479433433100207, 0.021312407217080498, 0.0018484784803642906, 0.035004135023024685, 0.06565086160495448, 0.04716529334727615, 0.09343483737932534, 0.09915010429617999, 0.04917656192516229, 0.016783817489155584, 0.093179387775434, 0.06707567063653808, 0.1811445504503748, 0.05819826516804938, 0.07121053084187823, 0.02877468641858172, 0.12516069713767342, 0.1317423268314657, 0.0861253297665795, 0.10968325735904505, 0.09178708243945644, 0.1189654803704212, 0.057792249804138884, 0.11833840209410829, 0.010864383162842217, 0.4583989110496064, 0.4527742681078757, 0.4106284957588373, 0.37750403070250993, 0.36703723897851914, 0.39205267788322595, 0.42320481576719793, 0.4839288112612067, 0.5039575492532138, 0.056046541909813286, 0.0673314762926075, 0.10121867083492253, 0.06938355838334576, 0.07916779959241671, 0.07844888140160333, 0.14738651848086481, 0.07683893185831348, 0.06905111611678749, 0.1737727978130864, 0.1348263741903516, 0.1988711075662437, 0.19807555849543024, 0.1263723082879531, 0.18644591986513936, 0.15463227929918688, 0.11765387025459584, 0.1853495516362096, 0.2477848778331614, 0.217083874514319, 0.28338334980560675, 0.25967089848785774, 0.22708687304107977, 0.2868533706997082, 0.17701043088614532, 0.18238564076414654, 0.16357604144065352, 0.18530618800895182, 0.19843148157843538, 0.17333259030706127, 0.17113930593850635, 0.18567144472106134, 0.1342843404073707, 0.12525102583932568, 0.1728830485915056, 0.18180551912038356, 0.22242939853794774, 0.18286892815887124, 0.1662210272703858, 0.17823342511061224, 0.18238402160232647, 0.17664283720919138, 0.21028931253363425, 0.18838279840793826, 0.17189259329292217, 0.16984036632215427, 0.1624052859455476, 0.18340386348737236, 0.17887039298099483, 0.4688005740212414, 0.20007893630305107, 0.18481318329181995, 0.1864365826297082, 0.18397357742692622, 0.18078449591554435, 0.1600703620870787, 0.30064127664952556, 0.8006829669211522, 0.7683248214099496, 0.6871398274745475, 0.15352711361515048, 0.11459848175936327, 0.7625370590278233, 0.4891653221506794, 0.12317236303946266, 0.30245593930287773, 0.23703525997445862, 0.17984591404393901, 0.1919813826639558, 0.6843522286089707, 0.22397059726444057, 0.14577485334556917, 0.17638180205450293, 0.17283253020804856, 0.21515713009003468, 0.19872318479399032, 0.1790657256223498, 0.16204282419519223, 0.1888230940262413, 0.17869058586070552, 0.16741885088245434, 0.07283421378442456, 0.08010525290168191, 0.08315916176507121, 0.1255478035037837, 0.07566817051303532, 0.07418183583363791, 0.0722017847444919, 0.07763173202558904, 0.07951825044500715]}, "mutation_prompt": null}
{"id": "4bf0341f-4f40-4267-ab97-12a0f2b5ed45", "solution": "import numpy as np\n\nclass DynamicEnsembleMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rates = np.random.uniform(0.1, 0.3, population_size)\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                mutation_rate = mutation_rates[i]\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                if np.random.rand() < mutation_rate:\n                    if np.random.rand() < 0.5:\n                        new_solution = harmony_memory[i] + mutation_factor * (new_solution - harmony_memory[i])\n                    else:\n                        new_solution = harmony_memory[i] - mutation_factor * (new_solution - harmony_memory[i])\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n                    mutation_rates[i] += 0.05  # Update mutation rate dynamically\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicEnsembleMutationHarmonySearch", "description": "Introducing dynamic ensemble mutation rates based on adaptive memory, enhancing population diversity and exploitation capabilities for faster convergence.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9474d06-c318-482a-9375-64a42d891148", "metadata": {"aucs": [0.7804760684014619, 0.7536998042372994, 0.7237744091971132, 0.6791375978352154, 0.680312624819958, 0.7299612888240048, 0.6403714147603243, 0.7530545181599902, 0.7162278955408798, 0.061946713795367536, 0.06310307819484695, 0.10824381137939254, 0.04123932385490847, 0.08516833794817957, 0.2649568141391445, 0.07698382422030758, 0.04565443947026049, 0.08726267753615446, 0.12088311371793747, 0.07239563302219809, 0.07992861294900999, 0.11450552518665535, 0.09273664199040454, 0.08684197341118471, 0.09430877384860759, 0.08674585868528539, 0.10465534796456122, 0.096381469078482, 0.09294298190622852, 0.0776037654692936, 0.06942133236125869, 0.04185309419378469, 0.06931605486853609, 0.07457197430463436, 0.09227429203846438, 0.05727989096385666, 0.9354978276295065, 0.9537816774422502, 0.9502951431515866, 0.8980208731408728, 0.8610785142517625, 0.8700627904504843, 0.9652170144063568, 0.890576824445275, 0.94203695938522, 0.23294958300562252, 0.31326847713704287, 0.43493233480356375, 0.27814628365848926, 0.3383861731805994, 0.3140816569530064, 0.34623381031619094, 0.20731546953906588, 0.2835652403118504, 0.3087281261436774, 0.20188817694742178, 0.16328223211996717, 0.2034639016890355, 0.2641121071050968, 0.24053723974216457, 0.18263687715403643, 0.22191811941456774, 0.2632609603373147, 0.11337536443276663, 0.135296647841186, 0.1224553856376609, 0.13629109523155425, 0.21927180271603153, 0.155266816250058, 0.1291071888403329, 0.12996674907440298, 0.12313380656864614, 0.1799038660604516, 0.3039854993477972, 0.15755972222779968, 0.15563741953681476, 0.12905817969245037, 0.14987917089531078, 0.29679808633783833, 0.1876105526291385, 0.1499823051708037, 0.01199551050549108, 0.056427017941625524, 0.030746580518355437, 0.014912317331162717, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031185571910080645, 0.012309890207904628, 9.999999999998899e-05, 0.053475507017594515, 0.09722162440376891, 0.11872523858420514, 0.07073962154138314, 0.004148695198783248, 0.042367570860863624, 0.04047887899318614, 0.021236457464276493, 0.031199231180389697, 0.04201144932079137, 0.01172881630200151, 0.14241982610773563, 0.09346483288596463, 0.03315746143869869, 0.0392764868463632, 0.15453548491182867, 0.06676173162168342, 0.12725758715857738, 0.17272989832140317, 0.10627480023330649, 0.11363847641098979, 0.051140244855986894, 0.22022597065426597, 0.04053115874913349, 0.23094642452190706, 0.06712252866344193, 0.05757621593463624, 0.4724341091428542, 0.4906211079900339, 0.4762682271727534, 0.4320884409803081, 0.4902025830085238, 0.3881009735678389, 0.5070836148559277, 0.5103329296096126, 0.4963624236669665, 0.06814772879314857, 0.06820431898117962, 0.047872572792310164, 0.0775597621585592, 0.1050822011017386, 0.08427116014209368, 0.05643863491829293, 0.09393861254153435, 0.10826328522721707, 0.20061170474890055, 0.22393139725907008, 0.19716931314140962, 0.17183844834285333, 0.2212541402420125, 0.121457755537831, 0.1727624702733045, 0.1727492160386459, 0.13864832742315625, 0.20662565352868822, 0.2647523238944124, 0.16240452653439696, 0.27186677822721006, 0.2543994528914826, 0.27152822356139017, 0.24527082254872723, 0.22136488675563082, 0.21833230181254015, 0.19749074925007715, 0.24347246770608078, 0.13149283270652212, 0.20471521982822372, 0.1771051135916485, 0.28678006528157174, 0.21434127041740558, 0.16992092576111972, 0.23228231146675593, 0.20115356517713967, 0.22305826913097537, 0.2258729751489167, 0.16946670017942667, 0.19209463798839366, 0.19640379394273366, 0.18783714910630234, 0.21759031896913128, 0.18218901061555004, 0.1799003775303296, 0.16717469191873136, 0.16556608946012386, 0.1930224533073407, 0.1739792752363314, 0.18044803981648205, 0.1662869066778827, 0.19618067804888006, 0.16531619312497348, 0.6632631087726273, 0.4970740735700405, 0.1824426542660751, 0.7643852405113196, 0.5523436150132127, 0.1967530542303747, 0.6914753130524931, 0.3963355297308153, 0.16330585113383456, 0.2362404250714608, 0.13789147989477823, 0.5524540730438579, 0.16800358251604908, 0.15881902316291419, 0.49249680387893335, 0.11664537384031515, 0.15883819856612458, 0.1550537287700141, 0.1633027175675288, 0.16076179193930096, 0.16541055133342475, 0.16792428289973327, 0.19135578492610927, 0.19243449712699479, 0.15630420576165072, 0.1576930118769656, 0.18244398873411904, 0.06556012727972571, 0.07758936096157298, 0.07056092887560372, 0.0944520487653897, 0.07813451536482297, 0.10043111571513641, 0.07358929912314982, 0.09521205940842303, 0.09112461525051363]}, "mutation_prompt": null}
{"id": "c41c84ea-0e57-4a21-8eb5-019735274974", "solution": "import numpy as np\n\nclass DynamicEnsembleMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rates = np.random.uniform(0.1, 0.3, population_size)\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                mutation_rate = mutation_rates[i]\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                if np.random.rand() < mutation_rate:\n                    if np.random.rand() < 0.5:\n                        new_solution = harmony_memory[i] + mutation_factor * (new_solution - harmony_memory[i])\n                    else:\n                        new_solution = harmony_memory[i] - mutation_factor * (new_solution - harmony_memory[i])\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n                    mutation_rates[i] += 0.05  # Update mutation rate dynamically\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicEnsembleMutationHarmonySearch", "description": "Introducing dynamic ensemble mutation rates based on adaptive memory, enhancing population diversity and exploitation capabilities for faster convergence.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9474d06-c318-482a-9375-64a42d891148", "metadata": {"aucs": [0.7804760684014619, 0.7536998042372994, 0.7237744091971132, 0.6791375978352154, 0.680312624819958, 0.7299612888240048, 0.6403714147603243, 0.7530545181599902, 0.7162278955408798, 0.061946713795367536, 0.06310307819484695, 0.10824381137939254, 0.04123932385490847, 0.08516833794817957, 0.2649568141391445, 0.07698382422030758, 0.04565443947026049, 0.08726267753615446, 0.12088311371793747, 0.07239563302219809, 0.07992861294900999, 0.11450552518665535, 0.09273664199040454, 0.08684197341118471, 0.09430877384860759, 0.08674585868528539, 0.10465534796456122, 0.096381469078482, 0.09294298190622852, 0.0776037654692936, 0.06942133236125869, 0.04185309419378469, 0.06931605486853609, 0.07457197430463436, 0.09227429203846438, 0.05727989096385666, 0.9354978276295065, 0.9537816774422502, 0.9502951431515866, 0.8980208731408728, 0.8610785142517625, 0.8700627904504843, 0.9652170144063568, 0.890576824445275, 0.94203695938522, 0.23294958300562252, 0.31326847713704287, 0.43493233480356375, 0.27814628365848926, 0.3383861731805994, 0.3140816569530064, 0.34623381031619094, 0.20731546953906588, 0.2835652403118504, 0.3087281261436774, 0.20188817694742178, 0.16328223211996717, 0.2034639016890355, 0.2641121071050968, 0.24053723974216457, 0.18263687715403643, 0.22191811941456774, 0.2632609603373147, 0.11337536443276663, 0.135296647841186, 0.1224553856376609, 0.13629109523155425, 0.21927180271603153, 0.155266816250058, 0.1291071888403329, 0.12996674907440298, 0.12313380656864614, 0.1799038660604516, 0.3039854993477972, 0.15755972222779968, 0.15563741953681476, 0.12905817969245037, 0.14987917089531078, 0.29679808633783833, 0.1876105526291385, 0.1499823051708037, 0.01199551050549108, 0.056427017941625524, 0.030746580518355437, 0.014912317331162717, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031185571910080645, 0.012309890207904628, 9.999999999998899e-05, 0.053475507017594515, 0.09722162440376891, 0.11872523858420514, 0.07073962154138314, 0.004148695198783248, 0.042367570860863624, 0.04047887899318614, 0.021236457464276493, 0.031199231180389697, 0.04201144932079137, 0.01172881630200151, 0.14241982610773563, 0.09346483288596463, 0.03315746143869869, 0.0392764868463632, 0.15453548491182867, 0.06676173162168342, 0.12725758715857738, 0.17272989832140317, 0.10627480023330649, 0.11363847641098979, 0.051140244855986894, 0.22022597065426597, 0.04053115874913349, 0.23094642452190706, 0.06712252866344193, 0.05757621593463624, 0.4724341091428542, 0.4906211079900339, 0.4762682271727534, 0.4320884409803081, 0.4902025830085238, 0.3881009735678389, 0.5070836148559277, 0.5103329296096126, 0.4963624236669665, 0.06814772879314857, 0.06820431898117962, 0.047872572792310164, 0.0775597621585592, 0.1050822011017386, 0.08427116014209368, 0.05643863491829293, 0.09393861254153435, 0.10826328522721707, 0.20061170474890055, 0.22393139725907008, 0.19716931314140962, 0.17183844834285333, 0.2212541402420125, 0.121457755537831, 0.1727624702733045, 0.1727492160386459, 0.13864832742315625, 0.20662565352868822, 0.2647523238944124, 0.16240452653439696, 0.27186677822721006, 0.2543994528914826, 0.27152822356139017, 0.24527082254872723, 0.22136488675563082, 0.21833230181254015, 0.19749074925007715, 0.24347246770608078, 0.13149283270652212, 0.20471521982822372, 0.1771051135916485, 0.28678006528157174, 0.21434127041740558, 0.16992092576111972, 0.23228231146675593, 0.20115356517713967, 0.22305826913097537, 0.2258729751489167, 0.16946670017942667, 0.19209463798839366, 0.19640379394273366, 0.18783714910630234, 0.21759031896913128, 0.18218901061555004, 0.1799003775303296, 0.16717469191873136, 0.16556608946012386, 0.1930224533073407, 0.1739792752363314, 0.18044803981648205, 0.1662869066778827, 0.19618067804888006, 0.16531619312497348, 0.6632631087726273, 0.4970740735700405, 0.1824426542660751, 0.7643852405113196, 0.5523436150132127, 0.1967530542303747, 0.6914753130524931, 0.3963355297308153, 0.16330585113383456, 0.2362404250714608, 0.13789147989477823, 0.5524540730438579, 0.16800358251604908, 0.15881902316291419, 0.49249680387893335, 0.11664537384031515, 0.15883819856612458, 0.1550537287700141, 0.1633027175675288, 0.16076179193930096, 0.16541055133342475, 0.16792428289973327, 0.19135578492610927, 0.19243449712699479, 0.15630420576165072, 0.1576930118769656, 0.18244398873411904, 0.06556012727972571, 0.07758936096157298, 0.07056092887560372, 0.0944520487653897, 0.07813451536482297, 0.10043111571513641, 0.07358929912314982, 0.09521205940842303, 0.09112461525051363]}, "mutation_prompt": null}
{"id": "9f04314f-4f9f-4515-acd3-600f4c364c27", "solution": "import numpy as np\n\nclass EnhancedDynamicEnsembleMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rates = np.random.uniform(0.1, 0.3, population_size)\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                mutation_rate = mutation_rates[i]\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                if np.random.rand() < mutation_rate:\n                    if np.random.rand() < 0.5:\n                        new_solution = harmony_memory[i] + mutation_factor * (new_solution - harmony_memory[i])\n                    else:\n                        new_solution = harmony_memory[i] - mutation_factor * (new_solution - harmony_memory[i])\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n                    mutation_rates[i] += 0.05 * (1 - func(new_solution)/func(harmony_memory[i]))  # Dynamic adaptation of mutation rate based on solution quality\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "EnhancedDynamicEnsembleMutationHarmonySearch", "description": "Enhancing convergence speed by incorporating a dynamic adaptation mechanism for mutation rates based on individual solution quality.", "configspace": "", "generation": 54, "fitness": 0.1628460093599538, "feedback": "The algorithm EnhancedDynamicEnsembleMutationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "d9474d06-c318-482a-9375-64a42d891148", "metadata": {"aucs": [0.3733377042256202, 0.3776075086789761, 0.3059246810178916, 0.345671093502543, 0.31285436255187726, 0.2812909769910146, 0.35925998871674236, 0.29271006614256523, 0.35248565943843824, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006377699189787922, 0.0024773295751898683, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08092335083503799, 0.05492097635057758, 0.07327307327566346, 0.05381938268773523, 0.07011370999923638, 0.05713880394339099, 0.07538860356510702, 0.10061497890591853, 0.08008055925437207, 0.048515129625914644, 0.0810869897314942, 0.05519350073216045, 0.0764785288847053, 0.06401333292303857, 0.05031945087153311, 0.059429614643191075, 0.08096793225589827, 0.08272424179188786, 0.950493600264985, 0.8548395811102514, 0.9258066712651019, 0.823615695253324, 0.7879059522829388, 0.8536289175819911, 0.8829161227678619, 0.8904556540930374, 0.9527007403582478, 0.11900812836602581, 0.15749455927934508, 0.13084885973770832, 0.12133756880432356, 0.15203690437300832, 0.15147026970830024, 0.1329969812894769, 0.10865701840002728, 0.1546207295635561, 0.19803763736767732, 0.1975762871735499, 0.16460630795613573, 0.28074321674181335, 0.15686707824948876, 0.22664351092568158, 0.2128303818259224, 0.14871516952665242, 0.26823661232127516, 0.08415625717017061, 0.07207338846779021, 0.056683163906192435, 0.10335461913143229, 0.09730476948538302, 0.08661932914783499, 0.11596896858308192, 0.0874098800268639, 0.1198197554786875, 0.11291566562132571, 0.11282173859348732, 0.10712901320678525, 0.0881880405591201, 0.12618685848041, 0.11024736273542024, 0.11076302266509575, 0.13630738828349076, 0.14870158516232623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061858080193854637, 0.04939613099244655, 0.05585911863195181, 0.04924613956538815, 0.021548848745151394, 0.006301777188649771, 0.06611853405346158, 0.06469736781901991, 0.06489107916905501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05819580515870093, 0.0699185716266435, 0.022433398715924313, 0.036921051826066975, 0.053443601834505916, 0.03710543005216427, 0.04555725268314459, 0.03529930576492446, 0.0055807346458590645, 0.326948862077182, 0.3516267588061872, 0.3437941933508376, 0.2917472450060359, 0.29023669429799903, 0.30955037767676763, 0.3474545572516792, 0.32155176309923905, 0.3180312464263223, 0.06296701923687598, 0.06011718245969899, 0.06924001979052241, 0.08984093269787208, 0.04104804290083941, 0.08556930910786209, 0.08432647678421745, 0.06722898946444911, 0.06995033907911707, 0.11577495694389894, 0.1585463643022651, 0.21599295347202274, 0.1271495747611432, 0.15440748627674217, 0.12352276682970675, 0.10259001219351593, 0.159726372977947, 0.11295376226894893, 0.24621185205353036, 0.22132955085692962, 0.22545119010418835, 0.25528059436323713, 0.18417284026301417, 0.23077144698577823, 0.21670221812714663, 0.16888463127955178, 0.17485509753718265, 0.16362793457338232, 0.1810688613964404, 0.1818731513288323, 0.2057874800322086, 0.1789973340109149, 0.1294628446500079, 0.18694100886915044, 0.1551623285559175, 0.14432549824759677, 0.1653391514547724, 0.17588587031965164, 0.16842444529678524, 0.16618912356424187, 0.17589906085076967, 0.15930299633678446, 0.17795324396220746, 0.17183872429417024, 0.18833383018786398, 0.17054409052889918, 0.17285580607602347, 0.16356986968865062, 0.1739292380296651, 0.1567336583292257, 0.16442671815182708, 0.18001687762152652, 0.2421207173769241, 0.15890499934538616, 0.1443346047918136, 0.4401750796130014, 0.19158631982226626, 0.14180397461163607, 0.18116306202808463, 0.37932382295538625, 0.1546086040156457, 0.2775818252214005, 0.15847180961016838, 0.16149128702160864, 0.13473351296940728, 0.33932690306982227, 0.17308170900550035, 0.13429352509035775, 0.2696973912351923, 0.1757281211895506, 0.23555501902554432, 0.10113715962605785, 0.15101305438032886, 0.17100546392150828, 0.15855881549610784, 0.1766519105765748, 0.16154232542455316, 0.15841158464714622, 0.1581586817416183, 0.18255670599938945, 0.17160732185950933, 0.06424945610581378, 0.05199349590322422, 0.06936867448878059, 0.06511047778542722, 0.0671248976033374, 0.06351873600931446, 0.06242380454563734, 0.05193235571736199, 0.07247549145544652]}, "mutation_prompt": null}
{"id": "ac576b09-4feb-4e6e-b7c7-83a3b7a8745c", "solution": "import numpy as np\n\nclass SelfAdaptiveMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_factors = np.full((population_size, self.dim), 0.2)\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                mutation_factor = mutation_factors[i]\n                new_mutation_factor = np.clip(mutation_factor + np.random.normal(0, 0.1, self.dim), 0.1, 0.5)\n                mutation_factors[i] = new_mutation_factor\n\n                if np.random.rand() < 0.5:\n                    new_solution = harmony_memory[i] + mutation_factor * (new_solution - harmony_memory[i])\n                else:\n                    new_solution = harmony_memory[i] - mutation_factor * (new_solution - harmony_memory[i])\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "SelfAdaptiveMutationHarmonySearch", "description": "Implementing a self-adaptive mutation mechanism to dynamically adjust mutation factors based on the function landscape to enhance exploration-exploitation balance and accelerate convergence.", "configspace": "", "generation": 55, "fitness": 0.20806408765564968, "feedback": "The algorithm SelfAdaptiveMutationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "d9474d06-c318-482a-9375-64a42d891148", "metadata": {"aucs": [0.7408374215903382, 0.7449837276809195, 0.743831845738196, 0.6276672874445507, 0.5483777002716803, 0.6726768704847017, 0.633455304037231, 0.65659312210308, 0.7008565540084621, 0.05757742991462822, 0.07329142728193272, 0.03786218908894445, 0.07498720377736068, 0.3114464478637472, 0.17952352004687777, 0.08496377627045315, 0.0996116595247658, 0.09865316264786272, 0.07787934435449528, 0.07442462221648749, 0.04576204739471301, 0.07646064172571354, 0.09037466134531746, 0.06971155423494524, 0.06597421490921185, 0.059482219629962696, 0.08300130810751383, 0.07555510667897702, 0.07051450737572618, 0.07138256671846699, 0.068025360892489, 0.05499792972012196, 0.059517431906896845, 0.05735369021635939, 0.07049934926720747, 0.05235367250239109, 0.9298080667797067, 0.9572259769027421, 0.9408186323975127, 0.9350782084477072, 0.9409754325798138, 0.8555720560935709, 0.9259333105795027, 0.9595520922406382, 0.862502950354296, 0.29863284298416626, 0.2603737822713813, 0.21200831989005298, 0.3416969812652739, 0.35398402850666655, 0.27670486653149795, 0.24214452735647596, 0.2383854503218713, 0.3048075065772663, 0.1945591923066865, 0.18578968681761932, 0.20380117198165204, 0.3247535868865967, 0.14578823479575242, 0.1607579886715924, 0.2208188258952266, 0.1982994110516597, 0.21973985089704795, 0.2541900042407177, 0.1341939988143389, 0.15725483075209745, 0.14996494784911707, 0.12684505161413295, 0.13223103920087165, 0.10836343690467443, 0.15314282842086213, 0.15561980945878462, 0.11972857685622096, 0.27729753950868685, 0.12566071010699909, 0.14882393784226655, 0.18916231358566216, 0.12498701661459077, 0.1682469035996481, 0.12175138081004311, 0.14439577108706703, 0.0006499302433916609, 0.0014565811194739986, 9.999999999998899e-05, 0.06534207513188428, 0.0005914578552670413, 0.011329712903731193, 0.0006495675573383597, 0.034473072902524104, 0.05726379304130935, 0.05609288946646007, 0.08425926176595622, 0.08028881975561475, 0.046509924589326346, 0.08277194911037478, 0.17381744077356265, 0.08712812625046573, 0.05857778590905305, 0.0836210205606458, 9.999999999998899e-05, 0.04915910781088062, 0.053272799075224975, 0.04198887440334387, 0.07933199837901062, 0.024210140538482472, 0.0939698448877736, 0.13241503534633248, 0.07962132035212366, 0.05462883786313577, 0.19666410017402824, 0.11559024281228025, 0.1879901991264693, 0.09001923978586479, 0.17179556485693903, 0.10694043723320812, 0.09767628518495841, 0.0856504172690522, 0.4579370987619762, 0.4345466364005748, 0.4399294191877011, 0.42757447718264896, 0.4227664637435099, 0.4244801707896032, 0.42233367503665, 0.42039103106638775, 0.4236068551076212, 0.05603983250627076, 0.05245167619241897, 0.07168995268187428, 0.06171450475860962, 0.0710598496756425, 0.0707381151516091, 0.053483401981980205, 0.09382241036310479, 0.07701779025990929, 0.1316423224493568, 0.14996708425225092, 0.17038814000569524, 0.13059265437827927, 0.1302946720994319, 0.1201560948905126, 0.12378918296995922, 0.13470213728585312, 0.18294226753267617, 0.2042748749040756, 0.25154709286758803, 0.17321606242853615, 0.19007240056497143, 0.2616677782993575, 0.2252493552528172, 0.17467367354729813, 0.1885445447740881, 0.1877733043977894, 0.1568758281379432, 0.20804734761992538, 0.13412557365180544, 0.2180835591594743, 0.17677940902651756, 0.15106738700876998, 0.1678466661451532, 0.20161214347096124, 0.15577584157764834, 0.1901789262824919, 0.1922182986530553, 0.19826666379647973, 0.2064589041956113, 0.19638829675265201, 0.1864552440768733, 0.18789092065471824, 0.18631910726937118, 0.19453804166272815, 0.17228636975915546, 0.17702218792281055, 0.1767735026711733, 0.1686779541172473, 0.18349364267789925, 0.16918788588460776, 0.17878718404690375, 0.1829414093126246, 0.1811537297523067, 0.16317005657800143, 0.1672705659905318, 0.23208019275137393, 0.2830599576894546, 0.16989053593774261, 0.16250859734746848, 0.15372404899779635, 0.3284826744463032, 0.1627731401008976, 0.37458926377321067, 0.1357404221555677, 0.4243340727457309, 0.11716035540181946, 0.18673207515143475, 0.17528276987601565, 0.2578018060574009, 0.15577127043646088, 0.13844632045392113, 0.19813252346525223, 0.16506988204932171, 0.18481309005845237, 0.16246339101436513, 0.17252695512348004, 0.16900905032139146, 0.1746191113784913, 0.18054253443639678, 0.18592434795085178, 0.07546413198154844, 0.06754675991699444, 0.07111840026115934, 0.06949529726205306, 0.060657379412785484, 0.08176250869662671, 0.06975630502069652, 0.07993429971731458, 0.09307199896750296]}, "mutation_prompt": null}
{"id": "abd3f21a-035f-4fc4-aa41-9c36d568bf07", "solution": "import numpy as np\n\nclass DynamicEnsembleMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rates = np.random.uniform(0.1, 0.3, population_size)\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                mutation_rate = mutation_rates[i]\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                if np.random.rand() < mutation_rate:\n                    if np.random.rand() < 0.5:\n                        new_solution = harmony_memory[i] + mutation_factor * (new_solution - harmony_memory[i])\n                    else:\n                        new_solution = harmony_memory[i] - mutation_factor * (new_solution - harmony_memory[i])\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n                    mutation_rates[i] += 0.05  # Update mutation rate dynamically\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicEnsembleMutationHarmonySearch", "description": "Introducing dynamic ensemble mutation rates based on adaptive memory, enhancing population diversity and exploitation capabilities for faster convergence.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9474d06-c318-482a-9375-64a42d891148", "metadata": {"aucs": [0.7804760684014619, 0.7536998042372994, 0.7237744091971132, 0.6791375978352154, 0.680312624819958, 0.7299612888240048, 0.6403714147603243, 0.7530545181599902, 0.7162278955408798, 0.061946713795367536, 0.06310307819484695, 0.10824381137939254, 0.04123932385490847, 0.08516833794817957, 0.2649568141391445, 0.07698382422030758, 0.04565443947026049, 0.08726267753615446, 0.12088311371793747, 0.07239563302219809, 0.07992861294900999, 0.11450552518665535, 0.09273664199040454, 0.08684197341118471, 0.09430877384860759, 0.08674585868528539, 0.10465534796456122, 0.096381469078482, 0.09294298190622852, 0.0776037654692936, 0.06942133236125869, 0.04185309419378469, 0.06931605486853609, 0.07457197430463436, 0.09227429203846438, 0.05727989096385666, 0.9354978276295065, 0.9537816774422502, 0.9502951431515866, 0.8980208731408728, 0.8610785142517625, 0.8700627904504843, 0.9652170144063568, 0.890576824445275, 0.94203695938522, 0.23294958300562252, 0.31326847713704287, 0.43493233480356375, 0.27814628365848926, 0.3383861731805994, 0.3140816569530064, 0.34623381031619094, 0.20731546953906588, 0.2835652403118504, 0.3087281261436774, 0.20188817694742178, 0.16328223211996717, 0.2034639016890355, 0.2641121071050968, 0.24053723974216457, 0.18263687715403643, 0.22191811941456774, 0.2632609603373147, 0.11337536443276663, 0.135296647841186, 0.1224553856376609, 0.13629109523155425, 0.21927180271603153, 0.155266816250058, 0.1291071888403329, 0.12996674907440298, 0.12313380656864614, 0.1799038660604516, 0.3039854993477972, 0.15755972222779968, 0.15563741953681476, 0.12905817969245037, 0.14987917089531078, 0.29679808633783833, 0.1876105526291385, 0.1499823051708037, 0.01199551050549108, 0.056427017941625524, 0.030746580518355437, 0.014912317331162717, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031185571910080645, 0.012309890207904628, 9.999999999998899e-05, 0.053475507017594515, 0.09722162440376891, 0.11872523858420514, 0.07073962154138314, 0.004148695198783248, 0.042367570860863624, 0.04047887899318614, 0.021236457464276493, 0.031199231180389697, 0.04201144932079137, 0.01172881630200151, 0.14241982610773563, 0.09346483288596463, 0.03315746143869869, 0.0392764868463632, 0.15453548491182867, 0.06676173162168342, 0.12725758715857738, 0.17272989832140317, 0.10627480023330649, 0.11363847641098979, 0.051140244855986894, 0.22022597065426597, 0.04053115874913349, 0.23094642452190706, 0.06712252866344193, 0.05757621593463624, 0.4724341091428542, 0.4906211079900339, 0.4762682271727534, 0.4320884409803081, 0.4902025830085238, 0.3881009735678389, 0.5070836148559277, 0.5103329296096126, 0.4963624236669665, 0.06814772879314857, 0.06820431898117962, 0.047872572792310164, 0.0775597621585592, 0.1050822011017386, 0.08427116014209368, 0.05643863491829293, 0.09393861254153435, 0.10826328522721707, 0.20061170474890055, 0.22393139725907008, 0.19716931314140962, 0.17183844834285333, 0.2212541402420125, 0.121457755537831, 0.1727624702733045, 0.1727492160386459, 0.13864832742315625, 0.20662565352868822, 0.2647523238944124, 0.16240452653439696, 0.27186677822721006, 0.2543994528914826, 0.27152822356139017, 0.24527082254872723, 0.22136488675563082, 0.21833230181254015, 0.19749074925007715, 0.24347246770608078, 0.13149283270652212, 0.20471521982822372, 0.1771051135916485, 0.28678006528157174, 0.21434127041740558, 0.16992092576111972, 0.23228231146675593, 0.20115356517713967, 0.22305826913097537, 0.2258729751489167, 0.16946670017942667, 0.19209463798839366, 0.19640379394273366, 0.18783714910630234, 0.21759031896913128, 0.18218901061555004, 0.1799003775303296, 0.16717469191873136, 0.16556608946012386, 0.1930224533073407, 0.1739792752363314, 0.18044803981648205, 0.1662869066778827, 0.19618067804888006, 0.16531619312497348, 0.6632631087726273, 0.4970740735700405, 0.1824426542660751, 0.7643852405113196, 0.5523436150132127, 0.1967530542303747, 0.6914753130524931, 0.3963355297308153, 0.16330585113383456, 0.2362404250714608, 0.13789147989477823, 0.5524540730438579, 0.16800358251604908, 0.15881902316291419, 0.49249680387893335, 0.11664537384031515, 0.15883819856612458, 0.1550537287700141, 0.1633027175675288, 0.16076179193930096, 0.16541055133342475, 0.16792428289973327, 0.19135578492610927, 0.19243449712699479, 0.15630420576165072, 0.1576930118769656, 0.18244398873411904, 0.06556012727972571, 0.07758936096157298, 0.07056092887560372, 0.0944520487653897, 0.07813451536482297, 0.10043111571513641, 0.07358929912314982, 0.09521205940842303, 0.09112461525051363]}, "mutation_prompt": null}
{"id": "ff668bfa-f614-41a4-94b3-a7917649b80b", "solution": "import numpy as np\n\nclass AdaptiveMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        mutation_rates = np.full(population_size, 0.2)\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                mutation_rate = mutation_rates[i]\n                mutation_factor = np.random.uniform(0.1, 0.5, self.dim)\n                if np.random.rand() < mutation_rate:\n                    if np.random.rand() < 0.5:\n                        new_solution = harmony_memory[i] + mutation_factor * (new_solution - harmony_memory[i])\n                    else:\n                        new_solution = harmony_memory[i] - mutation_factor * (new_solution - harmony_memory[i])\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n                    mutation_rates[i] *= 1.05  # Adjust mutation rate dynamically\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "AdaptiveMutationHarmonySearch", "description": "Employing a self-adaptive mechanism to adjust mutation rates individually for each solution, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 57, "fitness": 0.22028584452123823, "feedback": "The algorithm AdaptiveMutationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "d9474d06-c318-482a-9375-64a42d891148", "metadata": {"aucs": [0.6185762168672244, 0.599408208834912, 0.5734669219718629, 0.6360153979634167, 0.6020920449639933, 0.6074193572529055, 0.6724156691195404, 0.5518612154590985, 0.5829076436497251, 0.12276158358476408, 0.10808858543544697, 0.0856933438930022, 0.04923846313279323, 0.06965648217188458, 0.05147144509563584, 0.02675271404251689, 0.011388652088729967, 0.004087594693716001, 0.09859959606094748, 0.0898618853630182, 0.0998313043532878, 0.08906020321752317, 0.08759104685180186, 0.07868118879707986, 0.11022595687596803, 0.06352598043549829, 0.08221456703682739, 0.0676085812575884, 0.05813289798940657, 0.059351058851131344, 0.07580153306883874, 0.1197497806585609, 0.11738418058371602, 0.06808777600968408, 0.04120004244685427, 0.08347399974210856, 0.8628070737769155, 0.8737937252875031, 0.9474173247804591, 0.8983591764698188, 0.9778175847728858, 0.9811748132446944, 0.8905586918151057, 0.8254843091419415, 0.910092972685806, 0.3053570084491949, 0.2934102166113449, 0.2997672065914171, 0.2905860402439149, 0.28654070176533, 0.3128176351518893, 0.28756732619360514, 0.2751584620370626, 0.31882080202717966, 0.20626356161546044, 0.15633674297268407, 0.35759889797928524, 0.23213357354283082, 0.18992418928520038, 0.22028373703515314, 0.16272659312710935, 0.23337312397944, 0.2317057094307352, 0.11777865880410976, 0.1555366056129085, 0.11222922687306236, 0.21791523604611607, 0.14145120949160628, 0.18150928377175168, 0.1821511941847097, 0.11885901956356015, 0.1594428907652169, 0.1528862746626688, 0.15704976124143522, 0.1037806813536376, 0.18316647861208468, 0.1470688233488774, 0.11408411788392003, 0.16141921086768585, 0.19829865293861548, 0.15690940720486013, 0.0004188483971884205, 9.999999999998899e-05, 0.053901600634811975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006168906871940605, 9.999999999998899e-05, 9.999999999998899e-05, 0.10464441586616924, 0.05938719129836023, 0.041469459009981224, 0.030091906471758745, 0.036895352526051806, 0.038412007398596515, 0.08485277359912435, 0.022573426295471877, 0.07061196214743337, 0.06173002407181938, 0.0079462697162338, 0.08257708780909889, 0.044409911668157664, 0.020288386219104226, 0.06681175109882564, 0.09095430510975289, 0.06832276713461727, 9.999999999998899e-05, 0.14249259280379667, 0.1584781921649222, 0.09867373989180628, 0.12821626079972703, 0.12842391276954546, 0.1281591569049877, 0.17490936928195655, 0.1537655443870577, 0.07726438082008136, 0.502112805005408, 0.46227713560044814, 0.43759971836558664, 0.4697529799035487, 0.4447261607917006, 0.38451250909520074, 0.4781010373300987, 0.49180379006102437, 0.4508399228275176, 0.09607692553159741, 0.09184874975307988, 0.04304442152118826, 0.07620457202282682, 0.07555661233644695, 0.06739702225510025, 0.06239538045455084, 0.11199976587601301, 0.06784256816892043, 0.14890656974025718, 0.13197978964569157, 0.17017607537943003, 0.2291602601672692, 0.12205700815163822, 0.17223751373470297, 0.13725204100105626, 0.15724320913750467, 0.18359386546825995, 0.24003392364122733, 0.2539553893667308, 0.24664808755201206, 0.22801674733092825, 0.2849282186336852, 0.2887278066948168, 0.18178719337117477, 0.24018404171493757, 0.26332351123890896, 0.20697731336173641, 0.17051439301678784, 0.185196223469429, 0.23906943407351, 0.16953062364371851, 0.15703863424901954, 0.15138577968342615, 0.16110677735898948, 0.1950265561690231, 0.17858817893858814, 0.18031701912467835, 0.1491013447582069, 0.1834917507747469, 0.19712358352577752, 0.2127145729064146, 0.18842623328228436, 0.17189192741900539, 0.17350503125414163, 0.1770097649264062, 0.19595458716343706, 0.1757982642131839, 0.18320187097746454, 0.2106681267109699, 0.17996684893706205, 0.18043640646232073, 0.18977514218466063, 0.1866928806941932, 0.1826011707134484, 0.1675281682551356, 0.6810892991735341, 0.5624932173408133, 0.7240026924375816, 0.6598668892590293, 0.1492277563145037, 0.12583784276998955, 0.7805024402221746, 0.1899578582192426, 0.22724510920752217, 0.42263424279050865, 0.16136755683499926, 0.3496681767780947, 0.28580535509682503, 0.6169267419557818, 0.2670569921431688, 0.14172122666243936, 0.16833546429178892, 0.1914341500401432, 0.19726112074890256, 0.15303421659887628, 0.16294704532089022, 0.16085636969951667, 0.16350306611238485, 0.18066694103270498, 0.15990191359366146, 0.07941541367183946, 0.08287836884814315, 0.0649510288335785, 0.09371637643335284, 0.07153755762795411, 0.06605891787056717, 0.07725214714235806, 0.07245649784030772, 0.06409394651058287]}, "mutation_prompt": null}
{"id": "6f90a02d-692b-43f2-bfef-d5f0bfa185cd", "solution": "import numpy as np\n\nclass VelocityGuidedMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "VelocityGuidedMutationHarmonySearch", "description": "Utilizing a velocity-based update mechanism to guide solutions towards better regions with adaptive inertia weight, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 58, "fitness": 0.24200800335070055, "feedback": "The algorithm VelocityGuidedMutationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "d9474d06-c318-482a-9375-64a42d891148", "metadata": {"aucs": [0.6596061862320802, 0.6188535611010447, 0.6758742545408416, 0.5811382615206288, 0.6725089536267164, 0.5186723352516265, 0.6510557406676765, 0.6340141108501558, 0.57920587951858, 9.999999999998899e-05, 0.025025959693784405, 0.023764283043518852, 0.007597962673680514, 0.06609243528172015, 0.03418779473698319, 0.016923313522592798, 0.09751809215607898, 0.011933508438752183, 0.1214869120045522, 0.1236692263354322, 0.07724183062123136, 0.13427341302506357, 0.10124390174160747, 0.11722003477433174, 0.08366897044393429, 0.1033331828516546, 0.08792760522620358, 0.136973197441298, 0.05862002109644504, 0.11699967845683534, 0.07212725384113106, 0.1078131816617075, 0.08446065759603849, 0.09160611686836106, 0.07597079345816926, 0.10931038742399701, 0.9887600544639169, 0.9812864538078605, 0.9787384659802926, 0.9726692179215528, 0.9485357104540636, 0.9785319247813818, 0.09927857897268166, 0.9662437525855879, 0.09949049133032462, 0.3559423355364413, 0.33645639078959655, 0.369067563678409, 0.39335091219130613, 0.3236560611338024, 0.3315432839345481, 0.35692565483000127, 0.3946321018402684, 0.35188126288307586, 0.33505950430065545, 0.20032012778728225, 0.7872621075829174, 0.8638716353508714, 0.2736778886147656, 0.1846438673068762, 0.22667117380663515, 0.16175399120290312, 0.7146541096919121, 0.2027583753470944, 0.12180226522639748, 0.17252163038216328, 0.19305518150075562, 0.17212550591262465, 0.18856193263946086, 0.16704401857986828, 0.18626401346514299, 0.19929650413828626, 0.18391188535437442, 0.13491062156355638, 0.1776506101867793, 0.19410987531185442, 0.18754536716109982, 0.1351018203274159, 0.19970227784920802, 0.1255896881304316, 0.206643867722327, 0.14217262258034935, 0.05805611547910572, 0.1114995853640861, 0.05251328191659688, 0.05705852887017249, 0.13930087541066805, 0.06532753687626369, 0.00419001628225435, 0.1381063941315286, 0.11012647825708044, 0.1860788192962315, 0.1920746557001135, 0.12106893253300566, 0.12213608878449012, 0.10305112636908254, 0.16993143553144696, 0.14112875635084088, 0.15488036820891538, 0.14037798272666968, 0.11879546390315476, 0.14804908096690983, 0.1016441578401227, 0.1326576843767785, 0.13525913486667118, 0.12216318424116035, 0.10004302918790231, 0.07180922116302912, 0.0707071509610756, 0.05165404165291898, 0.15716008680869364, 0.14019744489915698, 0.18389819057898982, 0.13310269539127217, 0.10465932582715354, 0.13293959656667897, 0.1057713664359975, 0.48368486754543627, 0.5198704664661333, 0.4851431455694969, 0.4323306405360908, 0.43576873346256184, 0.49962574250092184, 0.4347098266232442, 0.4514905803921889, 0.5139903295083822, 0.08845691083703189, 0.10175704354581938, 0.0699609567234053, 0.08104314989554928, 0.11424767241855804, 0.09547993297377111, 0.10421595575232112, 0.12411593692579503, 0.09123355570501057, 0.1484824066727164, 0.1261793585696669, 0.22153512695006428, 0.2464734951886124, 0.160896821926243, 0.1479220465993587, 0.1424668555736951, 0.171834683855575, 0.17219596952388094, 0.3529412499398108, 0.2611897668488298, 0.3056500608523318, 0.31973872078292975, 0.23356498878973675, 0.3021009091693565, 0.31722789730058487, 0.3767596630681084, 0.2261706720662865, 0.20655239669397452, 0.26426022593572895, 0.20995604899763753, 0.27797843847893045, 0.17448071760154849, 0.20406011755046805, 0.1839610012432562, 0.19115555877063195, 0.16837171843088705, 0.19632841898787645, 0.1797941941901865, 0.21553281736817798, 0.19414595618959107, 0.23184171407400556, 0.23974787789638663, 0.23230737816526859, 0.1973045060931351, 0.19292699240963074, 0.18646595486563378, 0.21263631620242873, 0.22313097341250465, 0.17886224440588916, 0.1820522196568547, 0.19613374555646623, 0.20322579679857578, 0.1872294297165148, 0.1814478611936976, 0.1777019904052105, 0.16193453047290585, 0.19045174221325534, 0.7981527677780527, 0.5329234342698903, 0.1642770360794581, 0.1609657528429036, 0.1387087069137437, 0.17316511583629768, 0.282833042504543, 0.6031068924510637, 0.8207113244954131, 0.42297822468814406, 0.19521303605208729, 0.16630746332624546, 0.5351778626985653, 0.12342891703580094, 0.38307941248330246, 0.1810365624633079, 0.16930872480974668, 0.1867706221566896, 0.1720325367171669, 0.17775048641759728, 0.19460801594277022, 0.17123719694624429, 0.1777574674785416, 0.1944139471056593, 0.0863925446709658, 0.08505583133621497, 0.08197013205306847, 0.07392571558409777, 0.07863620226382695, 0.0845092835340916, 0.08850090751794326, 0.07758844449789426, 0.06766057014341986]}, "mutation_prompt": null}
{"id": "aa878422-1666-4620-90a6-21958cc3d750", "solution": "import numpy as np\n\nclass VelocityGuidedMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "VelocityGuidedMutationHarmonySearch", "description": "Utilizing a velocity-based update mechanism to guide solutions towards better regions with adaptive inertia weight, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f90a02d-692b-43f2-bfef-d5f0bfa185cd", "metadata": {"aucs": [0.6596061862320802, 0.6188535611010447, 0.6758742545408416, 0.5811382615206288, 0.6725089536267164, 0.5186723352516265, 0.6510557406676765, 0.6340141108501558, 0.57920587951858, 9.999999999998899e-05, 0.025025959693784405, 0.023764283043518852, 0.007597962673680514, 0.06609243528172015, 0.03418779473698319, 0.016923313522592798, 0.09751809215607898, 0.011933508438752183, 0.1214869120045522, 0.1236692263354322, 0.07724183062123136, 0.13427341302506357, 0.10124390174160747, 0.11722003477433174, 0.08366897044393429, 0.1033331828516546, 0.08792760522620358, 0.136973197441298, 0.05862002109644504, 0.11699967845683534, 0.07212725384113106, 0.1078131816617075, 0.08446065759603849, 0.09160611686836106, 0.07597079345816926, 0.10931038742399701, 0.9887600544639169, 0.9812864538078605, 0.9787384659802926, 0.9726692179215528, 0.9485357104540636, 0.9785319247813818, 0.09927857897268166, 0.9662437525855879, 0.09949049133032462, 0.3559423355364413, 0.33645639078959655, 0.369067563678409, 0.39335091219130613, 0.3236560611338024, 0.3315432839345481, 0.35692565483000127, 0.3946321018402684, 0.35188126288307586, 0.33505950430065545, 0.20032012778728225, 0.7872621075829174, 0.8638716353508714, 0.2736778886147656, 0.1846438673068762, 0.22667117380663515, 0.16175399120290312, 0.7146541096919121, 0.2027583753470944, 0.12180226522639748, 0.17252163038216328, 0.19305518150075562, 0.17212550591262465, 0.18856193263946086, 0.16704401857986828, 0.18626401346514299, 0.19929650413828626, 0.18391188535437442, 0.13491062156355638, 0.1776506101867793, 0.19410987531185442, 0.18754536716109982, 0.1351018203274159, 0.19970227784920802, 0.1255896881304316, 0.206643867722327, 0.14217262258034935, 0.05805611547910572, 0.1114995853640861, 0.05251328191659688, 0.05705852887017249, 0.13930087541066805, 0.06532753687626369, 0.00419001628225435, 0.1381063941315286, 0.11012647825708044, 0.1860788192962315, 0.1920746557001135, 0.12106893253300566, 0.12213608878449012, 0.10305112636908254, 0.16993143553144696, 0.14112875635084088, 0.15488036820891538, 0.14037798272666968, 0.11879546390315476, 0.14804908096690983, 0.1016441578401227, 0.1326576843767785, 0.13525913486667118, 0.12216318424116035, 0.10004302918790231, 0.07180922116302912, 0.0707071509610756, 0.05165404165291898, 0.15716008680869364, 0.14019744489915698, 0.18389819057898982, 0.13310269539127217, 0.10465932582715354, 0.13293959656667897, 0.1057713664359975, 0.48368486754543627, 0.5198704664661333, 0.4851431455694969, 0.4323306405360908, 0.43576873346256184, 0.49962574250092184, 0.4347098266232442, 0.4514905803921889, 0.5139903295083822, 0.08845691083703189, 0.10175704354581938, 0.0699609567234053, 0.08104314989554928, 0.11424767241855804, 0.09547993297377111, 0.10421595575232112, 0.12411593692579503, 0.09123355570501057, 0.1484824066727164, 0.1261793585696669, 0.22153512695006428, 0.2464734951886124, 0.160896821926243, 0.1479220465993587, 0.1424668555736951, 0.171834683855575, 0.17219596952388094, 0.3529412499398108, 0.2611897668488298, 0.3056500608523318, 0.31973872078292975, 0.23356498878973675, 0.3021009091693565, 0.31722789730058487, 0.3767596630681084, 0.2261706720662865, 0.20655239669397452, 0.26426022593572895, 0.20995604899763753, 0.27797843847893045, 0.17448071760154849, 0.20406011755046805, 0.1839610012432562, 0.19115555877063195, 0.16837171843088705, 0.19632841898787645, 0.1797941941901865, 0.21553281736817798, 0.19414595618959107, 0.23184171407400556, 0.23974787789638663, 0.23230737816526859, 0.1973045060931351, 0.19292699240963074, 0.18646595486563378, 0.21263631620242873, 0.22313097341250465, 0.17886224440588916, 0.1820522196568547, 0.19613374555646623, 0.20322579679857578, 0.1872294297165148, 0.1814478611936976, 0.1777019904052105, 0.16193453047290585, 0.19045174221325534, 0.7981527677780527, 0.5329234342698903, 0.1642770360794581, 0.1609657528429036, 0.1387087069137437, 0.17316511583629768, 0.282833042504543, 0.6031068924510637, 0.8207113244954131, 0.42297822468814406, 0.19521303605208729, 0.16630746332624546, 0.5351778626985653, 0.12342891703580094, 0.38307941248330246, 0.1810365624633079, 0.16930872480974668, 0.1867706221566896, 0.1720325367171669, 0.17775048641759728, 0.19460801594277022, 0.17123719694624429, 0.1777574674785416, 0.1944139471056593, 0.0863925446709658, 0.08505583133621497, 0.08197013205306847, 0.07392571558409777, 0.07863620226382695, 0.0845092835340916, 0.08850090751794326, 0.07758844449789426, 0.06766057014341986]}, "mutation_prompt": null}
{"id": "50453c2e-3411-4216-9911-b355789bbb12", "solution": "import numpy as np\n\nclass ChaoticVelocityGuidedMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                chaotic_component = 0.5 * np.tan(0.5 * np.pi * np.random.uniform(-1, 1, self.dim))  # Introducing chaotic dynamics\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component + chaotic_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "ChaoticVelocityGuidedMutationHarmonySearch", "description": "Enhancing the exploration by introducing chaotic dynamics to update solutions in a more diverse manner, thereby accelerating convergence speed.", "configspace": "", "generation": 60, "fitness": 0.15302564487369932, "feedback": "The algorithm ChaoticVelocityGuidedMutationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "6f90a02d-692b-43f2-bfef-d5f0bfa185cd", "metadata": {"aucs": [0.2623203536120472, 0.2606165405146803, 0.2680294436558599, 0.23778142565701832, 0.28859587607710724, 0.2745153997701748, 0.2719707047545099, 0.28914002623833523, 0.24853681309088327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07853082056769167, 0.09256277673614399, 0.06798732631465987, 0.05975274549148102, 0.07387996971662303, 0.07108330493166881, 0.06403811684644678, 0.07757483325399239, 0.06879042011855585, 0.05919703942704457, 0.06318898773599957, 0.0444375102227863, 0.06040220221517634, 0.04766312026028641, 0.047297618067538294, 0.06667209471293367, 0.05750070535144025, 0.05132098948509811, 0.9833445306663117, 0.9783216832474212, 0.9852270252232022, 0.9902309678016703, 0.9625255561856416, 0.9732780363243736, 0.9817976718873579, 0.9723720167570858, 0.9737293466033619, 0.11472120920134998, 0.1259566087714986, 0.13546714924199277, 0.11747275843682692, 0.12778718866117655, 0.13067659552684185, 0.1296493945141578, 0.13945209859129815, 0.1296839519238362, 0.18143969871038268, 0.17281784490257035, 0.15588107966703701, 0.20151327394940854, 0.20423613384161354, 0.18075203148058194, 0.15760560133611923, 0.18145653634673886, 0.19309616938533913, 0.06537885931223031, 0.06530512495610241, 0.07468063211557652, 0.09621596360293883, 0.057953917936464316, 0.053465148313568855, 0.07770794412814608, 0.08501700022346614, 0.06571483422059032, 0.04418708674673655, 0.04997471354574501, 0.06288227795418466, 0.06761895017630648, 0.05559756830009388, 0.07634733862483245, 0.05712383515530417, 0.033104526898835474, 0.06732290107247685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04665657741131457, 0.0356846870407761, 0.045658319257527724, 0.02103462071572626, 0.07162753374012532, 0.006739933805843257, 0.04083392010451048, 0.04748494908360157, 0.051196358935064246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007202581596361557, 0.024206370039476344, 0.022052349592092235, 0.015248702376175594, 0.023963364791913078, 0.017092554448118413, 0.02071504763443699, 0.029202090352462573, 0.021880136812977624, 0.2703697240117876, 0.25369570571157607, 0.26832886352207874, 0.2550083059471926, 0.26558622877375204, 0.28249257570921427, 0.24752125877876163, 0.2766179166205409, 0.2633749863843641, 0.07231290611405183, 0.07927709695709695, 0.06455971654403292, 0.08498495142484208, 0.07967696051463513, 0.07941410738283217, 0.07097646934776736, 0.08195722131689676, 0.06479230562218197, 0.1324129971785123, 0.12306235968356172, 0.14160036773032347, 0.15408456890874045, 0.1799714467612612, 0.12999490836311411, 0.13539996265615295, 0.1329535104564291, 0.14699734383868146, 0.1922551668809428, 0.22259179219786995, 0.20153321058507723, 0.19899193412786054, 0.1955687198150292, 0.19440029095432643, 0.2010784664572376, 0.20109268827373972, 0.20601577043679176, 0.13452591631693867, 0.1505057757319641, 0.12312395476242277, 0.15246483314886516, 0.14184231981699358, 0.1309433729192082, 0.1294358611826525, 0.1431931633134632, 0.14483903997762537, 0.17835869904944524, 0.1717612024689522, 0.16100079430867464, 0.17627622238049756, 0.1637617153403389, 0.17764863896070726, 0.1950983449308954, 0.18203916617857518, 0.1856316335986794, 0.1582348797863239, 0.17441459846273633, 0.15998111844842444, 0.161211773527008, 0.16102170872844057, 0.16164524511175082, 0.17689828311387268, 0.15496516772938485, 0.15448931286544432, 0.26641045784190887, 0.1653686436649754, 0.3431642811513391, 0.26180244010154907, 0.16447719801650906, 0.16322755841475978, 0.21659708073279216, 0.18460179888620376, 0.16945464008686772, 0.15920668301480423, 0.16546626813653798, 0.1679645713643122, 0.1729900715803664, 0.16027243852857154, 0.20493824375725023, 0.13984914661152614, 0.1971349887215924, 0.2029624277320603, 0.17012091533692764, 0.1811210581354329, 0.19432985404584135, 0.18782579227737295, 0.1813202596464839, 0.17624310115321984, 0.17323441268330775, 0.20569008772246478, 0.17491785805614768, 0.06953398202325223, 0.07442066639109124, 0.06811560571372466, 0.053039208153247475, 0.0646071447265929, 0.06311820973691629, 0.07312068373755387, 0.06544049950317199, 0.07452742214934516]}, "mutation_prompt": null}
{"id": "804ec8b8-a62f-4e0e-8650-233719cf25d4", "solution": "import numpy as np\n\nclass VelocityGuidedMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "VelocityGuidedMutationHarmonySearch", "description": "Utilizing a velocity-based update mechanism to guide solutions towards better regions with adaptive inertia weight, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f90a02d-692b-43f2-bfef-d5f0bfa185cd", "metadata": {"aucs": [0.6596061862320802, 0.6188535611010447, 0.6758742545408416, 0.5811382615206288, 0.6725089536267164, 0.5186723352516265, 0.6510557406676765, 0.6340141108501558, 0.57920587951858, 9.999999999998899e-05, 0.025025959693784405, 0.023764283043518852, 0.007597962673680514, 0.06609243528172015, 0.03418779473698319, 0.016923313522592798, 0.09751809215607898, 0.011933508438752183, 0.1214869120045522, 0.1236692263354322, 0.07724183062123136, 0.13427341302506357, 0.10124390174160747, 0.11722003477433174, 0.08366897044393429, 0.1033331828516546, 0.08792760522620358, 0.136973197441298, 0.05862002109644504, 0.11699967845683534, 0.07212725384113106, 0.1078131816617075, 0.08446065759603849, 0.09160611686836106, 0.07597079345816926, 0.10931038742399701, 0.9887600544639169, 0.9812864538078605, 0.9787384659802926, 0.9726692179215528, 0.9485357104540636, 0.9785319247813818, 0.09927857897268166, 0.9662437525855879, 0.09949049133032462, 0.3559423355364413, 0.33645639078959655, 0.369067563678409, 0.39335091219130613, 0.3236560611338024, 0.3315432839345481, 0.35692565483000127, 0.3946321018402684, 0.35188126288307586, 0.33505950430065545, 0.20032012778728225, 0.7872621075829174, 0.8638716353508714, 0.2736778886147656, 0.1846438673068762, 0.22667117380663515, 0.16175399120290312, 0.7146541096919121, 0.2027583753470944, 0.12180226522639748, 0.17252163038216328, 0.19305518150075562, 0.17212550591262465, 0.18856193263946086, 0.16704401857986828, 0.18626401346514299, 0.19929650413828626, 0.18391188535437442, 0.13491062156355638, 0.1776506101867793, 0.19410987531185442, 0.18754536716109982, 0.1351018203274159, 0.19970227784920802, 0.1255896881304316, 0.206643867722327, 0.14217262258034935, 0.05805611547910572, 0.1114995853640861, 0.05251328191659688, 0.05705852887017249, 0.13930087541066805, 0.06532753687626369, 0.00419001628225435, 0.1381063941315286, 0.11012647825708044, 0.1860788192962315, 0.1920746557001135, 0.12106893253300566, 0.12213608878449012, 0.10305112636908254, 0.16993143553144696, 0.14112875635084088, 0.15488036820891538, 0.14037798272666968, 0.11879546390315476, 0.14804908096690983, 0.1016441578401227, 0.1326576843767785, 0.13525913486667118, 0.12216318424116035, 0.10004302918790231, 0.07180922116302912, 0.0707071509610756, 0.05165404165291898, 0.15716008680869364, 0.14019744489915698, 0.18389819057898982, 0.13310269539127217, 0.10465932582715354, 0.13293959656667897, 0.1057713664359975, 0.48368486754543627, 0.5198704664661333, 0.4851431455694969, 0.4323306405360908, 0.43576873346256184, 0.49962574250092184, 0.4347098266232442, 0.4514905803921889, 0.5139903295083822, 0.08845691083703189, 0.10175704354581938, 0.0699609567234053, 0.08104314989554928, 0.11424767241855804, 0.09547993297377111, 0.10421595575232112, 0.12411593692579503, 0.09123355570501057, 0.1484824066727164, 0.1261793585696669, 0.22153512695006428, 0.2464734951886124, 0.160896821926243, 0.1479220465993587, 0.1424668555736951, 0.171834683855575, 0.17219596952388094, 0.3529412499398108, 0.2611897668488298, 0.3056500608523318, 0.31973872078292975, 0.23356498878973675, 0.3021009091693565, 0.31722789730058487, 0.3767596630681084, 0.2261706720662865, 0.20655239669397452, 0.26426022593572895, 0.20995604899763753, 0.27797843847893045, 0.17448071760154849, 0.20406011755046805, 0.1839610012432562, 0.19115555877063195, 0.16837171843088705, 0.19632841898787645, 0.1797941941901865, 0.21553281736817798, 0.19414595618959107, 0.23184171407400556, 0.23974787789638663, 0.23230737816526859, 0.1973045060931351, 0.19292699240963074, 0.18646595486563378, 0.21263631620242873, 0.22313097341250465, 0.17886224440588916, 0.1820522196568547, 0.19613374555646623, 0.20322579679857578, 0.1872294297165148, 0.1814478611936976, 0.1777019904052105, 0.16193453047290585, 0.19045174221325534, 0.7981527677780527, 0.5329234342698903, 0.1642770360794581, 0.1609657528429036, 0.1387087069137437, 0.17316511583629768, 0.282833042504543, 0.6031068924510637, 0.8207113244954131, 0.42297822468814406, 0.19521303605208729, 0.16630746332624546, 0.5351778626985653, 0.12342891703580094, 0.38307941248330246, 0.1810365624633079, 0.16930872480974668, 0.1867706221566896, 0.1720325367171669, 0.17775048641759728, 0.19460801594277022, 0.17123719694624429, 0.1777574674785416, 0.1944139471056593, 0.0863925446709658, 0.08505583133621497, 0.08197013205306847, 0.07392571558409777, 0.07863620226382695, 0.0845092835340916, 0.08850090751794326, 0.07758844449789426, 0.06766057014341986]}, "mutation_prompt": null}
{"id": "e1dc87c0-2eb6-4428-a52b-f569bf53c912", "solution": "import numpy as np\n\nclass VelocityGuidedMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "VelocityGuidedMutationHarmonySearch", "description": "Utilizing a velocity-based update mechanism to guide solutions towards better regions with adaptive inertia weight, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f90a02d-692b-43f2-bfef-d5f0bfa185cd", "metadata": {"aucs": [0.6596061862320802, 0.6188535611010447, 0.6758742545408416, 0.5811382615206288, 0.6725089536267164, 0.5186723352516265, 0.6510557406676765, 0.6340141108501558, 0.57920587951858, 9.999999999998899e-05, 0.025025959693784405, 0.023764283043518852, 0.007597962673680514, 0.06609243528172015, 0.03418779473698319, 0.016923313522592798, 0.09751809215607898, 0.011933508438752183, 0.1214869120045522, 0.1236692263354322, 0.07724183062123136, 0.13427341302506357, 0.10124390174160747, 0.11722003477433174, 0.08366897044393429, 0.1033331828516546, 0.08792760522620358, 0.136973197441298, 0.05862002109644504, 0.11699967845683534, 0.07212725384113106, 0.1078131816617075, 0.08446065759603849, 0.09160611686836106, 0.07597079345816926, 0.10931038742399701, 0.9887600544639169, 0.9812864538078605, 0.9787384659802926, 0.9726692179215528, 0.9485357104540636, 0.9785319247813818, 0.09927857897268166, 0.9662437525855879, 0.09949049133032462, 0.3559423355364413, 0.33645639078959655, 0.369067563678409, 0.39335091219130613, 0.3236560611338024, 0.3315432839345481, 0.35692565483000127, 0.3946321018402684, 0.35188126288307586, 0.33505950430065545, 0.20032012778728225, 0.7872621075829174, 0.8638716353508714, 0.2736778886147656, 0.1846438673068762, 0.22667117380663515, 0.16175399120290312, 0.7146541096919121, 0.2027583753470944, 0.12180226522639748, 0.17252163038216328, 0.19305518150075562, 0.17212550591262465, 0.18856193263946086, 0.16704401857986828, 0.18626401346514299, 0.19929650413828626, 0.18391188535437442, 0.13491062156355638, 0.1776506101867793, 0.19410987531185442, 0.18754536716109982, 0.1351018203274159, 0.19970227784920802, 0.1255896881304316, 0.206643867722327, 0.14217262258034935, 0.05805611547910572, 0.1114995853640861, 0.05251328191659688, 0.05705852887017249, 0.13930087541066805, 0.06532753687626369, 0.00419001628225435, 0.1381063941315286, 0.11012647825708044, 0.1860788192962315, 0.1920746557001135, 0.12106893253300566, 0.12213608878449012, 0.10305112636908254, 0.16993143553144696, 0.14112875635084088, 0.15488036820891538, 0.14037798272666968, 0.11879546390315476, 0.14804908096690983, 0.1016441578401227, 0.1326576843767785, 0.13525913486667118, 0.12216318424116035, 0.10004302918790231, 0.07180922116302912, 0.0707071509610756, 0.05165404165291898, 0.15716008680869364, 0.14019744489915698, 0.18389819057898982, 0.13310269539127217, 0.10465932582715354, 0.13293959656667897, 0.1057713664359975, 0.48368486754543627, 0.5198704664661333, 0.4851431455694969, 0.4323306405360908, 0.43576873346256184, 0.49962574250092184, 0.4347098266232442, 0.4514905803921889, 0.5139903295083822, 0.08845691083703189, 0.10175704354581938, 0.0699609567234053, 0.08104314989554928, 0.11424767241855804, 0.09547993297377111, 0.10421595575232112, 0.12411593692579503, 0.09123355570501057, 0.1484824066727164, 0.1261793585696669, 0.22153512695006428, 0.2464734951886124, 0.160896821926243, 0.1479220465993587, 0.1424668555736951, 0.171834683855575, 0.17219596952388094, 0.3529412499398108, 0.2611897668488298, 0.3056500608523318, 0.31973872078292975, 0.23356498878973675, 0.3021009091693565, 0.31722789730058487, 0.3767596630681084, 0.2261706720662865, 0.20655239669397452, 0.26426022593572895, 0.20995604899763753, 0.27797843847893045, 0.17448071760154849, 0.20406011755046805, 0.1839610012432562, 0.19115555877063195, 0.16837171843088705, 0.19632841898787645, 0.1797941941901865, 0.21553281736817798, 0.19414595618959107, 0.23184171407400556, 0.23974787789638663, 0.23230737816526859, 0.1973045060931351, 0.19292699240963074, 0.18646595486563378, 0.21263631620242873, 0.22313097341250465, 0.17886224440588916, 0.1820522196568547, 0.19613374555646623, 0.20322579679857578, 0.1872294297165148, 0.1814478611936976, 0.1777019904052105, 0.16193453047290585, 0.19045174221325534, 0.7981527677780527, 0.5329234342698903, 0.1642770360794581, 0.1609657528429036, 0.1387087069137437, 0.17316511583629768, 0.282833042504543, 0.6031068924510637, 0.8207113244954131, 0.42297822468814406, 0.19521303605208729, 0.16630746332624546, 0.5351778626985653, 0.12342891703580094, 0.38307941248330246, 0.1810365624633079, 0.16930872480974668, 0.1867706221566896, 0.1720325367171669, 0.17775048641759728, 0.19460801594277022, 0.17123719694624429, 0.1777574674785416, 0.1944139471056593, 0.0863925446709658, 0.08505583133621497, 0.08197013205306847, 0.07392571558409777, 0.07863620226382695, 0.0845092835340916, 0.08850090751794326, 0.07758844449789426, 0.06766057014341986]}, "mutation_prompt": null}
{"id": "233c1345-5388-4a74-9fe5-f2c643352b14", "solution": "import numpy as np\n\nclass VelocityGuidedMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "VelocityGuidedMutationHarmonySearch", "description": "Utilizing a velocity-based update mechanism to guide solutions towards better regions with adaptive inertia weight, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f90a02d-692b-43f2-bfef-d5f0bfa185cd", "metadata": {"aucs": [0.6596061862320802, 0.6188535611010447, 0.6758742545408416, 0.5811382615206288, 0.6725089536267164, 0.5186723352516265, 0.6510557406676765, 0.6340141108501558, 0.57920587951858, 9.999999999998899e-05, 0.025025959693784405, 0.023764283043518852, 0.007597962673680514, 0.06609243528172015, 0.03418779473698319, 0.016923313522592798, 0.09751809215607898, 0.011933508438752183, 0.1214869120045522, 0.1236692263354322, 0.07724183062123136, 0.13427341302506357, 0.10124390174160747, 0.11722003477433174, 0.08366897044393429, 0.1033331828516546, 0.08792760522620358, 0.136973197441298, 0.05862002109644504, 0.11699967845683534, 0.07212725384113106, 0.1078131816617075, 0.08446065759603849, 0.09160611686836106, 0.07597079345816926, 0.10931038742399701, 0.9887600544639169, 0.9812864538078605, 0.9787384659802926, 0.9726692179215528, 0.9485357104540636, 0.9785319247813818, 0.09927857897268166, 0.9662437525855879, 0.09949049133032462, 0.3559423355364413, 0.33645639078959655, 0.369067563678409, 0.39335091219130613, 0.3236560611338024, 0.3315432839345481, 0.35692565483000127, 0.3946321018402684, 0.35188126288307586, 0.33505950430065545, 0.20032012778728225, 0.7872621075829174, 0.8638716353508714, 0.2736778886147656, 0.1846438673068762, 0.22667117380663515, 0.16175399120290312, 0.7146541096919121, 0.2027583753470944, 0.12180226522639748, 0.17252163038216328, 0.19305518150075562, 0.17212550591262465, 0.18856193263946086, 0.16704401857986828, 0.18626401346514299, 0.19929650413828626, 0.18391188535437442, 0.13491062156355638, 0.1776506101867793, 0.19410987531185442, 0.18754536716109982, 0.1351018203274159, 0.19970227784920802, 0.1255896881304316, 0.206643867722327, 0.14217262258034935, 0.05805611547910572, 0.1114995853640861, 0.05251328191659688, 0.05705852887017249, 0.13930087541066805, 0.06532753687626369, 0.00419001628225435, 0.1381063941315286, 0.11012647825708044, 0.1860788192962315, 0.1920746557001135, 0.12106893253300566, 0.12213608878449012, 0.10305112636908254, 0.16993143553144696, 0.14112875635084088, 0.15488036820891538, 0.14037798272666968, 0.11879546390315476, 0.14804908096690983, 0.1016441578401227, 0.1326576843767785, 0.13525913486667118, 0.12216318424116035, 0.10004302918790231, 0.07180922116302912, 0.0707071509610756, 0.05165404165291898, 0.15716008680869364, 0.14019744489915698, 0.18389819057898982, 0.13310269539127217, 0.10465932582715354, 0.13293959656667897, 0.1057713664359975, 0.48368486754543627, 0.5198704664661333, 0.4851431455694969, 0.4323306405360908, 0.43576873346256184, 0.49962574250092184, 0.4347098266232442, 0.4514905803921889, 0.5139903295083822, 0.08845691083703189, 0.10175704354581938, 0.0699609567234053, 0.08104314989554928, 0.11424767241855804, 0.09547993297377111, 0.10421595575232112, 0.12411593692579503, 0.09123355570501057, 0.1484824066727164, 0.1261793585696669, 0.22153512695006428, 0.2464734951886124, 0.160896821926243, 0.1479220465993587, 0.1424668555736951, 0.171834683855575, 0.17219596952388094, 0.3529412499398108, 0.2611897668488298, 0.3056500608523318, 0.31973872078292975, 0.23356498878973675, 0.3021009091693565, 0.31722789730058487, 0.3767596630681084, 0.2261706720662865, 0.20655239669397452, 0.26426022593572895, 0.20995604899763753, 0.27797843847893045, 0.17448071760154849, 0.20406011755046805, 0.1839610012432562, 0.19115555877063195, 0.16837171843088705, 0.19632841898787645, 0.1797941941901865, 0.21553281736817798, 0.19414595618959107, 0.23184171407400556, 0.23974787789638663, 0.23230737816526859, 0.1973045060931351, 0.19292699240963074, 0.18646595486563378, 0.21263631620242873, 0.22313097341250465, 0.17886224440588916, 0.1820522196568547, 0.19613374555646623, 0.20322579679857578, 0.1872294297165148, 0.1814478611936976, 0.1777019904052105, 0.16193453047290585, 0.19045174221325534, 0.7981527677780527, 0.5329234342698903, 0.1642770360794581, 0.1609657528429036, 0.1387087069137437, 0.17316511583629768, 0.282833042504543, 0.6031068924510637, 0.8207113244954131, 0.42297822468814406, 0.19521303605208729, 0.16630746332624546, 0.5351778626985653, 0.12342891703580094, 0.38307941248330246, 0.1810365624633079, 0.16930872480974668, 0.1867706221566896, 0.1720325367171669, 0.17775048641759728, 0.19460801594277022, 0.17123719694624429, 0.1777574674785416, 0.1944139471056593, 0.0863925446709658, 0.08505583133621497, 0.08197013205306847, 0.07392571558409777, 0.07863620226382695, 0.0845092835340916, 0.08850090751794326, 0.07758844449789426, 0.06766057014341986]}, "mutation_prompt": null}
{"id": "c3783051-bb90-4861-8465-fe662af7de59", "solution": "import numpy as np\n\nclass VelocityGuidedMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "VelocityGuidedMutationHarmonySearch", "description": "Utilizing a velocity-based update mechanism to guide solutions towards better regions with adaptive inertia weight, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f90a02d-692b-43f2-bfef-d5f0bfa185cd", "metadata": {"aucs": [0.6596061862320802, 0.6188535611010447, 0.6758742545408416, 0.5811382615206288, 0.6725089536267164, 0.5186723352516265, 0.6510557406676765, 0.6340141108501558, 0.57920587951858, 9.999999999998899e-05, 0.025025959693784405, 0.023764283043518852, 0.007597962673680514, 0.06609243528172015, 0.03418779473698319, 0.016923313522592798, 0.09751809215607898, 0.011933508438752183, 0.1214869120045522, 0.1236692263354322, 0.07724183062123136, 0.13427341302506357, 0.10124390174160747, 0.11722003477433174, 0.08366897044393429, 0.1033331828516546, 0.08792760522620358, 0.136973197441298, 0.05862002109644504, 0.11699967845683534, 0.07212725384113106, 0.1078131816617075, 0.08446065759603849, 0.09160611686836106, 0.07597079345816926, 0.10931038742399701, 0.9887600544639169, 0.9812864538078605, 0.9787384659802926, 0.9726692179215528, 0.9485357104540636, 0.9785319247813818, 0.09927857897268166, 0.9662437525855879, 0.09949049133032462, 0.3559423355364413, 0.33645639078959655, 0.369067563678409, 0.39335091219130613, 0.3236560611338024, 0.3315432839345481, 0.35692565483000127, 0.3946321018402684, 0.35188126288307586, 0.33505950430065545, 0.20032012778728225, 0.7872621075829174, 0.8638716353508714, 0.2736778886147656, 0.1846438673068762, 0.22667117380663515, 0.16175399120290312, 0.7146541096919121, 0.2027583753470944, 0.12180226522639748, 0.17252163038216328, 0.19305518150075562, 0.17212550591262465, 0.18856193263946086, 0.16704401857986828, 0.18626401346514299, 0.19929650413828626, 0.18391188535437442, 0.13491062156355638, 0.1776506101867793, 0.19410987531185442, 0.18754536716109982, 0.1351018203274159, 0.19970227784920802, 0.1255896881304316, 0.206643867722327, 0.14217262258034935, 0.05805611547910572, 0.1114995853640861, 0.05251328191659688, 0.05705852887017249, 0.13930087541066805, 0.06532753687626369, 0.00419001628225435, 0.1381063941315286, 0.11012647825708044, 0.1860788192962315, 0.1920746557001135, 0.12106893253300566, 0.12213608878449012, 0.10305112636908254, 0.16993143553144696, 0.14112875635084088, 0.15488036820891538, 0.14037798272666968, 0.11879546390315476, 0.14804908096690983, 0.1016441578401227, 0.1326576843767785, 0.13525913486667118, 0.12216318424116035, 0.10004302918790231, 0.07180922116302912, 0.0707071509610756, 0.05165404165291898, 0.15716008680869364, 0.14019744489915698, 0.18389819057898982, 0.13310269539127217, 0.10465932582715354, 0.13293959656667897, 0.1057713664359975, 0.48368486754543627, 0.5198704664661333, 0.4851431455694969, 0.4323306405360908, 0.43576873346256184, 0.49962574250092184, 0.4347098266232442, 0.4514905803921889, 0.5139903295083822, 0.08845691083703189, 0.10175704354581938, 0.0699609567234053, 0.08104314989554928, 0.11424767241855804, 0.09547993297377111, 0.10421595575232112, 0.12411593692579503, 0.09123355570501057, 0.1484824066727164, 0.1261793585696669, 0.22153512695006428, 0.2464734951886124, 0.160896821926243, 0.1479220465993587, 0.1424668555736951, 0.171834683855575, 0.17219596952388094, 0.3529412499398108, 0.2611897668488298, 0.3056500608523318, 0.31973872078292975, 0.23356498878973675, 0.3021009091693565, 0.31722789730058487, 0.3767596630681084, 0.2261706720662865, 0.20655239669397452, 0.26426022593572895, 0.20995604899763753, 0.27797843847893045, 0.17448071760154849, 0.20406011755046805, 0.1839610012432562, 0.19115555877063195, 0.16837171843088705, 0.19632841898787645, 0.1797941941901865, 0.21553281736817798, 0.19414595618959107, 0.23184171407400556, 0.23974787789638663, 0.23230737816526859, 0.1973045060931351, 0.19292699240963074, 0.18646595486563378, 0.21263631620242873, 0.22313097341250465, 0.17886224440588916, 0.1820522196568547, 0.19613374555646623, 0.20322579679857578, 0.1872294297165148, 0.1814478611936976, 0.1777019904052105, 0.16193453047290585, 0.19045174221325534, 0.7981527677780527, 0.5329234342698903, 0.1642770360794581, 0.1609657528429036, 0.1387087069137437, 0.17316511583629768, 0.282833042504543, 0.6031068924510637, 0.8207113244954131, 0.42297822468814406, 0.19521303605208729, 0.16630746332624546, 0.5351778626985653, 0.12342891703580094, 0.38307941248330246, 0.1810365624633079, 0.16930872480974668, 0.1867706221566896, 0.1720325367171669, 0.17775048641759728, 0.19460801594277022, 0.17123719694624429, 0.1777574674785416, 0.1944139471056593, 0.0863925446709658, 0.08505583133621497, 0.08197013205306847, 0.07392571558409777, 0.07863620226382695, 0.0845092835340916, 0.08850090751794326, 0.07758844449789426, 0.06766057014341986]}, "mutation_prompt": null}
{"id": "84dcbb81-1197-457f-84ef-011846bf632c", "solution": "import numpy as np\n\nclass VelocityGuidedMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "VelocityGuidedMutationHarmonySearch", "description": "Utilizing a velocity-based update mechanism to guide solutions towards better regions with adaptive inertia weight, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f90a02d-692b-43f2-bfef-d5f0bfa185cd", "metadata": {"aucs": [0.6596061862320802, 0.6188535611010447, 0.6758742545408416, 0.5811382615206288, 0.6725089536267164, 0.5186723352516265, 0.6510557406676765, 0.6340141108501558, 0.57920587951858, 9.999999999998899e-05, 0.025025959693784405, 0.023764283043518852, 0.007597962673680514, 0.06609243528172015, 0.03418779473698319, 0.016923313522592798, 0.09751809215607898, 0.011933508438752183, 0.1214869120045522, 0.1236692263354322, 0.07724183062123136, 0.13427341302506357, 0.10124390174160747, 0.11722003477433174, 0.08366897044393429, 0.1033331828516546, 0.08792760522620358, 0.136973197441298, 0.05862002109644504, 0.11699967845683534, 0.07212725384113106, 0.1078131816617075, 0.08446065759603849, 0.09160611686836106, 0.07597079345816926, 0.10931038742399701, 0.9887600544639169, 0.9812864538078605, 0.9787384659802926, 0.9726692179215528, 0.9485357104540636, 0.9785319247813818, 0.09927857897268166, 0.9662437525855879, 0.09949049133032462, 0.3559423355364413, 0.33645639078959655, 0.369067563678409, 0.39335091219130613, 0.3236560611338024, 0.3315432839345481, 0.35692565483000127, 0.3946321018402684, 0.35188126288307586, 0.33505950430065545, 0.20032012778728225, 0.7872621075829174, 0.8638716353508714, 0.2736778886147656, 0.1846438673068762, 0.22667117380663515, 0.16175399120290312, 0.7146541096919121, 0.2027583753470944, 0.12180226522639748, 0.17252163038216328, 0.19305518150075562, 0.17212550591262465, 0.18856193263946086, 0.16704401857986828, 0.18626401346514299, 0.19929650413828626, 0.18391188535437442, 0.13491062156355638, 0.1776506101867793, 0.19410987531185442, 0.18754536716109982, 0.1351018203274159, 0.19970227784920802, 0.1255896881304316, 0.206643867722327, 0.14217262258034935, 0.05805611547910572, 0.1114995853640861, 0.05251328191659688, 0.05705852887017249, 0.13930087541066805, 0.06532753687626369, 0.00419001628225435, 0.1381063941315286, 0.11012647825708044, 0.1860788192962315, 0.1920746557001135, 0.12106893253300566, 0.12213608878449012, 0.10305112636908254, 0.16993143553144696, 0.14112875635084088, 0.15488036820891538, 0.14037798272666968, 0.11879546390315476, 0.14804908096690983, 0.1016441578401227, 0.1326576843767785, 0.13525913486667118, 0.12216318424116035, 0.10004302918790231, 0.07180922116302912, 0.0707071509610756, 0.05165404165291898, 0.15716008680869364, 0.14019744489915698, 0.18389819057898982, 0.13310269539127217, 0.10465932582715354, 0.13293959656667897, 0.1057713664359975, 0.48368486754543627, 0.5198704664661333, 0.4851431455694969, 0.4323306405360908, 0.43576873346256184, 0.49962574250092184, 0.4347098266232442, 0.4514905803921889, 0.5139903295083822, 0.08845691083703189, 0.10175704354581938, 0.0699609567234053, 0.08104314989554928, 0.11424767241855804, 0.09547993297377111, 0.10421595575232112, 0.12411593692579503, 0.09123355570501057, 0.1484824066727164, 0.1261793585696669, 0.22153512695006428, 0.2464734951886124, 0.160896821926243, 0.1479220465993587, 0.1424668555736951, 0.171834683855575, 0.17219596952388094, 0.3529412499398108, 0.2611897668488298, 0.3056500608523318, 0.31973872078292975, 0.23356498878973675, 0.3021009091693565, 0.31722789730058487, 0.3767596630681084, 0.2261706720662865, 0.20655239669397452, 0.26426022593572895, 0.20995604899763753, 0.27797843847893045, 0.17448071760154849, 0.20406011755046805, 0.1839610012432562, 0.19115555877063195, 0.16837171843088705, 0.19632841898787645, 0.1797941941901865, 0.21553281736817798, 0.19414595618959107, 0.23184171407400556, 0.23974787789638663, 0.23230737816526859, 0.1973045060931351, 0.19292699240963074, 0.18646595486563378, 0.21263631620242873, 0.22313097341250465, 0.17886224440588916, 0.1820522196568547, 0.19613374555646623, 0.20322579679857578, 0.1872294297165148, 0.1814478611936976, 0.1777019904052105, 0.16193453047290585, 0.19045174221325534, 0.7981527677780527, 0.5329234342698903, 0.1642770360794581, 0.1609657528429036, 0.1387087069137437, 0.17316511583629768, 0.282833042504543, 0.6031068924510637, 0.8207113244954131, 0.42297822468814406, 0.19521303605208729, 0.16630746332624546, 0.5351778626985653, 0.12342891703580094, 0.38307941248330246, 0.1810365624633079, 0.16930872480974668, 0.1867706221566896, 0.1720325367171669, 0.17775048641759728, 0.19460801594277022, 0.17123719694624429, 0.1777574674785416, 0.1944139471056593, 0.0863925446709658, 0.08505583133621497, 0.08197013205306847, 0.07392571558409777, 0.07863620226382695, 0.0845092835340916, 0.08850090751794326, 0.07758844449789426, 0.06766057014341986]}, "mutation_prompt": null}
{"id": "46a06e41-c1b1-47cc-a1f0-5157f71ea0ce", "solution": "import numpy as np\n\nclass VelocityGuidedMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "VelocityGuidedMutationHarmonySearch", "description": "Utilizing a velocity-based update mechanism to guide solutions towards better regions with adaptive inertia weight, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f90a02d-692b-43f2-bfef-d5f0bfa185cd", "metadata": {"aucs": [0.6596061862320802, 0.6188535611010447, 0.6758742545408416, 0.5811382615206288, 0.6725089536267164, 0.5186723352516265, 0.6510557406676765, 0.6340141108501558, 0.57920587951858, 9.999999999998899e-05, 0.025025959693784405, 0.023764283043518852, 0.007597962673680514, 0.06609243528172015, 0.03418779473698319, 0.016923313522592798, 0.09751809215607898, 0.011933508438752183, 0.1214869120045522, 0.1236692263354322, 0.07724183062123136, 0.13427341302506357, 0.10124390174160747, 0.11722003477433174, 0.08366897044393429, 0.1033331828516546, 0.08792760522620358, 0.136973197441298, 0.05862002109644504, 0.11699967845683534, 0.07212725384113106, 0.1078131816617075, 0.08446065759603849, 0.09160611686836106, 0.07597079345816926, 0.10931038742399701, 0.9887600544639169, 0.9812864538078605, 0.9787384659802926, 0.9726692179215528, 0.9485357104540636, 0.9785319247813818, 0.09927857897268166, 0.9662437525855879, 0.09949049133032462, 0.3559423355364413, 0.33645639078959655, 0.369067563678409, 0.39335091219130613, 0.3236560611338024, 0.3315432839345481, 0.35692565483000127, 0.3946321018402684, 0.35188126288307586, 0.33505950430065545, 0.20032012778728225, 0.7872621075829174, 0.8638716353508714, 0.2736778886147656, 0.1846438673068762, 0.22667117380663515, 0.16175399120290312, 0.7146541096919121, 0.2027583753470944, 0.12180226522639748, 0.17252163038216328, 0.19305518150075562, 0.17212550591262465, 0.18856193263946086, 0.16704401857986828, 0.18626401346514299, 0.19929650413828626, 0.18391188535437442, 0.13491062156355638, 0.1776506101867793, 0.19410987531185442, 0.18754536716109982, 0.1351018203274159, 0.19970227784920802, 0.1255896881304316, 0.206643867722327, 0.14217262258034935, 0.05805611547910572, 0.1114995853640861, 0.05251328191659688, 0.05705852887017249, 0.13930087541066805, 0.06532753687626369, 0.00419001628225435, 0.1381063941315286, 0.11012647825708044, 0.1860788192962315, 0.1920746557001135, 0.12106893253300566, 0.12213608878449012, 0.10305112636908254, 0.16993143553144696, 0.14112875635084088, 0.15488036820891538, 0.14037798272666968, 0.11879546390315476, 0.14804908096690983, 0.1016441578401227, 0.1326576843767785, 0.13525913486667118, 0.12216318424116035, 0.10004302918790231, 0.07180922116302912, 0.0707071509610756, 0.05165404165291898, 0.15716008680869364, 0.14019744489915698, 0.18389819057898982, 0.13310269539127217, 0.10465932582715354, 0.13293959656667897, 0.1057713664359975, 0.48368486754543627, 0.5198704664661333, 0.4851431455694969, 0.4323306405360908, 0.43576873346256184, 0.49962574250092184, 0.4347098266232442, 0.4514905803921889, 0.5139903295083822, 0.08845691083703189, 0.10175704354581938, 0.0699609567234053, 0.08104314989554928, 0.11424767241855804, 0.09547993297377111, 0.10421595575232112, 0.12411593692579503, 0.09123355570501057, 0.1484824066727164, 0.1261793585696669, 0.22153512695006428, 0.2464734951886124, 0.160896821926243, 0.1479220465993587, 0.1424668555736951, 0.171834683855575, 0.17219596952388094, 0.3529412499398108, 0.2611897668488298, 0.3056500608523318, 0.31973872078292975, 0.23356498878973675, 0.3021009091693565, 0.31722789730058487, 0.3767596630681084, 0.2261706720662865, 0.20655239669397452, 0.26426022593572895, 0.20995604899763753, 0.27797843847893045, 0.17448071760154849, 0.20406011755046805, 0.1839610012432562, 0.19115555877063195, 0.16837171843088705, 0.19632841898787645, 0.1797941941901865, 0.21553281736817798, 0.19414595618959107, 0.23184171407400556, 0.23974787789638663, 0.23230737816526859, 0.1973045060931351, 0.19292699240963074, 0.18646595486563378, 0.21263631620242873, 0.22313097341250465, 0.17886224440588916, 0.1820522196568547, 0.19613374555646623, 0.20322579679857578, 0.1872294297165148, 0.1814478611936976, 0.1777019904052105, 0.16193453047290585, 0.19045174221325534, 0.7981527677780527, 0.5329234342698903, 0.1642770360794581, 0.1609657528429036, 0.1387087069137437, 0.17316511583629768, 0.282833042504543, 0.6031068924510637, 0.8207113244954131, 0.42297822468814406, 0.19521303605208729, 0.16630746332624546, 0.5351778626985653, 0.12342891703580094, 0.38307941248330246, 0.1810365624633079, 0.16930872480974668, 0.1867706221566896, 0.1720325367171669, 0.17775048641759728, 0.19460801594277022, 0.17123719694624429, 0.1777574674785416, 0.1944139471056593, 0.0863925446709658, 0.08505583133621497, 0.08197013205306847, 0.07392571558409777, 0.07863620226382695, 0.0845092835340916, 0.08850090751794326, 0.07758844449789426, 0.06766057014341986]}, "mutation_prompt": null}
{"id": "c5fd4ff7-ac2f-42cb-bba1-5e3a9d5b2f2a", "solution": "import numpy as np\n\nclass DynamicMutationVelocityGuidedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n        mutation_factor = 1.0\n\n        for eval_count in range(1, self.budget + 1):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                mutation_step = np.exp(-eval_count / self.budget)  # Dynamic mutation step\n                new_solution = np.clip(new_solution + mutation_factor * mutation_step * velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicMutationVelocityGuidedHarmonySearch", "description": "Implementing a dynamic mutation strategy based on function evaluations to adaptively adjust the mutation step size for faster convergence.", "configspace": "", "generation": 67, "fitness": 0.23989352956177612, "feedback": "The algorithm DynamicMutationVelocityGuidedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "6f90a02d-692b-43f2-bfef-d5f0bfa185cd", "metadata": {"aucs": [0.6782267523702877, 0.6049508994702153, 0.7152817988416962, 0.6265595104306172, 0.6548655691949847, 0.6155775487647708, 0.7278144905665583, 0.6245590545232185, 0.6262396473091772, 0.11215108797987616, 0.020337949400537902, 0.07462605149020929, 0.034595998223928115, 9.999999999998899e-05, 0.12302701758165435, 0.11348369165706229, 0.1719278233790239, 0.023203344860029618, 0.11425794636200626, 0.09690089101991706, 0.08263684811502281, 0.1330289357069414, 0.09694140309173749, 0.13746870457034732, 0.08634338139237552, 0.10321300789763699, 0.08877716735423546, 0.1292038513591941, 0.07772252949696323, 0.11724393460826066, 0.11823355203509978, 0.075756166536606, 0.09617102988334514, 0.10965897797882407, 0.08089682804752352, 0.12769796725963112, 0.9887600877839866, 0.9812846430438619, 0.9787404259481588, 0.9726402813374162, 0.9438481377066632, 0.978521526460762, 0.09927839933744176, 0.9662409125395272, 0.09948829021614858, 0.40093967128575947, 0.35421660807427957, 0.4137096048360217, 0.2597833442393521, 0.36651674904224496, 0.2946034059979139, 0.38418665810851504, 0.28721808574510854, 0.2663040106024005, 0.3612371466365949, 0.20505220516220746, 0.1757465295421089, 0.35937015027392116, 0.2743235839268172, 0.20088687895020407, 0.2811746467982972, 0.22348240749886927, 0.1726605580362398, 0.21880316274514078, 0.1395134930572769, 0.18341525795481717, 0.19544516341793228, 0.17562958349815816, 0.19432387751160074, 0.16044821616904648, 0.12197818310041653, 0.1616444319237753, 0.31967269739883764, 0.13417609658350615, 0.16646325895551728, 0.2001680767854508, 0.19738163340453196, 0.14877746550470494, 0.19972072432526988, 0.12482326955765677, 0.21580144587802852, 0.08559552670208936, 0.06750564255190639, 0.07453289796182727, 0.050246341139681294, 0.04651582207137894, 0.13445569404530122, 0.029375608234799788, 0.14398889490981948, 0.12010372365101973, 0.11858704177799717, 0.13685844734948127, 0.16865479604104205, 0.10839186883928564, 0.064405248528278, 0.10212181220229888, 0.17087436272776269, 0.17162819106764216, 0.120949604209039, 0.09047508334769805, 0.11646887482057067, 0.19209681450041394, 0.10593690780420928, 0.12636209485345973, 0.13813338548335796, 0.11553952873906781, 0.08475226796870539, 0.1345210969227093, 0.07157027060610177, 0.08045707283561265, 0.08680478053340268, 0.16320320316243464, 0.10942857756180147, 0.15496756798866174, 0.11809128103556799, 0.09727145196244891, 0.1125578256420271, 0.5043519791287426, 0.5124629167634706, 0.4997207470380768, 0.49581477287209585, 0.5102138983491566, 0.46528117663018254, 0.5041530521377671, 0.4863634110740158, 0.5296206951335753, 0.08717673654991209, 0.11583965626103421, 0.13167011756560532, 0.09397249045794631, 0.14273963742076945, 0.09935358361173696, 0.14724293341116113, 0.07243457473353487, 0.09519362761403294, 0.15269045534292558, 0.17690839734787656, 0.3236699727197989, 0.2299834792136216, 0.1529317990614001, 0.16137827316925646, 0.1431434138464316, 0.17864556726476077, 0.13482498134818288, 0.2734934959486154, 0.2458029555070893, 0.2869644483954278, 0.21609843012992458, 0.3556107320369317, 0.29204058183057136, 0.37586583741330504, 0.2850536521393462, 0.21922569528060787, 0.1941436992096458, 0.2668004537187044, 0.2903313524277543, 0.25268422965625836, 0.18738612925675735, 0.2634030064442615, 0.1812358790976074, 0.15235313692415553, 0.19683061752723385, 0.21311088245470033, 0.19672516417311103, 0.22176614772635062, 0.220810738723191, 0.2193537116182135, 0.2220232102698314, 0.21008437649885936, 0.19780894061478893, 0.18789888236806207, 0.1806634539201163, 0.20567732842411812, 0.22613832707807735, 0.18621347710267455, 0.17417624977145718, 0.20297751438451184, 0.17875332203269956, 0.2892873133235576, 0.18291268998451782, 0.15531929764150487, 0.1618936479986276, 0.1852026492720813, 0.8181375247397572, 0.5319089888239155, 0.16200716113857583, 0.160404100329542, 0.14137598272741803, 0.17118746139906071, 0.16617779352366402, 0.7731025585175312, 0.8783944419116836, 0.43218865832278275, 0.19699605848521007, 0.16743485067110342, 0.5170984498501696, 0.12423298558766349, 0.32048558809099814, 0.1862099202035271, 0.17197627116248348, 0.17520728385785134, 0.16856710513940065, 0.17946381683377255, 0.17845039434342802, 0.177812180483645, 0.19783518126230515, 0.19682722380481132, 0.08830494219498009, 0.06906869502152202, 0.10841539051940452, 0.07252138489983062, 0.08444644410143554, 0.07267433258246414, 0.08441261956161239, 0.08296633744536552, 0.07729429797350729]}, "mutation_prompt": null}
{"id": "18c3d255-b976-434e-93a6-e150f5739191", "solution": "import numpy as np\n\nclass VelocityGuidedMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "VelocityGuidedMutationHarmonySearch", "description": "Utilizing a velocity-based update mechanism to guide solutions towards better regions with adaptive inertia weight, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f90a02d-692b-43f2-bfef-d5f0bfa185cd", "metadata": {"aucs": [0.6596061862320802, 0.6188535611010447, 0.6758742545408416, 0.5811382615206288, 0.6725089536267164, 0.5186723352516265, 0.6510557406676765, 0.6340141108501558, 0.57920587951858, 9.999999999998899e-05, 0.025025959693784405, 0.023764283043518852, 0.007597962673680514, 0.06609243528172015, 0.03418779473698319, 0.016923313522592798, 0.09751809215607898, 0.011933508438752183, 0.1214869120045522, 0.1236692263354322, 0.07724183062123136, 0.13427341302506357, 0.10124390174160747, 0.11722003477433174, 0.08366897044393429, 0.1033331828516546, 0.08792760522620358, 0.136973197441298, 0.05862002109644504, 0.11699967845683534, 0.07212725384113106, 0.1078131816617075, 0.08446065759603849, 0.09160611686836106, 0.07597079345816926, 0.10931038742399701, 0.9887600544639169, 0.9812864538078605, 0.9787384659802926, 0.9726692179215528, 0.9485357104540636, 0.9785319247813818, 0.09927857897268166, 0.9662437525855879, 0.09949049133032462, 0.3559423355364413, 0.33645639078959655, 0.369067563678409, 0.39335091219130613, 0.3236560611338024, 0.3315432839345481, 0.35692565483000127, 0.3946321018402684, 0.35188126288307586, 0.33505950430065545, 0.20032012778728225, 0.7872621075829174, 0.8638716353508714, 0.2736778886147656, 0.1846438673068762, 0.22667117380663515, 0.16175399120290312, 0.7146541096919121, 0.2027583753470944, 0.12180226522639748, 0.17252163038216328, 0.19305518150075562, 0.17212550591262465, 0.18856193263946086, 0.16704401857986828, 0.18626401346514299, 0.19929650413828626, 0.18391188535437442, 0.13491062156355638, 0.1776506101867793, 0.19410987531185442, 0.18754536716109982, 0.1351018203274159, 0.19970227784920802, 0.1255896881304316, 0.206643867722327, 0.14217262258034935, 0.05805611547910572, 0.1114995853640861, 0.05251328191659688, 0.05705852887017249, 0.13930087541066805, 0.06532753687626369, 0.00419001628225435, 0.1381063941315286, 0.11012647825708044, 0.1860788192962315, 0.1920746557001135, 0.12106893253300566, 0.12213608878449012, 0.10305112636908254, 0.16993143553144696, 0.14112875635084088, 0.15488036820891538, 0.14037798272666968, 0.11879546390315476, 0.14804908096690983, 0.1016441578401227, 0.1326576843767785, 0.13525913486667118, 0.12216318424116035, 0.10004302918790231, 0.07180922116302912, 0.0707071509610756, 0.05165404165291898, 0.15716008680869364, 0.14019744489915698, 0.18389819057898982, 0.13310269539127217, 0.10465932582715354, 0.13293959656667897, 0.1057713664359975, 0.48368486754543627, 0.5198704664661333, 0.4851431455694969, 0.4323306405360908, 0.43576873346256184, 0.49962574250092184, 0.4347098266232442, 0.4514905803921889, 0.5139903295083822, 0.08845691083703189, 0.10175704354581938, 0.0699609567234053, 0.08104314989554928, 0.11424767241855804, 0.09547993297377111, 0.10421595575232112, 0.12411593692579503, 0.09123355570501057, 0.1484824066727164, 0.1261793585696669, 0.22153512695006428, 0.2464734951886124, 0.160896821926243, 0.1479220465993587, 0.1424668555736951, 0.171834683855575, 0.17219596952388094, 0.3529412499398108, 0.2611897668488298, 0.3056500608523318, 0.31973872078292975, 0.23356498878973675, 0.3021009091693565, 0.31722789730058487, 0.3767596630681084, 0.2261706720662865, 0.20655239669397452, 0.26426022593572895, 0.20995604899763753, 0.27797843847893045, 0.17448071760154849, 0.20406011755046805, 0.1839610012432562, 0.19115555877063195, 0.16837171843088705, 0.19632841898787645, 0.1797941941901865, 0.21553281736817798, 0.19414595618959107, 0.23184171407400556, 0.23974787789638663, 0.23230737816526859, 0.1973045060931351, 0.19292699240963074, 0.18646595486563378, 0.21263631620242873, 0.22313097341250465, 0.17886224440588916, 0.1820522196568547, 0.19613374555646623, 0.20322579679857578, 0.1872294297165148, 0.1814478611936976, 0.1777019904052105, 0.16193453047290585, 0.19045174221325534, 0.7981527677780527, 0.5329234342698903, 0.1642770360794581, 0.1609657528429036, 0.1387087069137437, 0.17316511583629768, 0.282833042504543, 0.6031068924510637, 0.8207113244954131, 0.42297822468814406, 0.19521303605208729, 0.16630746332624546, 0.5351778626985653, 0.12342891703580094, 0.38307941248330246, 0.1810365624633079, 0.16930872480974668, 0.1867706221566896, 0.1720325367171669, 0.17775048641759728, 0.19460801594277022, 0.17123719694624429, 0.1777574674785416, 0.1944139471056593, 0.0863925446709658, 0.08505583133621497, 0.08197013205306847, 0.07392571558409777, 0.07863620226382695, 0.0845092835340916, 0.08850090751794326, 0.07758844449789426, 0.06766057014341986]}, "mutation_prompt": null}
{"id": "c2ce61b0-1664-4553-8f87-ddf00c259cc0", "solution": "import numpy as np\n\nclass VelocityGuidedMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "VelocityGuidedMutationHarmonySearch", "description": "Utilizing a velocity-based update mechanism to guide solutions towards better regions with adaptive inertia weight, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f90a02d-692b-43f2-bfef-d5f0bfa185cd", "metadata": {"aucs": [0.6596061862320802, 0.6188535611010447, 0.6758742545408416, 0.5811382615206288, 0.6725089536267164, 0.5186723352516265, 0.6510557406676765, 0.6340141108501558, 0.57920587951858, 9.999999999998899e-05, 0.025025959693784405, 0.023764283043518852, 0.007597962673680514, 0.06609243528172015, 0.03418779473698319, 0.016923313522592798, 0.09751809215607898, 0.011933508438752183, 0.1214869120045522, 0.1236692263354322, 0.07724183062123136, 0.13427341302506357, 0.10124390174160747, 0.11722003477433174, 0.08366897044393429, 0.1033331828516546, 0.08792760522620358, 0.136973197441298, 0.05862002109644504, 0.11699967845683534, 0.07212725384113106, 0.1078131816617075, 0.08446065759603849, 0.09160611686836106, 0.07597079345816926, 0.10931038742399701, 0.9887600544639169, 0.9812864538078605, 0.9787384659802926, 0.9726692179215528, 0.9485357104540636, 0.9785319247813818, 0.09927857897268166, 0.9662437525855879, 0.09949049133032462, 0.3559423355364413, 0.33645639078959655, 0.369067563678409, 0.39335091219130613, 0.3236560611338024, 0.3315432839345481, 0.35692565483000127, 0.3946321018402684, 0.35188126288307586, 0.33505950430065545, 0.20032012778728225, 0.7872621075829174, 0.8638716353508714, 0.2736778886147656, 0.1846438673068762, 0.22667117380663515, 0.16175399120290312, 0.7146541096919121, 0.2027583753470944, 0.12180226522639748, 0.17252163038216328, 0.19305518150075562, 0.17212550591262465, 0.18856193263946086, 0.16704401857986828, 0.18626401346514299, 0.19929650413828626, 0.18391188535437442, 0.13491062156355638, 0.1776506101867793, 0.19410987531185442, 0.18754536716109982, 0.1351018203274159, 0.19970227784920802, 0.1255896881304316, 0.206643867722327, 0.14217262258034935, 0.05805611547910572, 0.1114995853640861, 0.05251328191659688, 0.05705852887017249, 0.13930087541066805, 0.06532753687626369, 0.00419001628225435, 0.1381063941315286, 0.11012647825708044, 0.1860788192962315, 0.1920746557001135, 0.12106893253300566, 0.12213608878449012, 0.10305112636908254, 0.16993143553144696, 0.14112875635084088, 0.15488036820891538, 0.14037798272666968, 0.11879546390315476, 0.14804908096690983, 0.1016441578401227, 0.1326576843767785, 0.13525913486667118, 0.12216318424116035, 0.10004302918790231, 0.07180922116302912, 0.0707071509610756, 0.05165404165291898, 0.15716008680869364, 0.14019744489915698, 0.18389819057898982, 0.13310269539127217, 0.10465932582715354, 0.13293959656667897, 0.1057713664359975, 0.48368486754543627, 0.5198704664661333, 0.4851431455694969, 0.4323306405360908, 0.43576873346256184, 0.49962574250092184, 0.4347098266232442, 0.4514905803921889, 0.5139903295083822, 0.08845691083703189, 0.10175704354581938, 0.0699609567234053, 0.08104314989554928, 0.11424767241855804, 0.09547993297377111, 0.10421595575232112, 0.12411593692579503, 0.09123355570501057, 0.1484824066727164, 0.1261793585696669, 0.22153512695006428, 0.2464734951886124, 0.160896821926243, 0.1479220465993587, 0.1424668555736951, 0.171834683855575, 0.17219596952388094, 0.3529412499398108, 0.2611897668488298, 0.3056500608523318, 0.31973872078292975, 0.23356498878973675, 0.3021009091693565, 0.31722789730058487, 0.3767596630681084, 0.2261706720662865, 0.20655239669397452, 0.26426022593572895, 0.20995604899763753, 0.27797843847893045, 0.17448071760154849, 0.20406011755046805, 0.1839610012432562, 0.19115555877063195, 0.16837171843088705, 0.19632841898787645, 0.1797941941901865, 0.21553281736817798, 0.19414595618959107, 0.23184171407400556, 0.23974787789638663, 0.23230737816526859, 0.1973045060931351, 0.19292699240963074, 0.18646595486563378, 0.21263631620242873, 0.22313097341250465, 0.17886224440588916, 0.1820522196568547, 0.19613374555646623, 0.20322579679857578, 0.1872294297165148, 0.1814478611936976, 0.1777019904052105, 0.16193453047290585, 0.19045174221325534, 0.7981527677780527, 0.5329234342698903, 0.1642770360794581, 0.1609657528429036, 0.1387087069137437, 0.17316511583629768, 0.282833042504543, 0.6031068924510637, 0.8207113244954131, 0.42297822468814406, 0.19521303605208729, 0.16630746332624546, 0.5351778626985653, 0.12342891703580094, 0.38307941248330246, 0.1810365624633079, 0.16930872480974668, 0.1867706221566896, 0.1720325367171669, 0.17775048641759728, 0.19460801594277022, 0.17123719694624429, 0.1777574674785416, 0.1944139471056593, 0.0863925446709658, 0.08505583133621497, 0.08197013205306847, 0.07392571558409777, 0.07863620226382695, 0.0845092835340916, 0.08850090751794326, 0.07758844449789426, 0.06766057014341986]}, "mutation_prompt": null}
{"id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 70, "fitness": 0.24646895055065657, "feedback": "The algorithm DynamicPopulationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "6f90a02d-692b-43f2-bfef-d5f0bfa185cd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "bcdf8816-29a0-462f-bb2b-48369d6c55b3", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "b73f0d5c-308b-4b6b-89ec-e3ae2049afa0", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "7a09bc51-b5df-47f0-a491-bfb391a4dc2a", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "6b95f5c2-0c0e-4cb2-8b84-3c80687a2df3", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n\n                # Improved inertia weight update\n                if func(new_solution) < func(harmony_memory[i]):\n                    inertia_weight += 0.01\n                else:\n                    inertia_weight *= 0.95\n\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "ImprovedDynamicPopulationHarmonySearch", "description": "Implementing a dynamic adaptive inertia weight mechanism based on individual fitness improvement to enhance exploration and exploitation for accelerated convergence.", "configspace": "", "generation": 74, "fitness": 0.19756006554229427, "feedback": "The algorithm ImprovedDynamicPopulationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.5494120096654027, 0.5410686653636495, 0.5576166220092651, 0.43229902402321563, 0.4896663101735922, 0.5095241532420327, 0.3976170841423403, 0.44411900661686754, 0.3849134746432664, 0.09960365802017856, 0.03591110077779702, 0.03626037852989861, 9.999999999998899e-05, 0.021537767143900766, 0.08192623550614586, 0.0137239005837968, 0.0447756423791178, 0.0348094787806722, 0.0911782691570836, 0.08272254269144652, 0.0967746053342613, 0.0929420700234761, 0.08585987967721231, 0.07320590170003016, 0.06384976426517919, 0.09629287493421812, 0.10037877724043809, 0.09245811675266247, 0.06880506721271362, 0.03295276703172456, 0.06063899424045083, 0.05481581152686743, 0.04778259399300988, 0.07778142483407902, 0.06247331513382448, 0.03881697284931174, 0.9797066941223613, 0.9510315917483421, 0.9819896615675076, 0.8030109923968967, 0.9639229698590008, 0.9358838269907472, 0.8420415010867733, 0.9291420223840949, 0.9426745493098483, 0.24958769525977165, 0.3115295286207874, 0.21107922641290644, 0.2232312501459809, 0.2005332846846074, 0.1993821797795744, 0.2025907625940473, 0.1611845640359828, 0.19608436027980736, 0.1890649002683379, 0.16921176271448168, 0.17468023992322834, 0.24591378640591777, 0.25243858365341687, 0.19991243179195795, 0.12128210679912588, 0.17357869986450292, 0.22013219306528875, 0.19887751150035493, 0.08480615357498411, 0.11317541605541737, 0.16604390238880273, 0.12953831198702626, 0.18489980565145347, 0.10878410512496828, 0.18459135869404308, 0.12658767740973453, 0.1704604336356531, 0.16955424076992198, 0.11712067516509561, 0.17216287451121137, 0.13657189667970593, 0.13017179880559138, 0.14791544131962509, 0.11767999683429375, 0.1299388045546972, 0.13852081113633308, 9.999999999998899e-05, 0.02561839324856885, 9.999999999998899e-05, 0.026198840159865955, 0.04096197509403898, 9.999999999998899e-05, 0.02850621531616815, 0.03383502958043516, 0.07208230602873755, 0.09216886215067444, 0.15777339189559136, 0.06768809783832841, 0.029928601870264915, 0.07657955766775026, 0.14538076447120207, 0.1811725860674691, 0.10802384196022963, 0.0865171787415735, 0.020485989038397046, 0.021280409730701666, 0.0776150851773254, 0.050701481542431925, 0.036678919288702816, 0.0373668072452652, 0.040325658982191315, 0.051410626519346025, 0.05782204994502538, 0.08680864224504725, 0.01449758709243465, 0.16653498971049407, 0.03486238914536155, 0.15255409498131467, 0.07385573824835334, 0.1409821803592236, 0.08878725775636465, 0.4131090759823802, 0.4489271141953325, 0.39039930669558387, 0.36350945433505655, 0.37831526578553887, 0.4115786504327761, 0.39129175566542074, 0.4887290243508505, 0.36093202139707137, 0.10940770627828222, 0.050806726511902545, 0.11233504555181184, 0.08361859427270923, 0.08929683126872878, 0.0850460707577615, 0.0937589208911066, 0.08229911596848194, 0.0869047205664738, 0.11407086386933463, 0.18230940807041385, 0.15506386063253375, 0.11996838242786323, 0.11102690654862413, 0.12377074770980179, 0.11723955861585567, 0.12605950672570798, 0.12519065946544472, 0.24143433739789977, 0.24389005569925992, 0.21085471936036726, 0.2863969926751989, 0.2453881510252499, 0.18705624077392646, 0.24353739346808745, 0.19085453519414664, 0.18745317511158077, 0.1594114956925532, 0.2840922350758802, 0.2035985479078899, 0.19578269035818607, 0.22108724162240456, 0.2469368570575846, 0.20597554123967232, 0.15833433600107893, 0.13900687043576365, 0.19585421513791768, 0.19914450506469372, 0.20188941010341122, 0.16653800704985056, 0.18349171877664672, 0.17711321840470318, 0.18698645369755806, 0.18776696759318479, 0.1957272017504843, 0.19307805695594782, 0.1702289267705981, 0.17202230173685606, 0.17857169976330878, 0.17704008442778163, 0.17034744108419275, 0.17830526815755132, 0.17787182026021942, 0.16498770807579677, 0.18196039968400457, 0.777910231196637, 0.7344423295460598, 0.18201777097662852, 0.17603841019812738, 0.17366178199930038, 0.2902529492805611, 0.12172771324695564, 0.1452683705886233, 0.4208526853317579, 0.20168762273187724, 0.16599873923021535, 0.1210735278941023, 0.2898170933152332, 0.2519212323098321, 0.12465601982522945, 0.19471203004595194, 0.11047932753805234, 0.1705557967946233, 0.1725627827241819, 0.1647379579150796, 0.18221558735616006, 0.17460650284764268, 0.15491032549129102, 0.18533889468172482, 0.17881050671512788, 0.1643426299711629, 0.07942173705040256, 0.06003437859017957, 0.05874463086448356, 0.07376312634649407, 0.0897574987299784, 0.06977424289171263, 0.07802414602317498, 0.06606020403836177, 0.06367086642213327]}, "mutation_prompt": null}
{"id": "fb55b3aa-17ac-4228-bb3b-60654effa463", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n        self.step_size = 0.5\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                step_size = self.step_size * np.exp(-0.001 * _)  # Adaptive step size adjustment\n                cognitive_component = step_size * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = step_size * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "AdaptiveHarmonySearch", "description": "Enhancing convergence speed by introducing a mutation mechanism that adaptively adjusts the search step size based on the population's performance.", "configspace": "", "generation": 75, "fitness": 0.11382994273411569, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.35356397876839496, 0.26527314204070596, 0.37503263057001424, 0.18374542353846368, 0.15455267505099035, 0.14152663135604981, 0.16113306536783434, 0.17977572904464378, 0.23793153690104119, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09316393966554237, 0.09534501895449687, 0.06138982274878124, 0.12227042828388535, 0.05353103152196159, 0.058933612311324546, 0.06419402040943001, 0.07001277302732434, 0.06843942439282469, 0.06520305038821583, 0.058439978907549484, 0.06783260381710643, 0.06604371824557098, 0.06380590904179828, 0.03990997517975681, 0.051783903909333295, 0.03319721744948079, 0.033318127733762415, 0.06027147317604398, 0.04306678869043823, 0.0522482707001678, 0.053985304681486546, 0.049971364725477585, 0.04244950417711246, 0.05226018996839843, 0.05134446462915876, 0.04239254835210937, 0.1138712459592165, 0.09906840144714024, 0.07731368729552068, 0.06776107478861737, 0.09034487713563344, 0.08565207254032081, 0.04421866376354522, 0.04254819520728503, 0.04968152783328861, 0.20231198626968527, 0.22545981700415818, 0.1501494664292513, 0.21034207314185005, 0.10544113029475699, 0.10611961136444148, 0.1288932027334173, 0.13293547571680486, 0.14188054063808908, 0.06850911396153336, 0.019603658127603896, 0.042664311764286644, 0.03383433717641715, 9.999999999998899e-05, 0.002870165650749712, 0.06772952867063031, 0.03758042893065938, 0.030896801576667743, 0.13888706563017839, 0.1237833873258185, 0.10780784076884853, 0.12714460621879808, 0.12046064815958835, 0.1238744305133399, 0.13616961245427972, 0.1387697810492613, 0.14963011874215937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12388086837651013, 0.0958998445947713, 0.14942164360879473, 0.046794144756579614, 0.04177465005987402, 0.06891678130081458, 0.12874524164339363, 0.10468528291176082, 0.07949181452479481, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038493957340127394, 0.00017694695315806364, 0.012271460884126673, 9.999999999998899e-05, 0.004841041085891673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.277840817151649, 0.3530141736930934, 0.2608562222708297, 0.18258307405684704, 0.22790531839358696, 0.201375910565611, 0.3744025434514139, 0.4102116002085846, 0.35816380656989255, 0.04865608393931398, 0.0269906859220993, 0.03488707726091578, 0.07653808715729027, 0.08038539181747206, 0.07446786465506083, 0.07316826072318294, 0.06419386471222244, 0.07637571044257585, 0.12370223234348265, 0.20598975392221242, 0.11414170633506182, 0.1485318837115286, 0.18287895271498678, 0.08973632824907563, 0.13398409180923432, 0.12073413214072948, 0.10365601232660482, 0.1537787514620681, 0.1835219186262056, 0.15989822222515482, 0.249743147233221, 0.24555548683328599, 0.27240978008855987, 0.17448124378445262, 0.1603499828894499, 0.14547363241360345, 0.1030003334802102, 0.12334331037390822, 0.1044067247179864, 0.19737233043791647, 0.17806894905390314, 0.21807971012404725, 0.13688357111614424, 0.15716177811550514, 0.09606462680698624, 0.23257151905152085, 0.2191733275618104, 0.22727554869903055, 0.20116793428149127, 0.2043650377785582, 0.22209843847464394, 0.19611155675291325, 0.22727887765911858, 0.21272448216312012, 0.17384591721525944, 0.1653360773289716, 0.16450108908992622, 0.16403748572330146, 0.1624190195392271, 0.16360272439694723, 0.16842076797851846, 0.17036680909738444, 0.17427705433698282, 0.18407270290967803, 0.1842148372096417, 0.16347921152951894, 0.40687991369818166, 0.14509228251376394, 0.11641427284908934, 0.13319253707401824, 0.1384568631262204, 0.11849213399214875, 0.3304275397557841, 0.21145228186923248, 0.24523380228098302, 0.14267132555055684, 0.10349620073612842, 0.09920056492037399, 0.14321271045651318, 0.18238775241692462, 0.20345618848899027, 0.17348828652472315, 0.1764417149927292, 0.18643915315138548, 0.1775131289016425, 0.180298815979971, 0.17966040043131692, 0.1772718668253488, 0.17380223543674678, 0.18309281015982015, 0.0769617199840903, 0.061715540589488804, 0.07483770361999376, 0.06056652536812601, 0.070836156268967, 0.10481573356930352, 0.06872015544764376, 0.1017097846630386, 0.06248218176989595]}, "mutation_prompt": null}
{"id": "8485f05d-8c64-4290-8f2c-a40088c4a8e5", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "35da341f-e2f2-4489-99be-da5486c5df6b", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                scaling_factor = 2.0 / (1.0 + np.exp(-10 * (np.random.rand() - 0.5)))  # Introducing dynamic scaling factor\n                cognitive_component = scaling_factor * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = scaling_factor * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "EnhancedDynamicPopulationHarmonySearch", "description": "Enhancing convergence speed by incorporating a dynamic scaling factor for the cognitive and social components to adjust the search behavior more efficiently.", "configspace": "", "generation": 77, "fitness": 0.21060695568461987, "feedback": "The algorithm EnhancedDynamicPopulationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.503433595037047, 0.5532505612391452, 0.593186775399884, 0.5465451134748842, 0.5986138941142265, 0.4697025907308645, 0.5929940536162011, 0.5753035836180737, 0.6214224788324952, 0.0031663557768928374, 9.999999999998899e-05, 0.12880024604557805, 0.0002933193877282525, 0.11105794486795617, 9.999999999998899e-05, 0.014226485107782127, 9.999999999998899e-05, 9.999999999998899e-05, 0.09685982263211623, 0.07365275942050298, 0.07306617773450941, 0.11763023835216302, 0.1363277440225682, 0.1165312584610052, 0.10297900089064693, 0.11471416126174094, 0.07764226048206169, 0.09341103381303928, 0.09785249821734765, 0.08250330674637896, 0.09212702223163982, 0.0790997285906867, 0.10729498761537093, 0.058217112029933404, 0.06222862077287261, 0.10900785472823149, 0.99814771152516, 0.07474805938077356, 0.9903843258513391, 0.8087602425329458, 0.9719531419763997, 0.9790689738283247, 0.09155619603844567, 0.9547295159687704, 0.9871129510999608, 0.342037533472376, 0.2789586963328887, 0.2822473095795256, 0.27541290543839636, 0.27577790418598047, 0.2107550587005489, 0.2137189619578318, 0.22531414587686605, 0.19299632084528096, 0.4122447702135873, 0.18156692831001642, 0.2220895842493299, 0.2125061969222194, 0.21034722615761403, 0.3352812576681655, 0.18191840521719738, 0.13968214577396543, 0.27344930017756275, 0.3009370427591107, 0.22088501084551126, 0.20598919119175496, 0.13852743106100296, 0.12290218114647344, 0.2723763079772785, 0.09651492701503461, 0.1369994357606189, 0.1346692536976729, 0.13101815768915315, 0.15580785370978834, 0.13574804315763522, 0.15290353603356033, 0.11921010478118699, 0.22470605233308327, 0.14162579759396599, 0.10475098894849488, 0.28280095376075265, 9.999999999998899e-05, 9.999999999998899e-05, 0.056103024560850145, 9.999999999998899e-05, 9.999999999998899e-05, 0.08036462985742021, 9.999999999998899e-05, 0.045729075311434664, 9.999999999998899e-05, 0.07620586632041926, 0.03460048641045921, 0.12908636322383304, 0.16871414558852715, 0.03838705430737244, 0.05987493994657256, 0.11014895297253113, 0.07331075839936585, 0.09315532024511664, 0.06715767147545737, 0.04706969106310355, 0.030866336737157885, 0.0865471080478919, 0.05673852513644362, 0.12199602565109358, 0.05480900257617627, 0.07345869215430267, 0.08192245780724294, 0.04631062607439074, 0.21958930692045153, 0.06854960109223196, 0.07214355562110997, 0.032829412315384054, 0.11084698804510151, 0.21128678550409818, 0.17614381445078653, 0.08510614140108408, 0.42210911425087716, 0.4323738602327344, 0.43843503599877354, 0.43454467469587055, 0.39811561186819977, 0.4487719089043005, 0.4768980261141632, 0.46583146458072644, 0.41758540001017874, 0.07564795744569675, 0.07306600172387501, 0.10189031141492799, 0.13283429379432565, 0.08076267398446724, 0.08483899157520758, 0.09842530327049703, 0.09643056789163817, 0.11229156137089302, 0.13868195789983706, 0.15860056759211416, 0.19424343669594057, 0.14450361639321962, 0.265896443223406, 0.1638712725630499, 0.1284457021891645, 0.20032109124917097, 0.17618469934419068, 0.26818402728606205, 0.22791019517112254, 0.2622485326916715, 0.2682910914083395, 0.28931578806852243, 0.3283440742429512, 0.2916966022698534, 0.16282259312678726, 0.23411717886995975, 0.2568753267174577, 0.21799317079991554, 0.2335764740561177, 0.19127655297377633, 0.17578675114794862, 0.1961862230193081, 0.21773088542544983, 0.19117499873167798, 0.17667128372018037, 0.18801009614041486, 0.20543498501026902, 0.18815007362810998, 0.2211852737622576, 0.20795780137862496, 0.19270512546694607, 0.21740055013267479, 0.20809317467242883, 0.1851595831328755, 0.17257373743333226, 0.16138894133627268, 0.17669154980348412, 0.1735671234635161, 0.2141915147943695, 0.17867397666958618, 0.17806035700475908, 0.16534542245292616, 0.19646263478890302, 0.1712812065456898, 0.7755702941992632, 0.16883868390295642, 0.3910072321201029, 0.19640885170371336, 0.16818370653290027, 0.4261324879027033, 0.17099438676238987, 0.15808045441455032, 0.40507415310235684, 0.22278410091666845, 0.3757196030940744, 0.12185129595639865, 0.1684986186556252, 0.1452266076737173, 0.20017232229604953, 0.4711227020320462, 0.41781769545972225, 0.1677448653514304, 0.16188958532601538, 0.16994612026209888, 0.16668321837798417, 0.18787296753809646, 0.18650794937190995, 0.185513530478716, 0.1875196810522305, 0.17318431012453872, 0.08507648284694225, 0.08599713048072011, 0.09173080139419143, 0.06871430607609996, 0.09241023943093718, 0.08087209896278125, 0.07648186289847236, 0.08618750791798613, 0.08481716642697779]}, "mutation_prompt": null}
{"id": "8c5f6729-9161-49ee-9d26-4d90cac3312f", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "4674fdf4-f6d2-4a7b-9b2b-ec039a73144d", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "19a86d04-beb6-4376-9dc6-51eba1274121", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "43c8ddcc-b235-4fae-b315-288ff3353fd1", "solution": "import numpy as np\n\nclass DynamicHybridPSOHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n        self.inertia_weight = 0.8\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                \n                ## PSO Update\n                global_best = min(harmony_memory, key=func)\n                cognitive_velocity = 1.5 * np.random.random() * (global_best - new_solution)\n                \n                velocity = self.inertia_weight * velocity + cognitive_component + social_component + cognitive_velocity\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicHybridPSOHS", "description": "Utilizing a dynamic hybrid search mechanism combining Particle Swarm Optimization (PSO) with Harmony Search to enhance exploration and exploitation capabilities efficiently.", "configspace": "", "generation": 81, "fitness": 0.11746611268232848, "feedback": "The algorithm DynamicHybridPSOHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.15.", "error": "", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.21361750691410009, 0.22789656840612338, 0.3590931635452592, 0.32856945220678124, 0.2514405140085276, 0.24904867990853075, 0.2211501412104283, 0.24020317667867253, 0.24799439203903195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0607667088392031, 0.030332902251543614, 0.01777640430937666, 0.04557360662914267, 0.042295368457533566, 0.08728140222425973, 0.0475720857551416, 0.05797791513663719, 0.04698474508266903, 0.03446625737396247, 0.037155860144438835, 0.02503687722155723, 0.029228490939869345, 0.019372747053266304, 0.02714794197101078, 0.043160802076275595, 0.03368146013343998, 0.027257633928248426, 0.9785204965317895, 0.8045171126644763, 0.9875894161414563, 0.9374148067169186, 0.7120317377292598, 0.07465149428261175, 0.7541605279083278, 0.07494583168619173, 0.21160522359417167, 0.09413003135577602, 0.08674005812188512, 0.1036384014807552, 0.0619711388943921, 0.06918455439235571, 0.08647448711444017, 0.11523441891241837, 0.061775270898763446, 0.13085972611684615, 0.10917523835857268, 0.13007525376775864, 0.13849463664652573, 0.16766682855105353, 0.13060951849855207, 0.19080383644312537, 0.08988381313212268, 0.0965475197761041, 0.11877855550657512, 0.016918971893572388, 0.01034282687403576, 0.06156688520735021, 0.03177690411846923, 9.999999999998899e-05, 0.10751530884674954, 0.060378015730735535, 0.03833293439042085, 0.039144498487171275, 0.02174506051300562, 0.047525880744103244, 0.07706694003231862, 0.05692650578287861, 0.0011133188280395556, 0.0880431132148004, 0.0445845719393867, 0.0021496836042455003, 0.10341673060976153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01185235145182817, 0.026970069905171146, 0.005683488373316892, 0.02610956880645443, 0.016197797866931207, 0.0344378643683676, 0.020463096202892883, 0.05324736729761148, 0.044743655228874024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015460206329494408, 0.006561173033079126, 0.011116925459425664, 0.004842438597094434, 0.04448883277556592, 0.0154056670571312, 0.018323099466677872, 0.006323559754755292, 0.03954877885177832, 0.2485954849318477, 0.21284361908344007, 0.32609484420005697, 0.23729854914288995, 0.2484693684876429, 0.2695917543044477, 0.279007493670541, 0.2276277260001166, 0.2710115067349458, 0.05645472890931158, 0.06347833619183496, 0.07805678582388575, 0.0425429977979056, 0.03725216866635439, 0.052469940330589826, 0.03841006565006322, 0.05509710330026152, 0.06406564501268275, 0.11465195268653439, 0.12741521095934472, 0.14340772275200964, 0.10469032834796632, 0.08681848375411738, 0.10878362094227467, 0.10670232853113482, 0.10098425737325378, 0.09678009197575299, 0.1886142890457928, 0.21417824793848972, 0.1876370411751509, 0.18596978626465865, 0.16471181213076125, 0.16265426713963393, 0.1501734772351052, 0.20016063161561937, 0.1876063519716913, 0.0966387772023436, 0.13231931866052893, 0.13359567818127016, 0.12171062680484013, 0.1091273473510882, 0.09490898226370459, 0.09358808064498902, 0.11421228607888279, 0.12020388387235492, 0.152447011990674, 0.13400840146239934, 0.13829591682116693, 0.1504071740775884, 0.1411723462321013, 0.12950864289383734, 0.15172571265008516, 0.15665828161432915, 0.15746046690927074, 0.13485883424490208, 0.067290901172669, 0.14659562779279367, 0.14399468539655302, 0.1424900644185516, 0.16588279052951804, 0.12938457194339048, 0.14181442652142118, 0.14255702894927924, 0.1425646443022517, 0.2822698631292475, 0.1344287122525959, 0.1673178222654873, 0.14636633689424194, 0.16327691972321334, 0.21274856698824307, 0.16705931627523296, 0.1429595982871752, 0.12658565302433855, 0.15231445938539223, 0.09658659708893957, 0.19534996162887786, 0.11906791979060238, 0.17889496273901417, 0.11670740107849709, 0.09228710082227665, 0.11126255872290658, 0.17004811833982691, 0.1606235936324636, 0.1639261827607934, 0.14979954623915237, 0.15090833412164462, 0.165706894798491, 0.16711399983294195, 0.1544095310446073, 0.14497126828100826, 0.03934353936469048, 0.04989921879405124, 0.0640715023677576, 0.047898695425446225, 0.05587704611245736, 0.04196346844621146, 0.04479171079592292, 0.04205301994712407, 0.04537355660943487]}, "mutation_prompt": null}
{"id": "80e04b01-1ecd-4f4a-8fa2-916bc474e8f0", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "46de411d-74f1-46c3-9245-42bc74e4495f", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight = 0.8 + 0.2 * (1 - func(harmony_memory[i]) / func(new_solution))  # Dynamic inertia weight update\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "ImprovedDynamicPopulationHarmonySearch", "description": "Introducing a dynamic inertia weight adaptation mechanism based on individual fitness improvements to enhance exploitation of the search space for faster convergence.", "configspace": "", "generation": 83, "fitness": 0.19756048783536204, "feedback": "The algorithm ImprovedDynamicPopulationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.54941521468916, 0.5410736864881567, 0.5576179100346375, 0.432300213695088, 0.4896676461513283, 0.5095242526946611, 0.39761420517554835, 0.4441239012122087, 0.3849143398405639, 0.09960365802017856, 0.03591110077779702, 0.03626037852989861, 9.999999999998899e-05, 0.021537767143900766, 0.08192623550614586, 0.0137239005837968, 0.0447756423791178, 0.0348094787806722, 0.0911782691570836, 0.08272237302032204, 0.0967738987915725, 0.0929420700234761, 0.08585999157591562, 0.07320573312991696, 0.06385157963613874, 0.09629287493421812, 0.10037877724043809, 0.09245811675266247, 0.06880506721271362, 0.032952313966105984, 0.06063899424045083, 0.05481422926939927, 0.04778259399300988, 0.07778142483407902, 0.06247331513382448, 0.03881697284931174, 0.9797072426007873, 0.9510349494779862, 0.9819937184324716, 0.8030111794419644, 0.9639276485297457, 0.9358853932587, 0.8420420191550931, 0.9291469122276917, 0.9426761519024438, 0.24958769525977165, 0.3115295286207874, 0.21107922641290644, 0.22323033199965503, 0.20053330623641696, 0.1993821797795744, 0.2025907625940473, 0.1611845640359828, 0.19608436027980736, 0.18906813263061395, 0.16920552648074627, 0.17467894889523017, 0.2459142327169841, 0.25243858365341687, 0.19991243179195795, 0.12128472525317757, 0.17357737897463688, 0.22013317430438706, 0.19887751150035493, 0.08480615357498411, 0.11317541605541737, 0.16604390238880273, 0.12953831198702626, 0.18489980565145347, 0.10878410512496828, 0.18459135869404308, 0.12658767740973453, 0.1704604336356531, 0.16955424076992198, 0.11712067516509561, 0.17216287451121137, 0.13657189667970593, 0.13017179880559138, 0.14791544131962509, 0.11767999683429375, 0.1299388045546972, 0.13852081113633308, 9.999999999998899e-05, 0.02561839324856885, 9.999999999998899e-05, 0.026198840159865955, 0.04096197509403898, 9.999999999998899e-05, 0.02850621531616815, 0.03383502958043516, 0.07208230602873755, 0.09216886215067444, 0.15777294707503553, 0.06768809783832841, 0.029928601870264915, 0.07657955766775026, 0.14538076447120207, 0.18117202211329864, 0.10802384196022963, 0.0865171787415735, 0.020485989038397046, 0.021280409730701666, 0.0776150851773254, 0.050701481542431925, 0.036678919288702816, 0.0373668072452652, 0.040325658982191315, 0.051410626519346025, 0.05782204994502538, 0.08680864224504725, 0.01449758709243465, 0.16653498971049407, 0.03486238914536155, 0.15255409498131467, 0.07385573824835334, 0.1409821803592236, 0.08878725775636465, 0.4130984747739528, 0.4489327895621862, 0.3904120614386154, 0.36351361520890046, 0.3783210405432448, 0.41157361706004847, 0.3912968730454276, 0.48872357158332824, 0.36092150963190117, 0.1094058220709554, 0.0508062452082344, 0.11233504555181184, 0.08361659347788841, 0.08929683126872878, 0.08504431971386062, 0.09375607657576313, 0.08229911596848194, 0.08690738793357378, 0.11406299840035794, 0.18231507293861537, 0.15506874850782937, 0.11997058852084541, 0.11102836768159996, 0.12377508344620669, 0.1172430921916966, 0.12605723723914175, 0.1251968571090396, 0.2414347014827295, 0.24389360837280105, 0.21085716590481418, 0.2863982609002653, 0.2453882307100591, 0.18705743604236025, 0.24354039904476987, 0.19085916641394685, 0.18745156792542417, 0.15941096022939105, 0.2840940380569503, 0.2035968404123879, 0.19578567426744742, 0.22108724162240456, 0.24693475485835326, 0.20598118050285497, 0.1583381807228652, 0.1390040250173863, 0.1958587984041955, 0.1991459735249761, 0.20189222630192827, 0.16654218045196578, 0.18349154640244414, 0.17711390044269137, 0.1869948022708653, 0.18776937516137815, 0.19572651184465029, 0.19307805695594782, 0.1702289267705981, 0.17202230173685606, 0.17857169976330878, 0.17704008442778163, 0.17034744108419275, 0.17830526815755132, 0.17787182026021942, 0.16498770807579677, 0.18196053564393366, 0.7779119942954252, 0.7344382033755521, 0.18202231953111536, 0.1760471554017944, 0.17365729509787997, 0.29025343807371884, 0.12172877421508599, 0.14526346817419722, 0.4208502060658228, 0.2016908660632888, 0.16599706237219236, 0.12107442476226515, 0.28981650356901734, 0.2519235885555028, 0.12465632230937684, 0.19471199865718392, 0.11047967064592812, 0.1705578083781224, 0.1725670001445898, 0.16474325859181804, 0.18221647867755786, 0.17460206055768235, 0.15491486854877745, 0.18533280907828742, 0.17880878431897396, 0.1643352150311157, 0.07942135452899435, 0.060034584694608206, 0.0587456186722487, 0.07376312634649407, 0.08975799979891486, 0.06977118108144309, 0.07802312277426993, 0.06606020403836177, 0.06367079065632075]}, "mutation_prompt": null}
{"id": "3e35ae75-6863-421a-8695-a9e552632910", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "2982ea41-a730-4ba6-b5bb-246480dfaab2", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "97fd3e2d-9b2c-4d65-a146-bf05ac6d3f7b", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "f0fa9496-192b-4a8a-9121-85a583707168", "solution": "import numpy as np\n\nclass AdaptiveMutationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                \n                historical_improvements = np.mean(np.abs(harmony_memory - new_solution), axis=0)\n                mutation_strength = 0.1 + 0.9 * (1 / (1 + historical_improvements))\n\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + mutation_strength * velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "AdaptiveMutationHarmonySearch", "description": "Introducing a novel adaptive mutation strategy based on harmonic mean of historical fitness improvements to promote exploration towards promising regions for faster convergence.", "configspace": "", "generation": 87, "fitness": 0.20478549612403704, "feedback": "The algorithm AdaptiveMutationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7556107803608201, 0.6921959389492074, 0.7240114004272269, 0.6003596526543493, 0.5575880672389728, 0.4717458048516707, 0.6390438164717154, 0.642116159381392, 0.6059398643248051, 0.06074366341158077, 0.030109865865245555, 0.13033158338976814, 0.030575435036940157, 0.07899982677147799, 0.03679415344921255, 0.013613089684328172, 0.04301352268313985, 9.999999999998899e-05, 0.12164983157625486, 0.10347302511418932, 0.0840231156963076, 0.13515559676736322, 0.08223690881416768, 0.0977457623323209, 0.07517228241431473, 0.06787145393996774, 0.08245920836795817, 0.07800742819802853, 0.07206593010081774, 0.08911416072034994, 0.08538208075661202, 0.0722661212748138, 0.09982297882720925, 0.08013513358493984, 0.06583604654319075, 0.06352891826095597, 0.5667849805330067, 0.45404221092439134, 0.7089657182912061, 0.5389020615607816, 0.23269093686393894, 0.12175343274923811, 0.11678142778434286, 0.41329964671617914, 0.09838902906763047, 0.3627311778692165, 0.37403402812218123, 0.2593317372702547, 0.32185019670387316, 0.24070068488656893, 0.20807997725376048, 0.36728109544951504, 0.2221754208321478, 0.36666049137859147, 0.1688409687404463, 0.22537460885050176, 0.13490865090128734, 0.36008503839325057, 0.26021331356889277, 0.2523975243791008, 0.22461117671415332, 0.18235014377722558, 0.20943715862576462, 0.1953318366937966, 0.11070356224023126, 0.16316430654040848, 0.1756993253587028, 0.21441981918023523, 0.13578106074225793, 0.17701010133528017, 0.2612605243481839, 0.17349382182451356, 0.1591209610333042, 0.15867024677984554, 0.13312648907779545, 0.1311268529018027, 0.15888400581341067, 0.16607347033664233, 0.14127671370294104, 0.13994983781614267, 0.17346394584139324, 9.999999999998899e-05, 0.0113404195357234, 0.000561985018341371, 0.0004551170756974532, 9.999999999998899e-05, 9.999999999998899e-05, 0.022396493468645695, 0.00927951014570827, 0.038996362364665416, 0.11311462558894092, 0.10369474914896415, 0.11768416060247222, 0.06531481893076418, 0.045896792191923996, 0.06523721223760781, 0.08795772385226397, 0.07738392587243581, 0.10133472357506146, 0.1502431711775174, 0.09225672169494958, 0.07656330891143459, 0.1411636337047315, 0.12607214351666518, 0.06607859822703033, 0.2024258470942808, 0.08639862056170988, 0.11953422930345348, 0.19690657439056725, 0.11956866842598557, 0.13979317770688726, 0.08089594437616632, 0.11476587792993465, 0.11410609048576148, 0.06401123345830217, 0.08313391948748483, 0.06976058557456544, 0.5055386179904667, 0.5145776140609575, 0.5200866876879837, 0.4697911950346425, 0.42032612722389495, 0.44715756570431775, 0.5078270253281906, 0.5035482469704737, 0.5561966870294294, 0.11727833446255531, 0.03780389000590201, 0.038355685752267, 0.10945886668895088, 0.08444343487699135, 0.09161089457069704, 0.12188273772120606, 0.08069514186285964, 0.10866015101078608, 0.29637443278866915, 0.28557982365757273, 0.2728274620116885, 0.23141959380136656, 0.19606899305390302, 0.1422024602761499, 0.268863958088812, 0.1274865511183947, 0.18772227400631447, 0.17334055142873972, 0.24328692078495728, 0.292695032859387, 0.3320256867288399, 0.2961842558983404, 0.27418272681035816, 0.2327558920940832, 0.22368120364097244, 0.21984670236760262, 0.1181480801282161, 0.24555046615163922, 0.21433114964592537, 0.30281664533053687, 0.2550234323138958, 0.31180190075644865, 0.12487862378654224, 0.1505150195757522, 0.15307984704520627, 0.2291054293082384, 0.2627324997456425, 0.21805201460176582, 0.2332083227257915, 0.21791525541275136, 0.20721941780412, 0.2563808928646426, 0.2035995221084318, 0.21635657312591416, 0.18559810972215385, 0.16840951512014712, 0.1770036349969787, 0.18753115034921364, 0.18018894391499385, 0.18541901532406013, 0.1710222928339754, 0.17493013339367813, 0.17747710969546993, 0.1856447992328456, 0.1886119619254446, 0.18622658998748332, 0.8094929303243724, 0.1693971995815049, 0.14922082153330762, 0.1322123497245974, 0.1609661432168521, 0.23097221575962368, 0.6481064204252023, 0.48618479367458056, 0.5684106644533535, 0.18240926606735364, 0.1426994964597882, 0.15062065742231845, 0.29481158027192, 0.16272363767748377, 0.4228815086050758, 0.2019393836040111, 0.16480513923576323, 0.19390398895121197, 0.18278339912082375, 0.16696446887706695, 0.1775755654389788, 0.16952888430865043, 0.18727601089114276, 0.16872746360833646, 0.08586916257645993, 0.07484635614329105, 0.06274936859140412, 0.10171279104019382, 0.07427154651670431, 0.09625538392905908, 0.10805451320472126, 0.0709620220932271, 0.07907496148440096]}, "mutation_prompt": null}
{"id": "3684fc80-744a-479f-b09c-afd35e91c618", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "146c766b-0fa2-4203-ae55-7422e126a9b7", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "dcd56529-3865-407d-a7f0-1b6a848896f3", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n        mutation_rate = 0.2\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                \n                # Introducing differential evolution mutation\n                mutant = harmony_memory[np.random.choice(np.arange(population_size), replace=False, size=3)]\n                differential_component = mutation_rate * np.sum(mutant, axis=0) / 3\n                mutation_component = np.where(np.random.rand(self.dim) < mutation_rate, differential_component, 0.0)\n                \n                velocity = inertia_weight * velocity + cognitive_component + social_component + mutation_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "EnhancedHarmonySearch", "description": "Enhancing convergence speed by introducing a hybrid mutation strategy combining differential evolution with harmony search for more efficient exploration-exploitation balance.", "configspace": "", "generation": 90, "fitness": 0.20647316134303734, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.48146538522545357, 0.43088818448521293, 0.4615449444890235, 0.4476478312972312, 0.4003428005259344, 0.42875398207998083, 0.4376931959220719, 0.43589122721284124, 0.4924168800215627, 9.999999999998899e-05, 0.0301368516704974, 0.030911412126751747, 0.0544391595138104, 0.015047039551190022, 0.032315120051042645, 0.0024269921427861885, 0.08650795810802736, 0.007422208885109138, 0.10027812968298044, 0.07021193173118645, 0.08690354143871193, 0.09556478623277032, 0.09922464718643331, 0.07568121334093103, 0.0949046027724959, 0.10322279318430605, 0.1151323940503527, 0.08295220804119341, 0.06486296415053616, 0.08188951573535086, 0.09853871828631278, 0.0858711833926804, 0.11066380529872077, 0.08846162699819904, 0.07563154741202727, 0.07228995260611648, 0.9899206893742453, 0.9266066951107278, 0.9932554732945601, 0.9296921805309931, 0.9837192042283798, 0.9473355751849933, 0.9598927583058466, 0.9872381649066766, 0.9863890163874485, 0.20741155807743372, 0.21627446037890574, 0.2341865490653986, 0.19034370017913538, 0.2437491888091038, 0.24616183095582478, 0.21680147313231635, 0.20936149132835769, 0.23277887550473675, 0.30880858097178165, 0.24776644390754965, 0.3378905689260797, 0.6963155299944899, 0.21487203265452504, 0.33636452127726646, 0.21050260091356987, 0.28492572394608306, 0.2171684698186691, 0.26219354194966105, 0.20398061535527345, 0.13031398024857788, 0.122332859799275, 0.12414997830153185, 0.14552671604377643, 0.15505810006660137, 0.1309371100663077, 0.15139361700906795, 0.21453268581015217, 0.13120154531382067, 0.17969713396403963, 0.13489978912215428, 0.14865668913414598, 0.16162330179865714, 0.18920494745494143, 0.13078401742727308, 0.15105746207794524, 0.015601741363719834, 0.06922257006338117, 0.05351079804880443, 0.032282430112274274, 0.0029899091483271967, 9.999999999998899e-05, 0.010132126454866053, 0.007603191952690769, 0.07139283857263412, 0.1042451689087619, 0.08909809313943384, 0.11914640881050031, 0.09643361277258877, 0.01935617682919133, 0.03108416202795017, 0.09653409806132529, 0.08043354042142459, 0.08146377768890056, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007914205549366393, 0.04080230428371345, 0.0042265229761895284, 0.0051748070747175134, 0.010518230282102747, 9.999999999998899e-05, 9.999999999998899e-05, 0.09733712360158897, 0.0719932507107982, 0.03405071253884617, 0.03248022268509043, 0.10290631896832603, 0.06490362380594639, 0.09422490510495551, 0.05956647873306342, 0.11797763007009765, 0.41285859722729346, 0.4096431881173699, 0.451202375769034, 0.3760561167411395, 0.3759556418972858, 0.3597574433316767, 0.41326958101187194, 0.4326646961846392, 0.40061503242773544, 0.07335661832463669, 0.06180247224552726, 0.09420546578322297, 0.07062358904094856, 0.10830205944100268, 0.09872629321935633, 0.08917434321706119, 0.06811053931226485, 0.07901503674209887, 0.13991112215580193, 0.1523000998279349, 0.1369949918593173, 0.14323268864026995, 0.15625399917201632, 0.1530183083708917, 0.15830889855617447, 0.1572665818600597, 0.14513495209302896, 0.28702099364702616, 0.2552806894957502, 0.20862714362636636, 0.2882614376694692, 0.26931249318700545, 0.25486670010662393, 0.2922547162423166, 0.24814012419295306, 0.2692629535851403, 0.2211998786457383, 0.17792672550091115, 0.2045003066569413, 0.21304662561168075, 0.18860092735485234, 0.143335229366239, 0.19684715593100777, 0.20399590174207283, 0.19322556130251378, 0.1895033294411027, 0.21587425883559985, 0.21261831523886277, 0.23213796434863543, 0.200324885727033, 0.18016810308028275, 0.19276544115228222, 0.19427354930047314, 0.19428434950979812, 0.18903705406670124, 0.1889374523094124, 0.18994756783304878, 0.18625307991729656, 0.17964959146782278, 0.19985158575628015, 0.1841053787577802, 0.20214915092311403, 0.17665957570508817, 0.1852958751753606, 0.19614128751293314, 0.18695245919330794, 0.47098700304738117, 0.19206364421091782, 0.19094708605644906, 0.5941928273329284, 0.1322498380334558, 0.41334392881833315, 0.14957153587530525, 0.4006315352406169, 0.1517247437017788, 0.5650723265372692, 0.1685021595873668, 0.1341264376668907, 0.44757443232400873, 0.16612146360227975, 0.16530506197120198, 0.17317250578582932, 0.1805950098573299, 0.17638246257695223, 0.2005213676099763, 0.1962579045789028, 0.16339644241855344, 0.17819741900252306, 0.1654731966309544, 0.1812947940935692, 0.07347597133842065, 0.073967866363844, 0.0889990387310109, 0.07606027542573535, 0.08003778890838453, 0.09708335098897769, 0.07143156522470895, 0.06636220311043994, 0.08318473303200502]}, "mutation_prompt": null}
{"id": "cc98db25-9fe3-4628-9f02-d653d4e00e67", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "69af202f-a7cd-41fb-86f9-ca8056cf83ea", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "6ae49121-80cb-470d-8358-4518c65360f1", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "ef349d94-1b39-4467-93a4-7060c19f0dc5", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "af004605-95f9-4e11-9d66-ef6ae1300bae", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "fd465e62-085a-4951-91c9-c7c3776a0dd2", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "ff489c68-54d8-4253-9336-7502d41f03e6", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
{"id": "6689e77e-fc31-455e-ba7a-04af85f490af", "solution": "import numpy as np\n\nclass ImprovedDynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n        memory = harmony_memory.copy()\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n                memory = np.vstack((memory, harmony_memory[-1]))  # Update individual memory\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "ImprovedDynamicPopulationHarmonySearch", "description": "Implement a dynamic population size adaptation mechanism with individual memory to maintain a diverse set of candidate solutions, enhancing exploration, and exploitation for faster convergence.", "configspace": "", "generation": 98, "fitness": 0.08813593414488549, "feedback": "The algorithm ImprovedDynamicPopulationHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.10.", "error": "", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.14657592461686875, 0.15905119800849532, 0.23605412438696372, 0.13450567622299459, 0.09081596433193628, 0.10433413257713364, 0.0866949945695018, 0.13827434742983824, 0.15871847289211582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04098126038001648, 0.05421647047288736, 0.026644168475689955, 0.04761936941461131, 0.0347295222444407, 0.04296334896420828, 0.04303110110545427, 0.04101784423644517, 0.0360716456806387, 0.029855309406690456, 0.03362918829076844, 0.026784225130637607, 0.03818797266320195, 0.014410837466073967, 0.018338103320176047, 0.021111898265186224, 0.02469308271550763, 0.02179976062732225, 0.13599940326760784, 0.9931744082861412, 0.624719228449166, 0.13307916562770405, 0.09403547680976976, 0.11114101797853237, 0.0922643838577536, 0.09205969206023223, 0.09808896275729351, 0.11747533722757908, 0.08916610759609811, 0.04636471637969242, 0.07717724515690483, 0.0442774908001391, 0.058990810614353184, 0.035526405482989465, 0.0023896201989233035, 0.10440551666690168, 0.1290740125557981, 0.11589236448396878, 0.13821639332623525, 0.08942289900910416, 0.08475249844622157, 0.06661868472759047, 0.09349792859195238, 0.09343914057692126, 0.049238134401976996, 9.999999999998899e-05, 0.0073412738103233455, 0.037396867818437984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011400217575141536, 0.056844453733592815, 0.0037365548184090658, 0.013218924241317875, 0.07404956296935739, 9.999999999998899e-05, 0.004360873282740818, 0.0032484612523334677, 0.01100179097503784, 0.006673032976316384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024884157384641337, 0.06534378130878782, 0.13221768034676784, 0.014698103997061063, 0.028091962574963714, 0.0477472612620371, 0.03409031502128834, 0.017202684237001997, 0.01563392432822852, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1422006697514414, 0.19714560560481675, 0.21228864753649568, 0.1782370105246922, 0.210277298812241, 0.14810490185073866, 0.1716325292709876, 0.1895096581593697, 0.17044520674615105, 0.016765041549054338, 0.009360283760923682, 0.026965900954604494, 0.029830979703651783, 0.04603671967660106, 0.04000501772592502, 0.01642711883337411, 0.04089068336398338, 0.046849930845693, 0.11827584256194568, 0.12991739584586137, 0.15814072992191963, 0.12185247495169094, 0.12977448565334748, 0.12898098174507977, 0.1304734319548534, 0.1442485690351636, 0.12010321207783003, 0.14876738005773316, 0.15840815875223546, 0.13355582069688554, 0.1726038330030638, 0.15415641434799432, 0.15268655548696408, 0.15450183353624958, 0.1556119278977237, 0.1380785393513999, 0.09871879483512735, 0.11640644187235316, 0.08437192529140869, 0.128582801037599, 0.11129717063055888, 0.09975825870234234, 0.10610130557847441, 0.09949162147809842, 0.07224311130486771, 0.16561720900417498, 0.1668166912621427, 0.15141735594860262, 0.15325623291123192, 0.15194382032317721, 0.13607953125886885, 0.1545166718136063, 0.1593759927524776, 0.192882333246579, 0.12978381956486573, 0.15095285978607698, 0.13573230826183458, 0.12964926452595282, 0.15462171163446115, 0.13142739897519173, 0.15023901518176175, 0.1412117301745437, 0.1469351965085689, 0.1444297727101559, 0.15417683945313732, 0.15465991003081458, 0.24464052168188732, 0.12672597939815677, 0.1265005139233064, 0.17180733019493533, 0.1254455486871966, 0.1452670505425815, 0.1104647625631191, 0.20463445289646975, 0.22246840410671198, 0.08350382243749843, 0.12012240609562397, 0.11628156697200354, 0.1492861276333517, 0.11533002062571718, 0.13048365237438497, 0.1659518998391959, 0.1909215829926404, 0.1714694130594857, 0.17185304911440602, 0.17980817568534968, 0.1739941961873459, 0.1679872578043029, 0.17247287201601524, 0.17725793502338694, 0.06468691479689337, 0.06151648518409436, 0.044117469793404585, 0.05449923073278318, 0.05757882407993198, 0.050158339336638935, 0.05111767342153395, 0.05383837851443385, 0.05556937222498559]}, "mutation_prompt": null}
{"id": "078a21be-e628-4887-8fc1-245d308a5652", "solution": "import numpy as np\n\nclass DynamicPopulationHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.zeros((population_size, self.dim))\n        inertia_weight = 0.8\n\n        for _ in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(population_size):\n                velocity = velocities[i]\n                inertia_weight *= 0.99\n                cognitive_component = 1.5 * np.random.random() * (harmony_memory[i] - new_solution)\n                social_component = 1.5 * np.random.random() * (harmony_memory[np.random.randint(population_size)] - new_solution)\n                velocity = inertia_weight * velocity + cognitive_component + social_component\n                new_solution = np.clip(new_solution + velocity, self.lower_bound, self.upper_bound)\n\n                if func(new_solution) < func(harmony_memory[i]):\n                    harmony_memory[i] = new_solution\n\n            if (population_size < self.max_population_size) and np.random.rand() < 0.1:\n                population_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "DynamicPopulationHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism based on fitness levels to enhance diversity and exploitation of promising regions more effectively for accelerated convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83d57e42-f635-4c7d-bbb9-6749144afacd", "metadata": {"aucs": [0.7367617143617935, 0.7024417706817696, 0.7384102593763728, 0.6109909869705674, 0.6749115923617333, 0.7043333315185072, 0.5903947228279692, 0.6187031869685384, 0.5886915070378196, 0.11292360591940964, 0.11090831022323477, 0.13563228473945255, 0.025720197156677616, 0.03868526815163664, 0.12493295679769667, 0.06617490631905043, 0.06548090968953202, 0.05353954123364291, 0.10586026896350487, 0.09728017442051473, 0.11559067478381457, 0.10730826876477007, 0.09786959401039785, 0.08300178607313358, 0.0765248048152456, 0.10484515093946012, 0.11512272443689286, 0.10117255629409938, 0.07458645608149694, 0.04674913659282609, 0.07179220242982665, 0.06254795087397069, 0.07089609694968335, 0.08891742266596936, 0.0674612672105408, 0.04535412127267313, 0.9899523608613177, 0.975611994417586, 0.9910898284533914, 0.9016052156308466, 0.9820555561331256, 0.9680401345559121, 0.921120275863546, 0.9646645447419966, 0.9714355988832074, 0.3882707481807677, 0.4254505998535011, 0.34056423627622123, 0.34847039410789793, 0.3257143255128513, 0.33820730615142414, 0.3033340529511779, 0.28193676733566386, 0.3496524344920119, 0.21268976473367474, 0.21113652143262607, 0.41445931540550174, 0.2672317399449061, 0.27049436172413466, 0.2442312857934632, 0.1816966279172496, 0.18717343406302356, 0.2630683873115838, 0.24564503423169304, 0.17381881081205286, 0.14661267455827343, 0.22348953346157763, 0.15342419607077717, 0.25963454679753484, 0.122858677013434, 0.2243496347300984, 0.1678358145231661, 0.2030147713230709, 0.21023747187571185, 0.16302939964727192, 0.22974553520480956, 0.1632398669082722, 0.1709725174169554, 0.1950050822389794, 0.13421504643800475, 0.1732531672210409, 0.18199088477559167, 0.03997612860416955, 0.13789712138503096, 0.0031561383509072227, 0.08938218636753714, 0.13590964677593131, 0.012185210889868126, 0.06708420758458067, 0.08682267898514928, 0.09074862592157007, 0.10755167664181953, 0.21496607332208995, 0.09676573036639968, 0.07324044479686287, 0.09782459338289451, 0.16441714753510261, 0.24069113628250927, 0.13200172720315695, 0.16333277717680306, 0.032481830699827685, 0.04611663166163904, 0.12598742759931358, 0.07776895250109028, 0.06507970252521866, 0.08918326779089925, 0.10610611082707577, 0.07006049193607433, 0.16009640684420534, 0.10299519421547887, 0.08836440285130043, 0.22773967596829747, 0.08451541628358827, 0.21699968687679183, 0.09601988692114538, 0.21820154605180064, 0.13156366564934818, 0.5252872117669118, 0.5577774749547918, 0.5062900846132372, 0.5034713020616595, 0.49072910417594207, 0.5063517669863109, 0.5061190627911623, 0.555116771902999, 0.4968499276525882, 0.14153117334228305, 0.06326510691551135, 0.14548010636365494, 0.11223243871006838, 0.10085733868038382, 0.104342509527943, 0.12554920115438706, 0.11630627017595419, 0.11497828663629994, 0.12348792853278179, 0.26706414608776596, 0.16265758839954647, 0.12997380854070473, 0.14142213102742573, 0.14532007640253997, 0.13299170469511368, 0.1311530989850942, 0.13739645524507504, 0.3247576943571713, 0.2600506938648135, 0.29579577157363024, 0.35650220743113425, 0.3208780359204426, 0.19648539338920623, 0.26465537141159934, 0.20887760955882084, 0.2588377805401948, 0.20259161000133308, 0.33892660421265897, 0.2914636705413671, 0.2350462322688489, 0.27510278809949384, 0.3248499760526977, 0.23114016058317022, 0.1932670210658619, 0.1546246999509493, 0.20463926162211699, 0.21173321597663242, 0.2058846030449365, 0.17681977641746416, 0.19451493623302485, 0.19357848360336316, 0.20247378418093598, 0.21113468781429345, 0.21180522054876072, 0.22491613614214845, 0.17932567654323284, 0.1811934292465287, 0.20241216613100843, 0.19395377216786414, 0.18471729695041395, 0.19856485141396574, 0.1842228677745179, 0.17799046795040063, 0.18627250395824468, 0.8890511212238398, 0.8673055635185385, 0.18630103459593006, 0.18959859958524206, 0.17710725999694932, 0.6210154866148794, 0.1146427815357165, 0.14996490228528325, 0.6175459052614687, 0.3503553005818043, 0.16847301843479112, 0.12537208273993417, 0.519699761257685, 0.29880223158415076, 0.12716194170475936, 0.2054039774888229, 0.1122098198000615, 0.17810123161576252, 0.17711436043969675, 0.17718439249458573, 0.1867254622480694, 0.1854969640998858, 0.17125085858967648, 0.1977127756485647, 0.1798959454329786, 0.1689554821874355, 0.08217888143876628, 0.06912633307321303, 0.0624485293200967, 0.08482258033855028, 0.09185963765622096, 0.07284597411396498, 0.0911581542193648, 0.07687975553424764, 0.07203494074286731]}, "mutation_prompt": null}
