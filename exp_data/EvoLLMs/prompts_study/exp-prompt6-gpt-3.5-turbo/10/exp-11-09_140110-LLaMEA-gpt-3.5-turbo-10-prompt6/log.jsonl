{"id": "3730cae4-a81c-4964-b720-cdec547b690d", "solution": "import numpy as np\n\nclass SocialSwarmOptimization:\n    def __init__(self, budget, dim, swarm_size=20, omega=0.5, phi_p=0.5, phi_g=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 0.1\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "SocialSwarmOptimization", "description": "A novel Metaheuristic algorithm inspired by the behavior of social animals to collectively optimize the search space using a combination of swarm intelligence and local search.", "configspace": "", "generation": 0, "fitness": 0.08258245813013376, "feedback": "The algorithm SocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.08.", "error": "", "parent_id": null, "metadata": {"aucs": [0.18647167553918664, 0.18540353599497594, 0.2262377674158097, 0.09070571847865416, 0.06840049986219787, 0.12307541390879762, 0.10258651441175948, 0.08250221543077929, 0.08103388841684067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02577541880174372, 0.027380158978349223, 0.020790015235378045, 0.017814731218660174, 0.03681615743433486, 0.02384500843903492, 0.026599616322604325, 0.057507206744062955, 0.06063585252738035, 0.03178892932682886, 0.027910429067171227, 0.019425175029664232, 0.053256808203003825, 0.03904230470681891, 0.009448180416323115, 0.03465866311250376, 0.0010401438983171918, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.02575373856374985, 0.060990591295671415, 0.011635269498037282, 0.04029399861172167, 0.04986736111818424, 0.04558944665391895, 9.999999999998899e-05, 0.011898058897537145, 9.999999999998899e-05, 0.16275076823360435, 0.131932284892063, 0.16231556646325607, 0.043398560809774445, 0.12145626494789119, 0.0024954931266636393, 0.026279303607937843, 0.07269286292921606, 0.05974058797684634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028741278353249244, 0.049702965717765224, 9.999999999998899e-05, 0.19721145623176262, 0.18858437955070606, 0.17814910751933766, 0.18797909301968985, 0.17933993757557842, 0.17331210165907762, 0.19710949476886408, 0.1852213897562517, 0.18341070674869886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016617841937626165, 0.08317874717543405, 9.999999999998899e-05, 0.03873145136083789, 0.045176425141636, 0.04631564265811372, 9.999999999998899e-05, 0.024728098325903947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1728628767958038, 0.22707169853810105, 0.2010690317357139, 0.13073412038941934, 0.12025379309870021, 0.10744951729196894, 0.25146961253873545, 0.1909761741032372, 0.19968229037453888, 0.0021308774647809114, 9.999999999998899e-05, 9.999999999998899e-05, 0.03195784696396131, 0.028190124657182736, 0.0302235554448671, 0.02414423285793732, 0.05532042598556597, 0.05738449978822513, 0.08480596844452304, 0.13330354400345246, 0.12445932663428672, 0.09855305120349966, 0.10998966026874846, 0.09821740850863625, 0.09935338989144804, 0.12787046659602042, 0.08947007888618386, 0.12772428602840868, 0.15002295538688848, 0.12629116898882597, 0.16477819507777225, 0.17601981566417257, 0.16337717702902954, 0.12482964176516398, 0.17377774300845283, 0.12145714194565371, 0.07423491338776278, 0.060012007049425886, 0.08671685370634974, 0.11888129937869074, 0.1159116797046672, 0.11569030967214167, 0.05648699256316181, 0.09386031173166853, 0.05577961406026588, 0.2681172128025403, 0.2508775842744384, 0.24249026296887288, 0.24955478449407342, 0.25530301011474377, 0.25027134355997616, 0.2541879090361423, 0.26454775940164865, 0.2767386386115369, 0.16041400405327333, 0.15924601611014555, 0.15571624221826363, 0.15834958165661595, 0.16143834827971715, 0.160027817916514, 0.1715368901647486, 0.1697614759840853, 0.15581737195092338, 0.12773611190773804, 0.12904163634886445, 0.14157420015301836, 0.11001808418751624, 0.1207914665021157, 0.09912209921798731, 0.07245568600050101, 0.1104765434814241, 0.06399360079399052, 0.20406624846428034, 0.1963552172309898, 0.0437125040435431, 0.05989996158032884, 0.09853450893181781, 0.05916245969077116, 0.15520098841824637, 0.10801926817729013, 0.09695336617113659, 0.18150321600036357, 0.19796775914917575, 0.1847780418279945, 0.16798317462068935, 0.1657455078289467, 0.1744883909366488, 0.1706695058853267, 0.17658846887437396, 0.17593354456765808, 0.0569140226233511, 0.05852792061049916, 0.053703470119079944, 0.06088185365051946, 0.06163393867867195, 0.04583194170347449, 0.056879371532662426, 0.05235440416660553, 0.04769120674194671]}, "mutation_prompt": null}
{"id": "b471e167-6f16-4898-b223-107fa29cf7a3", "solution": "import numpy as np\n\nclass EnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim, swarm_size=20, omega=0.5, phi_p=0.5, phi_g=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 0.1\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Dynamic step adjustment\n                else:\n                    step_size *= 0.9  # Dynamic step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "EnhancedSocialSwarmOptimization", "description": "Enhancing the convergence speed by dynamically adjusting the local search step size based on fitness improvement.", "configspace": "", "generation": 1, "fitness": 0.08287711578050294, "feedback": "The algorithm EnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.08.", "error": "", "parent_id": "3730cae4-a81c-4964-b720-cdec547b690d", "metadata": {"aucs": [0.18339555563454868, 0.18014067295627867, 0.22947468492830725, 0.09025877719419839, 0.07073241546516329, 0.11787830673868027, 0.10725866284338004, 0.08092560196213294, 0.0851470129601617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044402057181884835, 0.03452364799705132, 0.01670772003850507, 0.02488497724226313, 0.024437420316885672, 0.02522565494291451, 0.02690419353552609, 0.05527646149249321, 0.053190019904753694, 0.04875470988092767, 0.031248395697706988, 0.017593150418651615, 0.051747808646007254, 0.03597983671214222, 0.002190333854079074, 0.009446640326025602, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.02458276075186039, 0.061207991078935486, 0.019504705724474825, 0.041156588516601755, 0.046306578014760125, 0.044825055250044765, 9.999999999998899e-05, 0.012533574987920515, 9.999999999998899e-05, 0.16242864026553694, 0.15049960301387455, 0.15628536659209835, 0.037268053054673844, 0.12223204804038978, 9.999999999998899e-05, 0.026279303607937843, 0.0781211787131022, 0.05974058797684634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00703115025382417, 0.04694491849498028, 9.999999999998899e-05, 0.19000665820690532, 0.17240899551926891, 0.17064359359772097, 0.1900391998651061, 0.18504792022969285, 0.21290985883558733, 0.2020786990111213, 0.18786542848853227, 0.19244691693195182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042849286168738954, 9.999999999998899e-05, 0.037905028698700716, 0.0527337912764817, 0.05308074880316105, 9.999999999998899e-05, 0.0506728716096293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16663495327869515, 0.2229904763064371, 0.20350866850513272, 0.13176774734106622, 0.12079041797369405, 0.11093093228594553, 0.25555735948173897, 0.2046400731025413, 0.20841243914613816, 0.004516738759582806, 9.999999999998899e-05, 9.999999999998899e-05, 0.02480193749237458, 0.022039748325084818, 0.02948300765612255, 0.025053004297814763, 0.04261444380808321, 0.056582629417336605, 0.1457862428343396, 0.1274455246569982, 0.12446844344433705, 0.09855305120349966, 0.12910742668529296, 0.08661433396341867, 0.09995672305390524, 0.08645776030851393, 0.07962114191633995, 0.13734685671807056, 0.14691267883520576, 0.12906681966414324, 0.17665009316562696, 0.17568440131542506, 0.17568409503130622, 0.12334925707811384, 0.17377774300845283, 0.11812417622511018, 0.07456721093119778, 0.06232356528370797, 0.09220362697831719, 0.11875475747390374, 0.1088550131759739, 0.13065848151566462, 0.05806584253808089, 0.10146267148527799, 0.07029985465853639, 0.24421965662527212, 0.24586680301664432, 0.25226050534900046, 0.23045618210777763, 0.2533908259536106, 0.25686124086035866, 0.2579116748850159, 0.26333611922950484, 0.2592572492855968, 0.15172190085350834, 0.15279092119253235, 0.16098322896854567, 0.16020733157562828, 0.16119140687801958, 0.1548072182277831, 0.16104463004975256, 0.16832111947126982, 0.14689178576189788, 0.1406177702507131, 0.14732985864233628, 0.15847191658866722, 0.1109254395489574, 0.1207914665021157, 0.10305390594154051, 0.07245568600050101, 0.11138672176481668, 0.06567100210498378, 0.16702883262173218, 0.18200213978686275, 0.04425223686981139, 0.06221025572842975, 0.1026843476972581, 0.06041774802014499, 0.13274889583765948, 0.09868235794944236, 0.1003003596666342, 0.17899223304274914, 0.1754027578354611, 0.17272766035785136, 0.1781452919144385, 0.18423275397455252, 0.18299979266040822, 0.17483818306197285, 0.18503349414201453, 0.17649758302060492, 0.07627950964836472, 0.048138027084804524, 0.05101185858483026, 0.06359432492015071, 0.07181711862869655, 0.06288087449150448, 0.058618832110113206, 0.052080538879884064, 0.06128706209105017]}, "mutation_prompt": null}
{"id": "3e3300a1-10bf-4ce6-b84c-11e7c324e746", "solution": "import numpy as np\n\nclass EnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim, swarm_size=20, omega=0.5, phi_p=0.5, phi_g=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 0.1\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Dynamic step adjustment\n                else:\n                    step_size *= 0.9  # Dynamic step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "EnhancedSocialSwarmOptimization", "description": "Enhancing the convergence speed by dynamically adjusting the local search step size based on fitness improvement.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b471e167-6f16-4898-b223-107fa29cf7a3", "metadata": {"aucs": [0.18339555563454868, 0.18014067295627867, 0.22947468492830725, 0.09025877719419839, 0.07073241546516329, 0.11787830673868027, 0.10725866284338004, 0.08092560196213294, 0.0851470129601617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044402057181884835, 0.03452364799705132, 0.01670772003850507, 0.02488497724226313, 0.024437420316885672, 0.02522565494291451, 0.02690419353552609, 0.05527646149249321, 0.053190019904753694, 0.04875470988092767, 0.031248395697706988, 0.017593150418651615, 0.051747808646007254, 0.03597983671214222, 0.002190333854079074, 0.009446640326025602, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.02458276075186039, 0.061207991078935486, 0.019504705724474825, 0.041156588516601755, 0.046306578014760125, 0.044825055250044765, 9.999999999998899e-05, 0.012533574987920515, 9.999999999998899e-05, 0.16242864026553694, 0.15049960301387455, 0.15628536659209835, 0.037268053054673844, 0.12223204804038978, 9.999999999998899e-05, 0.026279303607937843, 0.0781211787131022, 0.05974058797684634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00703115025382417, 0.04694491849498028, 9.999999999998899e-05, 0.19000665820690532, 0.17240899551926891, 0.17064359359772097, 0.1900391998651061, 0.18504792022969285, 0.21290985883558733, 0.2020786990111213, 0.18786542848853227, 0.19244691693195182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042849286168738954, 9.999999999998899e-05, 0.037905028698700716, 0.0527337912764817, 0.05308074880316105, 9.999999999998899e-05, 0.0506728716096293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16663495327869515, 0.2229904763064371, 0.20350866850513272, 0.13176774734106622, 0.12079041797369405, 0.11093093228594553, 0.25555735948173897, 0.2046400731025413, 0.20841243914613816, 0.004516738759582806, 9.999999999998899e-05, 9.999999999998899e-05, 0.02480193749237458, 0.022039748325084818, 0.02948300765612255, 0.025053004297814763, 0.04261444380808321, 0.056582629417336605, 0.1457862428343396, 0.1274455246569982, 0.12446844344433705, 0.09855305120349966, 0.12910742668529296, 0.08661433396341867, 0.09995672305390524, 0.08645776030851393, 0.07962114191633995, 0.13734685671807056, 0.14691267883520576, 0.12906681966414324, 0.17665009316562696, 0.17568440131542506, 0.17568409503130622, 0.12334925707811384, 0.17377774300845283, 0.11812417622511018, 0.07456721093119778, 0.06232356528370797, 0.09220362697831719, 0.11875475747390374, 0.1088550131759739, 0.13065848151566462, 0.05806584253808089, 0.10146267148527799, 0.07029985465853639, 0.24421965662527212, 0.24586680301664432, 0.25226050534900046, 0.23045618210777763, 0.2533908259536106, 0.25686124086035866, 0.2579116748850159, 0.26333611922950484, 0.2592572492855968, 0.15172190085350834, 0.15279092119253235, 0.16098322896854567, 0.16020733157562828, 0.16119140687801958, 0.1548072182277831, 0.16104463004975256, 0.16832111947126982, 0.14689178576189788, 0.1406177702507131, 0.14732985864233628, 0.15847191658866722, 0.1109254395489574, 0.1207914665021157, 0.10305390594154051, 0.07245568600050101, 0.11138672176481668, 0.06567100210498378, 0.16702883262173218, 0.18200213978686275, 0.04425223686981139, 0.06221025572842975, 0.1026843476972581, 0.06041774802014499, 0.13274889583765948, 0.09868235794944236, 0.1003003596666342, 0.17899223304274914, 0.1754027578354611, 0.17272766035785136, 0.1781452919144385, 0.18423275397455252, 0.18299979266040822, 0.17483818306197285, 0.18503349414201453, 0.17649758302060492, 0.07627950964836472, 0.048138027084804524, 0.05101185858483026, 0.06359432492015071, 0.07181711862869655, 0.06288087449150448, 0.058618832110113206, 0.052080538879884064, 0.06128706209105017]}, "mutation_prompt": null}
{"id": "c3fcffde-3e2f-4652-8549-e31feaee78ae", "solution": "import numpy as np\n\nclass EnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim, swarm_size=20, omega=0.5, phi_p=0.5, phi_g=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 0.1\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Dynamic step adjustment\n                else:\n                    step_size *= 0.9  # Dynamic step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "EnhancedSocialSwarmOptimization", "description": "Enhancing the convergence speed by dynamically adjusting the local search step size based on fitness improvement.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b471e167-6f16-4898-b223-107fa29cf7a3", "metadata": {"aucs": [0.18339555563454868, 0.18014067295627867, 0.22947468492830725, 0.09025877719419839, 0.07073241546516329, 0.11787830673868027, 0.10725866284338004, 0.08092560196213294, 0.0851470129601617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044402057181884835, 0.03452364799705132, 0.01670772003850507, 0.02488497724226313, 0.024437420316885672, 0.02522565494291451, 0.02690419353552609, 0.05527646149249321, 0.053190019904753694, 0.04875470988092767, 0.031248395697706988, 0.017593150418651615, 0.051747808646007254, 0.03597983671214222, 0.002190333854079074, 0.009446640326025602, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.02458276075186039, 0.061207991078935486, 0.019504705724474825, 0.041156588516601755, 0.046306578014760125, 0.044825055250044765, 9.999999999998899e-05, 0.012533574987920515, 9.999999999998899e-05, 0.16242864026553694, 0.15049960301387455, 0.15628536659209835, 0.037268053054673844, 0.12223204804038978, 9.999999999998899e-05, 0.026279303607937843, 0.0781211787131022, 0.05974058797684634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00703115025382417, 0.04694491849498028, 9.999999999998899e-05, 0.19000665820690532, 0.17240899551926891, 0.17064359359772097, 0.1900391998651061, 0.18504792022969285, 0.21290985883558733, 0.2020786990111213, 0.18786542848853227, 0.19244691693195182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042849286168738954, 9.999999999998899e-05, 0.037905028698700716, 0.0527337912764817, 0.05308074880316105, 9.999999999998899e-05, 0.0506728716096293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16663495327869515, 0.2229904763064371, 0.20350866850513272, 0.13176774734106622, 0.12079041797369405, 0.11093093228594553, 0.25555735948173897, 0.2046400731025413, 0.20841243914613816, 0.004516738759582806, 9.999999999998899e-05, 9.999999999998899e-05, 0.02480193749237458, 0.022039748325084818, 0.02948300765612255, 0.025053004297814763, 0.04261444380808321, 0.056582629417336605, 0.1457862428343396, 0.1274455246569982, 0.12446844344433705, 0.09855305120349966, 0.12910742668529296, 0.08661433396341867, 0.09995672305390524, 0.08645776030851393, 0.07962114191633995, 0.13734685671807056, 0.14691267883520576, 0.12906681966414324, 0.17665009316562696, 0.17568440131542506, 0.17568409503130622, 0.12334925707811384, 0.17377774300845283, 0.11812417622511018, 0.07456721093119778, 0.06232356528370797, 0.09220362697831719, 0.11875475747390374, 0.1088550131759739, 0.13065848151566462, 0.05806584253808089, 0.10146267148527799, 0.07029985465853639, 0.24421965662527212, 0.24586680301664432, 0.25226050534900046, 0.23045618210777763, 0.2533908259536106, 0.25686124086035866, 0.2579116748850159, 0.26333611922950484, 0.2592572492855968, 0.15172190085350834, 0.15279092119253235, 0.16098322896854567, 0.16020733157562828, 0.16119140687801958, 0.1548072182277831, 0.16104463004975256, 0.16832111947126982, 0.14689178576189788, 0.1406177702507131, 0.14732985864233628, 0.15847191658866722, 0.1109254395489574, 0.1207914665021157, 0.10305390594154051, 0.07245568600050101, 0.11138672176481668, 0.06567100210498378, 0.16702883262173218, 0.18200213978686275, 0.04425223686981139, 0.06221025572842975, 0.1026843476972581, 0.06041774802014499, 0.13274889583765948, 0.09868235794944236, 0.1003003596666342, 0.17899223304274914, 0.1754027578354611, 0.17272766035785136, 0.1781452919144385, 0.18423275397455252, 0.18299979266040822, 0.17483818306197285, 0.18503349414201453, 0.17649758302060492, 0.07627950964836472, 0.048138027084804524, 0.05101185858483026, 0.06359432492015071, 0.07181711862869655, 0.06288087449150448, 0.058618832110113206, 0.052080538879884064, 0.06128706209105017]}, "mutation_prompt": null}
{"id": "7d5aeada-66ee-4a0a-a3f4-d00135d28426", "solution": "import numpy as np\n\nclass DynamicPopulationSizeEnhancedSocialSwarmOptimization(EnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 0.1\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Dynamic step adjustment\n                else:\n                    step_size *= 0.9  # Dynamic step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicPopulationSizeEnhancedSocialSwarmOptimization", "description": "Enhancing convergence speed by incorporating a dynamic population size adjustment mechanism based on fitness diversity.", "configspace": "", "generation": 4, "fitness": 0.08499841723797531, "feedback": "The algorithm DynamicPopulationSizeEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.08.", "error": "", "parent_id": "b471e167-6f16-4898-b223-107fa29cf7a3", "metadata": {"aucs": [0.1851874450762674, 0.31063355309901985, 0.21706107873258929, 0.09019750566115214, 0.0784248270031983, 0.08423205358541785, 0.12603227129411076, 0.10401397645514121, 0.08322487532635792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020985103703181407, 0.040910610226667865, 0.027843400037326882, 0.015813694052834615, 0.044981302624314434, 0.014682485080134366, 0.02750282605156229, 0.06657893825920491, 0.019478169761439124, 0.023073830969102205, 0.034226570854582805, 0.01877827521478681, 0.056599806562599, 0.04781032079406522, 0.004320948307413919, 0.00014576406474464676, 0.023998340292935794, 0.0008142440099043746, 0.05555329829004918, 0.04260106108859796, 0.04287777107098589, 0.053340261193588256, 0.05604528965584543, 0.037428727900089886, 0.0638860334912611, 0.05711622255335602, 0.0392018832149682, 0.04101014336937592, 0.016890565665003465, 9.999999999998899e-05, 0.03917964661252904, 0.047233098528282946, 0.027500733611159567, 9.999999999998899e-05, 0.023538984821981468, 9.999999999998899e-05, 0.1722691781359943, 0.1714052804146784, 0.14098613824161332, 0.08406300943360134, 0.027286955323714723, 0.012768200654854955, 0.05113574577626134, 0.07387226929628254, 0.0421829026790731, 0.052849311596462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1821833693350675, 0.20523737713563006, 0.18387305676795573, 0.1909855477319643, 0.19133187637781057, 0.21840106588398245, 0.2067567549388939, 0.2249381188830032, 0.19927033042295217, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09960668683494822, 0.0380562073504872, 0.058904913905681866, 0.05536447430380864, 0.05234476350560857, 0.044613560727385315, 0.07046602018621073, 0.0810299438350055, 0.018438310939837166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20984608239824687, 0.15528825328048534, 0.1691158399375856, 0.1456627050392454, 0.14536427712149858, 0.1204260484514651, 0.21944005289047708, 0.19958218389472504, 0.2108861528806628, 0.0036041144665341918, 9.999999999998899e-05, 9.999999999998899e-05, 0.04345721493610877, 0.02370703781544725, 0.05936125265802983, 0.03672409125756715, 0.05775973302449822, 0.05201169149487028, 0.16063870682852377, 0.16359967360959637, 0.11438411629578826, 0.10726209399654818, 0.11539366863097567, 0.10038566447483932, 0.09537923372234558, 0.11332880886946073, 0.08021703325362706, 0.11995634998662985, 0.14361914387100383, 0.12166298996275782, 0.1611402127649313, 0.17453862617423233, 0.17292947797176406, 0.12196768236881561, 0.17826300691900976, 0.12906297730091898, 0.07351810456001262, 0.05950786391100138, 0.0654523985293094, 0.12797542875779933, 0.12601510188607112, 0.1449474140862923, 0.05766166794743388, 0.13085373069853978, 0.05958634636890314, 0.21390088686407494, 0.2833924153088814, 0.26220005847116323, 0.267090054244144, 0.25918145950257976, 0.25629199499475885, 0.23838131612349045, 0.23608212606307266, 0.26684363965099067, 0.1689193622401477, 0.15949992526905576, 0.16530718899957997, 0.17019123974970585, 0.16079477906680517, 0.15921109056547578, 0.16276063742268487, 0.17235162005626348, 0.16089855056013713, 0.16188964156480234, 0.07466602457976645, 0.08293598861391926, 0.17017466607601217, 0.1207914665021157, 0.10944205534840135, 0.073275379886659, 0.09700007546377487, 0.07082825207298915, 0.19855362996836434, 0.06533509616680999, 0.038419558901691575, 0.06462006219085903, 0.06102305585449197, 0.047292456605458444, 0.1631624684839229, 0.15357246693034354, 0.10960755651647502, 0.18471418620997648, 0.18870821920012637, 0.19267194777206853, 0.1651155842055445, 0.16839481497344222, 0.1673603450752733, 0.16783710874464342, 0.1722359198619644, 0.1838749472793476, 0.04834139457057096, 0.05418083130145113, 0.058778068307517084, 0.047287916373295436, 0.05142678693173652, 0.05974784206877648, 0.06433871444437778, 0.059618970187761966, 0.061174714934446484]}, "mutation_prompt": null}
{"id": "b4218136-7088-4148-9062-fedd0a76926f", "solution": "import numpy as np\n\nclass AdaptiveInertiaDynamicPopulationSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 0.1\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Dynamic step adjustment\n                else:\n                    step_size *= 0.9  # Dynamic step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        inertia_weight = 0.5  # Initial inertia weight\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n                inertia_weight *= 0.99  # Adaptive inertia weight\n        return best_position", "name": "AdaptiveInertiaDynamicPopulationSizeEnhancedSocialSwarmOptimization", "description": "Introducing adaptive inertia weight to dynamically adjust the algorithm's convergence speed based on local fitness improvements.", "configspace": "", "generation": 5, "fitness": 0.08243444631625584, "feedback": "The algorithm AdaptiveInertiaDynamicPopulationSizeEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.08.", "error": "", "parent_id": "7d5aeada-66ee-4a0a-a3f4-d00135d28426", "metadata": {"aucs": [0.15593639390134717, 0.21885673379872184, 0.20189889416281315, 0.08952233024927114, 0.08023560948980579, 0.08423205358541785, 0.12980222556566845, 0.10504074796035745, 0.08072796947023686, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030597909786277522, 0.033858306526086235, 0.021109754178239237, 0.017009944698432422, 0.04150090395202244, 0.018948472041591224, 0.02583797476362437, 0.04005260240112751, 0.019478169761439124, 0.02883187078966698, 0.04061840116057536, 0.030961836642686702, 0.0525435764917942, 0.04985199820806663, 0.0005520780679375559, 9.999999999998899e-05, 0.05227493569277719, 9.999999999998899e-05, 0.05625460675239213, 0.04079799350857083, 0.04287777107098589, 0.053340261193588256, 0.059653950747105444, 0.037428727900089886, 0.0638860334912611, 0.060484570420284545, 0.0392018832149682, 0.04242236800572552, 0.013439270268895465, 9.999999999998899e-05, 0.037835439608367105, 0.06259723893771119, 0.02130811681398137, 9.999999999998899e-05, 0.022540268321828094, 9.999999999998899e-05, 0.15696667982692558, 0.171037779810865, 0.13175846326887508, 0.10090089102613853, 0.02725496812965944, 0.005061784219950072, 0.05272361315019969, 0.06082198195307298, 0.0421829026790731, 0.08886267454659424, 0.01964780858586368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1701189145317734, 0.17681330737768097, 0.19845671621269012, 0.18728440592873308, 0.1897531686506171, 0.1802977109189664, 0.19657714233290557, 0.2008067881874741, 0.17121921161731424, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07484101244080954, 9.999999999998899e-05, 0.059642333122491786, 0.03692290692975453, 0.04295539169699192, 0.026056400035716076, 9.999999999998899e-05, 0.06037283465631882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21585032925746017, 0.1543110204174052, 0.1690193353493814, 0.1366177446870921, 0.12960809478896318, 0.11394026707655025, 0.20730957987506826, 0.18080984859006644, 0.21045435885418096, 0.0036041144665341918, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627947688099232, 0.01652474727753528, 0.05936125265802983, 0.02554357130132867, 0.050031927860121894, 0.05201169149487028, 0.12942168617295613, 0.14703106959937962, 0.09553662523294948, 0.10711757472412009, 0.13199151225026162, 0.08714518545558148, 0.09917325333329807, 0.17676879258392508, 0.09631722972431611, 0.12221936618854756, 0.1458524764716541, 0.12797976902127006, 0.1601740764415155, 0.15918634353577177, 0.17597211340436458, 0.12272265069712307, 0.17377774300845283, 0.13123300058119491, 0.07890321749834928, 0.06634599261927321, 0.0654523985293094, 0.13605255990179121, 0.14267150971903486, 0.1470742185373738, 0.058731385496453736, 0.09525101505663791, 0.06705931673799148, 0.24603297877930785, 0.27262891992812366, 0.2564239787838877, 0.28964548156329495, 0.23111119166497252, 0.23162880316851808, 0.27712482541158023, 0.24473461872406554, 0.2357897845891076, 0.18541423817699154, 0.15143227579540341, 0.16117063466605996, 0.16465641866912173, 0.15761597093033308, 0.15618907431467266, 0.1615215538720055, 0.17027893181293585, 0.15149083624577597, 0.1510192726925741, 0.07466602457976645, 0.08228552566005509, 0.16892391903627868, 0.1207914665021157, 0.09757155257528538, 0.07611568016703363, 0.09643604708838482, 0.08740659856831257, 0.16786745567260863, 0.06533509616680999, 0.03651457562233773, 0.06584532330744752, 0.06030325706512485, 0.04672658747083902, 0.1662256087951739, 0.11618392997561655, 0.09577672965724393, 0.17516552594100743, 0.1751143324512059, 0.17253239103686935, 0.1791528056587236, 0.18511900239621149, 0.17497948122735762, 0.17411859594372547, 0.17270067544111534, 0.18331674428572908, 0.07299026925607865, 0.06007528025646258, 0.04892574497385671, 0.04992674672400621, 0.05266386624851127, 0.05005229790282051, 0.06261875070000422, 0.07876275108880182, 0.05931254628193605]}, "mutation_prompt": null}
{"id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "solution": "import numpy as np\n\nclass AdaptiveStepSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveStepSizeEnhancedSocialSwarmOptimization", "description": "Improving convergence speed by introducing a novel adaptive step size mechanism during local search to enhance exploration-exploitation balance.", "configspace": "", "generation": 6, "fitness": 0.16063034408069313, "feedback": "The algorithm AdaptiveStepSizeEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "7d5aeada-66ee-4a0a-a3f4-d00135d28426", "metadata": {"aucs": [0.2704113251484437, 0.29058754202003334, 0.26611519512165527, 0.2594037980140613, 0.22395326823572537, 0.24405488081755267, 0.2224743469359577, 0.24084346349453545, 0.23100708515448298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08301484487797661, 0.06501706431593524, 0.06733930609774852, 0.06353448966415232, 0.07027894161877501, 0.07039897469352707, 0.06610800108662895, 0.07201615363403102, 0.06411237180967455, 0.06970051111426767, 0.07106634872355244, 0.059636936246896255, 0.0530744501048801, 0.06445510819525191, 0.05609532342928636, 0.06087243491516714, 0.056252821859872126, 0.050881515946995415, 0.6589325625545839, 0.8887203095178526, 0.7755412010912883, 0.9752106829063645, 0.7804042372882694, 0.9722953023477113, 0.9190603578755017, 0.8463294739844706, 0.9289789302140122, 0.12920420218645445, 0.13530219256303533, 0.12482792895694506, 0.13768182636689852, 0.14420299863926045, 0.10439534645191428, 0.14175590504566848, 0.12487261438293262, 0.1270832422059197, 0.1991589978526509, 0.17811244797337478, 0.20044078317733194, 0.18185188394877339, 0.21525507743850836, 0.21181655317751025, 0.15790480812021102, 0.18153507341906894, 0.18703217852021004, 0.08008196844010795, 0.0879891756485669, 0.06598260929033173, 0.08549526829399023, 0.049864218297548946, 0.04211616780338534, 0.08777775995937809, 0.06911299506131285, 0.09712195363422327, 0.13743022404596927, 0.18102582429186664, 0.1277805332723665, 0.14003962830666883, 0.12451984148117712, 0.1237267487747804, 0.140315824685729, 0.1462543675347142, 0.1276162640579792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09886107825164603, 0.07357247001656286, 0.09775982026849728, 0.0746645869447542, 0.10365268102202374, 0.07337260057835793, 0.0891506931149253, 0.10061521562880549, 0.1596133993096881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02832308772027392, 0.02141195655106276, 0.009443664861959022, 0.00886218429732577, 0.012431255959178489, 0.005380355350053101, 0.0019939729459576006, 0.010223545249447907, 0.0020787671768348615, 0.296714450669363, 0.25292756778339953, 0.272839434762992, 0.24092724651100006, 0.2329207643868796, 0.25147246576069804, 0.266149601013696, 0.2744311773699496, 0.315870018204638, 0.05962120601758447, 0.05719395122726656, 0.056236096236315314, 0.07819818449192062, 0.06097234357329939, 0.07254708187263315, 0.07902356223660767, 0.0696272048334664, 0.08465574888846261, 0.15053262242194687, 0.15233415057495436, 0.12358676931798074, 0.1793823411956983, 0.1505828723490129, 0.12751766353666294, 0.15441668977290268, 0.14682246738272442, 0.13781714497171782, 0.19721277870000797, 0.19794692516874646, 0.19408148160459937, 0.21730723074217795, 0.21436159599361315, 0.22131860862541064, 0.20798396595210833, 0.18816079678665087, 0.20468276090926607, 0.13106821562898097, 0.13400259697857708, 0.13678052752770908, 0.15543390972564575, 0.17425623111813382, 0.17817827118984986, 0.13858054288237143, 0.13883383811871464, 0.12774847308653947, 0.21665239659274893, 0.21534785538901602, 0.2157700053630317, 0.19554497839925156, 0.23298783533047995, 0.2315235906209333, 0.20766919591657473, 0.23215705684561927, 0.23575416942882266, 0.16367520073491193, 0.1670552322362151, 0.17285228595752977, 0.1655558040940861, 0.1727524628940601, 0.17391441040369793, 0.17769187530463693, 0.17654956902211638, 0.16562606202735097, 0.24966246314014107, 0.17108752851255304, 0.17162119220237437, 0.29201729086987127, 0.14949590464332596, 0.3457498196623393, 0.21844630444184643, 0.298557409626355, 0.33911242359205473, 0.2937229614879243, 0.1998824797763712, 0.42978876027929425, 0.16712524406903906, 0.2703535441702627, 0.19497478275932656, 0.15270623507492542, 0.21840943128757306, 0.26487444440952923, 0.1792789745049136, 0.18490998665262315, 0.18172276075888538, 0.17595520997656333, 0.17663509095187546, 0.18472440210632957, 0.17274827224296574, 0.16995260849083338, 0.17046120102343287, 0.07624242655524871, 0.11044719195191466, 0.09364207030015681, 0.07927902462564851, 0.06518438959880946, 0.07841698796426422, 0.06470666100161904, 0.07303141831522475, 0.07991153012810448]}, "mutation_prompt": null}
{"id": "1fe58451-32d7-4146-81d5-6efc3598f674", "solution": "import numpy as np\n\nclass AdaptiveStepSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveStepSizeEnhancedSocialSwarmOptimization", "description": "Improving convergence speed by introducing a novel adaptive step size mechanism during local search to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.2704113251484437, 0.29058754202003334, 0.26611519512165527, 0.2594037980140613, 0.22395326823572537, 0.24405488081755267, 0.2224743469359577, 0.24084346349453545, 0.23100708515448298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08301484487797661, 0.06501706431593524, 0.06733930609774852, 0.06353448966415232, 0.07027894161877501, 0.07039897469352707, 0.06610800108662895, 0.07201615363403102, 0.06411237180967455, 0.06970051111426767, 0.07106634872355244, 0.059636936246896255, 0.0530744501048801, 0.06445510819525191, 0.05609532342928636, 0.06087243491516714, 0.056252821859872126, 0.050881515946995415, 0.6589325625545839, 0.8887203095178526, 0.7755412010912883, 0.9752106829063645, 0.7804042372882694, 0.9722953023477113, 0.9190603578755017, 0.8463294739844706, 0.9289789302140122, 0.12920420218645445, 0.13530219256303533, 0.12482792895694506, 0.13768182636689852, 0.14420299863926045, 0.10439534645191428, 0.14175590504566848, 0.12487261438293262, 0.1270832422059197, 0.1991589978526509, 0.17811244797337478, 0.20044078317733194, 0.18185188394877339, 0.21525507743850836, 0.21181655317751025, 0.15790480812021102, 0.18153507341906894, 0.18703217852021004, 0.08008196844010795, 0.0879891756485669, 0.06598260929033173, 0.08549526829399023, 0.049864218297548946, 0.04211616780338534, 0.08777775995937809, 0.06911299506131285, 0.09712195363422327, 0.13743022404596927, 0.18102582429186664, 0.1277805332723665, 0.14003962830666883, 0.12451984148117712, 0.1237267487747804, 0.140315824685729, 0.1462543675347142, 0.1276162640579792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09886107825164603, 0.07357247001656286, 0.09775982026849728, 0.0746645869447542, 0.10365268102202374, 0.07337260057835793, 0.0891506931149253, 0.10061521562880549, 0.1596133993096881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02832308772027392, 0.02141195655106276, 0.009443664861959022, 0.00886218429732577, 0.012431255959178489, 0.005380355350053101, 0.0019939729459576006, 0.010223545249447907, 0.0020787671768348615, 0.296714450669363, 0.25292756778339953, 0.272839434762992, 0.24092724651100006, 0.2329207643868796, 0.25147246576069804, 0.266149601013696, 0.2744311773699496, 0.315870018204638, 0.05962120601758447, 0.05719395122726656, 0.056236096236315314, 0.07819818449192062, 0.06097234357329939, 0.07254708187263315, 0.07902356223660767, 0.0696272048334664, 0.08465574888846261, 0.15053262242194687, 0.15233415057495436, 0.12358676931798074, 0.1793823411956983, 0.1505828723490129, 0.12751766353666294, 0.15441668977290268, 0.14682246738272442, 0.13781714497171782, 0.19721277870000797, 0.19794692516874646, 0.19408148160459937, 0.21730723074217795, 0.21436159599361315, 0.22131860862541064, 0.20798396595210833, 0.18816079678665087, 0.20468276090926607, 0.13106821562898097, 0.13400259697857708, 0.13678052752770908, 0.15543390972564575, 0.17425623111813382, 0.17817827118984986, 0.13858054288237143, 0.13883383811871464, 0.12774847308653947, 0.21665239659274893, 0.21534785538901602, 0.2157700053630317, 0.19554497839925156, 0.23298783533047995, 0.2315235906209333, 0.20766919591657473, 0.23215705684561927, 0.23575416942882266, 0.16367520073491193, 0.1670552322362151, 0.17285228595752977, 0.1655558040940861, 0.1727524628940601, 0.17391441040369793, 0.17769187530463693, 0.17654956902211638, 0.16562606202735097, 0.24966246314014107, 0.17108752851255304, 0.17162119220237437, 0.29201729086987127, 0.14949590464332596, 0.3457498196623393, 0.21844630444184643, 0.298557409626355, 0.33911242359205473, 0.2937229614879243, 0.1998824797763712, 0.42978876027929425, 0.16712524406903906, 0.2703535441702627, 0.19497478275932656, 0.15270623507492542, 0.21840943128757306, 0.26487444440952923, 0.1792789745049136, 0.18490998665262315, 0.18172276075888538, 0.17595520997656333, 0.17663509095187546, 0.18472440210632957, 0.17274827224296574, 0.16995260849083338, 0.17046120102343287, 0.07624242655524871, 0.11044719195191466, 0.09364207030015681, 0.07927902462564851, 0.06518438959880946, 0.07841698796426422, 0.06470666100161904, 0.07303141831522475, 0.07991153012810448]}, "mutation_prompt": null}
{"id": "ef81256f-24be-48ab-b66e-b71c568837b8", "solution": "import numpy as np\n\nclass AdaptiveStepSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveStepSizeEnhancedSocialSwarmOptimization", "description": "Improving convergence speed by introducing a novel adaptive step size mechanism during local search to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.2704113251484437, 0.29058754202003334, 0.26611519512165527, 0.2594037980140613, 0.22395326823572537, 0.24405488081755267, 0.2224743469359577, 0.24084346349453545, 0.23100708515448298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08301484487797661, 0.06501706431593524, 0.06733930609774852, 0.06353448966415232, 0.07027894161877501, 0.07039897469352707, 0.06610800108662895, 0.07201615363403102, 0.06411237180967455, 0.06970051111426767, 0.07106634872355244, 0.059636936246896255, 0.0530744501048801, 0.06445510819525191, 0.05609532342928636, 0.06087243491516714, 0.056252821859872126, 0.050881515946995415, 0.6589325625545839, 0.8887203095178526, 0.7755412010912883, 0.9752106829063645, 0.7804042372882694, 0.9722953023477113, 0.9190603578755017, 0.8463294739844706, 0.9289789302140122, 0.12920420218645445, 0.13530219256303533, 0.12482792895694506, 0.13768182636689852, 0.14420299863926045, 0.10439534645191428, 0.14175590504566848, 0.12487261438293262, 0.1270832422059197, 0.1991589978526509, 0.17811244797337478, 0.20044078317733194, 0.18185188394877339, 0.21525507743850836, 0.21181655317751025, 0.15790480812021102, 0.18153507341906894, 0.18703217852021004, 0.08008196844010795, 0.0879891756485669, 0.06598260929033173, 0.08549526829399023, 0.049864218297548946, 0.04211616780338534, 0.08777775995937809, 0.06911299506131285, 0.09712195363422327, 0.13743022404596927, 0.18102582429186664, 0.1277805332723665, 0.14003962830666883, 0.12451984148117712, 0.1237267487747804, 0.140315824685729, 0.1462543675347142, 0.1276162640579792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09886107825164603, 0.07357247001656286, 0.09775982026849728, 0.0746645869447542, 0.10365268102202374, 0.07337260057835793, 0.0891506931149253, 0.10061521562880549, 0.1596133993096881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02832308772027392, 0.02141195655106276, 0.009443664861959022, 0.00886218429732577, 0.012431255959178489, 0.005380355350053101, 0.0019939729459576006, 0.010223545249447907, 0.0020787671768348615, 0.296714450669363, 0.25292756778339953, 0.272839434762992, 0.24092724651100006, 0.2329207643868796, 0.25147246576069804, 0.266149601013696, 0.2744311773699496, 0.315870018204638, 0.05962120601758447, 0.05719395122726656, 0.056236096236315314, 0.07819818449192062, 0.06097234357329939, 0.07254708187263315, 0.07902356223660767, 0.0696272048334664, 0.08465574888846261, 0.15053262242194687, 0.15233415057495436, 0.12358676931798074, 0.1793823411956983, 0.1505828723490129, 0.12751766353666294, 0.15441668977290268, 0.14682246738272442, 0.13781714497171782, 0.19721277870000797, 0.19794692516874646, 0.19408148160459937, 0.21730723074217795, 0.21436159599361315, 0.22131860862541064, 0.20798396595210833, 0.18816079678665087, 0.20468276090926607, 0.13106821562898097, 0.13400259697857708, 0.13678052752770908, 0.15543390972564575, 0.17425623111813382, 0.17817827118984986, 0.13858054288237143, 0.13883383811871464, 0.12774847308653947, 0.21665239659274893, 0.21534785538901602, 0.2157700053630317, 0.19554497839925156, 0.23298783533047995, 0.2315235906209333, 0.20766919591657473, 0.23215705684561927, 0.23575416942882266, 0.16367520073491193, 0.1670552322362151, 0.17285228595752977, 0.1655558040940861, 0.1727524628940601, 0.17391441040369793, 0.17769187530463693, 0.17654956902211638, 0.16562606202735097, 0.24966246314014107, 0.17108752851255304, 0.17162119220237437, 0.29201729086987127, 0.14949590464332596, 0.3457498196623393, 0.21844630444184643, 0.298557409626355, 0.33911242359205473, 0.2937229614879243, 0.1998824797763712, 0.42978876027929425, 0.16712524406903906, 0.2703535441702627, 0.19497478275932656, 0.15270623507492542, 0.21840943128757306, 0.26487444440952923, 0.1792789745049136, 0.18490998665262315, 0.18172276075888538, 0.17595520997656333, 0.17663509095187546, 0.18472440210632957, 0.17274827224296574, 0.16995260849083338, 0.17046120102343287, 0.07624242655524871, 0.11044719195191466, 0.09364207030015681, 0.07927902462564851, 0.06518438959880946, 0.07841698796426422, 0.06470666100161904, 0.07303141831522475, 0.07991153012810448]}, "mutation_prompt": null}
{"id": "a853cab4-73c2-4bfb-832e-099508081e5e", "solution": "import numpy as np\n\nclass EnhancedDynamicStepSizeEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _local_search(x, f, step_size):\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.2  # Dynamic step adjustment\n                else:\n                    step_size *= 0.8  # Dynamic step adjustment\n            return x, step_size\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i], step_size = _local_search(swarm[i], func, step_size)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "EnhancedDynamicStepSizeEnhancedSocialSwarmOptimization", "description": "Enhancing exploration by incorporating a dynamic mutation strategy that adjusts the step size based on local search performance to accelerate convergence speed.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name '_initialize_swarm' is not defined\").", "error": "NameError(\"name '_initialize_swarm' is not defined\")", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {}, "mutation_prompt": null}
{"id": "d033de69-6ab2-4ba9-8c8b-cd80551b5008", "solution": "import numpy as np\n\nclass DynamicMutationAdaptiveStepSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                step_size = 1.0  # Reset step size for dynamic mutation\n                for _ in range(5):  # Apply dynamic mutation for only 5 iterations\n                    swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                    swarm[i] = _local_search(swarm[i], func)\n                    if func(swarm[i]) < func(best_position):\n                        best_position = np.copy(swarm[i])\n                        step_size *= 1.1  # Adaptive step adjustment\n                    else:\n                        step_size *= 0.9  # Adaptive step adjustment\n        return best_position", "name": "DynamicMutationAdaptiveStepSizeEnhancedSocialSwarmOptimization", "description": "Introducing dynamic mutation with adaptive step size adjustment based on each individual's performance to enhance exploration and exploitation balance, leading to faster convergence.", "configspace": "", "generation": 10, "fitness": 0.15609347708600707, "feedback": "The algorithm DynamicMutationAdaptiveStepSizeEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.26564669898371285, 0.2692526371938083, 0.2843834939508021, 0.22767825206550085, 0.2324754206159343, 0.2317827230242494, 0.25375715652729525, 0.24262942681922894, 0.2273545885960212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06157760792766531, 0.0591125539192171, 0.07914634532521614, 0.09907275467660637, 0.06673226961837886, 0.06489485048724619, 0.06875703057828342, 0.0754714202426161, 0.06848330268128378, 0.06238587695341635, 0.07099039571964272, 0.061885369698448045, 0.07624471941496869, 0.06737589988950621, 0.058585456686964466, 0.06811811297958881, 0.05380430726726304, 0.0640213812326319, 0.8723856011110214, 0.9341496197738159, 0.8479745537279186, 0.9198807761144233, 0.7656701215573856, 0.7672507950454803, 0.894799193315045, 0.8032469042060322, 0.875014960514851, 0.12180137353355347, 0.13229298166115044, 0.13121864979484066, 0.10478487732957331, 0.14261131600602528, 0.13180116531371022, 0.12584489575626867, 0.1443926405113567, 0.14876143225076688, 0.19438666187889764, 0.20395429076030336, 0.18002978063244224, 0.20052247033347181, 0.2184642394782612, 0.1752903487544143, 0.15893981625624765, 0.18289504238183074, 0.17745971276625228, 0.08762086044431217, 0.07054139953688121, 0.07166178945856394, 0.07507988486277717, 0.05208167228304428, 0.08997113314845484, 0.11875391229967369, 0.05549294408761141, 0.07492653237504254, 0.15561932007137425, 0.1405743714185974, 0.11726484128874382, 0.12387358478617749, 0.14261697993984745, 0.11659934728170684, 0.13753068099315935, 0.12853550890849053, 0.16083528297574468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015434658337959761, 9.999999999998899e-05, 9.999999999998899e-05, 0.060072744233972464, 0.09825517949633855, 0.10020314102151973, 0.07322859579404117, 0.05381118303228072, 0.08836423327635079, 0.07354265946733318, 0.1282274082876398, 0.0794330406159941, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012293842961033086, 0.041047704675786334, 0.0132816445327133, 0.046024352183141715, 0.004495725702045039, 0.007827520523666642, 0.004319312566725242, 0.0005713985060817883, 0.005483336241892123, 0.2879529003262037, 0.2763641078352632, 0.2679888731418739, 0.2429839747653365, 0.25805536969699716, 0.26176187065298195, 0.2804407217749507, 0.2817109864717484, 0.28422919911555145, 0.04254492360066631, 0.062009457453338634, 0.05397287745311319, 0.06799410856213339, 0.07243878026444417, 0.05677666937252834, 0.07922202626670738, 0.0639073370698996, 0.06759219290769802, 0.12554519728303126, 0.15535986220508824, 0.15151219340644673, 0.12581844711236922, 0.15760921360034297, 0.12823542664938992, 0.14020139928547082, 0.14026277526328212, 0.12968253356933823, 0.20750028056419167, 0.19546360023566345, 0.18817395230456102, 0.20900533237877295, 0.21887118569633557, 0.22984023384067265, 0.20012013239626347, 0.18723629365898842, 0.2060975701959108, 0.1357524458159185, 0.12773834241234217, 0.14915830417125053, 0.17724610645969863, 0.16161155441889774, 0.16830766281263654, 0.13763175869815292, 0.129407077379884, 0.14211511017223233, 0.2342886549496619, 0.22473608530056122, 0.24889204640434626, 0.2599367612476915, 0.2351839395290659, 0.19489211061634537, 0.22272471363621937, 0.19687114997756217, 0.2049711593506841, 0.16901405091044996, 0.1693191279967412, 0.16259853629261722, 0.17379162551735117, 0.172784209018486, 0.16541805048885994, 0.1620147991904609, 0.1702998363649092, 0.17160495723923463, 0.17962174863155178, 0.1791626453862536, 0.17728776691494808, 0.25349172785585083, 0.14949590464332596, 0.25114762080052466, 0.23991305745063252, 0.2066007067729826, 0.20035870411405998, 0.262029950257467, 0.16649354351014223, 0.158114907946447, 0.16770842981747702, 0.16167551333209862, 0.1657110577111356, 0.22091461964007575, 0.22523449059207068, 0.2086514913356946, 0.19153067098232535, 0.17531600888828036, 0.18545790530696504, 0.18356971004896527, 0.18905658228261235, 0.1896578377600031, 0.2086534405434104, 0.17808973976929232, 0.17466966736180078, 0.07186084150158423, 0.0784099571259752, 0.06589246780101421, 0.07782519692284529, 0.06951614020544383, 0.0662028622507862, 0.08171200706872495, 0.06617202622305052, 0.0706499176143418]}, "mutation_prompt": null}
{"id": "7e67e8f0-4e03-4769-8385-79085d329f3b", "solution": "import numpy as np\n\nclass DynamicAdaptiveLocalSearchEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = np.random.uniform(0.1, 1.0, size=self.dim)\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment based on local landscape\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment based on local landscape\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicAdaptiveLocalSearchEnhancedSocialSwarmOptimization", "description": "Introducing dynamic adaptive local search with varying step sizes based on local landscape curvature to enhance exploitation.", "configspace": "", "generation": 11, "fitness": 0.12728679622099084, "feedback": "The algorithm DynamicAdaptiveLocalSearchEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.26347869239881583, 0.2738028785628501, 0.2749631873066125, 0.21445845395607088, 0.1738433877062232, 0.19921597563341298, 0.23992434665545848, 0.23404692972394847, 0.2245423433679271, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0563122798710437, 0.04825290308884089, 0.0719470887517949, 0.08478213097522092, 0.060096391918447845, 0.06601936296043609, 0.06057525960758847, 0.05298713491223295, 0.05402629539315984, 0.0546635316978753, 0.05888806993619733, 0.06699564401582248, 0.06670094679429528, 0.049034210921367616, 0.057361578510534805, 0.05178506492446977, 0.05775769614040549, 0.04551623952414119, 0.7643780002389735, 0.12367901635213985, 0.1227922452590896, 0.18032714462449462, 0.1502274039185426, 0.13122639245185952, 0.15837214567624414, 0.11674461473615416, 0.1234961780804229, 0.09470551216919443, 0.09606671578368586, 0.12032671787872018, 0.12494501765948263, 0.10633401478632554, 0.12848699556432508, 0.1164806381578708, 0.09540007301502296, 0.11095080564493054, 0.17957016757918698, 0.19926551463222508, 0.18893238675579327, 0.18267246691900896, 0.18625135079335353, 0.1515519140290459, 0.16320048175027568, 0.14016888047543585, 0.1680182303862402, 0.09134387419180934, 0.09329354858754235, 0.09294224459183564, 0.030467083816463125, 0.043457366780855766, 0.05830299145883511, 0.09912025378156719, 0.0689441672142389, 0.07236642658469772, 0.15470082298340204, 0.15503069791424862, 0.1438165671072873, 0.16390867683131005, 0.14253296136186977, 0.15119426753978027, 0.17385801815588853, 0.17087243305105315, 0.1496430748457226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025256466446022974, 9.999999999998899e-05, 0.1742642960412446, 0.06494944375833278, 0.09225259184127788, 0.06563575939167565, 0.09584027195645939, 0.06536631072813237, 0.10225820364928262, 0.09761832334556553, 0.1191061414370933, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015706136479191835, 0.0026622458887183287, 0.011001747839166076, 0.0007365520914647261, 0.009611019046995128, 0.012490938852415145, 9.999999999998899e-05, 0.024093127543396653, 0.0003199264477113939, 0.24937645473073655, 0.26253740836161965, 0.26260284134851863, 0.24679088645938907, 0.2252533452741583, 0.24341902749173494, 0.29282771278902087, 0.3128275528440687, 0.2703507507894477, 0.03535363909489675, 0.04518946785210243, 0.043946276758615066, 0.05916088906506378, 0.06240558884133296, 0.0685368982415745, 0.05404446821774034, 0.0638083667434921, 0.06019308791779787, 0.14101473912108142, 0.14828920991603223, 0.14734784053335404, 0.13448910873445852, 0.13105397340705982, 0.13331807181664668, 0.13711748650958056, 0.13674210513629426, 0.14573587835290236, 0.17863003133504207, 0.1911293632398039, 0.1815745944152396, 0.23582274041791784, 0.22789407429569164, 0.22802266998787923, 0.17988927831516188, 0.1811982219996099, 0.16475761400290134, 0.12969933013792412, 0.12343342621627396, 0.11933085308470603, 0.16872954188883926, 0.18368313865064423, 0.17518021146472218, 0.12942403193174268, 0.14463979564112073, 0.11432102028458846, 0.2218687364616564, 0.22659778634567163, 0.2557029909054388, 0.23134879257099705, 0.20837163940824155, 0.24224801783926098, 0.22119873283696578, 0.25089823397181166, 0.2244471090635597, 0.17283213253174123, 0.1700537162977318, 0.16715378075047715, 0.1624415382791773, 0.16640362559517308, 0.17200268455461099, 0.16854990055533947, 0.16426262972483419, 0.16767134896368685, 0.17646424235762348, 0.17427881371058773, 0.17133967423656704, 0.26837123819254805, 0.16862865118830528, 0.1712161006225853, 0.12849036646114909, 0.3389229327917367, 0.2390890546332577, 0.2917352461344247, 0.2648053267996564, 0.27104337746248075, 0.16569757574760602, 0.15408151052424401, 0.15377542605004724, 0.22357261064677414, 0.23840090074023246, 0.20849536197854057, 0.17042978103145912, 0.18701418890832877, 0.19278722861039754, 0.17223286291771933, 0.18526579994622716, 0.17959573807752527, 0.1734877749129804, 0.16714633042393556, 0.18686369476373688, 0.06373003380808073, 0.08111901542117106, 0.08729811050054537, 0.0796113594302531, 0.06786157792971936, 0.07522014047624126, 0.09379841028690339, 0.0727222912436235, 0.05999479429611476]}, "mutation_prompt": null}
{"id": "066cb17f-c030-496d-8448-23e16f23bf0c", "solution": "import numpy as np\n\nclass AdaptiveStepSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveStepSizeEnhancedSocialSwarmOptimization", "description": "Improving convergence speed by introducing a novel adaptive step size mechanism during local search to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.2704113251484437, 0.29058754202003334, 0.26611519512165527, 0.2594037980140613, 0.22395326823572537, 0.24405488081755267, 0.2224743469359577, 0.24084346349453545, 0.23100708515448298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08301484487797661, 0.06501706431593524, 0.06733930609774852, 0.06353448966415232, 0.07027894161877501, 0.07039897469352707, 0.06610800108662895, 0.07201615363403102, 0.06411237180967455, 0.06970051111426767, 0.07106634872355244, 0.059636936246896255, 0.0530744501048801, 0.06445510819525191, 0.05609532342928636, 0.06087243491516714, 0.056252821859872126, 0.050881515946995415, 0.6589325625545839, 0.8887203095178526, 0.7755412010912883, 0.9752106829063645, 0.7804042372882694, 0.9722953023477113, 0.9190603578755017, 0.8463294739844706, 0.9289789302140122, 0.12920420218645445, 0.13530219256303533, 0.12482792895694506, 0.13768182636689852, 0.14420299863926045, 0.10439534645191428, 0.14175590504566848, 0.12487261438293262, 0.1270832422059197, 0.1991589978526509, 0.17811244797337478, 0.20044078317733194, 0.18185188394877339, 0.21525507743850836, 0.21181655317751025, 0.15790480812021102, 0.18153507341906894, 0.18703217852021004, 0.08008196844010795, 0.0879891756485669, 0.06598260929033173, 0.08549526829399023, 0.049864218297548946, 0.04211616780338534, 0.08777775995937809, 0.06911299506131285, 0.09712195363422327, 0.13743022404596927, 0.18102582429186664, 0.1277805332723665, 0.14003962830666883, 0.12451984148117712, 0.1237267487747804, 0.140315824685729, 0.1462543675347142, 0.1276162640579792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09886107825164603, 0.07357247001656286, 0.09775982026849728, 0.0746645869447542, 0.10365268102202374, 0.07337260057835793, 0.0891506931149253, 0.10061521562880549, 0.1596133993096881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02832308772027392, 0.02141195655106276, 0.009443664861959022, 0.00886218429732577, 0.012431255959178489, 0.005380355350053101, 0.0019939729459576006, 0.010223545249447907, 0.0020787671768348615, 0.296714450669363, 0.25292756778339953, 0.272839434762992, 0.24092724651100006, 0.2329207643868796, 0.25147246576069804, 0.266149601013696, 0.2744311773699496, 0.315870018204638, 0.05962120601758447, 0.05719395122726656, 0.056236096236315314, 0.07819818449192062, 0.06097234357329939, 0.07254708187263315, 0.07902356223660767, 0.0696272048334664, 0.08465574888846261, 0.15053262242194687, 0.15233415057495436, 0.12358676931798074, 0.1793823411956983, 0.1505828723490129, 0.12751766353666294, 0.15441668977290268, 0.14682246738272442, 0.13781714497171782, 0.19721277870000797, 0.19794692516874646, 0.19408148160459937, 0.21730723074217795, 0.21436159599361315, 0.22131860862541064, 0.20798396595210833, 0.18816079678665087, 0.20468276090926607, 0.13106821562898097, 0.13400259697857708, 0.13678052752770908, 0.15543390972564575, 0.17425623111813382, 0.17817827118984986, 0.13858054288237143, 0.13883383811871464, 0.12774847308653947, 0.21665239659274893, 0.21534785538901602, 0.2157700053630317, 0.19554497839925156, 0.23298783533047995, 0.2315235906209333, 0.20766919591657473, 0.23215705684561927, 0.23575416942882266, 0.16367520073491193, 0.1670552322362151, 0.17285228595752977, 0.1655558040940861, 0.1727524628940601, 0.17391441040369793, 0.17769187530463693, 0.17654956902211638, 0.16562606202735097, 0.24966246314014107, 0.17108752851255304, 0.17162119220237437, 0.29201729086987127, 0.14949590464332596, 0.3457498196623393, 0.21844630444184643, 0.298557409626355, 0.33911242359205473, 0.2937229614879243, 0.1998824797763712, 0.42978876027929425, 0.16712524406903906, 0.2703535441702627, 0.19497478275932656, 0.15270623507492542, 0.21840943128757306, 0.26487444440952923, 0.1792789745049136, 0.18490998665262315, 0.18172276075888538, 0.17595520997656333, 0.17663509095187546, 0.18472440210632957, 0.17274827224296574, 0.16995260849083338, 0.17046120102343287, 0.07624242655524871, 0.11044719195191466, 0.09364207030015681, 0.07927902462564851, 0.06518438959880946, 0.07841698796426422, 0.06470666100161904, 0.07303141831522475, 0.07991153012810448]}, "mutation_prompt": null}
{"id": "94957632-2381-4de2-88be-f735e7e8c9b5", "solution": "import numpy as np\n\nclass DynamicAdaptiveStepSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1 + 0.1 * np.tanh(f(x) - f(x_new))  # Dynamic adaptive step adjustment based on performance difference\n                else:\n                    step_size *= 0.9\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicAdaptiveStepSizeEnhancedSocialSwarmOptimization", "description": "Enhancing exploration by incorporating a dynamic adaptive step size adjustment based on individual particle performance during local search.", "configspace": "", "generation": 13, "fitness": 0.15567964362710768, "feedback": "The algorithm DynamicAdaptiveStepSizeEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.16.", "error": "", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.266994870389034, 0.2875616905069561, 0.2648698333869577, 0.25844196290429955, 0.21991597603807256, 0.23563757091666315, 0.21782300206567784, 0.23803552720157983, 0.22910344850702646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0822670588731973, 0.06447899427692028, 0.06631439574914333, 0.06182868221528148, 0.06969074720823498, 0.06796100799524607, 0.06321165552863273, 0.07134513753943883, 0.060723719339509485, 0.06903777692782187, 0.06896848576132597, 0.05866894841062564, 0.05288369879269794, 0.06297745835881774, 0.05351452229443454, 0.0595627534213532, 0.05599696646316987, 0.04908610636926536, 0.529513772952112, 0.8470251482759346, 0.6916909153482608, 0.9652011530423672, 0.6916545055980037, 0.9603048584591447, 0.8873394953839373, 0.7912702816751092, 0.9022962110360861, 0.11719079003839361, 0.12983004831265188, 0.12254012353047561, 0.12832728958744666, 0.14049251723160083, 0.10034597526412492, 0.13392747284329287, 0.12199796465900525, 0.12034291362985805, 0.1981133823247886, 0.17550955704258764, 0.19942057455242335, 0.17355773208391423, 0.20774918729338065, 0.19681368981629344, 0.15250421769433398, 0.17258760195569323, 0.18368240670417246, 0.0733314334702363, 0.08634901019975261, 0.064020858482704, 0.08382247324184389, 0.04009115069919755, 0.04052621811291357, 0.08564919144797967, 0.06565954680799313, 0.09391953981756329, 0.13638627437304662, 0.180234751262909, 0.12733029053088318, 0.13942323069636264, 0.1240681277235417, 0.12340790557178538, 0.13987089467776948, 0.14569217469734708, 0.12690269324573933, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09424253020803808, 0.0681749832308175, 0.09342227129328462, 0.06702470323270049, 0.09739275840425965, 0.06833639855689433, 0.08518375451892857, 0.09660733680845446, 0.14216422728573708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02355511295909074, 0.02121248138477605, 0.007060924122250234, 0.008590207830508012, 0.011104710070262036, 0.005150962358089095, 0.0016274361138118865, 0.007837685982482578, 0.0011780322192224135, 0.29294692370151987, 0.2483058677705423, 0.27195902989013887, 0.23654761230939947, 0.22790322318719647, 0.2485423222270463, 0.2647952234807145, 0.27271067042020547, 0.315021837544161, 0.058115039759601084, 0.05532593755343729, 0.05421417545042351, 0.07800458980780567, 0.059838246097498105, 0.0699064914947487, 0.07599577108282352, 0.06704075014020672, 0.08430440428467134, 0.14770510529122172, 0.15065486797565286, 0.11964330026876846, 0.1745451182425528, 0.15055839480547006, 0.1260806003556445, 0.15187048420584337, 0.1457155018769336, 0.13647746148180473, 0.19321625143839716, 0.19569766472961336, 0.18988086756861278, 0.2140548076440043, 0.2128137565784577, 0.21834030794125736, 0.2028159606168528, 0.18697706214127519, 0.1970084870425296, 0.12768768584422718, 0.13166277982245722, 0.13355615678913146, 0.15451321583013888, 0.17334521174155326, 0.17612817456972718, 0.13689640404775505, 0.13394328834015778, 0.12674748956757909, 0.21346743122967415, 0.21455267972718417, 0.20467306344734892, 0.19462526133400637, 0.2324519823770428, 0.22513764222161958, 0.20604620500241422, 0.23140604706490686, 0.23439023672011394, 0.1627407868659908, 0.16653061240252298, 0.17214606092284723, 0.16387881646659175, 0.17233909564231142, 0.17299475571173206, 0.17727009543493222, 0.17570281592903303, 0.16523673556666074, 0.2454098125764148, 0.16992150263659167, 0.16969042447194627, 0.28756856938385456, 0.1494786214894026, 0.3400071612309935, 0.19196094379318096, 0.260450705227383, 0.3280962733254399, 0.28936918641632725, 0.1794584737487407, 0.4272230441450271, 0.1650957022148043, 0.2605081997701031, 0.19218303152312888, 0.1513093331802503, 0.21618301706063725, 0.2624048007554335, 0.17520746665521802, 0.18483346076514817, 0.18066777203018192, 0.17164268491830859, 0.175007129124638, 0.18184314518609046, 0.17187541272620221, 0.168828592827874, 0.16915866488432418, 0.07603973930745977, 0.10969858514198949, 0.09253804866699011, 0.07836825035441342, 0.062351885460729006, 0.07609689735470815, 0.06227646121720698, 0.07140447902573233, 0.07965663241574061]}, "mutation_prompt": null}
{"id": "66c7111d-3c5c-41d6-9ed3-b5d47192df59", "solution": "import numpy as np\n\nclass EnhancedAdaptiveStepSizeEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _hybrid_local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 12.0)))  # Enhanced dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _hybrid_local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "EnhancedAdaptiveStepSizeEnhancedSocialSwarmOptimization", "description": "Enhancing convergence speed by integrating a novel hybrid local search strategy with adaptive population resizing for improved exploration-exploitation balance.", "configspace": "", "generation": 14, "fitness": 0.16029839270490207, "feedback": "The algorithm EnhancedAdaptiveStepSizeEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.28979753132285935, 0.2963442893960474, 0.29511181102609585, 0.2594037980140613, 0.2365992068032572, 0.25076725891917817, 0.23526810523938124, 0.23991767913308126, 0.2587561270653763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018685376463292824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059251515844505054, 0.06326411640817275, 0.07025583096561983, 0.06650103741442781, 0.07035308418380204, 0.06618385226301648, 0.07838051653079636, 0.07165695744648726, 0.05904957727883431, 0.05036167521928492, 0.05683603446595731, 0.056708600658101904, 0.06232176296714953, 0.053007528266205584, 0.06053212222144155, 0.05685177541480646, 0.06235072930017671, 0.06543697205418653, 0.8308591971706252, 0.7896715522121296, 0.9685985770618034, 0.9752106829063645, 0.7935934534529057, 0.9722953023477113, 0.7790024615472966, 0.9535306754816186, 0.9656701459613467, 0.11511517160759954, 0.20249854767897613, 0.14816866247055038, 0.1161993846651943, 0.12703181465312496, 0.11531017922363063, 0.12433377069254603, 0.13791150275063013, 0.128631081574633, 0.18704364474029056, 0.17510104366491397, 0.17046354493743043, 0.17075615686325196, 0.2069130701728742, 0.15315042701976977, 0.208760090321789, 0.1511041932270164, 0.18236609165848805, 0.08126526566781944, 0.07624718362478977, 0.07865459237582295, 0.04717510288668636, 0.03543109077338957, 0.0703503176288599, 0.08794233797353534, 0.08277082512862721, 0.06484277281713768, 0.1518485944730653, 0.14896237592797457, 0.13277271615392217, 0.1290266310325625, 0.1579842355960822, 0.13000204247760672, 0.16911912358566894, 0.1297784228383192, 0.13354562682363436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09960984783365712, 0.09201327957416472, 0.09379113583317433, 0.08249882332629221, 0.06506301921386326, 0.0977904938323454, 0.08200515160724786, 0.1005522795193301, 0.12226617846243548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012299893382952232, 0.021143287294442592, 0.007465933170915928, 0.004850740520189856, 0.007806354382259961, 9.999999999998899e-05, 0.003208382188860326, 0.007178786393932546, 0.02088043646586779, 0.24644907902249547, 0.24813689661299754, 0.27284450417293804, 0.2565393103340321, 0.24647510595690936, 0.24315115114706076, 0.29407479472286, 0.2884312140918135, 0.2867103862893472, 0.0661833135479476, 0.05287458475858986, 0.04673097397026027, 0.07433258791220321, 0.05988803715188229, 0.08047658028434923, 0.07467581424067826, 0.06607714219223149, 0.08465574888846261, 0.14027906610279428, 0.17170894360493005, 0.142922092124658, 0.15222803127060192, 0.1505828723490129, 0.1287994847568592, 0.14968173450540856, 0.1380349293859372, 0.13962432235399813, 0.1931504899706472, 0.2123954094365731, 0.18769667702845694, 0.20614570958583245, 0.2163816148048583, 0.21485527810545857, 0.20280445910847633, 0.19007023427587633, 0.18516597929862222, 0.1258318136192329, 0.14212037118524368, 0.13443587958207914, 0.18864318588170292, 0.15633180017282744, 0.16535188743864637, 0.12464739801717895, 0.1412364342206418, 0.15527584515006798, 0.2253712359179061, 0.27439900987728616, 0.23319717259656092, 0.22318415693571325, 0.22799072777578144, 0.20916487907527415, 0.2080943514454242, 0.2279256115380245, 0.21172489517610715, 0.167439628459373, 0.1784226920265659, 0.16660256119303574, 0.17541163480022637, 0.1666672061049057, 0.17663227253751412, 0.16776618800071208, 0.16158678604350174, 0.16400451234597768, 0.21737001966628589, 0.17931658083157398, 0.1622208194289405, 0.27829849843849996, 0.14949590464332596, 0.33699101026590683, 0.2819667503673714, 0.2545050667043667, 0.284137252460298, 0.26927247906678975, 0.16002040137728457, 0.32956698366614323, 0.16497683908445193, 0.29400311060375683, 0.16587306894115206, 0.14932365395544478, 0.22587825970385256, 0.22038051854295937, 0.16611106213953752, 0.18660663432665947, 0.18159633408230558, 0.19073295081178177, 0.18462730295671614, 0.17585612144745388, 0.1813685070728106, 0.1670585182984301, 0.17904071571579172, 0.08209258385669815, 0.09077557553999582, 0.08093807433977818, 0.06366689625074928, 0.07755476637350744, 0.06916222919712478, 0.07587179080690898, 0.07360948940637058, 0.07340278426669533]}, "mutation_prompt": null}
{"id": "184c94f6-000a-44d1-adc1-3c8cd41a59eb", "solution": "import numpy as np\n\nclass AdaptiveStepSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.2  # Adaptive step adjustment improvement\n                else:\n                    step_size *= 0.8  # Adaptive step adjustment improvement\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveStepSizeEnhancedSocialSwarmOptimization", "description": "Accelerating convergence speed by integrating a novel adaptive swarm dynamic adjustment mechanism to enhance exploration-exploitation balance.", "configspace": "", "generation": 15, "fitness": 0.1598733859919674, "feedback": "The algorithm AdaptiveStepSizeEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.3051002985716206, 0.2866163383146001, 0.3060929226466109, 0.2213129488228045, 0.22535068888164056, 0.24564743091437924, 0.24637725140897926, 0.23141084307013682, 0.26290314962017514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08087717626871527, 0.06807098745468354, 0.06971239452257194, 0.07952809397124716, 0.06641069640723762, 0.06414504028249102, 0.07269698070488262, 0.07154269530846835, 0.08882652399418589, 0.0654958468656941, 0.06048575402093337, 0.05805374666676255, 0.06840198166602662, 0.05779590107049992, 0.0604619372357047, 0.058313456100872796, 0.06473605950201566, 0.06263278075676826, 0.8449024425862368, 0.8349858557914833, 0.7830341211971962, 0.864454893607471, 0.7801339140633383, 0.8840761371075938, 0.9197165031314025, 0.8524326903500955, 0.9793604042631658, 0.1205054783723466, 0.11551779596856904, 0.13997119563722027, 0.11716434245671115, 0.16009469873879656, 0.11512415762077599, 0.12148408853796588, 0.14308393638179273, 0.13464772154877813, 0.21147203027051187, 0.20875016105179234, 0.20411354415751226, 0.18040794054517606, 0.16897687353732238, 0.15890478151103704, 0.1885629029224145, 0.17792051293016975, 0.1621572880348161, 0.0627922120820591, 0.06473936733924568, 0.08495850540293781, 0.05345817425586297, 0.05038172526677043, 0.0646297755475489, 0.0812400600256149, 0.07364976274452617, 0.06882075694274448, 0.17593576198824812, 0.19353886149697308, 0.1433795122178626, 0.16594921697953546, 0.1618966637809699, 0.14747039571802922, 0.1575981769645225, 0.14397935393934747, 0.1701074096951921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10925603649601712, 0.10296577523141803, 0.11039891177759731, 0.0810920887588722, 0.06795028837071859, 0.06927799421417569, 0.0966348847137386, 0.10275791765498177, 0.09951651889487934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016339207476258055, 0.01337123398244422, 0.007195856220612029, 0.013443005458983137, 0.01376462994316574, 0.011105630806718225, 0.002559090539165809, 0.003247376227469956, 0.004227468513436583, 0.2719078531968053, 0.2710189190729081, 0.2808400598947206, 0.24836582282100017, 0.329547327787994, 0.2312962523448736, 0.28363799150536306, 0.2888347975556562, 0.2959798052476209, 0.048667630195706635, 0.0414764230491701, 0.04601407238771449, 0.09099789312124162, 0.06421243067102766, 0.0736989347669944, 0.06922948348946634, 0.060095534545342, 0.06363134634120782, 0.16647141399998655, 0.15102654093776113, 0.14952237600974827, 0.13542092674141692, 0.1559190067289743, 0.13667846732371314, 0.14923519493098958, 0.12999866896725598, 0.1601652498256022, 0.18775103367180035, 0.17556821731500694, 0.21127824273999107, 0.21494195954328266, 0.21870860986187468, 0.22581953286343281, 0.18064675243682626, 0.19224329946496077, 0.19339440267640973, 0.1305621948108172, 0.1343271287963147, 0.1532120156066994, 0.15662140251353962, 0.16094403845509953, 0.16264915194348573, 0.13893467429202044, 0.13148493325832733, 0.12299693275466761, 0.21545853281699645, 0.22768484880404516, 0.19297549377546508, 0.21235833362587886, 0.20495151886154284, 0.2222164449671864, 0.2188203993252832, 0.21650102260049475, 0.19478130072211397, 0.17779622379883275, 0.16477910117653993, 0.1669935036187028, 0.16826663867176572, 0.16397991766663367, 0.16781857410865852, 0.16758324124660962, 0.16955595943566149, 0.16931349726971023, 0.22264910043606467, 0.184762991865852, 0.17725641604108056, 0.3242859344089223, 0.1695911297371535, 0.28703254745109563, 0.11694245599956576, 0.2929059677419388, 0.2708767378129271, 0.2857379728340357, 0.17873035758624123, 0.32536381601510933, 0.17838794878072928, 0.3127504443395859, 0.18560723273481528, 0.25351744477124416, 0.24817755422907262, 0.2576137448094056, 0.18936132931316585, 0.1781727214328125, 0.17405662454787307, 0.18258168825715004, 0.18086338182874995, 0.19207487095789044, 0.17703053320184303, 0.1750809344997053, 0.16398288053982246, 0.06809448045331756, 0.07267683736204766, 0.07265833245947528, 0.07572663593713569, 0.06680003923824585, 0.06771302295416914, 0.06660858542486525, 0.07527797975261252, 0.07531054123988412]}, "mutation_prompt": null}
{"id": "a8998b64-4f72-45ab-adc6-77fc107108b4", "solution": "import numpy as np\n\nclass AdaptiveStepSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveStepSizeEnhancedSocialSwarmOptimization", "description": "Improving convergence speed by introducing a novel adaptive step size mechanism during local search to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.2704113251484437, 0.29058754202003334, 0.26611519512165527, 0.2594037980140613, 0.22395326823572537, 0.24405488081755267, 0.2224743469359577, 0.24084346349453545, 0.23100708515448298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08301484487797661, 0.06501706431593524, 0.06733930609774852, 0.06353448966415232, 0.07027894161877501, 0.07039897469352707, 0.06610800108662895, 0.07201615363403102, 0.06411237180967455, 0.06970051111426767, 0.07106634872355244, 0.059636936246896255, 0.0530744501048801, 0.06445510819525191, 0.05609532342928636, 0.06087243491516714, 0.056252821859872126, 0.050881515946995415, 0.6589325625545839, 0.8887203095178526, 0.7755412010912883, 0.9752106829063645, 0.7804042372882694, 0.9722953023477113, 0.9190603578755017, 0.8463294739844706, 0.9289789302140122, 0.12920420218645445, 0.13530219256303533, 0.12482792895694506, 0.13768182636689852, 0.14420299863926045, 0.10439534645191428, 0.14175590504566848, 0.12487261438293262, 0.1270832422059197, 0.1991589978526509, 0.17811244797337478, 0.20044078317733194, 0.18185188394877339, 0.21525507743850836, 0.21181655317751025, 0.15790480812021102, 0.18153507341906894, 0.18703217852021004, 0.08008196844010795, 0.0879891756485669, 0.06598260929033173, 0.08549526829399023, 0.049864218297548946, 0.04211616780338534, 0.08777775995937809, 0.06911299506131285, 0.09712195363422327, 0.13743022404596927, 0.18102582429186664, 0.1277805332723665, 0.14003962830666883, 0.12451984148117712, 0.1237267487747804, 0.140315824685729, 0.1462543675347142, 0.1276162640579792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09886107825164603, 0.07357247001656286, 0.09775982026849728, 0.0746645869447542, 0.10365268102202374, 0.07337260057835793, 0.0891506931149253, 0.10061521562880549, 0.1596133993096881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02832308772027392, 0.02141195655106276, 0.009443664861959022, 0.00886218429732577, 0.012431255959178489, 0.005380355350053101, 0.0019939729459576006, 0.010223545249447907, 0.0020787671768348615, 0.296714450669363, 0.25292756778339953, 0.272839434762992, 0.24092724651100006, 0.2329207643868796, 0.25147246576069804, 0.266149601013696, 0.2744311773699496, 0.315870018204638, 0.05962120601758447, 0.05719395122726656, 0.056236096236315314, 0.07819818449192062, 0.06097234357329939, 0.07254708187263315, 0.07902356223660767, 0.0696272048334664, 0.08465574888846261, 0.15053262242194687, 0.15233415057495436, 0.12358676931798074, 0.1793823411956983, 0.1505828723490129, 0.12751766353666294, 0.15441668977290268, 0.14682246738272442, 0.13781714497171782, 0.19721277870000797, 0.19794692516874646, 0.19408148160459937, 0.21730723074217795, 0.21436159599361315, 0.22131860862541064, 0.20798396595210833, 0.18816079678665087, 0.20468276090926607, 0.13106821562898097, 0.13400259697857708, 0.13678052752770908, 0.15543390972564575, 0.17425623111813382, 0.17817827118984986, 0.13858054288237143, 0.13883383811871464, 0.12774847308653947, 0.21665239659274893, 0.21534785538901602, 0.2157700053630317, 0.19554497839925156, 0.23298783533047995, 0.2315235906209333, 0.20766919591657473, 0.23215705684561927, 0.23575416942882266, 0.16367520073491193, 0.1670552322362151, 0.17285228595752977, 0.1655558040940861, 0.1727524628940601, 0.17391441040369793, 0.17769187530463693, 0.17654956902211638, 0.16562606202735097, 0.24966246314014107, 0.17108752851255304, 0.17162119220237437, 0.29201729086987127, 0.14949590464332596, 0.3457498196623393, 0.21844630444184643, 0.298557409626355, 0.33911242359205473, 0.2937229614879243, 0.1998824797763712, 0.42978876027929425, 0.16712524406903906, 0.2703535441702627, 0.19497478275932656, 0.15270623507492542, 0.21840943128757306, 0.26487444440952923, 0.1792789745049136, 0.18490998665262315, 0.18172276075888538, 0.17595520997656333, 0.17663509095187546, 0.18472440210632957, 0.17274827224296574, 0.16995260849083338, 0.17046120102343287, 0.07624242655524871, 0.11044719195191466, 0.09364207030015681, 0.07927902462564851, 0.06518438959880946, 0.07841698796426422, 0.06470666100161904, 0.07303141831522475, 0.07991153012810448]}, "mutation_prompt": null}
{"id": "d9d8c16d-0227-4a4c-a4b6-c46c2d7f0385", "solution": "import numpy as np\n\nclass AcceleratedStepSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                gradient = np.gradient(f(x))\n                x_new = x - step_size * gradient  # Use gradient for local search\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1\n                else:\n                    step_size *= 0.9\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AcceleratedStepSizeEnhancedSocialSwarmOptimization", "description": "Accelerating convergence by incorporating gradient-based local search after particle movement for faster exploitation of promising regions.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"can't multiply sequence by non-int of type 'float'\").", "error": "TypeError(\"can't multiply sequence by non-int of type 'float'\")", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {}, "mutation_prompt": null}
{"id": "c559e263-9d44-4794-9070-5e8169b4ed26", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _neighborhood_search(x, f):\n            neighborhood_size = 0.1\n            for _ in range(10):\n                x_new = x + neighborhood_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    neighborhood_size *= 1.1  # Adaptive neighborhood adjustment\n                else:\n                    neighborhood_size *= 0.9  # Adaptive neighborhood adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _neighborhood_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveNeighborhoodEnhancedSocialSwarmOptimization", "description": "Introducing an adaptive neighborhood search mechanism to dynamically adjust the exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 18, "fitness": 0.08499841723797531, "feedback": "The algorithm AdaptiveNeighborhoodEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.08.", "error": "", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.1851874450762674, 0.31063355309901985, 0.21706107873258929, 0.09019750566115214, 0.0784248270031983, 0.08423205358541785, 0.12603227129411076, 0.10401397645514121, 0.08322487532635792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020985103703181407, 0.040910610226667865, 0.027843400037326882, 0.015813694052834615, 0.044981302624314434, 0.014682485080134366, 0.02750282605156229, 0.06657893825920491, 0.019478169761439124, 0.023073830969102205, 0.034226570854582805, 0.01877827521478681, 0.056599806562599, 0.04781032079406522, 0.004320948307413919, 0.00014576406474464676, 0.023998340292935794, 0.0008142440099043746, 0.05555329829004918, 0.04260106108859796, 0.04287777107098589, 0.053340261193588256, 0.05604528965584543, 0.037428727900089886, 0.0638860334912611, 0.05711622255335602, 0.0392018832149682, 0.04101014336937592, 0.016890565665003465, 9.999999999998899e-05, 0.03917964661252904, 0.047233098528282946, 0.027500733611159567, 9.999999999998899e-05, 0.023538984821981468, 9.999999999998899e-05, 0.1722691781359943, 0.1714052804146784, 0.14098613824161332, 0.08406300943360134, 0.027286955323714723, 0.012768200654854955, 0.05113574577626134, 0.07387226929628254, 0.0421829026790731, 0.052849311596462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1821833693350675, 0.20523737713563006, 0.18387305676795573, 0.1909855477319643, 0.19133187637781057, 0.21840106588398245, 0.2067567549388939, 0.2249381188830032, 0.19927033042295217, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09960668683494822, 0.0380562073504872, 0.058904913905681866, 0.05536447430380864, 0.05234476350560857, 0.044613560727385315, 0.07046602018621073, 0.0810299438350055, 0.018438310939837166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20984608239824687, 0.15528825328048534, 0.1691158399375856, 0.1456627050392454, 0.14536427712149858, 0.1204260484514651, 0.21944005289047708, 0.19958218389472504, 0.2108861528806628, 0.0036041144665341918, 9.999999999998899e-05, 9.999999999998899e-05, 0.04345721493610877, 0.02370703781544725, 0.05936125265802983, 0.03672409125756715, 0.05775973302449822, 0.05201169149487028, 0.16063870682852377, 0.16359967360959637, 0.11438411629578826, 0.10726209399654818, 0.11539366863097567, 0.10038566447483932, 0.09537923372234558, 0.11332880886946073, 0.08021703325362706, 0.11995634998662985, 0.14361914387100383, 0.12166298996275782, 0.1611402127649313, 0.17453862617423233, 0.17292947797176406, 0.12196768236881561, 0.17826300691900976, 0.12906297730091898, 0.07351810456001262, 0.05950786391100138, 0.0654523985293094, 0.12797542875779933, 0.12601510188607112, 0.1449474140862923, 0.05766166794743388, 0.13085373069853978, 0.05958634636890314, 0.21390088686407494, 0.2833924153088814, 0.26220005847116323, 0.267090054244144, 0.25918145950257976, 0.25629199499475885, 0.23838131612349045, 0.23608212606307266, 0.26684363965099067, 0.1689193622401477, 0.15949992526905576, 0.16530718899957997, 0.17019123974970585, 0.16079477906680517, 0.15921109056547578, 0.16276063742268487, 0.17235162005626348, 0.16089855056013713, 0.16188964156480234, 0.07466602457976645, 0.08293598861391926, 0.17017466607601217, 0.1207914665021157, 0.10944205534840135, 0.073275379886659, 0.09700007546377487, 0.07082825207298915, 0.19855362996836434, 0.06533509616680999, 0.038419558901691575, 0.06462006219085903, 0.06102305585449197, 0.047292456605458444, 0.1631624684839229, 0.15357246693034354, 0.10960755651647502, 0.18471418620997648, 0.18870821920012637, 0.19267194777206853, 0.1651155842055445, 0.16839481497344222, 0.1673603450752733, 0.16783710874464342, 0.1722359198619644, 0.1838749472793476, 0.04834139457057096, 0.05418083130145113, 0.058778068307517084, 0.047287916373295436, 0.05142678693173652, 0.05974784206877648, 0.06433871444437778, 0.059618970187761966, 0.061174714934446484]}, "mutation_prompt": null}
{"id": "8e45064a-dff3-4041-92a7-1e3b1fca9af6", "solution": "import numpy as np\n\nclass AdaptiveStepSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveStepSizeEnhancedSocialSwarmOptimization", "description": "Improving convergence speed by introducing a novel adaptive step size mechanism during local search to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.2704113251484437, 0.29058754202003334, 0.26611519512165527, 0.2594037980140613, 0.22395326823572537, 0.24405488081755267, 0.2224743469359577, 0.24084346349453545, 0.23100708515448298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08301484487797661, 0.06501706431593524, 0.06733930609774852, 0.06353448966415232, 0.07027894161877501, 0.07039897469352707, 0.06610800108662895, 0.07201615363403102, 0.06411237180967455, 0.06970051111426767, 0.07106634872355244, 0.059636936246896255, 0.0530744501048801, 0.06445510819525191, 0.05609532342928636, 0.06087243491516714, 0.056252821859872126, 0.050881515946995415, 0.6589325625545839, 0.8887203095178526, 0.7755412010912883, 0.9752106829063645, 0.7804042372882694, 0.9722953023477113, 0.9190603578755017, 0.8463294739844706, 0.9289789302140122, 0.12920420218645445, 0.13530219256303533, 0.12482792895694506, 0.13768182636689852, 0.14420299863926045, 0.10439534645191428, 0.14175590504566848, 0.12487261438293262, 0.1270832422059197, 0.1991589978526509, 0.17811244797337478, 0.20044078317733194, 0.18185188394877339, 0.21525507743850836, 0.21181655317751025, 0.15790480812021102, 0.18153507341906894, 0.18703217852021004, 0.08008196844010795, 0.0879891756485669, 0.06598260929033173, 0.08549526829399023, 0.049864218297548946, 0.04211616780338534, 0.08777775995937809, 0.06911299506131285, 0.09712195363422327, 0.13743022404596927, 0.18102582429186664, 0.1277805332723665, 0.14003962830666883, 0.12451984148117712, 0.1237267487747804, 0.140315824685729, 0.1462543675347142, 0.1276162640579792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09886107825164603, 0.07357247001656286, 0.09775982026849728, 0.0746645869447542, 0.10365268102202374, 0.07337260057835793, 0.0891506931149253, 0.10061521562880549, 0.1596133993096881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02832308772027392, 0.02141195655106276, 0.009443664861959022, 0.00886218429732577, 0.012431255959178489, 0.005380355350053101, 0.0019939729459576006, 0.010223545249447907, 0.0020787671768348615, 0.296714450669363, 0.25292756778339953, 0.272839434762992, 0.24092724651100006, 0.2329207643868796, 0.25147246576069804, 0.266149601013696, 0.2744311773699496, 0.315870018204638, 0.05962120601758447, 0.05719395122726656, 0.056236096236315314, 0.07819818449192062, 0.06097234357329939, 0.07254708187263315, 0.07902356223660767, 0.0696272048334664, 0.08465574888846261, 0.15053262242194687, 0.15233415057495436, 0.12358676931798074, 0.1793823411956983, 0.1505828723490129, 0.12751766353666294, 0.15441668977290268, 0.14682246738272442, 0.13781714497171782, 0.19721277870000797, 0.19794692516874646, 0.19408148160459937, 0.21730723074217795, 0.21436159599361315, 0.22131860862541064, 0.20798396595210833, 0.18816079678665087, 0.20468276090926607, 0.13106821562898097, 0.13400259697857708, 0.13678052752770908, 0.15543390972564575, 0.17425623111813382, 0.17817827118984986, 0.13858054288237143, 0.13883383811871464, 0.12774847308653947, 0.21665239659274893, 0.21534785538901602, 0.2157700053630317, 0.19554497839925156, 0.23298783533047995, 0.2315235906209333, 0.20766919591657473, 0.23215705684561927, 0.23575416942882266, 0.16367520073491193, 0.1670552322362151, 0.17285228595752977, 0.1655558040940861, 0.1727524628940601, 0.17391441040369793, 0.17769187530463693, 0.17654956902211638, 0.16562606202735097, 0.24966246314014107, 0.17108752851255304, 0.17162119220237437, 0.29201729086987127, 0.14949590464332596, 0.3457498196623393, 0.21844630444184643, 0.298557409626355, 0.33911242359205473, 0.2937229614879243, 0.1998824797763712, 0.42978876027929425, 0.16712524406903906, 0.2703535441702627, 0.19497478275932656, 0.15270623507492542, 0.21840943128757306, 0.26487444440952923, 0.1792789745049136, 0.18490998665262315, 0.18172276075888538, 0.17595520997656333, 0.17663509095187546, 0.18472440210632957, 0.17274827224296574, 0.16995260849083338, 0.17046120102343287, 0.07624242655524871, 0.11044719195191466, 0.09364207030015681, 0.07927902462564851, 0.06518438959880946, 0.07841698796426422, 0.06470666100161904, 0.07303141831522475, 0.07991153012810448]}, "mutation_prompt": null}
{"id": "6f9df319-a52a-4da3-92c0-9e9d11c6556a", "solution": "import numpy as np\n\nclass ImprovedDynamicStepSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.2  # Dynamic step adjustment improvement\n                else:\n                    step_size *= 0.8  # Dynamic step adjustment improvement\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "ImprovedDynamicStepSizeEnhancedSocialSwarmOptimization", "description": "Improving convergence speed by incorporating a dynamic learning rate adjustment mechanism for enhanced exploration and exploitation balance.", "configspace": "", "generation": 20, "fitness": 0.1598733859919674, "feedback": "The algorithm ImprovedDynamicStepSizeEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.3051002985716206, 0.2866163383146001, 0.3060929226466109, 0.2213129488228045, 0.22535068888164056, 0.24564743091437924, 0.24637725140897926, 0.23141084307013682, 0.26290314962017514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08087717626871527, 0.06807098745468354, 0.06971239452257194, 0.07952809397124716, 0.06641069640723762, 0.06414504028249102, 0.07269698070488262, 0.07154269530846835, 0.08882652399418589, 0.0654958468656941, 0.06048575402093337, 0.05805374666676255, 0.06840198166602662, 0.05779590107049992, 0.0604619372357047, 0.058313456100872796, 0.06473605950201566, 0.06263278075676826, 0.8449024425862368, 0.8349858557914833, 0.7830341211971962, 0.864454893607471, 0.7801339140633383, 0.8840761371075938, 0.9197165031314025, 0.8524326903500955, 0.9793604042631658, 0.1205054783723466, 0.11551779596856904, 0.13997119563722027, 0.11716434245671115, 0.16009469873879656, 0.11512415762077599, 0.12148408853796588, 0.14308393638179273, 0.13464772154877813, 0.21147203027051187, 0.20875016105179234, 0.20411354415751226, 0.18040794054517606, 0.16897687353732238, 0.15890478151103704, 0.1885629029224145, 0.17792051293016975, 0.1621572880348161, 0.0627922120820591, 0.06473936733924568, 0.08495850540293781, 0.05345817425586297, 0.05038172526677043, 0.0646297755475489, 0.0812400600256149, 0.07364976274452617, 0.06882075694274448, 0.17593576198824812, 0.19353886149697308, 0.1433795122178626, 0.16594921697953546, 0.1618966637809699, 0.14747039571802922, 0.1575981769645225, 0.14397935393934747, 0.1701074096951921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10925603649601712, 0.10296577523141803, 0.11039891177759731, 0.0810920887588722, 0.06795028837071859, 0.06927799421417569, 0.0966348847137386, 0.10275791765498177, 0.09951651889487934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016339207476258055, 0.01337123398244422, 0.007195856220612029, 0.013443005458983137, 0.01376462994316574, 0.011105630806718225, 0.002559090539165809, 0.003247376227469956, 0.004227468513436583, 0.2719078531968053, 0.2710189190729081, 0.2808400598947206, 0.24836582282100017, 0.329547327787994, 0.2312962523448736, 0.28363799150536306, 0.2888347975556562, 0.2959798052476209, 0.048667630195706635, 0.0414764230491701, 0.04601407238771449, 0.09099789312124162, 0.06421243067102766, 0.0736989347669944, 0.06922948348946634, 0.060095534545342, 0.06363134634120782, 0.16647141399998655, 0.15102654093776113, 0.14952237600974827, 0.13542092674141692, 0.1559190067289743, 0.13667846732371314, 0.14923519493098958, 0.12999866896725598, 0.1601652498256022, 0.18775103367180035, 0.17556821731500694, 0.21127824273999107, 0.21494195954328266, 0.21870860986187468, 0.22581953286343281, 0.18064675243682626, 0.19224329946496077, 0.19339440267640973, 0.1305621948108172, 0.1343271287963147, 0.1532120156066994, 0.15662140251353962, 0.16094403845509953, 0.16264915194348573, 0.13893467429202044, 0.13148493325832733, 0.12299693275466761, 0.21545853281699645, 0.22768484880404516, 0.19297549377546508, 0.21235833362587886, 0.20495151886154284, 0.2222164449671864, 0.2188203993252832, 0.21650102260049475, 0.19478130072211397, 0.17779622379883275, 0.16477910117653993, 0.1669935036187028, 0.16826663867176572, 0.16397991766663367, 0.16781857410865852, 0.16758324124660962, 0.16955595943566149, 0.16931349726971023, 0.22264910043606467, 0.184762991865852, 0.17725641604108056, 0.3242859344089223, 0.1695911297371535, 0.28703254745109563, 0.11694245599956576, 0.2929059677419388, 0.2708767378129271, 0.2857379728340357, 0.17873035758624123, 0.32536381601510933, 0.17838794878072928, 0.3127504443395859, 0.18560723273481528, 0.25351744477124416, 0.24817755422907262, 0.2576137448094056, 0.18936132931316585, 0.1781727214328125, 0.17405662454787307, 0.18258168825715004, 0.18086338182874995, 0.19207487095789044, 0.17703053320184303, 0.1750809344997053, 0.16398288053982246, 0.06809448045331756, 0.07267683736204766, 0.07265833245947528, 0.07572663593713569, 0.06680003923824585, 0.06771302295416914, 0.06660858542486525, 0.07527797975261252, 0.07531054123988412]}, "mutation_prompt": null}
{"id": "43a80110-72f9-42f3-bc27-4e7762abb858", "solution": "import numpy as np\n\nclass DynamicLearningRateEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n                step_size *= 1.05  # Dynamic learning rate adjustment for faster convergence\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicLearningRateEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic learning rate adaptation strategy within the local search process to enhance exploitation and accelerate convergence speed.", "configspace": "", "generation": 21, "fitness": 0.15783522535354144, "feedback": "The algorithm DynamicLearningRateEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.2712839237266814, 0.283654426216552, 0.25326991313769587, 0.19917395358200918, 0.21631336551528557, 0.2292257272994982, 0.23324146570141857, 0.23981894867368858, 0.215871036680508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06085753323577059, 0.07418639914072278, 0.07785801240209111, 0.08021425639085156, 0.055974044278374824, 0.06814182910250255, 0.07588500190064229, 0.06487205749089475, 0.07265356728260397, 0.06948292215635032, 0.05722811491960256, 0.05835789334493835, 0.05752868492995222, 0.056744887812799294, 0.06055835382615948, 0.04912007705175059, 0.05896069682099825, 0.04686375911377105, 0.919665555505792, 0.8930245408689381, 0.8127766197555059, 0.9754029942813864, 0.9781548731408464, 0.9408010170375454, 0.9338670568667031, 0.9868228530438393, 0.9784042953940856, 0.11073415341211024, 0.13818486767816962, 0.12305886830279633, 0.10456769995173232, 0.11462948618639912, 0.11332978047948983, 0.15040467152620518, 0.1337096333392287, 0.12048689184843275, 0.2069796345905629, 0.25819172074439356, 0.1997042567896007, 0.1839974916627637, 0.17275917831151566, 0.15707645788223745, 0.15890321581195133, 0.15909750630076036, 0.15997524000249463, 0.06563602200279661, 0.05590537743535573, 0.08401872741282257, 0.07333037308724255, 0.03929254437992036, 0.05382526216066341, 0.08077628488633348, 0.05527273812940803, 0.06451641801977182, 0.11403195543061262, 0.11302959566304727, 0.1218507679818045, 0.13355273672771106, 0.11488139925812524, 0.11940489016530553, 0.1381314574465532, 0.17024002285874518, 0.11902178614016468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0785762311021756, 0.08064826630770439, 0.1020896032762254, 0.054899292409271716, 0.08232424822888185, 0.0674538838849228, 0.0849252803678926, 0.09083737229996658, 0.0883874688358326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030728917558495272, 0.002007459224230068, 0.002920072553368125, 0.012498960767381107, 0.004496658164715339, 0.001815395176361978, 0.004138602701232785, 0.008834149314576045, 0.0008039904939978193, 0.26718408490367107, 0.26496239941523836, 0.24829783220142876, 0.25462749605412505, 0.2596918301360598, 0.24135813924194682, 0.26192457765918653, 0.2613563841069253, 0.26499165073052355, 0.05978174495840993, 0.04972880316125461, 0.06221227818556163, 0.07709052595235932, 0.06944582652708253, 0.07319215362185028, 0.06801732056241672, 0.0587281904135003, 0.07634825699947945, 0.14804800171374677, 0.1436803339638798, 0.12628317504225528, 0.12995552497812657, 0.14597638940774305, 0.1335075841665555, 0.14298178930550853, 0.14061858685910267, 0.17081974191488447, 0.1942946358808123, 0.19294343565304684, 0.20198261564090736, 0.23689341714326762, 0.21534078011251956, 0.21683753256299976, 0.1904934937168994, 0.18768940207025753, 0.21821178651291373, 0.1537466415327241, 0.14557025446312022, 0.13963421066533832, 0.15642034455429255, 0.16242443892180258, 0.16593484193698516, 0.13428322494183065, 0.11784104354994673, 0.1372873830641358, 0.1922628174712976, 0.21545979157899842, 0.22902710776752688, 0.1956200464986435, 0.20715055080867528, 0.2304564734043727, 0.24061685630810936, 0.23640225996598274, 0.1984837355760104, 0.17158943793318726, 0.1680701954259194, 0.17054010996939928, 0.1747820643382484, 0.1832417906232331, 0.16455076724824447, 0.164895049948935, 0.17051813593128773, 0.16616122223340812, 0.17126659454211934, 0.17190516365052066, 0.166792902312055, 0.2766328557710648, 0.16847566303276895, 0.3070483323032447, 0.2068754881150111, 0.26156262902146654, 0.268768130417402, 0.31114618991694853, 0.16841551387670772, 0.2730989767489629, 0.1343000061298959, 0.16780638434820305, 0.18188194298702787, 0.22712886333505344, 0.23982114608212735, 0.2590529966406062, 0.19987666839086138, 0.17189069982870764, 0.1716191841364414, 0.1864236859957401, 0.17469488255623344, 0.1848203913775487, 0.17093258215318075, 0.1732628572716931, 0.16989600913215674, 0.07916187475034453, 0.06721397069472224, 0.06963905361211875, 0.07061594058516163, 0.10549413388348061, 0.07003639029924558, 0.0702975957807348, 0.0773239663629971, 0.07890486788108153]}, "mutation_prompt": null}
{"id": "a8e36602-886b-4b95-8016-3670854401ca", "solution": "import numpy as np\n\nclass EnhancedStepSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, eval_count):\n            step_size = 1.0 - (eval_count / self.budget)  # Dynamic step size adjustment based on eval count\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        eval_count = 0\n        while eval_count < self.budget:\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func, eval_count)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n                eval_count += 1\n        return best_position", "name": "EnhancedStepSizeEnhancedSocialSwarmOptimization", "description": "Enhancing convergence speed by dynamically adjusting the step size during local search based on function evaluations to improve exploration-exploitation balance.", "configspace": "", "generation": 22, "fitness": 0.1579503178369404, "feedback": "The algorithm EnhancedStepSizeEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.26401749620656045, 0.27341028576544646, 0.27334205466655204, 0.2590772208557488, 0.22589473436688912, 0.21987803379293225, 0.21810231301811278, 0.23782786490113417, 0.22979509812179577, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0641325129784649, 0.07891429727233445, 0.06284495933758572, 0.07018503309241864, 0.06839216479247023, 0.08186650283613439, 0.06877201463184213, 0.0773062867559845, 0.07411004223773676, 0.06360929770767121, 0.06270829090183871, 0.07111752129346716, 0.06362734701930128, 0.06513937837266204, 0.05999044235945439, 0.0628917856105522, 0.061859023118625234, 0.04931079873932653, 0.6569498102469566, 0.8886840590108138, 0.7751618278963865, 0.9752096313523726, 0.780364188806334, 0.9722942253556514, 0.9190203027201935, 0.8462566577356732, 0.9289305644680171, 0.12788885879022582, 0.12401287414164852, 0.12524940822887132, 0.13779900894143737, 0.1439892403647406, 0.10492444051765792, 0.1353458396232713, 0.12653277294905307, 0.1266143966058415, 0.18255651827545094, 0.19339159684928886, 0.18930166697097828, 0.18012508370022406, 0.16590852571843095, 0.17791705512806344, 0.1583044214304158, 0.19857116480089243, 0.18703217852021004, 0.09448697993014177, 0.08243169635939196, 0.06543618315312871, 0.08310427652290142, 0.03963179213387358, 0.0430699342544143, 0.08927448291245221, 0.06809696430910794, 0.09358171421435912, 0.13223435316138332, 0.1799367704002547, 0.12763591771074012, 0.14014713465314832, 0.12452769057740531, 0.12350876201336247, 0.1406944792475593, 0.1460545733298937, 0.12758366059424175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07281831836487895, 0.06760437720727008, 0.09046054878956233, 0.07177487116314829, 0.052415455475191775, 0.05766205675641667, 0.07745453764603971, 0.11601195902200667, 0.10365093025402561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023569550920984894, 0.021121556747807912, 0.011523296007347583, 0.008413881793727152, 0.009729161030466282, 0.009040683569787378, 0.0062300828734419555, 0.005504478730348428, 0.0015667617896016894, 0.2913258240465906, 0.26568703037662456, 0.2745197620034173, 0.24052806524412462, 0.2506764394041796, 0.25500898161668784, 0.26790093007212756, 0.2748595335192182, 0.3160189247564068, 0.060008138273903944, 0.05615271141100442, 0.051485529671163044, 0.08283427258941722, 0.06261680305501327, 0.07002532589268029, 0.06645623562399128, 0.06721182129199332, 0.08434877273326458, 0.13967181936169049, 0.14291950066013237, 0.1424078210269345, 0.13777743278796972, 0.15138077161919505, 0.14304125364106002, 0.14316349352600244, 0.14737657821251382, 0.13875064035475337, 0.18719628820635292, 0.1944320000278762, 0.19964510910942057, 0.19901230983142837, 0.21899584022807606, 0.2050221403023409, 0.19494727813659063, 0.19954096142606237, 0.19380911637497333, 0.13499252057772815, 0.1273811685363484, 0.13888159910761189, 0.1607470682608677, 0.17312771520809278, 0.17012792514910613, 0.16798772184420008, 0.13994172370221292, 0.14197436046077128, 0.210049043871411, 0.1957205462991024, 0.20945371598248907, 0.21810654780821237, 0.2401376631463883, 0.19612404665046723, 0.20350522155245465, 0.18955242103602765, 0.24164437601190747, 0.1642442742733059, 0.16578161677529557, 0.16768752609011972, 0.16725331076429706, 0.17314673537303915, 0.17167731887231497, 0.16247317553665797, 0.17535694829796344, 0.16493192085648078, 0.24834490994370506, 0.1740903238403516, 0.17170903222221545, 0.2903677471248215, 0.14949590464332596, 0.34515644492413255, 0.20568575649460474, 0.2579660530948634, 0.2676682642578049, 0.29159919803992573, 0.25544606402456826, 0.4290783074482981, 0.16893059157367496, 0.2370654115967049, 0.19568873550560228, 0.15124132403077706, 0.21914842248926047, 0.232934089753144, 0.17974006361198402, 0.18473777743104425, 0.16827486994282537, 0.18075126742902026, 0.1876685472132118, 0.16747207298735267, 0.18637534245629606, 0.1769693421593278, 0.1805800997854633, 0.07824368196777653, 0.09422088869206058, 0.06096139743750151, 0.0833516330657359, 0.0762895570910277, 0.08590540398666058, 0.06155800576049075, 0.061097473582578665, 0.07554198518898192]}, "mutation_prompt": null}
{"id": "e42bdf8a-15de-4498-ba6e-8fd108673409", "solution": "import numpy as np\n\nclass DynamicPopulationSizeEnhancedSocialSwarmOptimization:\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1\n                else:\n                    step_size *= 0.9\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            performance = [func(x) for x in swarm]\n            prob = performance / np.sum(performance)\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, p=prob, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicPopulationSizeEnhancedSocialSwarmOptimization", "description": "Enhancing convergence speed by implementing a novel dynamic update strategy for the population size based on individual performance to promote rapid exploration and exploitation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('DynamicPopulationSizeEnhancedSocialSwarmOptimization() takes no arguments').", "error": "TypeError('DynamicPopulationSizeEnhancedSocialSwarmOptimization() takes no arguments')", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {}, "mutation_prompt": null}
{"id": "09f7d541-cf44-4753-a42e-9ed8ec14e70b", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        inertia_weight = 0.9  # Initial inertia weight\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n                inertia_weight = 1 / (1 + np.exp(-0.01 * _) + 0.1)  # Dynamic inertia weight update\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Enhancing convergence speed by adding a dynamic inertia weight update mechanism to improve exploration and exploitation balance.", "configspace": "", "generation": 24, "fitness": 0.15763822393030744, "feedback": "The algorithm DynamicInertiaWeightEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.27539656636972476, 0.3117307796824722, 0.26454832038485043, 0.2541877231266457, 0.2262681607046365, 0.23361053922728747, 0.26452001788163093, 0.2457007899565744, 0.2412521358946681, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06964744083176555, 0.07102786369735692, 0.06750936306514943, 0.05838909748830445, 0.09194645669712775, 0.08745624093182813, 0.06705465033284219, 0.0670784627294273, 0.059081159554623675, 0.061958377931045305, 0.07595882989747171, 0.07223247614456996, 0.055775382265039974, 0.04881331623582863, 0.053907590780333914, 0.06146049247417218, 0.06124927650619427, 0.05282846626836746, 0.843052561638701, 0.8905635500135738, 0.8061666232783117, 0.9762821529026797, 0.6353526371352967, 0.8811987046770906, 0.9192167076980108, 0.8846701397056662, 0.8278126656725114, 0.13636974688856807, 0.11429610839451032, 0.14097973084147963, 0.15577817710147157, 0.1288463436167373, 0.13076769723487291, 0.13731722741330032, 0.1270375363115731, 0.13936544585659172, 0.18581778091656298, 0.20989685053862783, 0.19060086470885773, 0.19181231311783287, 0.17300746918142673, 0.18265137370512508, 0.19296186335451726, 0.20928757115042562, 0.16864109228104773, 0.05194859006170882, 0.10372175481045343, 0.057729428934852334, 0.07170997937665402, 0.07247974322361028, 0.06360525692104124, 0.08821181776067644, 0.08231719472545052, 0.09742588134986341, 0.12559817583259625, 0.16073779221605222, 0.1201404238814473, 0.1342721849390146, 0.13712927027736932, 0.12908079392869698, 0.13671507736436883, 0.18464661515604208, 0.11717004011609455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1304957676534103, 0.0802244139922128, 0.08868050390316462, 0.07369254490693289, 0.06138645505763196, 0.08296001403554165, 0.08354841101242017, 0.11561475375871266, 0.07791132195767092, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010863777351758697, 0.004436385173308022, 0.008783779585269214, 0.018069407376194224, 0.010378190199980764, 0.0074461271936349105, 9.999999999998899e-05, 0.005731302659627957, 0.0028592367238600147, 0.2741604672314901, 0.2563402968591546, 0.2627511760853458, 0.2381912789445716, 0.24891980329363428, 0.2721940272702029, 0.2994752650577267, 0.2705916315434891, 0.2927761649942203, 0.06264859861864791, 0.04776086559521264, 0.06438332514976919, 0.06002354724140457, 0.06570979180424308, 0.07299626734020803, 0.0641876454544359, 0.07307363380270071, 0.09037341448938474, 0.12558462045926366, 0.1452469326864506, 0.15086082260141498, 0.12214781626839177, 0.1472705322993213, 0.16818915542811752, 0.12802947601552495, 0.14652098267268177, 0.12750328815657563, 0.19125900018203756, 0.1948233876406067, 0.21025214416915783, 0.2188797023110719, 0.22165950063392992, 0.2128050936968885, 0.18039902360559623, 0.19588446412935312, 0.1910500417803871, 0.15219812781051967, 0.1301568448538164, 0.129427940702886, 0.15656974702677728, 0.1510054254706611, 0.17090621419822927, 0.1267340269119266, 0.16393740164623283, 0.13497024291016657, 0.2180885126546358, 0.1969757033300531, 0.23104087218286873, 0.21104003408000616, 0.19760509556836114, 0.2424820311196657, 0.2272473551548747, 0.23266225393115092, 0.21099316716766425, 0.16952324319548784, 0.1678023646961183, 0.16951201585386355, 0.18804435424191246, 0.17242628205445687, 0.17064302227016925, 0.16698575467873378, 0.1728958700126143, 0.16944075293582517, 0.1749051724204459, 0.17273004343843545, 0.17401089694602323, 0.2919782664372522, 0.1724897150184186, 0.2901450355967037, 0.22891547721842964, 0.14273377705014556, 0.28834845183366864, 0.3049742603523623, 0.1659223456897968, 0.2988566518766511, 0.16691983984574055, 0.24882399005250888, 0.16739710082520798, 0.23439119506120643, 0.24825147395325942, 0.2290423033857545, 0.17518312387289203, 0.17442616353889207, 0.1722776527658627, 0.17594382821627674, 0.18293822353827272, 0.18213418389942604, 0.17186109823917595, 0.1768263165293409, 0.1726675324632413, 0.07011489575298147, 0.08114057729661184, 0.06603915723925602, 0.09655706267189912, 0.07183184000257281, 0.07276235113633733, 0.07224286845526273, 0.06121915856581439, 0.06575316977535406]}, "mutation_prompt": null}
{"id": "c10b3266-a2d1-4577-91be-244a35185837", "solution": "import numpy as np\n\nclass AdaptiveStepSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveStepSizeEnhancedSocialSwarmOptimization", "description": "Improving convergence speed by introducing a novel adaptive step size mechanism during local search to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.2704113251484437, 0.29058754202003334, 0.26611519512165527, 0.2594037980140613, 0.22395326823572537, 0.24405488081755267, 0.2224743469359577, 0.24084346349453545, 0.23100708515448298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08301484487797661, 0.06501706431593524, 0.06733930609774852, 0.06353448966415232, 0.07027894161877501, 0.07039897469352707, 0.06610800108662895, 0.07201615363403102, 0.06411237180967455, 0.06970051111426767, 0.07106634872355244, 0.059636936246896255, 0.0530744501048801, 0.06445510819525191, 0.05609532342928636, 0.06087243491516714, 0.056252821859872126, 0.050881515946995415, 0.6589325625545839, 0.8887203095178526, 0.7755412010912883, 0.9752106829063645, 0.7804042372882694, 0.9722953023477113, 0.9190603578755017, 0.8463294739844706, 0.9289789302140122, 0.12920420218645445, 0.13530219256303533, 0.12482792895694506, 0.13768182636689852, 0.14420299863926045, 0.10439534645191428, 0.14175590504566848, 0.12487261438293262, 0.1270832422059197, 0.1991589978526509, 0.17811244797337478, 0.20044078317733194, 0.18185188394877339, 0.21525507743850836, 0.21181655317751025, 0.15790480812021102, 0.18153507341906894, 0.18703217852021004, 0.08008196844010795, 0.0879891756485669, 0.06598260929033173, 0.08549526829399023, 0.049864218297548946, 0.04211616780338534, 0.08777775995937809, 0.06911299506131285, 0.09712195363422327, 0.13743022404596927, 0.18102582429186664, 0.1277805332723665, 0.14003962830666883, 0.12451984148117712, 0.1237267487747804, 0.140315824685729, 0.1462543675347142, 0.1276162640579792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09886107825164603, 0.07357247001656286, 0.09775982026849728, 0.0746645869447542, 0.10365268102202374, 0.07337260057835793, 0.0891506931149253, 0.10061521562880549, 0.1596133993096881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02832308772027392, 0.02141195655106276, 0.009443664861959022, 0.00886218429732577, 0.012431255959178489, 0.005380355350053101, 0.0019939729459576006, 0.010223545249447907, 0.0020787671768348615, 0.296714450669363, 0.25292756778339953, 0.272839434762992, 0.24092724651100006, 0.2329207643868796, 0.25147246576069804, 0.266149601013696, 0.2744311773699496, 0.315870018204638, 0.05962120601758447, 0.05719395122726656, 0.056236096236315314, 0.07819818449192062, 0.06097234357329939, 0.07254708187263315, 0.07902356223660767, 0.0696272048334664, 0.08465574888846261, 0.15053262242194687, 0.15233415057495436, 0.12358676931798074, 0.1793823411956983, 0.1505828723490129, 0.12751766353666294, 0.15441668977290268, 0.14682246738272442, 0.13781714497171782, 0.19721277870000797, 0.19794692516874646, 0.19408148160459937, 0.21730723074217795, 0.21436159599361315, 0.22131860862541064, 0.20798396595210833, 0.18816079678665087, 0.20468276090926607, 0.13106821562898097, 0.13400259697857708, 0.13678052752770908, 0.15543390972564575, 0.17425623111813382, 0.17817827118984986, 0.13858054288237143, 0.13883383811871464, 0.12774847308653947, 0.21665239659274893, 0.21534785538901602, 0.2157700053630317, 0.19554497839925156, 0.23298783533047995, 0.2315235906209333, 0.20766919591657473, 0.23215705684561927, 0.23575416942882266, 0.16367520073491193, 0.1670552322362151, 0.17285228595752977, 0.1655558040940861, 0.1727524628940601, 0.17391441040369793, 0.17769187530463693, 0.17654956902211638, 0.16562606202735097, 0.24966246314014107, 0.17108752851255304, 0.17162119220237437, 0.29201729086987127, 0.14949590464332596, 0.3457498196623393, 0.21844630444184643, 0.298557409626355, 0.33911242359205473, 0.2937229614879243, 0.1998824797763712, 0.42978876027929425, 0.16712524406903906, 0.2703535441702627, 0.19497478275932656, 0.15270623507492542, 0.21840943128757306, 0.26487444440952923, 0.1792789745049136, 0.18490998665262315, 0.18172276075888538, 0.17595520997656333, 0.17663509095187546, 0.18472440210632957, 0.17274827224296574, 0.16995260849083338, 0.17046120102343287, 0.07624242655524871, 0.11044719195191466, 0.09364207030015681, 0.07927902462564851, 0.06518438959880946, 0.07841698796426422, 0.06470666100161904, 0.07303141831522475, 0.07991153012810448]}, "mutation_prompt": null}
{"id": "24e90184-e81f-4e9a-a2e2-b87b5d2118ab", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1\n                else:\n                    step_size *= 0.9\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            mutation_rate = 0.1 / (1.0 + diversity)  # Dynamic mutation adjustment based on swarm diversity\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0))) \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                swarm[i] += mutation_rate * np.random.normal(size=self.dim)  # Introducing dynamic mutation based on diversity\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicMutationEnhancedSocialSwarmOptimization", "description": "Enhancing exploration by incorporating a novel dynamic mutation strategy based on the diversity of the swarm.", "configspace": "", "generation": 26, "fitness": 0.15633455811070382, "feedback": "The algorithm DynamicMutationEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.16.", "error": "", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.2630993832162166, 0.2606482223107983, 0.2661985729296753, 0.208729964015973, 0.227466969574862, 0.22994236640158539, 0.23928733421050863, 0.23168433892283957, 0.24304535733141353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07117181881350154, 0.0703807322483373, 0.07078617676197774, 0.06671591380072661, 0.07219970279357824, 0.06457111937792637, 0.0768994275600906, 0.07115307814818173, 0.06685808461304643, 0.05851678210750266, 0.08575530228552275, 0.07161863582212336, 0.06292880113537269, 0.07665447136317438, 0.06924928464085767, 0.053101930336156844, 0.056178516874398565, 0.05076120673875628, 0.9485699929733041, 0.7361628831719793, 0.9749635445233957, 0.8118935073234765, 0.617303380476413, 0.42793708439380573, 0.9348268491590299, 0.8250682237314926, 0.7003415126681661, 0.12776279190799888, 0.12886771752399795, 0.14268729904833255, 0.1145740184149947, 0.13781312727555228, 0.12930001171952576, 0.14904071792950402, 0.12463487057107614, 0.11508243004428442, 0.20506303727484299, 0.20623559747563902, 0.20836811329441307, 0.22991970754459579, 0.19282901855604828, 0.19233364005261433, 0.17222512340227036, 0.15817600122592013, 0.17313661309816852, 0.03359707188456107, 0.08373300848273102, 0.10170081970751177, 0.05261123270516632, 0.06454459285840308, 0.052157316363153794, 0.09002770808201388, 0.11593554985627053, 0.09943708748810653, 0.13042950323928104, 0.12745735122710744, 0.14574282016208306, 0.15380350331242698, 0.14305439645090612, 0.1250928394099683, 0.1296716509912289, 0.14108448917544214, 0.14257895799625964, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09194140562573616, 0.12989598276321446, 0.10713083241838317, 0.07277295358549563, 0.07558784939824559, 0.06234257534817045, 0.084118074417867, 0.12084905633699383, 0.08354442860913258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032004989656375216, 0.054360681463726856, 0.0030588537055570297, 0.024709001886364823, 0.03860293102528356, 0.012411763826131628, 0.00338296617463274, 0.00010294001029120814, 0.005829632259314543, 0.28385454597532866, 0.27894289538626516, 0.2870953961761572, 0.2609331002306283, 0.25218638812886596, 0.2435450520371676, 0.2868771030166909, 0.2791614429980295, 0.31038932541861197, 0.07500083049054951, 0.06814848664933526, 0.05679623943483747, 0.07946107582163531, 0.06157152959594736, 0.07174941905980359, 0.07592609757432967, 0.10233512867920402, 0.06656272562555277, 0.1449311392246907, 0.1824032129798112, 0.13346619227894518, 0.15222415298637149, 0.156485093749398, 0.16973504058829292, 0.16346619516940342, 0.134221613093487, 0.20714368464701438, 0.1956451513348858, 0.21909981710215753, 0.19058328651660883, 0.22757679652876783, 0.2130666502372326, 0.22717894989990994, 0.19217778169532984, 0.20811777824086974, 0.18956371056534493, 0.14708809788345456, 0.13129812509750305, 0.12813057853049958, 0.16492122555948086, 0.166717565471303, 0.16609966578326274, 0.16511822951408417, 0.1615614845380613, 0.13248771594467235, 0.23833117105259316, 0.21099630565156946, 0.2353935923048135, 0.20560348222546054, 0.2058446723978925, 0.2184249324736537, 0.2292294667290019, 0.19406974096138252, 0.2216732234798363, 0.16502002094681034, 0.17477384357075332, 0.17059335883339444, 0.17310393054253914, 0.1689706549305534, 0.17180520783665398, 0.17704401081255816, 0.1815514331902176, 0.16859426075352746, 0.18050346491223135, 0.1825560236906557, 0.17145218600979928, 0.14245897741952662, 0.14949590464332596, 0.28531220115669187, 0.3109530334312879, 0.28953480682228905, 0.1513294040094273, 0.3004113466282593, 0.17020146222150323, 0.3658984785738657, 0.183911361204245, 0.2831022851365196, 0.1812795320065781, 0.16132142791452986, 0.21240244291166988, 0.24873952960683754, 0.18086061264255082, 0.17341579410598718, 0.17964023309575383, 0.17208459408154808, 0.18767760412336576, 0.17618384802067433, 0.17455204417061287, 0.180900107390374, 0.16996081040131084, 0.06334252883985159, 0.06483203810958471, 0.07895530009878693, 0.0835816114457264, 0.06993622884153905, 0.0696392555888149, 0.0827176925398071, 0.07913742595640105, 0.07918680098761666]}, "mutation_prompt": null}
{"id": "41a8bd8d-b128-41e0-9859-fd3b4a11c751", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.4 * (self.budget - _)/self.budget  # Dynamic inertia weight adjustment\n                swarm[i] = inertia_weight * self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Enhancing convergence speed by integrating a dynamic inertia weight mechanism to adjust particle movement adaptively in the search space, promoting faster exploration-exploitation balance.", "configspace": "", "generation": 27, "fitness": 0.1547225611463857, "feedback": "The algorithm DynamicInertiaWeightEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.2716678282992476, 0.3307272738229746, 0.3050160279425196, 0.2475715701736343, 0.21643148578775095, 0.2249772347897554, 0.2377206386098748, 0.2296631625342167, 0.23553509359299707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07757122513563497, 0.06347534598506976, 0.07015523098412069, 0.06624090453917109, 0.08143720843655411, 0.08201865678202991, 0.08598007714597733, 0.06993270022212206, 0.06574171976866006, 0.06175053551804632, 0.05397361545315704, 0.05375742455625021, 0.05665497904618133, 0.06419217139945177, 0.059328212340686304, 0.05581011896566801, 0.05548432984260232, 0.0600528101665152, 0.8543053117746278, 0.8986927957052051, 0.6711636851400931, 0.7793687441562263, 0.7773726259459697, 0.9722315315587754, 0.9197298983895659, 0.5587879529036202, 0.8068744487919177, 0.12050803371812069, 0.1502867175635083, 0.13172965274405268, 0.13090246762502977, 0.14840077670433116, 0.11860064944419668, 0.138120279416853, 0.12603276282202802, 0.1449473014540914, 0.18242349290502546, 0.1814750891166228, 0.20229717362030641, 0.18773928836286147, 0.16200232299702144, 0.2045402753231953, 0.1896880882715022, 0.15690721219549597, 0.16837724309270363, 0.07236939294989353, 0.08748981668628708, 0.08590542695149017, 0.04656261460659172, 0.08089808119099762, 0.05464057959513502, 0.06315337661936915, 0.06683724959886772, 0.07277742713195168, 0.1267737339049918, 0.13947358437816515, 0.13509195808257957, 0.12287857166306027, 0.15023009820560385, 0.13193516585615284, 0.1502548977685818, 0.1319542005325378, 0.16187564071073135, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10411223858310936, 0.09155151171460818, 0.088621840963503, 0.06596692633918977, 0.07194064156120861, 0.08115552150971672, 0.12015409314654357, 0.09177357934125463, 0.06974602397377072, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009406325316452802, 9.999999999998899e-05, 0.0054436151794022836, 0.01077759697089109, 0.01760901834709161, 0.012634237686131922, 0.006422022371167291, 0.005120919765392307, 0.004627249448241888, 0.27186686308772556, 0.2745370546647373, 0.2641172273372512, 0.245131194590535, 0.3152312335403762, 0.2620456859126177, 0.2805283566988379, 0.28613313017341424, 0.2725177472732422, 0.07350761876373113, 0.04354245810761115, 0.057653426468135094, 0.06541524185670167, 0.06579999620234611, 0.06581023185133872, 0.06967029849133521, 0.07566187600565988, 0.06789601092560571, 0.1411521380695473, 0.13334207754045035, 0.16323907037875818, 0.13422497958790391, 0.13760533362243588, 0.14688262067233304, 0.12994220764205144, 0.1539034315985498, 0.1385377001855641, 0.2136683173618653, 0.19119510723847866, 0.18228239961875392, 0.20721101370600514, 0.22827347543876697, 0.21565681669902448, 0.1787223070559001, 0.1828971617539491, 0.18423340828504786, 0.13811543447340813, 0.13504020978665177, 0.14234506373659095, 0.17012588611878476, 0.15634961749969534, 0.17684865346148637, 0.12567167085144682, 0.14421765543267506, 0.1248103723517563, 0.21107421631261436, 0.21056774207275353, 0.21587936628008542, 0.20062268249823956, 0.2406742767969663, 0.19438362139263143, 0.201164310842041, 0.21707745708753612, 0.20031801488517753, 0.18715264197172032, 0.18487213415327297, 0.1680859481891377, 0.17284356128064815, 0.16809951832424885, 0.16842543935749976, 0.16555386556304896, 0.16668519158510275, 0.16243342667911898, 0.17157484100561893, 0.17594463214702083, 0.17229061200084017, 0.3003432177926094, 0.12971385610908004, 0.2704487234713724, 0.2524688447668766, 0.24252026894826506, 0.26306677918531063, 0.2912112864892328, 0.18620745349018064, 0.31814274390956154, 0.15979507243806346, 0.1677988133377628, 0.1686441396810806, 0.2552110220073679, 0.23336056295180152, 0.23536574546780797, 0.18207939522764227, 0.17746815794842752, 0.17408870587177339, 0.1736142064893309, 0.17634587255791645, 0.1858174608919716, 0.17835354678538728, 0.17021644329435837, 0.18020861016552425, 0.08093718492362567, 0.0742950408386227, 0.06845948397960255, 0.07391607233320685, 0.06611659101255285, 0.06990521619032919, 0.07129798822842892, 0.06641383403608014, 0.07961900201926908]}, "mutation_prompt": null}
{"id": "06c15242-10ba-46a1-80a6-cedbde47e9d0", "solution": "import numpy as np\n\nclass AdaptiveStepSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveStepSizeEnhancedSocialSwarmOptimization", "description": "Improving convergence speed by introducing a novel adaptive step size mechanism during local search to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.2704113251484437, 0.29058754202003334, 0.26611519512165527, 0.2594037980140613, 0.22395326823572537, 0.24405488081755267, 0.2224743469359577, 0.24084346349453545, 0.23100708515448298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08301484487797661, 0.06501706431593524, 0.06733930609774852, 0.06353448966415232, 0.07027894161877501, 0.07039897469352707, 0.06610800108662895, 0.07201615363403102, 0.06411237180967455, 0.06970051111426767, 0.07106634872355244, 0.059636936246896255, 0.0530744501048801, 0.06445510819525191, 0.05609532342928636, 0.06087243491516714, 0.056252821859872126, 0.050881515946995415, 0.6589325625545839, 0.8887203095178526, 0.7755412010912883, 0.9752106829063645, 0.7804042372882694, 0.9722953023477113, 0.9190603578755017, 0.8463294739844706, 0.9289789302140122, 0.12920420218645445, 0.13530219256303533, 0.12482792895694506, 0.13768182636689852, 0.14420299863926045, 0.10439534645191428, 0.14175590504566848, 0.12487261438293262, 0.1270832422059197, 0.1991589978526509, 0.17811244797337478, 0.20044078317733194, 0.18185188394877339, 0.21525507743850836, 0.21181655317751025, 0.15790480812021102, 0.18153507341906894, 0.18703217852021004, 0.08008196844010795, 0.0879891756485669, 0.06598260929033173, 0.08549526829399023, 0.049864218297548946, 0.04211616780338534, 0.08777775995937809, 0.06911299506131285, 0.09712195363422327, 0.13743022404596927, 0.18102582429186664, 0.1277805332723665, 0.14003962830666883, 0.12451984148117712, 0.1237267487747804, 0.140315824685729, 0.1462543675347142, 0.1276162640579792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09886107825164603, 0.07357247001656286, 0.09775982026849728, 0.0746645869447542, 0.10365268102202374, 0.07337260057835793, 0.0891506931149253, 0.10061521562880549, 0.1596133993096881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02832308772027392, 0.02141195655106276, 0.009443664861959022, 0.00886218429732577, 0.012431255959178489, 0.005380355350053101, 0.0019939729459576006, 0.010223545249447907, 0.0020787671768348615, 0.296714450669363, 0.25292756778339953, 0.272839434762992, 0.24092724651100006, 0.2329207643868796, 0.25147246576069804, 0.266149601013696, 0.2744311773699496, 0.315870018204638, 0.05962120601758447, 0.05719395122726656, 0.056236096236315314, 0.07819818449192062, 0.06097234357329939, 0.07254708187263315, 0.07902356223660767, 0.0696272048334664, 0.08465574888846261, 0.15053262242194687, 0.15233415057495436, 0.12358676931798074, 0.1793823411956983, 0.1505828723490129, 0.12751766353666294, 0.15441668977290268, 0.14682246738272442, 0.13781714497171782, 0.19721277870000797, 0.19794692516874646, 0.19408148160459937, 0.21730723074217795, 0.21436159599361315, 0.22131860862541064, 0.20798396595210833, 0.18816079678665087, 0.20468276090926607, 0.13106821562898097, 0.13400259697857708, 0.13678052752770908, 0.15543390972564575, 0.17425623111813382, 0.17817827118984986, 0.13858054288237143, 0.13883383811871464, 0.12774847308653947, 0.21665239659274893, 0.21534785538901602, 0.2157700053630317, 0.19554497839925156, 0.23298783533047995, 0.2315235906209333, 0.20766919591657473, 0.23215705684561927, 0.23575416942882266, 0.16367520073491193, 0.1670552322362151, 0.17285228595752977, 0.1655558040940861, 0.1727524628940601, 0.17391441040369793, 0.17769187530463693, 0.17654956902211638, 0.16562606202735097, 0.24966246314014107, 0.17108752851255304, 0.17162119220237437, 0.29201729086987127, 0.14949590464332596, 0.3457498196623393, 0.21844630444184643, 0.298557409626355, 0.33911242359205473, 0.2937229614879243, 0.1998824797763712, 0.42978876027929425, 0.16712524406903906, 0.2703535441702627, 0.19497478275932656, 0.15270623507492542, 0.21840943128757306, 0.26487444440952923, 0.1792789745049136, 0.18490998665262315, 0.18172276075888538, 0.17595520997656333, 0.17663509095187546, 0.18472440210632957, 0.17274827224296574, 0.16995260849083338, 0.17046120102343287, 0.07624242655524871, 0.11044719195191466, 0.09364207030015681, 0.07927902462564851, 0.06518438959880946, 0.07841698796426422, 0.06470666100161904, 0.07303141831522475, 0.07991153012810448]}, "mutation_prompt": null}
{"id": "3efa9715-a2de-47bd-8c65-10f3f5d8e567", "solution": "import numpy as np\n\nclass DynamicMutativeEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim, swarm_size=50, omega=0.5, phi_p=0.5, phi_g=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1\n                else:\n                    step_size *= 0.9\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                fitness = np.array([func(x) for x in swarm])\n                norm_fitness = (fitness - np.min(fitness)) / (np.max(fitness) - np.min(fitness))\n                mutation_rate = 0.1 + 0.9 * (1 - norm_fitness[i])  # Dynamic mutation based on fitness\n                swarm[i] = _local_search(swarm[i], func) * mutation_rate\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicMutativeEnhancedSocialSwarmOptimization", "description": "Introducing a dynamic mutation strategy based on fitness to enhance local exploration and exploit promising regions efficiently.", "configspace": "", "generation": 29, "fitness": 0.12962762323335686, "feedback": "The algorithm DynamicMutativeEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.2668571056297032, 0.25032473908431496, 0.27528767213351013, 0.22082425091550717, 0.18991544989813613, 0.23024620632194803, 0.27419433096903045, 0.24435251771345146, 0.2114852059841168, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053568014898274674, 0.06230760037172256, 0.06354482872753364, 0.09066287392628203, 0.060749790316691366, 0.04594104004298061, 0.05626316963340816, 0.05189922256012791, 0.052241858293842425, 0.05147154130521503, 0.05566882779464455, 0.043802683875552195, 0.053955652597516224, 0.05039340979813256, 0.05277701129701673, 0.04343767273639898, 0.05792476775367994, 0.04641096816083268, 0.5554081347970101, 0.19674281086769152, 0.6967059379486542, 0.4215989882738834, 0.5145273082805935, 0.46196517500699774, 0.654752685440121, 0.09909242273807473, 0.7579337146671702, 0.1160977554868996, 0.0925717714390456, 0.09993248266685828, 0.12901502954812927, 0.09160744977113211, 0.09696814329551762, 0.13355276352666257, 0.13565025912537954, 0.14507360115961643, 0.16486282785338646, 0.20672746804422382, 0.1613394917230604, 0.16980721139485488, 0.14733901974180552, 0.15130944249564493, 0.15004669616149735, 0.14832053455233796, 0.14712135746714872, 0.08337952981507202, 0.05271775231310527, 0.059673537349255845, 0.04624452956927494, 0.0563207305254273, 0.038272773544235306, 0.1116853617737037, 0.03697924855975265, 0.07759235388746089, 0.12460039811429724, 0.12107591209328061, 0.1072314714895054, 0.09939196656872751, 0.14345746014043903, 0.12247348472043229, 0.12347018705450896, 0.110028617445181, 0.10777464997882102, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10447375423673366, 0.07268988612102001, 0.08145190193288432, 0.0566623617454759, 0.03422752643726201, 0.044097046306949106, 0.07850330385320325, 0.07717864512242234, 0.09390602605611564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013579337722955276, 0.005246282361242582, 0.004744760749443966, 0.00016281672062323782, 9.999999999998899e-05, 0.016849804178296846, 0.0023614664376319094, 0.0002443017158155758, 0.014161680690793266, 0.24587448539011303, 0.24865261545707107, 0.24507732285837136, 0.23581083794415258, 0.2424871349971437, 0.2268761508670415, 0.2780053758204133, 0.27527334059497677, 0.27605875154501835, 0.04774597887239429, 0.057502555420222645, 0.057141431741351334, 0.04671802375272949, 0.05973515298328946, 0.09186206230808946, 0.06604789913166131, 0.05297740624406211, 0.04566745739055822, 0.13708699589221363, 0.139098611238625, 0.13831206144647656, 0.11375342804754018, 0.12527067518165858, 0.11064692068203896, 0.14222917438666605, 0.15561074866611235, 0.1406513012662055, 0.1702631971556764, 0.18455759756148005, 0.1897124282672329, 0.19504870478912106, 0.21059780197638733, 0.19839824389236993, 0.17927137147861816, 0.1819902378317192, 0.17360948261012232, 0.133230654586458, 0.11236908910913457, 0.141484545008269, 0.16694933003275114, 0.1490020477257611, 0.14245166753030403, 0.13767038527149067, 0.12553895686442595, 0.1334359149612635, 0.19509779513468606, 0.22369284424254032, 0.20452292525089844, 0.21512024152150233, 0.20843991873445944, 0.19624362853050814, 0.1739012256639748, 0.2241001272957871, 0.20242195515895856, 0.1614657387318399, 0.15703662566937782, 0.1550512078009626, 0.1666671912982821, 0.17044082866807253, 0.16053291683836046, 0.1813248508898463, 0.17168354077014136, 0.1629377760614208, 0.1683738939384546, 0.16308440255745338, 0.12092265166158445, 0.2218527178008105, 0.16112604279096632, 0.11473311928178864, 0.23017437545113184, 0.22218598732313277, 0.3417839376941735, 0.22864844705702647, 0.16832062160045913, 0.0915062896433474, 0.2258379220349167, 0.14904239972292022, 0.11367854879463535, 0.17835162993811005, 0.14770770001912548, 0.25091059643298474, 0.1722194029664823, 0.17311027576725868, 0.17467177788129007, 0.17014148295670073, 0.17653260730207876, 0.15941645278821248, 0.1716467604290114, 0.17200070504603204, 0.16340300006315955, 0.05383988163636477, 0.06510100967679355, 0.06860491473857622, 0.060343486299857974, 0.0722055464084167, 0.07019302323426324, 0.0617479712196104, 0.06598587049747606, 0.06343450716576138]}, "mutation_prompt": null}
{"id": "c511a44a-5e50-4358-87e5-ce45e6b9c76c", "solution": "import numpy as np\n\nclass ImprovedAdaptiveStepSizeEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _local_search(x, f):\n            step_size = 1.0\n            convergence_counter = 0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1 / (1 + 0.1 * convergence_counter)  # Adaptive step adjustment with convergence counter\n                    convergence_counter += 1\n                else:\n                    step_size *= 0.9 / (1 + 0.1 * convergence_counter)  # Adaptive step adjustment with convergence counter\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "ImprovedAdaptiveStepSizeEnhancedSocialSwarmOptimization", "description": "Enhancing the exploration phase by introducing adaptive mutation rates based on individual fitness evaluations.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name '_initialize_swarm' is not defined\").", "error": "NameError(\"name '_initialize_swarm' is not defined\")", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {}, "mutation_prompt": null}
{"id": "453c9bca-7fd6-4620-a523-854fe884e8d6", "solution": "import numpy as np\n\nclass AdaptiveStepSizeEnhancedSocialSwarmOptimization(DynamicPopulationSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveStepSizeEnhancedSocialSwarmOptimization", "description": "Improving convergence speed by introducing a novel adaptive step size mechanism during local search to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.2704113251484437, 0.29058754202003334, 0.26611519512165527, 0.2594037980140613, 0.22395326823572537, 0.24405488081755267, 0.2224743469359577, 0.24084346349453545, 0.23100708515448298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08301484487797661, 0.06501706431593524, 0.06733930609774852, 0.06353448966415232, 0.07027894161877501, 0.07039897469352707, 0.06610800108662895, 0.07201615363403102, 0.06411237180967455, 0.06970051111426767, 0.07106634872355244, 0.059636936246896255, 0.0530744501048801, 0.06445510819525191, 0.05609532342928636, 0.06087243491516714, 0.056252821859872126, 0.050881515946995415, 0.6589325625545839, 0.8887203095178526, 0.7755412010912883, 0.9752106829063645, 0.7804042372882694, 0.9722953023477113, 0.9190603578755017, 0.8463294739844706, 0.9289789302140122, 0.12920420218645445, 0.13530219256303533, 0.12482792895694506, 0.13768182636689852, 0.14420299863926045, 0.10439534645191428, 0.14175590504566848, 0.12487261438293262, 0.1270832422059197, 0.1991589978526509, 0.17811244797337478, 0.20044078317733194, 0.18185188394877339, 0.21525507743850836, 0.21181655317751025, 0.15790480812021102, 0.18153507341906894, 0.18703217852021004, 0.08008196844010795, 0.0879891756485669, 0.06598260929033173, 0.08549526829399023, 0.049864218297548946, 0.04211616780338534, 0.08777775995937809, 0.06911299506131285, 0.09712195363422327, 0.13743022404596927, 0.18102582429186664, 0.1277805332723665, 0.14003962830666883, 0.12451984148117712, 0.1237267487747804, 0.140315824685729, 0.1462543675347142, 0.1276162640579792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09886107825164603, 0.07357247001656286, 0.09775982026849728, 0.0746645869447542, 0.10365268102202374, 0.07337260057835793, 0.0891506931149253, 0.10061521562880549, 0.1596133993096881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02832308772027392, 0.02141195655106276, 0.009443664861959022, 0.00886218429732577, 0.012431255959178489, 0.005380355350053101, 0.0019939729459576006, 0.010223545249447907, 0.0020787671768348615, 0.296714450669363, 0.25292756778339953, 0.272839434762992, 0.24092724651100006, 0.2329207643868796, 0.25147246576069804, 0.266149601013696, 0.2744311773699496, 0.315870018204638, 0.05962120601758447, 0.05719395122726656, 0.056236096236315314, 0.07819818449192062, 0.06097234357329939, 0.07254708187263315, 0.07902356223660767, 0.0696272048334664, 0.08465574888846261, 0.15053262242194687, 0.15233415057495436, 0.12358676931798074, 0.1793823411956983, 0.1505828723490129, 0.12751766353666294, 0.15441668977290268, 0.14682246738272442, 0.13781714497171782, 0.19721277870000797, 0.19794692516874646, 0.19408148160459937, 0.21730723074217795, 0.21436159599361315, 0.22131860862541064, 0.20798396595210833, 0.18816079678665087, 0.20468276090926607, 0.13106821562898097, 0.13400259697857708, 0.13678052752770908, 0.15543390972564575, 0.17425623111813382, 0.17817827118984986, 0.13858054288237143, 0.13883383811871464, 0.12774847308653947, 0.21665239659274893, 0.21534785538901602, 0.2157700053630317, 0.19554497839925156, 0.23298783533047995, 0.2315235906209333, 0.20766919591657473, 0.23215705684561927, 0.23575416942882266, 0.16367520073491193, 0.1670552322362151, 0.17285228595752977, 0.1655558040940861, 0.1727524628940601, 0.17391441040369793, 0.17769187530463693, 0.17654956902211638, 0.16562606202735097, 0.24966246314014107, 0.17108752851255304, 0.17162119220237437, 0.29201729086987127, 0.14949590464332596, 0.3457498196623393, 0.21844630444184643, 0.298557409626355, 0.33911242359205473, 0.2937229614879243, 0.1998824797763712, 0.42978876027929425, 0.16712524406903906, 0.2703535441702627, 0.19497478275932656, 0.15270623507492542, 0.21840943128757306, 0.26487444440952923, 0.1792789745049136, 0.18490998665262315, 0.18172276075888538, 0.17595520997656333, 0.17663509095187546, 0.18472440210632957, 0.17274827224296574, 0.16995260849083338, 0.17046120102343287, 0.07624242655524871, 0.11044719195191466, 0.09364207030015681, 0.07927902462564851, 0.06518438959880946, 0.07841698796426422, 0.06470666100161904, 0.07303141831522475, 0.07991153012810448]}, "mutation_prompt": null}
{"id": "0fd421b3-8707-4c77-acfa-132cda557c77", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 32, "fitness": 0.17343851523826406, "feedback": "The algorithm DynamicInertiaWeightEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "889d9bb7-faef-41d0-b8ef-51a5d3163f59", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "b6cb4ab1-8aa0-418b-9ed5-8c6c159b5d44", "solution": "import numpy as np\n\nclass ImprovedDynamicInertiaWeightEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def _local_search(self, x, f):\n        step_size = np.ones(self.dim)\n        for _ in range(10):\n            x_new = x + step_size * np.random.normal(size=self.dim)\n            improvements = f(x_new) < f(x)\n            x = np.where(improvements, x_new, x)\n            step_size = np.where(improvements, step_size * 1.1, step_size * 0.9)  # Adaptive step adjustment per dimension\n        return x", "name": "ImprovedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Introducing a mutation strategy that adapts the step size dynamically for each dimension during local search to improve convergence speed.", "configspace": "", "generation": 33, "fitness": 0.17343851523826406, "feedback": "The algorithm ImprovedDynamicInertiaWeightEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "9c6baf9c-5fc0-4181-9ce6-653ef5141bef", "solution": "import numpy as np\n\nclass ImprovedDynamicInertiaWeightEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def _dynamic_mutation(self, x, f):\n        mutation_rate = 0.2 + 0.8 * np.random.uniform()  # Dynamic mutation rate adaptation\n        for _ in range(self.dim):\n            if np.random.uniform() < mutation_rate:\n                x[_] = np.clip(x[_] + np.random.normal(), -5.0, 5.0)  # Mutation with normal distribution\n        return x\n\n    def __call__(self, func):\n        swarm = self._initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = self._local_search(swarm[i], func)\n                swarm[i] = self._dynamic_mutation(swarm[i], func)  # Integrate dynamic mutation operation\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "ImprovedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Introducing a dynamic adaptive mutation strategy to enhance exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicInertiaWeightEnhancedSocialSwarmOpt' object has no attribute '_initialize_swarm'\").", "error": "AttributeError(\"'ImprovedDynamicInertiaWeightEnhancedSocialSwarmOpt' object has no attribute '_initialize_swarm'\")", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {}, "mutation_prompt": null}
{"id": "d99a4b4a-f511-467a-bb85-ff3909b03e7f", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "3f0d61a7-aeed-4cdd-b245-60506943b530", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicInertiaWeightEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _gradient_mutation(x, grad, f):\n            step_size = 0.1\n            for _ in range(10):\n                x_new = x - step_size * grad\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                grad = np.gradient(swarm[i])\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _gradient_mutation(swarm[i], grad, func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveMutationDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Introducing a novel adaptive mutation strategy based on gradient information to accelerate convergence speed.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name '_initialize_swarm' is not defined\").", "error": "NameError(\"name '_initialize_swarm' is not defined\")", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {}, "mutation_prompt": null}
{"id": "8b409bb0-873d-41d0-99dc-46861f376647", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "86513783-286a-41e9-8873-62876eb6d053", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "25785ae2-ee79-45a3-89a9-be107a7a7f8e", "solution": "import numpy as np\n\nclass DynamicSearchSpaceAdaptationEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1\n                else:\n                    step_size *= 0.9\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  \n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicSearchSpaceAdaptationEnhancedSocialSwarmOptimization", "description": "Introducing a dynamic search space adaptation mechanism to focus exploration on promising regions and accelerate convergence.", "configspace": "", "generation": 39, "fitness": 0.17343851523826406, "feedback": "The algorithm DynamicSearchSpaceAdaptationEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "24a10632-c6dd-4c5a-a9e2-f2b800bcdca5", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "6088170e-8037-4879-88a2-70ad1b78b1db", "solution": "class FasterDynamicInertiaWeightEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1 if np.random.uniform() > 0.5 else 1.2  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9 if np.random.uniform() > 0.5 else 0.8  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "FasterDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Improving convergence speed by introducing a novel adaptive step size mechanism to adjust the step dynamically during local search.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name '_initialize_swarm' is not defined\").", "error": "NameError(\"name '_initialize_swarm' is not defined\")", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {}, "mutation_prompt": null}
{"id": "a9811c85-03ac-43e1-9781-e82cbcb027d0", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "30d7faed-5a80-437e-98bd-14db2e37dec2", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "298faae7-cb1b-422a-9d6e-c2006f13beac", "solution": "import numpy as np\n\nclass ImprovedDynamicInertiaWeightEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = int(self.swarm_size * (1 - diversity / 15.0))  # Faster population resizing\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "ImprovedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Enhancing convergence speed through a hybrid strategy of local search and adaptive population resizing while maintaining dynamic inertia weight adaptation and population diversity.", "configspace": "", "generation": 44, "fitness": 0.17323368053426288, "feedback": "The algorithm ImprovedDynamicInertiaWeightEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.3080608249592983, 0.29897014194286553, 0.29705314840565056, 0.3065352568611479, 0.2970585737678556, 0.27948027366625805, 0.2906876981867327, 0.2813961879494734, 0.2884712223988919, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07809684320287813, 0.08276105564575087, 0.08081335229879005, 0.07216720653967046, 0.08763977808258516, 0.07641685292694944, 0.08515866239575864, 0.06614580151136995, 0.06694945265420937, 0.07228876785842908, 0.06546758695463761, 0.07295994019045682, 0.07368440573848567, 0.0750109188768171, 0.06493496234770757, 0.062340917721167566, 0.06646192879612134, 0.07446251334544884, 0.884723172307449, 0.9478620498469248, 0.927870867745772, 0.9660550369732689, 0.9487663014937264, 0.9256301599575935, 0.9869861874679805, 0.946869053359978, 0.96598492628365, 0.15890105906849217, 0.1446573451738422, 0.16786477930598553, 0.15942616751602012, 0.1421392405410803, 0.146714711217241, 0.18647938758574478, 0.15032127200021328, 0.14859606493284994, 0.190755649064819, 0.18026146954584232, 0.2097613280827919, 0.18894538125061533, 0.23312272305137716, 0.24258571197049528, 0.21941472875538315, 0.257256228356189, 0.2545445017887392, 0.12721014830287347, 0.10315917772022931, 0.06410017746149843, 0.06830951643671412, 0.08388558176346728, 0.1025435048271438, 0.103946320093659, 0.11221095861885444, 0.11526128311068806, 0.13184267971853658, 0.12765026664228118, 0.15275870093070498, 0.11410075315024482, 0.1289182942987791, 0.11728362068706955, 0.1766874389779769, 0.11859169113521983, 0.13508120168732207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007323413182024563, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09866119519111183, 0.07177118097540314, 0.07571463991275473, 0.06978226978713298, 0.04153834631710618, 0.0822454473278793, 0.11293423727670382, 0.07036290143749302, 0.11523695028645775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03814551918982356, 0.03183577017440198, 0.03126196151561367, 0.0336773557851302, 0.04718874899652714, 0.03188408341601956, 0.03202574358221555, 0.02344148720258621, 0.0322179775030651, 0.32410128940131244, 0.3696397941522217, 0.2861456440125878, 0.2999463142796436, 0.30791482583272956, 0.3160913777228894, 0.2964423306530962, 0.33568330530718193, 0.32037583623234656, 0.08464119613041277, 0.06860855806691157, 0.06385470375824931, 0.08354567557348014, 0.06841138007856684, 0.10719152978996205, 0.0751492959538489, 0.09035231841043201, 0.07334905002765757, 0.15569588481045538, 0.16576742733011451, 0.15076859315223934, 0.12868322593860193, 0.12910450420278974, 0.13290219912858725, 0.15234120249172323, 0.13307954774046737, 0.12848832861568338, 0.21479043118104657, 0.22988636524035788, 0.2215011527034858, 0.25127172997232117, 0.24059559652439044, 0.2251535188842929, 0.2173276111884309, 0.21700369118826224, 0.1896733897994619, 0.18456566123051432, 0.1589654190274441, 0.15568660058809924, 0.16358600212940677, 0.22223516056539883, 0.16864906382799383, 0.15540193782451772, 0.14958231525144694, 0.146437528493088, 0.2136553070311955, 0.22295049508015086, 0.19954496053370818, 0.19141695825263183, 0.21699622574594246, 0.21117692525478837, 0.20952135604638822, 0.20162762172906445, 0.20694864709749172, 0.16813339911664094, 0.17242198576402168, 0.17119430520108558, 0.17647959066208985, 0.17353217725102754, 0.17422160226503658, 0.172828696413186, 0.17687138479648146, 0.16754604832831177, 0.2799304355421054, 0.1728403268890566, 0.1819431974039497, 0.3793672130617437, 0.18424077120131455, 0.1402574832149418, 0.11985096128643635, 0.16147696511928988, 0.3441798515964869, 0.3229053049566829, 0.19729161348700341, 0.3435588726996829, 0.17657714300034644, 0.38458436556344766, 0.3639983358521912, 0.13907062597113196, 0.16007119549394977, 0.2551359250643368, 0.1956995831613051, 0.1802146310256061, 0.18233346120116667, 0.16870883710445939, 0.18278296247835768, 0.17390308161636514, 0.17167071680439006, 0.17929651381488, 0.17895107000966326, 0.07779821316651536, 0.0669140306868532, 0.08580944601660845, 0.07577861805383523, 0.07451601321245493, 0.0861639898263522, 0.09012150525308027, 0.07528914091667593, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "ad0835c4-257e-4824-8695-574b298e6fac", "solution": "import numpy as np\n\nclass OppositionBasedDynamicInertiaWeightEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _opposition_based_init():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim)) * np.array([-1 if np.random.rand() < 0.5 else 1 for _ in range(self.swarm_size * self.dim)]).reshape(self.swarm_size, self.dim)\n\n        swarm = _opposition_based_init()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "OppositionBasedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Introducing a novel opposition-based learning strategy to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name '_local_search' is not defined\").", "error": "NameError(\"name '_local_search' is not defined\")", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {}, "mutation_prompt": null}
{"id": "2ee83610-ac76-4cff-a742-59121b68436f", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "c7a28d2c-d746-445f-b099-674a13693b4a", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimizationImproved(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def _opposition_based_mutation(self, x):\n        return 10.0 - x\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1\n                else:\n                    step_size *= 0.9\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                swarm[i] = self._opposition_based_mutation(swarm[i]) if func(self._opposition_based_mutation(swarm[i])) < func(swarm[i]) else swarm[i]\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimizationImproved", "description": "Introducing a mutation strategy based on opposition-based learning to enhance population diversity and exploration capability.", "configspace": "", "generation": 47, "fitness": 0.1720897608406588, "feedback": "The algorithm DynamicInertiaWeightEnhancedSocialSwarmOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.29804104183118263, 0.30155635650905466, 0.31687507764111433, 0.2856534233562007, 0.2973489431877666, 0.2886661754662746, 0.3041127237850012, 0.3160682007563944, 0.3064438897917664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07538720794886922, 0.07483464593826994, 0.08042842151153451, 0.08746127800708292, 0.07664003765724359, 0.08481426451483043, 0.06483352083411287, 0.08557045438057098, 0.07136190512493945, 0.059400658586599264, 0.08106973863995848, 0.065867698938475, 0.09019157415639256, 0.07498375213702857, 0.06344229145556635, 0.08586206162751464, 0.07078254704662323, 0.06454800339737665, 0.9412657010449953, 0.9585934402347431, 0.9482980013333601, 0.9558263223409696, 0.9093516884248144, 0.9465331599764141, 0.9860915608754466, 0.9401487771638418, 0.9648772043160921, 0.1591025999419562, 0.14899567517038415, 0.1526335355153431, 0.17294318051732493, 0.16488247653860566, 0.15024901646546274, 0.16467158522205594, 0.16943486280610998, 0.16649433965880822, 0.2079173617515011, 0.20910516621761566, 0.18020295439668776, 0.22222201121357132, 0.22272777145573364, 0.2144770581211486, 0.2134513562430861, 0.2197607105090439, 0.17794456722583452, 0.0757141950948379, 0.09450295757246352, 0.10449270431239821, 0.08319287837200917, 0.06333823195728805, 0.09956002311519097, 0.08694543711159808, 0.11634453634866326, 0.11420548676928977, 0.12946649104271624, 0.10939679378163802, 0.13251815901256359, 0.16866468868605045, 0.1172362501330173, 0.11715387315298664, 0.14103246242495282, 0.1301116893475599, 0.13197815896107823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015519009493386915, 0.11810011215784233, 0.09043260049107626, 0.12271917480988537, 0.06475833673743403, 0.07187602538538052, 0.048529068969930034, 0.08404359699975061, 0.08678354131461696, 0.10013033678833017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0677780111984303, 0.021071616379740088, 0.03999898061707785, 0.03425960217941626, 0.04151187586941285, 0.029773091145033903, 0.017755082484599893, 0.037531263326020414, 0.028235612497246043, 0.29985141244174474, 0.2984136533749723, 0.2964288154400112, 0.294888421136583, 0.32151567300728356, 0.2821893311284416, 0.3328318234396924, 0.3201517037473516, 0.31038177113165344, 0.06167095284273405, 0.06942098861312607, 0.06839821008193814, 0.07889915358169763, 0.0835517902295354, 0.0658373302883678, 0.07034312252700581, 0.08010938126468503, 0.08061554936588122, 0.1305384931301551, 0.1531947312030315, 0.13588254290031876, 0.14223637673316147, 0.170960728577495, 0.13910266025407492, 0.12064791235660555, 0.17594523025031927, 0.14193501705427658, 0.21072759138289043, 0.2179801489369998, 0.20637018531388351, 0.23553858479200562, 0.226989704837405, 0.2288317039229466, 0.21822128338857816, 0.21211450853375668, 0.2075298680248665, 0.16231979419489928, 0.17129325722387712, 0.1595140115301683, 0.19221015819783638, 0.18869632675864856, 0.16481686061032852, 0.1535971283065788, 0.1687970057582281, 0.1442771305945667, 0.22623798190622268, 0.21302762163866462, 0.20176219337756474, 0.1972805608419761, 0.22400949887424426, 0.2103548962320484, 0.2120362083101789, 0.20542194083914478, 0.21925802653309845, 0.1794717828820077, 0.1653111368029817, 0.17110648853955068, 0.1724261935662047, 0.19461238830016614, 0.167262044071936, 0.16786633930786232, 0.17400779689064527, 0.1725663569211825, 0.30900599887207036, 0.17024444949576467, 0.18263538819707215, 0.3692132569621178, 0.16745287153123367, 0.1377188477625818, 0.11976119805604779, 0.16589214016356002, 0.30317327973316444, 0.31639498142529465, 0.19393053413239414, 0.31166635134311327, 0.18046875087297742, 0.3074923012749704, 0.2789676298735366, 0.23465022932218094, 0.16321259233372787, 0.22203081099542865, 0.1789750646738737, 0.17501771081556727, 0.18225271742715343, 0.17102433552309326, 0.16887079713126407, 0.18114228635461915, 0.183702753663883, 0.17215669722144178, 0.17541564574417046, 0.07466199621621439, 0.06884390910042948, 0.082342215230229, 0.0749776434473759, 0.07820834556166723, 0.07648616824947863, 0.07799859074747251, 0.07579112385592612, 0.09011130907531528]}, "mutation_prompt": null}
{"id": "5e7b4728-566e-4686-9496-749b75e713b3", "solution": "import numpy as np\n\nclass EnhancedDynamicInertiaOppositionBasedSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _opposition_based_learning(x):\n            return 2 * np.mean(x) - x\n        \n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                # Integrate opposition-based learning for enhanced exploration\n                opp_swarm_i = _opposition_based_learning(swarm[i])\n                swarm[i] = opp_swarm_i if func(opp_swarm_i) < func(swarm[i]) else swarm[i]\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "EnhancedDynamicInertiaOppositionBasedSwarmOptimization", "description": "Accelerate convergence speed by introducing a novel opposition-based learning strategy to enhance exploration-exploitation balance.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name '_initialize_swarm' is not defined\").", "error": "NameError(\"name '_initialize_swarm' is not defined\")", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {}, "mutation_prompt": null}
{"id": "919bfbb0-f059-485f-8130-c4ba5aecc1bc", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "f5b42e23-7759-4761-b5be-03fa5a38f15d", "solution": "import numpy as np\n\nclass HybridMetaheuristicOptimization:\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _mutation(x, f):\n            cr = 0.5  # Crossover probability\n            f = 0.5  # Scaling factor\n            candidates = np.random.choice(range(self.swarm_size), 3, replace=False)\n            mutant = swarm[candidates[0]] + f * (swarm[candidates[1]] - swarm[candidates[2]])\n            crossover_mask = np.random.rand(self.dim) < cr\n            trial = np.where(crossover_mask, mutant, x)\n            return trial\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _mutation(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "HybridMetaheuristicOptimization", "description": "Introducing a novel mutation strategy based on a hybrid of differential evolution and particle swarm optimization to enhance exploration and exploitation trade-off for faster convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('HybridMetaheuristicOptimization() takes no arguments').", "error": "TypeError('HybridMetaheuristicOptimization() takes no arguments')", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {}, "mutation_prompt": null}
{"id": "4a25bec6-c566-4c32-be7a-d006664c1da9", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "29eaacbf-fbad-40c4-a821-768f3f839250", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationAdaptiveSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                mutation_rate = 0.1 * (1 - func(swarm[i]) / func(best_position))  # Dynamic mutation strategy\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = swarm[i] + mutation_rate * np.random.normal(size=self.dim)  # Mutation based on individual performance\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "EnhancedDynamicMutationAdaptiveSwarmOptimization", "description": "Implementing a dynamic adaptive mutation strategy based on individual performance to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('cannot convert float NaN to integer').", "error": "ValueError('cannot convert float NaN to integer')", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {}, "mutation_prompt": null}
{"id": "6befc89a-f323-4e51-ba3f-060f231063c9", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "50cd22dc-fd4c-49c9-8e58-b33aab548e0f", "solution": "import numpy as np\n\nclass DynamicNeighborhoodSearchEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _neighborhood_search(x, f):\n            neighborhoods = [x + np.random.normal(size=self.dim) for _ in range(5)]  # Dynamic neighborhood exploration\n            neighborhood_fitness = [f(neighbor) for neighbor in neighborhoods]\n            best_neighbor = neighborhoods[np.argmin(neighborhood_fitness)]\n            return best_neighbor if f(best_neighbor) < f(x) else x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _neighborhood_search(swarm[i], func)  # Neighborhood search strategy\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicNeighborhoodSearchEnhancedSocialSwarmOptimization", "description": "Introducing a dynamic neighborhood search strategy to enhance exploration and exploitation capabilities, promoting faster convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name '_initialize_swarm' is not defined\").", "error": "NameError(\"name '_initialize_swarm' is not defined\")", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {}, "mutation_prompt": null}
{"id": "dbbd2677-3066-4c9f-8a9c-d08fb2f55155", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "963b6938-9195-4529-957a-ae3d4e2bd612", "solution": "import numpy as np\n\nclass AdaptiveGaussianPerturbationEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _adaptive_gaussian_perturbation_mutation(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                perturbation = np.random.normal(scale=step_size, size=self.dim)\n                x_new = x + perturbation\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _adaptive_gaussian_perturbation_mutation(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveGaussianPerturbationEnhancedSocialSwarmOptimization", "description": "Introducing a novel mutation strategy based on adaptive Gaussian perturbation to enhance exploration and exploitation balance.", "configspace": "", "generation": 56, "fitness": 0.17343851523826406, "feedback": "The algorithm AdaptiveGaussianPerturbationEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "58b24177-f5f1-4949-af9d-400d1b329189", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "196b3f85-6fc7-43cf-be18-4ddf73dac221", "solution": "import numpy as np\n\nclass EnhancedDynamicInertiaWeightEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def _local_search(self, x, f):\n        step_size = 0.5\n        for _ in range(10):\n            x_new = x + step_size * np.random.normal(size=self.dim)\n            if f(x_new) < f(x):\n                x = x_new\n                step_size *= 1.2  # Adaptive step adjustment for faster convergence\n            else:\n                step_size *= 0.8  # Adaptive step adjustment for faster convergence\n        return x", "name": "EnhancedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Speeding up convergence by enhancing local search with adaptive step size based on current function landscape.", "configspace": "", "generation": 58, "fitness": 0.17343851523826406, "feedback": "The algorithm EnhancedDynamicInertiaWeightEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "c4daf7d5-9da2-4e45-9524-f253ff41dcfc", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "f8c85c74-7af8-44b9-94d3-1d3c71a100ac", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "6f4ad5b0-da17-4cd7-90e6-2b70aac99c2e", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "4e45a6b3-6106-44ee-a1d1-3d01082353c9", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "d547ce66-0feb-4d17-8752-7c3f6c7d574f", "solution": "import numpy as np\n\nclass AdaptiveMutationStepSizeDynamicInertiaWeightEnhancedSocialSwarmOptimization:\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            best_fitness = f(x)\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                new_fitness = f(x_new)\n                if new_fitness < best_fitness:\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment based on fitness improvement\n                    best_fitness = new_fitness\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveMutationStepSizeDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Introducing adaptive mutation step size based on fitness improvement to enhance local search capability and accelerate convergence.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('AdaptiveMutationStepSizeDynamicInertiaWeightEnhancedSocialSwarmOptimization() takes no arguments').", "error": "TypeError('AdaptiveMutationStepSizeDynamicInertiaWeightEnhancedSocialSwarmOptimization() takes no arguments')", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {}, "mutation_prompt": null}
{"id": "18fb7c1f-586a-4781-90f3-4db89f0c1454", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "addd2612-ca6d-4c1b-9df5-ede943a96a09", "solution": "import numpy as np\n\nclass EnhancedDynamicInertiaWeightEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            memory = x\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1\n                elif f(x_new) < f(memory):\n                    x = x_new\n                    memory = x_new\n                    step_size *= 1.1\n                else:\n                    step_size *= 0.9\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "EnhancedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Enhancing convergence speed by incorporating a memory-based local search strategy to exploit promising regions efficiently.", "configspace": "", "generation": 65, "fitness": 0.16174968174160162, "feedback": "The algorithm EnhancedDynamicInertiaWeightEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2766208405177747, 0.29236881080091937, 0.27441403372330053, 0.26336034090630533, 0.2686484414214789, 0.26776787013288417, 0.286222442207541, 0.2910911503844782, 0.2737575340953625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06783607993594465, 0.07280141866635892, 0.07016530803451881, 0.06883578720463668, 0.07472853585121197, 0.07197888984238487, 0.07053152026316678, 0.07653903914456439, 0.06615773993537533, 0.05682173895906839, 0.07349615596859982, 0.06921885809305661, 0.06086922267240913, 0.07681848508050049, 0.08095178557412364, 0.05535679800694948, 0.059392226011345195, 0.08974562195977542, 0.9208201176031623, 0.8940121978863317, 0.933015655701261, 0.9385453264883258, 0.9191185563624601, 0.9559473071753414, 0.9834494282069819, 0.9499170905654726, 0.9292430848949287, 0.13590945055283754, 0.13495708243526716, 0.15073794520036177, 0.15507839997125483, 0.1311293673329288, 0.15117025037074105, 0.18390326189135053, 0.12298576172720421, 0.15479840587874916, 0.20332408098403343, 0.19411284806701012, 0.1692188422121519, 0.17437577523942493, 0.18893279474905367, 0.21565403257753268, 0.17668394028909573, 0.19829521753080204, 0.16174845260262427, 0.11562622707995929, 0.07119553279608348, 0.0974031226451545, 0.07916853710191296, 0.06503193048816869, 0.06834205597501619, 0.09805522380610598, 0.08767315091290473, 0.10622188365543839, 0.13179877728859357, 0.16563472210175478, 0.1207005684794824, 0.13902526683487282, 0.11344942354825871, 0.13053878590204882, 0.15434153771463643, 0.13272254843561748, 0.10649857403598961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023619777133404574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09198676371231762, 0.032980747468238425, 0.08225681786132011, 0.06411524975550187, 0.04957673326144907, 0.04032996476712647, 0.07687630219260588, 0.09914177948712055, 0.07269120255456851, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023543300244673215, 0.018167371810288158, 0.027849058979560914, 0.021787552853620995, 0.04200579498116053, 0.02177230330342428, 0.014214732763836224, 0.024852646584399896, 0.011203685834676458, 0.2991785100342652, 0.2829382165592951, 0.27740287064482727, 0.2641733687052611, 0.269800030756554, 0.2700731302803028, 0.2924491632553554, 0.28347393682229227, 0.3334995685381139, 0.052326490288317484, 0.07445453651125444, 0.08019873273277112, 0.0804072235740616, 0.06032819724808813, 0.09700949185983043, 0.08712872200267574, 0.06899167390977146, 0.0803732006743556, 0.11662033816876027, 0.11931789522948166, 0.1364903186942824, 0.12396878178933313, 0.13214709943726666, 0.111778566347286, 0.12266610130472422, 0.16433596037641163, 0.133100237410406, 0.21361698743226987, 0.20990159216449644, 0.19465432723710718, 0.22074662759881525, 0.227751482546098, 0.21849399217218646, 0.2108286309253995, 0.2078831041107324, 0.1898757867352282, 0.15698962051316334, 0.13939233946680873, 0.128524551270902, 0.16219366408445424, 0.18046722548911143, 0.1599516631310831, 0.13821804545592498, 0.1442246173918189, 0.12999897484152767, 0.20372723699345086, 0.18434175358547944, 0.19160788642400806, 0.19521056514949509, 0.21723364032660375, 0.18765532466819668, 0.2017723578029461, 0.19588666582428227, 0.20598059731229024, 0.16409386175311103, 0.16825921487382334, 0.16591072160505171, 0.16574012785899084, 0.1769229760647455, 0.16751726915819254, 0.16767741575984274, 0.16781637957609385, 0.16082779095647715, 0.29060176037398855, 0.17757861349361115, 0.12776810198619515, 0.3822839470641044, 0.17989101344374214, 0.28237376208801535, 0.11996540823192625, 0.1623014099049127, 0.1520867431130426, 0.31241136045203344, 0.17558143637186874, 0.32674446369770205, 0.178965696631605, 0.16136687654957882, 0.2593549931652015, 0.10569585143707261, 0.14123203386816696, 0.2412617434228146, 0.17738911301775517, 0.17735990698227377, 0.1658213181606043, 0.17579715299941856, 0.17483197270203332, 0.16426201791315564, 0.1911476521722386, 0.17506225487791105, 0.20471909887072415, 0.06766501633217181, 0.0726558054254618, 0.08047760682865068, 0.06915201047148167, 0.06976724928451716, 0.06836801531766612, 0.06551637020140644, 0.06440419694409139, 0.07221869615129761]}, "mutation_prompt": null}
{"id": "1902ed61-6c97-4ed5-be30-f085a383a2d8", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization(AdaptiveStepSizeEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing a dynamic inertia weight adaptation mechanism based on population diversity to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.2999827011025531, 0.30394815105898343, 0.31765989863688215, 0.28982479606653466, 0.299745977802908, 0.291040627912345, 0.3054604192383864, 0.3185096604311377, 0.3079038513225648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760046274238837, 0.07504561475187399, 0.08187000597644178, 0.08825772591116654, 0.07678557759478322, 0.08549099697196838, 0.06553668305539162, 0.08630470691375025, 0.07192093839995539, 0.05975123292508688, 0.0824743261277856, 0.06686576210770456, 0.09058264489788781, 0.0750109188768171, 0.06372106098331387, 0.08666866800271122, 0.07159537730519128, 0.06607601972445243, 0.9458803999401747, 0.9618284093675, 0.9523886222314722, 0.9592308148997415, 0.9166504698615077, 0.9507429093803008, 0.9869861874679805, 0.9448427978523968, 0.967547024541519, 0.1613403670144078, 0.1497206759651526, 0.15344881154991818, 0.17395402439915597, 0.16659127839278576, 0.15404967336728936, 0.16611025544369495, 0.1750110138200962, 0.16819283105088145, 0.2093702158088232, 0.21192552888416927, 0.1836783900209551, 0.22379738745874322, 0.22602060502496069, 0.21656492369536107, 0.21510346598311947, 0.22247780970437303, 0.18250024630521688, 0.07733707420789593, 0.09707641011957657, 0.1091102967354316, 0.08854602963295655, 0.06459067309108946, 0.10038864215356358, 0.08800939693301701, 0.11813369417776498, 0.11691931384565724, 0.1313287402604537, 0.10972642415583522, 0.13401971999305184, 0.173203867876921, 0.11807623909664422, 0.11882865596975811, 0.14221583734538923, 0.13242381851921747, 0.13371660872300617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000324888706259685, 0.015655808956564377, 0.11856201490645779, 0.09235905395209432, 0.1284733116722827, 0.06603058553683805, 0.07529582621672959, 0.05047814305049192, 0.0648003435829696, 0.09256898006786562, 0.0707822980161229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0690682923766992, 0.022253744769007988, 0.04231264696267112, 0.03515799813798948, 0.043705179746740375, 0.03142538988427046, 0.01911943461126464, 0.038032533830965276, 0.028609432997286244, 0.3007476356081219, 0.3014913395770332, 0.29813140819568495, 0.30006921187207203, 0.32542743250776807, 0.2832518842802073, 0.3348053090295977, 0.3213681502953698, 0.3128352052731501, 0.06204479451052558, 0.07030862406705696, 0.06934331744520572, 0.07946921943143315, 0.08397235733161201, 0.06667632158436887, 0.07092375220621527, 0.08033994383296972, 0.08180157277672684, 0.1308783952956546, 0.1601992899114243, 0.136310312359184, 0.14323771577747124, 0.17219418252660723, 0.14090725198708764, 0.12069767767658124, 0.17680113855878377, 0.1443584681473956, 0.21201736348300027, 0.21981075576091302, 0.20677333534712783, 0.2372675297056982, 0.22903746583533635, 0.2303111974867793, 0.2190385775271254, 0.21338585101348606, 0.20911590551760684, 0.1639893084592342, 0.17299432728279096, 0.16011549055685304, 0.19386742346664187, 0.19274187100804774, 0.16654368437576106, 0.15517447822594255, 0.169559876401998, 0.14523326685809157, 0.22807444291606416, 0.2149505643194427, 0.20444674611331837, 0.20094536753779957, 0.22449262258136204, 0.211538948740135, 0.21310025322912074, 0.20633482121394708, 0.22059959486166336, 0.1799490553492138, 0.165700208411088, 0.1719288223136789, 0.17265651353214928, 0.1949230581538114, 0.16750301884202512, 0.16835878293293205, 0.17435251276797148, 0.17284699551358462, 0.31113944070520516, 0.1703523007858896, 0.18298537040924534, 0.37399575445665734, 0.16764206693390005, 0.13822295081623126, 0.11997318960062497, 0.16625157502770838, 0.30995722170948636, 0.3198421749528989, 0.19499905598667489, 0.32249649296915417, 0.18146988182204882, 0.3200040793756018, 0.284674729786226, 0.2389353110620479, 0.1637076212659091, 0.22726950995764528, 0.18030018352634292, 0.17560862509590203, 0.1834782240170283, 0.1712167342764136, 0.17076995451066845, 0.18154425004020636, 0.18405503226188036, 0.1722729963579548, 0.17563741568626223, 0.07487672863127448, 0.07005490898108635, 0.08301477701571114, 0.07530876599202707, 0.07839991825060588, 0.07782539577705083, 0.07843795594722125, 0.0763392178217005, 0.09022606817253853]}, "mutation_prompt": null}
{"id": "e5863d9c-0d68-4776-bcf7-d9b2dbb5443b", "solution": "import numpy as np\n\nclass ImprovedDynamicInertiaWeightEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(10):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.1  # Adaptive step adjustment\n                else:\n                    step_size *= 0.9  # Adaptive step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.5 + 0.5 * np.random.uniform()  # Dynamic inertia weight adaptation\n                mutation_scale = 0.1 + 0.4 * (_local_search(swarm[i], func) < func(swarm[i]))  # Dynamic mutation scaling factor\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func) * mutation_scale\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "ImprovedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Improved convergence speed by incorporating a dynamic mutation scaling factor based on the local search progress.", "configspace": "", "generation": 67, "fitness": 0.126822453040633, "feedback": "The algorithm ImprovedDynamicInertiaWeightEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.25279092826537086, 0.2558194463080534, 0.26055727916637506, 0.19802156641549118, 0.18875569014426696, 0.21508772144568278, 0.21533050274717958, 0.22846725165903525, 0.18087430547515593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06668138981274829, 0.06701831670278569, 0.05474646236113545, 0.06543747185075788, 0.07116381817739892, 0.0822694332960493, 0.05783702581907857, 0.0586570219118655, 0.06261966724352275, 0.05823050828838272, 0.050172332494564986, 0.07040090242683561, 0.051750525933173974, 0.04916874471205812, 0.06191489008126205, 0.04783909655541152, 0.04666456304635069, 0.043274380964717585, 0.18182129443904715, 0.1356056086032964, 0.1824875298303541, 0.8626094324642335, 0.13404698201834375, 0.6555127412467494, 0.21666132168928687, 0.14760468927400439, 0.809900584260932, 0.10312424924610719, 0.09151083825188011, 0.08096536445601543, 0.10947916602161656, 0.11847820941791909, 0.11344368256869874, 0.10494180389183971, 0.09637120686162903, 0.1473907543117593, 0.20077272182311945, 0.16649057086329955, 0.16563669178961393, 0.16993557885760513, 0.2082263750145531, 0.16656519900291789, 0.1422286510376487, 0.14779129823676618, 0.12641077399262446, 0.0716125713080259, 0.06017944786947316, 0.03327298535790102, 0.02495338066096975, 0.030712614155658957, 0.01734145223394079, 0.058800213865054296, 0.06523241001458302, 0.08528633769064986, 0.1439898213759938, 0.11746222747232682, 0.11539163021386334, 0.12666862623802166, 0.12003560193644225, 0.12461931992967834, 0.1201266109355118, 0.16199577735016957, 0.11644978776908954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0993540343759276, 0.051061260483398874, 0.1154547611992015, 0.06128304850621158, 0.049254193813992764, 0.037397710558820796, 0.10944387293895474, 0.08758155513862564, 0.05515672573230024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00026953071602187073, 0.03304828965443363, 0.007987521165417233, 9.999999999998899e-05, 0.01358514120638632, 9.999999999998899e-05, 0.0006186323965162721, 9.999999999998899e-05, 0.010547927390049283, 0.25277091132067653, 0.27903688180612496, 0.23635361561914436, 0.21634557980229296, 0.21369405492124993, 0.20160762709332836, 0.28866130212213115, 0.27411502742165206, 0.2685384793818525, 0.0567544404242899, 0.06359969363182005, 0.06554834580287139, 0.06915625257845914, 0.051969483444929354, 0.06255018899361475, 0.06836512334422662, 0.07471021212101236, 0.08399847270996541, 0.1649742806788308, 0.15109789701498444, 0.1335098013741325, 0.12077300332915586, 0.16155510323479683, 0.12413939586003575, 0.13215366906729908, 0.16022624530920926, 0.12064771688030873, 0.1943666302682665, 0.1820467569700004, 0.16990510238921686, 0.20967606844606423, 0.20866500052307213, 0.20735990519969238, 0.16876428441044355, 0.20659868889798494, 0.18917271754395582, 0.11830509906892128, 0.11984587670845326, 0.11002551298913132, 0.15859200630922365, 0.1645338397616748, 0.15947992940083677, 0.1328925985255044, 0.14927306610439028, 0.12670351289148507, 0.2518751784650116, 0.2654999943614108, 0.2660275722413108, 0.21026984921769598, 0.21901868741745534, 0.23977821672118815, 0.21122922725638504, 0.20727628300143108, 0.20494173897540036, 0.16958043070129936, 0.15883800387951819, 0.16297259112379803, 0.16295363621062786, 0.16260331366545766, 0.16612932551873094, 0.16796034695771012, 0.1660332905505547, 0.16201769406320132, 0.1788214316086989, 0.17544239304173714, 0.16854550562369586, 0.23049136553840477, 0.17580014116313192, 0.20574083245289, 0.16397316949610607, 0.14606728878214004, 0.1517729971143562, 0.2697772167951855, 0.2083385022123988, 0.1849162689257332, 0.14879545156541063, 0.21774561216322375, 0.11512315689259356, 0.21208846928400127, 0.21384848964895287, 0.18816065136937044, 0.17982119078001724, 0.17636609490964306, 0.1735296982333271, 0.18735768285019727, 0.1800978393023026, 0.18550150451590297, 0.18535719233180958, 0.18247616771075614, 0.17073086638595925, 0.061519030495447935, 0.0649779829726207, 0.06226177871003402, 0.07600277352396356, 0.0646293347011404, 0.06623140711712128, 0.0726944906959035, 0.0693960370891149, 0.0744454743183518]}, "mutation_prompt": null}
{"id": "904afb46-b497-45c7-9859-d746baaf119f", "solution": "import numpy as np\n\nclass FastDynamicInertiaWeightEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(20):  # Increased local search iterations\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.2  # Adaptive step adjustment with faster adaptation rate\n                else:\n                    step_size *= 0.8  # Adaptive step adjustment with faster adaptation rate\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.3 + 0.7 * np.random.uniform()  # Faster dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "FastDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing dynamic inertia weight adaptation and local search with adaptive step size to improve convergence speed of the optimization algorithm.", "configspace": "", "generation": 68, "fitness": 0.20056613875322396, "feedback": "The algorithm FastDynamicInertiaWeightEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "0fd421b3-8707-4c77-acfa-132cda557c77", "metadata": {"aucs": [0.44690091640399787, 0.3842194175418635, 0.4166701298813119, 0.3326184789715816, 0.3452182051660738, 0.3622857015338532, 0.372568875367127, 0.3741470019007578, 0.3666950071221521, 0.0005598465880267689, 9.999999999998899e-05, 0.003081482676349112, 0.007696764127456457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07942368247055454, 0.10242501879163413, 0.10171388973772078, 0.09218333114744981, 0.09220127337638784, 0.09561126111628182, 0.0956121980471093, 0.07382724119305639, 0.09840269595884255, 0.0772901578114763, 0.09447789141113916, 0.06076306455262981, 0.07482590136470424, 0.0875246701311928, 0.07541562093367393, 0.07043304038804454, 0.09145125836500556, 0.07545349408161095, 0.9667620683936913, 0.9545751819433115, 0.8298796574365306, 0.9669629523668299, 0.94279508963497, 0.9340682949034784, 0.9801319285285452, 0.975151807345267, 0.9374416151072191, 0.18806111450198515, 0.22068285935118415, 0.1797425818961771, 0.1866284540732549, 0.1807745644352028, 0.1776870781432368, 0.1951792478857145, 0.17164644786463468, 0.15723497447331303, 0.20235795453715388, 0.17009795674509165, 0.1943377751096117, 0.25696092837586115, 0.25775911043072397, 0.24982397701126968, 0.23532892459456678, 0.20875467840238127, 0.2658658813730225, 0.11031286543526841, 0.1455137580351782, 0.14184851404463694, 0.12953595885799674, 0.13688458962558958, 0.14834813060172147, 0.13272296551883211, 0.14726118260435628, 0.14310925438115285, 0.25440351059170563, 0.21408704739308138, 0.17698011632245103, 0.18581718776839318, 0.1894027212762175, 0.25248535104132386, 0.20793137727772293, 0.18440463507984328, 0.12985640559017575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024096336908033256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007469813664524927, 0.13916830719149997, 0.15795612987419538, 0.10562908254651249, 0.12277382116469071, 0.08070043902089852, 0.07629041804571512, 0.12179418630675665, 0.16046870599575236, 0.12588346338937195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683306348585573, 0.055557727914699706, 0.0676908853115954, 0.07762408566246759, 0.06801935310857588, 0.06239688864505866, 0.05541189673968583, 0.08270914072464897, 0.0378009214314996, 0.35054964332157634, 0.3495880743647227, 0.34313669825307835, 0.34141384028183897, 0.3727187058731529, 0.3516210244536023, 0.3602969489720602, 0.43323070085763293, 0.3881550472984976, 0.08866354580113034, 0.08261250974345491, 0.06816459402002617, 0.08564303756481528, 0.07410358427479824, 0.08903444486545065, 0.09521918885116687, 0.12553060736180033, 0.09200054485312159, 0.23960304360530227, 0.21170520729117703, 0.17288912318648364, 0.18422506887045453, 0.19302486314517242, 0.20035872016312373, 0.2321064236247652, 0.17993984583298317, 0.1803323284803381, 0.23944323513515064, 0.2332053168519176, 0.21513429920428861, 0.25788707185921333, 0.247635062280394, 0.2624013558306171, 0.2139923172785233, 0.24480135427569982, 0.21018118659005358, 0.20322867449317594, 0.16233847855335315, 0.16014383330296278, 0.18723030031344357, 0.17604254124542873, 0.18454575773526205, 0.16634942403144692, 0.18936462730626213, 0.17212303921466243, 0.22151994086486182, 0.23185985278412147, 0.23766246354696008, 0.22659019664661617, 0.21412009465332327, 0.22273903149376872, 0.24740051372815186, 0.22406092449160198, 0.22884753982478245, 0.17547839168202883, 0.1871225187457698, 0.1873518097771132, 0.17869257685361628, 0.18200866876151534, 0.1805158003737246, 0.17667207124989726, 0.17172468559596532, 0.18319493857460123, 0.502841493563438, 0.34431940420177476, 0.1855255322448568, 0.3009946766601038, 0.3099792031494407, 0.4294281425793437, 0.49042145707540563, 0.14895843075364013, 0.161061209935911, 0.417263161905862, 0.4545094054395379, 0.39964867865069087, 0.210175257621244, 0.4348801158317348, 0.19875679537876767, 0.27712870800464484, 0.31750279368808554, 0.27651365026373487, 0.18980771438657884, 0.17529129899313123, 0.18188804394437164, 0.17026801188663598, 0.1740577831456841, 0.16746146517981475, 0.17258995570858005, 0.18176380919875024, 0.1899711858425197, 0.07000330270816335, 0.09278651286735728, 0.07856214289334673, 0.0719356724602821, 0.06676177007633921, 0.07526702909837335, 0.0728566624951894, 0.07125274408005067, 0.08260462682000858]}, "mutation_prompt": null}
{"id": "5c19aa79-7b32-48a3-bd04-3348a86d129b", "solution": "import numpy as np\n\nclass FastDynamicInertiaWeightEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(20): \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        best_solution = best_position.copy()  # Elitist mechanism to store the best solution\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.3 + 0.7 * np.random.uniform()  \n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n            best_solution = best_position if func(best_position) < func(best_solution) else best_solution  # Update the best solution found so far\n        return best_solution", "name": "FastDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Enhancing convergence speed by incorporating an elitist mechanism that preserves the best solution found so far throughout the optimization process.", "configspace": "", "generation": 69, "fitness": 0.2004143510276315, "feedback": "The algorithm FastDynamicInertiaWeightEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "904afb46-b497-45c7-9859-d746baaf119f", "metadata": {"aucs": [0.44659700535802105, 0.383839869992301, 0.41636679894346973, 0.3321059874190181, 0.3451099080959006, 0.3618693088755305, 0.3725089727833981, 0.37378080460559915, 0.36635856133005473, 0.0005458339952021385, 9.999999999998899e-05, 0.0030020495136307, 0.0076891454596592634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07940531872614032, 0.10234440317370064, 0.10146917230653996, 0.09214536319669464, 0.09211594107180376, 0.09544763728057337, 0.09556912266264894, 0.07379957060891085, 0.09824674761895147, 0.0771937746014979, 0.0944541599285893, 0.060681498995582506, 0.07465370744763622, 0.08750394267931061, 0.07536348343953958, 0.0703293762830397, 0.0914034271234565, 0.07532678752690702, 0.9667620683936913, 0.9545751819433115, 0.8290678081504465, 0.9669629523668299, 0.9426357169588541, 0.9339013482714205, 0.9801319285285452, 0.975151807345267, 0.9372787807428216, 0.18760443960406126, 0.22055936350123106, 0.17920655241413974, 0.18650376408408065, 0.18062361161501517, 0.1774877463274015, 0.19487678224925853, 0.17131644245228295, 0.15708960385280402, 0.2021620321675991, 0.1700797490167686, 0.1942472045454129, 0.2565689249336164, 0.25742190683207, 0.24953911775082405, 0.2349752184511431, 0.20858041794263715, 0.26576526527670963, 0.1101996371443894, 0.14517672660133918, 0.14161822963879167, 0.12945506690514175, 0.1368703687591145, 0.14795530082524333, 0.13254232448046077, 0.14713349550840793, 0.14293845657693438, 0.2543702487839724, 0.21393231407791669, 0.17683493715794396, 0.18567278023415923, 0.189200408533582, 0.2524026063245084, 0.20785737517854708, 0.18425835273340163, 0.12983382475832017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023813587965243466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0074597249394539045, 0.13903879984450973, 0.1578560554713485, 0.10546739852944398, 0.12257220374610756, 0.08050942989787913, 0.07623361256993666, 0.1217779297119731, 0.16028435096116322, 0.12570372909972516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0868004410212665, 0.05546802130973849, 0.06763299415398183, 0.07748008958994146, 0.06796630394224779, 0.06213905296846001, 0.05527513149737129, 0.08265451570962845, 0.037630674234876316, 0.35042829964587907, 0.3495217006407454, 0.34311770073051673, 0.3411644832280363, 0.37258352019031904, 0.3514744833863871, 0.36018715298441906, 0.43323070085763293, 0.3879184350110837, 0.08859906755570612, 0.08229169926941826, 0.06811390484684798, 0.08560116895530734, 0.07404190453866522, 0.08902515905926467, 0.09493784262067262, 0.12548770838950218, 0.09194045799508732, 0.23955190217510025, 0.21149063365807064, 0.1725683718506038, 0.18422506887045453, 0.19274328317420264, 0.20022649653922076, 0.23204200184096713, 0.17967944773194922, 0.1803323284803381, 0.23917798654133227, 0.23299890070568985, 0.21482673889417525, 0.25770770381479713, 0.24753236559871028, 0.2622318229328461, 0.21392742582996205, 0.24474810999194008, 0.21009403589347997, 0.20314578294136032, 0.16218532999002144, 0.1600393551088497, 0.18702389588936985, 0.1758716720778466, 0.1844772210936556, 0.16633839723076593, 0.189229538819229, 0.17199476489074272, 0.22130732394623798, 0.23166616035362864, 0.2373550039336324, 0.22648756660073954, 0.21398137560584318, 0.22273704563387142, 0.2473807571493799, 0.2240014690357901, 0.22884353984231443, 0.17545642376520232, 0.1870972124770588, 0.1873445874046551, 0.17851366240650768, 0.18184473416864966, 0.1804854002538565, 0.1766641708709793, 0.17171308853168743, 0.18317683700342358, 0.5026116482675744, 0.3441229789308653, 0.1855185808083395, 0.29997648091027007, 0.3079065535346486, 0.4284056400703793, 0.4889767318941053, 0.14887282299281523, 0.16105720287440561, 0.4162324970173893, 0.4539756695742887, 0.39895950792371104, 0.21016164636533807, 0.4345289112228998, 0.19870440429515035, 0.2767787588592021, 0.31730491912926184, 0.2764136975879997, 0.18971197259208172, 0.1752615242388862, 0.18181176754486128, 0.17023381776749558, 0.17405263207765498, 0.1673792778463934, 0.1724863842940334, 0.18171142286825293, 0.18997036062071915, 0.06999588875930729, 0.0927720317105315, 0.07855705799466994, 0.07192003351410325, 0.06675541608176971, 0.07520547268833411, 0.07278218093044364, 0.07115369804894622, 0.08257798052862086]}, "mutation_prompt": null}
{"id": "88a3554b-9704-4171-9ce8-7a8a040170d4", "solution": "import numpy as np\n\nclass FastDynamicInertiaWeightEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(20):  # Increased local search iterations\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.2  # Adaptive step adjustment with faster adaptation rate\n                else:\n                    step_size *= 0.8  # Adaptive step adjustment with faster adaptation rate\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.3 + 0.7 * np.random.uniform()  # Faster dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "FastDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Utilizing dynamic inertia weight adaptation and local search with adaptive step size to improve convergence speed of the optimization algorithm.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "904afb46-b497-45c7-9859-d746baaf119f", "metadata": {"aucs": [0.44690091640399787, 0.3842194175418635, 0.4166701298813119, 0.3326184789715816, 0.3452182051660738, 0.3622857015338532, 0.372568875367127, 0.3741470019007578, 0.3666950071221521, 0.0005598465880267689, 9.999999999998899e-05, 0.003081482676349112, 0.007696764127456457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07942368247055454, 0.10242501879163413, 0.10171388973772078, 0.09218333114744981, 0.09220127337638784, 0.09561126111628182, 0.0956121980471093, 0.07382724119305639, 0.09840269595884255, 0.0772901578114763, 0.09447789141113916, 0.06076306455262981, 0.07482590136470424, 0.0875246701311928, 0.07541562093367393, 0.07043304038804454, 0.09145125836500556, 0.07545349408161095, 0.9667620683936913, 0.9545751819433115, 0.8298796574365306, 0.9669629523668299, 0.94279508963497, 0.9340682949034784, 0.9801319285285452, 0.975151807345267, 0.9374416151072191, 0.18806111450198515, 0.22068285935118415, 0.1797425818961771, 0.1866284540732549, 0.1807745644352028, 0.1776870781432368, 0.1951792478857145, 0.17164644786463468, 0.15723497447331303, 0.20235795453715388, 0.17009795674509165, 0.1943377751096117, 0.25696092837586115, 0.25775911043072397, 0.24982397701126968, 0.23532892459456678, 0.20875467840238127, 0.2658658813730225, 0.11031286543526841, 0.1455137580351782, 0.14184851404463694, 0.12953595885799674, 0.13688458962558958, 0.14834813060172147, 0.13272296551883211, 0.14726118260435628, 0.14310925438115285, 0.25440351059170563, 0.21408704739308138, 0.17698011632245103, 0.18581718776839318, 0.1894027212762175, 0.25248535104132386, 0.20793137727772293, 0.18440463507984328, 0.12985640559017575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024096336908033256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007469813664524927, 0.13916830719149997, 0.15795612987419538, 0.10562908254651249, 0.12277382116469071, 0.08070043902089852, 0.07629041804571512, 0.12179418630675665, 0.16046870599575236, 0.12588346338937195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08683306348585573, 0.055557727914699706, 0.0676908853115954, 0.07762408566246759, 0.06801935310857588, 0.06239688864505866, 0.05541189673968583, 0.08270914072464897, 0.0378009214314996, 0.35054964332157634, 0.3495880743647227, 0.34313669825307835, 0.34141384028183897, 0.3727187058731529, 0.3516210244536023, 0.3602969489720602, 0.43323070085763293, 0.3881550472984976, 0.08866354580113034, 0.08261250974345491, 0.06816459402002617, 0.08564303756481528, 0.07410358427479824, 0.08903444486545065, 0.09521918885116687, 0.12553060736180033, 0.09200054485312159, 0.23960304360530227, 0.21170520729117703, 0.17288912318648364, 0.18422506887045453, 0.19302486314517242, 0.20035872016312373, 0.2321064236247652, 0.17993984583298317, 0.1803323284803381, 0.23944323513515064, 0.2332053168519176, 0.21513429920428861, 0.25788707185921333, 0.247635062280394, 0.2624013558306171, 0.2139923172785233, 0.24480135427569982, 0.21018118659005358, 0.20322867449317594, 0.16233847855335315, 0.16014383330296278, 0.18723030031344357, 0.17604254124542873, 0.18454575773526205, 0.16634942403144692, 0.18936462730626213, 0.17212303921466243, 0.22151994086486182, 0.23185985278412147, 0.23766246354696008, 0.22659019664661617, 0.21412009465332327, 0.22273903149376872, 0.24740051372815186, 0.22406092449160198, 0.22884753982478245, 0.17547839168202883, 0.1871225187457698, 0.1873518097771132, 0.17869257685361628, 0.18200866876151534, 0.1805158003737246, 0.17667207124989726, 0.17172468559596532, 0.18319493857460123, 0.502841493563438, 0.34431940420177476, 0.1855255322448568, 0.3009946766601038, 0.3099792031494407, 0.4294281425793437, 0.49042145707540563, 0.14895843075364013, 0.161061209935911, 0.417263161905862, 0.4545094054395379, 0.39964867865069087, 0.210175257621244, 0.4348801158317348, 0.19875679537876767, 0.27712870800464484, 0.31750279368808554, 0.27651365026373487, 0.18980771438657884, 0.17529129899313123, 0.18188804394437164, 0.17026801188663598, 0.1740577831456841, 0.16746146517981475, 0.17258995570858005, 0.18176380919875024, 0.1899711858425197, 0.07000330270816335, 0.09278651286735728, 0.07856214289334673, 0.0719356724602821, 0.06676177007633921, 0.07526702909837335, 0.0728566624951894, 0.07125274408005067, 0.08260462682000858]}, "mutation_prompt": null}
{"id": "c8e2ddc4-2e12-4fa6-bee2-eb1f6d93ac05", "solution": "import numpy as np\n\nclass FastDynamicInertiaWeightEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f):\n            step_size = 1.0\n            for _ in range(30):  # Increased local search iterations further to enhance exploration\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.3  # Adaptive step adjustment with faster adaptation rate\n                else:\n                    step_size *= 0.7  # Adaptive step adjustment with faster adaptation rate\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                inertia_weight = 0.3 + 0.7 * np.random.uniform()  # Faster dynamic inertia weight adaptation\n                swarm[i] = inertia_weight * swarm[i] + self.phi_p * r_p * (best_position - swarm[i]) + self.phi_g * r_g * (best_position - swarm[i])\n                swarm[i] = _local_search(swarm[i], func)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "FastDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Improving convergence speed by enhancing local search through adaptive step size adjustment and increasing the number of local search iterations.", "configspace": "", "generation": 71, "fitness": 0.20468271678190378, "feedback": "The algorithm FastDynamicInertiaWeightEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "904afb46-b497-45c7-9859-d746baaf119f", "metadata": {"aucs": [0.47093547448048834, 0.3872576921021921, 0.44890124103051543, 0.4127276451286843, 0.3922797132118615, 0.3805820796871866, 0.41057632450015324, 0.41704890587860277, 0.3850659638155324, 0.011022604139565573, 0.014707672504913005, 0.0010488677399150825, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10129884921923926, 0.08748581344915196, 0.10572883416399304, 0.07792719315404517, 0.08466461913983003, 0.09479053430501572, 0.09910722870660171, 0.11804146292652407, 0.09015845374100373, 0.08660197648492485, 0.08641395259642126, 0.07937888007019589, 0.08967515623224664, 0.10469668245097186, 0.10655691985242588, 0.0704658702301707, 0.08554880057936098, 0.10121831868886333, 0.9081131370449388, 0.9424598259352145, 0.9395798943236848, 0.8970545066474307, 0.9151505879419853, 0.8733329079353729, 0.9366235821812101, 0.9607330274072025, 0.9778944795242422, 0.16020414984604836, 0.18584717741546852, 0.1723744737244569, 0.1910430895392281, 0.16306082008008593, 0.13923696553142562, 0.15997718802389171, 0.19262683741208697, 0.17140289375977968, 0.20865127605776623, 0.1925440306491225, 0.19307205058351262, 0.21421431659855716, 0.22142053599960287, 0.19373793058238875, 0.18032090334487205, 0.19561024649386372, 0.23767723657350326, 0.13238018764967585, 0.1864837818364956, 0.19177645071955196, 0.20717408617080213, 0.1449226765325804, 0.1688238338650928, 0.1893953616539108, 0.16938126470212134, 0.18024493445506107, 0.2184762530008616, 0.23888448420608843, 0.2135144541791154, 0.20634906401512, 0.1897209428675497, 0.22819454039575715, 0.20367798810767612, 0.20085480982699044, 0.20591926682251138, 0.0009617412332961761, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015214699766643358, 9.999999999998899e-05, 0.01859890710415124, 9.999999999998899e-05, 9.999999999998899e-05, 0.21215472921431588, 0.20684150250263478, 0.17876529003209052, 0.1238465264445997, 0.16173796999213463, 0.13965106503637303, 0.19415086629252531, 0.18329842755052794, 0.1864154259188382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003615455146740443, 9.999999999998899e-05, 0.05286223477202023, 0.07367264042544142, 0.057994961973822146, 0.07138652387495537, 0.06957060149699501, 0.05548251280385952, 0.05518250988137985, 0.12277702033839866, 0.04445352277927728, 0.4062735088081829, 0.3505749826550407, 0.3735356393269449, 0.3654554036300178, 0.3687931147561653, 0.3250326723778829, 0.3634114970689306, 0.41114720734499044, 0.39227427465252496, 0.08772711300332026, 0.1051568235808279, 0.09631028348970139, 0.07671266409827493, 0.07809550444923896, 0.08239010408184388, 0.09083457553160423, 0.11919193302270781, 0.0959365842321076, 0.1661089242193703, 0.23564474316569217, 0.17875335778959467, 0.29163971930133026, 0.16809772984443005, 0.1921556342439571, 0.1961703323596674, 0.1695173690499865, 0.20733199667419488, 0.23972041733277916, 0.20938394457716125, 0.2098590372742115, 0.24146637603682264, 0.24323123555056925, 0.25033435990769115, 0.21845866364372402, 0.22665524536716186, 0.20048235149982674, 0.16541298593980247, 0.19563717977598993, 0.17912785968127987, 0.17166920855075618, 0.16962296692173862, 0.2030415179210131, 0.18722144601596924, 0.18139379554152812, 0.16432336001512782, 0.3004669237577491, 0.24398941980399869, 0.2682220326376543, 0.23822914444477594, 0.24924755879177285, 0.28214723572281697, 0.260900424840966, 0.2426290161398239, 0.2687888390460631, 0.2165435348629251, 0.17459957754936517, 0.18090185844525242, 0.17864520027246666, 0.20579454736473413, 0.20023721468909605, 0.17871683516207415, 0.17973882559320975, 0.18089940402073101, 0.1878757625730786, 0.44687436994494834, 0.18564834612725623, 0.40876368845935607, 0.19626153409459735, 0.1901584804647618, 0.46606320998145045, 0.16664690557822182, 0.15789815518730377, 0.49391479497752755, 0.20047847306454158, 0.42924272774220973, 0.20123394652953497, 0.39370397930990564, 0.19524088630077918, 0.2702966418642212, 0.154019985561326, 0.24479824976457765, 0.2194826096912994, 0.21403999812495522, 0.2047015961906491, 0.2171777525684171, 0.22322631192670528, 0.20326020822416369, 0.2266326327070255, 0.20234432290051785, 0.20549265954110407, 0.09081468088408695, 0.09396669752196396, 0.07849404298593021, 0.07695494940887748, 0.0785790191224669, 0.08217634090879311, 0.0936136553179453, 0.10087128988682292, 0.0790712746732859]}, "mutation_prompt": null}
{"id": "29cc851a-62fd-4fb3-ba6f-f79281149795", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  # Increased local search iterations further to enhance exploration\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  # Adaptive step adjustment with faster adaptation rate\n                else:\n                    step_size *= 0.85  # Adaptive step adjustment with faster adaptation rate\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()  # Faster dynamic mutation scaling\n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  # Mutation with adaptive control\n                swarm[i] = _local_search(swarm[i], func, mutation_scale)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicMutationEnhancedSocialSwarmOptimization", "description": "Enhancing exploration by introducing dynamic mutation scaling with adaptive control for local search step adjustment.", "configspace": "", "generation": 72, "fitness": 0.2529669839429189, "feedback": "The algorithm DynamicMutationEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "c8e2ddc4-2e12-4fa6-bee2-eb1f6d93ac05", "metadata": {"aucs": [0.6233931465533569, 0.6052754521077592, 0.5973953389209649, 0.5884637695174774, 0.6022494268327139, 0.6127442709958653, 0.6543925818429395, 0.5699911672610452, 0.5778070640988675, 0.07280640161897811, 9.999999999998899e-05, 0.0074618188726411905, 9.999999999998899e-05, 0.06476822324760256, 0.06336128433221488, 9.999999999998899e-05, 0.030776104164393803, 9.999999999998899e-05, 0.11679517058331312, 0.09556064034719325, 0.09334020717857383, 0.13679355067736487, 0.11078568934877242, 0.11536641560010086, 0.10618588355186476, 0.09001129144752007, 0.1609468480031121, 0.099058716084235, 0.08040271292166379, 0.09970575702221174, 0.11315683888872974, 0.11445172001618098, 0.0745238757639698, 0.08505647127588656, 0.0968698858419621, 0.11723163552640037, 0.8390956463854224, 0.8956369110735627, 0.9380858469874053, 0.9213780344123379, 0.797841310263923, 0.9513248588192944, 0.8901939801534936, 0.7756225290553244, 0.9802245285412418, 0.26966731509978714, 0.2713844452975289, 0.28448632547976227, 0.31605419523979494, 0.30692511655150834, 0.31180456388294775, 0.3033185287645913, 0.2603540528273154, 0.2965837638997577, 0.3848805920196372, 0.3321025199680533, 0.19386159894817934, 0.3724188980260358, 0.48207549624770507, 0.29570047412821643, 0.2924448286634006, 0.35453711308814706, 0.17926218830291984, 0.4074324126747636, 0.20936119589692392, 0.2783841184933451, 0.18348543427863295, 0.2906361565794464, 0.14902453975707375, 0.2438450514800965, 0.24171133813330947, 0.28857437385536555, 0.21866533021607715, 0.29436400498574433, 0.24560206896359638, 0.22300726926849845, 0.2780469819529522, 0.17816772920844814, 0.16744712189737243, 0.2767505144097743, 0.21677230770701594, 0.029929951003588973, 0.035980893593879015, 0.013454961107205232, 0.09523067924546336, 0.00014512181752401876, 9.999999999998899e-05, 0.023971001565580075, 0.07651406201387034, 0.03992683183550794, 0.1636240795921765, 0.14574522077389906, 0.2954141798898513, 0.11657824940706596, 0.17068676219710466, 0.09313188619700064, 0.19473846043070453, 0.14267457295518415, 0.19316674786031507, 0.11907525604709013, 0.126822360048221, 0.0861809523747874, 0.058337240185658445, 0.07544014671125276, 0.0841661265818815, 0.11098021717558182, 0.07120027087489345, 0.08985309862813395, 0.168727705126008, 0.07045853841118477, 0.16792947814992354, 0.20033688007727446, 0.20413574485010855, 0.20391861384871868, 0.1744704182507545, 0.08387511444794205, 0.12987887509645735, 0.4810407867634261, 0.4851269644255125, 0.5033351189976828, 0.48141519903258645, 0.5046881788750062, 0.46199006290041167, 0.49498471485470075, 0.46624469742980623, 0.4821730180070164, 0.11356081411243246, 0.1217397556887696, 0.09915023985701232, 0.0942814878305408, 0.09352282844588411, 0.09148796142322912, 0.10940494172165693, 0.10681026881238798, 0.13483603253825116, 0.18848536621957346, 0.27349702798747455, 0.2209785996842244, 0.26839654624253184, 0.17097956373507928, 0.2104280727626402, 0.2008309063147925, 0.23112050280536245, 0.29169430417017106, 0.22580531906690304, 0.29631601526870477, 0.21054683063713964, 0.2605230613971674, 0.26200629356856076, 0.23898948265997255, 0.19245306969715859, 0.23124782644449604, 0.20198629217481234, 0.14854929815998952, 0.17804947472930177, 0.20873744008180561, 0.23327706364315504, 0.19003733498431719, 0.20781318590318254, 0.17199134903415092, 0.20725168222349333, 0.1538552255521205, 0.2372721236315548, 0.24021080091832903, 0.21710854577425276, 0.2576701277525344, 0.24613283344892156, 0.20009725270368417, 0.2222893461030213, 0.22367318066248665, 0.28722474626794814, 0.3544778359349755, 0.18797211330305985, 0.19274973817327123, 0.22475363398918957, 0.2186446701994792, 0.20757484629033085, 0.1829975202183397, 0.20399673877179114, 0.20468190657277285, 0.19527708289270518, 0.18577989689430197, 0.6322323865916948, 0.8003487507150283, 0.18322151827509991, 0.7761951531392384, 0.18719842204824555, 0.7088975055552094, 0.5635271348070472, 0.7332104754781847, 0.20904858304561524, 0.49083292214598273, 0.19620859197431373, 0.1679782117237244, 0.2019764589300146, 0.26345739608569996, 0.2962607243102635, 0.20197603560343136, 0.2173278257606106, 0.21551541583902145, 0.19641739824528737, 0.2318306349287872, 0.21715875474041235, 0.2220964416315645, 0.2082357424084914, 0.21219337403696792, 0.21007172733761104, 0.0868681779367998, 0.11198156134193982, 0.08838217630320633, 0.08277239231707734, 0.10258141583563052, 0.11847173310560843, 0.10057619597297596, 0.07895260888517075, 0.11176586654358123]}, "mutation_prompt": null}
{"id": "072f28f8-1de4-4983-b4a1-8df3df509d32", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  # Increased local search iterations further to enhance exploration\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  # Adaptive step adjustment with faster adaptation rate\n                else:\n                    step_size *= 0.85  # Adaptive step adjustment with faster adaptation rate\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()  # Faster dynamic mutation scaling\n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  # Mutation with adaptive control\n                swarm[i] = _local_search(swarm[i], func, mutation_scale)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicMutationEnhancedSocialSwarmOptimization", "description": "Enhancing exploration by introducing dynamic mutation scaling with adaptive control for local search step adjustment.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29cc851a-62fd-4fb3-ba6f-f79281149795", "metadata": {"aucs": [0.6233931465533569, 0.6052754521077592, 0.5973953389209649, 0.5884637695174774, 0.6022494268327139, 0.6127442709958653, 0.6543925818429395, 0.5699911672610452, 0.5778070640988675, 0.07280640161897811, 9.999999999998899e-05, 0.0074618188726411905, 9.999999999998899e-05, 0.06476822324760256, 0.06336128433221488, 9.999999999998899e-05, 0.030776104164393803, 9.999999999998899e-05, 0.11679517058331312, 0.09556064034719325, 0.09334020717857383, 0.13679355067736487, 0.11078568934877242, 0.11536641560010086, 0.10618588355186476, 0.09001129144752007, 0.1609468480031121, 0.099058716084235, 0.08040271292166379, 0.09970575702221174, 0.11315683888872974, 0.11445172001618098, 0.0745238757639698, 0.08505647127588656, 0.0968698858419621, 0.11723163552640037, 0.8390956463854224, 0.8956369110735627, 0.9380858469874053, 0.9213780344123379, 0.797841310263923, 0.9513248588192944, 0.8901939801534936, 0.7756225290553244, 0.9802245285412418, 0.26966731509978714, 0.2713844452975289, 0.28448632547976227, 0.31605419523979494, 0.30692511655150834, 0.31180456388294775, 0.3033185287645913, 0.2603540528273154, 0.2965837638997577, 0.3848805920196372, 0.3321025199680533, 0.19386159894817934, 0.3724188980260358, 0.48207549624770507, 0.29570047412821643, 0.2924448286634006, 0.35453711308814706, 0.17926218830291984, 0.4074324126747636, 0.20936119589692392, 0.2783841184933451, 0.18348543427863295, 0.2906361565794464, 0.14902453975707375, 0.2438450514800965, 0.24171133813330947, 0.28857437385536555, 0.21866533021607715, 0.29436400498574433, 0.24560206896359638, 0.22300726926849845, 0.2780469819529522, 0.17816772920844814, 0.16744712189737243, 0.2767505144097743, 0.21677230770701594, 0.029929951003588973, 0.035980893593879015, 0.013454961107205232, 0.09523067924546336, 0.00014512181752401876, 9.999999999998899e-05, 0.023971001565580075, 0.07651406201387034, 0.03992683183550794, 0.1636240795921765, 0.14574522077389906, 0.2954141798898513, 0.11657824940706596, 0.17068676219710466, 0.09313188619700064, 0.19473846043070453, 0.14267457295518415, 0.19316674786031507, 0.11907525604709013, 0.126822360048221, 0.0861809523747874, 0.058337240185658445, 0.07544014671125276, 0.0841661265818815, 0.11098021717558182, 0.07120027087489345, 0.08985309862813395, 0.168727705126008, 0.07045853841118477, 0.16792947814992354, 0.20033688007727446, 0.20413574485010855, 0.20391861384871868, 0.1744704182507545, 0.08387511444794205, 0.12987887509645735, 0.4810407867634261, 0.4851269644255125, 0.5033351189976828, 0.48141519903258645, 0.5046881788750062, 0.46199006290041167, 0.49498471485470075, 0.46624469742980623, 0.4821730180070164, 0.11356081411243246, 0.1217397556887696, 0.09915023985701232, 0.0942814878305408, 0.09352282844588411, 0.09148796142322912, 0.10940494172165693, 0.10681026881238798, 0.13483603253825116, 0.18848536621957346, 0.27349702798747455, 0.2209785996842244, 0.26839654624253184, 0.17097956373507928, 0.2104280727626402, 0.2008309063147925, 0.23112050280536245, 0.29169430417017106, 0.22580531906690304, 0.29631601526870477, 0.21054683063713964, 0.2605230613971674, 0.26200629356856076, 0.23898948265997255, 0.19245306969715859, 0.23124782644449604, 0.20198629217481234, 0.14854929815998952, 0.17804947472930177, 0.20873744008180561, 0.23327706364315504, 0.19003733498431719, 0.20781318590318254, 0.17199134903415092, 0.20725168222349333, 0.1538552255521205, 0.2372721236315548, 0.24021080091832903, 0.21710854577425276, 0.2576701277525344, 0.24613283344892156, 0.20009725270368417, 0.2222893461030213, 0.22367318066248665, 0.28722474626794814, 0.3544778359349755, 0.18797211330305985, 0.19274973817327123, 0.22475363398918957, 0.2186446701994792, 0.20757484629033085, 0.1829975202183397, 0.20399673877179114, 0.20468190657277285, 0.19527708289270518, 0.18577989689430197, 0.6322323865916948, 0.8003487507150283, 0.18322151827509991, 0.7761951531392384, 0.18719842204824555, 0.7088975055552094, 0.5635271348070472, 0.7332104754781847, 0.20904858304561524, 0.49083292214598273, 0.19620859197431373, 0.1679782117237244, 0.2019764589300146, 0.26345739608569996, 0.2962607243102635, 0.20197603560343136, 0.2173278257606106, 0.21551541583902145, 0.19641739824528737, 0.2318306349287872, 0.21715875474041235, 0.2220964416315645, 0.2082357424084914, 0.21219337403696792, 0.21007172733761104, 0.0868681779367998, 0.11198156134193982, 0.08838217630320633, 0.08277239231707734, 0.10258141583563052, 0.11847173310560843, 0.10057619597297596, 0.07895260888517075, 0.11176586654358123]}, "mutation_prompt": null}
{"id": "9a460532-b41f-4db1-955f-f012450781a3", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  # Increased local search iterations further to enhance exploration\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  # Adaptive step adjustment with faster adaptation rate\n                else:\n                    step_size *= 0.85  # Adaptive step adjustment with faster adaptation rate\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()  # Faster dynamic mutation scaling\n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  # Mutation with adaptive control\n                swarm[i] = _local_search(swarm[i], func, mutation_scale)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicMutationEnhancedSocialSwarmOptimization", "description": "Enhancing exploration by introducing dynamic mutation scaling with adaptive control for local search step adjustment.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29cc851a-62fd-4fb3-ba6f-f79281149795", "metadata": {"aucs": [0.6233931465533569, 0.6052754521077592, 0.5973953389209649, 0.5884637695174774, 0.6022494268327139, 0.6127442709958653, 0.6543925818429395, 0.5699911672610452, 0.5778070640988675, 0.07280640161897811, 9.999999999998899e-05, 0.0074618188726411905, 9.999999999998899e-05, 0.06476822324760256, 0.06336128433221488, 9.999999999998899e-05, 0.030776104164393803, 9.999999999998899e-05, 0.11679517058331312, 0.09556064034719325, 0.09334020717857383, 0.13679355067736487, 0.11078568934877242, 0.11536641560010086, 0.10618588355186476, 0.09001129144752007, 0.1609468480031121, 0.099058716084235, 0.08040271292166379, 0.09970575702221174, 0.11315683888872974, 0.11445172001618098, 0.0745238757639698, 0.08505647127588656, 0.0968698858419621, 0.11723163552640037, 0.8390956463854224, 0.8956369110735627, 0.9380858469874053, 0.9213780344123379, 0.797841310263923, 0.9513248588192944, 0.8901939801534936, 0.7756225290553244, 0.9802245285412418, 0.26966731509978714, 0.2713844452975289, 0.28448632547976227, 0.31605419523979494, 0.30692511655150834, 0.31180456388294775, 0.3033185287645913, 0.2603540528273154, 0.2965837638997577, 0.3848805920196372, 0.3321025199680533, 0.19386159894817934, 0.3724188980260358, 0.48207549624770507, 0.29570047412821643, 0.2924448286634006, 0.35453711308814706, 0.17926218830291984, 0.4074324126747636, 0.20936119589692392, 0.2783841184933451, 0.18348543427863295, 0.2906361565794464, 0.14902453975707375, 0.2438450514800965, 0.24171133813330947, 0.28857437385536555, 0.21866533021607715, 0.29436400498574433, 0.24560206896359638, 0.22300726926849845, 0.2780469819529522, 0.17816772920844814, 0.16744712189737243, 0.2767505144097743, 0.21677230770701594, 0.029929951003588973, 0.035980893593879015, 0.013454961107205232, 0.09523067924546336, 0.00014512181752401876, 9.999999999998899e-05, 0.023971001565580075, 0.07651406201387034, 0.03992683183550794, 0.1636240795921765, 0.14574522077389906, 0.2954141798898513, 0.11657824940706596, 0.17068676219710466, 0.09313188619700064, 0.19473846043070453, 0.14267457295518415, 0.19316674786031507, 0.11907525604709013, 0.126822360048221, 0.0861809523747874, 0.058337240185658445, 0.07544014671125276, 0.0841661265818815, 0.11098021717558182, 0.07120027087489345, 0.08985309862813395, 0.168727705126008, 0.07045853841118477, 0.16792947814992354, 0.20033688007727446, 0.20413574485010855, 0.20391861384871868, 0.1744704182507545, 0.08387511444794205, 0.12987887509645735, 0.4810407867634261, 0.4851269644255125, 0.5033351189976828, 0.48141519903258645, 0.5046881788750062, 0.46199006290041167, 0.49498471485470075, 0.46624469742980623, 0.4821730180070164, 0.11356081411243246, 0.1217397556887696, 0.09915023985701232, 0.0942814878305408, 0.09352282844588411, 0.09148796142322912, 0.10940494172165693, 0.10681026881238798, 0.13483603253825116, 0.18848536621957346, 0.27349702798747455, 0.2209785996842244, 0.26839654624253184, 0.17097956373507928, 0.2104280727626402, 0.2008309063147925, 0.23112050280536245, 0.29169430417017106, 0.22580531906690304, 0.29631601526870477, 0.21054683063713964, 0.2605230613971674, 0.26200629356856076, 0.23898948265997255, 0.19245306969715859, 0.23124782644449604, 0.20198629217481234, 0.14854929815998952, 0.17804947472930177, 0.20873744008180561, 0.23327706364315504, 0.19003733498431719, 0.20781318590318254, 0.17199134903415092, 0.20725168222349333, 0.1538552255521205, 0.2372721236315548, 0.24021080091832903, 0.21710854577425276, 0.2576701277525344, 0.24613283344892156, 0.20009725270368417, 0.2222893461030213, 0.22367318066248665, 0.28722474626794814, 0.3544778359349755, 0.18797211330305985, 0.19274973817327123, 0.22475363398918957, 0.2186446701994792, 0.20757484629033085, 0.1829975202183397, 0.20399673877179114, 0.20468190657277285, 0.19527708289270518, 0.18577989689430197, 0.6322323865916948, 0.8003487507150283, 0.18322151827509991, 0.7761951531392384, 0.18719842204824555, 0.7088975055552094, 0.5635271348070472, 0.7332104754781847, 0.20904858304561524, 0.49083292214598273, 0.19620859197431373, 0.1679782117237244, 0.2019764589300146, 0.26345739608569996, 0.2962607243102635, 0.20197603560343136, 0.2173278257606106, 0.21551541583902145, 0.19641739824528737, 0.2318306349287872, 0.21715875474041235, 0.2220964416315645, 0.2082357424084914, 0.21219337403696792, 0.21007172733761104, 0.0868681779367998, 0.11198156134193982, 0.08838217630320633, 0.08277239231707734, 0.10258141583563052, 0.11847173310560843, 0.10057619597297596, 0.07895260888517075, 0.11176586654358123]}, "mutation_prompt": null}
{"id": "6b500948-3b8a-4944-986d-08c058deb485", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(80):  # Increased local search iterations further to enhance exploration and convergence speed\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.2  # Adaptive step adjustment with faster adaptation rate\n                else:\n                    step_size *= 0.8  # Adaptive step adjustment with faster adaptation rate\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()  # Faster dynamic mutation scaling\n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  # Mutation with adaptive control\n                swarm[i] = _local_search(swarm[i], func, mutation_scale)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicMutationEnhancedSocialSwarmOptimization", "description": "Increasing the local search iterations and utilizing a dynamic learning rate adaptation to enhance exploration and convergence speed.", "configspace": "", "generation": 75, "fitness": 0.22528093280828385, "feedback": "The algorithm DynamicMutationEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "29cc851a-62fd-4fb3-ba6f-f79281149795", "metadata": {"aucs": [0.7415822377153174, 0.6105823412206135, 0.6261865224026049, 0.6250748748988154, 0.6415163792481446, 0.5877536526327722, 0.5754194830352624, 0.5471625853834876, 0.6019989842328889, 0.0005969355946581212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00190385881138333, 0.015265390670008094, 0.024737315369187662, 9.999999999998899e-05, 9.999999999998899e-05, 0.0903980882789106, 0.11727752565942684, 0.08583917157266352, 0.11790980644719984, 0.10411847227616089, 0.09356944833618708, 0.1139498478321006, 0.11941099807681055, 0.11390262704280685, 0.07914561353148097, 0.06465201164193335, 0.050982139550109995, 0.08117154603158527, 0.1127666768958272, 0.09373753658683004, 0.045969522389407436, 0.09758460386285261, 0.07303107881725046, 0.9591301481787824, 0.8638609339728771, 0.7734953886476926, 0.9040829244243963, 0.9859444750502342, 0.9201121425802906, 0.8531920425653987, 0.8759823691515776, 0.9863687922216855, 0.3096670171035093, 0.14461306695625276, 0.2122967681585597, 0.21500089978466308, 0.1709728787492406, 0.17381388692124478, 0.26968612005317216, 0.18491619464007913, 0.2596974625348849, 0.15556404448635242, 0.18862164328733466, 0.16174306173346753, 0.29681413018726277, 0.13990638220782026, 0.205699647576437, 0.16668377813895463, 0.16073484478036626, 0.26403952124024155, 0.41969541291694146, 0.07477592188566773, 0.18435899725461513, 0.2517201392956492, 0.14054711997937153, 0.18982668488190202, 0.23697845342947077, 0.13734030979505785, 0.30227596581694083, 0.22901528421719275, 0.21259031975828624, 0.2739375506967312, 0.27359298093573714, 0.2168497910858448, 0.18727861445303529, 0.1774038401418946, 0.2487569159129971, 0.30458961024703113, 9.999999999998899e-05, 0.02633356090076, 9.999999999998899e-05, 0.00012089115081947988, 0.018871818992831635, 0.009911869936780393, 9.999999999998899e-05, 0.03236273803797429, 0.006638795024076161, 0.17581628510454617, 0.1147198351687233, 0.26176460763543397, 0.10171239963952683, 0.10926813571583349, 0.146367765889849, 0.20603185072644403, 0.13083091423343862, 0.1681436889711515, 0.14545294795450592, 0.1390921486033092, 0.0982517646728931, 0.08151469123447319, 0.09387513468246433, 0.11978870554396581, 0.14053309431240635, 0.13166735057547707, 0.122093898254644, 0.11321425422523079, 0.11191855628275793, 0.07985480116648269, 0.16032395552316014, 0.18033092295319164, 0.12966346011935714, 0.1598495093746808, 0.10215785637798713, 0.07336457173554534, 0.4040594487695871, 0.4271260148712571, 0.40903991594773315, 0.38419669696585557, 0.3774848232570186, 0.360422084132629, 0.41069396671676006, 0.39537333454931667, 0.4318052701872356, 0.05344505132457411, 0.09901307170105356, 0.07335076836508647, 0.09929914879299084, 0.09823549494444017, 0.07477439888299486, 0.12378971194168042, 0.10874144953979625, 0.08484007959938478, 0.1575906114559431, 0.18597273611273335, 0.2460142972788104, 0.1498321547353667, 0.15455710047448123, 0.21108185525668255, 0.20374516569838785, 0.16733505917821034, 0.17493001434937028, 0.15802671905885857, 0.18267580483893053, 0.17386408528068953, 0.20170111121661305, 0.2226389570472329, 0.21528107387942852, 0.15160036837175994, 0.1971133138561464, 0.20160999491334453, 0.12859528905357764, 0.11655222458865178, 0.15122375265068855, 0.1761289303191843, 0.1640497630323582, 0.14940635681551484, 0.15318111866973905, 0.14162529766958798, 0.15437234602082628, 0.2431883957562032, 0.2230806021242634, 0.292452885960919, 0.23520772591112682, 0.23182236738700956, 0.2236010913657145, 0.25049328591120024, 0.21679331009686276, 0.2006325325745767, 0.21801064390913183, 0.30916394826706317, 0.21168024224291926, 0.2298911759832345, 0.19082781074116006, 0.20401274622056276, 0.19183018356163206, 0.1880347162937508, 0.16872734359478525, 0.2545974176906556, 0.18153962971023319, 0.1783722949155857, 0.788425923340577, 0.2001590902570337, 0.6664855835282608, 0.6179481461761771, 0.16105175632862134, 0.39991743635752874, 0.4126878534221028, 0.33609916670196327, 0.35872626210540437, 0.1874968927803612, 0.19638744064763403, 0.18855580511743064, 0.23049930133911134, 0.27029329298465266, 0.26769904589610605, 0.21974002636832823, 0.22057631022787305, 0.20396055532721935, 0.21868341110621559, 0.22297315188925948, 0.21245242277080112, 0.21557000465834586, 0.2283163576085696, 0.2670628698002262, 0.08227610815587905, 0.08991938352876261, 0.10383266162104643, 0.07883789138040209, 0.09620242094574227, 0.09583273737317399, 0.07154158704614166, 0.08475475381427999, 0.10334471865042527]}, "mutation_prompt": null}
{"id": "ca666048-e58f-4a9e-acdb-f79bfa14ddbe", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  # Increased local search iterations further to enhance exploration\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  # Adaptive step adjustment with faster adaptation rate\n                else:\n                    step_size *= 0.85  # Adaptive step adjustment with faster adaptation rate\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()  # Faster dynamic mutation scaling\n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  # Mutation with adaptive control\n                swarm[i] = _local_search(swarm[i], func, mutation_scale)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicMutationEnhancedSocialSwarmOptimization", "description": "Enhancing exploration by introducing dynamic mutation scaling with adaptive control for local search step adjustment.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29cc851a-62fd-4fb3-ba6f-f79281149795", "metadata": {"aucs": [0.6233931465533569, 0.6052754521077592, 0.5973953389209649, 0.5884637695174774, 0.6022494268327139, 0.6127442709958653, 0.6543925818429395, 0.5699911672610452, 0.5778070640988675, 0.07280640161897811, 9.999999999998899e-05, 0.0074618188726411905, 9.999999999998899e-05, 0.06476822324760256, 0.06336128433221488, 9.999999999998899e-05, 0.030776104164393803, 9.999999999998899e-05, 0.11679517058331312, 0.09556064034719325, 0.09334020717857383, 0.13679355067736487, 0.11078568934877242, 0.11536641560010086, 0.10618588355186476, 0.09001129144752007, 0.1609468480031121, 0.099058716084235, 0.08040271292166379, 0.09970575702221174, 0.11315683888872974, 0.11445172001618098, 0.0745238757639698, 0.08505647127588656, 0.0968698858419621, 0.11723163552640037, 0.8390956463854224, 0.8956369110735627, 0.9380858469874053, 0.9213780344123379, 0.797841310263923, 0.9513248588192944, 0.8901939801534936, 0.7756225290553244, 0.9802245285412418, 0.26966731509978714, 0.2713844452975289, 0.28448632547976227, 0.31605419523979494, 0.30692511655150834, 0.31180456388294775, 0.3033185287645913, 0.2603540528273154, 0.2965837638997577, 0.3848805920196372, 0.3321025199680533, 0.19386159894817934, 0.3724188980260358, 0.48207549624770507, 0.29570047412821643, 0.2924448286634006, 0.35453711308814706, 0.17926218830291984, 0.4074324126747636, 0.20936119589692392, 0.2783841184933451, 0.18348543427863295, 0.2906361565794464, 0.14902453975707375, 0.2438450514800965, 0.24171133813330947, 0.28857437385536555, 0.21866533021607715, 0.29436400498574433, 0.24560206896359638, 0.22300726926849845, 0.2780469819529522, 0.17816772920844814, 0.16744712189737243, 0.2767505144097743, 0.21677230770701594, 0.029929951003588973, 0.035980893593879015, 0.013454961107205232, 0.09523067924546336, 0.00014512181752401876, 9.999999999998899e-05, 0.023971001565580075, 0.07651406201387034, 0.03992683183550794, 0.1636240795921765, 0.14574522077389906, 0.2954141798898513, 0.11657824940706596, 0.17068676219710466, 0.09313188619700064, 0.19473846043070453, 0.14267457295518415, 0.19316674786031507, 0.11907525604709013, 0.126822360048221, 0.0861809523747874, 0.058337240185658445, 0.07544014671125276, 0.0841661265818815, 0.11098021717558182, 0.07120027087489345, 0.08985309862813395, 0.168727705126008, 0.07045853841118477, 0.16792947814992354, 0.20033688007727446, 0.20413574485010855, 0.20391861384871868, 0.1744704182507545, 0.08387511444794205, 0.12987887509645735, 0.4810407867634261, 0.4851269644255125, 0.5033351189976828, 0.48141519903258645, 0.5046881788750062, 0.46199006290041167, 0.49498471485470075, 0.46624469742980623, 0.4821730180070164, 0.11356081411243246, 0.1217397556887696, 0.09915023985701232, 0.0942814878305408, 0.09352282844588411, 0.09148796142322912, 0.10940494172165693, 0.10681026881238798, 0.13483603253825116, 0.18848536621957346, 0.27349702798747455, 0.2209785996842244, 0.26839654624253184, 0.17097956373507928, 0.2104280727626402, 0.2008309063147925, 0.23112050280536245, 0.29169430417017106, 0.22580531906690304, 0.29631601526870477, 0.21054683063713964, 0.2605230613971674, 0.26200629356856076, 0.23898948265997255, 0.19245306969715859, 0.23124782644449604, 0.20198629217481234, 0.14854929815998952, 0.17804947472930177, 0.20873744008180561, 0.23327706364315504, 0.19003733498431719, 0.20781318590318254, 0.17199134903415092, 0.20725168222349333, 0.1538552255521205, 0.2372721236315548, 0.24021080091832903, 0.21710854577425276, 0.2576701277525344, 0.24613283344892156, 0.20009725270368417, 0.2222893461030213, 0.22367318066248665, 0.28722474626794814, 0.3544778359349755, 0.18797211330305985, 0.19274973817327123, 0.22475363398918957, 0.2186446701994792, 0.20757484629033085, 0.1829975202183397, 0.20399673877179114, 0.20468190657277285, 0.19527708289270518, 0.18577989689430197, 0.6322323865916948, 0.8003487507150283, 0.18322151827509991, 0.7761951531392384, 0.18719842204824555, 0.7088975055552094, 0.5635271348070472, 0.7332104754781847, 0.20904858304561524, 0.49083292214598273, 0.19620859197431373, 0.1679782117237244, 0.2019764589300146, 0.26345739608569996, 0.2962607243102635, 0.20197603560343136, 0.2173278257606106, 0.21551541583902145, 0.19641739824528737, 0.2318306349287872, 0.21715875474041235, 0.2220964416315645, 0.2082357424084914, 0.21219337403696792, 0.21007172733761104, 0.0868681779367998, 0.11198156134193982, 0.08838217630320633, 0.08277239231707734, 0.10258141583563052, 0.11847173310560843, 0.10057619597297596, 0.07895260888517075, 0.11176586654358123]}, "mutation_prompt": null}
{"id": "cc9eee1e-097e-42f6-92cd-8dec040c3b08", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(60):  # Increased local search iterations further to accelerate convergence\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.2  # Adaptive step adjustment with faster adaptation rate for quicker exploration\n                else:\n                    step_size *= 0.8  # Adaptive step adjustment with faster adaptation rate for quicker exploration\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.15 + 0.85 * np.random.uniform()  # Faster dynamic mutation scaling for enhanced exploration\n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  # Mutation with adaptive control\n                swarm[i] = _local_search(swarm[i], func, mutation_scale)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AcceleratedDynamicMutationEnhancedSocialSwarmOptimization", "description": "Accelerating convergence by dynamically adjusting local search step size based on function landscape curvature during mutation, leading to faster exploration-exploitation balance.", "configspace": "", "generation": 77, "fitness": 0.23002959792933197, "feedback": "The algorithm AcceleratedDynamicMutationEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "29cc851a-62fd-4fb3-ba6f-f79281149795", "metadata": {"aucs": [0.6336823667521506, 0.5973186899869452, 0.6819697584643732, 0.5313622441684334, 0.5450599426400691, 0.5775094207399458, 0.6026846057559908, 0.6122781579843293, 0.6179303347484357, 9.999999999998899e-05, 0.050644298639842655, 9.999999999998899e-05, 9.999999999998899e-05, 0.10155564065857126, 0.006958445955495329, 9.999999999998899e-05, 0.06094517435981228, 9.999999999998899e-05, 0.09196649170829385, 0.13454390273932404, 0.0871897135418439, 0.14182111871139547, 0.10423725378753057, 0.10293400785473861, 0.10533833051016661, 0.08599710075782319, 0.11477631624840345, 0.0946016886888188, 0.07533172454045212, 0.05577851473396278, 0.1192450585866276, 0.095663095969302, 0.07590038691356826, 0.08467110410449152, 0.07665857734315573, 0.08010373633253876, 0.9382937227638893, 0.8339918503571511, 0.7388062610572244, 0.9797033933790418, 0.9859945474103416, 0.8660102088046326, 0.9819976198859525, 0.8286097056193216, 0.9863722878713452, 0.2521352056138235, 0.21092285817947398, 0.18449346524585175, 0.2301920307240597, 0.2246349923616553, 0.26387483909482445, 0.2333673766248735, 0.2365616495668077, 0.23451865133660887, 0.14686706008427342, 0.17761839312923022, 0.19142708141442177, 0.24392914849509484, 0.23195745544513646, 0.19405135504893423, 0.1964635532168898, 0.22617185250101723, 0.14904601698561837, 0.2560550814942304, 0.1360653878813015, 0.252601626107655, 0.18160939469076798, 0.36619734765183176, 0.2280522854616347, 0.2595683231688447, 0.1274763245066255, 0.33610652063669977, 0.3735834115129547, 0.238601617034079, 0.27673517512653556, 0.18001841516867212, 0.24110563795149564, 0.19597857053983025, 0.20035872307420954, 0.22315257148995582, 0.28394921698086717, 0.002471044103723452, 0.0025235105204759467, 9.999999999998899e-05, 0.001289222168619153, 0.0330363421595643, 0.0006604456002573533, 0.013904995101521322, 0.00505168123570654, 0.0035619293202253655, 0.14459866483773498, 0.14886004485111903, 0.19832610957301544, 0.12890924807922788, 0.18167016089903731, 0.1341254199646872, 0.1918069851886165, 0.17893145320380333, 0.1859113234604638, 0.09879025095132621, 0.14157541299097398, 0.16985111060229652, 0.07520789120285643, 0.1003686777368763, 0.08034502384750664, 0.08083510118343551, 0.15860197012673305, 0.10128413131655523, 0.1351138812328616, 0.08397974294713806, 0.19223568731302132, 0.17946336840105015, 0.19616417349019244, 0.11984967049880813, 0.10885263784155685, 0.12473063674615936, 0.11987253088767735, 0.408030082924964, 0.41040770211844335, 0.4379883653258386, 0.38625982540389037, 0.4885948327566324, 0.4152145565351699, 0.4267332856785674, 0.4344373446740436, 0.48513983677285455, 0.06638990069739015, 0.07450454346853641, 0.06916765693223237, 0.11037511945546086, 0.08190681407805056, 0.14179865817223747, 0.09940758211334455, 0.08050139338779194, 0.08767223579430028, 0.1764240344583281, 0.19289170766654262, 0.1953703331764992, 0.19414129761025656, 0.2337160046148592, 0.19850528961223435, 0.1826175263574853, 0.18937496075019666, 0.14924562219050985, 0.21658481851735356, 0.18148384746237167, 0.2064218441591973, 0.19830985690187009, 0.23059877248015248, 0.22356851790983512, 0.21033849495208545, 0.23012780862237303, 0.2019236610177948, 0.13257603264832285, 0.16780566685202847, 0.1474153898587245, 0.21158011044539515, 0.1731270712762415, 0.18379245240075648, 0.190954168245561, 0.15497956308423688, 0.13889365545080978, 0.26125491866311135, 0.24734023825083729, 0.24006409116098926, 0.234175227282294, 0.23296405902389272, 0.28212263263933457, 0.23794567960044422, 0.24799627172840244, 0.2476993857261568, 0.1878079494017557, 0.19646271674214, 0.1989777386184376, 0.19758095753555815, 0.19446239652412145, 0.19269622896988126, 0.1932198301569772, 0.20079207082451023, 0.1874476601591144, 0.1438924468362296, 0.18167557032866177, 0.4215663269598924, 0.6620635426070767, 0.29061690789112216, 0.19886233645538076, 0.18531492172966846, 0.3309198470110516, 0.6444638206985842, 0.4906388181984378, 0.20578422825977427, 0.4840967984484893, 0.2040531406346897, 0.3156484779514299, 0.20808662302620284, 0.1556064458636911, 0.16602752379310426, 0.25485538370917804, 0.22993376620586836, 0.21980528885806017, 0.2185495115128162, 0.2129084652722567, 0.24724413465697936, 0.19901328339675495, 0.2097044782328219, 0.23926952057333517, 0.24429993416696394, 0.08618855498213585, 0.11161863892051549, 0.07979863735014825, 0.09173305071560567, 0.0740098586152802, 0.12299631654784693, 0.0828956110855823, 0.08923866518384871, 0.0894580818291526]}, "mutation_prompt": null}
{"id": "92919957-f43c-4c5c-a554-b27808e927f1", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  # Increased local search iterations further to enhance exploration\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  # Adaptive step adjustment with faster adaptation rate\n                else:\n                    step_size *= 0.85  # Adaptive step adjustment with faster adaptation rate\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()  # Faster dynamic mutation scaling\n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  # Mutation with adaptive control\n                swarm[i] = _local_search(swarm[i], func, mutation_scale)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicMutationEnhancedSocialSwarmOptimization", "description": "Enhancing exploration by introducing dynamic mutation scaling with adaptive control for local search step adjustment.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29cc851a-62fd-4fb3-ba6f-f79281149795", "metadata": {"aucs": [0.6233931465533569, 0.6052754521077592, 0.5973953389209649, 0.5884637695174774, 0.6022494268327139, 0.6127442709958653, 0.6543925818429395, 0.5699911672610452, 0.5778070640988675, 0.07280640161897811, 9.999999999998899e-05, 0.0074618188726411905, 9.999999999998899e-05, 0.06476822324760256, 0.06336128433221488, 9.999999999998899e-05, 0.030776104164393803, 9.999999999998899e-05, 0.11679517058331312, 0.09556064034719325, 0.09334020717857383, 0.13679355067736487, 0.11078568934877242, 0.11536641560010086, 0.10618588355186476, 0.09001129144752007, 0.1609468480031121, 0.099058716084235, 0.08040271292166379, 0.09970575702221174, 0.11315683888872974, 0.11445172001618098, 0.0745238757639698, 0.08505647127588656, 0.0968698858419621, 0.11723163552640037, 0.8390956463854224, 0.8956369110735627, 0.9380858469874053, 0.9213780344123379, 0.797841310263923, 0.9513248588192944, 0.8901939801534936, 0.7756225290553244, 0.9802245285412418, 0.26966731509978714, 0.2713844452975289, 0.28448632547976227, 0.31605419523979494, 0.30692511655150834, 0.31180456388294775, 0.3033185287645913, 0.2603540528273154, 0.2965837638997577, 0.3848805920196372, 0.3321025199680533, 0.19386159894817934, 0.3724188980260358, 0.48207549624770507, 0.29570047412821643, 0.2924448286634006, 0.35453711308814706, 0.17926218830291984, 0.4074324126747636, 0.20936119589692392, 0.2783841184933451, 0.18348543427863295, 0.2906361565794464, 0.14902453975707375, 0.2438450514800965, 0.24171133813330947, 0.28857437385536555, 0.21866533021607715, 0.29436400498574433, 0.24560206896359638, 0.22300726926849845, 0.2780469819529522, 0.17816772920844814, 0.16744712189737243, 0.2767505144097743, 0.21677230770701594, 0.029929951003588973, 0.035980893593879015, 0.013454961107205232, 0.09523067924546336, 0.00014512181752401876, 9.999999999998899e-05, 0.023971001565580075, 0.07651406201387034, 0.03992683183550794, 0.1636240795921765, 0.14574522077389906, 0.2954141798898513, 0.11657824940706596, 0.17068676219710466, 0.09313188619700064, 0.19473846043070453, 0.14267457295518415, 0.19316674786031507, 0.11907525604709013, 0.126822360048221, 0.0861809523747874, 0.058337240185658445, 0.07544014671125276, 0.0841661265818815, 0.11098021717558182, 0.07120027087489345, 0.08985309862813395, 0.168727705126008, 0.07045853841118477, 0.16792947814992354, 0.20033688007727446, 0.20413574485010855, 0.20391861384871868, 0.1744704182507545, 0.08387511444794205, 0.12987887509645735, 0.4810407867634261, 0.4851269644255125, 0.5033351189976828, 0.48141519903258645, 0.5046881788750062, 0.46199006290041167, 0.49498471485470075, 0.46624469742980623, 0.4821730180070164, 0.11356081411243246, 0.1217397556887696, 0.09915023985701232, 0.0942814878305408, 0.09352282844588411, 0.09148796142322912, 0.10940494172165693, 0.10681026881238798, 0.13483603253825116, 0.18848536621957346, 0.27349702798747455, 0.2209785996842244, 0.26839654624253184, 0.17097956373507928, 0.2104280727626402, 0.2008309063147925, 0.23112050280536245, 0.29169430417017106, 0.22580531906690304, 0.29631601526870477, 0.21054683063713964, 0.2605230613971674, 0.26200629356856076, 0.23898948265997255, 0.19245306969715859, 0.23124782644449604, 0.20198629217481234, 0.14854929815998952, 0.17804947472930177, 0.20873744008180561, 0.23327706364315504, 0.19003733498431719, 0.20781318590318254, 0.17199134903415092, 0.20725168222349333, 0.1538552255521205, 0.2372721236315548, 0.24021080091832903, 0.21710854577425276, 0.2576701277525344, 0.24613283344892156, 0.20009725270368417, 0.2222893461030213, 0.22367318066248665, 0.28722474626794814, 0.3544778359349755, 0.18797211330305985, 0.19274973817327123, 0.22475363398918957, 0.2186446701994792, 0.20757484629033085, 0.1829975202183397, 0.20399673877179114, 0.20468190657277285, 0.19527708289270518, 0.18577989689430197, 0.6322323865916948, 0.8003487507150283, 0.18322151827509991, 0.7761951531392384, 0.18719842204824555, 0.7088975055552094, 0.5635271348070472, 0.7332104754781847, 0.20904858304561524, 0.49083292214598273, 0.19620859197431373, 0.1679782117237244, 0.2019764589300146, 0.26345739608569996, 0.2962607243102635, 0.20197603560343136, 0.2173278257606106, 0.21551541583902145, 0.19641739824528737, 0.2318306349287872, 0.21715875474041235, 0.2220964416315645, 0.2082357424084914, 0.21219337403696792, 0.21007172733761104, 0.0868681779367998, 0.11198156134193982, 0.08838217630320633, 0.08277239231707734, 0.10258141583563052, 0.11847173310560843, 0.10057619597297596, 0.07895260888517075, 0.11176586654358123]}, "mutation_prompt": null}
{"id": "12a4241f-5baa-4fea-abf4-8fb188b255a3", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  # Increased local search iterations further to enhance exploration\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  # Adaptive step adjustment with faster adaptation rate\n                else:\n                    step_size *= 0.85  # Adaptive step adjustment with faster adaptation rate\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()  # Faster dynamic mutation scaling\n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  # Mutation with adaptive control\n                swarm[i] = _local_search(swarm[i], func, mutation_scale)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicMutationEnhancedSocialSwarmOptimization", "description": "Enhancing exploration by introducing dynamic mutation scaling with adaptive control for local search step adjustment.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29cc851a-62fd-4fb3-ba6f-f79281149795", "metadata": {"aucs": [0.6233931465533569, 0.6052754521077592, 0.5973953389209649, 0.5884637695174774, 0.6022494268327139, 0.6127442709958653, 0.6543925818429395, 0.5699911672610452, 0.5778070640988675, 0.07280640161897811, 9.999999999998899e-05, 0.0074618188726411905, 9.999999999998899e-05, 0.06476822324760256, 0.06336128433221488, 9.999999999998899e-05, 0.030776104164393803, 9.999999999998899e-05, 0.11679517058331312, 0.09556064034719325, 0.09334020717857383, 0.13679355067736487, 0.11078568934877242, 0.11536641560010086, 0.10618588355186476, 0.09001129144752007, 0.1609468480031121, 0.099058716084235, 0.08040271292166379, 0.09970575702221174, 0.11315683888872974, 0.11445172001618098, 0.0745238757639698, 0.08505647127588656, 0.0968698858419621, 0.11723163552640037, 0.8390956463854224, 0.8956369110735627, 0.9380858469874053, 0.9213780344123379, 0.797841310263923, 0.9513248588192944, 0.8901939801534936, 0.7756225290553244, 0.9802245285412418, 0.26966731509978714, 0.2713844452975289, 0.28448632547976227, 0.31605419523979494, 0.30692511655150834, 0.31180456388294775, 0.3033185287645913, 0.2603540528273154, 0.2965837638997577, 0.3848805920196372, 0.3321025199680533, 0.19386159894817934, 0.3724188980260358, 0.48207549624770507, 0.29570047412821643, 0.2924448286634006, 0.35453711308814706, 0.17926218830291984, 0.4074324126747636, 0.20936119589692392, 0.2783841184933451, 0.18348543427863295, 0.2906361565794464, 0.14902453975707375, 0.2438450514800965, 0.24171133813330947, 0.28857437385536555, 0.21866533021607715, 0.29436400498574433, 0.24560206896359638, 0.22300726926849845, 0.2780469819529522, 0.17816772920844814, 0.16744712189737243, 0.2767505144097743, 0.21677230770701594, 0.029929951003588973, 0.035980893593879015, 0.013454961107205232, 0.09523067924546336, 0.00014512181752401876, 9.999999999998899e-05, 0.023971001565580075, 0.07651406201387034, 0.03992683183550794, 0.1636240795921765, 0.14574522077389906, 0.2954141798898513, 0.11657824940706596, 0.17068676219710466, 0.09313188619700064, 0.19473846043070453, 0.14267457295518415, 0.19316674786031507, 0.11907525604709013, 0.126822360048221, 0.0861809523747874, 0.058337240185658445, 0.07544014671125276, 0.0841661265818815, 0.11098021717558182, 0.07120027087489345, 0.08985309862813395, 0.168727705126008, 0.07045853841118477, 0.16792947814992354, 0.20033688007727446, 0.20413574485010855, 0.20391861384871868, 0.1744704182507545, 0.08387511444794205, 0.12987887509645735, 0.4810407867634261, 0.4851269644255125, 0.5033351189976828, 0.48141519903258645, 0.5046881788750062, 0.46199006290041167, 0.49498471485470075, 0.46624469742980623, 0.4821730180070164, 0.11356081411243246, 0.1217397556887696, 0.09915023985701232, 0.0942814878305408, 0.09352282844588411, 0.09148796142322912, 0.10940494172165693, 0.10681026881238798, 0.13483603253825116, 0.18848536621957346, 0.27349702798747455, 0.2209785996842244, 0.26839654624253184, 0.17097956373507928, 0.2104280727626402, 0.2008309063147925, 0.23112050280536245, 0.29169430417017106, 0.22580531906690304, 0.29631601526870477, 0.21054683063713964, 0.2605230613971674, 0.26200629356856076, 0.23898948265997255, 0.19245306969715859, 0.23124782644449604, 0.20198629217481234, 0.14854929815998952, 0.17804947472930177, 0.20873744008180561, 0.23327706364315504, 0.19003733498431719, 0.20781318590318254, 0.17199134903415092, 0.20725168222349333, 0.1538552255521205, 0.2372721236315548, 0.24021080091832903, 0.21710854577425276, 0.2576701277525344, 0.24613283344892156, 0.20009725270368417, 0.2222893461030213, 0.22367318066248665, 0.28722474626794814, 0.3544778359349755, 0.18797211330305985, 0.19274973817327123, 0.22475363398918957, 0.2186446701994792, 0.20757484629033085, 0.1829975202183397, 0.20399673877179114, 0.20468190657277285, 0.19527708289270518, 0.18577989689430197, 0.6322323865916948, 0.8003487507150283, 0.18322151827509991, 0.7761951531392384, 0.18719842204824555, 0.7088975055552094, 0.5635271348070472, 0.7332104754781847, 0.20904858304561524, 0.49083292214598273, 0.19620859197431373, 0.1679782117237244, 0.2019764589300146, 0.26345739608569996, 0.2962607243102635, 0.20197603560343136, 0.2173278257606106, 0.21551541583902145, 0.19641739824528737, 0.2318306349287872, 0.21715875474041235, 0.2220964416315645, 0.2082357424084914, 0.21219337403696792, 0.21007172733761104, 0.0868681779367998, 0.11198156134193982, 0.08838217630320633, 0.08277239231707734, 0.10258141583563052, 0.11847173310560843, 0.10057619597297596, 0.07895260888517075, 0.11176586654358123]}, "mutation_prompt": null}
{"id": "3c96e40c-5942-471a-9f7a-786d364156cc", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n                step_size *= 0.99  # Introducing dynamic exponential decay for step adjustment\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()  \n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, mutation_scale)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AcceleratedDynamicMutationEnhancedSocialSwarmOptimization", "description": "Accelerating convergence by introducing a dynamic exponential decay for local search step size adjustment.", "configspace": "", "generation": 80, "fitness": 0.24355023157109865, "feedback": "The algorithm AcceleratedDynamicMutationEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "29cc851a-62fd-4fb3-ba6f-f79281149795", "metadata": {"aucs": [0.634695455276443, 0.6502968419673876, 0.6205545764748484, 0.5867000403285996, 0.5936072970958046, 0.6087509197718526, 0.612630624766233, 0.5401820713056499, 0.5802117325586483, 0.09606070027399105, 9.999999999998899e-05, 9.999999999998899e-05, 0.006686881739049966, 0.013600248099299828, 0.0443686847812127, 9.999999999998899e-05, 0.048243073456016305, 9.999999999998899e-05, 0.1041148669035441, 0.11268734924577306, 0.09215481233111056, 0.1275086607771274, 0.09842767908600147, 0.216995340011787, 0.08152722650105293, 0.11172662481134099, 0.11188087068395725, 0.07787232894950125, 0.09507111384120859, 0.0847459581098734, 0.1174377230431668, 0.09682699941343342, 0.07022374627437644, 0.1061279946467435, 0.134306893686852, 0.12344367536508338, 0.8315536537257293, 0.8685997726762991, 0.8208330010038019, 0.9233638358314307, 0.7891086115826154, 0.951209729208258, 0.9072109758776448, 0.7646414556483441, 0.9761182863888159, 0.2963299286887885, 0.26061656483605455, 0.3146406610365843, 0.336937542405609, 0.3156760229488511, 0.28931902099725915, 0.2805087408345065, 0.2671370142480908, 0.34289451610472954, 0.2754737581335118, 0.3495392537942005, 0.22188591401038027, 0.21609092798190055, 0.23721456371979377, 0.2184419465147881, 0.1887076981838468, 0.39977403434300507, 0.37065856092317395, 0.27304573157949175, 0.21582628602881193, 0.25967990376411365, 0.16210089124745297, 0.23510335361448242, 0.18109762611807745, 0.2251088031485846, 0.23289590530946813, 0.19186738462655795, 0.24683661267721324, 0.3731389096464589, 0.16888731220413333, 0.17208924172437579, 0.2897268958806425, 0.20057321645309267, 0.17875687271941276, 0.262290731358072, 0.26864984877757037, 9.999999999998899e-05, 0.062209827033570364, 0.008696671130959288, 0.02766417307043445, 0.00281063438069884, 0.033389399348023985, 0.06480160320527462, 0.015899945253356584, 0.09878388187444398, 0.2821330256992808, 0.1397128518760664, 0.20024353728816868, 0.1368741546864377, 0.20367965746057293, 0.09354123442885198, 0.2844152007315107, 0.16775045655968002, 0.2117619137659471, 0.11989595064417569, 0.08611593756168734, 0.0893812074485062, 0.06207055901300029, 0.10507512581152001, 0.07471683997006873, 0.09819295019144136, 0.05495599089834047, 0.06184944522591673, 0.14728844932732443, 0.11230354703132439, 0.19421974097582473, 0.1721259492409668, 0.17875946626538464, 0.18163160897704045, 0.15333171213157626, 0.08694704350671123, 0.17348163524257343, 0.5100950598152613, 0.4588150213304022, 0.4653214602771544, 0.44315228207969515, 0.46297932680910414, 0.4475923398019891, 0.45973045461065787, 0.4723580380881872, 0.500487612537814, 0.09130567908322718, 0.0915362130934122, 0.07967383902931013, 0.13847818838305703, 0.1209659672574348, 0.10136345917771994, 0.12946674664267832, 0.1102383002506826, 0.10100882675142897, 0.24802145860686697, 0.19504375124862838, 0.22839590591336512, 0.16413241326971617, 0.2690085767267769, 0.2388549992356489, 0.1977342825447731, 0.2315767657910871, 0.18528563765070694, 0.23793716733889603, 0.2655431346624155, 0.2289592437741511, 0.2547225472504425, 0.26059370585619357, 0.25138263249711645, 0.1798052158935043, 0.2571781665681043, 0.21981803545012157, 0.19823244538727836, 0.22744884412961008, 0.17243665606513714, 0.2371130225091599, 0.21156982357185283, 0.16967584948431014, 0.17887351858395795, 0.17004646838381487, 0.1801657678594365, 0.24819163764741803, 0.2568799598353738, 0.220813795248044, 0.2758724674622499, 0.2507378645121132, 0.25248225341964114, 0.24009914450212022, 0.236264728005115, 0.2274634492452866, 0.19936896892354028, 0.21734435636523153, 0.18871810242434894, 0.19257896987924716, 0.20478563647329517, 0.2026843378093912, 0.18779677352214452, 0.20114369146349254, 0.1787451183199803, 0.19412228393493858, 0.18407480032329937, 0.17859707937025449, 0.8285887950471005, 0.44179851046244334, 0.6843829785252753, 0.17741464567869714, 0.16265172267872696, 0.16519597822849486, 0.7341158985680662, 0.20927399239119338, 0.4767072792945992, 0.19577545543473818, 0.16730200153699148, 0.20150526322645057, 0.2763247920367279, 0.27291773918556017, 0.24972237312333323, 0.2095185969362362, 0.21542170182131826, 0.20856036158414526, 0.22029831782941478, 0.19356832647983557, 0.19794371684781475, 0.2281093491278844, 0.2253339249380143, 0.22491663508090753, 0.09302406858616119, 0.11003623498100956, 0.08640120732039491, 0.10796456989400738, 0.10450787820256369, 0.13273137436094073, 0.08610910879119871, 0.0980956029233293, 0.09869949091525654]}, "mutation_prompt": null}
{"id": "d768d635-147c-4329-8015-662e6896710a", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  # Increased local search iterations further to enhance exploration\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  # Adaptive step adjustment with faster adaptation rate\n                else:\n                    step_size *= 0.85  # Adaptive step adjustment with faster adaptation rate\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  # Dynamic population size adjustment\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()  # Faster dynamic mutation scaling\n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  # Mutation with adaptive control\n                swarm[i] = _local_search(swarm[i], func, mutation_scale)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicMutationEnhancedSocialSwarmOptimization", "description": "Enhancing exploration by introducing dynamic mutation scaling with adaptive control for local search step adjustment.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29cc851a-62fd-4fb3-ba6f-f79281149795", "metadata": {"aucs": [0.6233931465533569, 0.6052754521077592, 0.5973953389209649, 0.5884637695174774, 0.6022494268327139, 0.6127442709958653, 0.6543925818429395, 0.5699911672610452, 0.5778070640988675, 0.07280640161897811, 9.999999999998899e-05, 0.0074618188726411905, 9.999999999998899e-05, 0.06476822324760256, 0.06336128433221488, 9.999999999998899e-05, 0.030776104164393803, 9.999999999998899e-05, 0.11679517058331312, 0.09556064034719325, 0.09334020717857383, 0.13679355067736487, 0.11078568934877242, 0.11536641560010086, 0.10618588355186476, 0.09001129144752007, 0.1609468480031121, 0.099058716084235, 0.08040271292166379, 0.09970575702221174, 0.11315683888872974, 0.11445172001618098, 0.0745238757639698, 0.08505647127588656, 0.0968698858419621, 0.11723163552640037, 0.8390956463854224, 0.8956369110735627, 0.9380858469874053, 0.9213780344123379, 0.797841310263923, 0.9513248588192944, 0.8901939801534936, 0.7756225290553244, 0.9802245285412418, 0.26966731509978714, 0.2713844452975289, 0.28448632547976227, 0.31605419523979494, 0.30692511655150834, 0.31180456388294775, 0.3033185287645913, 0.2603540528273154, 0.2965837638997577, 0.3848805920196372, 0.3321025199680533, 0.19386159894817934, 0.3724188980260358, 0.48207549624770507, 0.29570047412821643, 0.2924448286634006, 0.35453711308814706, 0.17926218830291984, 0.4074324126747636, 0.20936119589692392, 0.2783841184933451, 0.18348543427863295, 0.2906361565794464, 0.14902453975707375, 0.2438450514800965, 0.24171133813330947, 0.28857437385536555, 0.21866533021607715, 0.29436400498574433, 0.24560206896359638, 0.22300726926849845, 0.2780469819529522, 0.17816772920844814, 0.16744712189737243, 0.2767505144097743, 0.21677230770701594, 0.029929951003588973, 0.035980893593879015, 0.013454961107205232, 0.09523067924546336, 0.00014512181752401876, 9.999999999998899e-05, 0.023971001565580075, 0.07651406201387034, 0.03992683183550794, 0.1636240795921765, 0.14574522077389906, 0.2954141798898513, 0.11657824940706596, 0.17068676219710466, 0.09313188619700064, 0.19473846043070453, 0.14267457295518415, 0.19316674786031507, 0.11907525604709013, 0.126822360048221, 0.0861809523747874, 0.058337240185658445, 0.07544014671125276, 0.0841661265818815, 0.11098021717558182, 0.07120027087489345, 0.08985309862813395, 0.168727705126008, 0.07045853841118477, 0.16792947814992354, 0.20033688007727446, 0.20413574485010855, 0.20391861384871868, 0.1744704182507545, 0.08387511444794205, 0.12987887509645735, 0.4810407867634261, 0.4851269644255125, 0.5033351189976828, 0.48141519903258645, 0.5046881788750062, 0.46199006290041167, 0.49498471485470075, 0.46624469742980623, 0.4821730180070164, 0.11356081411243246, 0.1217397556887696, 0.09915023985701232, 0.0942814878305408, 0.09352282844588411, 0.09148796142322912, 0.10940494172165693, 0.10681026881238798, 0.13483603253825116, 0.18848536621957346, 0.27349702798747455, 0.2209785996842244, 0.26839654624253184, 0.17097956373507928, 0.2104280727626402, 0.2008309063147925, 0.23112050280536245, 0.29169430417017106, 0.22580531906690304, 0.29631601526870477, 0.21054683063713964, 0.2605230613971674, 0.26200629356856076, 0.23898948265997255, 0.19245306969715859, 0.23124782644449604, 0.20198629217481234, 0.14854929815998952, 0.17804947472930177, 0.20873744008180561, 0.23327706364315504, 0.19003733498431719, 0.20781318590318254, 0.17199134903415092, 0.20725168222349333, 0.1538552255521205, 0.2372721236315548, 0.24021080091832903, 0.21710854577425276, 0.2576701277525344, 0.24613283344892156, 0.20009725270368417, 0.2222893461030213, 0.22367318066248665, 0.28722474626794814, 0.3544778359349755, 0.18797211330305985, 0.19274973817327123, 0.22475363398918957, 0.2186446701994792, 0.20757484629033085, 0.1829975202183397, 0.20399673877179114, 0.20468190657277285, 0.19527708289270518, 0.18577989689430197, 0.6322323865916948, 0.8003487507150283, 0.18322151827509991, 0.7761951531392384, 0.18719842204824555, 0.7088975055552094, 0.5635271348070472, 0.7332104754781847, 0.20904858304561524, 0.49083292214598273, 0.19620859197431373, 0.1679782117237244, 0.2019764589300146, 0.26345739608569996, 0.2962607243102635, 0.20197603560343136, 0.2173278257606106, 0.21551541583902145, 0.19641739824528737, 0.2318306349287872, 0.21715875474041235, 0.2220964416315645, 0.2082357424084914, 0.21219337403696792, 0.21007172733761104, 0.0868681779367998, 0.11198156134193982, 0.08838217630320633, 0.08277239231707734, 0.10258141583563052, 0.11847173310560843, 0.10057619597297596, 0.07895260888517075, 0.11176586654358123]}, "mutation_prompt": null}
{"id": "61684b10-ef15-46c5-a6ed-83162612c447", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n        self.elitism_percentage = 0.1  # Preserving top 10% of individuals\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):\n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15\n                else:\n                    step_size *= 0.85\n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])\n        # Introduce elitism by preserving a fixed percentage of best individuals\n        num_elites = int(self.elitism_percentage * self.swarm_size)\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))\n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size - num_elites, replace=False)\n            swarm = np.vstack([swarm[selected_indices], swarm[np.argsort([func(x) for x in swarm])[:num_elites]])\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()\n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)\n                swarm[i] = _local_search(swarm[i], func, mutation_scale)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position\n", "name": "AcceleratedDynamicMutationEnhancedSocialSwarmOptimization", "description": "Introducing elitism by preserving a fixed percentage of the best individuals in the swarm, enhancing convergence by exploiting promising solutions.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 29, 9, '        num_elites = int(self.elitism_percentage * self.swarm_size)\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 29, 9, '        num_elites = int(self.elitism_percentage * self.swarm_size)\\n'))", "parent_id": "29cc851a-62fd-4fb3-ba6f-f79281149795", "metadata": {}, "mutation_prompt": null}
{"id": "750af428-dded-429b-830c-b407329b96b7", "solution": "import numpy as np\n\nclass AdaptiveLearningRateEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()  \n                adaptive_learning_rate = 0.1 + 0.9 * np.random.uniform()  # Adaptive learning rate for individual solutions\n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, adaptive_learning_rate)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveLearningRateEnhancedSocialSwarmOptimization", "description": "Introducing adaptive learning rate for individual solutions to enhance exploitation and accelerate convergence.", "configspace": "", "generation": 83, "fitness": 0.25566675586408744, "feedback": "The algorithm AdaptiveLearningRateEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.20.", "error": "", "parent_id": "29cc851a-62fd-4fb3-ba6f-f79281149795", "metadata": {"aucs": [0.6365516862999023, 0.620604396618611, 0.612525107628273, 0.629846079856121, 0.5551759658123534, 0.5868166401372638, 0.6283590432411909, 0.6002778431474703, 0.5663894258298743, 0.04382694553069755, 0.061078285951079336, 9.999999999998899e-05, 9.999999999998899e-05, 0.05539260179668548, 9.999999999998899e-05, 0.0039534276631834064, 9.999999999998899e-05, 0.02988440946018367, 0.12657149737368545, 0.14601523303229624, 0.137078417008886, 0.11506413028672702, 0.09117084087559868, 0.15133126309778422, 0.1207700199446381, 0.12774122332385507, 0.12102888038813708, 0.0892476150359236, 0.11294078998066381, 0.09291626719046997, 0.10630160444964198, 0.10040499440454986, 0.08366786228840262, 0.12438735917626964, 0.11117779414462325, 0.11014941719095672, 0.8964781900555431, 0.8597125862166016, 0.856584058132585, 0.9774501350693352, 0.8439988865668093, 0.9560664021253444, 0.9684885537742607, 0.8708149749567377, 0.919694438174126, 0.31633014285302274, 0.3022157747056552, 0.2852082923779464, 0.27210615122212556, 0.32354884081040514, 0.2736833704733064, 0.3198170075344998, 0.2937155494911573, 0.2638431133165723, 0.2277082773372031, 0.22516627247335486, 0.25636289723953587, 0.3733912786136082, 0.3179103658189437, 0.353479103328044, 0.2046491645679609, 0.28982017460346443, 0.4574028663129448, 0.31590372635887665, 0.23304755436303692, 0.25875332835911835, 0.3057683694209603, 0.34565528463979667, 0.3083393732923837, 0.22565121861601634, 0.22845706091826146, 0.31355802239367914, 0.3259682183944307, 0.2159878195731666, 0.23957819774099376, 0.20121238210144587, 0.32942395738574726, 0.2634270024392945, 0.20909774658903268, 0.33261615846697046, 0.2676564855684318, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04605785737508705, 0.009548244044832233, 0.053430550729566706, 0.05200909135932197, 0.002043839246138268, 0.07631270882783958, 0.19377115986032012, 0.11786357345434495, 0.1991833027384643, 0.09366623837254628, 0.12737005269572144, 0.21282960706721765, 0.2992494607299043, 0.13968258008001522, 0.17786275094715898, 0.13392252002089122, 0.07729419436990903, 0.08363829580734072, 0.05786153510086223, 0.1197469258342937, 0.09167644882440651, 0.15112190265256398, 0.10401995492832572, 0.03445263690915834, 0.1309414452313462, 0.1942147892343764, 0.16323902571977467, 0.1892945707991126, 0.18914751308238487, 0.19017310763506812, 0.13082367520051852, 0.136887989532682, 0.12712779450335188, 0.4564862693461672, 0.4874666937046206, 0.4493489858945101, 0.4528974991901359, 0.4699790181534049, 0.44124852638835876, 0.48557694657343065, 0.4973268690622904, 0.4776339432979929, 0.12089971821880374, 0.09493718345452218, 0.09430381868431481, 0.13790751095606846, 0.09698715516997203, 0.13603614543895526, 0.11867310557631117, 0.11625878136956957, 0.10672713121280708, 0.21234200925682534, 0.22024213019161476, 0.19837831722926846, 0.2191666594596441, 0.21746584485842047, 0.25650287000887806, 0.21576233384512666, 0.2084609611637075, 0.20843786640399053, 0.21197527650983095, 0.29618496914177683, 0.1936767104190299, 0.28025863231716275, 0.30674515711660477, 0.30873110830915307, 0.1930551777173467, 0.28229149289618083, 0.21753070639615513, 0.15320348458725452, 0.21012222484188525, 0.1537257888460566, 0.17534844859169385, 0.2156803133907299, 0.21366869238461017, 0.19094542135258785, 0.2078733091765721, 0.19326653215531286, 0.2447541108321012, 0.24707225489022244, 0.24710382890278093, 0.21707131866559892, 0.22758126566258963, 0.22662338506395385, 0.22675073351913044, 0.25744318778985886, 0.22225781800797373, 0.2168651976855852, 0.19745679871856348, 0.20022881710181895, 0.22695693907951275, 0.20626608912981426, 0.20578590191402046, 0.20345386280744238, 0.200807777288875, 0.20341506339167648, 0.6059201167282979, 0.18816057940759323, 0.18751552606393285, 0.7978456948564805, 0.452560661738738, 0.1898257613506359, 0.2347203532490887, 0.6617899431223231, 0.16108073844485693, 0.714411046704582, 0.5869096936140374, 0.16618796184300122, 0.6025290644304495, 0.16330810549744623, 0.4197167259409763, 0.34136502745239694, 0.33763094314408804, 0.2280328445288171, 0.20267847181025223, 0.2059524999236667, 0.2106602931195486, 0.21753150868744486, 0.2184445771448701, 0.20509281308475003, 0.21980762296493783, 0.2163653042831274, 0.20017812740645424, 0.093004324033513, 0.12736416220968005, 0.07813626523978923, 0.1143144622255653, 0.09279871430875664, 0.10292023467316103, 0.08262860029187336, 0.0807837770924763, 0.10465344346051753]}, "mutation_prompt": null}
{"id": "4d1cb1c5-d46a-4471-b143-d741b678f1ea", "solution": "import numpy as np\n\nclass AdaptiveLearningRateEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()  \n                adaptive_learning_rate = 0.1 + 0.9 * np.random.uniform()  # Adaptive learning rate for individual solutions\n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, adaptive_learning_rate)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveLearningRateEnhancedSocialSwarmOptimization", "description": "Introducing adaptive learning rate for individual solutions to enhance exploitation and accelerate convergence.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "750af428-dded-429b-830c-b407329b96b7", "metadata": {"aucs": [0.6365516862999023, 0.620604396618611, 0.612525107628273, 0.629846079856121, 0.5551759658123534, 0.5868166401372638, 0.6283590432411909, 0.6002778431474703, 0.5663894258298743, 0.04382694553069755, 0.061078285951079336, 9.999999999998899e-05, 9.999999999998899e-05, 0.05539260179668548, 9.999999999998899e-05, 0.0039534276631834064, 9.999999999998899e-05, 0.02988440946018367, 0.12657149737368545, 0.14601523303229624, 0.137078417008886, 0.11506413028672702, 0.09117084087559868, 0.15133126309778422, 0.1207700199446381, 0.12774122332385507, 0.12102888038813708, 0.0892476150359236, 0.11294078998066381, 0.09291626719046997, 0.10630160444964198, 0.10040499440454986, 0.08366786228840262, 0.12438735917626964, 0.11117779414462325, 0.11014941719095672, 0.8964781900555431, 0.8597125862166016, 0.856584058132585, 0.9774501350693352, 0.8439988865668093, 0.9560664021253444, 0.9684885537742607, 0.8708149749567377, 0.919694438174126, 0.31633014285302274, 0.3022157747056552, 0.2852082923779464, 0.27210615122212556, 0.32354884081040514, 0.2736833704733064, 0.3198170075344998, 0.2937155494911573, 0.2638431133165723, 0.2277082773372031, 0.22516627247335486, 0.25636289723953587, 0.3733912786136082, 0.3179103658189437, 0.353479103328044, 0.2046491645679609, 0.28982017460346443, 0.4574028663129448, 0.31590372635887665, 0.23304755436303692, 0.25875332835911835, 0.3057683694209603, 0.34565528463979667, 0.3083393732923837, 0.22565121861601634, 0.22845706091826146, 0.31355802239367914, 0.3259682183944307, 0.2159878195731666, 0.23957819774099376, 0.20121238210144587, 0.32942395738574726, 0.2634270024392945, 0.20909774658903268, 0.33261615846697046, 0.2676564855684318, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04605785737508705, 0.009548244044832233, 0.053430550729566706, 0.05200909135932197, 0.002043839246138268, 0.07631270882783958, 0.19377115986032012, 0.11786357345434495, 0.1991833027384643, 0.09366623837254628, 0.12737005269572144, 0.21282960706721765, 0.2992494607299043, 0.13968258008001522, 0.17786275094715898, 0.13392252002089122, 0.07729419436990903, 0.08363829580734072, 0.05786153510086223, 0.1197469258342937, 0.09167644882440651, 0.15112190265256398, 0.10401995492832572, 0.03445263690915834, 0.1309414452313462, 0.1942147892343764, 0.16323902571977467, 0.1892945707991126, 0.18914751308238487, 0.19017310763506812, 0.13082367520051852, 0.136887989532682, 0.12712779450335188, 0.4564862693461672, 0.4874666937046206, 0.4493489858945101, 0.4528974991901359, 0.4699790181534049, 0.44124852638835876, 0.48557694657343065, 0.4973268690622904, 0.4776339432979929, 0.12089971821880374, 0.09493718345452218, 0.09430381868431481, 0.13790751095606846, 0.09698715516997203, 0.13603614543895526, 0.11867310557631117, 0.11625878136956957, 0.10672713121280708, 0.21234200925682534, 0.22024213019161476, 0.19837831722926846, 0.2191666594596441, 0.21746584485842047, 0.25650287000887806, 0.21576233384512666, 0.2084609611637075, 0.20843786640399053, 0.21197527650983095, 0.29618496914177683, 0.1936767104190299, 0.28025863231716275, 0.30674515711660477, 0.30873110830915307, 0.1930551777173467, 0.28229149289618083, 0.21753070639615513, 0.15320348458725452, 0.21012222484188525, 0.1537257888460566, 0.17534844859169385, 0.2156803133907299, 0.21366869238461017, 0.19094542135258785, 0.2078733091765721, 0.19326653215531286, 0.2447541108321012, 0.24707225489022244, 0.24710382890278093, 0.21707131866559892, 0.22758126566258963, 0.22662338506395385, 0.22675073351913044, 0.25744318778985886, 0.22225781800797373, 0.2168651976855852, 0.19745679871856348, 0.20022881710181895, 0.22695693907951275, 0.20626608912981426, 0.20578590191402046, 0.20345386280744238, 0.200807777288875, 0.20341506339167648, 0.6059201167282979, 0.18816057940759323, 0.18751552606393285, 0.7978456948564805, 0.452560661738738, 0.1898257613506359, 0.2347203532490887, 0.6617899431223231, 0.16108073844485693, 0.714411046704582, 0.5869096936140374, 0.16618796184300122, 0.6025290644304495, 0.16330810549744623, 0.4197167259409763, 0.34136502745239694, 0.33763094314408804, 0.2280328445288171, 0.20267847181025223, 0.2059524999236667, 0.2106602931195486, 0.21753150868744486, 0.2184445771448701, 0.20509281308475003, 0.21980762296493783, 0.2163653042831274, 0.20017812740645424, 0.093004324033513, 0.12736416220968005, 0.07813626523978923, 0.1143144622255653, 0.09279871430875664, 0.10292023467316103, 0.08262860029187336, 0.0807837770924763, 0.10465344346051753]}, "mutation_prompt": null}
{"id": "6ec48349-52ee-474e-8271-b2facd350311", "solution": "import numpy as np\n\nclass AdaptiveLearningRateEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()  \n                adaptive_learning_rate = 0.1 + 0.9 * np.random.uniform()  # Adaptive learning rate for individual solutions\n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, adaptive_learning_rate)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AdaptiveLearningRateEnhancedSocialSwarmOptimization", "description": "Introducing adaptive learning rate for individual solutions to enhance exploitation and accelerate convergence.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "750af428-dded-429b-830c-b407329b96b7", "metadata": {"aucs": [0.6365516862999023, 0.620604396618611, 0.612525107628273, 0.629846079856121, 0.5551759658123534, 0.5868166401372638, 0.6283590432411909, 0.6002778431474703, 0.5663894258298743, 0.04382694553069755, 0.061078285951079336, 9.999999999998899e-05, 9.999999999998899e-05, 0.05539260179668548, 9.999999999998899e-05, 0.0039534276631834064, 9.999999999998899e-05, 0.02988440946018367, 0.12657149737368545, 0.14601523303229624, 0.137078417008886, 0.11506413028672702, 0.09117084087559868, 0.15133126309778422, 0.1207700199446381, 0.12774122332385507, 0.12102888038813708, 0.0892476150359236, 0.11294078998066381, 0.09291626719046997, 0.10630160444964198, 0.10040499440454986, 0.08366786228840262, 0.12438735917626964, 0.11117779414462325, 0.11014941719095672, 0.8964781900555431, 0.8597125862166016, 0.856584058132585, 0.9774501350693352, 0.8439988865668093, 0.9560664021253444, 0.9684885537742607, 0.8708149749567377, 0.919694438174126, 0.31633014285302274, 0.3022157747056552, 0.2852082923779464, 0.27210615122212556, 0.32354884081040514, 0.2736833704733064, 0.3198170075344998, 0.2937155494911573, 0.2638431133165723, 0.2277082773372031, 0.22516627247335486, 0.25636289723953587, 0.3733912786136082, 0.3179103658189437, 0.353479103328044, 0.2046491645679609, 0.28982017460346443, 0.4574028663129448, 0.31590372635887665, 0.23304755436303692, 0.25875332835911835, 0.3057683694209603, 0.34565528463979667, 0.3083393732923837, 0.22565121861601634, 0.22845706091826146, 0.31355802239367914, 0.3259682183944307, 0.2159878195731666, 0.23957819774099376, 0.20121238210144587, 0.32942395738574726, 0.2634270024392945, 0.20909774658903268, 0.33261615846697046, 0.2676564855684318, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04605785737508705, 0.009548244044832233, 0.053430550729566706, 0.05200909135932197, 0.002043839246138268, 0.07631270882783958, 0.19377115986032012, 0.11786357345434495, 0.1991833027384643, 0.09366623837254628, 0.12737005269572144, 0.21282960706721765, 0.2992494607299043, 0.13968258008001522, 0.17786275094715898, 0.13392252002089122, 0.07729419436990903, 0.08363829580734072, 0.05786153510086223, 0.1197469258342937, 0.09167644882440651, 0.15112190265256398, 0.10401995492832572, 0.03445263690915834, 0.1309414452313462, 0.1942147892343764, 0.16323902571977467, 0.1892945707991126, 0.18914751308238487, 0.19017310763506812, 0.13082367520051852, 0.136887989532682, 0.12712779450335188, 0.4564862693461672, 0.4874666937046206, 0.4493489858945101, 0.4528974991901359, 0.4699790181534049, 0.44124852638835876, 0.48557694657343065, 0.4973268690622904, 0.4776339432979929, 0.12089971821880374, 0.09493718345452218, 0.09430381868431481, 0.13790751095606846, 0.09698715516997203, 0.13603614543895526, 0.11867310557631117, 0.11625878136956957, 0.10672713121280708, 0.21234200925682534, 0.22024213019161476, 0.19837831722926846, 0.2191666594596441, 0.21746584485842047, 0.25650287000887806, 0.21576233384512666, 0.2084609611637075, 0.20843786640399053, 0.21197527650983095, 0.29618496914177683, 0.1936767104190299, 0.28025863231716275, 0.30674515711660477, 0.30873110830915307, 0.1930551777173467, 0.28229149289618083, 0.21753070639615513, 0.15320348458725452, 0.21012222484188525, 0.1537257888460566, 0.17534844859169385, 0.2156803133907299, 0.21366869238461017, 0.19094542135258785, 0.2078733091765721, 0.19326653215531286, 0.2447541108321012, 0.24707225489022244, 0.24710382890278093, 0.21707131866559892, 0.22758126566258963, 0.22662338506395385, 0.22675073351913044, 0.25744318778985886, 0.22225781800797373, 0.2168651976855852, 0.19745679871856348, 0.20022881710181895, 0.22695693907951275, 0.20626608912981426, 0.20578590191402046, 0.20345386280744238, 0.200807777288875, 0.20341506339167648, 0.6059201167282979, 0.18816057940759323, 0.18751552606393285, 0.7978456948564805, 0.452560661738738, 0.1898257613506359, 0.2347203532490887, 0.6617899431223231, 0.16108073844485693, 0.714411046704582, 0.5869096936140374, 0.16618796184300122, 0.6025290644304495, 0.16330810549744623, 0.4197167259409763, 0.34136502745239694, 0.33763094314408804, 0.2280328445288171, 0.20267847181025223, 0.2059524999236667, 0.2106602931195486, 0.21753150868744486, 0.2184445771448701, 0.20509281308475003, 0.21980762296493783, 0.2163653042831274, 0.20017812740645424, 0.093004324033513, 0.12736416220968005, 0.07813626523978923, 0.1143144622255653, 0.09279871430875664, 0.10292023467316103, 0.08262860029187336, 0.0807837770924763, 0.10465344346051753]}, "mutation_prompt": null}
{"id": "1581fb17-8b34-416e-a7fc-db8a4460f3b3", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()  \n                inertia_weight = 0.4 + 0.4 * ((self.budget - _) / self.budget)  \n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, inertia_weight)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Implementing a dynamic inertia weight strategy to enhance exploration and exploitation during the optimization process.", "configspace": "", "generation": 86, "fitness": 0.25779031129119995, "feedback": "The algorithm DynamicInertiaWeightEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "750af428-dded-429b-830c-b407329b96b7", "metadata": {"aucs": [0.6195742747518854, 0.5717284509574645, 0.589594545542728, 0.6255295675399155, 0.5563198293271117, 0.5850354400082022, 0.612573347781358, 0.5675813866880086, 0.5565520080406464, 0.07599465449956866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006508794150996033, 0.011762085632183505, 9.999999999998899e-05, 0.038348745420421215, 9.999999999998899e-05, 0.11408843068170171, 0.10499709061683093, 0.16926765421917245, 0.13609672617518864, 0.10552389405274021, 0.10068298187307123, 0.10932764514254845, 0.11816910703791361, 0.1267584397076249, 0.09158452745562318, 0.10050661577371334, 0.0991895720340279, 0.1297486987669879, 0.10305377204622923, 0.09208846649878433, 0.11636449305807195, 0.11243255871908708, 0.08189410349099813, 0.9821387210274155, 0.9717195275448676, 0.9413654454630366, 0.9700292495661944, 0.9765597011049377, 0.9507247734441203, 0.923557070211667, 0.982064249180179, 0.9810035136279899, 0.3227041383369358, 0.3013855441426394, 0.30583054931784537, 0.3123719704648985, 0.3192577974380204, 0.34139143514956394, 0.3030668487462984, 0.25516109967395506, 0.29699443013478244, 0.32334017589163266, 0.4448853962976689, 0.21000806543474104, 0.4702218322608783, 0.263352398952702, 0.2742160611014599, 0.30874557206123876, 0.6213274301635552, 0.5534838799006099, 0.3189538505492011, 0.30370857952035224, 0.31153547227181677, 0.20739811499699534, 0.21763479999426083, 0.324043934467133, 0.24836544617407452, 0.17748639160440582, 0.21105747808944275, 0.2418818608291624, 0.22557763123700836, 0.17161138563608258, 0.19850671501191863, 0.1860379024974449, 0.27974324255865035, 0.17737293313696267, 0.31272873954206415, 0.24899827608133795, 0.00176202536563419, 0.059533890106968634, 0.0011317628286177106, 0.09782693862535574, 0.0006216165881028912, 0.031017360562169194, 0.007506693104631257, 0.05074884912358446, 0.044221593949038795, 0.15669629299815735, 0.1021498727529071, 0.17830303360706712, 0.11535571042347692, 0.16867404758632054, 0.11151822368433073, 0.2217389348958616, 0.12281578324323872, 0.158875186418993, 0.11219496743368529, 0.06856268019121947, 0.05217720977301288, 0.06283211636014818, 0.08350769775744771, 0.049015672339618455, 0.0797858819492614, 0.019822402889934754, 0.06610985833731242, 0.13578570578770577, 0.15342789799477918, 0.16790682792373013, 0.20238381128077443, 0.18053104282625354, 0.15738223166186782, 0.14005839894262428, 0.08608131484675963, 0.12205642492544888, 0.4789593002809823, 0.4675336776274287, 0.460420259807671, 0.494865352943614, 0.48773061799684114, 0.42999766720370647, 0.4904083061405198, 0.4954440720794472, 0.482216896277893, 0.10542143098957635, 0.10787569174325617, 0.08809220245522553, 0.111196313471012, 0.10292324783038165, 0.133336377430617, 0.10712957805924728, 0.09920772972019609, 0.12751096632366443, 0.2984513786037304, 0.18976480987588795, 0.2906912366651503, 0.22243617229867596, 0.23553986084310408, 0.2400130000157955, 0.2631529154820782, 0.21839776330094485, 0.2661010373114008, 0.2585596003397036, 0.28824237797393026, 0.24991320690649788, 0.2479002410440998, 0.2588342480350062, 0.2590487558082578, 0.22840567121746902, 0.23805312539464885, 0.2501737931379816, 0.17213668057628695, 0.23538623145354676, 0.21915642283736558, 0.2263037534356941, 0.19502660697388685, 0.22459458535626164, 0.19740243180067363, 0.23536769907710875, 0.204132372773577, 0.20307926170828727, 0.20549276739400724, 0.191189914948528, 0.22677881269597688, 0.24362049622368365, 0.20264036680446385, 0.24752469364333052, 0.2342559778526696, 0.19930787874037426, 0.18946131184607784, 0.28829328393318565, 0.1955677243778302, 0.2149165399839842, 0.19342973763381455, 0.22190745670264944, 0.19835219366529266, 0.2063565988154119, 0.21908175168201205, 0.7100661112612812, 0.185959590929888, 0.1788062035294985, 0.805432761400187, 0.19159262178399328, 0.7766616147066793, 0.18396396487813949, 0.7596491116727742, 0.7017092003597815, 0.4487445799765548, 0.20771276197586575, 0.49260499836056515, 0.19938489244742374, 0.16853224121435828, 0.19991370322758362, 0.2586376586018988, 0.42280335286853776, 0.20745170198870833, 0.19830533560697117, 0.2130432092177459, 0.19774052059027247, 0.2036571014875398, 0.21273828768162728, 0.1924750327313327, 0.23071428714885767, 0.20541542141333513, 0.21290413256146823, 0.09171497476051316, 0.1179680774102777, 0.10650417733862727, 0.08459760600957711, 0.1042723274273829, 0.07830138979999068, 0.09106839048018067, 0.1092491743603059, 0.09865078850284592]}, "mutation_prompt": null}
{"id": "004b35dd-8208-4306-acea-26ed0c4f692e", "solution": "import numpy as np\n\nclass DynamicInertiaWeightEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()  \n                inertia_weight = 0.4 + 0.4 * ((self.budget - _) / self.budget)  \n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, inertia_weight)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "DynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Implementing a dynamic inertia weight strategy to enhance exploration and exploitation during the optimization process.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1581fb17-8b34-416e-a7fc-db8a4460f3b3", "metadata": {"aucs": [0.6195742747518854, 0.5717284509574645, 0.589594545542728, 0.6255295675399155, 0.5563198293271117, 0.5850354400082022, 0.612573347781358, 0.5675813866880086, 0.5565520080406464, 0.07599465449956866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006508794150996033, 0.011762085632183505, 9.999999999998899e-05, 0.038348745420421215, 9.999999999998899e-05, 0.11408843068170171, 0.10499709061683093, 0.16926765421917245, 0.13609672617518864, 0.10552389405274021, 0.10068298187307123, 0.10932764514254845, 0.11816910703791361, 0.1267584397076249, 0.09158452745562318, 0.10050661577371334, 0.0991895720340279, 0.1297486987669879, 0.10305377204622923, 0.09208846649878433, 0.11636449305807195, 0.11243255871908708, 0.08189410349099813, 0.9821387210274155, 0.9717195275448676, 0.9413654454630366, 0.9700292495661944, 0.9765597011049377, 0.9507247734441203, 0.923557070211667, 0.982064249180179, 0.9810035136279899, 0.3227041383369358, 0.3013855441426394, 0.30583054931784537, 0.3123719704648985, 0.3192577974380204, 0.34139143514956394, 0.3030668487462984, 0.25516109967395506, 0.29699443013478244, 0.32334017589163266, 0.4448853962976689, 0.21000806543474104, 0.4702218322608783, 0.263352398952702, 0.2742160611014599, 0.30874557206123876, 0.6213274301635552, 0.5534838799006099, 0.3189538505492011, 0.30370857952035224, 0.31153547227181677, 0.20739811499699534, 0.21763479999426083, 0.324043934467133, 0.24836544617407452, 0.17748639160440582, 0.21105747808944275, 0.2418818608291624, 0.22557763123700836, 0.17161138563608258, 0.19850671501191863, 0.1860379024974449, 0.27974324255865035, 0.17737293313696267, 0.31272873954206415, 0.24899827608133795, 0.00176202536563419, 0.059533890106968634, 0.0011317628286177106, 0.09782693862535574, 0.0006216165881028912, 0.031017360562169194, 0.007506693104631257, 0.05074884912358446, 0.044221593949038795, 0.15669629299815735, 0.1021498727529071, 0.17830303360706712, 0.11535571042347692, 0.16867404758632054, 0.11151822368433073, 0.2217389348958616, 0.12281578324323872, 0.158875186418993, 0.11219496743368529, 0.06856268019121947, 0.05217720977301288, 0.06283211636014818, 0.08350769775744771, 0.049015672339618455, 0.0797858819492614, 0.019822402889934754, 0.06610985833731242, 0.13578570578770577, 0.15342789799477918, 0.16790682792373013, 0.20238381128077443, 0.18053104282625354, 0.15738223166186782, 0.14005839894262428, 0.08608131484675963, 0.12205642492544888, 0.4789593002809823, 0.4675336776274287, 0.460420259807671, 0.494865352943614, 0.48773061799684114, 0.42999766720370647, 0.4904083061405198, 0.4954440720794472, 0.482216896277893, 0.10542143098957635, 0.10787569174325617, 0.08809220245522553, 0.111196313471012, 0.10292324783038165, 0.133336377430617, 0.10712957805924728, 0.09920772972019609, 0.12751096632366443, 0.2984513786037304, 0.18976480987588795, 0.2906912366651503, 0.22243617229867596, 0.23553986084310408, 0.2400130000157955, 0.2631529154820782, 0.21839776330094485, 0.2661010373114008, 0.2585596003397036, 0.28824237797393026, 0.24991320690649788, 0.2479002410440998, 0.2588342480350062, 0.2590487558082578, 0.22840567121746902, 0.23805312539464885, 0.2501737931379816, 0.17213668057628695, 0.23538623145354676, 0.21915642283736558, 0.2263037534356941, 0.19502660697388685, 0.22459458535626164, 0.19740243180067363, 0.23536769907710875, 0.204132372773577, 0.20307926170828727, 0.20549276739400724, 0.191189914948528, 0.22677881269597688, 0.24362049622368365, 0.20264036680446385, 0.24752469364333052, 0.2342559778526696, 0.19930787874037426, 0.18946131184607784, 0.28829328393318565, 0.1955677243778302, 0.2149165399839842, 0.19342973763381455, 0.22190745670264944, 0.19835219366529266, 0.2063565988154119, 0.21908175168201205, 0.7100661112612812, 0.185959590929888, 0.1788062035294985, 0.805432761400187, 0.19159262178399328, 0.7766616147066793, 0.18396396487813949, 0.7596491116727742, 0.7017092003597815, 0.4487445799765548, 0.20771276197586575, 0.49260499836056515, 0.19938489244742374, 0.16853224121435828, 0.19991370322758362, 0.2586376586018988, 0.42280335286853776, 0.20745170198870833, 0.19830533560697117, 0.2130432092177459, 0.19774052059027247, 0.2036571014875398, 0.21273828768162728, 0.1924750327313327, 0.23071428714885767, 0.20541542141333513, 0.21290413256146823, 0.09171497476051316, 0.1179680774102777, 0.10650417733862727, 0.08459760600957711, 0.1042723274273829, 0.07830138979999068, 0.09106839048018067, 0.1092491743603059, 0.09865078850284592]}, "mutation_prompt": null}
{"id": "8af57dbe-13bf-49d2-9e4c-b2460e877543", "solution": "import numpy as np\n\nclass EnhancedDynamicInertiaWeightEnhancedSocialSwarmOptimization(DynamicInertiaWeightEnhancedSocialSwarmOptimization):\n    def __call__(self, func):\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = self._initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        mutation_scale = 0.1  # Initial mutation scale\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                improvement_ratio = (func(best_position) - func(swarm[i])) / func(best_position)\n                mutation_scale = max(0.1, mutation_scale * (1 + 0.5 * improvement_ratio))  # Dynamic mutation scale adjustment\n                inertia_weight = 0.4 + 0.4 * ((self.budget - _) / self.budget)  \n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)\n                swarm[i] = _local_search(swarm[i], func, inertia_weight)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "EnhancedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Enhancing convergence speed by dynamically adjusting the mutation scale based on the best fitness improvement.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedDynamicInertiaWeightEnhancedSocialSwarmOpt' object has no attribute '_initialize_swarm'\").", "error": "AttributeError(\"'EnhancedDynamicInertiaWeightEnhancedSocialSwarmOpt' object has no attribute '_initialize_swarm'\")", "parent_id": "1581fb17-8b34-416e-a7fc-db8a4460f3b3", "metadata": {}, "mutation_prompt": null}
{"id": "50e777a4-96d1-4fa7-875f-cbc0eb5c93ef", "solution": "import numpy as np\n\nclass FastDynamicInertiaWeightEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.2  # Adaptive step size adjustment for faster convergence\n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform()  \n                inertia_weight = 0.4 + 0.4 * ((_ + 1) / self.budget)  # Adjusted inertia weight update\n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, inertia_weight)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "FastDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Enhancing convergence speed through adaptive step size adjustment in local search for improved exploitation capabilities.", "configspace": "", "generation": 89, "fitness": 0.2498176897607131, "feedback": "The algorithm FastDynamicInertiaWeightEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "1581fb17-8b34-416e-a7fc-db8a4460f3b3", "metadata": {"aucs": [0.6245069696972033, 0.6173239118877082, 0.6279848961865117, 0.605322216188445, 0.5830784057231823, 0.5937564329106082, 0.6395377838595873, 0.5638305666369173, 0.581594844058852, 0.06297309546449037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032525925664256494, 9.999999999998899e-05, 0.0010667522492260328, 9.999999999998899e-05, 9.999999999998899e-05, 0.09097508220775707, 0.09985371881710547, 0.0876461278444316, 0.15291786542888164, 0.1410616109104056, 0.12878830033309363, 0.11334277354610989, 0.09016311937500032, 0.12314875368403444, 0.09086517835078689, 0.11751152729193015, 0.0765940150870249, 0.10868858567912443, 0.11811601368264779, 0.08858925314865551, 0.09376455752884161, 0.10296064173990893, 0.07352475482194698, 0.8983234540447071, 0.9704155561458856, 0.9391764207018357, 0.9696852686682035, 0.9321281022600656, 0.9492177022645537, 0.8828005560974616, 0.7860731597234678, 0.9787294910777008, 0.34697475578443304, 0.3422380228928561, 0.320663104369995, 0.29884286439281627, 0.29948963033522, 0.2850902794545789, 0.30595412903766717, 0.28859365038544893, 0.3384392646555281, 0.31448288740071684, 0.288535744652087, 0.1957399878924574, 0.26761449753537525, 0.24105967294980113, 0.2399002599295148, 0.14628501666220384, 0.48848991307869427, 0.2436559865427761, 0.3479016901176315, 0.24706117034981867, 0.2955019003026568, 0.2276527214671893, 0.31217372283845857, 0.23138673328393422, 0.27322153399264415, 0.18732663301122476, 0.21650060777927005, 0.3655360464332561, 0.19727928835838615, 0.2718029346135551, 0.1756587895614572, 0.2910483488086194, 0.14916855181922817, 0.1733415166415614, 0.27541701255042994, 0.2368286013183325, 9.999999999998899e-05, 0.04770334573496604, 0.0938496910176897, 0.08869724425180359, 0.038063918027907095, 0.0029464727511844258, 0.014591459436452348, 0.054090713904373144, 0.00044494178721821154, 0.21698702502701783, 0.1473106092363905, 0.1745171776435982, 0.10403561407853523, 0.21790155048387938, 0.08949131811344835, 0.18784242794469375, 0.18071030187500603, 0.1853355908057135, 0.09753075529415434, 0.08231032326680976, 0.08435851756309953, 0.04685404335095178, 0.05192427648875053, 0.07447514773742259, 0.11811098588129465, 0.06498067879930802, 0.05663258764458712, 0.173454892744485, 0.1166419618449227, 0.14617152430251057, 0.16361828293226355, 0.19108017119221876, 0.19611979066323482, 0.16636572209414757, 0.0898615201511882, 0.11111177591433719, 0.5086551503202266, 0.4523218760874219, 0.4683829713081089, 0.4506699259183914, 0.4691717567147484, 0.45654263779720894, 0.4839486850079757, 0.4783519284086203, 0.5198014520659637, 0.1125131665404191, 0.11379550709715969, 0.08954943090902157, 0.12160252413255968, 0.08908550681110938, 0.13219278311581695, 0.11035966087121563, 0.12303688099745325, 0.13027816108231782, 0.263867258192774, 0.21265619437034888, 0.3206803089730411, 0.24793486973863144, 0.2651750692297855, 0.22383466772461225, 0.31830807241359205, 0.20043414777887736, 0.236138207558786, 0.22124858498843958, 0.26657718874007874, 0.2393908082086469, 0.26207410618917426, 0.29213667381025976, 0.23153184323137732, 0.15168679426966425, 0.2713651113348393, 0.22107902989538208, 0.1691401931433134, 0.22947703600560387, 0.15927404622216035, 0.2004462411666008, 0.23162317577622948, 0.21627064003576546, 0.19859651272961154, 0.19292681453850247, 0.18349625594132524, 0.2055238782383083, 0.22027873019101785, 0.2118372898234233, 0.24352554464709875, 0.21713992994815712, 0.22242258064194576, 0.22463479283682442, 0.2271528762192534, 0.21927027283989853, 0.2229788192320108, 0.20371394464025072, 0.18961531788315766, 0.20042523221775788, 0.2071627798989093, 0.20358464401647758, 0.1872214326116045, 0.18996066730205496, 0.20493638517643908, 0.17297904184825397, 0.18537828625784214, 0.18017751302215324, 0.8461172889496029, 0.5985542473820776, 0.787450332824424, 0.17651800795180006, 0.7239886475274453, 0.1735008455581174, 0.67350897013601, 0.20958769934640942, 0.40976131699630836, 0.334622583968029, 0.16853047060459014, 0.20915368241276366, 0.16104007723118852, 0.30606816469595344, 0.24314990460351282, 0.2077386159252259, 0.19776317606984617, 0.20112359098939658, 0.21478243195544855, 0.20347435659906943, 0.2064926193944988, 0.20000837134301597, 0.21932853325589297, 0.21654589821182613, 0.08576025446906477, 0.09297015462460734, 0.09304496587097388, 0.10880420512014366, 0.08749882022758704, 0.1084019973058219, 0.08775458020448679, 0.09520840010220966, 0.09257473739674082]}, "mutation_prompt": null}
{"id": "3ec76d9f-9deb-42bd-8791-fac90157c264", "solution": "import numpy as np\n\nclass AcceleratedDynamicInertiaWeightEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform() * (1 - _ / self.budget) \n                inertia_weight = 0.4 + 0.4 * ((self.budget - _) / self.budget)  \n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, inertia_weight)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AcceleratedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Implementing a dynamic inertia weight strategy with adaptive mutation scale to enhance convergence speed while maintaining diversity in population.", "configspace": "", "generation": 90, "fitness": 0.2590033245487797, "feedback": "The algorithm AcceleratedDynamicInertiaWeightEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "1581fb17-8b34-416e-a7fc-db8a4460f3b3", "metadata": {"aucs": [0.6193332273704117, 0.572144660166125, 0.5892187438391622, 0.6250231739128308, 0.5560664179412032, 0.5850644631860139, 0.6124742632455057, 0.581985528937169, 0.5565557557219774, 0.07599443666508288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00650694724072487, 0.011755442827087625, 9.999999999998899e-05, 0.038348106488712785, 9.999999999998899e-05, 0.11411011915439628, 0.10507134545053798, 0.16939108206759979, 0.13609541895037602, 0.10552671398191138, 0.10068131523702428, 0.12278585742756098, 0.11817593066887844, 0.12144625178633939, 0.09158476541313954, 0.10049505372761558, 0.09915566201602322, 0.12977792258405774, 0.09875447429874984, 0.0988988091868126, 0.11636481591223202, 0.11243564398277595, 0.08027248267451326, 0.9821387210274155, 0.9717195275448676, 0.9413654454630366, 0.9700292495661944, 0.9765597011049377, 0.9507247734441203, 0.923557070211667, 0.982064249180179, 0.9810035136279899, 0.32275362118696216, 0.3014361135751201, 0.30605525969277003, 0.31248388028644647, 0.3193902517312617, 0.34141440226414044, 0.3030980084949245, 0.25474684471750564, 0.2970406342346452, 0.32334017589163266, 0.4448853962976689, 0.21000806543474104, 0.4702218322608783, 0.263352398952702, 0.288140824904107, 0.42370808304596586, 0.6213274301635552, 0.5534838799006099, 0.31894963185247494, 0.3037266679793065, 0.311587554858905, 0.20738406587142966, 0.21763843613639955, 0.3240384631856047, 0.24832817939379126, 0.17748676481779746, 0.21102679362655918, 0.24187594796002876, 0.22562314285005813, 0.17128883848774112, 0.19850583429592417, 0.1860376335950511, 0.2797449636603566, 0.17737129204875668, 0.3128160567886292, 0.24899907263816623, 0.0017510582189769197, 0.05953749399504815, 0.0012978013969832114, 0.09781406972571716, 0.0006196851035221718, 0.03233259960813628, 0.007514674282892542, 0.05085500423347511, 0.044266321211115955, 0.15669638570742084, 0.10215006917943337, 0.17830051236313826, 0.11535831807572705, 0.16867289369094307, 0.11151917690751634, 0.221732352460411, 0.12281507386805901, 0.1646592314732339, 0.11201703090951831, 0.06859418155263741, 0.052189694379987106, 0.06280497294024967, 0.08349667177348996, 0.0490203151270685, 0.07978745911791707, 0.02262066216667591, 0.06611457380291319, 0.13578542241989666, 0.15349114788813312, 0.16791689089773554, 0.2022205172072553, 0.18053282085991507, 0.15740786194093948, 0.14021233068565542, 0.08607904996834115, 0.12204287029852035, 0.47409769039205607, 0.46635009614659695, 0.45946019862253773, 0.4985926723289875, 0.48768974082947325, 0.43005562909384265, 0.4926621306287263, 0.4954672150721109, 0.4820526329214213, 0.10542924046292534, 0.10785263911858911, 0.08809037813886311, 0.11119582394424365, 0.10292295262111106, 0.13333656650785541, 0.10709508169281401, 0.12169148928931628, 0.12751378804724556, 0.2968312837573771, 0.18941792118026413, 0.2961951906816773, 0.27255714182433677, 0.20679916112491303, 0.2352676968751194, 0.25285933140754047, 0.21639055429919196, 0.3506372491005999, 0.25823004121660265, 0.2851694538292897, 0.255161762105378, 0.24784510125843473, 0.2584798676768113, 0.2576844536877675, 0.22839333194903888, 0.2396336693947556, 0.2359343034201522, 0.16572018811591382, 0.23429927282799612, 0.21217687120979312, 0.22184943572769278, 0.19525878086845683, 0.22464652845044708, 0.19764823564214384, 0.23572555983552823, 0.2038425842811915, 0.20097367831309843, 0.20531115256205024, 0.20124118431910676, 0.22364045071010774, 0.243536964255071, 0.203172769177704, 0.24752469364333052, 0.268526871324157, 0.2020906109305609, 0.1894642476638505, 0.28824645637394297, 0.1955614239659732, 0.20480383530165536, 0.193431201041386, 0.22189377138701794, 0.19835149304978583, 0.20635634139536696, 0.21915401595892126, 0.7100739469373096, 0.1859596007074953, 0.1788059164425484, 0.805456625638808, 0.19159386361014608, 0.7766333916948854, 0.18396513614814525, 0.7596987431029314, 0.7016930546201305, 0.448748483388979, 0.20771276389009208, 0.49260882447717413, 0.19938492758632953, 0.16853223523547, 0.19990846732302248, 0.2586405753932547, 0.42286769590505424, 0.2074517373011232, 0.1977668691759107, 0.21045789178333107, 0.19792000201731075, 0.2036571014875398, 0.21288439296317896, 0.1856082462627684, 0.23071428714885767, 0.20539972405368812, 0.21411296046032036, 0.09175301620023579, 0.11792647221088626, 0.10652013099580127, 0.08245429434550677, 0.1042723274273829, 0.07522812060718809, 0.09103526851056343, 0.1102286037134792, 0.09684958303517432]}, "mutation_prompt": null}
{"id": "65c94b48-0064-4fc0-9aa4-e8ca3d950f6c", "solution": "import numpy as np\n\nclass EnhancedDynamicInertiaWeightOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform() * (1 - _ / self.budget) \n                inertia_weight = 0.4 + 0.4 * ((self.budget - _) / self.budget)  \n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                adaptive_step = 0.1 + 0.9 * np.random.uniform() * (1 - _ / self.budget)  \n                swarm[i] = _local_search(swarm[i], func, adaptive_step)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "EnhancedDynamicInertiaWeightOptimization", "description": "Enhancing convergence speed by implementing a dynamic adaptive learning rate mechanism during local search.", "configspace": "", "generation": 91, "fitness": 0.25563874658956937, "feedback": "The algorithm EnhancedDynamicInertiaWeightOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.20.", "error": "", "parent_id": "3ec76d9f-9deb-42bd-8791-fac90157c264", "metadata": {"aucs": [0.6364974947744646, 0.6205724285344221, 0.6125212499282371, 0.629875293030757, 0.5553907789288357, 0.5868375184074617, 0.627904030785388, 0.6029675300923102, 0.5663995341864807, 0.0438308093438009, 0.0610746307404012, 9.999999999998899e-05, 9.999999999998899e-05, 0.055393190945645654, 9.999999999998899e-05, 0.003951550342118915, 9.999999999998899e-05, 0.02988120790842963, 0.1265779740743057, 0.14601553466739003, 0.13707841630563522, 0.11506725219290526, 0.09116793830339665, 0.15133140587347793, 0.12078811311798765, 0.12774725248497287, 0.12103823664050928, 0.08924904332225547, 0.11294029843181963, 0.09281062695021358, 0.10185815854411517, 0.10042770602785622, 0.08367205958263257, 0.12438164666801277, 0.11086986753816841, 0.10930078123997078, 0.8964781900555431, 0.8597125862166016, 0.856584058132585, 0.9774501350693352, 0.8439988865668093, 0.9560664021253444, 0.9684885537742607, 0.8708149749567377, 0.919694438174126, 0.31639803588535553, 0.3022011703002355, 0.2851898665847461, 0.2720703202022261, 0.31280030549581206, 0.27368945357783436, 0.31973644803637347, 0.29371996048546467, 0.2638308198226742, 0.2277082773372031, 0.2261055926126404, 0.25636289723953587, 0.3733912786136082, 0.3179103658189437, 0.353479103328044, 0.2046491645679609, 0.29152556722862955, 0.4574028663129448, 0.315907864239959, 0.23304041119633767, 0.2587525712513702, 0.3057547652750183, 0.34541755745690195, 0.30838679357967314, 0.22563906871868578, 0.23626735837769564, 0.31354347323108755, 0.3259022618971261, 0.21597822074387873, 0.23946885609721547, 0.20121424596701343, 0.32950488754561935, 0.2634926455516594, 0.2090919554992473, 0.3335196096002023, 0.26762861526716775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04605705395732962, 0.009548804652741993, 0.05342949575295375, 0.05200899643892021, 0.0020432040831906972, 0.07631528608479743, 0.19378886868851497, 0.11786272829856848, 0.1991776179843795, 0.09366551031253822, 0.12736917969756634, 0.21283125840524608, 0.2992223688928223, 0.13968399016312139, 0.17785128734564137, 0.13386383741213537, 0.07729810453899066, 0.0837275103602857, 0.05910995448810774, 0.1197365209337482, 0.09228806185832583, 0.15073031248399238, 0.10394708194963964, 0.034461948157039846, 0.13092305171963725, 0.1942390808272818, 0.16324305308279508, 0.18934476221821073, 0.18912760989184496, 0.1901870705172477, 0.13083228817999826, 0.13683890708564939, 0.1271274883431417, 0.45646339045714013, 0.487381756216683, 0.44943441254513594, 0.45157000849378837, 0.4702723381744963, 0.44123998113492935, 0.4853370098490566, 0.49663025465965405, 0.4781144819145188, 0.1209039919346887, 0.09488201545382602, 0.09430150752537392, 0.13790846517569966, 0.10183608792129484, 0.13603984315054518, 0.11874459551559935, 0.11626244319214851, 0.10672793135793912, 0.21965904478486264, 0.21896839425879822, 0.19849334676243857, 0.21073116574039075, 0.22630085962130897, 0.25592988002158057, 0.23927509895383758, 0.21755395206411632, 0.21211864696994487, 0.21210911050807324, 0.3061757017239618, 0.19367735248067974, 0.27683630218247146, 0.30656130729159203, 0.30822461487720887, 0.18634309139819616, 0.2792986414871722, 0.21164998033750848, 0.1564190572425046, 0.20788852804392632, 0.14763716528148474, 0.175339443541069, 0.21636249000495977, 0.21241705313191228, 0.18674447396439697, 0.2078732281072847, 0.1951613540501369, 0.22178850784331805, 0.2318016250314796, 0.22377522837670316, 0.22678035427683207, 0.22303000668989548, 0.21220391236752922, 0.22527805740187945, 0.2574324104245097, 0.20647287617057342, 0.21686575690101428, 0.19745694634378674, 0.20020893464318978, 0.22695808407407358, 0.2062682203131635, 0.20579090112143672, 0.2034385274637529, 0.2008077571528566, 0.203408126843308, 0.6059213008158213, 0.1881605897814811, 0.18751552095510993, 0.7978517353353421, 0.468771552459172, 0.18982584750398113, 0.235312944835117, 0.6617631319621452, 0.16108073667266876, 0.7144137435736766, 0.5868157331456314, 0.16618796162169835, 0.620731533362769, 0.16330811268475298, 0.44165079067819246, 0.3413569007402032, 0.33748802998914296, 0.22803707154541986, 0.20174716865030018, 0.20876388124426526, 0.2106602931195486, 0.21755138477914748, 0.2220572635698893, 0.20688647843823982, 0.21923801996949754, 0.21025895306894204, 0.20231593036474005, 0.09310713777432889, 0.12735324656589797, 0.07737146918613946, 0.11379454763493324, 0.0925967327698789, 0.10316344625835994, 0.08369256811898007, 0.08284411769617017, 0.09883461879354927]}, "mutation_prompt": null}
{"id": "4e46ac8c-c2ed-42cf-abbf-a4e5cbad6067", "solution": "import numpy as np\n\nclass AcceleratedDynamicInertiaWeightEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform() * (1 - _ / self.budget) \n                inertia_weight = 0.4 + 0.4 * ((self.budget - _) / self.budget)  \n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, inertia_weight)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AcceleratedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Implementing a dynamic inertia weight strategy with adaptive mutation scale to enhance convergence speed while maintaining diversity in population.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ec76d9f-9deb-42bd-8791-fac90157c264", "metadata": {"aucs": [0.6193332273704117, 0.572144660166125, 0.5892187438391622, 0.6250231739128308, 0.5560664179412032, 0.5850644631860139, 0.6124742632455057, 0.581985528937169, 0.5565557557219774, 0.07599443666508288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00650694724072487, 0.011755442827087625, 9.999999999998899e-05, 0.038348106488712785, 9.999999999998899e-05, 0.11411011915439628, 0.10507134545053798, 0.16939108206759979, 0.13609541895037602, 0.10552671398191138, 0.10068131523702428, 0.12278585742756098, 0.11817593066887844, 0.12144625178633939, 0.09158476541313954, 0.10049505372761558, 0.09915566201602322, 0.12977792258405774, 0.09875447429874984, 0.0988988091868126, 0.11636481591223202, 0.11243564398277595, 0.08027248267451326, 0.9821387210274155, 0.9717195275448676, 0.9413654454630366, 0.9700292495661944, 0.9765597011049377, 0.9507247734441203, 0.923557070211667, 0.982064249180179, 0.9810035136279899, 0.32275362118696216, 0.3014361135751201, 0.30605525969277003, 0.31248388028644647, 0.3193902517312617, 0.34141440226414044, 0.3030980084949245, 0.25474684471750564, 0.2970406342346452, 0.32334017589163266, 0.4448853962976689, 0.21000806543474104, 0.4702218322608783, 0.263352398952702, 0.288140824904107, 0.42370808304596586, 0.6213274301635552, 0.5534838799006099, 0.31894963185247494, 0.3037266679793065, 0.311587554858905, 0.20738406587142966, 0.21763843613639955, 0.3240384631856047, 0.24832817939379126, 0.17748676481779746, 0.21102679362655918, 0.24187594796002876, 0.22562314285005813, 0.17128883848774112, 0.19850583429592417, 0.1860376335950511, 0.2797449636603566, 0.17737129204875668, 0.3128160567886292, 0.24899907263816623, 0.0017510582189769197, 0.05953749399504815, 0.0012978013969832114, 0.09781406972571716, 0.0006196851035221718, 0.03233259960813628, 0.007514674282892542, 0.05085500423347511, 0.044266321211115955, 0.15669638570742084, 0.10215006917943337, 0.17830051236313826, 0.11535831807572705, 0.16867289369094307, 0.11151917690751634, 0.221732352460411, 0.12281507386805901, 0.1646592314732339, 0.11201703090951831, 0.06859418155263741, 0.052189694379987106, 0.06280497294024967, 0.08349667177348996, 0.0490203151270685, 0.07978745911791707, 0.02262066216667591, 0.06611457380291319, 0.13578542241989666, 0.15349114788813312, 0.16791689089773554, 0.2022205172072553, 0.18053282085991507, 0.15740786194093948, 0.14021233068565542, 0.08607904996834115, 0.12204287029852035, 0.47409769039205607, 0.46635009614659695, 0.45946019862253773, 0.4985926723289875, 0.48768974082947325, 0.43005562909384265, 0.4926621306287263, 0.4954672150721109, 0.4820526329214213, 0.10542924046292534, 0.10785263911858911, 0.08809037813886311, 0.11119582394424365, 0.10292295262111106, 0.13333656650785541, 0.10709508169281401, 0.12169148928931628, 0.12751378804724556, 0.2968312837573771, 0.18941792118026413, 0.2961951906816773, 0.27255714182433677, 0.20679916112491303, 0.2352676968751194, 0.25285933140754047, 0.21639055429919196, 0.3506372491005999, 0.25823004121660265, 0.2851694538292897, 0.255161762105378, 0.24784510125843473, 0.2584798676768113, 0.2576844536877675, 0.22839333194903888, 0.2396336693947556, 0.2359343034201522, 0.16572018811591382, 0.23429927282799612, 0.21217687120979312, 0.22184943572769278, 0.19525878086845683, 0.22464652845044708, 0.19764823564214384, 0.23572555983552823, 0.2038425842811915, 0.20097367831309843, 0.20531115256205024, 0.20124118431910676, 0.22364045071010774, 0.243536964255071, 0.203172769177704, 0.24752469364333052, 0.268526871324157, 0.2020906109305609, 0.1894642476638505, 0.28824645637394297, 0.1955614239659732, 0.20480383530165536, 0.193431201041386, 0.22189377138701794, 0.19835149304978583, 0.20635634139536696, 0.21915401595892126, 0.7100739469373096, 0.1859596007074953, 0.1788059164425484, 0.805456625638808, 0.19159386361014608, 0.7766333916948854, 0.18396513614814525, 0.7596987431029314, 0.7016930546201305, 0.448748483388979, 0.20771276389009208, 0.49260882447717413, 0.19938492758632953, 0.16853223523547, 0.19990846732302248, 0.2586405753932547, 0.42286769590505424, 0.2074517373011232, 0.1977668691759107, 0.21045789178333107, 0.19792000201731075, 0.2036571014875398, 0.21288439296317896, 0.1856082462627684, 0.23071428714885767, 0.20539972405368812, 0.21411296046032036, 0.09175301620023579, 0.11792647221088626, 0.10652013099580127, 0.08245429434550677, 0.1042723274273829, 0.07522812060718809, 0.09103526851056343, 0.1102286037134792, 0.09684958303517432]}, "mutation_prompt": null}
{"id": "c4123638-c5b1-4c55-9ae5-5f3469ca8948", "solution": "import numpy as np\n\nclass AcceleratedDynamicInertiaWeightEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform() * (1 - _ / self.budget) \n                inertia_weight = 0.4 + 0.4 * ((self.budget - _) / self.budget)  \n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, inertia_weight)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AcceleratedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Implementing a dynamic inertia weight strategy with adaptive mutation scale to enhance convergence speed while maintaining diversity in population.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ec76d9f-9deb-42bd-8791-fac90157c264", "metadata": {"aucs": [0.6193332273704117, 0.572144660166125, 0.5892187438391622, 0.6250231739128308, 0.5560664179412032, 0.5850644631860139, 0.6124742632455057, 0.581985528937169, 0.5565557557219774, 0.07599443666508288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00650694724072487, 0.011755442827087625, 9.999999999998899e-05, 0.038348106488712785, 9.999999999998899e-05, 0.11411011915439628, 0.10507134545053798, 0.16939108206759979, 0.13609541895037602, 0.10552671398191138, 0.10068131523702428, 0.12278585742756098, 0.11817593066887844, 0.12144625178633939, 0.09158476541313954, 0.10049505372761558, 0.09915566201602322, 0.12977792258405774, 0.09875447429874984, 0.0988988091868126, 0.11636481591223202, 0.11243564398277595, 0.08027248267451326, 0.9821387210274155, 0.9717195275448676, 0.9413654454630366, 0.9700292495661944, 0.9765597011049377, 0.9507247734441203, 0.923557070211667, 0.982064249180179, 0.9810035136279899, 0.32275362118696216, 0.3014361135751201, 0.30605525969277003, 0.31248388028644647, 0.3193902517312617, 0.34141440226414044, 0.3030980084949245, 0.25474684471750564, 0.2970406342346452, 0.32334017589163266, 0.4448853962976689, 0.21000806543474104, 0.4702218322608783, 0.263352398952702, 0.288140824904107, 0.42370808304596586, 0.6213274301635552, 0.5534838799006099, 0.31894963185247494, 0.3037266679793065, 0.311587554858905, 0.20738406587142966, 0.21763843613639955, 0.3240384631856047, 0.24832817939379126, 0.17748676481779746, 0.21102679362655918, 0.24187594796002876, 0.22562314285005813, 0.17128883848774112, 0.19850583429592417, 0.1860376335950511, 0.2797449636603566, 0.17737129204875668, 0.3128160567886292, 0.24899907263816623, 0.0017510582189769197, 0.05953749399504815, 0.0012978013969832114, 0.09781406972571716, 0.0006196851035221718, 0.03233259960813628, 0.007514674282892542, 0.05085500423347511, 0.044266321211115955, 0.15669638570742084, 0.10215006917943337, 0.17830051236313826, 0.11535831807572705, 0.16867289369094307, 0.11151917690751634, 0.221732352460411, 0.12281507386805901, 0.1646592314732339, 0.11201703090951831, 0.06859418155263741, 0.052189694379987106, 0.06280497294024967, 0.08349667177348996, 0.0490203151270685, 0.07978745911791707, 0.02262066216667591, 0.06611457380291319, 0.13578542241989666, 0.15349114788813312, 0.16791689089773554, 0.2022205172072553, 0.18053282085991507, 0.15740786194093948, 0.14021233068565542, 0.08607904996834115, 0.12204287029852035, 0.47409769039205607, 0.46635009614659695, 0.45946019862253773, 0.4985926723289875, 0.48768974082947325, 0.43005562909384265, 0.4926621306287263, 0.4954672150721109, 0.4820526329214213, 0.10542924046292534, 0.10785263911858911, 0.08809037813886311, 0.11119582394424365, 0.10292295262111106, 0.13333656650785541, 0.10709508169281401, 0.12169148928931628, 0.12751378804724556, 0.2968312837573771, 0.18941792118026413, 0.2961951906816773, 0.27255714182433677, 0.20679916112491303, 0.2352676968751194, 0.25285933140754047, 0.21639055429919196, 0.3506372491005999, 0.25823004121660265, 0.2851694538292897, 0.255161762105378, 0.24784510125843473, 0.2584798676768113, 0.2576844536877675, 0.22839333194903888, 0.2396336693947556, 0.2359343034201522, 0.16572018811591382, 0.23429927282799612, 0.21217687120979312, 0.22184943572769278, 0.19525878086845683, 0.22464652845044708, 0.19764823564214384, 0.23572555983552823, 0.2038425842811915, 0.20097367831309843, 0.20531115256205024, 0.20124118431910676, 0.22364045071010774, 0.243536964255071, 0.203172769177704, 0.24752469364333052, 0.268526871324157, 0.2020906109305609, 0.1894642476638505, 0.28824645637394297, 0.1955614239659732, 0.20480383530165536, 0.193431201041386, 0.22189377138701794, 0.19835149304978583, 0.20635634139536696, 0.21915401595892126, 0.7100739469373096, 0.1859596007074953, 0.1788059164425484, 0.805456625638808, 0.19159386361014608, 0.7766333916948854, 0.18396513614814525, 0.7596987431029314, 0.7016930546201305, 0.448748483388979, 0.20771276389009208, 0.49260882447717413, 0.19938492758632953, 0.16853223523547, 0.19990846732302248, 0.2586405753932547, 0.42286769590505424, 0.2074517373011232, 0.1977668691759107, 0.21045789178333107, 0.19792000201731075, 0.2036571014875398, 0.21288439296317896, 0.1856082462627684, 0.23071428714885767, 0.20539972405368812, 0.21411296046032036, 0.09175301620023579, 0.11792647221088626, 0.10652013099580127, 0.08245429434550677, 0.1042723274273829, 0.07522812060718809, 0.09103526851056343, 0.1102286037134792, 0.09684958303517432]}, "mutation_prompt": null}
{"id": "4cccbd7e-be0c-44df-a5fe-617d5ad66267", "solution": "import numpy as np\n\nclass AcceleratedDynamicInertiaWeightEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform() * (1 - _ / self.budget) \n                inertia_weight = 0.4 + 0.4 * ((self.budget - _) / self.budget)  \n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, inertia_weight)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AcceleratedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Implementing a dynamic inertia weight strategy with adaptive mutation scale to enhance convergence speed while maintaining diversity in population.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ec76d9f-9deb-42bd-8791-fac90157c264", "metadata": {"aucs": [0.6193332273704117, 0.572144660166125, 0.5892187438391622, 0.6250231739128308, 0.5560664179412032, 0.5850644631860139, 0.6124742632455057, 0.581985528937169, 0.5565557557219774, 0.07599443666508288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00650694724072487, 0.011755442827087625, 9.999999999998899e-05, 0.038348106488712785, 9.999999999998899e-05, 0.11411011915439628, 0.10507134545053798, 0.16939108206759979, 0.13609541895037602, 0.10552671398191138, 0.10068131523702428, 0.12278585742756098, 0.11817593066887844, 0.12144625178633939, 0.09158476541313954, 0.10049505372761558, 0.09915566201602322, 0.12977792258405774, 0.09875447429874984, 0.0988988091868126, 0.11636481591223202, 0.11243564398277595, 0.08027248267451326, 0.9821387210274155, 0.9717195275448676, 0.9413654454630366, 0.9700292495661944, 0.9765597011049377, 0.9507247734441203, 0.923557070211667, 0.982064249180179, 0.9810035136279899, 0.32275362118696216, 0.3014361135751201, 0.30605525969277003, 0.31248388028644647, 0.3193902517312617, 0.34141440226414044, 0.3030980084949245, 0.25474684471750564, 0.2970406342346452, 0.32334017589163266, 0.4448853962976689, 0.21000806543474104, 0.4702218322608783, 0.263352398952702, 0.288140824904107, 0.42370808304596586, 0.6213274301635552, 0.5534838799006099, 0.31894963185247494, 0.3037266679793065, 0.311587554858905, 0.20738406587142966, 0.21763843613639955, 0.3240384631856047, 0.24832817939379126, 0.17748676481779746, 0.21102679362655918, 0.24187594796002876, 0.22562314285005813, 0.17128883848774112, 0.19850583429592417, 0.1860376335950511, 0.2797449636603566, 0.17737129204875668, 0.3128160567886292, 0.24899907263816623, 0.0017510582189769197, 0.05953749399504815, 0.0012978013969832114, 0.09781406972571716, 0.0006196851035221718, 0.03233259960813628, 0.007514674282892542, 0.05085500423347511, 0.044266321211115955, 0.15669638570742084, 0.10215006917943337, 0.17830051236313826, 0.11535831807572705, 0.16867289369094307, 0.11151917690751634, 0.221732352460411, 0.12281507386805901, 0.1646592314732339, 0.11201703090951831, 0.06859418155263741, 0.052189694379987106, 0.06280497294024967, 0.08349667177348996, 0.0490203151270685, 0.07978745911791707, 0.02262066216667591, 0.06611457380291319, 0.13578542241989666, 0.15349114788813312, 0.16791689089773554, 0.2022205172072553, 0.18053282085991507, 0.15740786194093948, 0.14021233068565542, 0.08607904996834115, 0.12204287029852035, 0.47409769039205607, 0.46635009614659695, 0.45946019862253773, 0.4985926723289875, 0.48768974082947325, 0.43005562909384265, 0.4926621306287263, 0.4954672150721109, 0.4820526329214213, 0.10542924046292534, 0.10785263911858911, 0.08809037813886311, 0.11119582394424365, 0.10292295262111106, 0.13333656650785541, 0.10709508169281401, 0.12169148928931628, 0.12751378804724556, 0.2968312837573771, 0.18941792118026413, 0.2961951906816773, 0.27255714182433677, 0.20679916112491303, 0.2352676968751194, 0.25285933140754047, 0.21639055429919196, 0.3506372491005999, 0.25823004121660265, 0.2851694538292897, 0.255161762105378, 0.24784510125843473, 0.2584798676768113, 0.2576844536877675, 0.22839333194903888, 0.2396336693947556, 0.2359343034201522, 0.16572018811591382, 0.23429927282799612, 0.21217687120979312, 0.22184943572769278, 0.19525878086845683, 0.22464652845044708, 0.19764823564214384, 0.23572555983552823, 0.2038425842811915, 0.20097367831309843, 0.20531115256205024, 0.20124118431910676, 0.22364045071010774, 0.243536964255071, 0.203172769177704, 0.24752469364333052, 0.268526871324157, 0.2020906109305609, 0.1894642476638505, 0.28824645637394297, 0.1955614239659732, 0.20480383530165536, 0.193431201041386, 0.22189377138701794, 0.19835149304978583, 0.20635634139536696, 0.21915401595892126, 0.7100739469373096, 0.1859596007074953, 0.1788059164425484, 0.805456625638808, 0.19159386361014608, 0.7766333916948854, 0.18396513614814525, 0.7596987431029314, 0.7016930546201305, 0.448748483388979, 0.20771276389009208, 0.49260882447717413, 0.19938492758632953, 0.16853223523547, 0.19990846732302248, 0.2586405753932547, 0.42286769590505424, 0.2074517373011232, 0.1977668691759107, 0.21045789178333107, 0.19792000201731075, 0.2036571014875398, 0.21288439296317896, 0.1856082462627684, 0.23071428714885767, 0.20539972405368812, 0.21411296046032036, 0.09175301620023579, 0.11792647221088626, 0.10652013099580127, 0.08245429434550677, 0.1042723274273829, 0.07522812060718809, 0.09103526851056343, 0.1102286037134792, 0.09684958303517432]}, "mutation_prompt": null}
{"id": "d53bed6f-3efe-4d9a-8fa5-231df911de99", "solution": "import numpy as np\n\nclass ImprovedDynamicInertiaWeightEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(10, int(self.swarm_size * (1 - diversity / 15))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform() * (1 - _ / self.budget) \n                inertia_weight = 0.4 + 0.4 * ((self.budget - _) / self.budget)  \n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, inertia_weight)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "ImprovedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Improve convergence speed by introducing a novel adaptive mutation strategy based on individual performance and global best, enhancing exploration-exploitation balance with a larger swarm size adjustment.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 30, 13, '            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 30, 13, '            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\\n'))", "parent_id": "3ec76d9f-9deb-42bd-8791-fac90157c264", "metadata": {}, "mutation_prompt": null}
{"id": "a1a2e062-3a11-400d-9176-2780a120ee89", "solution": "import numpy as np\n\nclass AcceleratedDynamicInertiaWeightEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform() * (1 - _ / self.budget) \n                inertia_weight = 0.4 + 0.4 * ((self.budget - _) / self.budget)  \n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, inertia_weight)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AcceleratedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Implementing a dynamic inertia weight strategy with adaptive mutation scale to enhance convergence speed while maintaining diversity in population.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ec76d9f-9deb-42bd-8791-fac90157c264", "metadata": {"aucs": [0.6193332273704117, 0.572144660166125, 0.5892187438391622, 0.6250231739128308, 0.5560664179412032, 0.5850644631860139, 0.6124742632455057, 0.581985528937169, 0.5565557557219774, 0.07599443666508288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00650694724072487, 0.011755442827087625, 9.999999999998899e-05, 0.038348106488712785, 9.999999999998899e-05, 0.11411011915439628, 0.10507134545053798, 0.16939108206759979, 0.13609541895037602, 0.10552671398191138, 0.10068131523702428, 0.12278585742756098, 0.11817593066887844, 0.12144625178633939, 0.09158476541313954, 0.10049505372761558, 0.09915566201602322, 0.12977792258405774, 0.09875447429874984, 0.0988988091868126, 0.11636481591223202, 0.11243564398277595, 0.08027248267451326, 0.9821387210274155, 0.9717195275448676, 0.9413654454630366, 0.9700292495661944, 0.9765597011049377, 0.9507247734441203, 0.923557070211667, 0.982064249180179, 0.9810035136279899, 0.32275362118696216, 0.3014361135751201, 0.30605525969277003, 0.31248388028644647, 0.3193902517312617, 0.34141440226414044, 0.3030980084949245, 0.25474684471750564, 0.2970406342346452, 0.32334017589163266, 0.4448853962976689, 0.21000806543474104, 0.4702218322608783, 0.263352398952702, 0.288140824904107, 0.42370808304596586, 0.6213274301635552, 0.5534838799006099, 0.31894963185247494, 0.3037266679793065, 0.311587554858905, 0.20738406587142966, 0.21763843613639955, 0.3240384631856047, 0.24832817939379126, 0.17748676481779746, 0.21102679362655918, 0.24187594796002876, 0.22562314285005813, 0.17128883848774112, 0.19850583429592417, 0.1860376335950511, 0.2797449636603566, 0.17737129204875668, 0.3128160567886292, 0.24899907263816623, 0.0017510582189769197, 0.05953749399504815, 0.0012978013969832114, 0.09781406972571716, 0.0006196851035221718, 0.03233259960813628, 0.007514674282892542, 0.05085500423347511, 0.044266321211115955, 0.15669638570742084, 0.10215006917943337, 0.17830051236313826, 0.11535831807572705, 0.16867289369094307, 0.11151917690751634, 0.221732352460411, 0.12281507386805901, 0.1646592314732339, 0.11201703090951831, 0.06859418155263741, 0.052189694379987106, 0.06280497294024967, 0.08349667177348996, 0.0490203151270685, 0.07978745911791707, 0.02262066216667591, 0.06611457380291319, 0.13578542241989666, 0.15349114788813312, 0.16791689089773554, 0.2022205172072553, 0.18053282085991507, 0.15740786194093948, 0.14021233068565542, 0.08607904996834115, 0.12204287029852035, 0.47409769039205607, 0.46635009614659695, 0.45946019862253773, 0.4985926723289875, 0.48768974082947325, 0.43005562909384265, 0.4926621306287263, 0.4954672150721109, 0.4820526329214213, 0.10542924046292534, 0.10785263911858911, 0.08809037813886311, 0.11119582394424365, 0.10292295262111106, 0.13333656650785541, 0.10709508169281401, 0.12169148928931628, 0.12751378804724556, 0.2968312837573771, 0.18941792118026413, 0.2961951906816773, 0.27255714182433677, 0.20679916112491303, 0.2352676968751194, 0.25285933140754047, 0.21639055429919196, 0.3506372491005999, 0.25823004121660265, 0.2851694538292897, 0.255161762105378, 0.24784510125843473, 0.2584798676768113, 0.2576844536877675, 0.22839333194903888, 0.2396336693947556, 0.2359343034201522, 0.16572018811591382, 0.23429927282799612, 0.21217687120979312, 0.22184943572769278, 0.19525878086845683, 0.22464652845044708, 0.19764823564214384, 0.23572555983552823, 0.2038425842811915, 0.20097367831309843, 0.20531115256205024, 0.20124118431910676, 0.22364045071010774, 0.243536964255071, 0.203172769177704, 0.24752469364333052, 0.268526871324157, 0.2020906109305609, 0.1894642476638505, 0.28824645637394297, 0.1955614239659732, 0.20480383530165536, 0.193431201041386, 0.22189377138701794, 0.19835149304978583, 0.20635634139536696, 0.21915401595892126, 0.7100739469373096, 0.1859596007074953, 0.1788059164425484, 0.805456625638808, 0.19159386361014608, 0.7766333916948854, 0.18396513614814525, 0.7596987431029314, 0.7016930546201305, 0.448748483388979, 0.20771276389009208, 0.49260882447717413, 0.19938492758632953, 0.16853223523547, 0.19990846732302248, 0.2586405753932547, 0.42286769590505424, 0.2074517373011232, 0.1977668691759107, 0.21045789178333107, 0.19792000201731075, 0.2036571014875398, 0.21288439296317896, 0.1856082462627684, 0.23071428714885767, 0.20539972405368812, 0.21411296046032036, 0.09175301620023579, 0.11792647221088626, 0.10652013099580127, 0.08245429434550677, 0.1042723274273829, 0.07522812060718809, 0.09103526851056343, 0.1102286037134792, 0.09684958303517432]}, "mutation_prompt": null}
{"id": "9fef8254-95fb-42f0-833c-38e1d8341984", "solution": "import numpy as np\n\nclass AcceleratedDynamicInertiaWeightEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform() * (1 - _ / self.budget) \n                inertia_weight = 0.4 + 0.4 * ((self.budget - _) / self.budget)  \n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, inertia_weight)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AcceleratedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Implementing a dynamic inertia weight strategy with adaptive mutation scale to enhance convergence speed while maintaining diversity in population.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ec76d9f-9deb-42bd-8791-fac90157c264", "metadata": {"aucs": [0.6193332273704117, 0.572144660166125, 0.5892187438391622, 0.6250231739128308, 0.5560664179412032, 0.5850644631860139, 0.6124742632455057, 0.581985528937169, 0.5565557557219774, 0.07599443666508288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00650694724072487, 0.011755442827087625, 9.999999999998899e-05, 0.038348106488712785, 9.999999999998899e-05, 0.11411011915439628, 0.10507134545053798, 0.16939108206759979, 0.13609541895037602, 0.10552671398191138, 0.10068131523702428, 0.12278585742756098, 0.11817593066887844, 0.12144625178633939, 0.09158476541313954, 0.10049505372761558, 0.09915566201602322, 0.12977792258405774, 0.09875447429874984, 0.0988988091868126, 0.11636481591223202, 0.11243564398277595, 0.08027248267451326, 0.9821387210274155, 0.9717195275448676, 0.9413654454630366, 0.9700292495661944, 0.9765597011049377, 0.9507247734441203, 0.923557070211667, 0.982064249180179, 0.9810035136279899, 0.32275362118696216, 0.3014361135751201, 0.30605525969277003, 0.31248388028644647, 0.3193902517312617, 0.34141440226414044, 0.3030980084949245, 0.25474684471750564, 0.2970406342346452, 0.32334017589163266, 0.4448853962976689, 0.21000806543474104, 0.4702218322608783, 0.263352398952702, 0.288140824904107, 0.42370808304596586, 0.6213274301635552, 0.5534838799006099, 0.31894963185247494, 0.3037266679793065, 0.311587554858905, 0.20738406587142966, 0.21763843613639955, 0.3240384631856047, 0.24832817939379126, 0.17748676481779746, 0.21102679362655918, 0.24187594796002876, 0.22562314285005813, 0.17128883848774112, 0.19850583429592417, 0.1860376335950511, 0.2797449636603566, 0.17737129204875668, 0.3128160567886292, 0.24899907263816623, 0.0017510582189769197, 0.05953749399504815, 0.0012978013969832114, 0.09781406972571716, 0.0006196851035221718, 0.03233259960813628, 0.007514674282892542, 0.05085500423347511, 0.044266321211115955, 0.15669638570742084, 0.10215006917943337, 0.17830051236313826, 0.11535831807572705, 0.16867289369094307, 0.11151917690751634, 0.221732352460411, 0.12281507386805901, 0.1646592314732339, 0.11201703090951831, 0.06859418155263741, 0.052189694379987106, 0.06280497294024967, 0.08349667177348996, 0.0490203151270685, 0.07978745911791707, 0.02262066216667591, 0.06611457380291319, 0.13578542241989666, 0.15349114788813312, 0.16791689089773554, 0.2022205172072553, 0.18053282085991507, 0.15740786194093948, 0.14021233068565542, 0.08607904996834115, 0.12204287029852035, 0.47409769039205607, 0.46635009614659695, 0.45946019862253773, 0.4985926723289875, 0.48768974082947325, 0.43005562909384265, 0.4926621306287263, 0.4954672150721109, 0.4820526329214213, 0.10542924046292534, 0.10785263911858911, 0.08809037813886311, 0.11119582394424365, 0.10292295262111106, 0.13333656650785541, 0.10709508169281401, 0.12169148928931628, 0.12751378804724556, 0.2968312837573771, 0.18941792118026413, 0.2961951906816773, 0.27255714182433677, 0.20679916112491303, 0.2352676968751194, 0.25285933140754047, 0.21639055429919196, 0.3506372491005999, 0.25823004121660265, 0.2851694538292897, 0.255161762105378, 0.24784510125843473, 0.2584798676768113, 0.2576844536877675, 0.22839333194903888, 0.2396336693947556, 0.2359343034201522, 0.16572018811591382, 0.23429927282799612, 0.21217687120979312, 0.22184943572769278, 0.19525878086845683, 0.22464652845044708, 0.19764823564214384, 0.23572555983552823, 0.2038425842811915, 0.20097367831309843, 0.20531115256205024, 0.20124118431910676, 0.22364045071010774, 0.243536964255071, 0.203172769177704, 0.24752469364333052, 0.268526871324157, 0.2020906109305609, 0.1894642476638505, 0.28824645637394297, 0.1955614239659732, 0.20480383530165536, 0.193431201041386, 0.22189377138701794, 0.19835149304978583, 0.20635634139536696, 0.21915401595892126, 0.7100739469373096, 0.1859596007074953, 0.1788059164425484, 0.805456625638808, 0.19159386361014608, 0.7766333916948854, 0.18396513614814525, 0.7596987431029314, 0.7016930546201305, 0.448748483388979, 0.20771276389009208, 0.49260882447717413, 0.19938492758632953, 0.16853223523547, 0.19990846732302248, 0.2586405753932547, 0.42286769590505424, 0.2074517373011232, 0.1977668691759107, 0.21045789178333107, 0.19792000201731075, 0.2036571014875398, 0.21288439296317896, 0.1856082462627684, 0.23071428714885767, 0.20539972405368812, 0.21411296046032036, 0.09175301620023579, 0.11792647221088626, 0.10652013099580127, 0.08245429434550677, 0.1042723274273829, 0.07522812060718809, 0.09103526851056343, 0.1102286037134792, 0.09684958303517432]}, "mutation_prompt": null}
{"id": "f7e865d1-a60f-4ec9-aa64-940c62c6cf55", "solution": "import numpy as np\n\nclass EnhancedDynamicInertiaWeightEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform() * (1 - _ / self.budget) \n                inertia_weight = 0.4 + 0.4 * ((self.budget - _) / self.budget)  \n                local_fitness_landscape = np.max([func(swarm[j]) for j in range(self.swarm_size) if j != i])\n                step_size = 0.1 + 0.4 * np.exp(-2 * local_fitness_landscape)  \n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, step_size)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "EnhancedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Introducing a dynamic learning rate adaptation mechanism based on the local fitness landscape for enhanced convergence speed while maintaining diversity in population.", "configspace": "", "generation": 98, "fitness": 0.16095387888125334, "feedback": "The algorithm EnhancedDynamicInertiaWeightEnhancedSocialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.13.", "error": "", "parent_id": "3ec76d9f-9deb-42bd-8791-fac90157c264", "metadata": {"aucs": [0.5641650574777688, 0.47660820427981, 0.630348387564205, 0.4639841749846738, 0.40047644425405393, 0.46427552678210293, 0.12332380594872461, 0.12249166167147774, 0.09034544261111055, 0.00010476031115214113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06142945574855729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020580367857694903, 0.04314526548327846, 0.04447066861482596, 0.11229115121992839, 0.061171469949885426, 0.08516423336061929, 0.0656891668662618, 0.06282897654328878, 0.1481790490241287, 0.056006763484693134, 0.0579615302903429, 0.046434320020116715, 0.08797965471744029, 0.06951875873665814, 0.05553354661457466, 0.04086092898832827, 0.08378112414168504, 0.04207348083135187, 0.4893807054154561, 0.3117905474059369, 0.4242821625630617, 0.45929838703880377, 0.30950743458637053, 0.40999465552532766, 0.6528682927950762, 0.3118570690802738, 0.7317364286923137, 0.21808076630074769, 0.12868644060689127, 0.12068252007861335, 0.3176809549422863, 0.15199415973445607, 0.1943502781437575, 0.1843054542631648, 0.09674677048711311, 0.1960752940557159, 0.20886254528379034, 0.149281055031648, 0.15884060899207286, 0.17480211463744677, 0.12571693703761755, 0.04248030947758197, 0.0834397294541821, 0.12356689202148918, 0.06923765114769287, 0.23928878850836477, 0.13800658173239988, 0.14290487566216525, 0.2760237858111474, 0.2025617057740906, 0.1663278287605423, 0.2428765957639012, 0.09883928075038839, 0.19344337511220056, 0.19215303654959548, 0.1380378931526064, 0.1510545119685226, 0.12713543588304166, 0.17219981385053307, 0.12566494534662853, 0.13370319004088305, 0.22019197040647664, 0.12798267671897212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013185491103802072, 0.018385625051882903, 9.999999999998899e-05, 9.999999999998899e-05, 0.02925403307969321, 0.16191375275978803, 0.09739740254148932, 0.1440719927116485, 0.0928639842066532, 0.09728063981276336, 0.0990568009886943, 0.202602268972924, 0.15707865083155026, 0.13023780210470937, 0.05336725398045905, 0.08512859149086593, 0.08253884674257894, 0.05204173018930758, 0.07556433098360194, 0.04008805467164689, 0.07661012056273342, 0.06751943786385817, 0.05095065474890359, 0.09195500151005886, 0.12427253569443497, 0.10915606696627567, 0.08014584031256422, 0.14482671895296284, 0.07192938515565672, 0.06913563837872039, 0.046714817372223494, 0.06254927015230038, 0.37111982813286815, 0.3108150846915484, 0.41845296810279575, 0.29659641721695684, 0.3435665534263045, 0.27370056542843635, 0.3646515232180908, 0.40792601915121784, 0.42294933091627696, 0.0372916936710983, 0.01574496153280691, 0.052438394820924494, 0.08999285540079072, 0.060376877437607446, 0.10562610643192916, 0.1008365494882626, 0.06713415539454204, 0.10931701430976681, 0.21323741471693858, 0.18115201778174828, 0.14348479730437724, 0.09931492449650214, 0.11754765866873496, 0.07754970716452303, 0.17602927371857335, 0.12227944964899395, 0.12809619428874053, 0.1839494072317771, 0.16736762559742968, 0.1723662378971077, 0.18448176053963827, 0.23138312248023463, 0.1772031227030315, 0.1468797969840161, 0.18769646081255176, 0.1801953234086674, 0.09187615405258753, 0.12378347353246077, 0.10366145284307116, 0.12840260059583508, 0.16534526432007735, 0.14156574926189114, 0.1363851836943908, 0.12064986306768044, 0.16660858123655575, 0.20543989499448312, 0.16878882999885336, 0.183645520116281, 0.23740010410003065, 0.2412136914538392, 0.23469620012665904, 0.2507566415402521, 0.22992163014414801, 0.2020761783204802, 0.1727959173986523, 0.21099741387233062, 0.1730845200006672, 0.17454803481279757, 0.1985494701414776, 0.17652394218163203, 0.15919625521536274, 0.16920574070505046, 0.1976983192109908, 0.1533854389258562, 0.1670246725593919, 0.1705898930560068, 0.7417518420999863, 0.19467735974151368, 0.1959021384826125, 0.11257583272397076, 0.1034823053588958, 0.09786972724264509, 0.2032844650867759, 0.1580023516740654, 0.19727754932481212, 0.18483536594980887, 0.15090909748495618, 0.1576731730172849, 0.10328535265779226, 0.24232472645946546, 0.22200460606862438, 0.20698343677611464, 0.24617387950818392, 0.20377677261602756, 0.2254632496049871, 0.21762108778605072, 0.22355689942233936, 0.15020907514724235, 0.1250577176711768, 0.14689007985489466, 0.08476426976588425, 0.12080919727757222, 0.08859209387619416, 0.0801322673927789, 0.09332511720893255, 0.10682870393720001, 0.06254644990135672, 0.08228977689245787, 0.09630546977767207]}, "mutation_prompt": null}
{"id": "50a15123-19f5-4923-bf17-09d13e57d9b8", "solution": "import numpy as np\n\nclass AcceleratedDynamicInertiaWeightEnhancedSocialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n\n    def __call__(self, func):\n        def _initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def _local_search(x, f, step_size):\n            for _ in range(40):  \n                x_new = x + step_size * np.random.normal(size=self.dim)\n                if f(x_new) < f(x):\n                    x = x_new\n                    step_size *= 1.15  \n                else:\n                    step_size *= 0.85  \n            return x\n\n        swarm = _initialize_swarm()\n        best_position = swarm[np.argmin([func(x) for x in swarm])]\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            new_swarm_size = max(5, int(self.swarm_size * (1 - diversity / 10.0)))  \n            selected_indices = np.random.choice(range(self.swarm_size), new_swarm_size, replace=False)\n            swarm = swarm[selected_indices]\n            self.swarm_size = new_swarm_size\n            for i in range(self.swarm_size):\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1)\n                mutation_scale = 0.1 + 0.9 * np.random.uniform() * (1 - _ / self.budget) \n                inertia_weight = 0.4 + 0.4 * ((self.budget - _) / self.budget)  \n                swarm[i] = best_position + mutation_scale * (swarm[i] - best_position)  \n                swarm[i] = _local_search(swarm[i], func, inertia_weight)\n                best_position = swarm[i] if func(swarm[i]) < func(best_position) else best_position\n        return best_position", "name": "AcceleratedDynamicInertiaWeightEnhancedSocialSwarmOptimization", "description": "Implementing a dynamic inertia weight strategy with adaptive mutation scale to enhance convergence speed while maintaining diversity in population.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ec76d9f-9deb-42bd-8791-fac90157c264", "metadata": {"aucs": [0.6193332273704117, 0.572144660166125, 0.5892187438391622, 0.6250231739128308, 0.5560664179412032, 0.5850644631860139, 0.6124742632455057, 0.581985528937169, 0.5565557557219774, 0.07599443666508288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00650694724072487, 0.011755442827087625, 9.999999999998899e-05, 0.038348106488712785, 9.999999999998899e-05, 0.11411011915439628, 0.10507134545053798, 0.16939108206759979, 0.13609541895037602, 0.10552671398191138, 0.10068131523702428, 0.12278585742756098, 0.11817593066887844, 0.12144625178633939, 0.09158476541313954, 0.10049505372761558, 0.09915566201602322, 0.12977792258405774, 0.09875447429874984, 0.0988988091868126, 0.11636481591223202, 0.11243564398277595, 0.08027248267451326, 0.9821387210274155, 0.9717195275448676, 0.9413654454630366, 0.9700292495661944, 0.9765597011049377, 0.9507247734441203, 0.923557070211667, 0.982064249180179, 0.9810035136279899, 0.32275362118696216, 0.3014361135751201, 0.30605525969277003, 0.31248388028644647, 0.3193902517312617, 0.34141440226414044, 0.3030980084949245, 0.25474684471750564, 0.2970406342346452, 0.32334017589163266, 0.4448853962976689, 0.21000806543474104, 0.4702218322608783, 0.263352398952702, 0.288140824904107, 0.42370808304596586, 0.6213274301635552, 0.5534838799006099, 0.31894963185247494, 0.3037266679793065, 0.311587554858905, 0.20738406587142966, 0.21763843613639955, 0.3240384631856047, 0.24832817939379126, 0.17748676481779746, 0.21102679362655918, 0.24187594796002876, 0.22562314285005813, 0.17128883848774112, 0.19850583429592417, 0.1860376335950511, 0.2797449636603566, 0.17737129204875668, 0.3128160567886292, 0.24899907263816623, 0.0017510582189769197, 0.05953749399504815, 0.0012978013969832114, 0.09781406972571716, 0.0006196851035221718, 0.03233259960813628, 0.007514674282892542, 0.05085500423347511, 0.044266321211115955, 0.15669638570742084, 0.10215006917943337, 0.17830051236313826, 0.11535831807572705, 0.16867289369094307, 0.11151917690751634, 0.221732352460411, 0.12281507386805901, 0.1646592314732339, 0.11201703090951831, 0.06859418155263741, 0.052189694379987106, 0.06280497294024967, 0.08349667177348996, 0.0490203151270685, 0.07978745911791707, 0.02262066216667591, 0.06611457380291319, 0.13578542241989666, 0.15349114788813312, 0.16791689089773554, 0.2022205172072553, 0.18053282085991507, 0.15740786194093948, 0.14021233068565542, 0.08607904996834115, 0.12204287029852035, 0.47409769039205607, 0.46635009614659695, 0.45946019862253773, 0.4985926723289875, 0.48768974082947325, 0.43005562909384265, 0.4926621306287263, 0.4954672150721109, 0.4820526329214213, 0.10542924046292534, 0.10785263911858911, 0.08809037813886311, 0.11119582394424365, 0.10292295262111106, 0.13333656650785541, 0.10709508169281401, 0.12169148928931628, 0.12751378804724556, 0.2968312837573771, 0.18941792118026413, 0.2961951906816773, 0.27255714182433677, 0.20679916112491303, 0.2352676968751194, 0.25285933140754047, 0.21639055429919196, 0.3506372491005999, 0.25823004121660265, 0.2851694538292897, 0.255161762105378, 0.24784510125843473, 0.2584798676768113, 0.2576844536877675, 0.22839333194903888, 0.2396336693947556, 0.2359343034201522, 0.16572018811591382, 0.23429927282799612, 0.21217687120979312, 0.22184943572769278, 0.19525878086845683, 0.22464652845044708, 0.19764823564214384, 0.23572555983552823, 0.2038425842811915, 0.20097367831309843, 0.20531115256205024, 0.20124118431910676, 0.22364045071010774, 0.243536964255071, 0.203172769177704, 0.24752469364333052, 0.268526871324157, 0.2020906109305609, 0.1894642476638505, 0.28824645637394297, 0.1955614239659732, 0.20480383530165536, 0.193431201041386, 0.22189377138701794, 0.19835149304978583, 0.20635634139536696, 0.21915401595892126, 0.7100739469373096, 0.1859596007074953, 0.1788059164425484, 0.805456625638808, 0.19159386361014608, 0.7766333916948854, 0.18396513614814525, 0.7596987431029314, 0.7016930546201305, 0.448748483388979, 0.20771276389009208, 0.49260882447717413, 0.19938492758632953, 0.16853223523547, 0.19990846732302248, 0.2586405753932547, 0.42286769590505424, 0.2074517373011232, 0.1977668691759107, 0.21045789178333107, 0.19792000201731075, 0.2036571014875398, 0.21288439296317896, 0.1856082462627684, 0.23071428714885767, 0.20539972405368812, 0.21411296046032036, 0.09175301620023579, 0.11792647221088626, 0.10652013099580127, 0.08245429434550677, 0.1042723274273829, 0.07522812060718809, 0.09103526851056343, 0.1102286037134792, 0.09684958303517432]}, "mutation_prompt": null}
