{"id": "5d9bca5a-4775-48d7-995e-11838bd84d14", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "73ed93aa-c3f5-4c1d-a99c-e6ae52b99bf1", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Update mutation rate based on function evaluations\n            self.mutation_rate = min(1.0, 1.0 - 0.1 * (_ / self.budget))\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing dynamic mutation strategy based on function evaluations to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.1803805618498757, "feedback": "The algorithm DynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "5d9bca5a-4775-48d7-995e-11838bd84d14", "metadata": {"aucs": [0.31769023246645733, 0.3464290129008547, 0.3446592576070938, 0.3497663466921652, 0.32967769946849224, 0.33465082383660416, 0.31279606114391456, 0.3274350685495424, 0.3373873975912043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020727136116843736, 9.999999999998899e-05, 9.999999999998899e-05, 0.08749586254446184, 0.10637273205604247, 0.10045562838061528, 0.10480809580842765, 0.10923724392094192, 0.08002265083601201, 0.07274103502736706, 0.10631386161728329, 0.07749349994347265, 0.09280396841046024, 0.09131049653133272, 0.10050826340001096, 0.09177784023876445, 0.07996449405305961, 0.08716090644805607, 0.059391571700720625, 0.08665069728751784, 0.09325615850292956, 0.9883281271995111, 0.9829729805847757, 0.9769303192161697, 0.9816342536049192, 0.959595335065097, 0.9696120962008693, 0.9841064412658739, 0.9831123525790849, 0.9846554682494557, 0.21492202187921272, 0.21688422165567167, 0.1989734701938276, 0.19229381763001852, 0.22933765296287212, 0.2242536746674989, 0.233776744363697, 0.20452154694679026, 0.24736832975059742, 0.27246079145683066, 0.25136768500328366, 0.2475909394582415, 0.2636935883164928, 0.2660369089370631, 0.2537608959130645, 0.28045814312482376, 0.2408143302330591, 0.32377064203656136, 0.12594767065696488, 0.1266486767298578, 0.12705015771893668, 0.12050963603772147, 0.1536740396255747, 0.08818395946108681, 0.11376506325802183, 0.1366735006713259, 0.1425573977576019, 0.15176600677905538, 0.12215442146155875, 0.10037423825910141, 0.11687479808637768, 0.1259921450915854, 0.11607462340055685, 0.12446645643088305, 0.15126247457105146, 0.11587592505027244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037063421791186935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007187701593996954, 0.08096526901553114, 0.1523043631261327, 0.15545018016225098, 0.08367456774790083, 0.04337357714748413, 0.0354707770323337, 0.11024497711033054, 0.04462708355530598, 0.0724024938220833, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04847537426996318, 0.06600925686829429, 0.04716425657260859, 0.04298672293760519, 0.04832847041482369, 0.04553996686686301, 0.06400557296378406, 0.051727235822521145, 0.058791895387558024, 0.3094125751194057, 0.3070616307289097, 0.30965949364090517, 0.3493957461038584, 0.32929009484860805, 0.33165315352405, 0.31915948381704695, 0.31483129459903725, 0.30781016709148756, 0.09220516992546435, 0.06962541336226569, 0.08947203004550264, 0.09694533744475542, 0.10693597849547753, 0.10671454419604998, 0.09562021384714825, 0.09376600443365313, 0.08075611699228757, 0.17115591811005437, 0.1469429799590969, 0.16094833320210855, 0.1812921729161009, 0.22369168343069212, 0.1344311609635792, 0.13076464252163844, 0.15500069716580567, 0.16700076571830158, 0.2333209607025697, 0.17404820446598046, 0.2019510508642074, 0.23015709313221355, 0.24655009192716415, 0.2241253859650325, 0.2218780587728323, 0.1873704296428187, 0.2338199111448439, 0.20161608477806048, 0.11745678703392137, 0.16051016051926958, 0.20173431423977417, 0.19795731647571224, 0.10993091310861436, 0.17769814875776924, 0.14745550340096092, 0.09520277001271316, 0.22698673314376439, 0.23941133006249293, 0.2321159011836348, 0.1950792424387794, 0.22288306420395332, 0.19547718007361103, 0.22085563294960386, 0.21616635864118738, 0.21334847747040075, 0.18069557091425703, 0.19661710209002647, 0.17251948383271465, 0.19479076414165086, 0.17704180891711108, 0.18708065486515135, 0.18860244963199324, 0.18200307811915895, 0.18431227570511222, 0.1808523375183061, 0.13376480247606592, 0.10437399922291402, 0.17222458351225123, 0.11155333212869611, 0.061356262892722, 0.10845651711292992, 0.12314205738666406, 0.16839232016647399, 0.40738992508614225, 0.11236476862839062, 0.08295126348329052, 0.08207388830276818, 0.21107759857721353, 0.20775640449820043, 0.11221728220541882, 0.16931108907944803, 0.3430678939925653, 0.1886389487818858, 0.19142772378184847, 0.19576877080866595, 0.18629538739845886, 0.20965122764127286, 0.182153678754985, 0.18507444721307886, 0.1877180213629005, 0.18446942831110125, 0.11545961705622487, 0.1022117658311883, 0.08939161380384686, 0.09980174454217561, 0.07824896920681734, 0.10039152551882324, 0.10297197237959133, 0.08327966916057228, 0.09482668293662067]}, "mutation_prompt": null}
{"id": "c0225f7c-a8dd-4aec-bf72-329f3318e6dc", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Update mutation rate based on function evaluations\n            self.mutation_rate = min(1.0, 1.0 - 0.1 * (_ / self.budget))\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing dynamic mutation strategy based on function evaluations to balance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "73ed93aa-c3f5-4c1d-a99c-e6ae52b99bf1", "metadata": {"aucs": [0.31769023246645733, 0.3464290129008547, 0.3446592576070938, 0.3497663466921652, 0.32967769946849224, 0.33465082383660416, 0.31279606114391456, 0.3274350685495424, 0.3373873975912043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020727136116843736, 9.999999999998899e-05, 9.999999999998899e-05, 0.08749586254446184, 0.10637273205604247, 0.10045562838061528, 0.10480809580842765, 0.10923724392094192, 0.08002265083601201, 0.07274103502736706, 0.10631386161728329, 0.07749349994347265, 0.09280396841046024, 0.09131049653133272, 0.10050826340001096, 0.09177784023876445, 0.07996449405305961, 0.08716090644805607, 0.059391571700720625, 0.08665069728751784, 0.09325615850292956, 0.9883281271995111, 0.9829729805847757, 0.9769303192161697, 0.9816342536049192, 0.959595335065097, 0.9696120962008693, 0.9841064412658739, 0.9831123525790849, 0.9846554682494557, 0.21492202187921272, 0.21688422165567167, 0.1989734701938276, 0.19229381763001852, 0.22933765296287212, 0.2242536746674989, 0.233776744363697, 0.20452154694679026, 0.24736832975059742, 0.27246079145683066, 0.25136768500328366, 0.2475909394582415, 0.2636935883164928, 0.2660369089370631, 0.2537608959130645, 0.28045814312482376, 0.2408143302330591, 0.32377064203656136, 0.12594767065696488, 0.1266486767298578, 0.12705015771893668, 0.12050963603772147, 0.1536740396255747, 0.08818395946108681, 0.11376506325802183, 0.1366735006713259, 0.1425573977576019, 0.15176600677905538, 0.12215442146155875, 0.10037423825910141, 0.11687479808637768, 0.1259921450915854, 0.11607462340055685, 0.12446645643088305, 0.15126247457105146, 0.11587592505027244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037063421791186935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007187701593996954, 0.08096526901553114, 0.1523043631261327, 0.15545018016225098, 0.08367456774790083, 0.04337357714748413, 0.0354707770323337, 0.11024497711033054, 0.04462708355530598, 0.0724024938220833, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04847537426996318, 0.06600925686829429, 0.04716425657260859, 0.04298672293760519, 0.04832847041482369, 0.04553996686686301, 0.06400557296378406, 0.051727235822521145, 0.058791895387558024, 0.3094125751194057, 0.3070616307289097, 0.30965949364090517, 0.3493957461038584, 0.32929009484860805, 0.33165315352405, 0.31915948381704695, 0.31483129459903725, 0.30781016709148756, 0.09220516992546435, 0.06962541336226569, 0.08947203004550264, 0.09694533744475542, 0.10693597849547753, 0.10671454419604998, 0.09562021384714825, 0.09376600443365313, 0.08075611699228757, 0.17115591811005437, 0.1469429799590969, 0.16094833320210855, 0.1812921729161009, 0.22369168343069212, 0.1344311609635792, 0.13076464252163844, 0.15500069716580567, 0.16700076571830158, 0.2333209607025697, 0.17404820446598046, 0.2019510508642074, 0.23015709313221355, 0.24655009192716415, 0.2241253859650325, 0.2218780587728323, 0.1873704296428187, 0.2338199111448439, 0.20161608477806048, 0.11745678703392137, 0.16051016051926958, 0.20173431423977417, 0.19795731647571224, 0.10993091310861436, 0.17769814875776924, 0.14745550340096092, 0.09520277001271316, 0.22698673314376439, 0.23941133006249293, 0.2321159011836348, 0.1950792424387794, 0.22288306420395332, 0.19547718007361103, 0.22085563294960386, 0.21616635864118738, 0.21334847747040075, 0.18069557091425703, 0.19661710209002647, 0.17251948383271465, 0.19479076414165086, 0.17704180891711108, 0.18708065486515135, 0.18860244963199324, 0.18200307811915895, 0.18431227570511222, 0.1808523375183061, 0.13376480247606592, 0.10437399922291402, 0.17222458351225123, 0.11155333212869611, 0.061356262892722, 0.10845651711292992, 0.12314205738666406, 0.16839232016647399, 0.40738992508614225, 0.11236476862839062, 0.08295126348329052, 0.08207388830276818, 0.21107759857721353, 0.20775640449820043, 0.11221728220541882, 0.16931108907944803, 0.3430678939925653, 0.1886389487818858, 0.19142772378184847, 0.19576877080866595, 0.18629538739845886, 0.20965122764127286, 0.182153678754985, 0.18507444721307886, 0.1877180213629005, 0.18446942831110125, 0.11545961705622487, 0.1022117658311883, 0.08939161380384686, 0.09980174454217561, 0.07824896920681734, 0.10039152551882324, 0.10297197237959133, 0.08327966916057228, 0.09482668293662067]}, "mutation_prompt": null}
{"id": "f520b729-949a-4e32-80d2-169e4261a480", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Update mutation rate based on function evaluations\n            self.mutation_rate = min(1.0, 1.0 - 0.1 * (_ / self.budget))\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing dynamic mutation strategy based on function evaluations to balance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "73ed93aa-c3f5-4c1d-a99c-e6ae52b99bf1", "metadata": {"aucs": [0.31769023246645733, 0.3464290129008547, 0.3446592576070938, 0.3497663466921652, 0.32967769946849224, 0.33465082383660416, 0.31279606114391456, 0.3274350685495424, 0.3373873975912043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020727136116843736, 9.999999999998899e-05, 9.999999999998899e-05, 0.08749586254446184, 0.10637273205604247, 0.10045562838061528, 0.10480809580842765, 0.10923724392094192, 0.08002265083601201, 0.07274103502736706, 0.10631386161728329, 0.07749349994347265, 0.09280396841046024, 0.09131049653133272, 0.10050826340001096, 0.09177784023876445, 0.07996449405305961, 0.08716090644805607, 0.059391571700720625, 0.08665069728751784, 0.09325615850292956, 0.9883281271995111, 0.9829729805847757, 0.9769303192161697, 0.9816342536049192, 0.959595335065097, 0.9696120962008693, 0.9841064412658739, 0.9831123525790849, 0.9846554682494557, 0.21492202187921272, 0.21688422165567167, 0.1989734701938276, 0.19229381763001852, 0.22933765296287212, 0.2242536746674989, 0.233776744363697, 0.20452154694679026, 0.24736832975059742, 0.27246079145683066, 0.25136768500328366, 0.2475909394582415, 0.2636935883164928, 0.2660369089370631, 0.2537608959130645, 0.28045814312482376, 0.2408143302330591, 0.32377064203656136, 0.12594767065696488, 0.1266486767298578, 0.12705015771893668, 0.12050963603772147, 0.1536740396255747, 0.08818395946108681, 0.11376506325802183, 0.1366735006713259, 0.1425573977576019, 0.15176600677905538, 0.12215442146155875, 0.10037423825910141, 0.11687479808637768, 0.1259921450915854, 0.11607462340055685, 0.12446645643088305, 0.15126247457105146, 0.11587592505027244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037063421791186935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007187701593996954, 0.08096526901553114, 0.1523043631261327, 0.15545018016225098, 0.08367456774790083, 0.04337357714748413, 0.0354707770323337, 0.11024497711033054, 0.04462708355530598, 0.0724024938220833, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04847537426996318, 0.06600925686829429, 0.04716425657260859, 0.04298672293760519, 0.04832847041482369, 0.04553996686686301, 0.06400557296378406, 0.051727235822521145, 0.058791895387558024, 0.3094125751194057, 0.3070616307289097, 0.30965949364090517, 0.3493957461038584, 0.32929009484860805, 0.33165315352405, 0.31915948381704695, 0.31483129459903725, 0.30781016709148756, 0.09220516992546435, 0.06962541336226569, 0.08947203004550264, 0.09694533744475542, 0.10693597849547753, 0.10671454419604998, 0.09562021384714825, 0.09376600443365313, 0.08075611699228757, 0.17115591811005437, 0.1469429799590969, 0.16094833320210855, 0.1812921729161009, 0.22369168343069212, 0.1344311609635792, 0.13076464252163844, 0.15500069716580567, 0.16700076571830158, 0.2333209607025697, 0.17404820446598046, 0.2019510508642074, 0.23015709313221355, 0.24655009192716415, 0.2241253859650325, 0.2218780587728323, 0.1873704296428187, 0.2338199111448439, 0.20161608477806048, 0.11745678703392137, 0.16051016051926958, 0.20173431423977417, 0.19795731647571224, 0.10993091310861436, 0.17769814875776924, 0.14745550340096092, 0.09520277001271316, 0.22698673314376439, 0.23941133006249293, 0.2321159011836348, 0.1950792424387794, 0.22288306420395332, 0.19547718007361103, 0.22085563294960386, 0.21616635864118738, 0.21334847747040075, 0.18069557091425703, 0.19661710209002647, 0.17251948383271465, 0.19479076414165086, 0.17704180891711108, 0.18708065486515135, 0.18860244963199324, 0.18200307811915895, 0.18431227570511222, 0.1808523375183061, 0.13376480247606592, 0.10437399922291402, 0.17222458351225123, 0.11155333212869611, 0.061356262892722, 0.10845651711292992, 0.12314205738666406, 0.16839232016647399, 0.40738992508614225, 0.11236476862839062, 0.08295126348329052, 0.08207388830276818, 0.21107759857721353, 0.20775640449820043, 0.11221728220541882, 0.16931108907944803, 0.3430678939925653, 0.1886389487818858, 0.19142772378184847, 0.19576877080866595, 0.18629538739845886, 0.20965122764127286, 0.182153678754985, 0.18507444721307886, 0.1877180213629005, 0.18446942831110125, 0.11545961705622487, 0.1022117658311883, 0.08939161380384686, 0.09980174454217561, 0.07824896920681734, 0.10039152551882324, 0.10297197237959133, 0.08327966916057228, 0.09482668293662067]}, "mutation_prompt": null}
{"id": "ac7f4139-5421-43f9-8412-e046aea08b51", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Update mutation rate based on function evaluations\n            self.mutation_rate = min(1.0, 1.0 - 0.1 * (_ / self.budget))\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing dynamic mutation strategy based on function evaluations to balance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "73ed93aa-c3f5-4c1d-a99c-e6ae52b99bf1", "metadata": {"aucs": [0.31769023246645733, 0.3464290129008547, 0.3446592576070938, 0.3497663466921652, 0.32967769946849224, 0.33465082383660416, 0.31279606114391456, 0.3274350685495424, 0.3373873975912043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020727136116843736, 9.999999999998899e-05, 9.999999999998899e-05, 0.08749586254446184, 0.10637273205604247, 0.10045562838061528, 0.10480809580842765, 0.10923724392094192, 0.08002265083601201, 0.07274103502736706, 0.10631386161728329, 0.07749349994347265, 0.09280396841046024, 0.09131049653133272, 0.10050826340001096, 0.09177784023876445, 0.07996449405305961, 0.08716090644805607, 0.059391571700720625, 0.08665069728751784, 0.09325615850292956, 0.9883281271995111, 0.9829729805847757, 0.9769303192161697, 0.9816342536049192, 0.959595335065097, 0.9696120962008693, 0.9841064412658739, 0.9831123525790849, 0.9846554682494557, 0.21492202187921272, 0.21688422165567167, 0.1989734701938276, 0.19229381763001852, 0.22933765296287212, 0.2242536746674989, 0.233776744363697, 0.20452154694679026, 0.24736832975059742, 0.27246079145683066, 0.25136768500328366, 0.2475909394582415, 0.2636935883164928, 0.2660369089370631, 0.2537608959130645, 0.28045814312482376, 0.2408143302330591, 0.32377064203656136, 0.12594767065696488, 0.1266486767298578, 0.12705015771893668, 0.12050963603772147, 0.1536740396255747, 0.08818395946108681, 0.11376506325802183, 0.1366735006713259, 0.1425573977576019, 0.15176600677905538, 0.12215442146155875, 0.10037423825910141, 0.11687479808637768, 0.1259921450915854, 0.11607462340055685, 0.12446645643088305, 0.15126247457105146, 0.11587592505027244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037063421791186935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007187701593996954, 0.08096526901553114, 0.1523043631261327, 0.15545018016225098, 0.08367456774790083, 0.04337357714748413, 0.0354707770323337, 0.11024497711033054, 0.04462708355530598, 0.0724024938220833, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04847537426996318, 0.06600925686829429, 0.04716425657260859, 0.04298672293760519, 0.04832847041482369, 0.04553996686686301, 0.06400557296378406, 0.051727235822521145, 0.058791895387558024, 0.3094125751194057, 0.3070616307289097, 0.30965949364090517, 0.3493957461038584, 0.32929009484860805, 0.33165315352405, 0.31915948381704695, 0.31483129459903725, 0.30781016709148756, 0.09220516992546435, 0.06962541336226569, 0.08947203004550264, 0.09694533744475542, 0.10693597849547753, 0.10671454419604998, 0.09562021384714825, 0.09376600443365313, 0.08075611699228757, 0.17115591811005437, 0.1469429799590969, 0.16094833320210855, 0.1812921729161009, 0.22369168343069212, 0.1344311609635792, 0.13076464252163844, 0.15500069716580567, 0.16700076571830158, 0.2333209607025697, 0.17404820446598046, 0.2019510508642074, 0.23015709313221355, 0.24655009192716415, 0.2241253859650325, 0.2218780587728323, 0.1873704296428187, 0.2338199111448439, 0.20161608477806048, 0.11745678703392137, 0.16051016051926958, 0.20173431423977417, 0.19795731647571224, 0.10993091310861436, 0.17769814875776924, 0.14745550340096092, 0.09520277001271316, 0.22698673314376439, 0.23941133006249293, 0.2321159011836348, 0.1950792424387794, 0.22288306420395332, 0.19547718007361103, 0.22085563294960386, 0.21616635864118738, 0.21334847747040075, 0.18069557091425703, 0.19661710209002647, 0.17251948383271465, 0.19479076414165086, 0.17704180891711108, 0.18708065486515135, 0.18860244963199324, 0.18200307811915895, 0.18431227570511222, 0.1808523375183061, 0.13376480247606592, 0.10437399922291402, 0.17222458351225123, 0.11155333212869611, 0.061356262892722, 0.10845651711292992, 0.12314205738666406, 0.16839232016647399, 0.40738992508614225, 0.11236476862839062, 0.08295126348329052, 0.08207388830276818, 0.21107759857721353, 0.20775640449820043, 0.11221728220541882, 0.16931108907944803, 0.3430678939925653, 0.1886389487818858, 0.19142772378184847, 0.19576877080866595, 0.18629538739845886, 0.20965122764127286, 0.182153678754985, 0.18507444721307886, 0.1877180213629005, 0.18446942831110125, 0.11545961705622487, 0.1022117658311883, 0.08939161380384686, 0.09980174454217561, 0.07824896920681734, 0.10039152551882324, 0.10297197237959133, 0.08327966916057228, 0.09482668293662067]}, "mutation_prompt": null}
{"id": "721af570-e6c5-4d29-a352-3cbfe18c7481", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Update mutation rate based on function evaluations\n            self.mutation_rate = min(1.0, 1.0 - 0.1 * (_ / self.budget))\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing dynamic mutation strategy based on function evaluations to balance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "73ed93aa-c3f5-4c1d-a99c-e6ae52b99bf1", "metadata": {"aucs": [0.31769023246645733, 0.3464290129008547, 0.3446592576070938, 0.3497663466921652, 0.32967769946849224, 0.33465082383660416, 0.31279606114391456, 0.3274350685495424, 0.3373873975912043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020727136116843736, 9.999999999998899e-05, 9.999999999998899e-05, 0.08749586254446184, 0.10637273205604247, 0.10045562838061528, 0.10480809580842765, 0.10923724392094192, 0.08002265083601201, 0.07274103502736706, 0.10631386161728329, 0.07749349994347265, 0.09280396841046024, 0.09131049653133272, 0.10050826340001096, 0.09177784023876445, 0.07996449405305961, 0.08716090644805607, 0.059391571700720625, 0.08665069728751784, 0.09325615850292956, 0.9883281271995111, 0.9829729805847757, 0.9769303192161697, 0.9816342536049192, 0.959595335065097, 0.9696120962008693, 0.9841064412658739, 0.9831123525790849, 0.9846554682494557, 0.21492202187921272, 0.21688422165567167, 0.1989734701938276, 0.19229381763001852, 0.22933765296287212, 0.2242536746674989, 0.233776744363697, 0.20452154694679026, 0.24736832975059742, 0.27246079145683066, 0.25136768500328366, 0.2475909394582415, 0.2636935883164928, 0.2660369089370631, 0.2537608959130645, 0.28045814312482376, 0.2408143302330591, 0.32377064203656136, 0.12594767065696488, 0.1266486767298578, 0.12705015771893668, 0.12050963603772147, 0.1536740396255747, 0.08818395946108681, 0.11376506325802183, 0.1366735006713259, 0.1425573977576019, 0.15176600677905538, 0.12215442146155875, 0.10037423825910141, 0.11687479808637768, 0.1259921450915854, 0.11607462340055685, 0.12446645643088305, 0.15126247457105146, 0.11587592505027244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037063421791186935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007187701593996954, 0.08096526901553114, 0.1523043631261327, 0.15545018016225098, 0.08367456774790083, 0.04337357714748413, 0.0354707770323337, 0.11024497711033054, 0.04462708355530598, 0.0724024938220833, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04847537426996318, 0.06600925686829429, 0.04716425657260859, 0.04298672293760519, 0.04832847041482369, 0.04553996686686301, 0.06400557296378406, 0.051727235822521145, 0.058791895387558024, 0.3094125751194057, 0.3070616307289097, 0.30965949364090517, 0.3493957461038584, 0.32929009484860805, 0.33165315352405, 0.31915948381704695, 0.31483129459903725, 0.30781016709148756, 0.09220516992546435, 0.06962541336226569, 0.08947203004550264, 0.09694533744475542, 0.10693597849547753, 0.10671454419604998, 0.09562021384714825, 0.09376600443365313, 0.08075611699228757, 0.17115591811005437, 0.1469429799590969, 0.16094833320210855, 0.1812921729161009, 0.22369168343069212, 0.1344311609635792, 0.13076464252163844, 0.15500069716580567, 0.16700076571830158, 0.2333209607025697, 0.17404820446598046, 0.2019510508642074, 0.23015709313221355, 0.24655009192716415, 0.2241253859650325, 0.2218780587728323, 0.1873704296428187, 0.2338199111448439, 0.20161608477806048, 0.11745678703392137, 0.16051016051926958, 0.20173431423977417, 0.19795731647571224, 0.10993091310861436, 0.17769814875776924, 0.14745550340096092, 0.09520277001271316, 0.22698673314376439, 0.23941133006249293, 0.2321159011836348, 0.1950792424387794, 0.22288306420395332, 0.19547718007361103, 0.22085563294960386, 0.21616635864118738, 0.21334847747040075, 0.18069557091425703, 0.19661710209002647, 0.17251948383271465, 0.19479076414165086, 0.17704180891711108, 0.18708065486515135, 0.18860244963199324, 0.18200307811915895, 0.18431227570511222, 0.1808523375183061, 0.13376480247606592, 0.10437399922291402, 0.17222458351225123, 0.11155333212869611, 0.061356262892722, 0.10845651711292992, 0.12314205738666406, 0.16839232016647399, 0.40738992508614225, 0.11236476862839062, 0.08295126348329052, 0.08207388830276818, 0.21107759857721353, 0.20775640449820043, 0.11221728220541882, 0.16931108907944803, 0.3430678939925653, 0.1886389487818858, 0.19142772378184847, 0.19576877080866595, 0.18629538739845886, 0.20965122764127286, 0.182153678754985, 0.18507444721307886, 0.1877180213629005, 0.18446942831110125, 0.11545961705622487, 0.1022117658311883, 0.08939161380384686, 0.09980174454217561, 0.07824896920681734, 0.10039152551882324, 0.10297197237959133, 0.08327966916057228, 0.09482668293662067]}, "mutation_prompt": null}
{"id": "c1ffb58c-8995-4a1d-86b3-8d249fdfe37d", "solution": "import numpy as np\n\nclass AdaptiveMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.ones(dim)\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rates * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Update mutation rates for each dimension independently\n            self.mutation_rates = np.minimum(1.0, self.mutation_rates + 0.1 * (best_solution - candidate_solution) / (5.0 * self.budget))\n        \n        return best_solution", "name": "AdaptiveMutationMetaheuristic", "description": "Implement adaptive mutation rates for each dimension independently to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 6, "fitness": 0.17903478893248753, "feedback": "The algorithm AdaptiveMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "73ed93aa-c3f5-4c1d-a99c-e6ae52b99bf1", "metadata": {"aucs": [0.3161192397040109, 0.3433340651598873, 0.34365017797303754, 0.3471012896453499, 0.32931019214828017, 0.33105401256196587, 0.30909947170849994, 0.3263565971290331, 0.33462431462784725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08314436057351982, 0.09634059274946305, 0.08038400571166093, 0.10219349498006414, 0.11062691233449373, 0.09061505478291143, 0.1110188874226824, 0.09669433393168325, 0.09615772602884076, 0.07455076378534742, 0.10649370568872729, 0.08661103490589306, 0.09717969732171516, 0.08689557049906549, 0.07857684058188352, 0.07994271558811361, 0.057054521337555175, 0.08584961558470172, 0.9883293809330311, 0.9829741927302309, 0.9769334655641847, 0.9816375670738609, 0.9596130412143394, 0.9696200674796217, 0.9841100183091692, 0.9831135077309417, 0.9846557785921022, 0.21433750712492927, 0.21666829707643642, 0.20007903347293787, 0.19350466310104353, 0.22981229876994658, 0.20065889718415664, 0.23570403714175825, 0.20647013696005156, 0.24825585220951607, 0.26032125128520556, 0.24460260543220114, 0.2690852804830395, 0.2631426660557945, 0.26603726604361977, 0.24897933887280665, 0.24171246786709621, 0.22382948273232461, 0.28592920806623967, 0.11021997803243266, 0.12477746346437946, 0.12659160904213151, 0.11766696620255457, 0.15320313660062634, 0.08837510961934336, 0.11199012997245139, 0.13588237260202662, 0.13988698810989286, 0.1508460899665821, 0.12175642439941259, 0.10451256661484021, 0.11316577351479662, 0.12461094209284895, 0.12073794606398647, 0.12328054471840533, 0.15004499523376325, 0.1157353751583392, 0.0003818803757700273, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032659994414030447, 9.999999999998899e-05, 9.999999999998899e-05, 0.013698194681102893, 9.999999999998899e-05, 0.00030952931555461305, 0.09198295231724729, 0.1592573174756653, 0.15681448309797485, 0.08444177828094057, 0.049773044027056845, 0.04734837038094797, 0.10999641858188713, 0.05740993278527695, 0.07937755966758853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04722808946937462, 0.06507699584637139, 0.03877195343080253, 0.0430048156167373, 0.050415016854315375, 0.044787530031583644, 0.06317903384338419, 0.056689661104545985, 0.05853656309571287, 0.30738612386591024, 0.30349160597631786, 0.3088905682025028, 0.3439694179588938, 0.3096255842174277, 0.3310352192992041, 0.31576565386070576, 0.3138323137590979, 0.3063127246200228, 0.09750185326316496, 0.07106702899880457, 0.10627665025816457, 0.08614611109843995, 0.10337910071708067, 0.10023708057129532, 0.08472300055099347, 0.09450072180316915, 0.08540221461226905, 0.16543843726518803, 0.14401728056752527, 0.1519316615286216, 0.21940658325744933, 0.17092018578843104, 0.13533482295276045, 0.11805271673732154, 0.15499643476667357, 0.16403269505074025, 0.22781365816441534, 0.23687539613180808, 0.21445620923084974, 0.2341081270161809, 0.24387420686844663, 0.22497610828416814, 0.23333086082923415, 0.19401921804990152, 0.19898957702928477, 0.17759254905397448, 0.1701226080143835, 0.1308758123465521, 0.17722491049990818, 0.19441513657567122, 0.12733465601132632, 0.17556883281456737, 0.14347741003520054, 0.16449168973056316, 0.2021876454971412, 0.21844666527985135, 0.20455501049090397, 0.18914168192295233, 0.23766166223580665, 0.223365873096518, 0.2068149183342326, 0.1980399286835347, 0.22647096985891768, 0.18361308388641095, 0.19563968037501567, 0.16930453427045722, 0.18624261982088652, 0.18057132259476127, 0.17790508989846388, 0.1921444476793419, 0.18131795976232457, 0.19408608637228497, 0.1805922849163737, 0.13355910239375812, 0.10436541745895445, 0.17211535737646266, 0.1114720273789167, 0.06133200596738986, 0.1084425631154019, 0.1228183940484674, 0.16818051451171412, 0.3782293520657949, 0.11233006638117038, 0.08293247160926853, 0.08193950962595531, 0.21086205664644675, 0.20763653145452132, 0.11212312092499865, 0.16930415443182756, 0.35321981573600036, 0.19362810131738617, 0.17193348469215397, 0.17804454053271124, 0.1776306478834382, 0.17996246634228086, 0.17979362384585618, 0.17430488600724547, 0.1761178542540177, 0.18619037901171065, 0.08650323938067628, 0.09424537767736219, 0.08034957082141514, 0.0970927048961352, 0.08505621849963885, 0.1054119022320208, 0.10689475073387844, 0.08425056573117617, 0.09349137611748648]}, "mutation_prompt": null}
{"id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improved dynamic mutation strategy by incorporating adaptive mutation rate adjustment based on individual performance and population diversity.", "configspace": "", "generation": 7, "fitness": 0.23052834040228481, "feedback": "The algorithm ImprovedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.26.", "error": "", "parent_id": "73ed93aa-c3f5-4c1d-a99c-e6ae52b99bf1", "metadata": {"aucs": [0.9594589557002606, 0.9603180771485925, 0.9599326672390149, 0.9597403823706, 0.959692951311882, 0.960001165059368, 0.9599661216752187, 0.9601517983418087, 0.9602993558061668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09887232682429226, 0.07128221580075167, 0.056163729528429185, 0.11391241241598105, 0.09898408352649435, 0.05653589856044727, 0.054924317612223605, 0.04192076721370175, 0.09085992801554199, 0.08128639167333818, 0.08414228405311186, 0.07141951919491218, 0.09824192619660843, 0.07404906342517403, 0.07350132542692278, 0.09460789120636581, 0.0735450681498302, 0.10784386010261338, 0.9902945275020003, 0.9912785028371849, 0.14855184159364576, 0.1608084829512405, 0.12895900605351474, 0.16203364984762225, 0.972161385775718, 0.9714854093686028, 0.967093727630111, 0.9407038152152131, 0.9407880247999061, 0.941649133573005, 0.940179235804225, 0.9428422950224637, 0.20345089409623807, 0.9424359173646636, 0.9412756347683096, 0.39187745805294694, 0.21234336812130172, 0.08622208729242775, 0.1366201549870213, 0.1807216886462144, 0.17584697597536836, 0.1510697783848176, 0.15300738619031184, 0.22848243255212763, 0.23981052854070184, 0.1748493395233912, 0.17352733376028828, 0.13799868995908782, 0.13196890322770705, 0.13554321022855642, 0.16117519197097374, 0.1663728289644767, 0.13794818268496112, 0.18674453422920145, 0.14049999116216294, 0.19307601424447318, 0.13329184210178524, 0.14121941199067, 0.17084291858614054, 0.16298725047168605, 0.19616771902089392, 0.13886261665973976, 0.134283065219845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06434693929425961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037200534199284263, 9.999999999998899e-05, 9.999999999998899e-05, 0.059721389603812125, 0.05916875476718664, 0.12446222687216324, 0.058511172941763334, 9.999999999998899e-05, 0.011879302858313845, 0.11304002638662258, 0.005721353514935745, 0.03587060820329191, 0.13478303125218716, 0.11028229798363232, 0.1101279842046975, 0.10181836800704314, 0.11143528522628476, 0.2782424913167808, 0.1551296735606673, 0.18900565094532318, 0.10180734449565931, 0.12639715601650148, 0.12119922348250745, 0.06440180134585483, 0.13560240004777901, 0.07275058330365591, 0.24570529232936578, 0.2176449838660547, 0.29475752366706387, 0.23190707935987764, 0.5261369938906847, 0.4957422558599405, 0.5125624590008431, 0.5696969005111043, 0.5243089029666728, 0.5309023850940624, 0.5665046657285587, 0.49774876349125985, 0.5500489552341163, 0.12052985531925586, 0.07145405371726388, 0.0365481279106421, 0.05051107815579181, 0.1671042401144447, 0.09516485492861537, 0.08803734911626959, 0.10360625126126599, 0.08452686914126539, 0.17053342705855978, 0.17630360664871825, 0.20636772700822203, 0.15403778969281323, 0.2516036494819126, 0.19755692272331515, 0.22270654248383703, 0.25011589606027984, 0.21733710462141176, 0.22376320313888076, 0.16779537120066612, 0.12385895943232317, 0.3191837611869003, 0.1674371328544514, 0.15138437081719713, 0.22898298669295758, 0.10149157490020733, 0.09082870064061421, 0.10867954872623942, 0.15303927679052887, 0.07234561180747967, 0.17013102898319354, 0.24326151326480494, 0.1307707450707909, 0.21288269595941833, 0.10522263088039507, 0.012267261793994066, 0.24229623654516208, 0.2578640311642254, 0.15587002058569144, 0.2039728223463826, 0.1701870723028307, 0.2532851316234811, 0.25238129974325385, 0.16633177738237082, 0.2702522231738904, 0.16966146218632272, 0.1961403108072446, 0.1873666828036472, 0.20285401728587527, 0.17736832025565452, 0.17807492117535606, 0.1764040580314704, 0.16875761037060566, 0.1749684240926972, 0.10882902762789204, 0.1377269196536246, 0.07156923136938953, 0.17407534393298973, 0.11246954676270071, 0.06208910754034025, 0.10877968236417368, 0.11531055259519019, 0.16923936091246083, 0.40743296967223874, 0.11367319774498896, 0.0834494054490611, 0.17013245733354598, 0.21464486559805196, 0.04437009783885426, 0.11368274071664564, 0.1697915862960655, 0.2283105599233355, 0.21359517560821217, 0.19404594473590298, 0.2259583742729958, 0.2867192455350902, 0.27027970167409054, 0.1896689988487238, 0.20508592211818044, 0.2640145982939387, 0.22462815207389486, 0.07920720612114251, 0.1262256547345012, 0.09726998885448812, 0.0784451758453133, 0.07771301786725981, 0.10238254940091207, 0.057993396668112096, 0.06275727238713913, 0.12534720647793673]}, "mutation_prompt": null}
{"id": "e68ac366-afca-4b54-9021-b1ad9fa3348b", "solution": "import numpy as np\n\nclass FastConvergingMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                self.mutation_factors = np.ones(self.dim)\n\n            # Update mutation rate based on individual performance\n            self.mutation_rate *= 0.99 if candidate_fitness < best_fitness else 1.01\n\n        return best_solution", "name": "FastConvergingMetaheuristic", "description": "Improved convergence speed by introducing a dynamic adjustment of mutation rate based on individual performance and resetting mutation factors for exploration.", "configspace": "", "generation": 8, "fitness": 0.12175469217107278, "feedback": "The algorithm FastConvergingMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.18633862615891872, 0.1952602769559818, 0.2380085709177575, 0.23770387251754388, 0.25705601281539203, 0.2590074866356443, 0.21527227569479146, 0.19298420373654468, 0.19492501687904273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03100501549577661, 0.040932750115091454, 0.03767798216598006, 0.05680856001304313, 0.024351638199903047, 0.0473743127038051, 0.038005236668720466, 0.07129719201660356, 0.036137951956474845, 0.03618318170287316, 0.02935961975671675, 0.0360656517822221, 0.031171116790232545, 0.0029907696582495147, 0.018329573685140876, 0.023726824571224103, 0.030666527452629988, 0.017300623395680836, 0.9919658747018403, 0.9870123220932416, 0.9877136255305901, 0.9845652655603723, 0.9863991061485733, 0.9881907256036737, 0.9914615453665333, 0.9886773791058371, 0.993019290900404, 0.12011257022500832, 0.053020675773627235, 0.09474232297504892, 0.03312674280244299, 0.09200935764159912, 0.06272102241639843, 0.07132091442657706, 0.0806741315223104, 0.057501006366716845, 0.10844936702086361, 0.09676634074794233, 0.10730750579883752, 0.15664035703537815, 0.16044705884588006, 0.14471865263101968, 0.09514888563613189, 0.12509686061369885, 0.10815024478491231, 0.011918617852798019, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030880599669850572, 9.999999999998899e-05, 0.03847756807939784, 0.017946007433492395, 9.999999999998899e-05, 0.05669778346665533, 0.005311502477251651, 9.999999999998899e-05, 0.05764519935895496, 0.03092228492322735, 9.999999999998899e-05, 0.019413889062509182, 0.05655076700373096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006617062860425849, 9.999999999998899e-05, 0.009396117862865094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03353335913326627, 9.999999999998899e-05, 0.014803905179197496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01262406205861022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014469825139870052, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2396245236657507, 0.26289293357501553, 0.22576525481041376, 0.1932407586199124, 0.19587409348780027, 0.20162989566085554, 0.21854070293897088, 0.19952709769349053, 0.20342730065910442, 0.03692122085327043, 0.07732895526442884, 0.050441905301225276, 0.08210216599149067, 0.043708588510611324, 0.04908133351384969, 0.050367308427204605, 0.03522501437232439, 0.05852922814831252, 0.12983061954640984, 0.1206905474348452, 0.09319263368887332, 0.17527553280375796, 0.12644373127103115, 0.10095187602816036, 0.08685728053873676, 0.14324994814225522, 0.11608279629807927, 0.15256311588211757, 0.15014187528358014, 0.11005800780497632, 0.18200109073551862, 0.1492774516888159, 0.15743900688862011, 0.17028931604772246, 0.18144779671028133, 0.11150982550429489, 0.08145220626683747, 0.08996075609535892, 0.09547748219176588, 0.1027037020118663, 0.11211765174765698, 0.05246223338440703, 0.10136328630811453, 0.11792554460830929, 0.05893174180969818, 0.14472563646570868, 0.14081691846729205, 0.1404040886411534, 0.15270006781869816, 0.14594727593491064, 0.12373471925855506, 0.16473422386979164, 0.13461702043098156, 0.16914174098326584, 0.15153979246218097, 0.16614511650915154, 0.1479723365267922, 0.14078337569139854, 0.18179378950666447, 0.15140940845605055, 0.14633229605835096, 0.1526531871895126, 0.15313661788101185, 0.1336883714159499, 0.11419156695570676, 0.13133046072115995, 0.16861128134870484, 0.10866360751152149, 0.08253553745884312, 0.15149233968178977, 0.10880101038889811, 0.15440463108808689, 0.23099622327133162, 0.10167422312644503, 0.07458686136923443, 0.09379109618694659, 0.12884922009583955, 0.16033122677731748, 0.09291895892568791, 0.1023312962467473, 0.11231091781888758, 0.15760420749311377, 0.16629244328356052, 0.1911453203564074, 0.23754574076180612, 0.15722934839436198, 0.15798274869880258, 0.1853214509145057, 0.16625073427437165, 0.15599805041035852, 0.050179222811289725, 0.03620384750058214, 0.046787405534617355, 0.04103544301342177, 0.05207160310979564, 0.04045106899912121, 0.041360108943162444, 0.060791932277850735, 0.03895531976423228]}, "mutation_prompt": null}
{"id": "f40333f5-8dba-4965-9312-7287cd2ec053", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improved dynamic mutation strategy by incorporating adaptive mutation rate adjustment based on individual performance and population diversity.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9594589557002606, 0.9603180771485925, 0.9599326672390149, 0.9597403823706, 0.959692951311882, 0.960001165059368, 0.9599661216752187, 0.9601517983418087, 0.9602993558061668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09887232682429226, 0.07128221580075167, 0.056163729528429185, 0.11391241241598105, 0.09898408352649435, 0.05653589856044727, 0.054924317612223605, 0.04192076721370175, 0.09085992801554199, 0.08128639167333818, 0.08414228405311186, 0.07141951919491218, 0.09824192619660843, 0.07404906342517403, 0.07350132542692278, 0.09460789120636581, 0.0735450681498302, 0.10784386010261338, 0.9902945275020003, 0.9912785028371849, 0.14855184159364576, 0.1608084829512405, 0.12895900605351474, 0.16203364984762225, 0.972161385775718, 0.9714854093686028, 0.967093727630111, 0.9407038152152131, 0.9407880247999061, 0.941649133573005, 0.940179235804225, 0.9428422950224637, 0.20345089409623807, 0.9424359173646636, 0.9412756347683096, 0.39187745805294694, 0.21234336812130172, 0.08622208729242775, 0.1366201549870213, 0.1807216886462144, 0.17584697597536836, 0.1510697783848176, 0.15300738619031184, 0.22848243255212763, 0.23981052854070184, 0.1748493395233912, 0.17352733376028828, 0.13799868995908782, 0.13196890322770705, 0.13554321022855642, 0.16117519197097374, 0.1663728289644767, 0.13794818268496112, 0.18674453422920145, 0.14049999116216294, 0.19307601424447318, 0.13329184210178524, 0.14121941199067, 0.17084291858614054, 0.16298725047168605, 0.19616771902089392, 0.13886261665973976, 0.134283065219845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06434693929425961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037200534199284263, 9.999999999998899e-05, 9.999999999998899e-05, 0.059721389603812125, 0.05916875476718664, 0.12446222687216324, 0.058511172941763334, 9.999999999998899e-05, 0.011879302858313845, 0.11304002638662258, 0.005721353514935745, 0.03587060820329191, 0.13478303125218716, 0.11028229798363232, 0.1101279842046975, 0.10181836800704314, 0.11143528522628476, 0.2782424913167808, 0.1551296735606673, 0.18900565094532318, 0.10180734449565931, 0.12639715601650148, 0.12119922348250745, 0.06440180134585483, 0.13560240004777901, 0.07275058330365591, 0.24570529232936578, 0.2176449838660547, 0.29475752366706387, 0.23190707935987764, 0.5261369938906847, 0.4957422558599405, 0.5125624590008431, 0.5696969005111043, 0.5243089029666728, 0.5309023850940624, 0.5665046657285587, 0.49774876349125985, 0.5500489552341163, 0.12052985531925586, 0.07145405371726388, 0.0365481279106421, 0.05051107815579181, 0.1671042401144447, 0.09516485492861537, 0.08803734911626959, 0.10360625126126599, 0.08452686914126539, 0.17053342705855978, 0.17630360664871825, 0.20636772700822203, 0.15403778969281323, 0.2516036494819126, 0.19755692272331515, 0.22270654248383703, 0.25011589606027984, 0.21733710462141176, 0.22376320313888076, 0.16779537120066612, 0.12385895943232317, 0.3191837611869003, 0.1674371328544514, 0.15138437081719713, 0.22898298669295758, 0.10149157490020733, 0.09082870064061421, 0.10867954872623942, 0.15303927679052887, 0.07234561180747967, 0.17013102898319354, 0.24326151326480494, 0.1307707450707909, 0.21288269595941833, 0.10522263088039507, 0.012267261793994066, 0.24229623654516208, 0.2578640311642254, 0.15587002058569144, 0.2039728223463826, 0.1701870723028307, 0.2532851316234811, 0.25238129974325385, 0.16633177738237082, 0.2702522231738904, 0.16966146218632272, 0.1961403108072446, 0.1873666828036472, 0.20285401728587527, 0.17736832025565452, 0.17807492117535606, 0.1764040580314704, 0.16875761037060566, 0.1749684240926972, 0.10882902762789204, 0.1377269196536246, 0.07156923136938953, 0.17407534393298973, 0.11246954676270071, 0.06208910754034025, 0.10877968236417368, 0.11531055259519019, 0.16923936091246083, 0.40743296967223874, 0.11367319774498896, 0.0834494054490611, 0.17013245733354598, 0.21464486559805196, 0.04437009783885426, 0.11368274071664564, 0.1697915862960655, 0.2283105599233355, 0.21359517560821217, 0.19404594473590298, 0.2259583742729958, 0.2867192455350902, 0.27027970167409054, 0.1896689988487238, 0.20508592211818044, 0.2640145982939387, 0.22462815207389486, 0.07920720612114251, 0.1262256547345012, 0.09726998885448812, 0.0784451758453133, 0.07771301786725981, 0.10238254940091207, 0.057993396668112096, 0.06275727238713913, 0.12534720647793673]}, "mutation_prompt": null}
{"id": "414135d1-491c-463b-a7c4-80efa5414007", "solution": "import numpy as np\n\nclass FastDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        prev_fitness = best_fitness\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on fitness landscape curvature\n            curvature = abs(candidate_fitness - 2 * best_fitness + prev_fitness)\n            self.mutation_rate *= 0.99 + 0.1 * curvature\n\n            prev_fitness = candidate_fitness\n\n        return best_solution", "name": "FastDynamicMutationMetaheuristic", "description": "Introducing a dynamic mutation step size adaptation mechanism based on the fitness landscape curvature to enhance convergence speed.", "configspace": "", "generation": 10, "fitness": 0.06855396023370777, "feedback": "The algorithm FastDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.20.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.07721887153085882, 0.033169135226909896, 0.11825693564889239, 0.05946858564589219, 0.05937032901637862, 0.059502698474339755, 0.03222514068478122, 0.05618053495816311, 0.040318219730665295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9977552694725816, 0.9977834461823528, 0.9949948983682343, 0.9976180498857027, 0.9986628022720889, 0.9990228279094515, 0.9944116729395752, 0.9959512382299315, 0.997223313046133, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04557486764733476, 9.999999999998899e-05, 9.999999999998899e-05, 0.012228724368825383, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025930484917864316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058302988155861546, 0.05836538588027507, 0.13284384274193906, 0.07194028674589537, 0.08199974061840598, 0.0603644757586741, 0.09461470627041313, 0.08507363021142755, 0.08506468845539328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0931847928737457, 0.09321898301392106, 0.09334365768574904, 0.07658640348586865, 0.07663797713727705, 0.07664500138501718, 0.07287743757358933, 0.07291822804560166, 0.0728365248457119, 0.09125260076425479, 0.07002381117691492, 0.0922314170606211, 0.10273960207795751, 0.08244243986527877, 0.0824826409915399, 0.11420206329748472, 0.0826628122911306, 0.08263092062028865, 0.06457993215776969, 0.020139461138600878, 0.020147448759235576, 0.044650675553987496, 0.041190188442160935, 0.04120784376863007, 0.05648699256316181, 0.02864678317083924, 0.02864239235652899, 0.10707782681107414, 0.05069774889569201, 0.07583749810621887, 0.0945796079604061, 0.03369853832219982, 0.04239781190054204, 0.12245976138762271, 0.04282603099967419, 0.07554159735876675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07641389472351989, 0.07636607815840812, 0.0764074090200969, 0.0818382400426011, 0.03308198901076831, 0.03306494392603376, 0.03391929261879634, 0.06617580436949189, 0.03978708432579314, 0.020027794641594654, 0.03967402848431323, 0.04192297487015728, 0.014809311894909638, 0.02000238051615144, 0.015238188651884199, 0.023573120003910653, 0.02193475457094196, 0.0319242423127184, 0.1129166677550777, 0.12017502569002791, 0.11476100848270054, 0.15020004326309588, 0.1500943080112731, 0.14983572570054948, 0.13687976296339932, 0.1368514578158594, 0.13691613163040306, 0.002560221669381968, 9.999999999998899e-05, 0.009977089842196252, 0.0019370108138609954, 9.999999999998899e-05, 9.999999999998899e-05, 0.00378771705097114, 9.999999999998899e-05, 0.004760402692256194]}, "mutation_prompt": null}
{"id": "d1a61587-6887-4080-bcfc-433750d77e07", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.acceleration_factor = 1.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n            # Accelerate mutation adjustments\n            if candidate_fitness < best_fitness:\n                self.mutation_factors *= self.acceleration_factor\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n        return best_solution", "name": "AcceleratedDynamicMutationMetaheuristic", "description": "AcceleratedDynamicMutationMetaheuristic: Enhancing convergence speed by introducing a dynamic acceleration mechanism to speed up mutation adjustments while maintaining diversity and individual performance criteria.", "configspace": "", "generation": 11, "fitness": 0.23052834040228481, "feedback": "The algorithm AcceleratedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.26.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9594589557002606, 0.9603180771485925, 0.9599326672390149, 0.9597403823706, 0.959692951311882, 0.960001165059368, 0.9599661216752187, 0.9601517983418087, 0.9602993558061668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09887232682429226, 0.07128221580075167, 0.056163729528429185, 0.11391241241598105, 0.09898408352649435, 0.05653589856044727, 0.054924317612223605, 0.04192076721370175, 0.09085992801554199, 0.08128639167333818, 0.08414228405311186, 0.07141951919491218, 0.09824192619660843, 0.07404906342517403, 0.07350132542692278, 0.09460789120636581, 0.0735450681498302, 0.10784386010261338, 0.9902945275020003, 0.9912785028371849, 0.14855184159364576, 0.1608084829512405, 0.12895900605351474, 0.16203364984762225, 0.972161385775718, 0.9714854093686028, 0.967093727630111, 0.9407038152152131, 0.9407880247999061, 0.941649133573005, 0.940179235804225, 0.9428422950224637, 0.20345089409623807, 0.9424359173646636, 0.9412756347683096, 0.39187745805294694, 0.21234336812130172, 0.08622208729242775, 0.1366201549870213, 0.1807216886462144, 0.17584697597536836, 0.1510697783848176, 0.15300738619031184, 0.22848243255212763, 0.23981052854070184, 0.1748493395233912, 0.17352733376028828, 0.13799868995908782, 0.13196890322770705, 0.13554321022855642, 0.16117519197097374, 0.1663728289644767, 0.13794818268496112, 0.18674453422920145, 0.14049999116216294, 0.19307601424447318, 0.13329184210178524, 0.14121941199067, 0.17084291858614054, 0.16298725047168605, 0.19616771902089392, 0.13886261665973976, 0.134283065219845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06434693929425961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037200534199284263, 9.999999999998899e-05, 9.999999999998899e-05, 0.059721389603812125, 0.05916875476718664, 0.12446222687216324, 0.058511172941763334, 9.999999999998899e-05, 0.011879302858313845, 0.11304002638662258, 0.005721353514935745, 0.03587060820329191, 0.13478303125218716, 0.11028229798363232, 0.1101279842046975, 0.10181836800704314, 0.11143528522628476, 0.2782424913167808, 0.1551296735606673, 0.18900565094532318, 0.10180734449565931, 0.12639715601650148, 0.12119922348250745, 0.06440180134585483, 0.13560240004777901, 0.07275058330365591, 0.24570529232936578, 0.2176449838660547, 0.29475752366706387, 0.23190707935987764, 0.5261369938906847, 0.4957422558599405, 0.5125624590008431, 0.5696969005111043, 0.5243089029666728, 0.5309023850940624, 0.5665046657285587, 0.49774876349125985, 0.5500489552341163, 0.12052985531925586, 0.07145405371726388, 0.0365481279106421, 0.05051107815579181, 0.1671042401144447, 0.09516485492861537, 0.08803734911626959, 0.10360625126126599, 0.08452686914126539, 0.17053342705855978, 0.17630360664871825, 0.20636772700822203, 0.15403778969281323, 0.2516036494819126, 0.19755692272331515, 0.22270654248383703, 0.25011589606027984, 0.21733710462141176, 0.22376320313888076, 0.16779537120066612, 0.12385895943232317, 0.3191837611869003, 0.1674371328544514, 0.15138437081719713, 0.22898298669295758, 0.10149157490020733, 0.09082870064061421, 0.10867954872623942, 0.15303927679052887, 0.07234561180747967, 0.17013102898319354, 0.24326151326480494, 0.1307707450707909, 0.21288269595941833, 0.10522263088039507, 0.012267261793994066, 0.24229623654516208, 0.2578640311642254, 0.15587002058569144, 0.2039728223463826, 0.1701870723028307, 0.2532851316234811, 0.25238129974325385, 0.16633177738237082, 0.2702522231738904, 0.16966146218632272, 0.1961403108072446, 0.1873666828036472, 0.20285401728587527, 0.17736832025565452, 0.17807492117535606, 0.1764040580314704, 0.16875761037060566, 0.1749684240926972, 0.10882902762789204, 0.1377269196536246, 0.07156923136938953, 0.17407534393298973, 0.11246954676270071, 0.06208910754034025, 0.10877968236417368, 0.11531055259519019, 0.16923936091246083, 0.40743296967223874, 0.11367319774498896, 0.0834494054490611, 0.17013245733354598, 0.21464486559805196, 0.04437009783885426, 0.11368274071664564, 0.1697915862960655, 0.2283105599233355, 0.21359517560821217, 0.19404594473590298, 0.2259583742729958, 0.2867192455350902, 0.27027970167409054, 0.1896689988487238, 0.20508592211818044, 0.2640145982939387, 0.22462815207389486, 0.07920720612114251, 0.1262256547345012, 0.09726998885448812, 0.0784451758453133, 0.07771301786725981, 0.10238254940091207, 0.057993396668112096, 0.06275727238713913, 0.12534720647793673]}, "mutation_prompt": null}
{"id": "72ea7419-0a0b-47cf-b141-e34192f237d5", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improved dynamic mutation strategy by incorporating adaptive mutation rate adjustment based on individual performance and population diversity.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9594589557002606, 0.9603180771485925, 0.9599326672390149, 0.9597403823706, 0.959692951311882, 0.960001165059368, 0.9599661216752187, 0.9601517983418087, 0.9602993558061668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09887232682429226, 0.07128221580075167, 0.056163729528429185, 0.11391241241598105, 0.09898408352649435, 0.05653589856044727, 0.054924317612223605, 0.04192076721370175, 0.09085992801554199, 0.08128639167333818, 0.08414228405311186, 0.07141951919491218, 0.09824192619660843, 0.07404906342517403, 0.07350132542692278, 0.09460789120636581, 0.0735450681498302, 0.10784386010261338, 0.9902945275020003, 0.9912785028371849, 0.14855184159364576, 0.1608084829512405, 0.12895900605351474, 0.16203364984762225, 0.972161385775718, 0.9714854093686028, 0.967093727630111, 0.9407038152152131, 0.9407880247999061, 0.941649133573005, 0.940179235804225, 0.9428422950224637, 0.20345089409623807, 0.9424359173646636, 0.9412756347683096, 0.39187745805294694, 0.21234336812130172, 0.08622208729242775, 0.1366201549870213, 0.1807216886462144, 0.17584697597536836, 0.1510697783848176, 0.15300738619031184, 0.22848243255212763, 0.23981052854070184, 0.1748493395233912, 0.17352733376028828, 0.13799868995908782, 0.13196890322770705, 0.13554321022855642, 0.16117519197097374, 0.1663728289644767, 0.13794818268496112, 0.18674453422920145, 0.14049999116216294, 0.19307601424447318, 0.13329184210178524, 0.14121941199067, 0.17084291858614054, 0.16298725047168605, 0.19616771902089392, 0.13886261665973976, 0.134283065219845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06434693929425961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037200534199284263, 9.999999999998899e-05, 9.999999999998899e-05, 0.059721389603812125, 0.05916875476718664, 0.12446222687216324, 0.058511172941763334, 9.999999999998899e-05, 0.011879302858313845, 0.11304002638662258, 0.005721353514935745, 0.03587060820329191, 0.13478303125218716, 0.11028229798363232, 0.1101279842046975, 0.10181836800704314, 0.11143528522628476, 0.2782424913167808, 0.1551296735606673, 0.18900565094532318, 0.10180734449565931, 0.12639715601650148, 0.12119922348250745, 0.06440180134585483, 0.13560240004777901, 0.07275058330365591, 0.24570529232936578, 0.2176449838660547, 0.29475752366706387, 0.23190707935987764, 0.5261369938906847, 0.4957422558599405, 0.5125624590008431, 0.5696969005111043, 0.5243089029666728, 0.5309023850940624, 0.5665046657285587, 0.49774876349125985, 0.5500489552341163, 0.12052985531925586, 0.07145405371726388, 0.0365481279106421, 0.05051107815579181, 0.1671042401144447, 0.09516485492861537, 0.08803734911626959, 0.10360625126126599, 0.08452686914126539, 0.17053342705855978, 0.17630360664871825, 0.20636772700822203, 0.15403778969281323, 0.2516036494819126, 0.19755692272331515, 0.22270654248383703, 0.25011589606027984, 0.21733710462141176, 0.22376320313888076, 0.16779537120066612, 0.12385895943232317, 0.3191837611869003, 0.1674371328544514, 0.15138437081719713, 0.22898298669295758, 0.10149157490020733, 0.09082870064061421, 0.10867954872623942, 0.15303927679052887, 0.07234561180747967, 0.17013102898319354, 0.24326151326480494, 0.1307707450707909, 0.21288269595941833, 0.10522263088039507, 0.012267261793994066, 0.24229623654516208, 0.2578640311642254, 0.15587002058569144, 0.2039728223463826, 0.1701870723028307, 0.2532851316234811, 0.25238129974325385, 0.16633177738237082, 0.2702522231738904, 0.16966146218632272, 0.1961403108072446, 0.1873666828036472, 0.20285401728587527, 0.17736832025565452, 0.17807492117535606, 0.1764040580314704, 0.16875761037060566, 0.1749684240926972, 0.10882902762789204, 0.1377269196536246, 0.07156923136938953, 0.17407534393298973, 0.11246954676270071, 0.06208910754034025, 0.10877968236417368, 0.11531055259519019, 0.16923936091246083, 0.40743296967223874, 0.11367319774498896, 0.0834494054490611, 0.17013245733354598, 0.21464486559805196, 0.04437009783885426, 0.11368274071664564, 0.1697915862960655, 0.2283105599233355, 0.21359517560821217, 0.19404594473590298, 0.2259583742729958, 0.2867192455350902, 0.27027970167409054, 0.1896689988487238, 0.20508592211818044, 0.2640145982939387, 0.22462815207389486, 0.07920720612114251, 0.1262256547345012, 0.09726998885448812, 0.0784451758453133, 0.07771301786725981, 0.10238254940091207, 0.057993396668112096, 0.06275727238713913, 0.12534720647793673]}, "mutation_prompt": null}
{"id": "b58f3a4e-8772-4df7-92fd-681ced5d30ff", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.normal(0, 1, self.dim) * self.mutation_rate * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.85 if candidate_fitness < best_fitness else 1.15\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.98\n\n        return best_solution", "name": "EnhancedDynamicMutationMetaheuristic", "description": "ImprovedDynamicMutationMetaheuristic algorithm with enhanced mutation operator to prioritize exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 13, "fitness": 0.2017259666096403, "feedback": "The algorithm EnhancedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.23.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9764205241682464, 0.9776535846603361, 0.9771403045414992, 0.977716757228072, 0.9767039527718016, 0.9776206996933811, 0.9772313467700436, 0.9770923057035167, 0.9768554280499973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03387767466737446, 0.1677637597969992, 0.07634512225984724, 0.06554900859496104, 0.0847581230328438, 0.04693506779164491, 0.08821208002062153, 0.12100421743301826, 0.08198469610844672, 0.058376149147681966, 0.09515241957944942, 0.020117309706043862, 0.1145811133448349, 0.0848649543669433, 0.017178771370502388, 0.12108337043746997, 0.09151555240537468, 0.025880887327069613, 0.23878166027449765, 0.12805202753925427, 0.09104632046558092, 0.17713464310630733, 0.15629341927100626, 0.12392002966404903, 0.9904404150853814, 0.15775341901102036, 0.9919786594693037, 0.8639918443470423, 0.23790467374783264, 0.11530801759439124, 0.3685301429625848, 0.3560382357252413, 0.19744442318254196, 0.37904737003071365, 0.5690581989209674, 0.39693220859200196, 0.17316091480107876, 0.19126755152870767, 0.09464177642187788, 0.17935064108026832, 0.21667959568521888, 0.19623215214326184, 0.15050743883244355, 0.13215253432095575, 0.15065317645699272, 0.17455170335271486, 0.15143334993697044, 0.14132771915558406, 0.1379011355919494, 0.17148465024751736, 9.999999999998899e-05, 0.1562216676976792, 0.2065683276675967, 0.1325624693273234, 0.13460665475142208, 0.13372143241936285, 0.2317221416483468, 0.13425769758927275, 0.13190493435126593, 0.1505917883953538, 0.17887538081638854, 0.14265627091870725, 0.15187987975456996, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0661834761496577, 0.05903298891598807, 0.06716499837398338, 0.05797222610849384, 0.022859922428594137, 0.017066062954582795, 0.08538789486018483, 0.019440846375090803, 0.037043519880393116, 0.11855146232558689, 0.04182043855975881, 0.16733165548047435, 0.17943144518465814, 0.2331975813779531, 0.11707288407855154, 0.11422866249813446, 0.24377730317247348, 0.21019355187403987, 0.10467277319473056, 0.06459398495865476, 0.12712413824924096, 0.23143065318481926, 0.028086135521789735, 0.02762815895483417, 0.08763625945771636, 0.1418335927021217, 0.13880711604858387, 0.5112781436346279, 0.4770085292516686, 0.46054231800903467, 0.5005239079689763, 0.45914622624008083, 0.4434024323356073, 0.49920583242362404, 0.483934016466008, 0.47012158494174305, 0.06011928944969802, 0.079322863374507, 0.10925436911319686, 0.05824670474216076, 0.07149949116023091, 0.052073913854793874, 0.053734394740146296, 0.12136333232891228, 0.055319068441275876, 0.07618689076621743, 0.23098322948784156, 0.11737462037003499, 0.13616515810913166, 0.24585999064757347, 0.1311297542347697, 0.18065329205035618, 0.3672501961534126, 0.3271883500220987, 0.31814063528152314, 0.19773443098564258, 0.12088697584292407, 0.13305384500951656, 0.2157592089841852, 0.13895781846612953, 0.1625082496499719, 0.26756830108133256, 0.15804635514452425, 0.22755289981660864, 0.10506831082435619, 0.03365312675714871, 0.2325717058949559, 0.11682432267683585, 0.13895788768243478, 0.21034564404348444, 0.09100187961277462, 0.02693704501705818, 0.18450367535233458, 0.13982649803363345, 0.1823825975267067, 0.27970062129823614, 0.13757601824407228, 0.21884399805131727, 0.27261415652977283, 0.1579367126825777, 0.20465797600633373, 0.21591989504475217, 0.17531073633048966, 0.18667724589363943, 0.19622046634981716, 0.17253941440824838, 0.18082408170472986, 0.17854174296149516, 0.1783917897138586, 0.1951756247869143, 0.12372777618442377, 0.13249121618245385, 0.1057866339389002, 0.984711728351441, 0.11534424153084366, 0.16951605479187148, 0.06215623159589956, 0.11523024927246006, 0.12337686072125598, 0.4896997890560477, 0.11065270663826376, 0.28288730719283417, 0.17049853768181333, 0.4234106765677911, 0.22279510664326863, 0.15839219176123065, 0.16980688751406037, 0.16625217931628755, 0.1750441147696956, 0.21487442068454643, 0.25834080886550315, 0.21808490826531302, 0.19484226292180284, 0.21363413082119997, 0.20027843381998378, 0.2197572965893766, 0.19664521323397655, 0.087068382050983, 0.10795256694129474, 0.07712272786706287, 0.05654545565231417, 0.07222060150463694, 0.14011134000423442, 0.0537852189214022, 0.07289659492747635, 0.06711453316062832]}, "mutation_prompt": null}
{"id": "bf6e1855-816c-47a5-b0e7-e7d597484afd", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristicPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            \n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n            \n            # Update mutation rate based on population diversity and individual performance\n            self.mutation_rate *= 0.99 * (1 - np.exp(-0.01 * abs(candidate_fitness - best_fitness)))\n        \n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristicPlus", "description": "ImprovedDynamicMutationMetaheuristic+: Enhanced dynamic mutation strategy by introducing a mechanism to adaptively adjust the mutation rate based on a combination of individual performance and diversity to accelerate convergence speed by 10.0%.", "configspace": "", "generation": 14, "fitness": 0.018495424973773253, "feedback": "The algorithm ImprovedDynamicMutationMetaheuristicPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.02 with standard deviation 0.03.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.07014684265647086, 0.033169135226909896, 0.060147892743834586, 0.008413810300763158, 0.008642381517655173, 0.025451503289396937, 0.03222585562834068, 0.05618053495816311, 0.0325032189007195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00978767585289042, 0.0019873039842471796, 9.999999999998899e-05, 0.0006823901126720155, 0.014172620733237662, 0.002101064728093127, 9.999999999998899e-05, 0.015039331936276157, 0.0030010036015053476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005419215396593735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 0.012228724368825383, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025930484917864316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011144772356747712, 9.999999999998899e-05, 0.12391795495493352, 0.0707639580521987, 9.999999999998899e-05, 9.999999999998899e-05, 0.09461533248887066, 0.05289079887580628, 0.019983343935585984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04904798153997303, 0.03971271012570288, 0.06537754623787317, 0.0038531041830163204, 0.007251846793454253, 0.056924178037228046, 0.01048597304798371, 0.03933649686519125, 0.012669250025608036, 0.0952455208800862, 0.0700352679782984, 0.06383983483031241, 0.10284339555825628, 0.04187441940010561, 0.07210614098025658, 0.11944697492713785, 0.0686407068543271, 0.05943033123369601, 0.029562329592542458, 9.999999999998899e-05, 9.999999999998899e-05, 0.06035058792365111, 9.999999999998899e-05, 0.03479655823765915, 0.057032703699014586, 0.0057862716827489225, 9.999999999998899e-05, 0.10707782681107414, 0.024651763032082608, 0.07149553509732998, 0.09348747744389874, 0.01931652516208704, 0.04594413182259616, 0.12246448664792786, 0.032369086368143285, 0.08349197517698381, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028015673491834092, 0.021358141855560953, 0.020259218133138024, 0.0818382400426011, 0.0130660350700742, 0.01680405296684384, 0.03391929261879634, 0.06617580436949189, 0.03978708432579314, 0.020027794641594654, 0.052008779437776376, 0.00807333502974561, 0.011849773879620273, 0.009759435717904164, 0.015009200647139509, 0.013987957864874057, 0.012169747242839146, 0.015968679650421702, 0.07525526329232102, 0.12072506642059666, 0.11476100848270054, 0.11981812383142842, 0.08692437180493018, 0.12600097618953077, 0.09762256095097677, 0.061075800229655974, 0.09886081565434002, 0.011372798129114181, 9.999999999998899e-05, 0.011956867303582808, 0.0019370108138609954, 9.999999999998899e-05, 9.999999999998899e-05, 0.005944693564328696, 9.999999999998899e-05, 0.009376440851702528]}, "mutation_prompt": null}
{"id": "e1afbb27-d527-40b2-8f25-6c387c8f89ec", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improved dynamic mutation strategy by incorporating adaptive mutation rate adjustment based on individual performance and population diversity.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9594589557002606, 0.9603180771485925, 0.9599326672390149, 0.9597403823706, 0.959692951311882, 0.960001165059368, 0.9599661216752187, 0.9601517983418087, 0.9602993558061668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09887232682429226, 0.07128221580075167, 0.056163729528429185, 0.11391241241598105, 0.09898408352649435, 0.05653589856044727, 0.054924317612223605, 0.04192076721370175, 0.09085992801554199, 0.08128639167333818, 0.08414228405311186, 0.07141951919491218, 0.09824192619660843, 0.07404906342517403, 0.07350132542692278, 0.09460789120636581, 0.0735450681498302, 0.10784386010261338, 0.9902945275020003, 0.9912785028371849, 0.14855184159364576, 0.1608084829512405, 0.12895900605351474, 0.16203364984762225, 0.972161385775718, 0.9714854093686028, 0.967093727630111, 0.9407038152152131, 0.9407880247999061, 0.941649133573005, 0.940179235804225, 0.9428422950224637, 0.20345089409623807, 0.9424359173646636, 0.9412756347683096, 0.39187745805294694, 0.21234336812130172, 0.08622208729242775, 0.1366201549870213, 0.1807216886462144, 0.17584697597536836, 0.1510697783848176, 0.15300738619031184, 0.22848243255212763, 0.23981052854070184, 0.1748493395233912, 0.17352733376028828, 0.13799868995908782, 0.13196890322770705, 0.13554321022855642, 0.16117519197097374, 0.1663728289644767, 0.13794818268496112, 0.18674453422920145, 0.14049999116216294, 0.19307601424447318, 0.13329184210178524, 0.14121941199067, 0.17084291858614054, 0.16298725047168605, 0.19616771902089392, 0.13886261665973976, 0.134283065219845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06434693929425961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037200534199284263, 9.999999999998899e-05, 9.999999999998899e-05, 0.059721389603812125, 0.05916875476718664, 0.12446222687216324, 0.058511172941763334, 9.999999999998899e-05, 0.011879302858313845, 0.11304002638662258, 0.005721353514935745, 0.03587060820329191, 0.13478303125218716, 0.11028229798363232, 0.1101279842046975, 0.10181836800704314, 0.11143528522628476, 0.2782424913167808, 0.1551296735606673, 0.18900565094532318, 0.10180734449565931, 0.12639715601650148, 0.12119922348250745, 0.06440180134585483, 0.13560240004777901, 0.07275058330365591, 0.24570529232936578, 0.2176449838660547, 0.29475752366706387, 0.23190707935987764, 0.5261369938906847, 0.4957422558599405, 0.5125624590008431, 0.5696969005111043, 0.5243089029666728, 0.5309023850940624, 0.5665046657285587, 0.49774876349125985, 0.5500489552341163, 0.12052985531925586, 0.07145405371726388, 0.0365481279106421, 0.05051107815579181, 0.1671042401144447, 0.09516485492861537, 0.08803734911626959, 0.10360625126126599, 0.08452686914126539, 0.17053342705855978, 0.17630360664871825, 0.20636772700822203, 0.15403778969281323, 0.2516036494819126, 0.19755692272331515, 0.22270654248383703, 0.25011589606027984, 0.21733710462141176, 0.22376320313888076, 0.16779537120066612, 0.12385895943232317, 0.3191837611869003, 0.1674371328544514, 0.15138437081719713, 0.22898298669295758, 0.10149157490020733, 0.09082870064061421, 0.10867954872623942, 0.15303927679052887, 0.07234561180747967, 0.17013102898319354, 0.24326151326480494, 0.1307707450707909, 0.21288269595941833, 0.10522263088039507, 0.012267261793994066, 0.24229623654516208, 0.2578640311642254, 0.15587002058569144, 0.2039728223463826, 0.1701870723028307, 0.2532851316234811, 0.25238129974325385, 0.16633177738237082, 0.2702522231738904, 0.16966146218632272, 0.1961403108072446, 0.1873666828036472, 0.20285401728587527, 0.17736832025565452, 0.17807492117535606, 0.1764040580314704, 0.16875761037060566, 0.1749684240926972, 0.10882902762789204, 0.1377269196536246, 0.07156923136938953, 0.17407534393298973, 0.11246954676270071, 0.06208910754034025, 0.10877968236417368, 0.11531055259519019, 0.16923936091246083, 0.40743296967223874, 0.11367319774498896, 0.0834494054490611, 0.17013245733354598, 0.21464486559805196, 0.04437009783885426, 0.11368274071664564, 0.1697915862960655, 0.2283105599233355, 0.21359517560821217, 0.19404594473590298, 0.2259583742729958, 0.2867192455350902, 0.27027970167409054, 0.1896689988487238, 0.20508592211818044, 0.2640145982939387, 0.22462815207389486, 0.07920720612114251, 0.1262256547345012, 0.09726998885448812, 0.0784451758453133, 0.07771301786725981, 0.10238254940091207, 0.057993396668112096, 0.06275727238713913, 0.12534720647793673]}, "mutation_prompt": null}
{"id": "6d00873c-9dcc-4705-8a3b-5d1178ea186d", "solution": "class AcceleratedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.prev_best_fitness = None\n        self.prev_best_solution = None\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if self.prev_best_fitness is not None:\n                self.mutation_factors *= 0.9 if candidate_fitness < self.prev_best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            if self.prev_best_solution is not None:\n                self.mutation_rate *= 0.99 if np.linalg.norm(candidate_solution - self.prev_best_solution) < 0.1 else 1.01\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            self.prev_best_fitness = best_fitness\n            self.prev_best_solution = best_solution\n\n        return best_solution", "name": "AcceleratedDynamicMutationMetaheuristic", "description": "Utilizing a dynamic mutation strategy with an adaptive mutation rate and an enhanced mutation factor adjustment based on individual performance to accelerate convergence speed.", "configspace": "", "generation": 16, "fitness": 0.10654080058398199, "feedback": "The algorithm AcceleratedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.12953799888648354, 0.16645409112612253, 0.18199798098638598, 0.13771372784673908, 0.13774388020386485, 0.21076927283552793, 0.1475569980189474, 0.1387505991719845, 0.14181610255810573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019287635069477282, 0.0229675841220065, 0.015687681593493874, 0.03712088569840033, 0.028684252789741405, 0.02181459678581632, 0.02790462109847669, 0.02689231744854803, 0.012389474261831679, 0.027083869082919043, 0.00974648079859508, 0.0003575737160957937, 0.025245640288795612, 0.00040881978324325274, 0.02668645490724464, 0.0014763422773614865, 9.999999999998899e-05, 0.020797445406879667, 0.9914247509827085, 0.9936257397249637, 0.9917595410178188, 0.985048789213481, 0.9864336133005577, 0.9881139347970781, 0.9914993529027574, 0.993198198618448, 0.9932534335475895, 0.09741605458044467, 0.043055274644260844, 0.06289207440104261, 0.024335831921626583, 0.032703646027480104, 0.09535944520432071, 0.048849675577060214, 0.08854940005606571, 0.04937973406908058, 0.08787787281611004, 0.09949654702293864, 0.10222620782156466, 0.1616081017115677, 0.0791160096370489, 0.2018604738286699, 0.06314301791708998, 0.08308770005461663, 0.0884906814598524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020536394688997817, 9.999999999998899e-05, 0.00011825204629245523, 9.999999999998899e-05, 9.999999999998899e-05, 0.02800319179203603, 9.999999999998899e-05, 9.999999999998899e-05, 0.015158284148964363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014634799880642091, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018870520798351387, 0.008587905885110936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006184350011487871, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20627730581573656, 0.18296941662284083, 0.1659866362540623, 0.162303494398936, 0.16739679500533877, 0.15901202350881738, 0.23868481877925452, 0.19555597118053225, 0.17321378312886992, 0.030361330886713778, 0.029275400128008222, 0.029638014484019592, 0.024849829965352233, 0.039587763364063666, 0.034331628487497046, 0.03328032042273921, 0.029450550852608504, 0.054027434394802176, 0.10760857804774382, 0.10092751360804308, 0.09448379329318746, 0.08158015751153003, 0.12623098307377512, 0.11297965232112417, 0.10809720901548259, 0.113362763765112, 0.10070039256893437, 0.12134712447434082, 0.15330987740443758, 0.13385362144540358, 0.15661192151848535, 0.1450110888313504, 0.14713225329796764, 0.14948374139705534, 0.1495151152432771, 0.13003644924886137, 0.08177565731276737, 0.08366409422568288, 0.0803144556440728, 0.09570804416323131, 0.09281404728787324, 0.08222880225758544, 0.09502311282259324, 0.11988301209481955, 0.07032770947831524, 0.12687001465200487, 0.1060323098640622, 0.16985866286471696, 0.14148140606442505, 0.11377779052550618, 0.11466199466767879, 0.1552638899318759, 0.13176531297789718, 0.10400021082167787, 9.999999999998899e-05, 0.14589668608741635, 0.13505253751104207, 0.14965498963298396, 0.14479702970118014, 0.0889693333991236, 0.1372134768886526, 0.15485215136076347, 9.999999999998899e-05, 0.11312624191356668, 0.10900014397751745, 0.10613701211337834, 0.16745548956445577, 0.06633930983241132, 0.13475418777402992, 0.09276730252765575, 0.10226876809654806, 0.07306501164883195, 0.2208262583725874, 0.07632176177059646, 0.08084253432580246, 0.07222952250483994, 0.11881097747523361, 0.07080325904799845, 0.08824991160583251, 0.10024115674165457, 0.07545755705630253, 0.17380766995589125, 0.141870591210422, 0.15863968939039008, 0.17035442004268875, 0.15000549829798404, 0.1568249379387967, 0.15751636735154984, 0.1688207184217465, 0.1707044960194285, 0.04043740963448905, 0.034001517298717365, 0.03855189322579622, 0.032486861258355204, 0.024232171581673012, 0.02745127878467979, 0.04365432200483177, 0.0457556687858629, 0.040048393732097454]}, "mutation_prompt": null}
{"id": "33e03147-e942-4c25-a541-b6147ed9eb4e", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improved dynamic mutation strategy by incorporating adaptive mutation rate adjustment based on individual performance and population diversity.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9594589557002606, 0.9603180771485925, 0.9599326672390149, 0.9597403823706, 0.959692951311882, 0.960001165059368, 0.9599661216752187, 0.9601517983418087, 0.9602993558061668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09887232682429226, 0.07128221580075167, 0.056163729528429185, 0.11391241241598105, 0.09898408352649435, 0.05653589856044727, 0.054924317612223605, 0.04192076721370175, 0.09085992801554199, 0.08128639167333818, 0.08414228405311186, 0.07141951919491218, 0.09824192619660843, 0.07404906342517403, 0.07350132542692278, 0.09460789120636581, 0.0735450681498302, 0.10784386010261338, 0.9902945275020003, 0.9912785028371849, 0.14855184159364576, 0.1608084829512405, 0.12895900605351474, 0.16203364984762225, 0.972161385775718, 0.9714854093686028, 0.967093727630111, 0.9407038152152131, 0.9407880247999061, 0.941649133573005, 0.940179235804225, 0.9428422950224637, 0.20345089409623807, 0.9424359173646636, 0.9412756347683096, 0.39187745805294694, 0.21234336812130172, 0.08622208729242775, 0.1366201549870213, 0.1807216886462144, 0.17584697597536836, 0.1510697783848176, 0.15300738619031184, 0.22848243255212763, 0.23981052854070184, 0.1748493395233912, 0.17352733376028828, 0.13799868995908782, 0.13196890322770705, 0.13554321022855642, 0.16117519197097374, 0.1663728289644767, 0.13794818268496112, 0.18674453422920145, 0.14049999116216294, 0.19307601424447318, 0.13329184210178524, 0.14121941199067, 0.17084291858614054, 0.16298725047168605, 0.19616771902089392, 0.13886261665973976, 0.134283065219845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06434693929425961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037200534199284263, 9.999999999998899e-05, 9.999999999998899e-05, 0.059721389603812125, 0.05916875476718664, 0.12446222687216324, 0.058511172941763334, 9.999999999998899e-05, 0.011879302858313845, 0.11304002638662258, 0.005721353514935745, 0.03587060820329191, 0.13478303125218716, 0.11028229798363232, 0.1101279842046975, 0.10181836800704314, 0.11143528522628476, 0.2782424913167808, 0.1551296735606673, 0.18900565094532318, 0.10180734449565931, 0.12639715601650148, 0.12119922348250745, 0.06440180134585483, 0.13560240004777901, 0.07275058330365591, 0.24570529232936578, 0.2176449838660547, 0.29475752366706387, 0.23190707935987764, 0.5261369938906847, 0.4957422558599405, 0.5125624590008431, 0.5696969005111043, 0.5243089029666728, 0.5309023850940624, 0.5665046657285587, 0.49774876349125985, 0.5500489552341163, 0.12052985531925586, 0.07145405371726388, 0.0365481279106421, 0.05051107815579181, 0.1671042401144447, 0.09516485492861537, 0.08803734911626959, 0.10360625126126599, 0.08452686914126539, 0.17053342705855978, 0.17630360664871825, 0.20636772700822203, 0.15403778969281323, 0.2516036494819126, 0.19755692272331515, 0.22270654248383703, 0.25011589606027984, 0.21733710462141176, 0.22376320313888076, 0.16779537120066612, 0.12385895943232317, 0.3191837611869003, 0.1674371328544514, 0.15138437081719713, 0.22898298669295758, 0.10149157490020733, 0.09082870064061421, 0.10867954872623942, 0.15303927679052887, 0.07234561180747967, 0.17013102898319354, 0.24326151326480494, 0.1307707450707909, 0.21288269595941833, 0.10522263088039507, 0.012267261793994066, 0.24229623654516208, 0.2578640311642254, 0.15587002058569144, 0.2039728223463826, 0.1701870723028307, 0.2532851316234811, 0.25238129974325385, 0.16633177738237082, 0.2702522231738904, 0.16966146218632272, 0.1961403108072446, 0.1873666828036472, 0.20285401728587527, 0.17736832025565452, 0.17807492117535606, 0.1764040580314704, 0.16875761037060566, 0.1749684240926972, 0.10882902762789204, 0.1377269196536246, 0.07156923136938953, 0.17407534393298973, 0.11246954676270071, 0.06208910754034025, 0.10877968236417368, 0.11531055259519019, 0.16923936091246083, 0.40743296967223874, 0.11367319774498896, 0.0834494054490611, 0.17013245733354598, 0.21464486559805196, 0.04437009783885426, 0.11368274071664564, 0.1697915862960655, 0.2283105599233355, 0.21359517560821217, 0.19404594473590298, 0.2259583742729958, 0.2867192455350902, 0.27027970167409054, 0.1896689988487238, 0.20508592211818044, 0.2640145982939387, 0.22462815207389486, 0.07920720612114251, 0.1262256547345012, 0.09726998885448812, 0.0784451758453133, 0.07771301786725981, 0.10238254940091207, 0.057993396668112096, 0.06275727238713913, 0.12534720647793673]}, "mutation_prompt": null}
{"id": "71f1c3ff-f44d-42d2-ae33-6b219c234736", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improved dynamic mutation strategy by incorporating adaptive mutation rate adjustment based on individual performance and population diversity.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9594589557002606, 0.9603180771485925, 0.9599326672390149, 0.9597403823706, 0.959692951311882, 0.960001165059368, 0.9599661216752187, 0.9601517983418087, 0.9602993558061668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09887232682429226, 0.07128221580075167, 0.056163729528429185, 0.11391241241598105, 0.09898408352649435, 0.05653589856044727, 0.054924317612223605, 0.04192076721370175, 0.09085992801554199, 0.08128639167333818, 0.08414228405311186, 0.07141951919491218, 0.09824192619660843, 0.07404906342517403, 0.07350132542692278, 0.09460789120636581, 0.0735450681498302, 0.10784386010261338, 0.9902945275020003, 0.9912785028371849, 0.14855184159364576, 0.1608084829512405, 0.12895900605351474, 0.16203364984762225, 0.972161385775718, 0.9714854093686028, 0.967093727630111, 0.9407038152152131, 0.9407880247999061, 0.941649133573005, 0.940179235804225, 0.9428422950224637, 0.20345089409623807, 0.9424359173646636, 0.9412756347683096, 0.39187745805294694, 0.21234336812130172, 0.08622208729242775, 0.1366201549870213, 0.1807216886462144, 0.17584697597536836, 0.1510697783848176, 0.15300738619031184, 0.22848243255212763, 0.23981052854070184, 0.1748493395233912, 0.17352733376028828, 0.13799868995908782, 0.13196890322770705, 0.13554321022855642, 0.16117519197097374, 0.1663728289644767, 0.13794818268496112, 0.18674453422920145, 0.14049999116216294, 0.19307601424447318, 0.13329184210178524, 0.14121941199067, 0.17084291858614054, 0.16298725047168605, 0.19616771902089392, 0.13886261665973976, 0.134283065219845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06434693929425961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037200534199284263, 9.999999999998899e-05, 9.999999999998899e-05, 0.059721389603812125, 0.05916875476718664, 0.12446222687216324, 0.058511172941763334, 9.999999999998899e-05, 0.011879302858313845, 0.11304002638662258, 0.005721353514935745, 0.03587060820329191, 0.13478303125218716, 0.11028229798363232, 0.1101279842046975, 0.10181836800704314, 0.11143528522628476, 0.2782424913167808, 0.1551296735606673, 0.18900565094532318, 0.10180734449565931, 0.12639715601650148, 0.12119922348250745, 0.06440180134585483, 0.13560240004777901, 0.07275058330365591, 0.24570529232936578, 0.2176449838660547, 0.29475752366706387, 0.23190707935987764, 0.5261369938906847, 0.4957422558599405, 0.5125624590008431, 0.5696969005111043, 0.5243089029666728, 0.5309023850940624, 0.5665046657285587, 0.49774876349125985, 0.5500489552341163, 0.12052985531925586, 0.07145405371726388, 0.0365481279106421, 0.05051107815579181, 0.1671042401144447, 0.09516485492861537, 0.08803734911626959, 0.10360625126126599, 0.08452686914126539, 0.17053342705855978, 0.17630360664871825, 0.20636772700822203, 0.15403778969281323, 0.2516036494819126, 0.19755692272331515, 0.22270654248383703, 0.25011589606027984, 0.21733710462141176, 0.22376320313888076, 0.16779537120066612, 0.12385895943232317, 0.3191837611869003, 0.1674371328544514, 0.15138437081719713, 0.22898298669295758, 0.10149157490020733, 0.09082870064061421, 0.10867954872623942, 0.15303927679052887, 0.07234561180747967, 0.17013102898319354, 0.24326151326480494, 0.1307707450707909, 0.21288269595941833, 0.10522263088039507, 0.012267261793994066, 0.24229623654516208, 0.2578640311642254, 0.15587002058569144, 0.2039728223463826, 0.1701870723028307, 0.2532851316234811, 0.25238129974325385, 0.16633177738237082, 0.2702522231738904, 0.16966146218632272, 0.1961403108072446, 0.1873666828036472, 0.20285401728587527, 0.17736832025565452, 0.17807492117535606, 0.1764040580314704, 0.16875761037060566, 0.1749684240926972, 0.10882902762789204, 0.1377269196536246, 0.07156923136938953, 0.17407534393298973, 0.11246954676270071, 0.06208910754034025, 0.10877968236417368, 0.11531055259519019, 0.16923936091246083, 0.40743296967223874, 0.11367319774498896, 0.0834494054490611, 0.17013245733354598, 0.21464486559805196, 0.04437009783885426, 0.11368274071664564, 0.1697915862960655, 0.2283105599233355, 0.21359517560821217, 0.19404594473590298, 0.2259583742729958, 0.2867192455350902, 0.27027970167409054, 0.1896689988487238, 0.20508592211818044, 0.2640145982939387, 0.22462815207389486, 0.07920720612114251, 0.1262256547345012, 0.09726998885448812, 0.0784451758453133, 0.07771301786725981, 0.10238254940091207, 0.057993396668112096, 0.06275727238713913, 0.12534720647793673]}, "mutation_prompt": null}
{"id": "8fb81407-0288-41ce-8601-7b83a542eb14", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improved dynamic mutation strategy by incorporating adaptive mutation rate adjustment based on individual performance and population diversity.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9594589557002606, 0.9603180771485925, 0.9599326672390149, 0.9597403823706, 0.959692951311882, 0.960001165059368, 0.9599661216752187, 0.9601517983418087, 0.9602993558061668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09887232682429226, 0.07128221580075167, 0.056163729528429185, 0.11391241241598105, 0.09898408352649435, 0.05653589856044727, 0.054924317612223605, 0.04192076721370175, 0.09085992801554199, 0.08128639167333818, 0.08414228405311186, 0.07141951919491218, 0.09824192619660843, 0.07404906342517403, 0.07350132542692278, 0.09460789120636581, 0.0735450681498302, 0.10784386010261338, 0.9902945275020003, 0.9912785028371849, 0.14855184159364576, 0.1608084829512405, 0.12895900605351474, 0.16203364984762225, 0.972161385775718, 0.9714854093686028, 0.967093727630111, 0.9407038152152131, 0.9407880247999061, 0.941649133573005, 0.940179235804225, 0.9428422950224637, 0.20345089409623807, 0.9424359173646636, 0.9412756347683096, 0.39187745805294694, 0.21234336812130172, 0.08622208729242775, 0.1366201549870213, 0.1807216886462144, 0.17584697597536836, 0.1510697783848176, 0.15300738619031184, 0.22848243255212763, 0.23981052854070184, 0.1748493395233912, 0.17352733376028828, 0.13799868995908782, 0.13196890322770705, 0.13554321022855642, 0.16117519197097374, 0.1663728289644767, 0.13794818268496112, 0.18674453422920145, 0.14049999116216294, 0.19307601424447318, 0.13329184210178524, 0.14121941199067, 0.17084291858614054, 0.16298725047168605, 0.19616771902089392, 0.13886261665973976, 0.134283065219845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06434693929425961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037200534199284263, 9.999999999998899e-05, 9.999999999998899e-05, 0.059721389603812125, 0.05916875476718664, 0.12446222687216324, 0.058511172941763334, 9.999999999998899e-05, 0.011879302858313845, 0.11304002638662258, 0.005721353514935745, 0.03587060820329191, 0.13478303125218716, 0.11028229798363232, 0.1101279842046975, 0.10181836800704314, 0.11143528522628476, 0.2782424913167808, 0.1551296735606673, 0.18900565094532318, 0.10180734449565931, 0.12639715601650148, 0.12119922348250745, 0.06440180134585483, 0.13560240004777901, 0.07275058330365591, 0.24570529232936578, 0.2176449838660547, 0.29475752366706387, 0.23190707935987764, 0.5261369938906847, 0.4957422558599405, 0.5125624590008431, 0.5696969005111043, 0.5243089029666728, 0.5309023850940624, 0.5665046657285587, 0.49774876349125985, 0.5500489552341163, 0.12052985531925586, 0.07145405371726388, 0.0365481279106421, 0.05051107815579181, 0.1671042401144447, 0.09516485492861537, 0.08803734911626959, 0.10360625126126599, 0.08452686914126539, 0.17053342705855978, 0.17630360664871825, 0.20636772700822203, 0.15403778969281323, 0.2516036494819126, 0.19755692272331515, 0.22270654248383703, 0.25011589606027984, 0.21733710462141176, 0.22376320313888076, 0.16779537120066612, 0.12385895943232317, 0.3191837611869003, 0.1674371328544514, 0.15138437081719713, 0.22898298669295758, 0.10149157490020733, 0.09082870064061421, 0.10867954872623942, 0.15303927679052887, 0.07234561180747967, 0.17013102898319354, 0.24326151326480494, 0.1307707450707909, 0.21288269595941833, 0.10522263088039507, 0.012267261793994066, 0.24229623654516208, 0.2578640311642254, 0.15587002058569144, 0.2039728223463826, 0.1701870723028307, 0.2532851316234811, 0.25238129974325385, 0.16633177738237082, 0.2702522231738904, 0.16966146218632272, 0.1961403108072446, 0.1873666828036472, 0.20285401728587527, 0.17736832025565452, 0.17807492117535606, 0.1764040580314704, 0.16875761037060566, 0.1749684240926972, 0.10882902762789204, 0.1377269196536246, 0.07156923136938953, 0.17407534393298973, 0.11246954676270071, 0.06208910754034025, 0.10877968236417368, 0.11531055259519019, 0.16923936091246083, 0.40743296967223874, 0.11367319774498896, 0.0834494054490611, 0.17013245733354598, 0.21464486559805196, 0.04437009783885426, 0.11368274071664564, 0.1697915862960655, 0.2283105599233355, 0.21359517560821217, 0.19404594473590298, 0.2259583742729958, 0.2867192455350902, 0.27027970167409054, 0.1896689988487238, 0.20508592211818044, 0.2640145982939387, 0.22462815207389486, 0.07920720612114251, 0.1262256547345012, 0.09726998885448812, 0.0784451758453133, 0.07771301786725981, 0.10238254940091207, 0.057993396668112096, 0.06275727238713913, 0.12534720647793673]}, "mutation_prompt": null}
{"id": "8286e8e9-6900-4791-b465-9af702b036ef", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improved dynamic mutation strategy by incorporating adaptive mutation rate adjustment based on individual performance and population diversity.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9594589557002606, 0.9603180771485925, 0.9599326672390149, 0.9597403823706, 0.959692951311882, 0.960001165059368, 0.9599661216752187, 0.9601517983418087, 0.9602993558061668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09887232682429226, 0.07128221580075167, 0.056163729528429185, 0.11391241241598105, 0.09898408352649435, 0.05653589856044727, 0.054924317612223605, 0.04192076721370175, 0.09085992801554199, 0.08128639167333818, 0.08414228405311186, 0.07141951919491218, 0.09824192619660843, 0.07404906342517403, 0.07350132542692278, 0.09460789120636581, 0.0735450681498302, 0.10784386010261338, 0.9902945275020003, 0.9912785028371849, 0.14855184159364576, 0.1608084829512405, 0.12895900605351474, 0.16203364984762225, 0.972161385775718, 0.9714854093686028, 0.967093727630111, 0.9407038152152131, 0.9407880247999061, 0.941649133573005, 0.940179235804225, 0.9428422950224637, 0.20345089409623807, 0.9424359173646636, 0.9412756347683096, 0.39187745805294694, 0.21234336812130172, 0.08622208729242775, 0.1366201549870213, 0.1807216886462144, 0.17584697597536836, 0.1510697783848176, 0.15300738619031184, 0.22848243255212763, 0.23981052854070184, 0.1748493395233912, 0.17352733376028828, 0.13799868995908782, 0.13196890322770705, 0.13554321022855642, 0.16117519197097374, 0.1663728289644767, 0.13794818268496112, 0.18674453422920145, 0.14049999116216294, 0.19307601424447318, 0.13329184210178524, 0.14121941199067, 0.17084291858614054, 0.16298725047168605, 0.19616771902089392, 0.13886261665973976, 0.134283065219845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06434693929425961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037200534199284263, 9.999999999998899e-05, 9.999999999998899e-05, 0.059721389603812125, 0.05916875476718664, 0.12446222687216324, 0.058511172941763334, 9.999999999998899e-05, 0.011879302858313845, 0.11304002638662258, 0.005721353514935745, 0.03587060820329191, 0.13478303125218716, 0.11028229798363232, 0.1101279842046975, 0.10181836800704314, 0.11143528522628476, 0.2782424913167808, 0.1551296735606673, 0.18900565094532318, 0.10180734449565931, 0.12639715601650148, 0.12119922348250745, 0.06440180134585483, 0.13560240004777901, 0.07275058330365591, 0.24570529232936578, 0.2176449838660547, 0.29475752366706387, 0.23190707935987764, 0.5261369938906847, 0.4957422558599405, 0.5125624590008431, 0.5696969005111043, 0.5243089029666728, 0.5309023850940624, 0.5665046657285587, 0.49774876349125985, 0.5500489552341163, 0.12052985531925586, 0.07145405371726388, 0.0365481279106421, 0.05051107815579181, 0.1671042401144447, 0.09516485492861537, 0.08803734911626959, 0.10360625126126599, 0.08452686914126539, 0.17053342705855978, 0.17630360664871825, 0.20636772700822203, 0.15403778969281323, 0.2516036494819126, 0.19755692272331515, 0.22270654248383703, 0.25011589606027984, 0.21733710462141176, 0.22376320313888076, 0.16779537120066612, 0.12385895943232317, 0.3191837611869003, 0.1674371328544514, 0.15138437081719713, 0.22898298669295758, 0.10149157490020733, 0.09082870064061421, 0.10867954872623942, 0.15303927679052887, 0.07234561180747967, 0.17013102898319354, 0.24326151326480494, 0.1307707450707909, 0.21288269595941833, 0.10522263088039507, 0.012267261793994066, 0.24229623654516208, 0.2578640311642254, 0.15587002058569144, 0.2039728223463826, 0.1701870723028307, 0.2532851316234811, 0.25238129974325385, 0.16633177738237082, 0.2702522231738904, 0.16966146218632272, 0.1961403108072446, 0.1873666828036472, 0.20285401728587527, 0.17736832025565452, 0.17807492117535606, 0.1764040580314704, 0.16875761037060566, 0.1749684240926972, 0.10882902762789204, 0.1377269196536246, 0.07156923136938953, 0.17407534393298973, 0.11246954676270071, 0.06208910754034025, 0.10877968236417368, 0.11531055259519019, 0.16923936091246083, 0.40743296967223874, 0.11367319774498896, 0.0834494054490611, 0.17013245733354598, 0.21464486559805196, 0.04437009783885426, 0.11368274071664564, 0.1697915862960655, 0.2283105599233355, 0.21359517560821217, 0.19404594473590298, 0.2259583742729958, 0.2867192455350902, 0.27027970167409054, 0.1896689988487238, 0.20508592211818044, 0.2640145982939387, 0.22462815207389486, 0.07920720612114251, 0.1262256547345012, 0.09726998885448812, 0.0784451758453133, 0.07771301786725981, 0.10238254940091207, 0.057993396668112096, 0.06275727238713913, 0.12534720647793673]}, "mutation_prompt": null}
{"id": "7778b19a-481e-4249-b290-58c744c6b118", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improved dynamic mutation strategy by incorporating adaptive mutation rate adjustment based on individual performance and population diversity.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9594589557002606, 0.9603180771485925, 0.9599326672390149, 0.9597403823706, 0.959692951311882, 0.960001165059368, 0.9599661216752187, 0.9601517983418087, 0.9602993558061668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09887232682429226, 0.07128221580075167, 0.056163729528429185, 0.11391241241598105, 0.09898408352649435, 0.05653589856044727, 0.054924317612223605, 0.04192076721370175, 0.09085992801554199, 0.08128639167333818, 0.08414228405311186, 0.07141951919491218, 0.09824192619660843, 0.07404906342517403, 0.07350132542692278, 0.09460789120636581, 0.0735450681498302, 0.10784386010261338, 0.9902945275020003, 0.9912785028371849, 0.14855184159364576, 0.1608084829512405, 0.12895900605351474, 0.16203364984762225, 0.972161385775718, 0.9714854093686028, 0.967093727630111, 0.9407038152152131, 0.9407880247999061, 0.941649133573005, 0.940179235804225, 0.9428422950224637, 0.20345089409623807, 0.9424359173646636, 0.9412756347683096, 0.39187745805294694, 0.21234336812130172, 0.08622208729242775, 0.1366201549870213, 0.1807216886462144, 0.17584697597536836, 0.1510697783848176, 0.15300738619031184, 0.22848243255212763, 0.23981052854070184, 0.1748493395233912, 0.17352733376028828, 0.13799868995908782, 0.13196890322770705, 0.13554321022855642, 0.16117519197097374, 0.1663728289644767, 0.13794818268496112, 0.18674453422920145, 0.14049999116216294, 0.19307601424447318, 0.13329184210178524, 0.14121941199067, 0.17084291858614054, 0.16298725047168605, 0.19616771902089392, 0.13886261665973976, 0.134283065219845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06434693929425961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037200534199284263, 9.999999999998899e-05, 9.999999999998899e-05, 0.059721389603812125, 0.05916875476718664, 0.12446222687216324, 0.058511172941763334, 9.999999999998899e-05, 0.011879302858313845, 0.11304002638662258, 0.005721353514935745, 0.03587060820329191, 0.13478303125218716, 0.11028229798363232, 0.1101279842046975, 0.10181836800704314, 0.11143528522628476, 0.2782424913167808, 0.1551296735606673, 0.18900565094532318, 0.10180734449565931, 0.12639715601650148, 0.12119922348250745, 0.06440180134585483, 0.13560240004777901, 0.07275058330365591, 0.24570529232936578, 0.2176449838660547, 0.29475752366706387, 0.23190707935987764, 0.5261369938906847, 0.4957422558599405, 0.5125624590008431, 0.5696969005111043, 0.5243089029666728, 0.5309023850940624, 0.5665046657285587, 0.49774876349125985, 0.5500489552341163, 0.12052985531925586, 0.07145405371726388, 0.0365481279106421, 0.05051107815579181, 0.1671042401144447, 0.09516485492861537, 0.08803734911626959, 0.10360625126126599, 0.08452686914126539, 0.17053342705855978, 0.17630360664871825, 0.20636772700822203, 0.15403778969281323, 0.2516036494819126, 0.19755692272331515, 0.22270654248383703, 0.25011589606027984, 0.21733710462141176, 0.22376320313888076, 0.16779537120066612, 0.12385895943232317, 0.3191837611869003, 0.1674371328544514, 0.15138437081719713, 0.22898298669295758, 0.10149157490020733, 0.09082870064061421, 0.10867954872623942, 0.15303927679052887, 0.07234561180747967, 0.17013102898319354, 0.24326151326480494, 0.1307707450707909, 0.21288269595941833, 0.10522263088039507, 0.012267261793994066, 0.24229623654516208, 0.2578640311642254, 0.15587002058569144, 0.2039728223463826, 0.1701870723028307, 0.2532851316234811, 0.25238129974325385, 0.16633177738237082, 0.2702522231738904, 0.16966146218632272, 0.1961403108072446, 0.1873666828036472, 0.20285401728587527, 0.17736832025565452, 0.17807492117535606, 0.1764040580314704, 0.16875761037060566, 0.1749684240926972, 0.10882902762789204, 0.1377269196536246, 0.07156923136938953, 0.17407534393298973, 0.11246954676270071, 0.06208910754034025, 0.10877968236417368, 0.11531055259519019, 0.16923936091246083, 0.40743296967223874, 0.11367319774498896, 0.0834494054490611, 0.17013245733354598, 0.21464486559805196, 0.04437009783885426, 0.11368274071664564, 0.1697915862960655, 0.2283105599233355, 0.21359517560821217, 0.19404594473590298, 0.2259583742729958, 0.2867192455350902, 0.27027970167409054, 0.1896689988487238, 0.20508592211818044, 0.2640145982939387, 0.22462815207389486, 0.07920720612114251, 0.1262256547345012, 0.09726998885448812, 0.0784451758453133, 0.07771301786725981, 0.10238254940091207, 0.057993396668112096, 0.06275727238713913, 0.12534720647793673]}, "mutation_prompt": null}
{"id": "f4f64bea-fc2f-4cae-b929-95cd799ed327", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improved dynamic mutation strategy by incorporating adaptive mutation rate adjustment based on individual performance and population diversity.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9594589557002606, 0.9603180771485925, 0.9599326672390149, 0.9597403823706, 0.959692951311882, 0.960001165059368, 0.9599661216752187, 0.9601517983418087, 0.9602993558061668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09887232682429226, 0.07128221580075167, 0.056163729528429185, 0.11391241241598105, 0.09898408352649435, 0.05653589856044727, 0.054924317612223605, 0.04192076721370175, 0.09085992801554199, 0.08128639167333818, 0.08414228405311186, 0.07141951919491218, 0.09824192619660843, 0.07404906342517403, 0.07350132542692278, 0.09460789120636581, 0.0735450681498302, 0.10784386010261338, 0.9902945275020003, 0.9912785028371849, 0.14855184159364576, 0.1608084829512405, 0.12895900605351474, 0.16203364984762225, 0.972161385775718, 0.9714854093686028, 0.967093727630111, 0.9407038152152131, 0.9407880247999061, 0.941649133573005, 0.940179235804225, 0.9428422950224637, 0.20345089409623807, 0.9424359173646636, 0.9412756347683096, 0.39187745805294694, 0.21234336812130172, 0.08622208729242775, 0.1366201549870213, 0.1807216886462144, 0.17584697597536836, 0.1510697783848176, 0.15300738619031184, 0.22848243255212763, 0.23981052854070184, 0.1748493395233912, 0.17352733376028828, 0.13799868995908782, 0.13196890322770705, 0.13554321022855642, 0.16117519197097374, 0.1663728289644767, 0.13794818268496112, 0.18674453422920145, 0.14049999116216294, 0.19307601424447318, 0.13329184210178524, 0.14121941199067, 0.17084291858614054, 0.16298725047168605, 0.19616771902089392, 0.13886261665973976, 0.134283065219845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06434693929425961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037200534199284263, 9.999999999998899e-05, 9.999999999998899e-05, 0.059721389603812125, 0.05916875476718664, 0.12446222687216324, 0.058511172941763334, 9.999999999998899e-05, 0.011879302858313845, 0.11304002638662258, 0.005721353514935745, 0.03587060820329191, 0.13478303125218716, 0.11028229798363232, 0.1101279842046975, 0.10181836800704314, 0.11143528522628476, 0.2782424913167808, 0.1551296735606673, 0.18900565094532318, 0.10180734449565931, 0.12639715601650148, 0.12119922348250745, 0.06440180134585483, 0.13560240004777901, 0.07275058330365591, 0.24570529232936578, 0.2176449838660547, 0.29475752366706387, 0.23190707935987764, 0.5261369938906847, 0.4957422558599405, 0.5125624590008431, 0.5696969005111043, 0.5243089029666728, 0.5309023850940624, 0.5665046657285587, 0.49774876349125985, 0.5500489552341163, 0.12052985531925586, 0.07145405371726388, 0.0365481279106421, 0.05051107815579181, 0.1671042401144447, 0.09516485492861537, 0.08803734911626959, 0.10360625126126599, 0.08452686914126539, 0.17053342705855978, 0.17630360664871825, 0.20636772700822203, 0.15403778969281323, 0.2516036494819126, 0.19755692272331515, 0.22270654248383703, 0.25011589606027984, 0.21733710462141176, 0.22376320313888076, 0.16779537120066612, 0.12385895943232317, 0.3191837611869003, 0.1674371328544514, 0.15138437081719713, 0.22898298669295758, 0.10149157490020733, 0.09082870064061421, 0.10867954872623942, 0.15303927679052887, 0.07234561180747967, 0.17013102898319354, 0.24326151326480494, 0.1307707450707909, 0.21288269595941833, 0.10522263088039507, 0.012267261793994066, 0.24229623654516208, 0.2578640311642254, 0.15587002058569144, 0.2039728223463826, 0.1701870723028307, 0.2532851316234811, 0.25238129974325385, 0.16633177738237082, 0.2702522231738904, 0.16966146218632272, 0.1961403108072446, 0.1873666828036472, 0.20285401728587527, 0.17736832025565452, 0.17807492117535606, 0.1764040580314704, 0.16875761037060566, 0.1749684240926972, 0.10882902762789204, 0.1377269196536246, 0.07156923136938953, 0.17407534393298973, 0.11246954676270071, 0.06208910754034025, 0.10877968236417368, 0.11531055259519019, 0.16923936091246083, 0.40743296967223874, 0.11367319774498896, 0.0834494054490611, 0.17013245733354598, 0.21464486559805196, 0.04437009783885426, 0.11368274071664564, 0.1697915862960655, 0.2283105599233355, 0.21359517560821217, 0.19404594473590298, 0.2259583742729958, 0.2867192455350902, 0.27027970167409054, 0.1896689988487238, 0.20508592211818044, 0.2640145982939387, 0.22462815207389486, 0.07920720612114251, 0.1262256547345012, 0.09726998885448812, 0.0784451758453133, 0.07771301786725981, 0.10238254940091207, 0.057993396668112096, 0.06275727238713913, 0.12534720647793673]}, "mutation_prompt": null}
{"id": "6f65e0da-61bf-4eeb-8842-ca13cc8c4d14", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n                # Update mutation rate based on fitness improvement\n                self.mutation_rate *= 0.95\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n        return best_solution", "name": "EnhancedDynamicMutationMetaheuristic", "description": "Enhanced dynamic mutation strategy by introducing a non-uniform mutation rate adaptation mechanism based on individual fitness improvement for faster convergence.", "configspace": "", "generation": 23, "fitness": 0.17726943277419077, "feedback": "The algorithm EnhancedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.3136967626999706, 0.33395315276490045, 0.27927404925873756, 0.3393113659457687, 0.39564504344150986, 0.30562528074290063, 0.29850829447811955, 0.3317017948529086, 0.4000674383552366, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004138941797305451, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09638026423796675, 0.10956307414171074, 0.06736396018607138, 0.08882503490974236, 0.10009842554744286, 0.08802444881918836, 0.0801185540670224, 0.07812208039690527, 0.09423560320527391, 0.0789765614202006, 0.09212459745508317, 0.09132382846911391, 0.0831699025067828, 0.05495286764899354, 0.10043439186814118, 0.08405306077072017, 0.07191800125008652, 0.0937190382883265, 0.9920528084219226, 0.9839395046484337, 0.10465809008168381, 0.15295256066683338, 0.9528429185335291, 0.9684264175535718, 0.9647458427588207, 0.9840145195220308, 0.983491169195847, 0.20913209770843155, 0.31442205674589885, 0.3159084674715532, 0.27552065624119026, 0.20360897869782157, 0.25679051044955603, 0.22523358377278357, 0.3730693490053172, 0.26454597403589, 0.20436103990335075, 0.238829424396095, 0.2976803099128613, 0.20420596971224836, 0.354401901513382, 0.2970262162504669, 0.27276500918225477, 0.23799210666222848, 0.23695131457636087, 0.11487231354091199, 0.18060225696028043, 0.11940050534552193, 0.11443495212888888, 0.13675184544554686, 0.12736405270207252, 0.11535988354511095, 0.14053665669840698, 0.11624865486568559, 0.10922959776840746, 0.11472071488866697, 0.1118678505354943, 0.09897877950707934, 0.13907761940896635, 0.10862029542706386, 0.13005371882223804, 0.12784616044616282, 0.11233678851878592, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004974739229651748, 0.11683417518809835, 0.13019121358166508, 0.16270245561229857, 0.12240227071036314, 0.08136049782951593, 0.024536823894554805, 0.15082986278619903, 0.046253351717714386, 0.06723729056455563, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0640459075210954, 0.0569855785436334, 0.056700593553604794, 0.07296963827209912, 0.055023564104909606, 0.10499390071286452, 0.052647187294093234, 0.08690057780129079, 0.05257736083261921, 0.3299688868007121, 0.35771206052204985, 0.34421140892133295, 0.34921595076825085, 0.38322910013133116, 0.3758004574861964, 0.31462785809884697, 0.3159238502619117, 0.3162346208792357, 0.11418020945237073, 0.05184322555426879, 0.09736552561992062, 0.1076595720292004, 0.11496202600727157, 0.10498356141946585, 0.09543152024699919, 0.10739793113076446, 0.09590378521389553, 0.15659710691212114, 0.16095976336762252, 0.15374009547355239, 0.1618009185220144, 0.22529501118473405, 0.1512953998268195, 0.14523002103869165, 0.14060236624953792, 0.1436215033491811, 0.23908669287490858, 0.24529743486148725, 0.25319548027082994, 0.22319905007379937, 0.2205303079595422, 0.21654677620092821, 0.24489269073857245, 0.265009388006598, 0.14772455330115664, 0.19366181887280232, 0.21591874833712021, 0.14061822522327916, 0.1417799703410907, 0.1663713786278853, 0.18245987039385803, 0.1773792702869541, 0.17533477169476097, 0.14808458519764645, 0.22591509443891677, 0.22863843233630887, 0.1882778689152791, 0.19498251009631085, 0.1971030036875524, 0.21440920948882825, 0.2041305572613341, 0.21929069633224074, 0.2104368555767071, 0.20482824621743934, 0.19843269859450596, 0.18914328165517014, 0.19323236617839556, 0.17846910850114783, 0.16762366284630847, 0.16964824504737386, 0.1827203599012056, 0.16641003221177286, 0.18144027440443766, 0.13042815743130887, 0.10425535559006371, 0.40927097477603025, 0.19097371232948024, 0.06158801128694502, 0.10812770670582872, 0.12248968356171464, 0.16650427990749628, 0.3441133823852738, 0.11227736143698308, 0.08282363131305615, 0.16942759100956006, 0.20791303419726326, 0.043912822174913324, 0.11181039515225566, 0.16853910483985235, 0.3904109366129843, 0.18779226090128864, 0.19461200405418144, 0.1775648465604066, 0.19539516499058962, 0.17675659861327053, 0.17957991621436686, 0.18176167928194586, 0.18838560001112303, 0.18631751523371298, 0.0927024358188695, 0.10137315593142315, 0.08310809176788048, 0.09226874462720258, 0.08755715272082853, 0.09146933352276065, 0.09349775099212654, 0.08634282833945339, 0.08944201736409019]}, "mutation_prompt": null}
{"id": "274497f0-2263-439c-b788-33e45a73ad16", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n                # Update mutation rate based on fitness improvement\n                self.mutation_rate *= 0.95\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n        return best_solution", "name": "EnhancedAdaptiveDynamicMutationMetaheuristic", "description": "Enhanced Adaptive Dynamic Mutation Metaheuristic with improved mutation rate adaptation based on individual fitness improvement for faster convergence rate.", "configspace": "", "generation": 24, "fitness": 0.17726943277419077, "feedback": "The algorithm EnhancedAdaptiveDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.3136967626999706, 0.33395315276490045, 0.27927404925873756, 0.3393113659457687, 0.39564504344150986, 0.30562528074290063, 0.29850829447811955, 0.3317017948529086, 0.4000674383552366, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004138941797305451, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09638026423796675, 0.10956307414171074, 0.06736396018607138, 0.08882503490974236, 0.10009842554744286, 0.08802444881918836, 0.0801185540670224, 0.07812208039690527, 0.09423560320527391, 0.0789765614202006, 0.09212459745508317, 0.09132382846911391, 0.0831699025067828, 0.05495286764899354, 0.10043439186814118, 0.08405306077072017, 0.07191800125008652, 0.0937190382883265, 0.9920528084219226, 0.9839395046484337, 0.10465809008168381, 0.15295256066683338, 0.9528429185335291, 0.9684264175535718, 0.9647458427588207, 0.9840145195220308, 0.983491169195847, 0.20913209770843155, 0.31442205674589885, 0.3159084674715532, 0.27552065624119026, 0.20360897869782157, 0.25679051044955603, 0.22523358377278357, 0.3730693490053172, 0.26454597403589, 0.20436103990335075, 0.238829424396095, 0.2976803099128613, 0.20420596971224836, 0.354401901513382, 0.2970262162504669, 0.27276500918225477, 0.23799210666222848, 0.23695131457636087, 0.11487231354091199, 0.18060225696028043, 0.11940050534552193, 0.11443495212888888, 0.13675184544554686, 0.12736405270207252, 0.11535988354511095, 0.14053665669840698, 0.11624865486568559, 0.10922959776840746, 0.11472071488866697, 0.1118678505354943, 0.09897877950707934, 0.13907761940896635, 0.10862029542706386, 0.13005371882223804, 0.12784616044616282, 0.11233678851878592, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004974739229651748, 0.11683417518809835, 0.13019121358166508, 0.16270245561229857, 0.12240227071036314, 0.08136049782951593, 0.024536823894554805, 0.15082986278619903, 0.046253351717714386, 0.06723729056455563, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0640459075210954, 0.0569855785436334, 0.056700593553604794, 0.07296963827209912, 0.055023564104909606, 0.10499390071286452, 0.052647187294093234, 0.08690057780129079, 0.05257736083261921, 0.3299688868007121, 0.35771206052204985, 0.34421140892133295, 0.34921595076825085, 0.38322910013133116, 0.3758004574861964, 0.31462785809884697, 0.3159238502619117, 0.3162346208792357, 0.11418020945237073, 0.05184322555426879, 0.09736552561992062, 0.1076595720292004, 0.11496202600727157, 0.10498356141946585, 0.09543152024699919, 0.10739793113076446, 0.09590378521389553, 0.15659710691212114, 0.16095976336762252, 0.15374009547355239, 0.1618009185220144, 0.22529501118473405, 0.1512953998268195, 0.14523002103869165, 0.14060236624953792, 0.1436215033491811, 0.23908669287490858, 0.24529743486148725, 0.25319548027082994, 0.22319905007379937, 0.2205303079595422, 0.21654677620092821, 0.24489269073857245, 0.265009388006598, 0.14772455330115664, 0.19366181887280232, 0.21591874833712021, 0.14061822522327916, 0.1417799703410907, 0.1663713786278853, 0.18245987039385803, 0.1773792702869541, 0.17533477169476097, 0.14808458519764645, 0.22591509443891677, 0.22863843233630887, 0.1882778689152791, 0.19498251009631085, 0.1971030036875524, 0.21440920948882825, 0.2041305572613341, 0.21929069633224074, 0.2104368555767071, 0.20482824621743934, 0.19843269859450596, 0.18914328165517014, 0.19323236617839556, 0.17846910850114783, 0.16762366284630847, 0.16964824504737386, 0.1827203599012056, 0.16641003221177286, 0.18144027440443766, 0.13042815743130887, 0.10425535559006371, 0.40927097477603025, 0.19097371232948024, 0.06158801128694502, 0.10812770670582872, 0.12248968356171464, 0.16650427990749628, 0.3441133823852738, 0.11227736143698308, 0.08282363131305615, 0.16942759100956006, 0.20791303419726326, 0.043912822174913324, 0.11181039515225566, 0.16853910483985235, 0.3904109366129843, 0.18779226090128864, 0.19461200405418144, 0.1775648465604066, 0.19539516499058962, 0.17675659861327053, 0.17957991621436686, 0.18176167928194586, 0.18838560001112303, 0.18631751523371298, 0.0927024358188695, 0.10137315593142315, 0.08310809176788048, 0.09226874462720258, 0.08755715272082853, 0.09146933352276065, 0.09349775099212654, 0.08634282833945339, 0.08944201736409019]}, "mutation_prompt": null}
{"id": "17305366-003b-4ba7-af89-32a652f28d64", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.95 if candidate_fitness < best_fitness else 1.05\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.98\n\n        return best_solution", "name": "EnhancedDynamicMutationMetaheuristic", "description": "ImprovedDynamicMutationMetaheuristic algorithm with enhanced exploration-exploitation balance through adaptive mutation rate and factor adjustment based on individual performance and population diversity.", "configspace": "", "generation": 25, "fitness": 0.1812026878831975, "feedback": "The algorithm EnhancedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9790046661348253, 0.9790369079435131, 0.9791639702528858, 0.9785480622712096, 0.9779918905949228, 0.979139432419941, 0.9787791809457481, 0.9791258897099959, 0.9776953824707966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06979514277322074, 0.09510565722225861, 0.015597439435126592, 0.08831437454458246, 0.11472882220340452, 0.0455792382033402, 0.0852027984419319, 0.07046326973049089, 0.0535984545347481, 0.05079940736587374, 0.025998826377709894, 0.023047385343850202, 0.03375474761254349, 0.07183814542156419, 0.029269893770631272, 0.10151003916929946, 0.05375017020329065, 0.04186032843158771, 0.25186459031864883, 0.1343793249595321, 0.08391414889381155, 0.08327002413593543, 0.08459363068806758, 0.14780088805521396, 0.10551256838897949, 0.10306518776848139, 0.2126471089980584, 0.5185108835273529, 0.08150662306370016, 0.03380439759735232, 0.18421490373098437, 0.9694531078440912, 0.26155294690742203, 0.9697058041249474, 0.252053243951916, 0.11670375842997949, 0.21292085774113267, 0.110713041091969, 0.11582644834850653, 0.2001026936425273, 0.16307932716876694, 0.15657247239063277, 0.1011938555050107, 0.17721367209387828, 0.15286715138376872, 0.13807438139995298, 0.15949863557180122, 0.1318440845599056, 0.14616746383978063, 0.13890513465078858, 0.00019742863845551017, 0.14772844414913056, 0.1364975001637505, 0.1373755729186018, 0.14114284692881574, 0.17936852560671102, 0.13357201084532133, 0.13934696122783496, 0.22372000173443607, 0.16817285102836976, 0.1671983821523847, 0.1328276320397226, 0.13520309678566533, 9.999999999998899e-05, 9.999999999998899e-05, 0.007708238593960415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04331857811730311, 0.04049105802928876, 0.10024359533462102, 0.056620749619284316, 0.011629214319808345, 0.024375927319350787, 0.1220220141065238, 0.016299219598419068, 0.041762483746179524, 0.1462478193033958, 0.06288582738846638, 0.09610108753060287, 0.09106697244155348, 0.08863939361645423, 0.38676311209510417, 0.47942536827545723, 0.2555924219588044, 0.11123691505155875, 0.03525153475776355, 0.12788664182993015, 0.11308718046452271, 0.06368975519207287, 0.07882883920134076, 0.07334578595516761, 0.2425137314913003, 0.19448147167371999, 0.21456059903328584, 0.4144549706575067, 0.48575041694984344, 0.5777341486604197, 0.4482061274276431, 0.4872177301654571, 0.4678298252969225, 0.44857652777481216, 0.46146835080360193, 0.4900804041384118, 0.03994049377761588, 0.06354336197451727, 0.01623271819304517, 0.06546296732583956, 0.05653230916098728, 0.045461521024202534, 0.06777444944781164, 0.07197058191979211, 0.07916313775037964, 0.20368407192003957, 0.15198924121068247, 0.15746352811084585, 0.22795502571444048, 0.1452625868720101, 0.19116578342146906, 0.20616899231730745, 0.15408820730442552, 0.2743345594216189, 0.12775614831883064, 0.09891821990641003, 0.12669064998243396, 0.12375605779358778, 0.34026869998492604, 0.13105737167745934, 0.2020085533330096, 0.19793150544624527, 0.10179066186493713, 0.0781922083866855, 0.14597172904722389, 0.05695327256865135, 0.1121757860891055, 0.14523988269202093, 0.08685424730912672, 0.10380100929275504, 0.041350336088770034, 0.038208392624991205, 0.1966026496881802, 0.18046420710751299, 0.13141014262563278, 0.23002342622226746, 0.18411397504963078, 0.1849503738234265, 0.23550268247962625, 0.14697718886752809, 0.1899850658591885, 0.1657257856709906, 0.18522361271549492, 0.16969651441913958, 0.1660791002812153, 0.19809640113707938, 0.16865289908968428, 0.17007064780420844, 0.17166554000072587, 0.1751199604361684, 0.18996191387189965, 0.13707587785545106, 0.07160514956807584, 0.1743520876046678, 0.1034508821233403, 0.062102169800881124, 0.10890267354301486, 0.12442802284235699, 0.16895275515814934, 0.5172584659845851, 0.11179324362505427, 0.08348942849382834, 0.08348310654871471, 0.21488052875006114, 0.2146740686739107, 0.11374771539744832, 0.16967838584874717, 0.15326050983616368, 0.16022445711767008, 0.19620989145104217, 0.16235704018537056, 0.16024367269841755, 0.31978957568570376, 0.17279902031144467, 0.2044000688099351, 0.2248790195736572, 0.18520156586496783, 0.08024529059930519, 0.10608040092390925, 0.050309336128083526, 0.1248816007379806, 0.06086560190450874, 0.13248893501441417, 0.09333534948995859, 0.06570940429850691, 0.07950774745627753]}, "mutation_prompt": null}
{"id": "daf3a14d-1130-42c7-9277-414172fd9349", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.global_best_solution = np.random.uniform(-5.0, 5.0, dim)\n    \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on a combination of individual performance and global search strategy\n            self.mutation_rate *= 0.99 if np.all(np.abs(best_solution - self.global_best_solution) > 1e-6) else 1.01\n\n            # Update global best solution\n            if candidate_fitness < func(self.global_best_solution):\n                self.global_best_solution = np.copy(candidate_solution)\n\n        return best_solution", "name": "EnhancedDynamicMutationMetaheuristic", "description": "Improved convergence speed by introducing a dynamic mutation rate adjustment based on a combination of individual performance and a global search strategy.", "configspace": "", "generation": 26, "fitness": 0.11009100175073666, "feedback": "The algorithm EnhancedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.19935176047228653, 0.15072343322857729, 0.13808104399190124, 0.1846285850918431, 0.15780484857752197, 0.16766327353134325, 0.162961300848658, 0.15037617490982447, 0.15992111332517123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012865596742996033, 0.04398079728738613, 0.021074936610934514, 0.05300169304416125, 0.037138533937230434, 0.028716214338390222, 0.026938121294580397, 0.0347133053774249, 0.03570809019167498, 0.02109161687770489, 0.04633999240927189, 0.009741730127765913, 0.05726497409770215, 0.019173663256778828, 0.01876078840607298, 0.02616341699412439, 0.010168894321337607, 0.0231154190692745, 0.9836494902268076, 0.982376970799822, 0.9839036401222967, 0.9705045214047069, 0.9731447316936037, 0.9874789762428917, 0.9892263328845635, 0.9892832911889435, 0.9872709057596544, 0.09299008605992365, 0.039308952999859814, 0.03425691604378067, 0.1253485040848451, 0.06393075219734912, 0.05111769546541001, 0.05580938600213847, 0.05628924921273537, 0.05024446160632301, 0.15665803073605034, 0.09789922711276944, 0.083580625307897, 0.12150582595681048, 0.049352672026944155, 0.09692887293044894, 0.06583143370437661, 0.1000524419492882, 0.10735980667479039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046178413707542276, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009526320303104852, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003628408730477206, 9.999999999998899e-05, 0.052299160786196786, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017674554219611727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005609471668088339, 0.028897394454813874, 0.03770342599712617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01306846921370075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00429153735981469, 9.999999999998899e-05, 9.999999999998899e-05, 0.1955206608082527, 0.2307960665840706, 0.19071985223587962, 0.18646963858858212, 0.20260925029955468, 0.22771961379447225, 0.14641458576638577, 0.18692216734461775, 0.2224595366285721, 0.03701752276663761, 0.030415885053775682, 0.036465618470370775, 0.02623553890918906, 0.03128405007773649, 0.03339459488876384, 0.06766521385264024, 0.04097422490139746, 0.040870615691745105, 0.10947240468452424, 0.09782685540626568, 0.09989624029504607, 0.09439566652586906, 0.12028051483324165, 0.09227421741926778, 0.08976519464860755, 0.11770699121210437, 0.08267280755190898, 0.14078855411605418, 0.16830751975446478, 0.1260046326728994, 0.13095378533615498, 0.12872990208276114, 0.1430566844001443, 0.19552488105802968, 0.1591737211055061, 0.16933697946264947, 0.08588278802494353, 0.11694667475307419, 0.05898487255145335, 0.07102390877527065, 0.09975725818432202, 0.10566902105741593, 0.0769032381874798, 0.08358581388681119, 0.09691608315120193, 0.128446440903347, 0.124843929902828, 0.13293413825496447, 0.1088026720809212, 0.1702980501199003, 0.11898382322458712, 0.12557158724856599, 0.13724405035117793, 0.14376854201533695, 0.15488341473378586, 0.13802369725935626, 0.1416078916685819, 0.1201709895085954, 0.1435201341695187, 0.1361766046473989, 0.020260542537323456, 0.15248084926970185, 0.1375134936924023, 0.09796828717252704, 0.08043746042299738, 0.13036637998789957, 0.13223593264145694, 0.09621131510661884, 0.11142286550856095, 0.16832706784326001, 0.07219076479761677, 0.10557233189968651, 0.09477013040996718, 0.09383396568266522, 0.16423805598380337, 0.0775231639174856, 0.1657702341841738, 0.10154305802683794, 0.12064906117153318, 0.10099060985399833, 0.10345167302563385, 0.1759394759252173, 0.14873609725169246, 0.14949373292901946, 0.1549879613386389, 0.157710731748253, 0.15908602798064753, 0.16413071831714388, 0.14275305564703944, 0.149835066371372, 0.028183285571992345, 0.03924825701763002, 0.04346295487991625, 0.026099533831182686, 0.029262084151883028, 0.03918042213618478, 0.03923430872326228, 0.03551082498012037, 0.03960019540813553]}, "mutation_prompt": null}
{"id": "bf6c9849-f95f-4d57-b70e-732954ad0863", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.diversity_threshold = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity and individual performance\n            diversity_measure = np.mean(np.abs(candidate_solution - best_solution))\n            self.mutation_rate *= 0.98 if diversity_measure > self.diversity_threshold else 0.99\n\n        return best_solution", "name": "EnhancedDynamicMutationMetaheuristic", "description": "ImprovedDynamicMutationMetaheuristic with enhanced mutation adaptation strategy based on individual performance and population diversity for faster convergence.", "configspace": "", "generation": 27, "fitness": 0.19712339340892027, "feedback": "The algorithm EnhancedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.23.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9676257525459152, 0.9674253133523185, 0.9684515587725466, 0.9671948770879715, 0.9668328875322002, 0.9675729106966285, 0.9686110534340302, 0.9682763495767265, 0.9677574825196388, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07427789395466333, 0.06951913575372892, 0.015014623927427806, 0.1289710809563086, 0.07418689138940826, 0.0951943708596249, 0.0674010523987032, 0.05215492539493427, 0.06357105286316234, 0.09151470150668972, 0.09909775955072986, 0.01091189389599656, 0.03366920037385224, 0.08494485953120678, 0.045336110047053624, 0.032749655888372975, 0.03762162585405926, 0.04194628995604832, 0.9918705463629874, 0.974458366985937, 0.09723363125232354, 0.1001523146665837, 0.10151671281802888, 0.15859203915409648, 0.12541023331904966, 0.11658163062163929, 0.21313621955952033, 0.8330994185781109, 0.17597918921567257, 0.26809863798113354, 0.3002016398198746, 0.3193789895055049, 0.08869042479402256, 0.9499820443356339, 0.9505243332466563, 0.11787142826762209, 0.1043732602915638, 0.11421551910326411, 0.09306532416467794, 0.3485760052866336, 0.16293405954370865, 0.19611305805454649, 0.06978150874003708, 0.10951131742520848, 0.0959674320803624, 0.15334133115636872, 0.0898242490819432, 0.1359415001312807, 0.2834628859473036, 0.33363030428955787, 0.08575997459133777, 0.40164928771381414, 0.13630870651386418, 0.15995984343682734, 0.20904794330018805, 0.22812075893578732, 0.13842186023251357, 0.13278869194331577, 0.19477429095800713, 0.1800780219455168, 0.22323272826663765, 0.16189035749013836, 0.1394485312717807, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06710225587767615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051560427627457495, 0.046502330506637324, 0.15136316229941404, 0.05537574951481461, 0.0065077610471282465, 0.022810877560388354, 0.12062516782367072, 0.015807354715810962, 0.037263716816017256, 0.2165648363870829, 0.18644791482199297, 0.14620782335675353, 0.11020749748760628, 0.09662424391202928, 0.23332254224608828, 0.2351284860831956, 0.1602159056047372, 0.11067959922529425, 0.09114524525949819, 0.032858247178941036, 0.4133571181644705, 0.06969312530623084, 0.06264896790737673, 0.33858667389676156, 0.22216852814974064, 0.12323956668571978, 0.10902431716232508, 0.566692438991059, 0.554571370972483, 0.5436877882721918, 0.5820523659623491, 0.49505950518850295, 0.5548056838695625, 0.5087985124594137, 0.5359417529148967, 0.5287304444657737, 0.11436780263749646, 0.06540955263430837, 0.029106209135279282, 0.10397058995763842, 0.09456348371997136, 0.12109261521060222, 0.06554600764589236, 0.04559758501426736, 0.06354433861249542, 0.15920648661348347, 0.1573862052574081, 0.16344889242114136, 0.21537595077655902, 0.15058881704098226, 0.1580274948050019, 0.19334141119754422, 0.18340939523709043, 0.11357881338035403, 0.13722153334978393, 0.09864818646668339, 0.14886017911202676, 0.15106086111244, 0.2600219351586909, 0.1317012589172245, 0.234198694296886, 0.11668829947870563, 0.08969421482486306, 0.09346694729849458, 0.05213583438141467, 0.04559526362003363, 0.10837359468435515, 0.20508518066896264, 0.0832288899024457, 0.10387299023978191, 0.040999216865581944, 0.025330666541564795, 0.17731807534994715, 0.15500744261255806, 0.20715002782458225, 0.2243447720157098, 0.25684000250228955, 0.13957930744190739, 0.19037667484273513, 0.16066965798197963, 0.14036242044264458, 0.18157190862741301, 0.15988582703856213, 0.17419181877027334, 0.17729063889819385, 0.18305690681677966, 0.1785180189145451, 0.1805966575438328, 0.18770511429169012, 0.18131716946065257, 0.1901058303311518, 0.1379540279844168, 0.07161591719470106, 0.17418330549552496, 0.10807169086765134, 0.06212029237660177, 0.10887408137313037, 0.12115281525554478, 0.1693644028516863, 0.5616455030087315, 0.11366035561824772, 0.08351140289958525, 0.17042400323602303, 0.21464871233483995, 0.044425482820447226, 0.1137466896463758, 0.16978281980531906, 0.1809794166669575, 0.27015931543089744, 0.18809440766615504, 0.20982930059775928, 0.20286225004716218, 0.19457597389805292, 0.2136166380418001, 0.19040986917051073, 0.20942408180397265, 0.20866057321901477, 0.08149478938092125, 0.04907936799845525, 0.04799509614125996, 0.042088369968603545, 0.10350846044537798, 0.05329142189151004, 0.020379553864857236, 0.07331473790985543, 0.04616701176830085]}, "mutation_prompt": null}
{"id": "8b287e8b-b323-4a70-b2bd-2f29f9e95ea0", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improved dynamic mutation strategy by incorporating adaptive mutation rate adjustment based on individual performance and population diversity.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9594589557002606, 0.9603180771485925, 0.9599326672390149, 0.9597403823706, 0.959692951311882, 0.960001165059368, 0.9599661216752187, 0.9601517983418087, 0.9602993558061668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09887232682429226, 0.07128221580075167, 0.056163729528429185, 0.11391241241598105, 0.09898408352649435, 0.05653589856044727, 0.054924317612223605, 0.04192076721370175, 0.09085992801554199, 0.08128639167333818, 0.08414228405311186, 0.07141951919491218, 0.09824192619660843, 0.07404906342517403, 0.07350132542692278, 0.09460789120636581, 0.0735450681498302, 0.10784386010261338, 0.9902945275020003, 0.9912785028371849, 0.14855184159364576, 0.1608084829512405, 0.12895900605351474, 0.16203364984762225, 0.972161385775718, 0.9714854093686028, 0.967093727630111, 0.9407038152152131, 0.9407880247999061, 0.941649133573005, 0.940179235804225, 0.9428422950224637, 0.20345089409623807, 0.9424359173646636, 0.9412756347683096, 0.39187745805294694, 0.21234336812130172, 0.08622208729242775, 0.1366201549870213, 0.1807216886462144, 0.17584697597536836, 0.1510697783848176, 0.15300738619031184, 0.22848243255212763, 0.23981052854070184, 0.1748493395233912, 0.17352733376028828, 0.13799868995908782, 0.13196890322770705, 0.13554321022855642, 0.16117519197097374, 0.1663728289644767, 0.13794818268496112, 0.18674453422920145, 0.14049999116216294, 0.19307601424447318, 0.13329184210178524, 0.14121941199067, 0.17084291858614054, 0.16298725047168605, 0.19616771902089392, 0.13886261665973976, 0.134283065219845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06434693929425961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037200534199284263, 9.999999999998899e-05, 9.999999999998899e-05, 0.059721389603812125, 0.05916875476718664, 0.12446222687216324, 0.058511172941763334, 9.999999999998899e-05, 0.011879302858313845, 0.11304002638662258, 0.005721353514935745, 0.03587060820329191, 0.13478303125218716, 0.11028229798363232, 0.1101279842046975, 0.10181836800704314, 0.11143528522628476, 0.2782424913167808, 0.1551296735606673, 0.18900565094532318, 0.10180734449565931, 0.12639715601650148, 0.12119922348250745, 0.06440180134585483, 0.13560240004777901, 0.07275058330365591, 0.24570529232936578, 0.2176449838660547, 0.29475752366706387, 0.23190707935987764, 0.5261369938906847, 0.4957422558599405, 0.5125624590008431, 0.5696969005111043, 0.5243089029666728, 0.5309023850940624, 0.5665046657285587, 0.49774876349125985, 0.5500489552341163, 0.12052985531925586, 0.07145405371726388, 0.0365481279106421, 0.05051107815579181, 0.1671042401144447, 0.09516485492861537, 0.08803734911626959, 0.10360625126126599, 0.08452686914126539, 0.17053342705855978, 0.17630360664871825, 0.20636772700822203, 0.15403778969281323, 0.2516036494819126, 0.19755692272331515, 0.22270654248383703, 0.25011589606027984, 0.21733710462141176, 0.22376320313888076, 0.16779537120066612, 0.12385895943232317, 0.3191837611869003, 0.1674371328544514, 0.15138437081719713, 0.22898298669295758, 0.10149157490020733, 0.09082870064061421, 0.10867954872623942, 0.15303927679052887, 0.07234561180747967, 0.17013102898319354, 0.24326151326480494, 0.1307707450707909, 0.21288269595941833, 0.10522263088039507, 0.012267261793994066, 0.24229623654516208, 0.2578640311642254, 0.15587002058569144, 0.2039728223463826, 0.1701870723028307, 0.2532851316234811, 0.25238129974325385, 0.16633177738237082, 0.2702522231738904, 0.16966146218632272, 0.1961403108072446, 0.1873666828036472, 0.20285401728587527, 0.17736832025565452, 0.17807492117535606, 0.1764040580314704, 0.16875761037060566, 0.1749684240926972, 0.10882902762789204, 0.1377269196536246, 0.07156923136938953, 0.17407534393298973, 0.11246954676270071, 0.06208910754034025, 0.10877968236417368, 0.11531055259519019, 0.16923936091246083, 0.40743296967223874, 0.11367319774498896, 0.0834494054490611, 0.17013245733354598, 0.21464486559805196, 0.04437009783885426, 0.11368274071664564, 0.1697915862960655, 0.2283105599233355, 0.21359517560821217, 0.19404594473590298, 0.2259583742729958, 0.2867192455350902, 0.27027970167409054, 0.1896689988487238, 0.20508592211818044, 0.2640145982939387, 0.22462815207389486, 0.07920720612114251, 0.1262256547345012, 0.09726998885448812, 0.0784451758453133, 0.07771301786725981, 0.10238254940091207, 0.057993396668112096, 0.06275727238713913, 0.12534720647793673]}, "mutation_prompt": null}
{"id": "64997c50-96a8-452a-aba2-4f276b0374c2", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.98  # Modified mutation rate update for faster convergence\n\n            # Apply differential evolution crossover for enhanced exploration\n            trial_solution = best_solution + np.random.uniform(-1, 1, self.dim) * (best_solution - candidate_solution)\n            trial_fitness = func(trial_solution)\n\n            if trial_fitness < best_fitness:\n                best_solution = trial_solution\n                best_fitness = trial_fitness\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "ImprovedDynamicMutationMetaheuristic with adaptive mutation rate adjustment and differential evolution crossover to enhance exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": 0.22531215009822445, "feedback": "The algorithm ImprovedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.26.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9634332150570852, 0.9639390720439206, 0.9623214136838636, 0.9626008162774998, 0.9627058787792209, 0.9635883004477007, 0.9635631436435099, 0.9632605349287651, 0.9633166692111231, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.091206149865382, 0.1034304682406959, 0.07142491934772532, 0.06742434279268306, 0.0654709088071902, 0.06336199881376647, 0.07402162065416218, 0.0950706931390205, 0.017581065346352953, 0.08796859080453945, 0.04807073802899409, 0.039667883499711065, 0.04917751231767398, 0.018755177447745464, 0.04422016648793836, 0.08790168570812384, 0.04193769750001752, 0.0947980823304555, 0.12594815618419875, 0.9553614505156266, 0.11595990744150708, 0.22978482229691544, 0.13533476202854233, 0.9850864746264258, 0.9779301001791778, 0.22083738440310674, 0.9800107576648204, 0.9453685331112998, 0.21854709113306658, 0.36902306863247936, 0.8066638478731263, 0.9439863715599173, 0.8490519583012154, 0.8528021028686402, 0.9395197148009536, 0.9441709442443121, 0.2325660500459843, 0.08023148505794375, 0.22566817213977297, 0.2868932209703038, 0.1990410268246091, 0.21260427876880972, 0.14617745670381332, 0.09864859929427461, 0.14570465715837022, 0.1355461458345224, 0.17959147816313015, 0.14450701186559722, 0.1885317209992804, 0.16150444748390125, 0.15729994829912552, 0.17278802573677532, 0.17452355730737623, 0.1875539257359774, 0.2534117244870847, 0.16149547230999384, 0.1360732062299037, 0.13886773589233747, 0.2770504647061214, 0.13820585154282783, 0.1833502658446864, 0.31435025246193704, 0.1753067861776677, 9.999999999998899e-05, 9.999999999998899e-05, 0.09249409051876933, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08429761652625223, 0.043406017873185765, 0.10461671732236866, 0.06843397377390281, 0.027818453462238324, 0.00697412599522973, 0.0991499499032037, 0.02629693487342699, 0.014623717098292799, 0.1950310433057153, 0.04285185148458237, 0.08561058654592324, 0.26873773823242364, 0.0902041305182818, 0.15349893634035738, 0.16345487101092238, 0.1256038618381492, 0.08632666729437644, 0.07733302461689529, 0.22158630871391538, 0.10426997924856574, 0.1922025964030566, 0.08546557063807902, 0.05284432298336872, 0.06236446289028241, 0.10936387341372156, 0.19100825925531273, 0.5871169690670557, 0.515424905832462, 0.5193261702021686, 0.5423691846167277, 0.4765609097984862, 0.5862907710383098, 0.5450937955775415, 0.5391738870684748, 0.4854349306881621, 0.07995436528235023, 0.05052800772437671, 0.04677593198615082, 0.02844179128535984, 0.15070021181742355, 0.07130248419236507, 0.0338226532060224, 0.08496876934457032, 0.05182967878095901, 0.18286001290949372, 0.1832956648534222, 0.18185833341959556, 0.2400443180248505, 0.24056329365068518, 0.17022468068518448, 0.1975841209956235, 0.09475065835435637, 0.4872011878231193, 0.1355258398304835, 0.23563564233763012, 0.1170525345873622, 0.35140580528570886, 0.24027082493516905, 0.1514954536959865, 0.23967661745167368, 0.11783137720335202, 0.11158517633770149, 0.21035419658217713, 0.03703502748033949, 0.03946310290424204, 0.2437787571497524, 0.20631513824382164, 0.06876895539585892, 0.22501806911074396, 0.042744973672055986, 0.04201774822472759, 0.18209360845256428, 0.1977879516912321, 0.14823073426980427, 0.3341108489890855, 0.16047984104462953, 0.20570951846459107, 0.1691573449590107, 0.16359030460748614, 0.17287856143356517, 0.17358329104599068, 0.18001439656496387, 0.19269873346007893, 0.17546593742379368, 0.16737426465828176, 0.18716091537493595, 0.1962327484390236, 0.1934198515928356, 0.20274088787941869, 0.18993788260441535, 0.13788927932435358, 0.08413242741343219, 0.17411877587174862, 0.06600824722005105, 0.06205895517351767, 0.10893519007605368, 0.12685522095681934, 0.16923291711511224, 0.8587771864511033, 0.11330992323111255, 0.06604642845192943, 0.03608342172643586, 0.2145497020805497, 0.21371694644533923, 0.3313980359402027, 0.16997014311920433, 0.04651660376120492, 0.16962032524100323, 0.2400104664633963, 0.18180512383178937, 0.2739124307246311, 0.22323638540987567, 0.2196715038371534, 0.27067492221275624, 0.22139923361792424, 0.2561006989371868, 0.08556106326539337, 0.07056430618171672, 0.07072466320168858, 0.0970813875775628, 0.04321327432156541, 0.055472350728822506, 0.07352044664399049, 0.05164732795693194, 0.09079971190200975]}, "mutation_prompt": null}
{"id": "c5f8497b-c01e-4a84-8c4e-fefa5d361a5e", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.elite_solution = np.random.uniform(-5.0, 5.0, dim)\n        self.elite_fitness = np.inf\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity and elite solutions\n            elite_factor = 1.1 if best_fitness < self.elite_fitness else 0.9\n            self.mutation_rate *= 0.99 * elite_factor\n\n            if best_fitness < self.elite_fitness:\n                self.elite_solution = best_solution\n                self.elite_fitness = best_fitness\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improved convergence speed by dynamically adjusting mutation rate based on individual performance and adding a strategy for elite solutions.", "configspace": "", "generation": 30, "fitness": 0.12048491553043006, "feedback": "The algorithm ImprovedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.17.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9897662325782132, 0.6911380093770886, 0.9887807337748428, 0.9557917926142679, 0.39539882276790583, 0.36403818713211755, 0.7561465375674442, 0.9894398300263619, 0.9803871708845533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00617809044139761, 0.025371352451914908, 9.999999999998899e-05, 0.04676024841043913, 0.038749452101611626, 0.022338578173139112, 0.08526321854899666, 0.019955009309532423, 0.06110572457888119, 9.999999999998899e-05, 0.02092424871682763, 9.999999999998899e-05, 0.0772662206491348, 9.999999999998899e-05, 9.999999999998899e-05, 0.03858827440664936, 0.0055347458585376375, 9.999999999998899e-05, 0.103471235307395, 0.05791229185214797, 0.043739248378807494, 0.07083327620239566, 0.04623501763728821, 0.0761993378010335, 0.10248910590201377, 0.06338499371850392, 0.08751081717442555, 0.33251402292049104, 0.03997854448558169, 9.999999999998899e-05, 0.06152286025598552, 0.1327382589357452, 0.1094540526270481, 0.17700417509795807, 0.06681548309773477, 0.08402702542305629, 0.030938129364304734, 0.08193222619371865, 0.0005950545415238651, 0.08265766547248765, 0.056076743488467806, 0.04073665622972311, 0.042007582107969954, 0.051098873753002816, 0.08164807788874784, 0.051967097936805984, 0.1310536724844189, 0.12872100274218012, 0.02254462328777551, 9.999999999998899e-05, 9.999999999998899e-05, 0.13416985215120003, 0.13766303810670089, 0.14070691652293332, 0.13619897094036137, 0.14009381265232845, 0.0063775386717407345, 0.13706357234195587, 0.15516615227090824, 0.0813835190915988, 0.14005176524468066, 0.0220281232952253, 0.13491013673430552, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017596908433196057, 0.08063486763178129, 0.11164341826995239, 9.999999999998899e-05, 0.00045690140046805716, 0.008824089448214001, 0.05035494176819644, 0.019889871655767055, 0.046355782018880576, 9.999999999998899e-05, 0.22527367001718945, 0.1481879853385073, 9.999999999998899e-05, 0.11119859149576072, 0.14629899755512143, 0.03895319885023951, 0.20751541946265284, 0.10178105351172084, 0.11031221691340887, 0.0891635899068779, 9.999999999998899e-05, 0.047394688694183285, 0.19547842406307303, 0.0443289521206236, 0.08554168977471477, 0.03621388904335232, 0.08232307288330065, 0.26588717375321624, 0.40174909876834153, 0.3676465405182222, 0.41326510677164374, 0.19243175905019183, 0.4055852778775094, 0.2833623077893366, 0.3837071133971556, 0.3525056792790887, 0.004016717853678742, 0.019914879964012644, 9.999999999998899e-05, 0.025642309627083693, 0.0721493361315132, 0.05420533980401032, 0.12504480457398226, 0.06183494756351793, 0.0278429151609062, 0.10886135617825099, 0.10680727980759042, 0.039738029839396005, 0.15418320369243343, 0.14116587921302215, 0.1429808546058059, 0.082507793133347, 0.11245727336746114, 0.04930635832120711, 0.09806602661162889, 0.11908362969812458, 0.09296049079310942, 0.10718590495489444, 0.1018153665611713, 0.08936569164225239, 0.11087973131372486, 0.10375022677392276, 0.09506214641035826, 0.04108731801441878, 9.999999999998899e-05, 0.03299838595010274, 0.03534529607600945, 0.04922331565430449, 0.057055291511183936, 0.0431946904016981, 0.05019166223692717, 0.016362437748234537, 0.17787957765672968, 0.133001792640414, 0.2108243634746536, 0.10495494892494062, 0.135041456965024, 0.1579407552707831, 0.11301763023970057, 0.1459893385707688, 0.11694108785060542, 0.13989410829042703, 0.19517070005609294, 0.21407046194878654, 0.14964823710451436, 0.1949641639635299, 0.17050098989156925, 0.16983690489265268, 0.16446484449691634, 0.18029549187122396, 0.07860367001361879, 0.06351014162482749, 0.07138769014417667, 0.17365639638727082, 0.1697581537188817, 0.0619395384639021, 0.19032659646161065, 0.12463484780628731, 0.14741361027840394, 0.1044203432038665, 0.047007660874565094, 0.10834857001841447, 0.1506077456004199, 0.2303379089390788, 0.14219389457721987, 0.10530120589109249, 0.05938620714672693, 0.10557460828658582, 0.15270858314337743, 0.1506080364237039, 0.1781176445930751, 0.2732715617610022, 0.17676623116421675, 0.20759935829144938, 0.14224257757360959, 0.19000588516099604, 0.17086484497008858, 0.04385218832389526, 0.02613906259293175, 0.06538594481489435, 0.03702213431292767, 0.004980108884306889, 0.047433271883678074, 0.009981980227833587, 0.07672438418120342, 0.032200113369713845]}, "mutation_prompt": null}
{"id": "c3ca0f89-0279-4ca6-ad78-bdba95fa1e82", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improved dynamic mutation strategy by incorporating adaptive mutation rate adjustment based on individual performance and population diversity.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9594589557002606, 0.9603180771485925, 0.9599326672390149, 0.9597403823706, 0.959692951311882, 0.960001165059368, 0.9599661216752187, 0.9601517983418087, 0.9602993558061668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09887232682429226, 0.07128221580075167, 0.056163729528429185, 0.11391241241598105, 0.09898408352649435, 0.05653589856044727, 0.054924317612223605, 0.04192076721370175, 0.09085992801554199, 0.08128639167333818, 0.08414228405311186, 0.07141951919491218, 0.09824192619660843, 0.07404906342517403, 0.07350132542692278, 0.09460789120636581, 0.0735450681498302, 0.10784386010261338, 0.9902945275020003, 0.9912785028371849, 0.14855184159364576, 0.1608084829512405, 0.12895900605351474, 0.16203364984762225, 0.972161385775718, 0.9714854093686028, 0.967093727630111, 0.9407038152152131, 0.9407880247999061, 0.941649133573005, 0.940179235804225, 0.9428422950224637, 0.20345089409623807, 0.9424359173646636, 0.9412756347683096, 0.39187745805294694, 0.21234336812130172, 0.08622208729242775, 0.1366201549870213, 0.1807216886462144, 0.17584697597536836, 0.1510697783848176, 0.15300738619031184, 0.22848243255212763, 0.23981052854070184, 0.1748493395233912, 0.17352733376028828, 0.13799868995908782, 0.13196890322770705, 0.13554321022855642, 0.16117519197097374, 0.1663728289644767, 0.13794818268496112, 0.18674453422920145, 0.14049999116216294, 0.19307601424447318, 0.13329184210178524, 0.14121941199067, 0.17084291858614054, 0.16298725047168605, 0.19616771902089392, 0.13886261665973976, 0.134283065219845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06434693929425961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037200534199284263, 9.999999999998899e-05, 9.999999999998899e-05, 0.059721389603812125, 0.05916875476718664, 0.12446222687216324, 0.058511172941763334, 9.999999999998899e-05, 0.011879302858313845, 0.11304002638662258, 0.005721353514935745, 0.03587060820329191, 0.13478303125218716, 0.11028229798363232, 0.1101279842046975, 0.10181836800704314, 0.11143528522628476, 0.2782424913167808, 0.1551296735606673, 0.18900565094532318, 0.10180734449565931, 0.12639715601650148, 0.12119922348250745, 0.06440180134585483, 0.13560240004777901, 0.07275058330365591, 0.24570529232936578, 0.2176449838660547, 0.29475752366706387, 0.23190707935987764, 0.5261369938906847, 0.4957422558599405, 0.5125624590008431, 0.5696969005111043, 0.5243089029666728, 0.5309023850940624, 0.5665046657285587, 0.49774876349125985, 0.5500489552341163, 0.12052985531925586, 0.07145405371726388, 0.0365481279106421, 0.05051107815579181, 0.1671042401144447, 0.09516485492861537, 0.08803734911626959, 0.10360625126126599, 0.08452686914126539, 0.17053342705855978, 0.17630360664871825, 0.20636772700822203, 0.15403778969281323, 0.2516036494819126, 0.19755692272331515, 0.22270654248383703, 0.25011589606027984, 0.21733710462141176, 0.22376320313888076, 0.16779537120066612, 0.12385895943232317, 0.3191837611869003, 0.1674371328544514, 0.15138437081719713, 0.22898298669295758, 0.10149157490020733, 0.09082870064061421, 0.10867954872623942, 0.15303927679052887, 0.07234561180747967, 0.17013102898319354, 0.24326151326480494, 0.1307707450707909, 0.21288269595941833, 0.10522263088039507, 0.012267261793994066, 0.24229623654516208, 0.2578640311642254, 0.15587002058569144, 0.2039728223463826, 0.1701870723028307, 0.2532851316234811, 0.25238129974325385, 0.16633177738237082, 0.2702522231738904, 0.16966146218632272, 0.1961403108072446, 0.1873666828036472, 0.20285401728587527, 0.17736832025565452, 0.17807492117535606, 0.1764040580314704, 0.16875761037060566, 0.1749684240926972, 0.10882902762789204, 0.1377269196536246, 0.07156923136938953, 0.17407534393298973, 0.11246954676270071, 0.06208910754034025, 0.10877968236417368, 0.11531055259519019, 0.16923936091246083, 0.40743296967223874, 0.11367319774498896, 0.0834494054490611, 0.17013245733354598, 0.21464486559805196, 0.04437009783885426, 0.11368274071664564, 0.1697915862960655, 0.2283105599233355, 0.21359517560821217, 0.19404594473590298, 0.2259583742729958, 0.2867192455350902, 0.27027970167409054, 0.1896689988487238, 0.20508592211818044, 0.2640145982939387, 0.22462815207389486, 0.07920720612114251, 0.1262256547345012, 0.09726998885448812, 0.0784451758453133, 0.07771301786725981, 0.10238254940091207, 0.057993396668112096, 0.06275727238713913, 0.12534720647793673]}, "mutation_prompt": null}
{"id": "8afcad1b-abff-4f93-9e50-14c3f60310cb", "solution": "import numpy as np\n\nclass FasterImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors and rate based on individual performance and population diversity\n            self.mutation_factors *= 0.85 if candidate_fitness < best_fitness else 1.15\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n            self.mutation_rate *= 0.98\n\n        return best_solution", "name": "FasterImprovedDynamicMutationMetaheuristic", "description": "Improved convergence speed by dynamically adjusting mutation rate and factors based on individual performance and population diversity.", "configspace": "", "generation": 32, "fitness": 0.17793551666783458, "feedback": "The algorithm FasterImprovedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.22.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9786012492496162, 0.9789184286407601, 0.9795548054845293, 0.9786885200167097, 0.9792982855698511, 0.9787109277661059, 0.9793259448202097, 0.9788657977483329, 0.9778764194970712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0822425369151959, 0.060025831608157, 0.01754437671078035, 0.11475110153843093, 0.08817935719461512, 0.029370817367636803, 0.036635919227914426, 0.0636464218991789, 0.05682709012452247, 0.07514118168614747, 0.06130278512434273, 0.03273519785867118, 0.029343910479891155, 0.05506347490660468, 0.09490191447682716, 0.0946606654825618, 0.08345326717176993, 0.04305935116996085, 0.9903969675910668, 0.20843625100765828, 0.08563101110792382, 0.08330320587209394, 0.08952053754540523, 0.15181240500538573, 0.10372972335202535, 0.10487189654483609, 0.18984595929524894, 0.3479167628121298, 0.08933826809969614, 0.057340342556978285, 0.12920218062043864, 0.11691494595287166, 0.10833877292046568, 0.9243760840077826, 0.189525470308468, 0.08566890550235984, 0.10436890193864878, 0.09478174977579945, 0.08202095618569782, 0.28607473768385894, 0.18030909439978038, 0.1961337719391676, 0.10123110945859715, 0.14264329725551228, 0.1402868543232928, 0.14530570656675523, 9.999999999998899e-05, 0.1337872259361409, 0.04296260815174924, 0.13158154305118264, 9.999999999998899e-05, 0.13794895003832697, 0.22535773173338458, 0.13197927113762797, 0.28919128863955734, 0.20689575690141693, 0.13828455156678843, 0.17857349632432817, 0.18699888654013863, 0.1603310979136039, 0.14530885200006327, 0.24219327072276475, 0.13226890865743812, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575733304953023, 0.04444573181413214, 0.12448779612785887, 0.056620749619284316, 0.004365566017817568, 0.01875680173398564, 0.12166386472553947, 0.01435919683934439, 0.02455495352044368, 0.28549561203658624, 0.0698957367128421, 0.14505178828259524, 0.10647124967827692, 0.1643180851453382, 0.29611051605781236, 0.20157934255191212, 0.1869744088731985, 0.09017077643810623, 0.07999347517486877, 0.05219710646883191, 0.28933422846498924, 0.07132723559586429, 0.08229880861436212, 0.2541855948642543, 0.11314541680428625, 0.2201038747932904, 0.1447866992202138, 0.486866472131419, 0.4972100086101082, 0.48994006539450075, 0.4871477112870781, 0.5051519479862451, 0.5104376001698008, 0.4947425393065583, 0.49497890265162203, 0.4725115564488397, 0.07935238047788373, 0.02684504933617704, 0.07378965574789487, 0.06544215438018108, 0.09516989891853478, 0.06351682699982719, 0.1289407324970714, 0.05847161684253421, 0.05054034059752066, 0.14405162939047933, 0.20559813512629055, 0.13565408466772677, 0.28134243277216453, 0.15191116360020374, 0.17304500273964663, 0.172323994813127, 0.20860358089490483, 0.12903681481476093, 0.12271852932797556, 0.09891821990641003, 0.14212840433581042, 0.25330710865878303, 0.15210221599015694, 0.126607525757495, 0.16848200648579637, 0.12786945728263455, 0.09798553771702978, 0.18456376080031045, 0.03406433987901314, 0.07391978315296455, 0.0872931205591081, 0.18169204294622887, 0.09168988619191909, 0.10380100929275504, 0.05084786874756975, 0.03133386007405048, 0.18985890015607543, 0.17346568375742477, 0.17649465179437862, 0.2165343113656637, 0.16673186015588326, 0.17686762977001236, 0.23509951869605772, 0.1885250831663402, 0.132602982344452, 0.17220211998041213, 0.16830996927861286, 0.18121799310080655, 0.1692838478121177, 0.1623233678321836, 0.18165361456824425, 0.17005126764847867, 0.18914647265423468, 0.16625745265440306, 0.16039013466926666, 0.13795254114484, 0.07162839485196981, 0.17421391869220793, 0.09338271829849487, 0.06213201975232807, 0.10891503665936286, 0.11702465658938022, 0.16876702049823866, 0.6818875856679643, 0.10541744957315591, 0.0835215631310362, 0.08349471834763766, 0.214722324306455, 0.04439656770618261, 0.11378033526068798, 0.167800404365686, 0.16956817642672795, 0.19838464015553547, 0.2178888177603403, 0.17989354231265953, 0.21059227772125555, 0.19851195086392603, 0.19837221694127338, 0.23268538967385854, 0.20662893999528054, 0.21142008540718793, 0.06803401688038047, 0.08039162711934589, 0.0609810837002811, 0.047220536582651906, 0.03781953348453948, 0.08782386380229201, 0.050753447934914986, 0.04264778578102324, 0.05428573784258062]}, "mutation_prompt": null}
{"id": "db1227e5-6f65-4886-80c0-0f4c2d653af3", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.8 if candidate_fitness < best_fitness else 1.2\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.98\n\n        return best_solution", "name": "AcceleratedDynamicMutationMetaheuristic", "description": "Accelerated convergence by introducing a dynamic mutation rate adaptation based on individual performance and population diversity, enhancing exploration-exploitation balance.", "configspace": "", "generation": 33, "fitness": 0.18152379988859624, "feedback": "The algorithm AcceleratedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.22.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.979068265453402, 0.9789184286407601, 0.9782991072431515, 0.978570466247079, 0.9792982855698511, 0.9785214444435384, 0.9793259448202097, 0.97867071150042, 0.9779774139158032, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10406907079571903, 0.09930610172023768, 0.01754437671078035, 0.04691282591338697, 0.06561552896837297, 0.10386733652527724, 0.05229671511916145, 0.08204421950621399, 0.06363935597998516, 0.09936412513281412, 0.05606890600298298, 0.03273519785867118, 0.029343910479891155, 0.09906997761316194, 0.09490191447682716, 0.0946606654825618, 0.04665118157944104, 0.04305935116996085, 0.9904100410439636, 0.20801250930824267, 0.08560331288341838, 0.08792917537016931, 0.08938491405371463, 0.1427043934920995, 0.10279872515869481, 0.1047548265768613, 0.15250373253289196, 0.3691892996352957, 0.08952942006063258, 0.041440411754377626, 0.09492031587545902, 0.11691494595287166, 0.15174079500394655, 0.37620989566985497, 0.186745981545131, 0.08566890550235984, 0.12387975144983443, 0.07729152425757824, 0.13514596409498392, 0.9864791225111483, 0.18172385260601864, 0.15131775542771486, 0.11238220829002932, 0.11791386186941855, 0.11992444212239117, 0.14530570656675523, 9.999999999998899e-05, 0.13337281199359075, 0.006439470708957895, 0.13192880497277526, 9.999999999998899e-05, 0.1339792244469301, 0.1700992797333436, 0.1319139399379119, 0.3819098519042827, 0.1471403072569718, 0.13882975577204382, 0.17006400128673016, 0.26331011062381815, 0.16232422899896304, 0.13535431683847055, 0.5137891236504761, 0.13239482677580072, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12610504637432185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03555765822242907, 0.048108997941516685, 0.12045208556219278, 0.056620749619284316, 0.01582161380301006, 9.999999999998899e-05, 0.12166386472553947, 0.01435919683934439, 0.030551973989441872, 0.28549561203658624, 0.08120299185572644, 0.14248702355299614, 0.0934574567719666, 0.44059235013731457, 0.146100026318989, 0.23240590341007794, 0.17174792787406745, 0.13306588930396956, 0.07999347517486877, 0.13549601468721517, 0.19270341313352735, 0.11256355291031905, 0.05130221183900252, 0.1556830603963052, 0.33849397897954536, 0.26834865067709424, 0.1447866992202138, 0.532376378223809, 0.5039620863358638, 0.5082091220016833, 0.49104052864792935, 0.5450912094742197, 0.45124656956875686, 0.4947425393065583, 0.48341936866320045, 0.4857173470725944, 0.050655370249590104, 0.040791999423173686, 0.020179689392697542, 0.06544215438018108, 0.03768109359169303, 0.08208958296108337, 0.11284202611087912, 0.1214142027588947, 0.07429697390254297, 0.23105574656400163, 0.20559813512629055, 0.1408299419681147, 0.2093214052302368, 0.19041275483690268, 0.17304500273964663, 0.13306582961544478, 0.20860358089490483, 0.1754722485908976, 0.1394002804000033, 0.2114921817782861, 0.1276773424019848, 0.14966142145707195, 0.15210221599015694, 0.12606393489788847, 0.16848200648579637, 0.09758128112938325, 0.08816154388872421, 0.07113568174454798, 0.09156118915441724, 0.05484562631569612, 0.22687462953581594, 0.039723886761984795, 0.08563174944979313, 0.10380100929275504, 0.05084786874756975, 0.019238944688995452, 0.18985890015607543, 0.18848542832650994, 0.2795295468946426, 0.1683370575890396, 0.22226681916405455, 0.23438074669625197, 0.23509951869605772, 0.15763872237762278, 0.14744895708429973, 0.15796943428131038, 0.17557011079242002, 0.18121799310080655, 0.1692838478121177, 0.1786302688195015, 0.17259848235004682, 0.18547757311237545, 0.17261233272015275, 0.16625745265440306, 0.1601540816479463, 0.13792710304718425, 0.07161508229932534, 0.17410121386105293, 0.09172142841897735, 0.08968125684612438, 0.10891503665936286, 0.11564642318446039, 0.16876702049823866, 0.37133262251107735, 0.09642674506629123, 0.08352725634427183, 0.08348352582607821, 0.10406939807184501, 0.04439998391972133, 0.11379319912017072, 0.16898537847324713, 0.16956817642672795, 0.18336884992429958, 0.2178888177603403, 0.23066607456416732, 0.21059227772125555, 0.2257634028707386, 0.21293572157583596, 0.23268538967385854, 0.2193652619890204, 0.2626922050425847, 0.04094044574227773, 0.05159890746993845, 0.0609810837002811, 0.06181030915213648, 0.06640958571065547, 0.049911031115006166, 0.050753447934914986, 0.05983916292223945, 0.06363089472133454]}, "mutation_prompt": null}
{"id": "b65ea719-327e-4e6f-b784-eaca2b6e75f5", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improved dynamic mutation strategy by incorporating adaptive mutation rate adjustment based on individual performance and population diversity.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9594589557002606, 0.9603180771485925, 0.9599326672390149, 0.9597403823706, 0.959692951311882, 0.960001165059368, 0.9599661216752187, 0.9601517983418087, 0.9602993558061668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09887232682429226, 0.07128221580075167, 0.056163729528429185, 0.11391241241598105, 0.09898408352649435, 0.05653589856044727, 0.054924317612223605, 0.04192076721370175, 0.09085992801554199, 0.08128639167333818, 0.08414228405311186, 0.07141951919491218, 0.09824192619660843, 0.07404906342517403, 0.07350132542692278, 0.09460789120636581, 0.0735450681498302, 0.10784386010261338, 0.9902945275020003, 0.9912785028371849, 0.14855184159364576, 0.1608084829512405, 0.12895900605351474, 0.16203364984762225, 0.972161385775718, 0.9714854093686028, 0.967093727630111, 0.9407038152152131, 0.9407880247999061, 0.941649133573005, 0.940179235804225, 0.9428422950224637, 0.20345089409623807, 0.9424359173646636, 0.9412756347683096, 0.39187745805294694, 0.21234336812130172, 0.08622208729242775, 0.1366201549870213, 0.1807216886462144, 0.17584697597536836, 0.1510697783848176, 0.15300738619031184, 0.22848243255212763, 0.23981052854070184, 0.1748493395233912, 0.17352733376028828, 0.13799868995908782, 0.13196890322770705, 0.13554321022855642, 0.16117519197097374, 0.1663728289644767, 0.13794818268496112, 0.18674453422920145, 0.14049999116216294, 0.19307601424447318, 0.13329184210178524, 0.14121941199067, 0.17084291858614054, 0.16298725047168605, 0.19616771902089392, 0.13886261665973976, 0.134283065219845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06434693929425961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037200534199284263, 9.999999999998899e-05, 9.999999999998899e-05, 0.059721389603812125, 0.05916875476718664, 0.12446222687216324, 0.058511172941763334, 9.999999999998899e-05, 0.011879302858313845, 0.11304002638662258, 0.005721353514935745, 0.03587060820329191, 0.13478303125218716, 0.11028229798363232, 0.1101279842046975, 0.10181836800704314, 0.11143528522628476, 0.2782424913167808, 0.1551296735606673, 0.18900565094532318, 0.10180734449565931, 0.12639715601650148, 0.12119922348250745, 0.06440180134585483, 0.13560240004777901, 0.07275058330365591, 0.24570529232936578, 0.2176449838660547, 0.29475752366706387, 0.23190707935987764, 0.5261369938906847, 0.4957422558599405, 0.5125624590008431, 0.5696969005111043, 0.5243089029666728, 0.5309023850940624, 0.5665046657285587, 0.49774876349125985, 0.5500489552341163, 0.12052985531925586, 0.07145405371726388, 0.0365481279106421, 0.05051107815579181, 0.1671042401144447, 0.09516485492861537, 0.08803734911626959, 0.10360625126126599, 0.08452686914126539, 0.17053342705855978, 0.17630360664871825, 0.20636772700822203, 0.15403778969281323, 0.2516036494819126, 0.19755692272331515, 0.22270654248383703, 0.25011589606027984, 0.21733710462141176, 0.22376320313888076, 0.16779537120066612, 0.12385895943232317, 0.3191837611869003, 0.1674371328544514, 0.15138437081719713, 0.22898298669295758, 0.10149157490020733, 0.09082870064061421, 0.10867954872623942, 0.15303927679052887, 0.07234561180747967, 0.17013102898319354, 0.24326151326480494, 0.1307707450707909, 0.21288269595941833, 0.10522263088039507, 0.012267261793994066, 0.24229623654516208, 0.2578640311642254, 0.15587002058569144, 0.2039728223463826, 0.1701870723028307, 0.2532851316234811, 0.25238129974325385, 0.16633177738237082, 0.2702522231738904, 0.16966146218632272, 0.1961403108072446, 0.1873666828036472, 0.20285401728587527, 0.17736832025565452, 0.17807492117535606, 0.1764040580314704, 0.16875761037060566, 0.1749684240926972, 0.10882902762789204, 0.1377269196536246, 0.07156923136938953, 0.17407534393298973, 0.11246954676270071, 0.06208910754034025, 0.10877968236417368, 0.11531055259519019, 0.16923936091246083, 0.40743296967223874, 0.11367319774498896, 0.0834494054490611, 0.17013245733354598, 0.21464486559805196, 0.04437009783885426, 0.11368274071664564, 0.1697915862960655, 0.2283105599233355, 0.21359517560821217, 0.19404594473590298, 0.2259583742729958, 0.2867192455350902, 0.27027970167409054, 0.1896689988487238, 0.20508592211818044, 0.2640145982939387, 0.22462815207389486, 0.07920720612114251, 0.1262256547345012, 0.09726998885448812, 0.0784451758453133, 0.07771301786725981, 0.10238254940091207, 0.057993396668112096, 0.06275727238713913, 0.12534720647793673]}, "mutation_prompt": null}
{"id": "53a1354c-3f28-47b8-862a-eb9bb31910b0", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improved dynamic mutation strategy by incorporating adaptive mutation rate adjustment based on individual performance and population diversity.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.9594589557002606, 0.9603180771485925, 0.9599326672390149, 0.9597403823706, 0.959692951311882, 0.960001165059368, 0.9599661216752187, 0.9601517983418087, 0.9602993558061668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09887232682429226, 0.07128221580075167, 0.056163729528429185, 0.11391241241598105, 0.09898408352649435, 0.05653589856044727, 0.054924317612223605, 0.04192076721370175, 0.09085992801554199, 0.08128639167333818, 0.08414228405311186, 0.07141951919491218, 0.09824192619660843, 0.07404906342517403, 0.07350132542692278, 0.09460789120636581, 0.0735450681498302, 0.10784386010261338, 0.9902945275020003, 0.9912785028371849, 0.14855184159364576, 0.1608084829512405, 0.12895900605351474, 0.16203364984762225, 0.972161385775718, 0.9714854093686028, 0.967093727630111, 0.9407038152152131, 0.9407880247999061, 0.941649133573005, 0.940179235804225, 0.9428422950224637, 0.20345089409623807, 0.9424359173646636, 0.9412756347683096, 0.39187745805294694, 0.21234336812130172, 0.08622208729242775, 0.1366201549870213, 0.1807216886462144, 0.17584697597536836, 0.1510697783848176, 0.15300738619031184, 0.22848243255212763, 0.23981052854070184, 0.1748493395233912, 0.17352733376028828, 0.13799868995908782, 0.13196890322770705, 0.13554321022855642, 0.16117519197097374, 0.1663728289644767, 0.13794818268496112, 0.18674453422920145, 0.14049999116216294, 0.19307601424447318, 0.13329184210178524, 0.14121941199067, 0.17084291858614054, 0.16298725047168605, 0.19616771902089392, 0.13886261665973976, 0.134283065219845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06434693929425961, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037200534199284263, 9.999999999998899e-05, 9.999999999998899e-05, 0.059721389603812125, 0.05916875476718664, 0.12446222687216324, 0.058511172941763334, 9.999999999998899e-05, 0.011879302858313845, 0.11304002638662258, 0.005721353514935745, 0.03587060820329191, 0.13478303125218716, 0.11028229798363232, 0.1101279842046975, 0.10181836800704314, 0.11143528522628476, 0.2782424913167808, 0.1551296735606673, 0.18900565094532318, 0.10180734449565931, 0.12639715601650148, 0.12119922348250745, 0.06440180134585483, 0.13560240004777901, 0.07275058330365591, 0.24570529232936578, 0.2176449838660547, 0.29475752366706387, 0.23190707935987764, 0.5261369938906847, 0.4957422558599405, 0.5125624590008431, 0.5696969005111043, 0.5243089029666728, 0.5309023850940624, 0.5665046657285587, 0.49774876349125985, 0.5500489552341163, 0.12052985531925586, 0.07145405371726388, 0.0365481279106421, 0.05051107815579181, 0.1671042401144447, 0.09516485492861537, 0.08803734911626959, 0.10360625126126599, 0.08452686914126539, 0.17053342705855978, 0.17630360664871825, 0.20636772700822203, 0.15403778969281323, 0.2516036494819126, 0.19755692272331515, 0.22270654248383703, 0.25011589606027984, 0.21733710462141176, 0.22376320313888076, 0.16779537120066612, 0.12385895943232317, 0.3191837611869003, 0.1674371328544514, 0.15138437081719713, 0.22898298669295758, 0.10149157490020733, 0.09082870064061421, 0.10867954872623942, 0.15303927679052887, 0.07234561180747967, 0.17013102898319354, 0.24326151326480494, 0.1307707450707909, 0.21288269595941833, 0.10522263088039507, 0.012267261793994066, 0.24229623654516208, 0.2578640311642254, 0.15587002058569144, 0.2039728223463826, 0.1701870723028307, 0.2532851316234811, 0.25238129974325385, 0.16633177738237082, 0.2702522231738904, 0.16966146218632272, 0.1961403108072446, 0.1873666828036472, 0.20285401728587527, 0.17736832025565452, 0.17807492117535606, 0.1764040580314704, 0.16875761037060566, 0.1749684240926972, 0.10882902762789204, 0.1377269196536246, 0.07156923136938953, 0.17407534393298973, 0.11246954676270071, 0.06208910754034025, 0.10877968236417368, 0.11531055259519019, 0.16923936091246083, 0.40743296967223874, 0.11367319774498896, 0.0834494054490611, 0.17013245733354598, 0.21464486559805196, 0.04437009783885426, 0.11368274071664564, 0.1697915862960655, 0.2283105599233355, 0.21359517560821217, 0.19404594473590298, 0.2259583742729958, 0.2867192455350902, 0.27027970167409054, 0.1896689988487238, 0.20508592211818044, 0.2640145982939387, 0.22462815207389486, 0.07920720612114251, 0.1262256547345012, 0.09726998885448812, 0.0784451758453133, 0.07771301786725981, 0.10238254940091207, 0.057993396668112096, 0.06275727238713913, 0.12534720647793673]}, "mutation_prompt": null}
{"id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 36, "fitness": 0.28604038247781055, "feedback": "The algorithm DynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "c17a900a-d044-4c85-906b-f62b949e4b3e", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "c374246d-2f30-48ef-887f-866286c90fd9", "solution": "import numpy as np\n\nclass DynamicMutationCurvatureMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance and function curvature\n                gradient = np.gradient(self.mutation_factors)\n                curvature = np.gradient(gradient)\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness and np.mean(curvature) >= 0 else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationCurvatureMetaheuristic", "description": "Implementing a dynamic scaling factor based on function landscape curvature to adapt mutation magnitudes efficiently.", "configspace": "", "generation": 37, "fitness": 0.28604038247781055, "feedback": "The algorithm DynamicMutationCurvatureMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "5e0fb2b2-e099-4199-a8c3-dcb2f68c7ad1", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "80099a54-f07f-4a58-8d6b-c61f60b1001c", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "dc9ecdab-738e-4dec-9851-614c3ee18cc4", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n        self.diversity_threshold = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            diversity = np.std(self.mutation_factors)\n            if diversity < self.diversity_threshold:\n                self.mutation_factors *= 1.1\n            else:\n                self.mutation_factors *= 0.9\n\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n        return best_solution", "name": "ImprovedDynamicMutationMultiStepMetaheuristic", "description": "Introducing a dynamic adaptation of mutation factors based on population diversity to accelerate convergence while maintaining algorithmic differences.", "configspace": "", "generation": 40, "fitness": 0.15993351435917583, "feedback": "The algorithm ImprovedDynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.2395703862673233, 0.2619536300195283, 0.25783959959635916, 0.23707513588806617, 0.25874279583734916, 0.280130293606496, 0.24613009605355796, 0.24094528880581534, 0.25965267472901155, 0.004260785353506047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06253961277372633, 0.07225372141070785, 0.07836871608914675, 0.08773244526990898, 0.06772841204105207, 0.07806724309523283, 0.09493412715332394, 0.07111656102426145, 0.09033342129574162, 0.06965996887438375, 0.05979715560932586, 0.06639230789742379, 0.07086128972441075, 0.06348539887486937, 0.05015745471407296, 0.07951210834936251, 0.06680471645275499, 0.0574422683969773, 0.996684880015092, 0.9944481187618865, 0.9878925885347581, 0.9848728043482105, 0.9782552733161247, 0.9890436545136809, 0.9917830952436519, 0.9931244912931814, 0.9850651762250596, 0.15209154790639745, 0.15991579541735557, 0.14942739377558956, 0.14885236174772687, 0.17824298991398724, 0.1562607807712313, 0.15698725161324023, 0.15307383413047337, 0.13447762143622388, 0.202110192481884, 0.201649278009014, 0.19889813559035818, 0.18512209837342142, 0.15868554741739116, 0.18189225608785675, 0.19638423618936818, 0.18570552542432084, 0.2102259118301627, 0.06784125973311295, 0.05812948581153177, 0.09305982151952263, 0.09472368946708343, 0.0903207331985948, 0.0705743187457678, 0.06557158666139917, 0.01693550351097184, 0.07066201438798381, 0.0744114370807929, 0.07077904534421398, 0.0908327543093066, 0.08888562962565771, 0.07432076733078008, 0.09334114139068184, 0.07704630604509, 0.09052418330724377, 0.06894747795734746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09515765709226032, 0.10639947376219916, 0.13615056426369576, 0.11741209940866015, 0.08296339924836593, 0.0426750680005471, 0.11983208363389275, 0.06384181854641446, 0.08198471923379169, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02627502638755652, 0.008994162826084007, 0.02120429062811613, 0.014356143183424375, 0.03514398184437073, 0.024659295407524207, 0.03155322690730478, 0.025006180328308814, 0.03224647151110971, 0.24655760105385627, 0.2658014160549719, 0.2652528628160631, 0.28836240443869376, 0.28958760977318454, 0.2666921900883712, 0.2753868490297804, 0.28347457493347006, 0.32916833605650286, 0.0813659502485542, 0.07767977967249484, 0.08063451567802826, 0.10062214273524028, 0.08690617956619773, 0.07685485369288525, 0.09863215959134175, 0.08830502710611832, 0.08187079316573487, 0.1400586634595744, 0.1471330168902929, 0.1327362913570922, 0.1320849350448705, 0.13486612202745585, 0.14411647333780953, 0.12847028868255062, 0.14656345468611198, 0.14687631739817064, 0.20832772903188357, 0.20794692802927817, 0.19984102955076355, 0.21810223250402272, 0.21288050921652923, 0.20519514839126385, 0.20843233296324126, 0.22126541930170274, 0.21303914509012134, 0.15432706092367354, 0.15527783473454126, 0.14942651582133293, 0.13553657279870857, 0.15961333874750672, 0.12332832032720975, 0.1201125717874656, 0.14769983915961837, 0.14012975151325258, 0.21730352867685077, 0.23056390376727498, 0.192045309021722, 0.18255684178055787, 0.20189596132857623, 0.19302044553848796, 0.204878427077273, 0.19617384464822185, 0.19743848490305893, 0.17947951686452146, 0.17126599851477242, 0.16781880153207362, 0.16877612307940248, 0.17786216529632715, 0.1709915817229275, 0.17191937279000036, 0.18399443264465332, 0.1725391095448916, 0.1408295281372859, 0.12772801256833788, 0.3245779098695958, 0.34194440258552494, 0.13263940017195797, 0.16967899494558736, 0.12390555100503442, 0.12206959014271146, 0.16623912561960208, 0.30022666130158226, 0.1091125053255062, 0.07759738842936836, 0.07920152541129333, 0.20080612031349176, 0.1805859514442827, 0.11058545370364614, 0.16606275167356432, 0.2493691817349729, 0.18309138925296153, 0.18317642338412743, 0.16772163040601207, 0.17464847456833, 0.1833433510086917, 0.18014458258155186, 0.18435732559774165, 0.19065173800200896, 0.1818126719196984, 0.07242150513146284, 0.07567062652488654, 0.07940727553053606, 0.07885374223240049, 0.07563987066323064, 0.07558805440589678, 0.07859453195812072, 0.07998841259823908, 0.07027723101155137]}, "mutation_prompt": null}
{"id": "ddc12810-9202-4f99-bf6b-1473f216d095", "solution": "import numpy as np\n\nclass AdaptiveStepSizeMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            step_size = 1.0  # Initial step size\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors * step_size\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update step size based on individual and population performance\n                step_size *= 0.9 if candidate_fitness < best_fitness else 1.1\n                step_size = np.clip(step_size, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "AdaptiveStepSizeMetaheuristic", "description": "Introducing adaptive step size control to dynamically adjust the mutation steps based on individual and population performance.", "configspace": "", "generation": 41, "fitness": 0.2668661930792468, "feedback": "The algorithm AdaptiveStepSizeMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8347722296101233, 0.8373956662006761, 0.8378545284086407, 0.8309323151025456, 0.8326884911198257, 0.8385342951168369, 0.8330103436752587, 0.8347534039880484, 0.8312916261978276, 0.05145765388383028, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014363769509464164, 9.999999999998899e-05, 9.999999999998899e-05, 0.07737759558041923, 9.999999999998899e-05, 0.09290398821616619, 0.0964515644619538, 0.03323803638188361, 0.050746432049817325, 0.1242564078265781, 0.06506701037174822, 0.07021859056560276, 0.06571784866919972, 0.09563605112966655, 0.07110039605602592, 0.06423947716942546, 0.08757312605454959, 0.08087693489036996, 0.06523604639122627, 0.07146333165859775, 0.05101729498180152, 0.08921462694700166, 0.104021882459159, 0.9904216583165776, 0.9872375076904797, 0.9771654188002201, 0.9692005360594832, 0.9727640164458116, 0.9696915921677148, 0.98342123955553, 0.9836396725035192, 0.9830440220383908, 0.7617256394306818, 0.760885561137141, 0.761471872236974, 0.7610675558880142, 0.7619667800674162, 0.761995396800092, 0.7599435367477098, 0.7584501162696817, 0.7617353354016029, 0.17281253431828958, 0.11327900939842528, 0.1410908078841876, 0.28409846681426565, 0.28112544394379957, 0.22189744372263742, 0.23602255966454055, 0.23845053147288153, 0.23782621225137623, 0.23851590761797092, 0.25673104109102185, 0.2441017867559393, 0.3554151012753932, 0.26926590293780717, 0.24972918297505253, 0.23140767419997377, 0.24072351427823369, 0.2470210667547379, 0.3123255955908121, 0.22162112722190774, 0.2268803938605859, 0.2514434143155241, 0.28902248172994793, 0.23680348210883218, 0.13584088711655917, 0.21673269726837585, 0.2257946410635031, 0.04205100113565363, 0.015121261153918986, 0.08175300181308831, 0.13058748059081793, 0.12149475645121277, 0.03890521157612459, 9.999999999998899e-05, 9.999999999998899e-05, 0.010209141910422992, 0.055891889781751525, 0.05237344227713692, 0.10094431094600753, 0.04111026573600374, 0.027312141452586758, 0.019347023455417167, 0.13055084124904892, 0.021398571575061975, 0.02620482567520155, 0.06275003318795225, 0.051572617779972796, 0.07979887507075656, 0.0733944404189466, 0.16334301502749438, 0.20253576589532984, 0.14951490092203656, 0.14161312658512337, 0.08209182792665792, 0.26832622919059446, 0.034690537183051484, 0.24301513783978312, 0.17807587677291048, 0.07073458755523421, 0.30656780680945916, 0.13772655278994006, 0.10020881427172912, 0.13359425693801585, 0.5713774396140214, 0.5529037522988431, 0.5517075131385547, 0.5445452951872194, 0.5614646596481783, 0.5434583868564753, 0.5602217629069706, 0.5644363040732792, 0.557940633052733, 0.08359463223439967, 0.06256497654282445, 0.11044794362046195, 0.0778433201974642, 0.1341575765421228, 0.10127857502804782, 0.09693253486012654, 0.11072695973566737, 0.08532893308692602, 0.31301398261328506, 0.25772543348449695, 0.16075997474363646, 0.6041486315617142, 0.14233690258346854, 0.2096444356268885, 0.20128547933451268, 0.22844382838103205, 0.23964102443367985, 0.387994237647607, 0.3294572037685468, 0.14049247935456388, 0.4369859429268227, 0.41380719086857287, 0.4804892987703847, 0.16932728695098032, 0.41210476861470147, 0.09833233396729046, 0.24967353628631395, 0.060993362888525415, 0.028419823576880332, 0.32665428866318313, 0.23883344066609047, 0.08941905702756181, 0.24829207577596657, 0.1645230162689737, 0.027255172724975796, 0.21345621210658883, 0.3190493353944437, 0.1741843947705526, 0.20971571484054052, 0.22204634346506547, 0.18837636349334963, 0.21209335457255063, 0.179924192187629, 0.2118018839652004, 0.1921415576989005, 0.20404163073067727, 0.18303972403309032, 0.18975987964753305, 0.22648242061821489, 0.1916401144078851, 0.2300667187178278, 0.18401855993661798, 0.252947608487599, 0.15985201642525393, 0.13761574342758032, 0.10512424365190032, 0.1740544210080689, 0.11282965289758307, 0.06205367130458617, 0.10870643865841245, 0.12709940443994905, 0.1692224447721603, 0.8916724603540013, 0.11353990510786205, 0.08338672226672406, 0.08340986849265064, 0.21419697630154877, 0.21337890857059771, 0.11367970133966288, 0.16967975383047484, 0.6269925673903971, 0.24468580553913677, 0.30419609132683456, 0.44979216696241897, 0.25162431917836936, 0.24982359090849593, 0.24519721799297356, 0.24265027374226888, 0.21033699569123832, 0.21895093987602465, 0.1024802800054837, 0.11837134377331071, 0.034971815618558, 0.07821678816560795, 0.11898978153132234, 0.05421253345268651, 0.07236780749025584, 0.11365101654953091, 0.07948572105581186]}, "mutation_prompt": null}
{"id": "f8bb7fef-7e76-4f20-b033-8f40cdfe2806", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "b5cc4703-9420-48f7-844b-895cab8abb4f", "solution": "import numpy as np\n\nclass AdaptiveStepDynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                # Introduce an adaptive step size control mechanism\n                mutation_step_size = 0.1 * np.abs(best_solution - best_solution.mean())\n\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors * mutation_step_size\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "AdaptiveStepDynamicMutationMultiStepMetaheuristic", "description": "Introducing an adaptive step size control mechanism to dynamically adjust the mutation step sizes based on the individual performance.", "configspace": "", "generation": 43, "fitness": 0.09178100552808445, "feedback": "The algorithm AdaptiveStepDynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.12.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.1846912886142703, 0.13209445601849967, 0.3050421844255998, 0.12679691526584413, 0.8407851174926716, 0.841128255751826, 0.08798960073158546, 0.8626221243074027, 0.18310560818956267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044371470382325806, 0.012937908153526245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010850116369470975, 9.999999999998899e-05, 9.999999999998899e-05, 0.001227107716460396, 9.999999999998899e-05, 9.999999999998899e-05, 0.02045346738004228, 9.999999999998899e-05, 9.999999999998899e-05, 0.013831471996551548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0793385313145627, 0.02705752124112004, 0.03533083595864406, 0.052106499742736956, 0.08790601173126067, 0.07371955863720048, 0.050630241632847905, 0.10973575845000083, 0.07914106285327671, 0.06012020835059506, 9.999999999998899e-05, 0.03855303274829569, 9.999999999998899e-05, 0.03436668951036104, 0.013638664868598105, 0.0052657539285135835, 9.999999999998899e-05, 0.14977521155265805, 0.05701147471721779, 0.06379905601186786, 0.01581038124989609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3218324418322547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21103987724601403, 9.999999999998899e-05, 0.24424853793614043, 0.003800097717702511, 0.22652777727482276, 0.10530358291972719, 0.1031139969769691, 9.999999999998899e-05, 0.04345285196593507, 0.06488708899344786, 0.154574706403512, 0.16962609472967072, 9.999999999998899e-05, 0.08869110792092638, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013553459104371668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06509368249369418, 0.10031262017763021, 0.1251017026288691, 0.06697403988090955, 0.016778410573710767, 0.02427261781485579, 0.13794062238923888, 0.020610835605834987, 0.07163018922252229, 9.999999999998899e-05, 0.035578001209844334, 0.16799746926443226, 0.07824858679682967, 0.17020815594319594, 9.999999999998899e-05, 9.999999999998899e-05, 0.22442577601567193, 9.999999999998899e-05, 9.999999999998899e-05, 0.04889031298315094, 0.1584503970757285, 0.06728435129376353, 0.053623032497187695, 0.0480932852435384, 9.999999999998899e-05, 0.11613126115232175, 9.999999999998899e-05, 0.21627090505935487, 0.4699049396855356, 0.3699117861576301, 0.2758337887904446, 0.09339640443510688, 0.06450910708866175, 0.12525054538217828, 0.1802700976432734, 0.4137332481162105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05496138352136226, 9.999999999998899e-05, 9.999999999998899e-05, 0.05425595539654693, 9.999999999998899e-05, 0.1379226825944574, 0.1637712004394296, 0.1684933263922268, 0.034470850319826996, 0.1220467868340438, 0.07692664405380623, 0.06079579226975351, 0.15801999305232162, 0.115663133089139, 0.11504241199959686, 0.10418501944134129, 0.1057424426316087, 0.14633712410280064, 0.08104961010597267, 0.10328377096910368, 0.13908726218892498, 0.07926914467028678, 0.09553068209474191, 0.05217358852094456, 0.04596568090279429, 0.03111042720891999, 0.08219096003643422, 0.014531835219901423, 0.08194849643270374, 0.07823309986821003, 0.020143367242362542, 0.02658808178020955, 0.21876709476805734, 0.104603141681882, 0.12353985340916751, 0.17272975293389703, 0.09838281223387602, 0.13215912000059304, 0.18531938184037045, 0.116262955791256, 0.1647246916010685, 0.1504009191274115, 9.999999999998899e-05, 0.16106425745583275, 0.14823783462659945, 0.16849246663394857, 0.15467595088145758, 0.16441485855830174, 0.1570140130278369, 0.16505912752616336, 0.1837633814034363, 0.1157769117890719, 0.1607496167009873, 0.07656393761423297, 0.0659482267267053, 0.05940419924133822, 0.10881599349515869, 0.11411601143027106, 0.16941280469036646, 0.357680679264642, 0.09289374922042937, 0.016958133416986154, 0.06773428977369544, 0.05326217499855046, 0.05416078250828937, 0.17999053795513542, 0.058283456722805216, 0.04970519363944803, 0.1641676210273657, 0.24707049891737676, 0.17961193232501904, 0.20379913293722207, 0.22364280736035835, 0.2230132136654278, 0.16912711260291724, 0.26940389897971295, 0.2535501488250347, 0.03882755723485021, 0.04484709519732, 0.04242130148245482, 0.04047405055397535, 0.007999076657255855, 0.0375898813067177, 0.038405087120412684, 0.022718559717969766, 0.032707771147698295]}, "mutation_prompt": null}
{"id": "55055b3a-2c9a-43dc-8742-a4d7a42c331c", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                adaptive_step_sizes = np.random.uniform(0.5, 1.5, self.dim)\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors * adaptive_step_sizes\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMultiStepMetaheuristic", "description": "Introducing a dynamic adaptive step size control mechanism to adjust mutation step sizes during the optimization process to enhance convergence speed.", "configspace": "", "generation": 44, "fitness": 0.27089238343911815, "feedback": "The algorithm ImprovedDynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.27.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8182062529655693, 0.820477664679787, 0.8174640562762221, 0.8201900011408059, 0.8178064478553874, 0.8165540235882583, 0.815528433699088, 0.8203935900777364, 0.8146209110769402, 0.03558444321385845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04306892600034984, 9.999999999998899e-05, 0.13127031451292237, 0.04688597427305541, 0.12378927082176616, 0.15548217331685688, 0.0994751717836545, 0.1237311475966204, 0.10957169693260405, 0.15873170706663242, 0.11722314574882509, 0.08139137079899361, 0.053447058693485316, 0.08523258969481828, 0.10977983067553887, 0.0999151963785927, 0.09122586004392086, 0.0949936276960649, 0.12940015997907772, 0.08025255015282895, 0.9844175401650308, 0.9896689790608013, 0.9799871774964247, 0.965892452791732, 0.9861846855990516, 0.9770957177382528, 0.9924628564308025, 0.9833309521370706, 0.9900028812748254, 0.7483822781990938, 0.7339153572224452, 0.7407147677276922, 0.7417302769964986, 0.7480197275848326, 0.7400110649423832, 0.742100748878037, 0.7417160654942708, 0.7427844671160553, 0.23033205699409276, 0.16852723438639694, 0.35615383050946425, 0.19397435354005466, 0.2145680725578536, 0.22073477173764022, 0.2372164783577536, 0.23678556819343477, 0.87714974356359, 0.2390170889530726, 0.24793397607544032, 0.24722699310365226, 0.24121675570305423, 0.24354798128601451, 0.24247324091756872, 0.23721558810020016, 0.23800631881176626, 0.23744102955565682, 0.12958416960335617, 0.22157237143771613, 0.2463781736444446, 0.23819630366464584, 0.2300922402053589, 0.2331896005168388, 0.13332703599179674, 0.23131515076107056, 0.23002924114459888, 9.999999999998899e-05, 0.08502878571557393, 0.006999771827996493, 9.999999999998899e-05, 0.048790393968862755, 9.999999999998899e-05, 0.0034751189805676264, 9.999999999998899e-05, 0.005145984138901438, 0.03891761624835166, 0.06331734937211098, 0.11530327626584369, 0.07858434792467706, 0.02185774582264699, 0.008984957375468228, 0.07657154328705185, 0.030156849279743603, 0.03592217008418852, 0.03175339049665016, 0.038443114894887054, 0.09147744104786981, 0.07978230469339576, 0.108061234297669, 0.06864668227037785, 0.22319010665216088, 0.08959752735305793, 0.09393949610553187, 0.0737641547195994, 0.05038880800156442, 0.33593357907455756, 0.1773075566737703, 0.07718205439480985, 0.16331831859348023, 0.13045098905048325, 0.14589925548776883, 0.09147222520973997, 0.5643417606491092, 0.5460637840448894, 0.6104841219981632, 0.5462656931108714, 0.5437348876963273, 0.5619162243011605, 0.6000248613063637, 0.6299492551819939, 0.5534162748780196, 0.11663186049622742, 0.08013635565638721, 0.11674824820654572, 0.10899063852354307, 0.11600793999758552, 0.09187116868074685, 0.10055269386142662, 0.13143687003854898, 0.12367475364662228, 0.21659581247063675, 0.721105953915736, 0.4743764166400436, 0.34409790096609527, 0.28309123117448776, 0.17724230306538025, 0.724423359201902, 0.34150148011819537, 0.1719842567846459, 0.5623400643338003, 0.27323371141623953, 0.1397264750519971, 0.30885510742149247, 0.34982639197254817, 0.4900416105209545, 0.24597408758095995, 0.5043389760862527, 0.10241770305441311, 0.11791752042262016, 0.1713659519406594, 0.06381305993247277, 0.3219600274348432, 0.1874775747888503, 0.20116975115186564, 0.21444667486236024, 0.31958240628294954, 0.05069911727840315, 0.22703740996977995, 0.22542475653977123, 0.19793831850922372, 0.22433668502890092, 0.2382971632255214, 0.16226763559387547, 0.22753511418281236, 0.1694967676772312, 0.1855190898177993, 0.1805292834020149, 0.18108963815154522, 0.22846631715476218, 0.19990854909589972, 0.20025185049654115, 0.2001116839922995, 0.18774460789903136, 0.25048951719537904, 0.1719777044918004, 0.15922403384059236, 0.13671092731855283, 0.10541130544097144, 0.17365744531165128, 0.11241957738302477, 0.06195520781353536, 0.10832341241838417, 0.14869855072006521, 0.16760683778989915, 0.8243407609938124, 0.1131047374541213, 0.08317212868579682, 0.08316568619451048, 0.21243066939726518, 0.21239532893461277, 0.11358327208720076, 0.16789857234884964, 0.09487467151358853, 0.21094548098492882, 0.4408907520381248, 0.21182997849781326, 0.2982048342601741, 0.22316982545647857, 0.2266486267528931, 0.2624771333712541, 0.22796066838525597, 0.24941993168020182, 0.10946120569581885, 0.06791921686502211, 0.08451826903962467, 0.08252105484093131, 0.08432035122335324, 0.1364345810085832, 0.09232139700732533, 0.07479115773455436, 0.11559170956976472]}, "mutation_prompt": null}
{"id": "e34ed134-c23e-4e31-87a8-92ab04c2f80e", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Adjust step size dynamically based on population diversity and current fitness improvement\n            self.steps = int(max(1, min(10, self.steps * (1 + 0.05 * (best_fitness - candidate_fitness)))))\n\n        return best_solution", "name": "EnhancedDynamicMutationMultiStepMetaheuristic", "description": "Implementing a dynamic mutation strategy combined with an adaptive step size adjustment to accelerate convergence speed while upholding the required 10.0% difference from the original algorithm.", "configspace": "", "generation": 45, "fitness": 0.1607637047022336, "feedback": "The algorithm EnhancedDynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.2395703862673233, 0.26375640983869386, 0.25783959959635916, 0.23707513588806617, 0.2684560369025899, 0.280130293606496, 0.2887011009248731, 0.27260839036207185, 0.23863623891512498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06253961277372633, 0.08617338234459437, 0.08731805787051539, 0.08773244526990898, 0.08133536030295996, 0.07806724309523283, 0.09493412715332394, 0.07091369074696319, 0.09033342129574162, 0.06421488193200586, 0.058004647342974724, 0.06296110434300739, 0.07262738399081259, 0.05833616503234895, 0.05015745471407296, 0.07951210834936251, 0.055947563490464036, 0.0574422683969773, 0.9925149751608348, 0.9944466334298528, 0.9878912024567519, 0.9849003475256859, 0.9813127563399663, 0.9890436545136809, 0.9917778647834328, 0.9931252893093748, 0.9850651762250596, 0.15209154790639745, 0.15991575702259364, 0.14942739377558956, 0.15634034833885002, 0.17824298991398724, 0.1562607807712313, 0.15877690608502726, 0.15268102144200546, 0.14571560962730457, 0.202110192481884, 0.2333787925093027, 0.23554830670246196, 0.19807933944486789, 0.16710503086940587, 0.219793361832057, 0.1846452008851066, 0.20297216950395924, 0.22769565851971996, 0.06784125973311295, 0.051992522118077034, 0.08850292384482439, 0.09046481598837619, 0.06639754896607897, 0.07604042145742529, 0.08367949081913462, 0.0853174837778844, 0.07986428713768878, 0.0744114370807929, 0.07607119039512567, 0.08752405503926308, 0.08888562962565771, 0.06004275548417848, 0.10229772783087376, 0.07257577511938984, 0.08658161176595858, 0.06665455010411148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10071750454532025, 0.10619763915100489, 0.07725044814072679, 0.11741209940866015, 0.05402805004558142, 0.0426750680005471, 0.11983208363389275, 0.06384181854641446, 0.09262954948637692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02505566451406649, 0.02704139363575575, 0.02517772952154429, 0.014356143183424375, 0.030866132729433615, 0.018993613256219732, 0.022266574949793005, 0.0623768024986977, 0.031209227229665126, 0.2584335241572462, 0.2491563228177568, 0.26088278985802116, 0.28836240443869376, 0.3027562580420362, 0.2666921900883712, 0.2753868490297804, 0.27135056082257936, 0.31684332928068837, 0.07498821501847719, 0.08434600856414431, 0.08160102481124121, 0.07337280024497561, 0.11753420231485656, 0.08223149138158137, 0.09863215959134175, 0.07828241219285414, 0.07890419098959833, 0.1288039697424701, 0.1471330168902929, 0.1327362913570922, 0.1320849350448705, 0.1674818750165643, 0.14411647333780953, 0.1367200113087611, 0.14656345468611198, 0.11646090944686971, 0.20832772903188357, 0.20794692802927817, 0.19984102955076355, 0.2050885343501837, 0.21288050921652923, 0.20437699819554433, 0.20843233296324126, 0.20546396035534753, 0.21303914509012134, 0.16377575549237622, 0.15527783473454126, 0.14942651582133293, 0.13553657279870857, 0.1565465144614423, 0.13309520785694928, 0.1201125717874656, 0.1484456244777861, 0.14012975151325258, 0.21730352867685077, 0.1953391685548449, 0.189512850272455, 0.18255684178055787, 0.20704097050887948, 0.20240467268703788, 0.204878427077273, 0.2089723223632156, 0.20383901606838795, 0.17036406146058203, 0.17618231228089953, 0.17279319344947486, 0.1782976747307461, 0.1798415503639319, 0.18028092941396223, 0.1730308464946544, 0.16438366702297158, 0.16551921973872685, 0.14125443053310938, 0.12772801256833788, 0.3017325048839723, 0.3503517416954307, 0.14255287843540643, 0.17511650833323, 0.11440236695304462, 0.12206959014271146, 0.1704626817537288, 0.30022666130158226, 0.1091125053255062, 0.07938592993499838, 0.0795786392080019, 0.18778267660282222, 0.1775317439380607, 0.11065832541217646, 0.15972966605756234, 0.2493691817349729, 0.1796022939117249, 0.18317642338412743, 0.16772163040601207, 0.17464847456833, 0.1833433510086917, 0.18014458258155186, 0.178298737668793, 0.18543143387311478, 0.1818126719196984, 0.06749151679411025, 0.07362089714530429, 0.07940727553053606, 0.07885374223240049, 0.09222626580454218, 0.07317641243560558, 0.07859453195812072, 0.07998841259823908, 0.07027723101155137]}, "mutation_prompt": null}
{"id": "4d1785b8-1af9-4550-90ab-f4ece3762422", "solution": "import numpy as np\n\nclass AdaptiveMutationStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                mutation_step = np.clip(1.0 / np.sqrt(np.sum(self.mutation_factors)), 0.1, 2.0)\n                candidate_solution = best_solution + self.mutation_rate * mutation_step * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "AdaptiveMutationStepMetaheuristic", "description": "Introducing an adaptive mutation step size based on fitness progress to speed up convergence while maintaining algorithmic diversity.", "configspace": "", "generation": 46, "fitness": 0.2593874400106164, "feedback": "The algorithm AdaptiveMutationStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.27.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8571303089531807, 0.8562388641903909, 0.856891141661831, 0.8560125601724534, 0.855016700883809, 0.8560028363773444, 0.8549161615913281, 0.8617581279565147, 0.8641189232705477, 0.013319020814390514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09637486206905466, 9.999999999998899e-05, 0.014961059617310313, 0.06091038599919518, 9.999999999998899e-05, 0.0752085051923359, 0.041169064526344834, 0.01686314436743175, 0.0709064841325, 0.05707514876816677, 0.064851138013851, 0.07093257424502786, 0.029963581192189448, 0.07726627647802942, 0.10026730617412594, 0.0555327847097522, 0.008473365537631117, 0.09705151067912232, 0.05261385665532403, 0.08054206773609018, 0.06203240766400353, 0.05877319202223785, 0.047529528976056334, 0.9522893876549992, 0.9456636019132775, 0.9428883665900164, 0.9108752967764157, 0.179157881636136, 0.8746924265199871, 0.9664000169112631, 0.9402742472369571, 0.9754612931639963, 0.7877819500709247, 0.7807645941183119, 0.781202824316531, 0.783241648166582, 0.7879762905408251, 0.7865959514158058, 0.7870937080797236, 0.782866725764277, 0.7885043551495767, 0.21853452627001113, 0.09775845315232179, 0.09070624200797794, 0.9242708648815984, 0.2149802267253188, 0.21503039762389076, 0.13215801130121285, 0.15303394567559847, 0.15263436286551857, 0.2915755407707322, 0.13764730082404764, 0.13521881098748345, 0.3637156863626757, 0.2584344398096716, 0.23947330457856608, 0.22261169242223655, 0.25543130740584474, 0.2520663779643326, 0.2387645071615021, 0.25482653482918405, 0.12692288186676126, 0.29853702809587734, 0.3689719083991003, 0.2849203535621365, 0.2343052288939994, 0.3105734697146689, 0.24041272603132058, 0.009591093891566427, 0.10524371059298865, 0.07814220932172689, 0.12303448014593266, 9.999999999998899e-05, 0.060599279516665217, 0.00447137241999207, 9.999999999998899e-05, 0.10487939958843984, 0.05057711449756119, 0.08687061646467942, 0.14230590141685406, 0.05465961974159961, 0.013773816501889469, 0.01923849746554518, 0.2027433381416478, 0.02119586089513037, 0.08185212078256032, 0.09904533184526187, 0.03480248008204978, 0.13161255968641594, 0.07662065588553635, 0.1293972436624541, 0.19202312010403055, 0.10286788044992567, 0.2624114773841476, 0.12315705843670821, 0.29487076615059205, 0.0991750226867194, 0.3574239969489835, 0.18989113450004158, 0.1074228368165352, 0.14064449722269978, 0.21192862681760194, 0.28411100761182495, 0.13146254645124522, 0.586290426814955, 0.5975091922653333, 0.6322204272886934, 0.6130845234277758, 0.5561322937839696, 0.6415110790282716, 0.5854628140180176, 0.5631998457218752, 0.554139612693827, 0.0897593850123507, 0.06250126626371133, 0.05206276509285834, 0.08245119038102844, 0.06399555852496719, 0.10599162224623015, 0.05685153355963679, 0.075479413656933, 0.06850216683126453, 0.7582473964742185, 0.18564442847041485, 0.5719216274235681, 0.2898056195721753, 0.2328084773500354, 0.17940095476838547, 0.23483663145194644, 0.1920158121083586, 0.18724769573622357, 0.11679667079190093, 0.10440891667919583, 0.10825018498176431, 0.2660612615851021, 0.12849542070959796, 0.1194482561205854, 0.15504323258038455, 0.08834025724159167, 0.09057704397431954, 0.1344325206789272, 0.04210279998407418, 0.04707332635542827, 0.09012461666559302, 0.26664419761232017, 0.09316421853247503, 0.13965391504424918, 0.04485299606542703, 0.022109807552778693, 0.2174534021609612, 0.148905689750209, 0.20481331074428688, 0.1898490482224251, 0.15485998401597922, 0.19291736609134824, 0.2072170419550584, 0.1909215312799356, 0.16809784128550131, 0.18402143960485273, 0.2018124081538133, 0.17826099589825894, 0.18548319316399897, 0.19696629126687248, 0.18275114074952425, 0.1683101427334932, 0.18098511156423924, 0.16170445352984952, 0.18984337029310305, 0.13777192069643274, 0.9457463345436691, 0.17413192076176087, 0.11271545986390197, 0.0620587181501856, 0.1088596582134187, 0.11538899794019997, 0.16922161718285622, 0.9206496090943423, 0.11354950252727924, 0.08337832906632625, 0.01589682227696998, 0.21457911634950178, 0.21418394063823898, 0.11356661740592555, 0.05934880817834587, 0.47905083112766444, 0.2048191220401686, 0.25813969183317675, 0.47181015722760455, 0.2922021998565809, 0.24705722695861765, 0.2544369446278517, 0.27227563311128056, 0.2457326796763607, 0.25760547449249416, 0.05926780353555272, 0.09226624269380679, 0.041726761625695, 0.07481444634706147, 0.05043213323128948, 0.05951474726205874, 0.06227988171519505, 0.044196061312825274, 0.05048820417773481]}, "mutation_prompt": null}
{"id": "b6e5433d-d7fd-4e3b-8ce9-9bc171b10e82", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "d974a147-9bbf-4714-b651-ac7be077469a", "solution": "import numpy as np\n\nclass DynamicMutationSpeedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                mutation_rate = 1.0 + 0.1 * np.random.normal()  # Adjust mutation rate adaptively\n                candidate_solution = best_solution + mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationSpeedMetaheuristic", "description": "Implementing a self-adaptive mutation rate mechanism that adjusts dynamically based on the fitness landscape to enhance convergence speed.", "configspace": "", "generation": 48, "fitness": 0.16283464461542674, "feedback": "The algorithm DynamicMutationSpeedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.28352478792965774, 0.2535140221754689, 0.24457368484742248, 0.25282203792467084, 0.2787956631107972, 0.26317931637177827, 0.27212115829623895, 0.2531690877110412, 0.2615612944085842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10627405013215663, 0.06667529055171795, 0.08413133784659999, 0.07611470883953064, 0.08024758002860854, 0.09352075871591992, 0.08554360946240391, 0.08320979048216381, 0.07252961338471631, 0.09296422123770809, 0.06793703125222728, 0.06389644576674924, 0.0661708744660211, 0.0762820219077015, 0.06385526887856086, 0.08040106129027225, 0.049690416440473784, 0.06314389224184158, 0.9894494427302108, 0.989824254554631, 0.9751437158439469, 0.9747915841267225, 0.9707262945953034, 0.9894076724663214, 0.989490732443611, 0.9944144957547528, 0.9907495990597406, 0.14696687069060865, 0.13468156164466805, 0.15272598037780605, 0.185367526327879, 0.15018739784622925, 0.1866760177985205, 0.13301620450694396, 0.1618146678463267, 0.19260463979277176, 0.213787152106918, 0.25098731166355537, 0.2145037499778114, 0.2129803558812262, 0.18607711801037274, 0.21550937237109957, 0.22111185232181285, 0.2185425095205421, 0.1898584608111944, 0.07765077653607566, 0.09830210060506195, 0.09180208802270973, 0.02987449233407291, 0.0794633116246074, 0.0683873495118833, 0.07839045257929211, 0.06086516718320312, 0.08203066171567075, 0.08491816776863348, 0.08517890718925936, 0.07374271349718853, 0.06612600888961373, 0.07246402025713505, 0.08938768478615033, 0.06599508258828868, 0.05959716431578399, 0.025850086759195756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045097808935783856, 0.06682778874031314, 0.0583516889866631, 0.1323902633907097, 0.030259314492526057, 0.055764892767845464, 0.0944025735721532, 0.08093708719690695, 0.08071850519171875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01824510173657723, 0.015182845100974007, 0.01249245035541735, 0.02246213828476773, 0.027294223929162587, 0.01597730778965578, 0.03918787579862215, 0.0306873903208571, 0.022619892636033034, 0.2758811387987339, 0.2630187238749876, 0.2831035489683823, 0.2630719005618586, 0.271120491754834, 0.26198173766295807, 0.25060866524130276, 0.28786877314378767, 0.27407259309074683, 0.07729601713134948, 0.08546166621124052, 0.07294977502611688, 0.0765801574566396, 0.07687219561269298, 0.08655950682914604, 0.07468528385834594, 0.09134238590281729, 0.10305443559979433, 0.11438487053973279, 0.15833051398775677, 0.1343275995762333, 0.13806441117606916, 0.1509964331679, 0.14545724510886504, 0.13804603271277083, 0.15916422461390267, 0.1330710528217769, 0.21239552619081747, 0.2106950872080081, 0.21406164344299494, 0.20576282206997087, 0.24377651934532085, 0.2118835766314362, 0.2161304930804424, 0.20999915154867044, 0.19957942709948318, 0.15412777949888745, 0.15782560609471585, 0.17299945926379912, 0.14819207990520777, 0.16096174089474113, 0.15265329288544127, 0.14936469929721974, 0.1325924337862634, 0.13909818898647175, 0.20125000044575914, 0.1852471550561332, 0.2002174204292474, 0.17859335810197918, 0.20224624711665407, 0.1780743770816029, 0.2173050029550343, 0.22470476698552666, 0.2321234032341627, 0.173956058740524, 0.18643859247145844, 0.18295168360479175, 0.1676553508037466, 0.1728912499028522, 0.17073129747260896, 0.16360718334159208, 0.1670994313084686, 0.16877262024407158, 0.17817179594056287, 0.12215869553213654, 0.2798971924002627, 0.16592046719382814, 0.1315314617137534, 0.352752339711251, 0.12111395895897581, 0.11838717034642177, 0.14600650671228488, 0.31812977451008984, 0.11063616109293584, 0.29215531593130195, 0.15936171155085088, 0.183877813448576, 0.1774238753167492, 0.28335304207238554, 0.1554592620633335, 0.28666148541825065, 0.18670813707824452, 0.17189277183898488, 0.1900084538295459, 0.18317278743027754, 0.1875020460179052, 0.1849845055937157, 0.18580500117854393, 0.17674492151444376, 0.18596424807691192, 0.0789204206152685, 0.07986408560581382, 0.0892995435918208, 0.07781974846439921, 0.07992681181720251, 0.07215597180598088, 0.08306000492078092, 0.07587781639434799, 0.07737087212411187]}, "mutation_prompt": null}
{"id": "b2225d3f-729c-42c9-8e83-5fd09ba0ee1d", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "1050e3bf-edcb-4001-b816-7f20b153919b", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "8b4494b4-d684-4f7d-8d38-7442c1266845", "solution": "import numpy as np\n\nclass AdaptiveMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance with adaptive scaling\n                scaling_factor = 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors *= scaling_factor\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "AdaptiveMutationMultiStepMetaheuristic", "description": "Utilizing an adaptive mutation strategy based on individual performance for faster convergence while retaining the core multi-step mutation approach.", "configspace": "", "generation": 51, "fitness": 0.28604038247781055, "feedback": "The algorithm AdaptiveMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "7a11ff57-fefc-44b6-ad45-6a86fd3f3b2c", "solution": "import numpy as np\n\nclass AdaptiveMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance and population diversity\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors += 0.05 * np.random.normal(0, 1, self.dim)\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "AdaptiveMutationMetaheuristic", "description": "Utilizing an adaptive mutation approach based on individual and population diversity to enhance convergence speed with a 10.0% improvement.", "configspace": "", "generation": 52, "fitness": 0.2836129291446203, "feedback": "The algorithm AdaptiveMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8149791047507409, 0.8175226737598116, 0.8141010804981101, 0.8130383518288498, 0.8112941498322432, 0.8136315677501104, 0.8157720789521135, 0.8181317620689679, 0.8124042190345278, 0.044619634692529275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09041962193943431, 9.999999999998899e-05, 0.004605634827295257, 0.05558921226546332, 9.999999999998899e-05, 0.0957584317468958, 0.08414044475115201, 0.0328330934784431, 0.1835606428839094, 0.11586090470378185, 0.11022448035341381, 0.18217089611585346, 0.14460213145867418, 0.09495597665613076, 0.08724691037124443, 0.062420937313896085, 0.09331699915173575, 0.10285993445915864, 0.1205019550711024, 0.15554668897580837, 0.09493921567831853, 0.08989575393539495, 0.09006890787889132, 0.980694129666472, 0.9904574803522898, 0.987249505512533, 0.9781591143744129, 0.9843925378194097, 0.9795019104537578, 0.9963230395888568, 0.983735927674031, 0.9909347805975268, 0.7410397097047149, 0.7376920407055796, 0.741509630270689, 0.7395915756119082, 0.7370285059618698, 0.7391757302237145, 0.7397439652521263, 0.7348223135836693, 0.7388957178930153, 0.1711625008354304, 0.3622498644449802, 0.21613582850261526, 0.3579639515859889, 0.2142711327630864, 0.8745809444915826, 0.23593986263667288, 0.2485303682291896, 0.24913323884336325, 0.273823325678477, 0.22671298973918452, 0.13271122705412142, 0.23226061998428726, 0.12969883975781815, 0.22604722233569663, 0.13335480775667807, 0.13209740482859345, 0.23470683528332748, 0.21585743309952732, 0.21564875004576856, 0.22456409773523978, 0.24174048451062735, 0.24987981303900753, 0.2235114741019173, 0.21510792729850536, 0.2616191337224216, 0.2419430109997619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027962571969250005, 0.04597288039703695, 0.03241942757314786, 0.048361830198490496, 0.04874456984619302, 0.066396687938449, 0.06709188292525381, 0.07572780534367485, 0.0435507593145239, 0.028144573595032862, 0.02296346020176243, 0.10943594501572773, 0.015174534902520409, 0.08050045570593323, 0.10555433010498805, 0.04512590890786172, 0.1474962355897047, 0.08488412069877393, 0.08815158128449696, 0.19813918285548382, 0.0889791199469302, 0.1159560505045869, 0.09064391490405177, 0.10490337031665553, 0.0871001341067682, 0.06572485187850019, 0.19276139958925698, 0.18667224397459792, 0.2859049217775326, 0.2381798010589684, 0.23255216819794744, 0.1209569763888545, 0.5617115462512868, 0.6299141362980037, 0.5524924342500723, 0.550176071685643, 0.5393251532878749, 0.5385736645984824, 0.5169512269390986, 0.532310059843474, 0.5347160754448756, 0.09943024409333323, 0.07206743861382126, 0.1157140150850926, 0.1248588495454307, 0.11084278533325831, 0.09174709412225124, 0.1039739923287587, 0.1099833223579404, 0.08982712800316728, 0.2817477931690774, 0.5872632604497479, 0.48450896419090694, 0.22734724085134062, 0.17679319578961572, 0.16919951825668555, 0.2711699861448986, 0.6726748390912274, 0.18264979624187716, 0.3208732161392144, 0.22667390142312405, 0.15711531813693014, 0.3915354320084823, 0.3524588936478129, 0.37059831741624716, 0.24625597017367085, 0.24648023692622179, 0.38745060632248685, 0.2956359202104514, 0.3682227549539465, 0.27733094083511456, 0.22371386416050276, 0.17031227499954926, 0.14062532667115135, 0.1861239318706931, 0.16788045416979058, 0.0893780495738441, 0.19171941617513943, 0.22168430654845894, 0.18081572534768964, 0.18461065543212385, 0.19452285818954917, 0.2531839035260828, 0.22005741212835095, 0.1931193495251401, 0.2429106345584935, 0.18684848343991567, 0.1819140666179646, 0.16526859385954007, 0.2251034261729563, 0.21181569006611656, 0.1944591435356935, 0.19812746079779142, 0.17417014307657175, 0.18752715640065187, 0.18861272811245233, 0.13689013684818108, 0.9141109093766107, 0.9076564815307766, 0.1123915024072687, 0.15341091280829167, 0.21268502940939094, 0.1271916847187784, 0.16864763868611476, 0.8698720723748482, 0.1132081379977179, 0.08304830464685986, 0.08316253353788272, 0.11330480097151163, 0.21306968598507248, 0.11325756382546637, 0.16937879881710327, 0.4217561957127678, 0.4297834568348694, 0.44136647827843445, 0.3763974789717913, 0.4485045548291994, 0.3626827275940083, 0.4372481219875739, 0.24180054744450963, 0.24085290873241583, 0.3121013233983633, 0.07434448594841547, 0.08839852255854785, 0.08182611835433362, 0.0795827484313737, 0.08179427420952234, 0.1160920265081109, 0.11157624529949539, 0.1056115703968259, 0.07719883641330649]}, "mutation_prompt": null}
{"id": "e5e9dc9c-2b92-4b7f-8d47-16f8d00af612", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "89756e21-2575-402d-9d8e-455ce4a10682", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                    # Adaptively adjust mutation factors based on local fitness improvement\n                    self.mutation_factors *= 0.9\n\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "EnhancedDynamicMutationMultiStepMetaheuristic", "description": "Enhancing convergence through adaptive step size adjustment based on local fitness improvement.", "configspace": "", "generation": 54, "fitness": 0.19011597480306341, "feedback": "The algorithm EnhancedDynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.23.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.9118316060114955, 0.9103636664264788, 0.9126859511761765, 0.9041992594758232, 0.9015303903873674, 0.9069128987943372, 0.9057827074947904, 0.9139893382400923, 0.90700041946061, 0.06462880574313201, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09055194906431319, 9.999999999998899e-05, 0.008127913195695169, 0.0633223574256443, 9.999999999998899e-05, 0.03554524174359974, 0.029842823529080298, 0.011431718681310987, 0.017463695182692418, 0.08761203397605821, 9.999999999998899e-05, 0.012544322569572275, 0.05355397205086321, 9.999999999998899e-05, 0.01737832317756638, 0.0025001826623131107, 9.999999999998899e-05, 0.017486408897331995, 0.14305884124387935, 0.0687205490236229, 0.06616587872012647, 0.07194794954527484, 0.0806550610025677, 0.1172385062923097, 0.0740780436962738, 0.0892691897676876, 0.12789300440117968, 0.8501835754592497, 0.057512973064424266, 0.051341850461043226, 0.8241940897521813, 0.8396355142936214, 0.26039054908260895, 0.8388095416174757, 0.03843521454332699, 0.8243377816923543, 0.08876796496946104, 0.05718318224857799, 0.037352239265932785, 0.3972602489101631, 9.999999999998899e-05, 9.999999999998899e-05, 0.07338578589529565, 9.999999999998899e-05, 9.999999999998899e-05, 0.2911480627339271, 0.13317754942309035, 0.21145521261671552, 0.31459129758480253, 0.25360760515619885, 0.15091872043288024, 0.3758387212294526, 0.25735168531862995, 0.23145519282898153, 0.25450441047373173, 0.2233912526741776, 0.13562789455857982, 0.24322061388213922, 0.45297518134861625, 0.23541584165305807, 0.3075534144226125, 0.40815266337506084, 0.21449261207680814, 9.999999999998899e-05, 9.999999999998899e-05, 0.06860908773956276, 0.06839725796531582, 0.009463628100380261, 9.999999999998899e-05, 0.0012364857000426444, 9.999999999998899e-05, 9.999999999998899e-05, 0.06656235558853063, 0.05701916337928303, 0.15933131377643206, 0.06036048968143115, 0.0012797075494686005, 0.009867518514104279, 0.1310871399882051, 0.01881437986373935, 0.054952621330624285, 0.159735200491393, 0.06489742557359335, 0.2341305487680293, 0.08264420555382734, 0.1302937671806167, 0.08146664418727201, 0.234187463125629, 0.1354242968849343, 0.08859202546783185, 0.09769581960226992, 0.10160565529241394, 0.08963231939714711, 0.2901754514678523, 0.14970139415923223, 0.11510297756347387, 0.09768994416025767, 0.08080688645265222, 0.096037339105291, 0.6015071454505401, 0.5646065476968282, 0.6036049999565384, 0.5814337374021774, 0.5439313312056592, 0.5543395270916265, 0.573712469940716, 0.5885792074418277, 0.5698275782192446, 0.01747729158622624, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011508771390627004, 0.04537265894703302, 0.06499845083988698, 0.056660411717549874, 0.044137275089501604, 0.02001613524321888, 0.20575517741467486, 0.17139844170572782, 0.13707901433261394, 0.22289767656717063, 0.24034190994043725, 0.1823506431422437, 0.21858800817324286, 0.24145004867755326, 0.20754350722084525, 0.15520567695976717, 0.1157718971358701, 0.10681671024392092, 0.13692106725615194, 0.10079632491864343, 0.1092478660955134, 0.2515127335063143, 0.10300533637449227, 0.09453857410418731, 0.09555496696209143, 0.04988302959262492, 0.03883087076234315, 0.18836297720339412, 0.030259657932723893, 0.09301748354753359, 0.14819512989554262, 0.07845103778900142, 0.022103406225582156, 0.20024594554145447, 0.15704973117796217, 0.19123762481912243, 0.21342393185523578, 0.15110690789022452, 0.13834298563016567, 0.24355955559418652, 0.10720072982130291, 0.1347805253033495, 0.17075719353960994, 0.17746888025434837, 0.16208137039861847, 0.18671341479285197, 0.2053004805488201, 0.16040407856198524, 0.16433807718561788, 0.1666797005433518, 0.177480451857992, 0.19017891294107925, 0.1380252253426617, 0.07162066457298244, 0.1743464920582385, 0.11180685069545471, 0.06206593765556079, 0.10893774899592534, 0.12762670448563607, 0.1687078053590414, 0.9424178894268425, 0.11352070957610416, 0.08325841252419464, 0.0833450988362534, 0.21462031768680723, 0.21267456313996658, 0.11375455737583051, 0.05938360000656251, 0.2846520819652615, 0.21481863487074282, 0.37860919956694994, 0.5309822926704689, 0.3585483317480712, 0.2312638634171439, 0.23209297827602937, 0.20338912355166527, 0.21949157783912887, 0.21285562146559855, 0.03316325637971318, 0.0693703342145886, 0.03501341479701281, 0.029205130433313187, 0.01544566257199953, 0.08176638574533879, 0.08982417190112646, 0.019301527185479284, 0.06537710850359268]}, "mutation_prompt": null}
{"id": "360cdb29-4cd5-4bd2-81a6-b78637305b46", "solution": "import numpy as np\n\nclass DynamicMutationSelfAdaptiveMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance dynamically\n                self.mutation_factors += 0.1 * (candidate_solution - best_solution)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationSelfAdaptiveMetaheuristic", "description": "Introducing a dynamic adaptation of mutation factors based on a self-adjusting mechanism to enhance exploration and exploitation balance.", "configspace": "", "generation": 55, "fitness": 0.16930510136425914, "feedback": "The algorithm DynamicMutationSelfAdaptiveMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.48486918601058426, 0.8452797901185973, 0.5930990471165696, 0.8364210091620914, 0.27051969887946525, 0.8668314360002227, 0.24129715392714557, 0.8403095025519719, 0.22549853224485372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14678123120463404, 9.999999999998899e-05, 0.08656962324185968, 0.06693918649520003, 0.007010845790308862, 0.12940874031594196, 0.036510659858791206, 0.049965186461277344, 0.084527546298786, 0.060835133804249875, 0.03937951162188713, 0.10057530285439065, 0.08895439097498603, 0.04594447565695081, 0.06305699024068656, 0.050069546763615635, 0.04222256857071838, 0.10516415538621238, 0.05187774923369448, 0.03914990622214698, 0.961838790376065, 0.1977950321451969, 0.9510208898022892, 0.1775764467008959, 0.12562523062676645, 0.11481611691540639, 0.9705681417638903, 0.19640165052379144, 0.1324469646774662, 0.21261994541883744, 0.16977706936276704, 0.03807788334514406, 0.06268714421995025, 0.16564704605757963, 0.11735183483569034, 0.2098578065116038, 0.10926436176507992, 0.35855623490300126, 0.22993259632958762, 0.13539256173243908, 0.11569818424798828, 0.36701050049102946, 0.15435301643782928, 0.1622291245352221, 0.0866283423747578, 0.07730953489616421, 0.11233814555591526, 0.1481653647421337, 0.13177554496855848, 0.14185617408427775, 0.1255668522608503, 0.15307635042784262, 0.0005612226785249863, 0.1334853129351975, 0.13950763483234407, 0.14988471252804447, 0.1697574461651915, 0.1622594118563313, 0.12435050581131057, 0.2162807126920967, 0.14317947327748737, 0.13211240865527418, 0.15196494459063792, 0.19594347707611282, 0.13638814032998803, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016185663291252816, 9.999999999998899e-05, 0.04509253865746554, 0.03723485098898471, 0.14678575274957306, 0.06629617215269556, 0.02791999331908157, 0.022992517282358294, 0.10424009337286866, 0.027165128629273894, 0.012649410047098408, 0.14268296771652367, 0.052208964166753136, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226767347366292, 9.999999999998899e-05, 9.999999999998899e-05, 0.279070777929847, 9.999999999998899e-05, 0.1677184813472128, 0.1178142539755237, 0.23066376675593547, 0.04330349581677617, 0.10686818627287753, 9.999999999998899e-05, 0.001248231239258879, 0.08353643319240278, 0.08438701578034924, 0.3254076738806162, 0.46565152526795506, 0.5185142246600004, 0.5163160405572913, 0.4936642448298397, 0.35337222071516083, 0.36170237236121083, 0.45990992047945944, 0.4154299830510749, 0.07323160605897006, 0.029472596098164994, 9.999999999998899e-05, 0.04937517027589333, 0.0961356584174815, 0.056170476390915436, 0.04708693034927891, 0.11033992956473215, 0.05118337426850883, 0.270742086480515, 0.23805020941001653, 0.14544255632704406, 0.2570069733235353, 0.26346503105821417, 0.2026289641180733, 0.1906978396823218, 0.14689533170392788, 0.2378816273368043, 0.12784651949399706, 0.14062901769952274, 0.1274949983481658, 0.23043757012717625, 0.12888328167392082, 0.14982447731392334, 0.1526165419612585, 0.19283527152898539, 0.09044677912307286, 0.07694570417744939, 0.05202202752064078, 0.03147739749781309, 0.12063585117139464, 0.09679787417965491, 0.13764334506498777, 0.1100841295751337, 0.06969550852411266, 0.034123040601117816, 0.16994575928223643, 0.26296452625801603, 0.1697640767302837, 0.2340652334477098, 0.15116261225783023, 0.16738174482414048, 0.21657350976147693, 0.193386420298977, 0.17194707220383676, 0.18363493998905722, 0.18862419643296624, 0.19208748544524656, 0.17238942152137915, 0.7155798346286313, 0.21091336813132877, 0.19022331823554528, 0.1711627557762676, 0.1784727443906382, 0.1891013571538227, 0.843488794570533, 0.07158367240936858, 0.1740980032353766, 0.10720872828848915, 0.062093514534242056, 0.10880711558258005, 0.11281330601237971, 0.16587738479180303, 0.9296350739215139, 0.10627934649385096, 0.08343377148945275, 0.08245304765771833, 0.21419990370572872, 0.17021842584442004, 0.11138707895627065, 0.059306643020694216, 0.304167776738979, 0.22651898506651125, 0.20844291555341232, 0.25233536401136203, 0.18669008822756372, 0.20886453491769896, 0.25065364452245975, 0.21353306899710656, 0.24064386135522764, 0.26173285015404313, 0.06384637123651482, 0.08760414475057254, 0.04732983110055633, 0.09050214165464243, 0.0592023888944857, 0.04807525406895652, 0.06694058934371483, 0.0710211144477143, 0.044682118475126265]}, "mutation_prompt": null}
{"id": "1a88c163-4fa3-450a-9391-d5564ef088f5", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "e1316538-8303-4c24-9042-d535e1b41ce5", "solution": "import numpy as np\n\nclass AdaptiveMutationStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.base_steps = 5\n        self.min_steps = 1\n        self.max_steps = 10\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            adaptive_steps = int(self.base_steps * (1 + 0.1 * np.sin(_ / self.budget * np.pi)))  # Adaptive step size control\n            for _ in range(adaptive_steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "AdaptiveMutationStepMetaheuristic", "description": "Introducing an adaptive step size control mechanism that dynamically adjusts the mutation steps during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 57, "fitness": 0.28604038247781055, "feedback": "The algorithm AdaptiveMutationStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "1ebe30a0-ae7f-4bd9-b1e1-45e21da9abfc", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n        self.performance_history = []\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                self.performance_history.append(candidate_fitness)\n\n                # Update mutation factors based on historical performance\n                if len(self.performance_history) > self.dim:\n                    last_dim_fitness = self.performance_history[-self.dim:]\n                    self.mutation_factors = np.where(last_dim_fitness[-1] < last_dim_fitness, self.mutation_factors * 0.9, self.mutation_factors * 1.1)\n                    self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "AdaptiveMutationDynamicMultiStepMetaheuristic", "description": "Introducing an adaptive mutation step size adjustment based on historical performance to accelerate convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'<' not supported between instances of 'float' and 'list'\").", "error": "TypeError(\"'<' not supported between instances of 'float' and 'list'\")", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {}, "mutation_prompt": null}
{"id": "83600fdf-7f10-4b94-a4d3-e8a4017cac33", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "149c6903-4264-4747-835a-8d209a6d8c3d", "solution": "import numpy as np\n\nclass AdaptiveStepSizeDynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n                # Adaptive step size control based on individual performance\n                if candidate_fitness < best_fitness:\n                    self.mutation_rate *= 1.1\n                else:\n                    self.mutation_rate *= 0.9\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "AdaptiveStepSizeDynamicMutationMultiStepMetaheuristic", "description": "Introducing adaptive step size control based on individual performance to enhance convergence speed.", "configspace": "", "generation": 60, "fitness": 0.05168264851261201, "feedback": "The algorithm AdaptiveStepSizeDynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.16110917342909326, 0.07217663200852242, 0.11196905874390417, 0.04633208303863989, 0.03791646504901891, 0.06896540419721464, 0.09925357143568259, 0.1543186245783974, 0.055641396137927734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025872240225363052, 9.999999999998899e-05, 9.999999999998899e-05, 0.02164649625359394, 9.999999999998899e-05, 0.021015043436701686, 0.016573352424524068, 9.999999999998899e-05, 0.025333341137821153, 0.037725860488365126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06871058019225296, 0.017996371745743422, 0.018506341670026405, 0.041275145716047845, 0.031146231012518677, 0.03756803585253998, 0.03594700049423771, 0.03045328719759144, 0.03731288403285671, 0.13955630186689671, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03217335013619649, 0.005675863189479435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07857832718694813, 0.043394376869273166, 0.012057853876833668, 0.3127437728025648, 9.999999999998899e-05, 9.999999999998899e-05, 0.06646526998339308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03693270899638357, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646011785179482, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04756698642750612, 9.999999999998899e-05, 0.1856201448048862, 0.061632549375732926, 9.999999999998899e-05, 0.0005913902491915257, 0.14477884799542884, 0.01263679931118622, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1802514173853933, 0.07131894664443639, 0.15510015629340235, 0.09268313579269871, 0.08750802780500089, 0.014461875905225297, 0.13727023014159845, 0.13135783969554993, 0.11026192518485389, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031350500336089215, 0.019936213557640303, 0.0182632061187884, 0.01515072236364634, 9.999999999998899e-05, 0.17185599144271213, 0.08737085803761169, 0.11943419603602667, 0.19824890483521396, 0.05539081756693154, 0.10021099365272335, 0.09009960645017634, 0.08717677552143122, 0.06392172835185361, 0.11657557794643003, 0.10000513375758435, 0.10429446122625396, 0.1356558680626242, 0.08263767292656699, 0.10952708504780384, 0.1389860367667849, 0.0816774261949933, 0.08559104576000387, 0.06425892723920024, 0.022106554521113098, 0.02924396965853937, 0.08258350442264706, 0.019788953207067972, 0.06293585411534675, 0.0708590701823345, 0.009055577017194838, 0.013219086400748536, 0.17028562561902438, 0.06502562923321653, 0.14113352887629949, 0.16688094402092835, 0.08822363843268954, 0.12700119782778985, 0.17510827829050413, 0.07760030120932038, 0.0931821679184972, 0.14127336157576798, 9.999999999998899e-05, 9.999999999998899e-05, 0.16791980452116728, 0.17773467876152993, 9.999999999998899e-05, 0.15340341259609047, 9.999999999998899e-05, 9.999999999998899e-05, 0.13599347883295254, 0.11863823752933478, 0.05459231182365676, 0.17251861192044127, 0.07715334828953979, 0.04264900363758861, 0.07686821780443365, 0.111298829721173, 0.08919865471097765, 0.26671864453604044, 0.10518472879038221, 0.023726873375280455, 0.06579124611163767, 0.05691407265715587, 0.021343360866709737, 0.10537502689232026, 0.050062916064783525, 0.07728826795524923, 0.1919779585125727, 0.14961643558067883, 0.17530409983071515, 0.1732275987313271, 0.15047133194264717, 0.15957432551170603, 0.18835028748064264, 0.1676740023544271, 0.23021677310111277, 0.008472534498710771, 0.02263042812107885, 0.029883996475727925, 0.021689831162918338, 0.010550370217202176, 0.03746201941239036, 0.04111635010376702, 0.008775172338995385, 0.03248939758689595]}, "mutation_prompt": null}
{"id": "6b15e0ea-9ba5-4477-a92d-01512b2af693", "solution": "import numpy as np\n\nclass DynamicMutationAdaptationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        prev_fitness = best_fitness\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on recent performance improvements\n                self.mutation_factors *= 0.9 + 0.1 * (prev_fitness - candidate_fitness) / prev_fitness\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n                prev_fitness = candidate_fitness\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationAdaptationMetaheuristic", "description": "Implementing a dynamic mutation adaptation mechanism that adjusts mutation factors proportionally to recent performance improvements for faster convergence.", "configspace": "", "generation": 61, "fitness": 0.17000663910336425, "feedback": "The algorithm DynamicMutationAdaptationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.23.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.908339539993539, 0.8994018722485265, 0.922267160933058, 0.9004595190271356, 0.8883025599874677, 0.9045204273879164, 0.9042274648047846, 0.9071732595454911, 0.9008371362298221, 0.018872140860270004, 9.999999999998899e-05, 9.999999999998899e-05, 0.017411894993302535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013792871325014278, 0.01629315777918583, 9.999999999998899e-05, 0.008354027173130829, 9.999999999998899e-05, 0.01828134202723608, 0.01827452239579319, 9.999999999998899e-05, 9.999999999998899e-05, 0.021609058225501743, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14172018010708975, 0.05746198554338766, 0.0644216047829177, 0.07018820740629594, 0.07651485893197019, 0.10279907609617733, 0.06710632815797801, 0.08255154564536604, 0.11222051555161483, 0.8580703453188844, 0.0540386961166891, 0.058364761909076024, 0.8069666608048202, 0.8421628587133929, 0.1718124546890626, 0.8381909417976493, 0.022549860371520847, 0.8292720174800223, 0.054844194400876733, 0.012758329360778031, 0.004906102586392125, 0.1050672361391447, 9.999999999998899e-05, 9.999999999998899e-05, 0.05229172603898935, 9.999999999998899e-05, 9.999999999998899e-05, 0.23359248133697685, 0.15944962802025986, 0.18573043486619223, 0.22740926320278654, 0.2503768536040911, 0.15987152397062454, 0.32004394500644007, 0.22453421688084496, 0.23441277352603873, 0.27695250977829167, 0.21456294734382886, 0.1367914958224481, 0.26007651743939664, 0.3777559416798043, 0.2249176241746258, 0.2665097893821108, 0.25585620457200065, 0.21238463468265079, 9.999999999998899e-05, 9.999999999998899e-05, 0.05434141789368818, 0.06797847808338486, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033132779534260637, 9.999999999998899e-05, 9.999999999998899e-05, 0.0770112732176218, 0.048612175989508954, 0.2145709186112187, 0.06538862900623355, 0.005979777312725143, 0.007540359396367213, 0.16312908295623707, 0.018967651418245413, 0.060833712062127066, 0.29619959435832166, 0.045390861998755305, 0.1832132781045016, 0.08084728004030184, 0.13676450050362887, 0.08107246753025665, 0.16955956065568611, 0.10357090648665179, 0.09270282340161362, 0.0665381651348107, 0.09599360432792214, 0.08634625781673622, 0.2193818180639776, 0.14330413711826218, 0.09978710838887495, 0.121966225901594, 0.025839582308262443, 0.09531473921616873, 0.5966894629324628, 0.5666527740291634, 0.6113845657895014, 0.6017960854876754, 0.5505904386196931, 0.5024231447472103, 0.5753510117285587, 0.6112631322968561, 0.6084309785522178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008355039733105696, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4424101472318709, 0.09012765883888518, 0.15120442733314943, 0.0739756208690564, 0.12308245697433262, 0.15927797207521455, 0.061899600971385915, 0.08502154512993199, 0.14400349509327093, 0.11502586446574603, 0.10292701007538418, 0.10796550818382877, 0.1339190506988216, 0.0812001735130452, 0.10893148365243766, 0.1327643880784839, 0.07835679855096445, 0.09216673448198998, 0.062156411564542435, 0.04834838498655769, 0.02996657382581558, 0.08870329129154397, 0.020868694090731665, 0.0738252502447031, 0.06892534564809338, 0.016779931803776127, 0.015622395409554124, 0.15905892946420686, 0.07315007897410963, 0.10740514661948541, 0.2098139912384015, 0.05975941302739263, 0.07532870311482054, 0.18199077775690697, 0.08117091508583452, 0.121762497881309, 0.15802954965867355, 0.18078314467441192, 0.17483677151057797, 0.15468850811588886, 0.16829479863435648, 0.16817110345430097, 0.15187835792597104, 0.17133038600727235, 0.17308653840813226, 0.1897627547394667, 0.13806005960525358, 0.07151961473946189, 0.17433677263233271, 0.11242300828269924, 0.061906807545057174, 0.1087478585701912, 0.12740733103389557, 0.16811295841447804, 0.9288249959857467, 0.11352827022181644, 0.08270574408111264, 0.015901849031778492, 0.21091590464017895, 0.21052767731247302, 0.1135795466880456, 0.05919645446586308, 0.051688593912162295, 0.23363498400615945, 0.2271788951155982, 0.1953554399448828, 0.18895073444861676, 0.26556924745659993, 0.2239422077566272, 0.2571642636122212, 0.27883759702107924, 0.25955963384341396, 0.03902665088304125, 0.008012252915383988, 0.03508081070671287, 0.0230958708914335, 0.010376097949141294, 0.011634921000064802, 0.057602578128337134, 0.00659869271595348, 0.036647612043982036]}, "mutation_prompt": null}
{"id": "672bc21e-7451-4b8d-a242-d424993ed63c", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                    # Update mutation factors based on individual performance\n                    self.mutation_factors *= 0.9\n\n                else:\n                    # Increase mutation rate for exploration\n                    self.mutation_rate *= 1.05\n\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Introducing a controlled adaptive mutation step size adjustment strategy based on fitness improvement for faster convergence.", "configspace": "", "generation": 62, "fitness": 0.11150978220095303, "feedback": "The algorithm ImprovedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.20.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.22125936750143815, 0.24478344229866622, 0.12432304500704228, 0.24230782088455394, 0.22460461066676662, 0.20082520594516917, 0.23645337209410378, 0.20706833155685822, 0.16873082129233496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02114496506252983, 0.023409667346579788, 0.02357152084331615, 0.023293372010170788, 0.05016234829981603, 0.012152680318862852, 0.02804524479607995, 0.04681905398375075, 0.014329333041073533, 0.0121080521011101, 0.005033032693845585, 0.025689617935925724, 0.011607815009325173, 0.02364035755384175, 0.018963823745778097, 0.024571017298875675, 0.024306444489660906, 0.0071913022374694435, 0.9892088922684497, 0.9868996308498572, 0.9872280706061987, 0.9838113218180483, 0.9863871467769905, 0.9876246679790429, 0.9846343455320661, 0.9883765063343045, 0.983517330799, 0.08908255431384804, 0.03560243062233748, 0.12835042073388359, 0.04045482555761115, 0.031110771166968143, 0.02778592644391953, 0.06982492641731952, 0.04584889236489431, 0.05871278995202889, 0.08257316426941508, 0.07291409419411643, 0.02976774378984448, 0.230788458021841, 0.056688373333110165, 0.11486428366840395, 0.0662103232021074, 0.07545391889112218, 0.11068695164905962, 0.0816433334659874, 0.08635992587172536, 9.999999999998899e-05, 0.030000522995537904, 0.07851163379504655, 9.999999999998899e-05, 0.04660726874825505, 0.03952682796035678, 0.003654404899850361, 0.04021936225546363, 0.02080229325359484, 9.999999999998899e-05, 0.014256119338058482, 0.12742703959769097, 9.999999999998899e-05, 9.999999999998899e-05, 0.021862545584347748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018110550549823023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056615812772057295, 0.011288302024058061, 0.032705885217275465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014437258679123044, 9.999999999998899e-05, 0.01640635472072316, 9.999999999998899e-05, 9.999999999998899e-05, 0.32578118979951676, 0.25010255312080576, 0.17931091497196483, 0.26745193389680977, 0.2837533211344395, 0.21833735076002214, 0.15077800734253233, 0.2517528235258514, 0.18356418109443706, 0.04251177884308277, 0.023810295823214034, 0.010017227924218441, 0.05061592329150555, 0.03267028575521835, 0.032459114413012524, 0.043278141189350805, 0.02240980368895451, 0.030489910410892884, 0.11254972315554201, 0.09290246047976813, 0.09339280052876853, 0.0967671487971935, 0.1669102907651221, 0.07669002009186499, 0.07693087984395586, 0.0824456215521604, 0.08519460735895923, 0.1070134411102528, 0.1304325869984443, 0.10376739135264634, 0.15994750822810333, 0.14752167792870152, 0.12926197610507484, 0.1526962841956938, 0.12633084224136004, 0.12193445169034278, 0.08769584505059325, 0.059932886230774085, 0.05893930976909956, 0.07155010398618711, 0.1171058356079524, 0.06588348943252531, 0.07830733184315775, 0.05359954598796535, 0.031020805690529007, 0.12789299638385654, 0.12329413525997257, 0.11937327184589308, 0.14663567690292134, 0.13455667559552953, 0.13853035684489656, 0.1366320761944253, 0.12490626523024506, 0.12081950855322687, 0.006256068119296687, 0.15571873645046486, 0.15247963965556077, 0.15269172373470652, 0.1608821765918379, 0.13365020333574562, 0.1376060940258076, 0.16434506040694508, 9.999999999998899e-05, 0.11101807080057535, 0.11384298595191611, 0.07618457762858999, 0.1632982690517698, 0.057687098163673234, 0.07161102221770599, 0.1047319239299086, 0.10270316158839632, 0.07625153789720285, 0.23206829126713213, 0.07607215533261258, 0.07973727932073993, 0.07632942995441627, 0.10508365403428821, 0.10594121719268657, 0.10159613321180982, 0.09975037085075544, 0.08672612365953869, 0.13893344723151368, 0.15222343797212456, 0.13871379530879824, 0.1500284138810739, 0.14999581753908298, 0.1582298763472747, 0.14339502609133614, 0.19363601655082707, 0.16527947292736467, 0.03306109085122022, 0.03008034577202834, 0.026727316908146892, 0.022211884279568217, 0.043014091695034784, 0.02959397227141014, 0.01941877588063312, 0.05905278421611437, 0.026947463000188132]}, "mutation_prompt": null}
{"id": "151abdb2-943f-4a20-8e95-8c1328910cbf", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "b62ee2d8-3772-4430-ab81-8b5ae7245003", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.min_step = 1e-4\n        self.max_step = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            step_size = self.min_step + (self.max_step - self.min_step) * np.random.rand()\n            \n            candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors * step_size\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n\n            # Update mutation factors based on individual performance\n            self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n            self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Enhancing convergence by introducing a variable step size adaptation strategy based on individual performance for faster optimization.", "configspace": "", "generation": 64, "fitness": 0.04210340634051365, "feedback": "The algorithm ImprovedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.06.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.11923152321106822, 0.06716132422463839, 0.10481971959107794, 0.03260589466428754, 0.02960634471595991, 0.055664357581723944, 0.06596610472099673, 0.08939888206793034, 0.0627602763215862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025173420567662363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004867114252976035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02061980858719814, 0.014113285475343185, 0.007001964360126456, 0.010912356131021261, 0.02731896911190923, 0.015227904339351284, 0.010311935928236537, 0.0293478838642226, 0.015967860148213497, 0.06393545027574388, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042445267300815215, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 0.009324173805615232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001230629481446921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08576250679780384, 9.999999999998899e-05, 9.999999999998899e-05, 0.02864244566922458, 9.999999999998899e-05, 9.999999999998899e-05, 0.2014951828811936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12708920472338447, 0.06466912252858348, 9.999999999998899e-05, 0.011362485755324503, 0.15896937739467887, 0.020564850004006097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10205826955144548, 0.026535776522522925, 0.16118415905238104, 0.09596559872799593, 0.05547574108978648, 0.0014849733800412768, 0.13921481815385028, 0.1286709237894158, 0.1012904137105215, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018866401863209425, 0.09675694320875516, 0.11591319411606349, 0.03410960867630752, 0.0853813109234487, 0.07335546253107239, 0.045188852664263646, 0.10581349293601017, 0.08202228594826644, 0.11501241405105955, 0.09439993219970888, 0.10625534924084568, 0.1462865383301698, 0.06278947544625135, 0.09746996065444746, 0.1391872608960414, 0.07652681563408037, 0.09326826269342547, 0.05115901974832815, 0.04036371910719461, 0.036022378587224346, 0.08327901686451933, 0.0029125673297272225, 0.05822547425965563, 0.07243880869454711, 0.010947708248917332, 0.026752783218433107, 0.1780273277670873, 0.040515567039509315, 0.10535900488199312, 0.17298327096795452, 0.025919866533134495, 0.05859343318264687, 0.18995417872508757, 0.03605814747601288, 0.1008084959840444, 0.14505795126887588, 9.999999999998899e-05, 9.999999999998899e-05, 0.1460076632377606, 9.999999999998899e-05, 9.999999999998899e-05, 0.1431880404098047, 9.999999999998899e-05, 9.999999999998899e-05, 0.10609050752998006, 0.10922136346817712, 0.055770297400961844, 0.0765695856585451, 0.051115279719115225, 0.048278768513037584, 0.1067643346564442, 0.11270718994699636, 0.10876969568339523, 0.08515944360790129, 0.10278207319297794, 0.014273225094239561, 0.01467326739972219, 0.027058704876398387, 0.035964542677627054, 0.024926854248400354, 0.03545355904510872, 0.03828870859803446, 0.18046104674359686, 0.20626127503605607, 0.16869639652330393, 0.21545176980210656, 0.19903193151112997, 0.2560058134527272, 0.259151535856165, 0.19952654700633932, 0.268528977347683, 0.043948812218281286, 0.0003551949819997624, 0.03330293162244724, 0.03460965143395789, 9.999999999998899e-05, 0.018035251092397786, 0.04544863352067208, 0.007877298571348779, 0.0353847036193059]}, "mutation_prompt": null}
{"id": "5b913a10-dc16-41e2-8b2b-454325dd02c9", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n                # Adaptively adjust mutation step sizes\n                mutation_step_sizes = np.abs(candidate_solution - best_solution)\n                self.mutation_factors *= np.mean(mutation_step_sizes)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Introducing adaptive mutation step sizes to dynamically adjust mutation factors to individual performance for faster convergence.", "configspace": "", "generation": 65, "fitness": 0.019559279031395652, "feedback": "The algorithm ImprovedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.02 with standard deviation 0.03.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.07457392188249068, 0.033456075578935596, 0.06296380942276758, 0.009696946376036242, 0.008642381517655173, 0.026082396595725754, 0.03223058169094162, 0.05618053495816311, 0.0325032189007195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00978767585289042, 0.004225928256503697, 9.999999999998899e-05, 0.0006823901126720155, 0.0170714476093774, 0.002101064728093127, 9.999999999998899e-05, 0.018230937076993525, 0.0030010036015053476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007334574981783248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0470606252539395, 9.999999999998899e-05, 9.999999999998899e-05, 0.012228724368825383, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025930484917864316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06288430573387505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011144772356747712, 9.999999999998899e-05, 0.1241833805162279, 0.0707639580521987, 9.999999999998899e-05, 9.999999999998899e-05, 0.09461470632659807, 0.05289079887580628, 0.02350062223405147, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04904798153997303, 0.03993728473621194, 0.06038853004950029, 0.0072670557794508595, 0.007270737193220467, 0.06513946467679288, 0.010571553138941647, 0.03933649686519125, 0.012669250025608036, 0.0951073275876797, 0.0801891127172607, 0.06383983483031241, 0.13974299563281944, 0.04187653379839007, 0.07210614098025658, 0.11897111378400627, 0.06961891638538276, 0.05943033123369601, 0.02429003579829281, 9.999999999998899e-05, 9.999999999998899e-05, 0.0451695831784138, 9.999999999998899e-05, 0.030167011867393012, 0.061672425121637175, 0.005557112980719703, 9.999999999998899e-05, 0.10707782681107414, 0.024651763032082608, 0.07769044343729115, 0.09348747744389874, 0.01931652516208704, 0.04455091245783138, 0.126251336966953, 0.032369086368143285, 0.07554621839944631, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028183560684858278, 0.021358141855560953, 0.020259218133138024, 0.0818382400426011, 0.013568907547233722, 0.01680405296684384, 0.03392015378198199, 0.06617580436949189, 0.03978708432579314, 0.020027794641594654, 0.06352355268823828, 0.008122117285773833, 0.011849773879620273, 0.010010375581380293, 0.015009200647139509, 0.013987957864874057, 0.012169747242839146, 0.01596867976386529, 0.1300444362943436, 0.12883866649297138, 0.11476100848270054, 0.10831316600712637, 0.08692437180493018, 0.12688212753611772, 0.09762256095097677, 0.061075800229655974, 0.09886081565434002, 0.010647529624503438, 9.999999999998899e-05, 0.009977640994772607, 0.0019370108138609954, 9.999999999998899e-05, 9.999999999998899e-05, 0.026625536775812364, 9.999999999998899e-05, 0.022892101966858203]}, "mutation_prompt": null}
{"id": "f166ed06-5e98-438e-8e4f-ab25b26cd0be", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 10  # Increased number of steps for more thorough exploration\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.98  # Increased reduction rate for faster convergence\n\n        return best_solution", "name": "AcceleratedDynamicMutationMultiStepMetaheuristic", "description": "Implementing a dynamic mutation strategy with adaptive step sizes to accelerate convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 66, "fitness": 0.2838195317334667, "feedback": "The algorithm AcceleratedDynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8132481612658014, 0.8191612651176584, 0.8179990155978133, 0.8127856268996779, 0.8125202818657942, 0.8178151520410819, 0.8189033446536174, 0.8165298048157819, 0.817353298720717, 9.999999999998899e-05, 0.007030471051166054, 0.021006126759347876, 0.018440431225187237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028755235114451327, 9.999999999998899e-05, 0.12184102512191874, 0.15637001478161838, 0.11044017877515466, 0.1297168541217808, 0.1102940697388165, 0.11709115903084188, 0.11452785096324081, 0.12346019909491845, 0.1416197089153538, 0.1292940356700355, 0.07979773624949371, 0.06904734160087722, 0.06461630027601839, 0.091026919058535, 0.10714806792480991, 0.061488444888525895, 0.06243714363818886, 0.057932480200317826, 0.9923163652679022, 0.9936543435863808, 0.9862337072886683, 0.9822240834606142, 0.9780590539519238, 0.98889147850559, 0.9916398081894382, 0.9888482114960376, 0.9836644757457704, 0.7401063739155718, 0.7381735577769071, 0.7394151520976204, 0.73810871092416, 0.7418650852884865, 0.7374160316580092, 0.7387434804619697, 0.7428461782578263, 0.7438947092398593, 0.38816625632192814, 0.22577092809276822, 0.22573983988385204, 0.3758488616705947, 0.27798734264136404, 0.2803072327886291, 0.23695737711939935, 0.23633594181181639, 0.8790389468593598, 0.24010432038632012, 0.23149099339053336, 0.24785946519395785, 0.24105401315012043, 0.1315528557947988, 0.2530977939595317, 0.23692782317754357, 0.22137419710244122, 0.18386571652110772, 0.22402488404534937, 0.23729589261703465, 0.2516477123527828, 0.23437085108688138, 0.22726406226739349, 0.23227912027181163, 0.3229222950679387, 0.2452428516191295, 0.24304347837381657, 0.007635584913114002, 0.013832808414756093, 0.059228414217646574, 0.1098468880099539, 0.013222755005910969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00664667154765064, 0.05445227136110986, 0.05323081602748114, 0.09911742155549597, 0.05814701858923743, 0.04118732621749677, 0.01824899679847969, 0.1171753990120673, 0.009470397273366293, 0.038539116245695726, 0.11763975053150388, 0.13874339797491286, 0.042871826877597274, 0.0795492529853391, 0.21553784700109302, 0.12891209880264765, 0.16320929819842966, 0.07981417029780236, 0.06666260359673393, 0.2861871369923693, 0.08508413178087482, 0.11770693891288242, 0.18033094363012292, 0.16047993153077533, 0.31767775800263476, 0.19723892644427765, 0.15855740418951936, 0.11406551707665546, 0.5498640847876433, 0.5414212583564164, 0.5787018553105963, 0.5662800839146542, 0.5717846746035941, 0.5651446433331746, 0.5973827318150129, 0.5253015907163823, 0.5284678670144393, 0.09283764920916115, 0.10975709926527599, 0.08897714521828748, 0.10431080748873556, 0.11422049401506507, 0.10002950351396611, 0.15755074850929474, 0.09066531743916462, 0.09140575445237464, 0.42731076909750987, 0.2811672949020938, 0.2225079455872353, 0.26990720616241504, 0.3957086863669589, 0.4479558663661206, 0.2868465301314356, 0.7158336511944318, 0.2721536891633456, 0.5273664267210446, 0.4678738471772439, 0.11206593188751524, 0.5436441433424517, 0.45465637256739333, 0.15427973933752492, 0.3927413993854054, 0.445840425815638, 0.09241407276435243, 0.2701013906286094, 0.28681740020107793, 0.12359261653285303, 0.21733295985806944, 0.3738105774864918, 0.21506443279054488, 0.1935726833023741, 0.2467414239549498, 0.19085636450379528, 0.22570910296604163, 0.1452712712073182, 0.21717066111350491, 0.18375655941530133, 0.22624704648921845, 0.21558525846709675, 0.24411830644563093, 0.17003733564506274, 0.2043493652956051, 0.21089696719032647, 0.17067991276340455, 0.1743554866614997, 0.1806460669953942, 0.1857158643931761, 0.20950940965779663, 0.19949585005817116, 0.1972838767253593, 0.20162969978186207, 0.15928227159033448, 0.13725255334550124, 0.10506271380962884, 0.9094411106608339, 0.1986041354696193, 0.09899374153562235, 0.10833163601837514, 0.12686419000974059, 0.16604849854854764, 0.8924855090917574, 0.11294294608736488, 0.08309617528355806, 0.0831894100721201, 0.21222344335874754, 0.0442206432995752, 0.11352705697013277, 0.168200963816301, 0.4838809641163687, 0.2890617971885737, 0.4387848927188144, 0.19716084988630145, 0.4274150200028455, 0.24604276837602557, 0.2614060876737926, 0.24612146924996037, 0.262065467136241, 0.25473223128166356, 0.0803145808212068, 0.1615540697140082, 0.06744450939311208, 0.1011275994320493, 0.08275543601997015, 0.09186855316433173, 0.04937396222947266, 0.10174528725416598, 0.0792506864631416]}, "mutation_prompt": null}
{"id": "5d8a9c4b-dac0-4e3b-bbf8-131de203b21d", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors and rate based on solution quality and function landscape\n                self.mutation_factors *= 0.95 if candidate_fitness < best_fitness else 1.05\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n                self.mutation_rate *= 0.98 if candidate_fitness < best_fitness else 1.02\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "AdaptiveMutationDynamicMultiStepMetaheuristic", "description": "Introducing adaptive step sizes for mutation rate and factors based on function landscape and solution quality to enhance convergence speed.", "configspace": "", "generation": 67, "fitness": 0.09674929946541738, "feedback": "The algorithm AdaptiveMutationDynamicMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.20.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.15540997651847555, 0.11418238986890716, 0.13021155441243104, 0.1516461132912802, 0.11686918629307019, 0.1338543707073122, 0.15968139924389357, 0.127589531499118, 0.13237364073442714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03728404442307198, 0.006191708080636071, 0.008727481833392114, 0.03403932368070106, 0.008286169060579995, 0.024148342379043286, 0.02281089266484837, 0.009578980646069657, 0.02773365433532049, 0.005197572892201574, 9.999999999998899e-05, 9.999999999998899e-05, 0.008041276644334183, 0.01160059261176516, 9.999999999998899e-05, 9.999999999998899e-05, 0.006814847733970564, 0.01253334216818125, 0.9918028685336283, 0.9946238058167682, 0.9919095642057285, 0.9853055485339639, 0.9864806763692715, 0.9937517850701959, 0.9932451106558134, 0.9943843467177418, 0.9936858983295235, 0.10703787336452775, 9.999999999998899e-05, 0.01813499718738154, 0.0039702857333637764, 0.016870854265266688, 0.033940019317706405, 0.040759411050306116, 0.055183513608652035, 0.031783934245467216, 0.07393049956818687, 0.06309092291307183, 0.08127154592619956, 0.11721099828579373, 0.05944141548323989, 0.06388038706829924, 0.05240206194753061, 0.08764500189377034, 0.07713384250454891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030057297950201955, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008583927240193, 0.016745347692190937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1566339714780015, 0.1671750093929113, 0.16606631891994472, 0.15396681086704445, 0.1205417363755259, 0.14122063151598463, 0.18586994328820816, 0.14899243626892877, 0.14836656388199243, 0.03181949115646443, 0.02795546319927633, 0.01737928400694655, 0.013435752921642008, 0.045057879460496, 0.028392971135998923, 0.07507908470412072, 0.024959408080949874, 0.019677872294332377, 0.108395798389881, 0.10025114901539123, 0.09615417496066148, 0.10973455385216635, 0.09292381058314947, 0.09695819141764073, 0.10923187180381388, 0.09285705829708191, 0.08566364253873471, 0.1206002532556939, 0.12776410039124253, 0.12244861215463354, 0.1341903811626104, 0.12269772297421588, 0.1071317363061467, 0.1591467450291142, 0.14293630098146182, 0.1275855327411638, 0.07427169905299447, 0.0553443340361196, 0.06487819443158205, 0.08096331655912892, 0.07176930838777484, 0.06564034254655271, 0.0886993059410377, 0.0755751586436878, 0.06271573475758918, 0.12759547167683027, 0.115403425867047, 0.10582345601071852, 0.12872720037253094, 0.14494360893036262, 0.11107466097433538, 0.12245976138762271, 0.10594419221248519, 0.11756654293708602, 0.13214666982452672, 0.018295484223156744, 0.011323970998265431, 0.12873927379924477, 0.1397396971746584, 0.1325551650708776, 0.13809279480996706, 9.999999999998899e-05, 9.999999999998899e-05, 0.09917684934340687, 0.10681987877870236, 0.07864240179890658, 0.12737334358246954, 0.10073574701239663, 0.06924659936344402, 0.10448188174199258, 0.10232887046715844, 0.07545916495238414, 0.2331665036431939, 0.07426022612688032, 0.05901305117966027, 0.05556875868051192, 0.07042935452619459, 0.04518535172882732, 0.08753613213082279, 0.10754665279792575, 0.10450997321654942, 0.14972366559071948, 0.1566857319887084, 0.15587527529681355, 0.14998078939297377, 0.14987833641165194, 0.15009373372846135, 0.153309957477884, 0.15339314477976695, 0.14005536413338993, 0.03561877492167009, 0.014070282389477162, 0.021354218242418566, 0.028038513511019825, 0.033078916134611114, 0.03376986164334361, 0.02925844790464094, 0.031664482006961925, 0.03369536724068234]}, "mutation_prompt": null}
{"id": "e6f07ee3-c14b-4017-80cc-c4287e1eaab7", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.base_steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for i in range(self.base_steps):\n                step_factor = 1.0 - i / self.base_steps\n                candidate_solution = best_solution + self.mutation_rate * step_factor * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "EnhancedDynamicMutationMultiStepMetaheuristic", "description": "Enhancing convergence speed by introducing adaptive step size adjustment based on individual solution quality to optimize the search process efficiently.", "configspace": "", "generation": 68, "fitness": 0.26479476581293593, "feedback": "The algorithm EnhancedDynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.27.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8592987207395576, 0.8624068744551072, 0.8604074839538991, 0.8629312400262266, 0.8615321869633669, 0.856970154027423, 0.857252540469428, 0.8658644248418542, 0.8689962072737655, 0.06446220067156505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021134625767264104, 9.999999999998899e-05, 0.017528673971039077, 9.999999999998899e-05, 9.999999999998899e-05, 0.07928006859491887, 0.0977409115861041, 0.06942223262170011, 0.11282002467293151, 0.08356564400401023, 0.12495372132321358, 0.08935953381684725, 0.09669818616274528, 0.09361729062931301, 0.08365743639168599, 0.08272799176553547, 0.04495919536857362, 0.08615950993407373, 0.03986677877293843, 0.06388392118864106, 0.0791772947559446, 0.06636665390164198, 0.09279814862236968, 0.9679180757504812, 0.983178416351731, 0.985613297489473, 0.9617707836557341, 0.9586929413692469, 0.9569438789671786, 0.9802364768013715, 0.9695832986970844, 0.9848592776862674, 0.7809321194912433, 0.7833312019288635, 0.782018139519554, 0.7763183379976072, 0.7945162202300836, 0.7793149591236515, 0.7860477750572292, 0.7783391017276389, 0.7830024771398094, 0.17206078049389217, 0.21779020229115809, 0.1399607327214064, 0.3903230942980592, 0.28485359630884155, 0.2162520041813265, 0.18063933848171565, 0.4049481761905849, 0.17778074019533874, 0.20460909679028072, 0.25347165334697896, 0.23691691543527726, 0.23497118492256097, 0.23585671309393552, 0.5360102510893832, 0.340372869246914, 0.1581820032473915, 0.23899926029883067, 0.13694974747231026, 0.25633666891118323, 0.22132128411983754, 0.22847294103076254, 0.2352223305273211, 0.24673975081812483, 0.23900009926011834, 0.133881180083407, 0.21263019136165218, 0.06252179982423334, 9.999999999998899e-05, 0.009631681465296249, 0.1572153541651513, 0.04807638024064054, 0.08608502119079509, 0.0014557311359920666, 9.999999999998899e-05, 0.15242370134778793, 0.04145498750333354, 0.03604283677405695, 0.09663859627409532, 0.06137479241197341, 0.006075808007311001, 0.011474796044822821, 0.09942698587375676, 0.026302671429289104, 0.06488459387777801, 0.2158099401697715, 0.05443033807300468, 0.08195806294453356, 0.07950581681336011, 0.0752123961680019, 0.14708692718142413, 0.19526433332960313, 0.18309005527005695, 0.08449350357742791, 0.019822420629142967, 0.06699592407286781, 0.13577090766641597, 0.11416352134384089, 0.1367378821420685, 0.17515750696871057, 0.0849313434668777, 0.11073159656628018, 0.26010800469716333, 0.5565250910066317, 0.6059178282597257, 0.6430158478279504, 0.5474436512074516, 0.5585763303340829, 0.5967510987455347, 0.5683848501324084, 0.5809957356166222, 0.5439187448840687, 0.09677939445182782, 0.062074078102475894, 0.08681349573392327, 0.089681007247983, 0.09819693338238433, 0.10137329311323262, 0.06248729776698603, 0.07324773643506521, 0.1458263236483035, 0.29491791761277586, 0.1872628855180224, 0.26238191817326406, 0.2723284614996624, 0.16755011758471683, 0.2770125188249065, 0.20296696241975876, 0.1779522533664284, 0.1860109056404975, 0.336774840017653, 0.0984096677643096, 0.19161027125954055, 0.2857665425796906, 0.230897961334123, 0.1593404972659127, 0.24714441717202096, 0.24889354177258305, 0.09911583711373895, 0.3318836695586187, 0.24521668920272832, 0.03485959670155625, 0.2493480525370887, 0.1910261413237211, 0.2806425720959611, 0.23548193741273904, 0.14652069172782234, 0.02616767591987812, 0.17775616332006572, 0.24066380157806677, 0.21956866749619786, 0.1748320391290079, 0.18120904598711896, 0.15603439120804452, 0.25876528861649684, 0.26857824698201915, 0.19419840131633104, 0.21418778585014087, 0.17741972485803403, 0.19029309915640813, 0.1707787507842602, 0.20534831240228069, 0.1733358492002226, 0.19731641274650447, 0.20570342908098405, 0.183819152668263, 0.189791215156917, 0.1377386354055249, 0.10511172250064649, 0.17411701167110494, 0.11224426265692489, 0.06202802755528025, 0.10880321936425408, 0.12726735625906171, 0.16912682515601463, 0.8985763997078633, 0.11357340329287036, 0.08344692915587726, 0.0834301642108558, 0.21441804441150858, 0.2137936030363241, 0.11373737546325957, 0.1693093529543821, 0.5219427790433648, 0.2787821367449639, 0.18239306784926168, 0.46267406866088934, 0.25462827327216364, 0.44090877029882913, 0.17453765664626464, 0.31064984365122894, 0.20271517519950943, 0.2642359112087912, 0.145342752072821, 0.16732498462078216, 0.07589670420073202, 0.07445947307509104, 0.07708938713785085, 0.08224564007333757, 0.0911964438103241, 0.0779064930016109, 0.1027587822674606]}, "mutation_prompt": null}
{"id": "f3e45d2d-9c5c-4519-9e36-c79814188dbf", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity and individual performance\n            self.mutation_rate *= 0.99 if candidate_fitness < best_fitness else 1.01\n\n        return best_solution", "name": "AdaptiveMutationDynamicMultiStepMetaheuristic", "description": "Implementing a self-adaptive mechanism to adjust mutation rates according to individual performance for enhanced convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 69, "fitness": 0.12648580484106858, "feedback": "The algorithm AdaptiveMutationDynamicMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.21232772770431851, 0.24556641846996752, 0.22427608345341177, 0.18658184385586207, 0.19096621043796003, 0.20133746107590145, 0.1976801469824674, 0.20587627411745957, 0.18485967850168672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043461008548899005, 0.04636758032472721, 0.045801263241594614, 0.0471029951364359, 0.0474646250400812, 0.046493479740938204, 0.03754134445531232, 0.0543236920088318, 0.05412465901113228, 0.037388912758354986, 0.03451281316397692, 0.03320670694794314, 0.04113832384510241, 0.024345375771764877, 0.03142497310413983, 0.038873576857861525, 0.04490366636316834, 0.02789493749816052, 0.9966780539027794, 0.9944512679644345, 0.9879453606709716, 0.984816864055522, 0.9803663150729893, 0.9937363393799108, 0.9919756899015566, 0.9931498377814184, 0.9852096681679693, 0.10744414268748803, 0.09359105245790711, 0.061928155040634536, 0.07074897050393614, 0.11845291812913183, 0.10956528645140173, 0.09189485786725604, 0.09153833104544684, 0.06423371318674931, 0.11869227752089972, 0.1335788831323954, 0.11755531281875897, 0.11095223347723726, 0.1443414301635828, 0.13524924545256822, 0.11482413812760639, 0.1534656291260208, 0.12401061858301221, 9.999999999998899e-05, 9.999999999998899e-05, 0.06980718465352043, 0.011830445736875084, 0.000895507725651834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05337144943308447, 9.999999999998899e-05, 0.01855982942869072, 0.014848811714537669, 0.02500408558945222, 0.011765775773353249, 9.999999999998899e-05, 0.007409196565673293, 0.09051497380795448, 0.004992288531967093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045912792616515596, 9.999999999998899e-05, 0.0392910034990166, 0.02978564569232056, 0.06011259303156058, 0.005966582834315504, 0.04905430455740989, 0.006366292474264679, 0.006572476991893561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013477837962154071, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19647135443489028, 0.22563420987721894, 0.20884626999366274, 0.2424392380354108, 0.21545864945937998, 0.20521118610219502, 0.24721787253404814, 0.2255276024374805, 0.21782997480154165, 0.05395017380990663, 0.04489868431132382, 0.045665617805157654, 0.04996086615991879, 0.05022412748164551, 0.042568148418825835, 0.04906274264764765, 0.05362965296781497, 0.08631723003001257, 0.13530635701432314, 0.11846867324470589, 0.1384633571363746, 0.12868780237834254, 0.162201991448101, 0.1053492467292666, 0.1494389484213836, 0.10218240030506609, 0.11071717730588748, 0.15435471503817955, 0.1565046812126517, 0.13894257894314066, 0.16580289145764693, 0.1721097594732095, 0.13891497750776538, 0.17480419774075784, 0.17683354712369403, 0.15432338740574092, 0.07352143163418456, 0.11875068242556841, 0.10749436584147665, 0.10767821226175889, 0.12427584127372415, 0.12707554746430683, 0.10786979946823227, 0.10075539857295657, 0.10181442362633664, 0.18022864842996855, 0.15596577373775378, 0.1344895561268029, 0.14947167287204866, 0.1697977494673758, 0.12896362880820655, 0.18439645707791474, 0.15346269784419697, 0.14723598408268646, 0.15268002326877317, 0.17735749036269877, 0.14948898203932282, 0.14447908447885716, 0.14757580156645922, 0.14747704510916482, 0.15237808684211873, 0.15321601929196127, 0.1605481713725705, 0.15332857892020713, 0.1328427962322618, 0.163929702152237, 0.135704732095962, 0.1629166651053623, 0.10980756082867915, 0.12083096994559439, 0.11373162885432542, 0.13253736712590802, 0.22309771628850417, 0.10904866130417845, 0.11471648897123321, 0.10924142298428308, 0.1342529530034271, 0.1258811305952695, 0.10706767467189837, 0.14049700537564624, 0.13145436539092092, 0.17035964956453375, 0.17751590901245362, 0.17240802314964698, 0.177643016014012, 0.18735106814323643, 0.17975601561057553, 0.16285415920900448, 0.1887493486931905, 0.16581666718172294, 0.05506249438984723, 0.04604852620063171, 0.06185960619622144, 0.0566306612687949, 0.049196559347172486, 0.05578488786062774, 0.04816584621620257, 0.047334459157845066, 0.0686632123601949]}, "mutation_prompt": null}
{"id": "941b0cd9-665c-4288-be37-e9a3602cf33b", "solution": "import numpy as np\n\nclass AdaptiveStepSizeMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n            # Adaptive step size control\n            self.steps = max(1, min(10, int(np.mean(self.mutation_factors) * 10)))\n\n        return best_solution", "name": "AdaptiveStepSizeMetaheuristic", "description": "Introducing adaptive step size control to dynamically adjust the mutation step sizes for each dimension, enhancing convergence speed.", "configspace": "", "generation": 70, "fitness": 0.26667586392594184, "feedback": "The algorithm AdaptiveStepSizeMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.6429686431953857, 0.6416207009304199, 0.6449289280989647, 0.6486567159164249, 0.6486325866789109, 0.6388420442223961, 0.6432891610070459, 0.6384004298880357, 0.6503095168607589, 0.02419138064677595, 9.999999999998899e-05, 9.999999999998899e-05, 0.05634729550893114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05541623234852011, 9.999999999998899e-05, 0.07875823562722362, 0.10316983100144439, 0.06199532012931164, 0.07922872673369608, 0.11271908629432092, 0.07016105509505433, 0.08962196596463601, 0.1483628530806671, 0.10480035424903877, 0.10188912594846111, 0.16834739258596532, 0.04372823952907989, 0.10094689431278203, 0.05113031574607263, 0.11698946843119651, 0.09337159465164935, 0.09862688448275314, 0.10117874552258999, 0.9923852475721969, 0.9944332535138124, 0.9878541642838954, 0.9848022166993522, 0.9783930718547383, 0.9889643651102736, 0.9917382538721885, 0.9892127345479953, 0.9849908057869382, 0.4947786517844376, 0.4996405318100565, 0.5085317582615412, 0.4938117049443519, 0.4995408498008518, 0.5044188832341592, 0.5106456693529112, 0.49746466358309094, 0.4988675526272168, 0.7907792968452994, 0.755363538844076, 0.7654366517907276, 0.3541212690172528, 0.2142254104954684, 0.3554107349603016, 0.7887030162692914, 0.23372353233830623, 0.37503006821725016, 0.2135153039808434, 0.23060267940704715, 0.2476091297140819, 0.2394243634468285, 0.22003099898501333, 0.12385223373060505, 0.2223377399953873, 0.23913178627622778, 0.2348119008416899, 0.23149453896371808, 0.2169472721486161, 0.3376355128265994, 0.2648812716187161, 0.24302390169469756, 0.23871420824001055, 0.24016930121125768, 0.22374849457161794, 0.2205039285577136, 0.07591324687268919, 9.999999999998899e-05, 0.05921045023985494, 0.07515691844380057, 0.1313433973384237, 0.0039460776773890816, 0.008010300756382316, 9.999999999998899e-05, 0.013438677376906738, 0.05209742459690603, 0.062069183668012506, 0.1026531452999383, 0.08377593299354869, 0.049897098747943014, 0.023287959852370088, 0.15203021358665114, 0.019088642677049017, 0.04623049937129586, 0.0705908021567857, 0.06726657281598203, 0.04088608163216412, 0.07925977687639318, 0.15492167282029368, 0.1440735325943011, 0.06457697696681264, 0.08338204964934104, 0.07219699340658425, 0.08656366183991027, 0.1322528342392354, 0.08222293667013159, 0.1416146876150366, 0.14192514628108366, 0.18255661990111616, 0.16633679032278292, 0.0900872843612387, 0.1507319171247733, 0.5034833404479082, 0.5024288752633669, 0.5162140971084128, 0.4929724003838115, 0.5077461585801657, 0.49981437422532216, 0.5358442075437377, 0.5043545666013262, 0.4992116472660094, 0.12750472963928172, 0.12561589576621102, 0.09308384517044233, 0.09688126707543321, 0.11035068243379698, 0.07137958658792831, 0.10720042531058349, 0.12488658630538174, 0.07723813179855421, 0.24052775497077195, 0.2156282015859725, 0.2905346593661401, 0.39837553157036587, 0.40401678271155217, 0.191864334436204, 0.3146497709536942, 0.3020082667916343, 0.267248317323626, 0.39431585685665593, 0.40002639577878896, 0.3832466205448344, 0.36261815529335373, 0.39927343982989716, 0.3780214676819048, 0.28994938717931285, 0.3391066412507301, 0.2208556586639454, 0.2098963187802244, 0.24642787500663177, 0.21422985529206595, 0.2024430042462284, 0.23960514715719883, 0.15398698201200312, 0.1982548011045293, 0.3392398266789408, 0.23823289559697325, 0.21816738302117822, 0.2474753220492264, 0.20907083167402274, 0.20172394561829254, 0.20476414051999992, 0.24342735162822726, 0.2548236118758178, 0.2118928360895853, 0.2177856909516681, 0.20696686450700574, 0.20672363711505715, 0.18705404631821432, 0.17032843850008228, 0.18960229669538198, 0.20580008680383366, 0.18768424083189672, 0.20786358070729016, 0.1951343522388329, 0.10852645145923401, 0.13631083204357874, 0.8084581174692396, 0.8095195983813057, 0.11182336244496327, 0.11398657889328878, 0.10791939587962718, 0.12673291107703133, 0.16546173223643312, 0.8066662587422689, 0.11253631362975736, 0.08281284947789458, 0.08279269231298625, 0.2106427308333626, 0.04398846443931104, 0.11334985864520497, 0.1663647819418217, 0.7030824684113524, 0.23926559256365532, 0.22297314401787038, 0.23544711705178512, 0.264151864420466, 0.22848665870354468, 0.2141454527712503, 0.22762763388881502, 0.21672042066234132, 0.2170080414676553, 0.07819134417198115, 0.14749193512415748, 0.08310858702088841, 0.09275331246637764, 0.07044659027053879, 0.11724610996135831, 0.09369500070968584, 0.07689599496059907, 0.07754529104404917]}, "mutation_prompt": null}
{"id": "3838ef54-d40b-4ac8-a625-5f8c2956536d", "solution": "import numpy as np\n\nclass AdaptiveMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity and solution progress\n            self.mutation_rate *= 0.99 if candidate_fitness < best_fitness else 1.01\n\n        return best_solution", "name": "AdaptiveMutationMetaheuristic", "description": "Implementing an adaptive mutation probability strategy to adjust mutation likelihood dynamically based on solution performance, aiming to accelerate convergence while maintaining algorithmic differences.", "configspace": "", "generation": 71, "fitness": 0.12648580484106858, "feedback": "The algorithm AdaptiveMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.21232772770431851, 0.24556641846996752, 0.22427608345341177, 0.18658184385586207, 0.19096621043796003, 0.20133746107590145, 0.1976801469824674, 0.20587627411745957, 0.18485967850168672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043461008548899005, 0.04636758032472721, 0.045801263241594614, 0.0471029951364359, 0.0474646250400812, 0.046493479740938204, 0.03754134445531232, 0.0543236920088318, 0.05412465901113228, 0.037388912758354986, 0.03451281316397692, 0.03320670694794314, 0.04113832384510241, 0.024345375771764877, 0.03142497310413983, 0.038873576857861525, 0.04490366636316834, 0.02789493749816052, 0.9966780539027794, 0.9944512679644345, 0.9879453606709716, 0.984816864055522, 0.9803663150729893, 0.9937363393799108, 0.9919756899015566, 0.9931498377814184, 0.9852096681679693, 0.10744414268748803, 0.09359105245790711, 0.061928155040634536, 0.07074897050393614, 0.11845291812913183, 0.10956528645140173, 0.09189485786725604, 0.09153833104544684, 0.06423371318674931, 0.11869227752089972, 0.1335788831323954, 0.11755531281875897, 0.11095223347723726, 0.1443414301635828, 0.13524924545256822, 0.11482413812760639, 0.1534656291260208, 0.12401061858301221, 9.999999999998899e-05, 9.999999999998899e-05, 0.06980718465352043, 0.011830445736875084, 0.000895507725651834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05337144943308447, 9.999999999998899e-05, 0.01855982942869072, 0.014848811714537669, 0.02500408558945222, 0.011765775773353249, 9.999999999998899e-05, 0.007409196565673293, 0.09051497380795448, 0.004992288531967093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045912792616515596, 9.999999999998899e-05, 0.0392910034990166, 0.02978564569232056, 0.06011259303156058, 0.005966582834315504, 0.04905430455740989, 0.006366292474264679, 0.006572476991893561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013477837962154071, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19647135443489028, 0.22563420987721894, 0.20884626999366274, 0.2424392380354108, 0.21545864945937998, 0.20521118610219502, 0.24721787253404814, 0.2255276024374805, 0.21782997480154165, 0.05395017380990663, 0.04489868431132382, 0.045665617805157654, 0.04996086615991879, 0.05022412748164551, 0.042568148418825835, 0.04906274264764765, 0.05362965296781497, 0.08631723003001257, 0.13530635701432314, 0.11846867324470589, 0.1384633571363746, 0.12868780237834254, 0.162201991448101, 0.1053492467292666, 0.1494389484213836, 0.10218240030506609, 0.11071717730588748, 0.15435471503817955, 0.1565046812126517, 0.13894257894314066, 0.16580289145764693, 0.1721097594732095, 0.13891497750776538, 0.17480419774075784, 0.17683354712369403, 0.15432338740574092, 0.07352143163418456, 0.11875068242556841, 0.10749436584147665, 0.10767821226175889, 0.12427584127372415, 0.12707554746430683, 0.10786979946823227, 0.10075539857295657, 0.10181442362633664, 0.18022864842996855, 0.15596577373775378, 0.1344895561268029, 0.14947167287204866, 0.1697977494673758, 0.12896362880820655, 0.18439645707791474, 0.15346269784419697, 0.14723598408268646, 0.15268002326877317, 0.17735749036269877, 0.14948898203932282, 0.14447908447885716, 0.14757580156645922, 0.14747704510916482, 0.15237808684211873, 0.15321601929196127, 0.1605481713725705, 0.15332857892020713, 0.1328427962322618, 0.163929702152237, 0.135704732095962, 0.1629166651053623, 0.10980756082867915, 0.12083096994559439, 0.11373162885432542, 0.13253736712590802, 0.22309771628850417, 0.10904866130417845, 0.11471648897123321, 0.10924142298428308, 0.1342529530034271, 0.1258811305952695, 0.10706767467189837, 0.14049700537564624, 0.13145436539092092, 0.17035964956453375, 0.17751590901245362, 0.17240802314964698, 0.177643016014012, 0.18735106814323643, 0.17975601561057553, 0.16285415920900448, 0.1887493486931905, 0.16581666718172294, 0.05506249438984723, 0.04604852620063171, 0.06185960619622144, 0.0566306612687949, 0.049196559347172486, 0.05578488786062774, 0.04816584621620257, 0.047334459157845066, 0.0686632123601949]}, "mutation_prompt": null}
{"id": "0deaad54-2653-40ef-9117-079a8e0dd81e", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristicImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_rates = np.full(dim, 1.0)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_rates\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation rates based on individual performance\n                self.mutation_rates *= 0.9 if candidate_solution < best_solution else 1.1\n                self.mutation_rates = np.clip(self.mutation_rates, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristicImproved", "description": "Introducing a dynamic mutation rate adaptation strategy to adjust mutation rates individually for each dimension based on their historical performance to improve convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {}, "mutation_prompt": null}
{"id": "eebb9bf4-be5b-4346-9864-0f25483a6ad3", "solution": "import numpy as np\n\nclass DynamicMutationSelfAdaptiveMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n                # Update mutation rate based on individual performance\n                self.mutation_rate *= 0.99 if candidate_fitness < best_fitness else 1.01\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationSelfAdaptiveMetaheuristic", "description": "Implementing a self-adaptive mutation mechanism based on individual performance to dynamically adjust the mutation rate and factors for enhanced convergence speed.", "configspace": "", "generation": 73, "fitness": 0.10823013966946134, "feedback": "The algorithm DynamicMutationSelfAdaptiveMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.20.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.1675196572456813, 0.12351665654172939, 0.20285941410370945, 0.14075387498839187, 0.14433432702416216, 0.18998299396314644, 0.2122449753019432, 0.15670886892556524, 0.13657167661907244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017534961969863483, 0.03807572661190661, 0.021821173668586047, 0.035712884303196746, 0.04124860591828805, 0.026376527809131578, 0.009600121644018134, 0.04841288528874288, 0.020226285952509304, 0.014848531691744715, 0.005036406186319953, 9.999999999998899e-05, 0.014459179877009731, 0.00957347447018253, 0.028324272383256854, 0.01642268709625494, 0.009542754620224136, 0.012963511129779892, 0.991850878499527, 0.9945855067820772, 0.9918359121461818, 0.9848442741924196, 0.9864575756571742, 0.9937765775995302, 0.9929495088792798, 0.9942827804637521, 0.9935011227221371, 0.10758780091143949, 0.039501074796949975, 0.02243333930861735, 0.019631535207178086, 0.061390683165625015, 0.08912947482630518, 0.04897675986544381, 0.0611025056405724, 0.03505991604476821, 0.10776829923973164, 0.0861184368226634, 0.07994131908206437, 0.13013228393279475, 0.04623342460048785, 0.07665290208274944, 0.06545776218310306, 0.15565127958928482, 0.10467550297896777, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017977511456150785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026818224660494883, 0.0011598564400883138, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03578549282325039, 9.999999999998899e-05, 0.0028704591578847527, 9.999999999998899e-05, 0.019481283155785567, 9.999999999998899e-05, 0.04496674467113948, 9.999999999998899e-05, 0.00672360041884601, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19586809048588028, 0.1748314272149748, 0.16666565448419368, 0.1730854683296017, 0.16934243281914219, 0.1900541497369983, 0.2557504195583701, 0.18438259737657048, 0.17054514662048803, 0.03292077186909337, 0.047454580352829234, 0.03302657138330489, 0.025140623916021454, 0.028233976777491843, 0.03237079291044098, 0.03872798388566012, 0.02687778864207835, 0.024463418499822365, 0.11317956461358558, 0.11852152197904853, 0.09581817669602932, 0.13027602233832203, 0.09587396694939176, 0.10326675715368261, 0.09668888163263378, 0.10013646524728081, 0.09421233520564365, 0.13634885231181582, 0.13848031727046095, 0.1446132327407924, 0.16865399098812117, 0.14198366042914679, 0.13490170069399776, 0.15904651906868605, 0.138227134424446, 0.11829219456477658, 0.08716470192777492, 0.08932530695334207, 0.0752853617385375, 0.09391159711160157, 0.07959442211258361, 0.07081475416243865, 0.09677340510096055, 0.08002269781669058, 0.0928270298668622, 0.11584661476834279, 0.12303436357281206, 0.15335998996562883, 0.1262974401211051, 0.17274790276759888, 0.1825208405371762, 0.14141147312316893, 0.15471853950071457, 0.13149149473707278, 0.14551296980837125, 0.14084691018489737, 0.12863026455145232, 0.14339924674192883, 0.15663199615667678, 0.13351354698631202, 0.13901139752889324, 0.14345281840388813, 0.01961563358253937, 0.11722906979691139, 0.10856187280540175, 0.10543177962183525, 0.10943215816703977, 0.11342800740990422, 0.10413662109344801, 0.08399277406547845, 0.12444967836712473, 0.11131255070042645, 0.19254405556457965, 0.05752177927851476, 0.07893222234123043, 0.06373481190667207, 0.1017789637875971, 0.05791672392615388, 0.1067234763518976, 0.11400789862139404, 0.08873822781332907, 0.16547991971381437, 0.14832237514175228, 0.137268334042011, 0.1615746257834595, 0.2126422809278956, 0.16196791187178328, 0.17489669023461207, 0.1765047537171569, 0.1768214454127145, 0.045360937111541544, 0.029378595338979685, 0.03137794112046577, 0.03981110748678607, 0.06086963472049722, 0.029018519715548252, 0.04086339565200592, 0.033292476562198914, 0.0287765980924094]}, "mutation_prompt": null}
{"id": "12342673-3f54-4927-9b4b-29ba3ccdbb70", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                    # Update mutation factors based on individual performance\n                    self.mutation_factors = 0.9 * self.mutation_factors + 0.1 * np.random.uniform(0, 1, self.dim)\n                    self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n                # Update mutation rate based on population diversity\n                self.mutation_rate -= 0.01 * self.mutation_rate\n\n            # Update mutation rate based on individual performance\n            self.mutation_rate = 0.9 * self.mutation_rate + 0.1 * np.random.uniform(0, 1)\n\n        return best_solution", "name": "EnhancedDynamicMutationMultiStepMetaheuristic", "description": "Enhancing convergence speed by adaptively adjusting mutation rate and factors based on individual and population diversity, respectively.", "configspace": "", "generation": 74, "fitness": 0.1875835862034305, "feedback": "The algorithm EnhancedDynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.46769656259897063, 0.47549913209515937, 0.4991262404896053, 0.4794488606905163, 0.4854117389457616, 0.48183887474067855, 0.45740467319358036, 0.46285364429884757, 0.4715046769232003, 0.006059477050598394, 0.0002480651465804895, 9.999999999998899e-05, 0.09735096481332839, 0.05266719628069383, 9.999999999998899e-05, 0.11328607800861845, 0.03137268101079693, 9.999999999998899e-05, 0.0778124411223956, 9.999999999998899e-05, 9.999999999998899e-05, 0.0421376334945468, 0.004888819622757001, 0.022798602793893896, 0.03471602424160647, 9.999999999998899e-05, 0.015487427859127045, 0.04404185315224207, 9.999999999998899e-05, 0.010842819074990295, 0.015237791367913478, 9.999999999998899e-05, 0.028378615895734538, 0.008510939839697862, 9.999999999998899e-05, 0.005260987518899807, 0.9635891130744315, 0.8985232397877293, 0.8821902716768174, 0.8978300928907845, 0.8767131190952434, 0.8934527204538021, 0.9017953154511839, 0.9046014053627517, 0.8958862407833854, 0.3371679090041191, 0.3802520977240078, 0.3675112065277303, 0.3487263921072469, 0.34592225892585593, 0.35527157941084275, 0.36342210712631673, 0.34680197862630024, 0.37516233886819383, 0.09906259073110246, 0.06029354654175734, 0.06203191685571052, 0.791337832548475, 0.07682470040410372, 0.08117358388968221, 0.11719038295505602, 0.06313790834439459, 9.999999999998899e-05, 0.18393048861557393, 0.21816516557228594, 0.21513107411244914, 0.2560821293968585, 0.2031299612932962, 0.21998575529320274, 0.1865967096096739, 0.2271094775191259, 0.2109480749035092, 0.22052154407760227, 0.13227739732930932, 0.20227591282043345, 0.2156775044592335, 0.19468462327810687, 0.1300875945257085, 0.19622384772849022, 0.12994062251880423, 0.19781064991529518, 0.06369558965117961, 0.03681642504308025, 0.01791345171270986, 0.0042517855341055455, 0.006914374454866645, 0.052482070494642374, 0.004286565249821961, 9.999999999998899e-05, 0.06907796166101632, 0.08494511347508393, 0.05948731509125804, 0.2624502883325567, 0.08787957973896354, 0.04644556857378468, 0.03715610136424652, 0.16551568974311137, 0.043370094725913466, 0.07644389855138656, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013746546100867896, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06401891547870997, 0.14214387375631632, 0.09733364079293783, 0.11952413042264998, 0.09610530890660851, 0.1138427424025058, 0.10304842940746162, 0.09053491846150696, 0.08829055605771141, 0.4502175043702852, 0.43249815418905146, 0.43225116502059524, 0.4510773840513356, 0.4494682125861579, 0.44378110631454604, 0.4449049241418548, 0.4305479851463735, 0.4365481676000712, 0.06777286726815779, 9.999999999998899e-05, 9.999999999998899e-05, 0.005214976840772989, 0.07981544995632361, 0.029472047609253815, 0.023954236810819207, 0.03452822908728681, 0.03505246402664164, 0.33032264474483763, 0.1586991129805252, 0.17795791871059663, 0.33097189113881587, 0.2772544884569482, 0.18401162240255042, 0.1861686809331673, 0.1803171186672018, 0.25573938275144725, 0.13078582691905105, 0.12533034859685854, 0.0993168192159134, 0.15531616405116133, 0.11633864408451722, 0.12407830385168783, 0.1998153113138248, 0.09240714414138507, 0.08839525973944706, 0.11621416746199698, 0.05000614667793668, 0.053777437579665466, 0.22646987977142852, 0.0265091041659844, 0.08439524841048185, 0.18223311600213077, 0.08579649305459847, 0.02646589445196701, 0.21460823393639672, 0.13259267527070973, 0.19685926484038274, 0.1686269624745904, 0.16618829866421636, 0.175875709633045, 0.20511576842059154, 0.14240417474351652, 0.19335819076815097, 0.2067888094961432, 0.16104988811724963, 0.16702893245751582, 0.1605578148767941, 0.18328862647876465, 0.17060851300412283, 0.18407994561784846, 0.18791684102489647, 0.15481248091657485, 0.11751812984336207, 0.13785870066466233, 0.07165215363289279, 0.1741234475683825, 0.11332114964011397, 0.06212289759580103, 0.10894108885300413, 0.1272463394469714, 0.1691407650486435, 0.7050230355949102, 0.11351941836031587, 0.06598425732954916, 0.15745764536939189, 0.21378138088668663, 0.21364263508756454, 0.5984053591439937, 0.05937957668998328, 0.5375839622191622, 0.18500953201889692, 0.19815253358710572, 0.19384760566677228, 0.17866272793990268, 0.18306263302191272, 0.19157801187976298, 0.180062375405322, 0.18932245868953468, 0.18367968223492404, 0.07752539563870309, 0.0352802178961632, 0.05742171710615129, 0.05404252975163548, 0.045075938822615846, 0.03335293962143637, 0.08568631060976184, 0.015420611053336919, 0.04566422103262102]}, "mutation_prompt": null}
{"id": "cef1d047-a70c-4aac-b9b7-0b5aab377e59", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "7ccdf926-77ac-435a-8d14-ee1814062d1e", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n        self.step_sizes = np.ones(self.steps)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for step, step_size in enumerate(self.step_sizes):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors * step_size\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n                # Adapt step sizes based on step success\n                self.step_sizes[step] *= 1.1 if candidate_fitness < best_fitness else 0.9\n                self.step_sizes = np.clip(self.step_sizes, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMultiStepMetaheuristic", "description": "Implementing a dynamic mutation strategy combined with a multi-step mutation approach with adaptive step sizes to accelerate convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 76, "fitness": 0.22393441643680811, "feedback": "The algorithm ImprovedDynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.25.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8951149721872494, 0.893291427882157, 0.8944574508399241, 0.8898035617092608, 0.8942318169946609, 0.8924303380773309, 0.8922347313194183, 0.8956446148036253, 0.8934416224864502, 0.014044093315895734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07187463797050309, 0.0582550756848943, 0.02838313240419066, 0.04922853664933957, 0.09141767853571259, 0.04655388361638724, 0.0431572606313102, 0.07376593484907012, 0.020211215048020148, 0.03369381371013025, 0.06539191328589677, 0.017477612317729485, 0.07619921715774802, 0.07363446077169389, 0.03761052157062006, 0.12839110028691214, 0.0407077043217845, 0.05206630656469802, 0.9883710776919374, 0.9636626949153074, 0.1048816751255719, 0.11289005721753331, 0.1229352237764586, 0.18005237026545962, 0.17328540128685432, 0.16138720112365412, 0.2458618139633426, 0.827039765491975, 0.8219840719506546, 0.8187794863908457, 0.8269235680980727, 0.8284516946318299, 0.8222132265727331, 0.8334377686702148, 0.8232334842695317, 0.8221332020634432, 0.11586987291385686, 0.08370135616442309, 0.07124090401118333, 0.392990713315583, 0.18025405908826198, 0.15134292924714243, 0.08961745676269528, 0.1772753567783184, 0.1290327907934865, 0.23977005663887518, 0.15116917210887382, 0.2308286557459166, 0.23349325260148024, 0.2739860982632296, 0.22688240445507069, 0.19370739505950096, 0.25289023546446165, 0.2533567885470086, 0.2640234542480674, 0.23555572524756685, 0.13718173835392367, 0.25943909354180783, 0.25661340107205166, 0.23710213535304714, 0.24521665922482694, 0.13812717176263833, 0.13585500303032072, 9.999999999998899e-05, 9.999999999998899e-05, 0.016310523525977394, 0.07886585616099107, 0.06213311440135372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07775638705687737, 0.045656551013560365, 0.19422945094153865, 0.059353194276108856, 0.020662821239485263, 0.01127825173962227, 0.11630375163066964, 0.012725072871278664, 0.026996477330285984, 0.16569774248737745, 0.15154361934472893, 0.19395287964648777, 0.11082531704357912, 0.10456306913622315, 0.16258886284603102, 0.20707209577232433, 0.1673858758128457, 0.08465990386596745, 0.08111293227965466, 0.0829245003370439, 0.2688778912457047, 0.07144332811557574, 0.10526316950275372, 0.21803974611320465, 0.2013703952154965, 0.12551507296092534, 0.1497968868749331, 0.614464985767633, 0.5885324400617966, 0.6023802514876118, 0.6021024413269297, 0.5852793317568625, 0.5873236949328935, 0.6070186570918659, 0.6346597107233903, 0.6548164199360107, 0.09488815621031466, 0.07177787199252894, 0.050694620583159655, 0.08190511042304893, 0.11436048491914264, 0.12072835824639827, 0.061479191250227494, 0.09485417380421679, 0.07171079585930418, 0.2878893629571282, 0.40791047377744794, 0.1579138340691041, 0.20898870949123516, 0.14460711063124143, 0.13462139096450298, 0.18001224240933222, 0.22657457663917924, 0.2126637929191426, 0.12891383492306419, 0.11587086634936261, 0.15956038292570596, 0.31853521660774253, 0.1072548033725732, 0.16958514021775695, 0.2541523790261947, 0.12755619635599635, 0.08784472847998082, 0.04782448878605683, 0.06254691823273495, 0.03952315079000923, 0.28679949983731867, 0.1956461762249564, 0.06496799019332233, 0.22741028937236163, 0.05659556695547796, 0.02144570855301442, 0.19336283411412702, 0.2224394547064753, 0.17443800277379307, 0.21051954239194814, 0.2010902561330662, 0.14252728482031785, 0.2767564418113213, 0.16909126790670292, 0.18648118814857695, 0.16647576118449525, 0.21558605999909863, 0.16710243768293598, 0.17176863161745437, 0.17733265867520187, 0.1724487999700841, 0.17442923189762494, 0.18523433318539528, 0.19291859299995062, 0.10893450218426115, 0.13791421419136407, 0.07162666664535844, 0.17417741162001898, 0.11278660617166048, 0.062115286581910234, 0.10887152437283043, 0.12739042616485707, 0.16932900501887582, 0.9391571705936396, 0.11312252168514336, 0.08352054832559974, 0.08343263846207227, 0.21494807686442763, 0.04442485872510882, 0.11375125231771088, 0.16972525334046262, 0.398586614539276, 0.2859236444981872, 0.20358196248168814, 0.2591147287964467, 0.271734761253034, 0.2529465365774357, 0.2001167180253529, 0.2596402599966968, 0.2568433097344739, 0.3278520711889281, 0.024614700096890707, 0.08647644607754779, 0.03611012462883045, 0.07660139387119669, 0.024967339683307554, 0.059529290815572455, 0.08826843483962699, 0.034771242218262, 0.041665061228393085]}, "mutation_prompt": null}
{"id": "24cf95cf-2dcb-47bc-b86a-c52a1249fe7f", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors adaptively based on individual and population performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n                self.mutation_factors += 0.05 * np.random.uniform(-1, 1, self.dim)  # Adaptive step sizes\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Introducing adaptive step sizes for mutation factors based on individual and population performance to enhance convergence speed.", "configspace": "", "generation": 77, "fitness": 0.28503311233950246, "feedback": "The algorithm ImprovedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8117451962412648, 0.8214956212343498, 0.8141173183381551, 0.8135411524204827, 0.8152435851241882, 0.8169922522210782, 0.811611053405206, 0.8160696350891075, 0.821698141203924, 0.04623889394242087, 0.0017876387359250234, 9.999999999998899e-05, 9.999999999998899e-05, 0.06370167549751626, 9.999999999998899e-05, 0.08536391152273504, 9.999999999998899e-05, 9.999999999998899e-05, 0.09696669712752959, 0.08134420630009098, 0.05109552782504634, 0.09299892705354729, 0.11722519061072167, 0.07275428182760224, 0.08196320421053083, 0.12628496412384083, 0.11452875370917359, 0.08768764644489724, 0.10000149742099873, 0.09849193245776022, 0.09498503967209093, 0.04497048774728807, 0.10804130920578958, 0.10872526896254497, 0.08643727386169031, 0.14167753845252995, 0.9819764720501445, 0.9898489652906834, 0.980841039147545, 0.9840050824079363, 0.9754326275713391, 0.9861205637874354, 0.9839974991756786, 0.9766713534398294, 0.9914076647989031, 0.7405424657441028, 0.7372109276748966, 0.7400870096084173, 0.7363503444988302, 0.7405346013228811, 0.7397720331977506, 0.7362746111611018, 0.7359203741925455, 0.7377692993454894, 0.3559386989148349, 0.22553536695208753, 0.3881945886731353, 0.8709602966664319, 0.2140575516874611, 0.35526251762255356, 0.2226582141127239, 0.23447202898257125, 0.8714122821437572, 0.1332152752903878, 0.1332693625621345, 0.253751561352349, 0.23830647560453488, 0.22558394629507483, 9.999999999998899e-05, 0.23639178175381903, 0.2288488106115476, 0.16344306231952432, 0.24878412466619582, 0.2327419156203404, 0.24299821471400307, 0.26069125906221047, 0.234442895400769, 0.2351470409728107, 0.2214137861463894, 0.2407559826919724, 0.21777620824276545, 0.04593697758672877, 0.008967836445875732, 0.0635056007237601, 0.05299178406733607, 0.009217463842977835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11040138972368696, 0.06662011538531565, 0.02413855953696653, 0.09226840705566575, 0.038196581512739414, 0.03673303048835974, 0.01903266528304326, 0.07228862961690863, 0.04841579495306325, 0.020167446578957415, 0.14777538532963175, 0.034942054694481195, 0.12727799839288223, 0.08108320449339612, 0.07241154369760827, 0.2250166578250119, 0.10098231754107434, 0.26316349531208605, 0.15090100057741607, 0.11999727022415241, 0.07470732964785598, 0.18145875957688873, 0.14970732778431484, 0.21455985769590669, 0.1569024618507323, 0.29076819780431473, 0.22879449443989075, 0.17296664081544555, 0.5514129632573694, 0.582075263917393, 0.5631234335344855, 0.5705153631615224, 0.5341472791521772, 0.5636765736881775, 0.5447816074184579, 0.6307513493352872, 0.5349743178881756, 0.1228649912357681, 0.09258758067376494, 0.09196070742897222, 0.09153295874315803, 0.10954417208485245, 0.09227280163850315, 0.157688494703645, 0.1099893761604126, 0.07965280298233757, 0.4648853386729571, 0.16370326991584117, 0.2035309123262432, 0.2908478992240672, 0.2732306632096657, 0.5346732596377071, 0.40783618612564565, 0.2768614976527014, 0.3298833093719242, 0.11781162611401308, 0.3019187745393692, 0.2990073856103682, 0.3486589036727742, 0.43020823109714434, 0.42925557926080404, 0.3367583745830556, 0.2312061096680298, 0.3496373522800398, 0.27022942584074394, 0.14067332329492255, 0.35870127578823696, 0.2092564983478794, 0.31693491836050613, 0.2778035984975057, 0.20606195649853798, 0.1749186713408295, 0.2151741629927184, 0.22657110708797057, 0.15781568236715315, 0.19420558615052574, 0.2410417729672154, 0.19958387087607987, 0.17217387779593096, 0.29731840959763445, 0.2641315963703579, 0.22242876664096978, 0.198532126012256, 0.22395669469595836, 0.1850693525094642, 0.1786417518471899, 0.19490999754886829, 0.16895038517808003, 0.18496629301258105, 0.2282600133896534, 0.22468012515567448, 0.18896182913396342, 0.13687531943721665, 0.9023909931897673, 0.1730746866491485, 0.06584641003044911, 0.11421237331930933, 0.13658440867478017, 0.12661752587551856, 0.16334074121929776, 0.8808212266111147, 0.11309029967513617, 0.8437242021801553, 0.08311018700760464, 0.08302536584439568, 0.044194261117162514, 0.770098570162794, 0.16830781197581635, 0.09472754848486165, 0.2443733862545392, 0.21645545980765468, 0.2747920593156786, 0.2094206683484613, 0.228539115186147, 0.244530269308184, 0.33186795519581147, 0.1994204350902158, 0.2745496260426519, 0.0986975157907114, 0.12146660722617708, 0.06793987362064258, 0.09455749329884533, 0.06928937877825136, 0.08680251094203684, 0.07875235351412135, 0.07668818459192261, 0.08374737632733398]}, "mutation_prompt": null}
{"id": "c132e848-da65-46c5-97f4-6c5f71353a64", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on population diversity\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.95  # Adjusted from 0.99 to 0.95 for faster convergence\n\n        return best_solution", "name": "AdaptiveMutationDynamicMetaheuristic", "description": "Introducing an adaptive mutation control mechanism based on population diversity to enhance exploration-exploitation balance.", "configspace": "", "generation": 78, "fitness": 0.23467535791608488, "feedback": "The algorithm AdaptiveMutationDynamicMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.26.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.9608971776831106, 0.9610828350843736, 0.9611383887391037, 0.9601051598229365, 0.9608726903886099, 0.9603898553460378, 0.9602916967504462, 0.9608852411303725, 0.9610368183837825, 0.05047625773604436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1376982733893406, 0.09476128120621019, 0.04414737737933305, 0.108586134233295, 0.09898582887917362, 0.09455495609452025, 0.06336167174036422, 0.0988811718096827, 0.046575048468856184, 0.033674655373323925, 0.09837578033658478, 0.054906332576506456, 0.06915812874823446, 0.09127944200406368, 0.06503683581831332, 0.03176294865404694, 0.050502639839704155, 0.039579597191818694, 0.9902669487023984, 0.9913178537624635, 0.14740311652102722, 0.16261113608758493, 0.12899301324998746, 0.20015779597194283, 0.98073148064373, 0.9804627024896228, 0.9529040000472718, 0.9405007719534243, 0.94089701356174, 0.42506656655895425, 0.9404807901269828, 0.41919387352226944, 0.4017225752470681, 0.9431945247510873, 0.9398324303302961, 0.9326281405719129, 0.40822134775599384, 0.08622208729242775, 0.14154713035796773, 0.37058188513867374, 0.21654983438605968, 0.28498572121904375, 0.15300841840050072, 0.17680563287587103, 0.13036707041882178, 0.13504058224668114, 0.08875038942256286, 0.148280129565577, 0.18157334419102844, 0.13657993732758367, 0.1645770265261044, 0.14650565874111832, 0.13804949444144565, 0.13336220125073883, 0.21105416046304248, 0.13200768940116325, 0.13475039322926274, 0.1746379952658348, 0.18660870502391358, 0.18817219297271126, 0.2890320157876922, 0.1387952554925982, 0.13153203360404242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1112218443130445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02993080750632393, 0.05888230765086433, 0.08946920256511548, 0.05851409739059421, 0.008481023894615802, 0.006902307394550555, 0.11343286047454892, 0.001715258729819813, 0.03878620876079897, 0.1338894520681444, 0.16346456392380582, 0.21199414834151487, 0.11333346664019295, 0.1177602732133115, 0.27137424440535063, 0.0934286262570273, 0.3247521920448946, 0.08273565806654204, 0.12354347456057713, 0.11686223579768962, 0.10034976577285537, 0.14285908770069422, 0.07449863358736353, 0.3016282522352367, 0.13538876417977175, 0.25872527566423764, 0.45867125965757927, 0.5180998413774467, 0.5372970417920594, 0.519545606717684, 0.5301408328322337, 0.5085497146760031, 0.49704573970325194, 0.5183781390476006, 0.5321193748983601, 0.5288233139784855, 0.05820057394148548, 0.06889087435383734, 0.05319243610978597, 0.1140432078000726, 0.05997945184137188, 0.10860297630253213, 0.07408940718324042, 0.10828484154706053, 0.10303652331873459, 0.21468821432803842, 0.20282452635287762, 0.19400631567897486, 0.09602986105551559, 0.29395529920706864, 0.18514272833808731, 0.34668810726505295, 0.22745501599779616, 0.2388306982524998, 0.12328914207027775, 0.19003286680595566, 0.16043078097450547, 0.35648368517423534, 0.4083891951838339, 0.1275965454876401, 0.3232377015340554, 0.2834194023868277, 0.08929952993000856, 0.0934886271725911, 0.03424409977526266, 0.05155397932257999, 0.23406531071090475, 0.24791727372782202, 0.131837512440808, 0.2004006384750534, 0.14900782672501067, 0.03214567552828829, 0.26065444237358193, 0.27197060701857945, 0.19449311216793763, 0.18179577183712103, 0.19211684686394992, 0.22651093322487914, 0.19965310557721372, 0.1620743386209077, 0.19453822833361212, 0.16817917099648638, 0.19294904049402395, 0.17530078880950783, 0.18274637364888324, 0.17167493232519337, 0.19577634852477566, 0.17617404482016208, 0.18132521779308297, 0.16225782819627532, 0.10881706356156196, 0.13777181901031654, 0.07157238395496501, 0.17405486598885322, 0.11300754216157616, 0.06210007118563532, 0.10881361063219286, 0.11530526441940636, 0.11321874975980994, 0.498418729852794, 0.11282529972297506, 0.08344079583618946, 0.17029100515343654, 0.21470501639152495, 0.04437807368616764, 0.11373231717048604, 0.16991320352277706, 0.22612107261077086, 0.21134648465220107, 0.20246541333657508, 0.23690456516798608, 0.2220179107974225, 0.22391129248716046, 0.17389166360266084, 0.4160222239280995, 0.222179555771034, 0.24036725376599588, 0.0677656207249927, 0.11238870344177576, 0.0313163471565544, 0.0514917721470487, 0.08821923259684772, 0.13545949193973028, 0.14425962924464697, 0.04144425657520023, 0.05580483446448947]}, "mutation_prompt": null}
{"id": "2ae110c4-af4e-4134-b232-fc4e0e1d9ad5", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n        self.explore_rate = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate and step size based on exploration rate\n            self.mutation_rate *= 0.99\n            self.steps = int(max(1, self.steps * (1 - self.explore_rate)))\n\n        return best_solution", "name": "EnhancedDynamicMutationMetaheuristic", "description": "Implementing a dynamic mutation strategy with adaptive step size control to enhance exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 79, "fitness": 0.23613613719792992, "feedback": "The algorithm EnhancedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.27.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.9585982493210166, 0.9594968151289194, 0.9590986724375742, 0.959338120212055, 0.9594532881403314, 0.9597639783839745, 0.9597000444348537, 0.9602273368431099, 0.9597761621498374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09098708590778537, 0.10858028394219821, 0.05168170321461274, 0.0816960083359125, 0.06539471107497652, 0.14960272397520713, 0.045167578165223654, 0.12003681958092516, 0.0650979676422474, 0.057754417877600495, 0.06519338122107843, 0.03746177658467564, 0.05321674731432269, 0.1277371058325003, 0.08410678594402399, 0.04585457676553106, 0.04521597184610204, 0.1204278624739753, 0.9907272083873372, 0.9913374643530544, 0.15749163104712716, 0.19272387318342976, 0.12620896645640933, 0.2202867008896483, 0.9842142941305589, 0.9841936766227284, 0.9771545261748715, 0.9405226568852937, 0.9408996086212971, 0.5723862563601629, 0.9397940584407516, 0.9403297730811285, 0.2756034557442246, 0.943057572095611, 0.9409892535758757, 0.9376345708336105, 0.2126851352328769, 0.11070450316318547, 0.09614494335422274, 0.1644220022647922, 0.19620796593012946, 0.217023880081484, 0.18003312523518467, 0.17700291198634843, 0.23967701932844987, 0.13243480003346741, 0.1548612387333249, 0.14319413138159875, 0.14054691157169252, 0.2860849719188271, 0.13256853518639455, 0.1627385587147523, 0.13659082624930308, 0.15270917675822115, 0.17385867521136333, 0.1472875104003193, 0.16189524425794166, 0.20620379640601172, 0.20419974294555143, 0.2023396917208754, 0.15227161525388888, 0.21092539374688635, 0.16379461866633904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08307030133848514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676015364475534, 0.04146970961937946, 0.10403296249861305, 0.05727492159353664, 0.009674876638223417, 0.007076520614344606, 0.10116174900284369, 0.01011880938227605, 0.025831253832555245, 0.0986896053141254, 0.14344872015431287, 0.27585707351304656, 0.12131930128997215, 0.09379873235948122, 0.18326884937141463, 0.2980996650825738, 0.27777321488186546, 0.08066397596716035, 0.19239882056974222, 0.06660533573340377, 0.16486911157084028, 0.20386344010910162, 0.1035022337173841, 0.16236533281833, 0.21369698773148527, 0.18045717522584492, 0.16981809955567206, 0.5169076649753593, 0.49140920559805723, 0.551925798673589, 0.525729222942571, 0.5312670006558973, 0.5298446192406656, 0.4962714337666795, 0.5663140231865937, 0.497159072348928, 0.0948648524694492, 0.07890443936834379, 0.05494678528869135, 0.08778281251759745, 0.081678832926247, 0.05185974834621809, 0.09479831757497992, 0.041826970044979817, 0.15014550822325856, 0.19761811986962852, 0.2089018586998428, 0.23129460922339262, 0.3379181172704905, 0.255473143981641, 0.24031746203266324, 0.11433612758935341, 0.11638731669532831, 0.1378470611230629, 0.23663258159821365, 0.11280120089604284, 0.10033119055272333, 0.40504631044631445, 0.5902191907193185, 0.12000876530909677, 0.23415797801683624, 0.3121725796925815, 0.2023249332015783, 0.09938626366335845, 0.21487426881224048, 0.0692317016238787, 0.17254468415888935, 0.23767404977476247, 0.13441299934264483, 0.22556042106333718, 0.12843927411175682, 0.02482863498459098, 0.2953610814074382, 0.22699650248988723, 0.18550867260633308, 0.1545655680300726, 0.16916065699136384, 0.23004432832307242, 0.19181075129728387, 0.17177413511596895, 0.1568523345437829, 0.1875324570783734, 0.20121169226947833, 0.20012332245410336, 0.16517186746615675, 0.21332592364092984, 0.18486605282661606, 0.19274344996380044, 0.18743582167678519, 0.17938489692652615, 0.10878439602181678, 0.1377494587822573, 0.07156942932071142, 0.17405422170148488, 0.1127266221459573, 0.062068826438079094, 0.10870203801145994, 0.1268263856092886, 0.11322240975318132, 0.5683736751956185, 0.1124223353223871, 0.08345079283625001, 0.08346553752952823, 0.21475079701491673, 0.044331795805552576, 0.11372460013803098, 0.1698761704104641, 0.27672691827203677, 0.23662599288883912, 0.2568001410931108, 0.16059039957227594, 0.260555134987704, 0.19166510757706323, 0.3195723517449408, 0.2204980533560278, 0.24648083846486002, 0.178065653152642, 0.05222958016512946, 0.09119479710220746, 0.030275208263264908, 0.0750792008413802, 0.052849122715873276, 0.07652668282311004, 0.05408952254601085, 0.04907410637916454, 0.06802369975990075]}, "mutation_prompt": null}
{"id": "550fe94e-a5c1-4ae9-bc72-1ed83596cb46", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n                # Adapt mutation rate based on individual performance\n                self.mutation_rate *= 0.9 if candidate_fitness < best_fitness else 1.1\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Improving convergence speed by introducing a self-adaptive mutation step size that adjusts based on individual performance.", "configspace": "", "generation": 80, "fitness": 0.07721723391523509, "feedback": "The algorithm ImprovedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.20.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.14221145650774036, 0.05353988933604947, 0.10646508624906414, 0.07736005128080492, 0.06349986131891439, 0.10983210996082238, 0.09071913935527154, 0.13455224008610134, 0.06840334392329472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030969698105595134, 0.003668810629701147, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9965981521330173, 0.9977819865600879, 0.9949623019194515, 0.9976111403953368, 0.9912075219386836, 0.9944921007562022, 0.9945128640549172, 0.9958555555643875, 0.9972347607920127, 0.10862792956319567, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.0064463354066065515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05826786547340268, 0.0026791646941269898, 9.999999999998899e-05, 0.03746962716476332, 0.005274169046382893, 9.999999999998899e-05, 0.03441871556201681, 9.999999999998899e-05, 0.0032877485202706946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14609473504473913, 0.09078978874618038, 0.13128618164158812, 0.07417410282405312, 0.0908385124335589, 0.07766643872041623, 0.14041638855789185, 0.12792752512437966, 0.11396236463380394, 0.011628371419645012, 9.999999999998899e-05, 9.999999999998899e-05, 0.022514623784745003, 9.999999999998899e-05, 0.0006735495345484566, 0.005901842633161181, 9.999999999998899e-05, 9.999999999998899e-05, 0.0934063612193029, 0.09327475937579999, 0.09341666525892944, 0.07655755058886793, 0.07658152351117808, 0.07660861092666238, 0.07857580502284345, 0.0729052880943516, 0.07285588175517699, 0.12134136112062566, 0.09668953623153864, 0.09011926125676495, 0.1275169103541881, 0.1067964243652979, 0.08247332206112623, 0.11420206329748472, 0.10052951494965923, 0.08471547142025915, 0.04507589610365759, 0.047111132882831086, 0.02158162972787081, 0.05782278566062793, 0.050279602039964955, 0.052991546547324964, 0.06599844872495775, 0.03678720209775643, 0.028587949954740344, 0.10707782681107414, 0.08051952409958174, 0.07160189512050052, 0.10952183522631986, 0.0803688894389144, 0.10839480753621245, 0.12245976138762271, 0.08153711365530614, 0.08971817738237609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13610129968918538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07634702482041722, 0.10436315429132426, 0.07631578912892123, 0.10884048202579855, 0.03805027547936657, 0.08304299763496892, 0.05307916982959937, 0.08496581343396736, 0.06802598195812282, 0.023696073867445322, 0.03967402848431323, 0.05116979422707679, 0.041809218614918375, 0.03052984006663706, 0.025074702059471377, 0.08413946900149039, 0.049239952728265646, 0.08711382981672233, 0.1496067959124241, 0.12017502569002791, 0.13846140550752428, 0.1501140319060239, 0.15015801019274444, 0.16140814584867313, 0.13671314286283343, 0.1368363116289968, 0.14781558379020898, 0.022010449157518486, 9.999999999998899e-05, 0.0137703307613678, 0.004141642561391712, 0.006791822711702644, 0.013850692344699711, 0.017066687661447366, 9.999999999998899e-05, 0.01785439514207987]}, "mutation_prompt": null}
{"id": "57cc5a1c-a8e9-4adf-8c87-ae9f652f02ee", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.min_step = 0.1\n        self.max_step = 10.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            improvement_count = 0\n            for i in range(self.dim):\n                candidate_solution = best_solution.copy()\n                candidate_solution[i] += self.mutation_rate * np.random.uniform(-1, 1) * self.mutation_factors[i]\n                candidate_solution[i] = np.clip(candidate_solution[i], -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                    improvement_count += 1\n\n                # Adjust mutation factor based on individual performance\n                self.mutation_factors[i] *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors[i] = np.clip(self.mutation_factors[i], 0.1, 2.0)\n\n            # Update mutation rate based on improvement count\n            self.mutation_rate *= 0.99 if improvement_count > 0 else 1.01\n            self.mutation_rate = np.clip(self.mutation_rate, self.min_step, self.max_step)\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Utilizing an adaptive mutation strategy with a variable step size based on solution improvement to accelerate convergence speed while preserving algorithmic variety.", "configspace": "", "generation": 81, "fitness": 0.19098754033571733, "feedback": "The algorithm ImprovedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.45514037414969666, 0.464720437183735, 0.5605679989589984, 0.5000925014825415, 0.4766140807545698, 0.5000649078602006, 0.4779414093162413, 0.4639561630464357, 0.458386139270877, 0.008756521072735057, 0.028120274541909795, 9.999999999998899e-05, 0.03379710191859964, 0.00035423339456630565, 0.14339979413248127, 0.006079799397058605, 0.026025479551573305, 0.025895888901761865, 0.22953518393562422, 0.2910124396150855, 0.23374929761751662, 0.20606812845177847, 0.24050685487806422, 0.2736868358721882, 0.28022666548748865, 0.20703612288759465, 0.2849776259256954, 0.16073815936017022, 0.17118010157856, 0.3031052817984864, 0.17362399130999706, 0.1851492662533364, 0.22234418672530676, 0.211597661827154, 0.16894967633004876, 0.20391625686180836, 0.9940337598553416, 0.9897187066629399, 0.9824527575783395, 0.9896938998544141, 0.9900221374843349, 0.9914534279226636, 0.9896818306441242, 0.9892560572103773, 0.990526575604086, 0.15212620763970608, 0.15160539470348666, 0.21154101061506247, 0.26249024904160156, 0.1716081454500774, 0.2638325584937504, 0.18898196753219332, 0.2096612584730636, 0.2274023207091781, 0.1518270810368515, 0.062179222881266094, 0.10982819220896689, 0.2667312218630935, 0.16137574599788063, 0.15042222511605907, 0.1639934864339806, 0.10547898328557115, 0.13732278313495483, 0.18714833734589842, 0.16156025256151585, 0.1474989046917381, 0.23687614926039657, 0.14412868150908376, 0.18937062772941582, 0.245568977074768, 0.15480595171510236, 0.15758557872153633, 0.14499741304430114, 0.14870641342327795, 0.1280152081920647, 0.14646433785614577, 0.18505607053851147, 0.14566659740105192, 0.13665782810895777, 0.20562477738503293, 0.1477885600924994, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025531090223411934, 0.026852433340591064, 0.07833641828737059, 0.06498845813007281, 0.005131309070450563, 0.026943067599358606, 0.1037479973593658, 0.021211154841507263, 0.01599331371349888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014253817412559822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029589536496889224, 0.07740914875797589, 0.07190720335136191, 0.03406860973242565, 0.07346305116337914, 0.010688379267573711, 0.0527115751734023, 0.09051640275478334, 0.07413829875228273, 0.41596021018133356, 0.40370605310101915, 0.3434547553950199, 0.36218956855825746, 0.303263813569846, 0.3493369237807834, 0.3980991271300329, 0.42743760302796696, 0.4053606264989522, 0.059186780189887434, 0.12477577927662964, 0.053974505478512236, 0.05538940551815941, 0.06672071158082382, 0.06826622812897187, 0.07757558530212005, 0.08023256937445589, 0.08096734483857637, 0.15603997213665166, 0.12069391922493056, 0.12442595929483502, 0.13644820515201972, 0.10527170172234779, 0.13833839379186297, 0.12438037512855937, 0.13324708918611083, 0.12036486004890268, 0.19014267853572342, 0.10485655979962338, 0.10309529677200657, 0.16030668818697413, 0.2486038406993274, 0.22564558947423297, 0.15436702010446512, 0.15220380360993035, 0.08748884570753834, 0.14010612921642784, 0.07138213863345699, 0.15600713498839047, 0.2024884063612551, 0.11400758323888871, 0.07649473419608332, 0.13620212360923323, 0.13767131254687515, 0.15484867653858858, 0.17840667145988298, 0.18898766224494068, 0.18980406856720167, 0.18420468037221704, 0.21276726428135073, 0.19269712160192476, 0.18625534116317743, 0.1575948445123022, 0.18798309814238712, 0.22875523797197173, 0.20841462425608948, 0.3412380970016837, 0.19956946196939152, 0.1932006633861838, 0.19812176827002126, 0.19888819630801446, 0.18867430719001033, 0.2279511347450066, 0.18962418273764003, 0.13158710891613523, 0.08608449876052471, 0.4038824638019052, 0.1437632571320977, 0.15271750392255978, 0.10887946904957191, 0.1159143842587409, 0.1613512320101903, 0.2690335194857576, 0.10624156037854404, 0.08333846953490243, 0.14211195974441848, 0.21217205360565083, 0.21184817119081212, 0.1685379904335781, 0.05932576039340387, 0.11489611608406103, 0.17518018375603772, 0.170336358641074, 0.18473502571266898, 0.16376884169294104, 0.16682653150963778, 0.16576771731170925, 0.17559614899398035, 0.18892768993696774, 0.192773700485377, 0.06926209183616794, 0.06205154477554975, 0.0706670315101815, 0.07480570579283052, 0.06678687298332953, 0.06849681524736484, 0.08424251525651738, 0.07331821670295269, 0.07854916548600466]}, "mutation_prompt": null}
{"id": "b2911d84-f614-4e59-bb09-17d6c1075942", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "24362a14-6326-4230-b93e-dc5a38cdc5d9", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                adaptive_factor = np.random.uniform(0.8, 1.2, self.dim)  # Introduce adaptive mutation factor\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors * adaptive_factor\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Introducing adaptive step sizes for mutation factors based on individual performance to accelerate convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 83, "fitness": 0.28255954701839475, "feedback": "The algorithm DynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8161430370235857, 0.8144528178990998, 0.8147856084882446, 0.8156543043004684, 0.8135053516431425, 0.8135009528212044, 0.8143803404236851, 0.8183337001513882, 0.8135366527738697, 0.15446151502873418, 0.0085764581663339, 9.999999999998899e-05, 0.10830850965682637, 0.00814903705865222, 9.999999999998899e-05, 9.999999999998899e-05, 0.04782441825683559, 9.999999999998899e-05, 0.074102811952939, 0.1858162158417016, 0.059367812547227006, 0.09280227800465057, 0.08563294036576496, 0.07472721480050981, 0.07436171137762593, 0.14282472980461958, 0.11686588287924349, 0.11510392698502525, 0.1410762457453737, 0.15569376639804466, 0.06414139059982205, 0.0900565117950215, 0.08816088961212065, 0.09981711099184654, 0.10833759347083338, 0.10375210886797026, 0.9853716106052612, 0.9913571098762387, 0.9799325849355672, 0.964948548533963, 0.9778934752164249, 0.979125864632374, 0.9901705647673641, 0.9830550652772728, 0.9898250968850453, 0.7392989165302204, 0.7376168746693335, 0.7381075070805666, 0.738312814825939, 0.7394384785658619, 0.7373275692087145, 0.7439930450513415, 0.7363896503699285, 0.7380572669226133, 0.38961849787708913, 0.17081214684742807, 0.1702899301227344, 0.38056302870149716, 0.21156979547376464, 0.2143327088460696, 0.8708698788706739, 0.1781470167969823, 0.894686551800215, 0.23775939791320266, 0.1973520878549051, 0.25248402565476735, 0.2394482488805798, 0.2612812645580477, 0.25602741297529596, 0.20602288955680637, 0.24620916043616492, 0.2609221088388446, 0.23089220923058973, 0.1343028828789542, 0.24197277403995487, 0.226432691825054, 0.22001221018347905, 0.22956698544817356, 0.2257476776901477, 0.2161905958824455, 0.22634223604473047, 0.05459005560559149, 9.999999999998899e-05, 0.0020722530642945935, 9.999999999998899e-05, 0.12093097292321486, 9.999999999998899e-05, 0.006123203184822734, 9.999999999998899e-05, 0.03552502683618608, 0.07986096643799445, 0.06193723887712754, 0.10322234753922732, 0.05011068773407956, 0.01982638992965624, 0.013441224947400743, 0.0802074464008321, 0.04060321683204715, 0.03564018478012898, 0.06404927188473375, 0.04779249692616172, 0.07549787703784516, 0.21406619436947738, 0.09797292491606535, 0.08356028089559764, 0.22618011359513224, 0.08873525676440963, 0.14720699485370514, 0.15066104940952263, 0.04296896986908072, 0.15189020876003234, 0.23848560272094887, 0.15400642238531748, 0.35992074991804446, 0.10970308670913143, 0.12469220004383663, 0.083568049126024, 0.5679716264018697, 0.5820851014640984, 0.567424895513898, 0.5875666388038858, 0.5460719438252446, 0.6114373197740831, 0.5720340357852128, 0.5441214192720651, 0.5680161192860261, 0.09683242514331247, 0.15667770488644128, 0.10924524063511076, 0.07509846954924904, 0.11028519501047718, 0.07431184964446436, 0.09329073367679752, 0.08562062396854875, 0.15673055135065372, 0.21322166677507104, 0.21630503497125964, 0.5252269988107643, 0.23111717333349457, 0.23419354241208878, 0.17598892833994229, 0.5306956531434449, 0.32355319664324866, 0.2127810354581483, 0.3398184744238366, 0.1028788863072625, 0.20367009057671526, 0.30887905033400076, 0.5279045122541107, 0.3495762593181907, 0.30707502131989584, 0.29643190989780666, 0.10274961153379536, 0.29175995619234296, 0.4124830776216051, 0.23473291894510007, 0.2315920490834259, 0.38044809214652864, 0.09917210840752888, 0.25293202921019087, 0.1913754599063262, 0.03943944945748534, 0.2283330859467595, 0.24732964100126542, 0.22061547575200835, 0.22668289916776707, 0.22500366180027864, 0.21095781370832833, 0.19057985561040702, 0.20725833814445882, 0.2234825601527426, 0.2093932057641723, 0.2233178626189949, 0.2278383085200456, 0.2304900196648294, 0.22394021419424015, 0.19917139252104055, 0.20319450603843747, 0.18845963465570947, 0.19938867562880747, 0.18838650196727447, 0.1366927128944877, 0.9067025244280995, 0.17285965623437582, 0.11241108290214874, 0.06193280906155396, 0.10850474427007961, 0.11493340817663067, 0.1668700201779839, 0.8950886396174504, 0.11288423454084351, 0.08328563004765333, 0.08305760261779671, 0.2126985088425427, 0.2101009830301679, 0.11340811825605324, 0.1684002378857007, 0.6604318669502192, 0.2801042199533522, 0.43404310759505993, 0.3151307327282865, 0.24874272012532894, 0.24233119522946367, 0.24509052547577692, 0.31086694540917414, 0.19899909985047515, 0.29798560059079204, 0.06668310033517866, 0.10514610036139638, 0.10424270251962098, 0.09575814168423802, 0.08467079337873074, 0.10452924428486843, 0.09678726041665053, 0.08139060203250359, 0.10526828020324852]}, "mutation_prompt": null}
{"id": "ee724755-fa39-4d7a-b71b-fec34a955ad9", "solution": "import numpy as np\n\nclass AcceleratedDynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.95 if candidate_fitness < best_fitness else 1.05\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity with an adaptive step\n            self.mutation_rate *= 0.98 + 0.02 * (1 - np.tanh(0.1 * (best_fitness - candidate_fitness)))\n\n        return best_solution", "name": "AcceleratedDynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy with a multi-step mutation approach and adaptive step size adjustment to accelerate convergence speed while ensuring a 10.0% improvement in performance compared to the original code.", "configspace": "", "generation": 84, "fitness": 0.12082895545857031, "feedback": "The algorithm AcceleratedDynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.28106536510832314, 0.20228948686740866, 0.214664913329763, 0.17899553705065951, 0.22234695107344293, 0.170742756055682, 0.22881661525533648, 0.19090887810537704, 0.22739761760258914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03255547893705568, 0.03500289453566108, 0.027411682204777743, 0.05727312426959852, 0.039774856471923026, 0.029790488631537437, 0.041073631308915504, 0.040512894081058404, 0.040380931907935125, 0.024790327243088717, 0.025734321513484204, 0.033657025004627195, 0.019195505442957228, 0.022455821428507217, 0.03960990160043387, 0.028796118584974106, 0.01503601284872802, 0.022367115574155272, 0.9919784271018869, 0.9937016012086566, 0.9879337749419541, 0.9851115077199871, 0.9803328056194615, 0.9890400065074431, 0.9918585529316339, 0.9931746648893043, 0.9852741537630264, 0.10671862365687301, 0.059244975472973915, 0.06391383819916141, 0.059765583881321804, 0.0328950812187333, 0.06614905042448083, 0.06376579337700072, 0.08366946769189876, 0.07030175599207744, 0.13081469716451555, 0.09402870229415461, 0.10179723988206146, 0.14078714405656356, 0.13826837149017335, 0.12885863269250764, 0.11147007155361754, 0.11651684010126029, 0.14554013804576427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023220270464420878, 9.999999999998899e-05, 0.0432047452983354, 9.999999999998899e-05, 0.03502329533951776, 0.04928822587195958, 9.999999999998899e-05, 9.999999999998899e-05, 0.015378528312524176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019829857376797433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023184777848071603, 0.0154465839412955, 0.010925838406926736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06909466418796983, 9.999999999998899e-05, 0.008361075813393515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004520617325731058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2133095797193022, 0.22810593645267896, 0.22477479145179335, 0.20105468832824114, 0.20202480915822918, 0.19471245337278564, 0.20760871609975273, 0.19301374660853965, 0.19201156918962148, 0.03284889537443614, 0.039165493019589825, 0.04035790011928386, 0.0431690808512023, 0.03803238695450195, 0.03763402867581167, 0.03461161769611476, 0.04537464510344302, 0.04876583365503262, 0.1263654995474126, 0.13042361941704672, 0.12149514292179597, 0.09872146807949722, 0.10618532807325987, 0.14139354888092492, 0.11503882255161568, 0.12883005742902243, 0.11033008305772529, 0.15410837617987672, 0.1733308444386712, 0.14890766762196128, 0.146605713450497, 0.16849913661660143, 0.13234462850095297, 0.1786181757282933, 0.1517227438104083, 0.1600982732566637, 0.09958888508434116, 0.09191093562638875, 0.0967511651729861, 0.11994534738304319, 0.11264413731649858, 0.09273924421728119, 0.11202226971561613, 0.1119097474287799, 0.09726937863807361, 0.177470715849531, 0.15062606082018049, 0.1603767509492725, 0.1638957122654412, 0.1405848897419979, 0.1577758195637884, 0.15285457129521896, 0.1695025111949644, 0.14940077517047068, 0.14188760375937493, 0.14539302415956623, 0.1378792545649632, 0.15941404911405843, 0.1346946130890856, 0.15607520581098688, 0.14575254101932045, 0.15576712489213773, 0.1340042556537293, 0.1358044523312043, 0.11155424554246096, 0.14805697970831788, 0.14340482902040963, 0.08175186766771259, 0.11466459182742872, 0.10683686646069068, 0.11184680881565434, 0.18747830857898706, 0.27937201605654094, 0.07960841552926645, 0.10223116088349127, 0.09980699517579705, 0.15865687445944077, 0.11599305315513497, 0.10690556002519935, 0.11914280302821167, 0.1108881277064826, 0.1842188445202716, 0.20152118800536412, 0.1685919237622271, 0.17532512283204393, 0.16928082283271473, 0.17466262748473615, 0.16514080760281247, 0.15990807818737707, 0.1931305968230973, 0.0370843297440584, 0.06045906016922309, 0.03211237648306342, 0.03891078516129942, 0.05340931593375975, 0.0429763241420702, 0.04598480246338221, 0.0440897792481495, 0.05022238432910364]}, "mutation_prompt": null}
{"id": "b68bea89-6dfc-4a65-a35a-458eb4600a02", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                    # Update mutation rate for each dimension based on performance\n                    for d in range(self.dim):\n                        self.mutation_factors[d] *= 0.9 if candidate_solution[d] != best_solution[d] else 1.1\n                        self.mutation_factors[d] = np.clip(self.mutation_factors[d], 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "EnhancedDynamicMutationMultiStepMetaheuristic", "description": "Enhancing convergence speed by introducing adaptive mutation rate control based on individual performance for each dimension.", "configspace": "", "generation": 85, "fitness": 0.27515857393273063, "feedback": "The algorithm EnhancedDynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8114019908390669, 0.8146298840453823, 0.8116771872717015, 0.8119375672450078, 0.8148735547324626, 0.815971852653702, 0.8125045726974488, 0.8132574620999269, 0.8150392464929271, 9.999999999998899e-05, 9.999999999998899e-05, 0.02991638597334445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1821432891237892, 0.12330654214436088, 0.0571424103511019, 0.11543635801952257, 0.09316556085107408, 0.04537534165442869, 0.0723400668563905, 0.08667913992003673, 0.1319012259314788, 0.1147589381447015, 0.0824597533779996, 0.10012910275170894, 0.15551743782083816, 0.0819771006542298, 0.07114353897778891, 0.08216049563577621, 0.10046002985407632, 0.09831690833551132, 0.9921935151898496, 0.9932701552564988, 0.986221958534188, 0.9821526215663486, 0.9782923894855889, 0.9871804871696438, 0.991631194747871, 0.9930968854327746, 0.9837148513450071, 0.7348814635932607, 0.7384396098864101, 0.7417840408531425, 0.7358926595009561, 0.7387415336828644, 0.7384534011989934, 0.7369966597908688, 0.7357105906791934, 0.7411715506732448, 0.3911070031846542, 0.3541681552199455, 0.21550647647415877, 0.21392870704112377, 0.27953341786548724, 0.213202954028742, 0.23750157625619694, 0.22679125177485404, 0.23630056542775524, 0.20693770643012233, 0.23132269004629336, 0.24488948426146184, 0.23094226768770176, 0.1371820159832703, 0.24526729295412453, 0.21592920293743223, 0.2645061460766325, 0.2425377618046508, 0.2410899022141102, 0.2557783615898148, 0.22776586420813272, 0.22492493390373647, 0.26468119803143486, 0.13295962885397983, 0.13057813904415017, 0.1320565965597349, 0.23357084494944635, 9.999999999998899e-05, 0.006067004611460258, 9.999999999998899e-05, 0.15821589198802843, 9.999999999998899e-05, 9.999999999998899e-05, 0.005027544072647605, 9.999999999998899e-05, 0.06166286623961548, 0.05759780298741701, 0.06567864737508722, 0.10483929706490103, 0.062030679811745926, 0.016184135777887243, 0.019382059703266008, 0.12566140191231878, 0.021129562925883194, 0.04857409612596553, 0.1252797293164325, 0.050459534102748504, 0.06785551648283561, 0.08437341033104984, 0.25981658623894544, 0.1579681742337954, 0.2659394214599544, 0.13995013882929852, 0.12842216836833942, 0.22148635254957327, 0.09512950754895266, 0.07874416481252844, 0.42636123098694334, 0.18909109077374564, 0.14344303210430354, 0.15604495053699452, 0.17049278211932883, 0.1071818052863115, 0.565200075689337, 0.5996214985399151, 0.5610611084978381, 0.5945901611347995, 0.5478139687866694, 0.5484067401225983, 0.6088512108610175, 0.5382348791526915, 0.5373752407793322, 0.12518773918356418, 0.11676084844286483, 0.09967031418185923, 0.11600151735189979, 0.15934583908991828, 0.11510685415409228, 0.09215873133253993, 0.14241525113228637, 0.14195491647644654, 0.19961844185740907, 0.28733771659149465, 0.23366103505743863, 0.2658610038891799, 0.4042605173521341, 0.21434648569906944, 0.4769444251847079, 0.41163420257045014, 0.2285534789837247, 0.34205316331459024, 0.26009729122246994, 0.1819767503484544, 0.295933833126205, 0.38837583847058355, 0.2558971590927669, 0.2736971970292692, 0.4440803209984542, 0.09240168980132968, 0.24294028560883585, 0.09934657695272253, 0.3508262575702824, 0.21207296872306636, 0.23779344666502844, 0.07573496897463661, 0.24424947872726366, 0.17179869895970445, 0.213550121208114, 0.2315424078878745, 0.1874869502787282, 0.20146149636421629, 0.2074465369767975, 0.27336820024464703, 0.21678135151940747, 0.2569892039886036, 0.22902958841516907, 0.17771583867164586, 0.16828427763677534, 0.18492087938866486, 0.2272487338101301, 0.17864659418285422, 0.2119880480426003, 0.1986984012776538, 0.19246556797497383, 0.21040982612569725, 0.17916536430735364, 0.18818827813626116, 0.13707267000841206, 0.9018359442822497, 0.1736962714629875, 0.11231022041635119, 0.06187318933645802, 0.1085040232034038, 0.12711435347738775, 0.16917096415715638, 0.896246709032865, 0.11334183910158369, 0.0832326250809794, 0.08325034752314808, 0.21275102202801288, 0.21201846682440129, 0.11335387238335592, 0.16763994834395635, 0.5646689497420756, 0.2377053933624368, 0.43252869229750135, 0.20881107325515358, 0.3862311816550079, 0.24381430439227703, 0.2742037620528234, 0.30193213186589396, 0.2945894295742335, 0.2529073037190712, 0.11637263048560598, 0.13492451490272273, 0.04997837501415292, 0.12106469154675503, 0.09097574057091273, 0.09781704359386545, 0.07320092313031767, 0.06771555059328604, 0.04696077240395513]}, "mutation_prompt": null}
{"id": "a1fa54f2-01ed-41b4-8e72-640152a79807", "solution": "import numpy as np\n\nclass DynamicMutationImprovedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual and population performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors += 0.05 * np.random.normal(0, 1, self.dim)\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationImprovedMetaheuristic", "description": "Enhancing convergence by dynamically adjusting mutation factors based on a combination of individual and population performance.", "configspace": "", "generation": 86, "fitness": 0.2836129291446203, "feedback": "The algorithm DynamicMutationImprovedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8149791047507409, 0.8175226737598116, 0.8141010804981101, 0.8130383518288498, 0.8112941498322432, 0.8136315677501104, 0.8157720789521135, 0.8181317620689679, 0.8124042190345278, 0.044619634692529275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09041962193943431, 9.999999999998899e-05, 0.004605634827295257, 0.05558921226546332, 9.999999999998899e-05, 0.0957584317468958, 0.08414044475115201, 0.0328330934784431, 0.1835606428839094, 0.11586090470378185, 0.11022448035341381, 0.18217089611585346, 0.14460213145867418, 0.09495597665613076, 0.08724691037124443, 0.062420937313896085, 0.09331699915173575, 0.10285993445915864, 0.1205019550711024, 0.15554668897580837, 0.09493921567831853, 0.08989575393539495, 0.09006890787889132, 0.980694129666472, 0.9904574803522898, 0.987249505512533, 0.9781591143744129, 0.9843925378194097, 0.9795019104537578, 0.9963230395888568, 0.983735927674031, 0.9909347805975268, 0.7410397097047149, 0.7376920407055796, 0.741509630270689, 0.7395915756119082, 0.7370285059618698, 0.7391757302237145, 0.7397439652521263, 0.7348223135836693, 0.7388957178930153, 0.1711625008354304, 0.3622498644449802, 0.21613582850261526, 0.3579639515859889, 0.2142711327630864, 0.8745809444915826, 0.23593986263667288, 0.2485303682291896, 0.24913323884336325, 0.273823325678477, 0.22671298973918452, 0.13271122705412142, 0.23226061998428726, 0.12969883975781815, 0.22604722233569663, 0.13335480775667807, 0.13209740482859345, 0.23470683528332748, 0.21585743309952732, 0.21564875004576856, 0.22456409773523978, 0.24174048451062735, 0.24987981303900753, 0.2235114741019173, 0.21510792729850536, 0.2616191337224216, 0.2419430109997619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027962571969250005, 0.04597288039703695, 0.03241942757314786, 0.048361830198490496, 0.04874456984619302, 0.066396687938449, 0.06709188292525381, 0.07572780534367485, 0.0435507593145239, 0.028144573595032862, 0.02296346020176243, 0.10943594501572773, 0.015174534902520409, 0.08050045570593323, 0.10555433010498805, 0.04512590890786172, 0.1474962355897047, 0.08488412069877393, 0.08815158128449696, 0.19813918285548382, 0.0889791199469302, 0.1159560505045869, 0.09064391490405177, 0.10490337031665553, 0.0871001341067682, 0.06572485187850019, 0.19276139958925698, 0.18667224397459792, 0.2859049217775326, 0.2381798010589684, 0.23255216819794744, 0.1209569763888545, 0.5617115462512868, 0.6299141362980037, 0.5524924342500723, 0.550176071685643, 0.5393251532878749, 0.5385736645984824, 0.5169512269390986, 0.532310059843474, 0.5347160754448756, 0.09943024409333323, 0.07206743861382126, 0.1157140150850926, 0.1248588495454307, 0.11084278533325831, 0.09174709412225124, 0.1039739923287587, 0.1099833223579404, 0.08982712800316728, 0.2817477931690774, 0.5872632604497479, 0.48450896419090694, 0.22734724085134062, 0.17679319578961572, 0.16919951825668555, 0.2711699861448986, 0.6726748390912274, 0.18264979624187716, 0.3208732161392144, 0.22667390142312405, 0.15711531813693014, 0.3915354320084823, 0.3524588936478129, 0.37059831741624716, 0.24625597017367085, 0.24648023692622179, 0.38745060632248685, 0.2956359202104514, 0.3682227549539465, 0.27733094083511456, 0.22371386416050276, 0.17031227499954926, 0.14062532667115135, 0.1861239318706931, 0.16788045416979058, 0.0893780495738441, 0.19171941617513943, 0.22168430654845894, 0.18081572534768964, 0.18461065543212385, 0.19452285818954917, 0.2531839035260828, 0.22005741212835095, 0.1931193495251401, 0.2429106345584935, 0.18684848343991567, 0.1819140666179646, 0.16526859385954007, 0.2251034261729563, 0.21181569006611656, 0.1944591435356935, 0.19812746079779142, 0.17417014307657175, 0.18752715640065187, 0.18861272811245233, 0.13689013684818108, 0.9141109093766107, 0.9076564815307766, 0.1123915024072687, 0.15341091280829167, 0.21268502940939094, 0.1271916847187784, 0.16864763868611476, 0.8698720723748482, 0.1132081379977179, 0.08304830464685986, 0.08316253353788272, 0.11330480097151163, 0.21306968598507248, 0.11325756382546637, 0.16937879881710327, 0.4217561957127678, 0.4297834568348694, 0.44136647827843445, 0.3763974789717913, 0.4485045548291994, 0.3626827275940083, 0.4372481219875739, 0.24180054744450963, 0.24085290873241583, 0.3121013233983633, 0.07434448594841547, 0.08839852255854785, 0.08182611835433362, 0.0795827484313737, 0.08179427420952234, 0.1160920265081109, 0.11157624529949539, 0.1056115703968259, 0.07719883641330649]}, "mutation_prompt": null}
{"id": "342c7988-55ef-4647-a0d5-efed698bece0", "solution": "import numpy as np\n\nclass AdaptiveStepDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity and individual performance\n            self.mutation_rate *= 0.99 if candidate_fitness < best_fitness else 0.98\n\n        return best_solution", "name": "AdaptiveStepDynamicMutationMetaheuristic", "description": "Introducing adaptive step size adjustment based on individual performance to accelerate convergence speed.", "configspace": "", "generation": 87, "fitness": 0.2740633069337998, "feedback": "The algorithm AdaptiveStepDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.29.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.9042602241471195, 0.9044713728234688, 0.9049298593036488, 0.9050844763395196, 0.9042546829213749, 0.9067932282707029, 0.9029769767514502, 0.9054511360768334, 0.9072590349128478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1256095480047552, 0.12671478573268746, 0.07608853605296606, 0.13513858678304058, 0.09777986367247982, 0.10204607957272549, 0.10626303741568621, 0.07487901062010605, 0.11114229423980981, 0.08962385141487517, 0.07469582975981814, 0.06571296878220545, 0.09346436653677559, 0.1896895460424557, 0.13417654568272008, 0.06091512592826853, 0.07320604797853503, 0.09332482502710704, 0.9921997828314458, 0.9936350250797732, 0.9859514134812537, 0.9820714236470509, 0.9573946705899254, 0.9887983766139222, 0.9884996481096676, 0.9886555659424989, 0.9833695075185148, 0.8627201289649342, 0.8621643933192109, 0.8634619532937775, 0.8619485294118566, 0.8665926791438947, 0.8631148662766904, 0.866100507042282, 0.8642338004862645, 0.8621773003806582, 0.9400358348745274, 0.14621467580379865, 0.2109033189115166, 0.3872322139053832, 0.21065335279826647, 0.21502920313968898, 0.13143285423264683, 0.18364856981092648, 0.1532630220186848, 0.13253584882819902, 0.27012675246191087, 0.19448045160941274, 0.21277072070874747, 0.21249393315011322, 0.20271244269602984, 0.38328759225310893, 0.13220241115171816, 0.1343406210116742, 0.1303928083510384, 0.1850969039231194, 0.19904773716967383, 0.21851364344139812, 0.2115847153761069, 0.21337585621849653, 0.3474537691893186, 0.2066327074073362, 0.20093281154108777, 0.0020100153553681555, 9.999999999998899e-05, 9.999999999998899e-05, 0.05257199398745582, 0.13881391376430552, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06577644069579314, 0.045274868368780696, 0.04675231873446062, 0.08525354047827294, 0.046673039693004514, 0.057534324900052725, 0.011762905269251833, 0.10902925289926968, 0.012520188374537944, 0.02933134674833182, 0.18323749935702427, 0.18342996725344984, 0.35549957134995425, 0.0821554962406088, 0.08089239310601348, 0.16818174369404892, 0.1630257973901369, 0.11325117690435671, 0.07867191601991874, 0.1499334400698985, 0.08019185298611553, 0.21487972360472174, 0.1660376085210552, 0.053993330642294834, 0.08504923484178362, 0.27333896134863245, 0.22496788604326734, 0.1256706378656467, 0.5275242858635246, 0.5255802956694721, 0.5844859014811479, 0.5888982967122806, 0.553091426954002, 0.5429208700079506, 0.5575631222933619, 0.560240833113028, 0.5364186434803409, 0.10212853150388967, 0.08058739218622701, 0.11850885020944679, 0.11169978391467361, 0.12653541462143658, 0.07090937586259038, 0.12643733286898928, 0.079993340008228, 0.1467705003103179, 0.30296720634986585, 0.15613365121103395, 0.2066042338158719, 0.3623656078617431, 0.16239651724181348, 0.1476431614638537, 0.11402830461535829, 0.1654657894173608, 0.29209541140342876, 0.22275835936941835, 0.11277007771959036, 0.10036460029715288, 0.28420493227314014, 0.4147216001033103, 0.20219561704213418, 0.20652142435383902, 0.11261473697141322, 0.37233571364714757, 0.2950435656650797, 0.2731865775197664, 0.1973087281676258, 0.1125161152132258, 0.2459074811152866, 0.08649330046798609, 0.14189350355199837, 0.16200340886273223, 0.09734186519752552, 0.1965154494338791, 0.2582546921189379, 0.21852493798095218, 0.16520677838328157, 0.24019582234053727, 0.27091116102509605, 0.21140058199254974, 0.15490476832000855, 0.2004777810489633, 0.2189687305758623, 0.21162711138986312, 0.16571733359259777, 0.1655692962649168, 0.17390994357049772, 0.1659605383091708, 0.20791592811222936, 0.20127437759482525, 0.21337335214752284, 0.10877953423961406, 0.13749992480244677, 0.10513895533456707, 0.9488576953363415, 0.11290947598002843, 0.06200966140056685, 0.10862378693913566, 0.12738349673806237, 0.16616656113983097, 0.9413819496456248, 0.11303118408622181, 0.08333606914880731, 0.08322055562125374, 0.21392696575617598, 0.04425104414803516, 0.113651586693305, 0.1697965230961157, 0.41864944772320123, 0.5887805766549044, 0.26678990095154453, 0.2204939315841803, 0.22037511106820806, 0.3063225277332875, 0.2907665116014789, 0.27560148238742843, 0.2787134117436363, 0.2041725667921418, 0.09728365447138387, 0.11303891070478078, 0.07246191718866446, 0.05400190590267062, 0.10813798616346193, 0.13933566886863902, 0.1142474079464213, 0.09521763790497384, 0.09988592660297113]}, "mutation_prompt": null}
{"id": "1222d437-d461-4df8-9e01-c47ad3c7a9ce", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "eb7bb2ca-ad99-4a43-af5a-093ab10712e2", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            step_size = 1.0\n            for _ in range(self.steps):\n                candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                \n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n                # Adapt step size dynamically based on performance improvement\n                step_size *= 1.01 if candidate_fitness < best_fitness else 0.99\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Enhancing convergence speed by introducing a dynamic adaptive step size control mechanism for mutation.", "configspace": "", "generation": 89, "fitness": 0.16133927585441937, "feedback": "The algorithm DynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.24141018445500606, 0.25944716497079123, 0.28921967713394425, 0.25634388144727505, 0.2708322049864327, 0.2791063705208885, 0.23280228227638478, 0.2654231884347438, 0.26354156841658494, 9.999999999998899e-05, 9.999999999998899e-05, 0.005487553247352062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06957127044007061, 0.09311046603340833, 0.07156833086634884, 0.07842166879435042, 0.08241675064432807, 0.07990576802563698, 0.07166072381384725, 0.08137625259146242, 0.08254176258925039, 0.06574865988849432, 0.07507735087606837, 0.060226163660021315, 0.06003051426360129, 0.06643559682517841, 0.07109894382460191, 0.07407587064997856, 0.07541869119017897, 0.06708931662369577, 0.9926191142127322, 0.9936974894498493, 0.9878833493002876, 0.9848379855230366, 0.9813063379649598, 0.9889678834301043, 0.9917615035534976, 0.9931202526189538, 0.9850684051720087, 0.14124531445596167, 0.13841801238322538, 0.15456961419631643, 0.1761532401541761, 0.1907858796978893, 0.17291330284285866, 0.15072541580750898, 0.14453643698983176, 0.15786818188392482, 0.20215356087958192, 0.1894789413988912, 0.20979833349076094, 0.24690246329561794, 0.1903001849669621, 0.218170330265817, 0.19001306612716962, 0.17481802656663525, 0.18608446284063684, 0.08257720406313529, 0.09523230428282425, 0.06695697225309738, 0.09070732125197922, 0.07874042592767605, 0.09744294132458342, 0.06367257801408199, 0.0806268854209442, 0.07856258271549521, 0.07694000717903005, 0.07617232228091286, 0.07688751692311413, 0.085645688737234, 0.06873896590031803, 0.07059200862989601, 0.06596697923553729, 0.0973267835701267, 0.08499829871610165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07397383487770492, 0.08699206863852182, 0.17374211271166207, 0.11962316025635389, 0.11529977703517413, 0.02005794811711259, 0.12540838922933895, 0.03598561903499886, 0.06715720549262205, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022447373216399336, 0.021845290291031993, 0.018225423027817822, 0.018611116382358017, 0.021129063254649583, 0.013602117017551651, 0.015880366498372545, 0.031230501273334488, 0.0288009633901809, 0.2832541451267465, 0.25565416182442746, 0.2611396416473857, 0.2650522415623313, 0.3054383643437746, 0.27115131554208594, 0.27861542046841437, 0.2715741739075823, 0.27892114623565367, 0.09314281630949484, 0.09476278741358946, 0.07649880756526128, 0.08291977831066966, 0.08453028438768384, 0.07840926676131477, 0.0696217809603662, 0.07944649753293909, 0.0795613670717028, 0.14810797442561785, 0.13559548862691861, 0.12704643943482496, 0.14923115594365832, 0.16638218608749789, 0.12800593188007736, 0.12421839914518351, 0.1350207045789359, 0.1392388972901215, 0.21189258443219705, 0.20204418798951007, 0.23881010501453415, 0.2062473536328141, 0.207565981337966, 0.2026151218184996, 0.19517979082230885, 0.2004485431062103, 0.20939785741399508, 0.15905794276174512, 0.15270077572783025, 0.15451599451400766, 0.14708642422954743, 0.15809182247521714, 0.15181220811935658, 0.1399738827498217, 0.13614164946813834, 0.15153147807293588, 0.18465297935085057, 0.22850193835318522, 0.19378011495221303, 0.21306106622689425, 0.19049519314958263, 0.20696041334741389, 0.21140559000020653, 0.22863605550453414, 0.19422336484060143, 0.18789570582388482, 0.1868882068720754, 0.17260156673036586, 0.17109739409051306, 0.1804818616604298, 0.1704275637902105, 0.1704212588052909, 0.17354270837448527, 0.1788966102276487, 0.1059598777758991, 0.1285941138598773, 0.27692811117008664, 0.3408774624015063, 0.17588932224117393, 0.1694894075802693, 0.12079096893064556, 0.1217613513261665, 0.16607431722943022, 0.28560595171933667, 0.11041422655993538, 0.08054637169934287, 0.07815567895563547, 0.1919098949715068, 0.19368332328405147, 0.1092786967661461, 0.1620386242177707, 0.25327747807080436, 0.2045307502844086, 0.1879244788589267, 0.1897713357274029, 0.19232605567378647, 0.19966746277786873, 0.189051531907948, 0.17756503815247793, 0.16972972762577843, 0.19164510721564287, 0.07719001183553786, 0.06699767130468304, 0.07321995957218186, 0.08500267092419689, 0.07108791784737256, 0.07871166812088193, 0.07288042656550242, 0.0680750984994033, 0.07702163959932384]}, "mutation_prompt": null}
{"id": "e085653e-851a-460e-9ca7-b33fa9267f15", "solution": "import numpy as np\n\nclass FasterDynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                    # Update mutation factors based on individual performance\n                    self.mutation_factors = self.mutation_factors * 0.9 + 0.1 * (candidate_solution - best_solution)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "FasterDynamicMutationMultiStepMetaheuristic", "description": "Optimizing the mutation factors update strategy by incorporating a self-adaptive mechanism based on individual performance for faster convergence.", "configspace": "", "generation": 90, "fitness": 0.08988261060221424, "feedback": "The algorithm FasterDynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.11.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.9734253707019939, 0.12264582475944641, 0.21899992695452286, 0.0691649217156648, 0.06145094002245788, 0.10570703284906702, 0.13163249711298053, 0.26865530891010814, 0.08557772903519145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09055313606954418, 9.999999999998899e-05, 0.008127998304704342, 0.0633228024763306, 9.999999999998899e-05, 0.03554589236677674, 0.029842955212291744, 0.011432464093089068, 0.017463872581974127, 0.08761508438724064, 9.999999999998899e-05, 0.012555620105235588, 0.05355411089444828, 9.999999999998899e-05, 0.017380424203834455, 0.002503337442204656, 9.999999999998899e-05, 0.017487240594295184, 0.0683898154043252, 0.0273234965195972, 0.018872788854145672, 0.03975074932164846, 0.045291851400906635, 0.04011836931433188, 0.0385065761437261, 0.04595560577713731, 0.03997146497946891, 0.21308460629065507, 9.999999999998899e-05, 9.999999999998899e-05, 0.04754111709325737, 0.09014751924624909, 0.01854425435911866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08876796496946104, 0.05718318224857799, 0.037352239265932785, 0.3972602489101631, 9.999999999998899e-05, 9.999999999998899e-05, 0.07338578589529565, 9.999999999998899e-05, 9.999999999998899e-05, 0.28640954342601066, 9.999999999998899e-05, 9.999999999998899e-05, 0.31323686176482757, 9.999999999998899e-05, 9.999999999998899e-05, 0.28120419358753446, 9.999999999998899e-05, 9.999999999998899e-05, 0.16098212323124594, 9.999999999998899e-05, 0.11989523782609579, 0.17277639028396063, 9.999999999998899e-05, 9.999999999998899e-05, 0.29715486289168636, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0652603768497696, 0.05652784656709697, 0.15593016295806406, 0.06007046167944552, 9.999999999998899e-05, 0.00890952804827283, 0.1306596807342918, 0.01852428173799181, 9.999999999998899e-05, 9.999999999998899e-05, 0.06628370612129753, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1534808407217495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09264751720473419, 0.17599275548876525, 0.09915119898882918, 0.19287741553706106, 0.12044036075869335, 0.10167873861594146, 0.057979156522567576, 0.1551301021639594, 0.17033869603646656, 0.14553199111031245, 0.017480679584128356, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011518688792883092, 0.04540711111754814, 0.06500182181531511, 0.05666109850955747, 0.04413779007036578, 0.02001995398985379, 0.20560316949656088, 0.17137031894682753, 0.13699634253428472, 0.22276816084305984, 0.23907274862862193, 0.184375546265093, 0.218393212901568, 0.23810010229038636, 0.20160152006685017, 0.15529811812994976, 0.11577189885955996, 0.10681671450042596, 0.13692106744696153, 0.10079632754878276, 0.1083912559317789, 0.2536656558093391, 0.10038430857318958, 0.09453857886236905, 0.09555145499677331, 0.04988458579624344, 0.038830872493693436, 0.18865507546668292, 0.030249475619838595, 0.09302735161821307, 0.14819770641571517, 0.07843472816785979, 0.02209873870518353, 0.20024596564164399, 0.15705153583268183, 0.19123763515650782, 0.21342397734099106, 0.15109806066386444, 0.1383404513512393, 0.24355955568718424, 0.10720004320416887, 0.13473119916675935, 0.17075735677505977, 9.999999999998899e-05, 0.1251843857451318, 0.18674295595616675, 0.20542347262292382, 0.1604803576622893, 0.16433812417761295, 9.999999999998899e-05, 9.999999999998899e-05, 0.1901790049179567, 0.13802592071987552, 0.06753812300137907, 0.17434671659421053, 0.0851705312329506, 0.058997367536697154, 0.1089385589089008, 0.12730900191968264, 0.12746616110332265, 0.6122819340002055, 0.11059857855637223, 0.0570765865936157, 0.06717993414929135, 0.14562689151697905, 0.06287654459164149, 0.11374296194381606, 0.059383703852893266, 0.16989930066266445, 0.21462566296165875, 0.28985406000316694, 0.4870084357286568, 0.33625330393514685, 0.23111010220736872, 0.23246706639723302, 0.2033920749912027, 0.21948609119004792, 0.2121864165469578, 0.0331632573957622, 0.06937097330079123, 0.03501341941996783, 0.029206242490711354, 0.01544613197720901, 0.08178001775638954, 0.08982460267427228, 0.0193043939519415, 0.06537721983717126]}, "mutation_prompt": null}
{"id": "c8271d4b-06c7-4a4a-a9f0-9552c92e1184", "solution": "import numpy as np\n\nclass FastDynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                    # Update mutation factors based on individual performance\n                    self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                    self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99 if candidate_fitness < best_fitness else 1.01\n\n        return best_solution", "name": "FastDynamicMutationMultiStepMetaheuristic", "description": "Improving convergence speed by adapting a self-adaptive mechanism for mutation rate and factors based on individual and population performance.", "configspace": "", "generation": 91, "fitness": 0.1284008145086779, "feedback": "The algorithm FastDynamicMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.20055458082861477, 0.1877740708534984, 0.2010371498304857, 0.1884188681535457, 0.17303757480882231, 0.21104776955311622, 0.2859060172483747, 0.19433124027676663, 0.2195876890368983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05319106838051246, 0.05854470156521363, 0.058622245060066414, 0.05869855539086111, 0.05178318879125687, 0.060400672182534754, 0.03953475553388819, 0.03670873846248546, 0.09521271750742233, 0.038661302338470316, 0.030615047367606674, 0.05138667571823863, 0.030951865355833608, 0.029497829158802058, 0.02589471723701664, 0.023823827650838347, 0.04539613243865348, 0.03821030428240979, 0.9925352444957661, 0.9936536486993632, 0.9879390916840542, 0.985084501733794, 0.9802462088108764, 0.9892270407094761, 0.9926500434908917, 0.9931698596754346, 0.9852372736127023, 0.12494245467754239, 0.06725970696546502, 0.06888718138653149, 0.11915540672379599, 0.12448844101364065, 0.08939283921712582, 0.0893333914330724, 0.08077931072926525, 0.07815667139395899, 0.15990999222991908, 0.14480160445869894, 0.14923751932008344, 0.13288587433501453, 0.15815423605393097, 0.15298393333873905, 0.12182204553344478, 0.17058757370935784, 0.14812547835015044, 9.999999999998899e-05, 0.03820615011900241, 9.999999999998899e-05, 0.041068002951926474, 0.03597273131238876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05267803571033092, 0.008420816975132639, 0.010770394911814751, 0.05510245879818054, 9.999999999998899e-05, 0.0020271197943447783, 9.999999999998899e-05, 0.012133824149536343, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02641515170163622, 0.04477815935130458, 0.04691370313991372, 0.00817779181771805, 0.014092364963289361, 0.0075527193836912865, 0.006492179776165563, 0.020512786255543647, 0.012057561237122316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0052394853480380865, 0.22986955864953884, 0.222429481994175, 0.20174288292459375, 0.25112970595484496, 0.19818184723470544, 0.21056856041447902, 0.24485316041267502, 0.2347199717942613, 0.19568733114120196, 0.04078100157636544, 0.044965363182154605, 0.06277218695056563, 0.05196685018786118, 0.052737148729958605, 0.04223714824960734, 0.046713741491490324, 0.058790114097688084, 0.04400919391550728, 0.14391659291044856, 0.16098982606742196, 0.11526935842221697, 0.1138518224974101, 0.13871008343002345, 0.13649101787900075, 0.13658464779903756, 0.13152062088452598, 0.11884468329875875, 0.16568808398800616, 0.1410893091319898, 0.13147893226569196, 0.15583759268026098, 0.18424455632447956, 0.1771278928064094, 0.18603078036230358, 0.16360607420608975, 0.1644956413707399, 0.1077582796786859, 0.10677402416010262, 0.14321814366357388, 0.10558636980324931, 0.11822248683463699, 0.10642487307726767, 0.11101753473198295, 0.11023886629768731, 0.1005806546511685, 0.14619579164702923, 0.1495192043781841, 0.15099248250301556, 0.13780500276252683, 0.16932116578593648, 0.15321880073978733, 0.1453889581606127, 0.16512572269436254, 0.1952430324455363, 0.14994370160104686, 0.15156027612262568, 0.16019295774136066, 0.15907654132432003, 0.15270956018379223, 0.16810128496349785, 0.14511727853291245, 0.15118519829280086, 0.14130491850983073, 0.1687163225826087, 0.11483134730240363, 0.13568553362365599, 0.20436432746103161, 0.11156921002527564, 0.1122001980975772, 0.11564361235857779, 0.11943657377737693, 0.15546798311238652, 0.3535992820282249, 0.10899254812496106, 0.1035824250931815, 0.10749784951525476, 0.13997279925898898, 0.1269016924109212, 0.10864947185672336, 0.11690140303935659, 0.1688823126697755, 0.18240770574971343, 0.17169970908256438, 0.18056163165956862, 0.1780067454532509, 0.17652964177859665, 0.17004590498113503, 0.16696963940422305, 0.1776758157650098, 0.1718138746052129, 0.04180890291047268, 0.04001717851493136, 0.039735636819494546, 0.055357135121793855, 0.04361060260071048, 0.0713478108516229, 0.062439937234072596, 0.047865701088578905, 0.05954427490976211]}, "mutation_prompt": null}
{"id": "f2be83be-5aab-4e7f-baec-c9f5e42d2bba", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "3571ff00-d0d3-4d49-a159-0ea3aead046b", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "ee37f44d-5685-4df3-b84a-a9208e1e436a", "solution": "import numpy as np\n\nclass AdaptiveMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.base_mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        mutation_rate = self.base_mutation_rate\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                    mutation_rate *= 1.1  # Increase mutation rate upon fitness improvement\n                else:\n                    mutation_rate *= 0.9  # Decrease mutation rate if no improvement\n\n                mutation_rate = np.clip(mutation_rate, 0.1, 2.0)  # Clip mutation rate within bounds\n\n            mutation_rate *= 0.99  # Update mutation rate at the end of each iteration\n\n        return best_solution", "name": "AdaptiveMutationMetaheuristic", "description": "Utilizing an adaptive mutation strategy with a variable mutation rate based on fitness improvements to accelerate convergence speed while maintaining diversity.", "configspace": "", "generation": 94, "fitness": 0.17592698354979516, "feedback": "The algorithm AdaptiveMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.5431829022299686, 0.5237966629657977, 0.5070259033368384, 0.49844897969438384, 0.5034018692716122, 0.5265817550074056, 0.5112236458379069, 0.5157700956884698, 0.5214578299722247, 0.006648508842284739, 9.999999999998899e-05, 9.999999999998899e-05, 0.014186159035681656, 0.062451237172102436, 9.999999999998899e-05, 9.999999999998899e-05, 0.03814544711269496, 9.999999999998899e-05, 0.025628045959103618, 9.999999999998899e-05, 9.999999999998899e-05, 0.011982587870147499, 0.029975126008951136, 0.00290497683445734, 0.028900639666337935, 9.999999999998899e-05, 0.015479680318417066, 0.021241605258092378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01731207529808254, 9.999999999998899e-05, 0.955158367632728, 0.8108259619869688, 0.8327546763626079, 0.8322493505060211, 0.8055446433506418, 0.8351874937307155, 0.8565331162875418, 0.8554070161913327, 0.9028910190263338, 0.38292066454834983, 0.3581723413812823, 0.3522966143475281, 0.3940632374973192, 0.3758919591155363, 0.41718949017377893, 0.3904258728526184, 0.37911678729724785, 0.37042846877993785, 0.09028689877035578, 0.05812381130877642, 0.01182347249392146, 0.917758407880145, 0.11235842808172147, 9.999999999998899e-05, 0.0583619757781253, 9.999999999998899e-05, 9.999999999998899e-05, 0.21472341420042862, 0.13556685830717274, 0.22340846014035842, 0.2520728529636087, 0.2213603034174324, 0.218276045551271, 0.22989759729454262, 0.20516557694883875, 0.23654814937033897, 0.2109878157377746, 0.2085400238126761, 0.13284976292772066, 0.24084133281882636, 0.2477512973144883, 0.21464403529654796, 0.23563701017502559, 0.27781104194326744, 0.19012970335071233, 0.061886374756705664, 0.010687106332797902, 0.11373057475642512, 0.12467377732314, 0.01498987402456442, 0.09291964753018889, 0.0020642061019181535, 0.00497899838114102, 0.07024355282231842, 0.06677859648294904, 0.10197507638485259, 0.21097498651105084, 0.07207804876314117, 0.01721756154788323, 0.023698145223693845, 0.18097261507358364, 0.04771792857542001, 0.0909123350751524, 0.004834760986242359, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01061396061073605, 9.999999999998899e-05, 9.999999999998899e-05, 0.06739128567378516, 0.0762148737940741, 0.1478487149497818, 0.14816250630221728, 0.11783066288040123, 0.12817958515007555, 0.1001433416068408, 0.1031441224461267, 0.09389841795184894, 0.5023081552402384, 0.4761679381938757, 0.4821691177703017, 0.48447803911060805, 0.48112515266335143, 0.4914271893660127, 0.469956782900555, 0.4867861148800118, 0.4748610153660575, 0.010150324773625319, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013542912780843075, 9.999999999998899e-05, 0.019089450568124056, 9.999999999998899e-05, 0.2091824945830072, 0.10723320836132699, 0.20513165785372478, 0.06077036576277772, 0.06294062604630524, 0.13316261534443452, 0.05998602646924467, 0.13725947028031693, 0.09087683765368404, 0.11695605671728915, 0.10044078480752905, 0.10466649250040139, 0.13379700204869915, 0.11009917338761155, 0.10964527553700665, 0.14035250786041142, 0.08622238308961261, 0.08922243063647706, 0.045040930078042996, 0.05107440595625867, 0.02735618295738984, 0.10927555497747632, 0.027186699494533784, 0.07429536323956687, 0.07409435986710011, 0.016248733911426116, 0.013842670915457878, 0.177713709568038, 0.10754175357435747, 0.10953353794269827, 0.20972321518648862, 0.12103211874504105, 0.11158953376607939, 0.18629617860046777, 0.1349156921264848, 0.11452804889542878, 0.15365863408792868, 0.18021507959544414, 0.1614387701089548, 0.1739722740001478, 0.18743244965812966, 0.1576877099585683, 0.15555786994363985, 0.18265161172218625, 0.1710479242191978, 0.19004160082619148, 0.13791884635555818, 0.07157641685811633, 0.17433962216574383, 0.11280799588148016, 0.06201644058644429, 0.10888229871604926, 0.12741807694185336, 0.16871027280062956, 0.7387296046064606, 0.11366822410491895, 0.08343978500471516, 0.08355474885889358, 0.214325060556543, 0.21340521399586154, 0.11379300927496949, 0.05938168561240875, 0.05177374827842873, 0.1838067543007318, 0.20763566142437861, 0.1971410233587908, 0.18235076146797358, 0.19685504628560924, 0.19915848961862337, 0.20184788550434707, 0.18292440455912418, 0.19835068976437964, 0.02859416024025563, 0.035456638229573345, 0.032256565320320396, 0.01599164838848033, 0.02337435140040456, 0.026245797917314073, 0.026765722259109115, 0.018282433405616194, 0.04486041788287254]}, "mutation_prompt": null}
{"id": "2e199869-fbd2-46fa-bab8-2ac20f49b315", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "a86f5f5f-616d-4f02-8b84-985e75d85066", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual success rates\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.98  # Adjusted for faster convergence\n\n        return best_solution", "name": "EnhancedDynamicMutationMetaheuristic", "description": "Implementing a self-adaptive mutation strategy based on individual success rates to enhance convergence speed.", "configspace": "", "generation": 96, "fitness": 0.2740633069337998, "feedback": "The algorithm EnhancedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.29.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.9042602241471195, 0.9044713728234688, 0.9049298593036488, 0.9050844763395196, 0.9042546829213749, 0.9067932282707029, 0.9029769767514502, 0.9054511360768334, 0.9072590349128478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1256095480047552, 0.12671478573268746, 0.07608853605296606, 0.13513858678304058, 0.09777986367247982, 0.10204607957272549, 0.10626303741568621, 0.07487901062010605, 0.11114229423980981, 0.08962385141487517, 0.07469582975981814, 0.06571296878220545, 0.09346436653677559, 0.1896895460424557, 0.13417654568272008, 0.06091512592826853, 0.07320604797853503, 0.09332482502710704, 0.9921997828314458, 0.9936350250797732, 0.9859514134812537, 0.9820714236470509, 0.9573946705899254, 0.9887983766139222, 0.9884996481096676, 0.9886555659424989, 0.9833695075185148, 0.8627201289649342, 0.8621643933192109, 0.8634619532937775, 0.8619485294118566, 0.8665926791438947, 0.8631148662766904, 0.866100507042282, 0.8642338004862645, 0.8621773003806582, 0.9400358348745274, 0.14621467580379865, 0.2109033189115166, 0.3872322139053832, 0.21065335279826647, 0.21502920313968898, 0.13143285423264683, 0.18364856981092648, 0.1532630220186848, 0.13253584882819902, 0.27012675246191087, 0.19448045160941274, 0.21277072070874747, 0.21249393315011322, 0.20271244269602984, 0.38328759225310893, 0.13220241115171816, 0.1343406210116742, 0.1303928083510384, 0.1850969039231194, 0.19904773716967383, 0.21851364344139812, 0.2115847153761069, 0.21337585621849653, 0.3474537691893186, 0.2066327074073362, 0.20093281154108777, 0.0020100153553681555, 9.999999999998899e-05, 9.999999999998899e-05, 0.05257199398745582, 0.13881391376430552, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06577644069579314, 0.045274868368780696, 0.04675231873446062, 0.08525354047827294, 0.046673039693004514, 0.057534324900052725, 0.011762905269251833, 0.10902925289926968, 0.012520188374537944, 0.02933134674833182, 0.18323749935702427, 0.18342996725344984, 0.35549957134995425, 0.0821554962406088, 0.08089239310601348, 0.16818174369404892, 0.1630257973901369, 0.11325117690435671, 0.07867191601991874, 0.1499334400698985, 0.08019185298611553, 0.21487972360472174, 0.1660376085210552, 0.053993330642294834, 0.08504923484178362, 0.27333896134863245, 0.22496788604326734, 0.1256706378656467, 0.5275242858635246, 0.5255802956694721, 0.5844859014811479, 0.5888982967122806, 0.553091426954002, 0.5429208700079506, 0.5575631222933619, 0.560240833113028, 0.5364186434803409, 0.10212853150388967, 0.08058739218622701, 0.11850885020944679, 0.11169978391467361, 0.12653541462143658, 0.07090937586259038, 0.12643733286898928, 0.079993340008228, 0.1467705003103179, 0.30296720634986585, 0.15613365121103395, 0.2066042338158719, 0.3623656078617431, 0.16239651724181348, 0.1476431614638537, 0.11402830461535829, 0.1654657894173608, 0.29209541140342876, 0.22275835936941835, 0.11277007771959036, 0.10036460029715288, 0.28420493227314014, 0.4147216001033103, 0.20219561704213418, 0.20652142435383902, 0.11261473697141322, 0.37233571364714757, 0.2950435656650797, 0.2731865775197664, 0.1973087281676258, 0.1125161152132258, 0.2459074811152866, 0.08649330046798609, 0.14189350355199837, 0.16200340886273223, 0.09734186519752552, 0.1965154494338791, 0.2582546921189379, 0.21852493798095218, 0.16520677838328157, 0.24019582234053727, 0.27091116102509605, 0.21140058199254974, 0.15490476832000855, 0.2004777810489633, 0.2189687305758623, 0.21162711138986312, 0.16571733359259777, 0.1655692962649168, 0.17390994357049772, 0.1659605383091708, 0.20791592811222936, 0.20127437759482525, 0.21337335214752284, 0.10877953423961406, 0.13749992480244677, 0.10513895533456707, 0.9488576953363415, 0.11290947598002843, 0.06200966140056685, 0.10862378693913566, 0.12738349673806237, 0.16616656113983097, 0.9413819496456248, 0.11303118408622181, 0.08333606914880731, 0.08322055562125374, 0.21392696575617598, 0.04425104414803516, 0.113651586693305, 0.1697965230961157, 0.41864944772320123, 0.5887805766549044, 0.26678990095154453, 0.2204939315841803, 0.22037511106820806, 0.3063225277332875, 0.2907665116014789, 0.27560148238742843, 0.2787134117436363, 0.2041725667921418, 0.09728365447138387, 0.11303891070478078, 0.07246191718866446, 0.05400190590267062, 0.10813798616346193, 0.13933566886863902, 0.1142474079464213, 0.09521763790497384, 0.09988592660297113]}, "mutation_prompt": null}
{"id": "d5d2f39b-b8fc-4ad7-bae9-a025a8bb6acf", "solution": "import numpy as np\n\nclass AdaptiveMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on fitness landscape\n            self.mutation_rate *= 0.99 if candidate_fitness < best_fitness else 1.01\n\n        return best_solution", "name": "AdaptiveMutationMultiStepMetaheuristic", "description": "Incorporating adaptive population diversity control by dynamically adjusting the mutation rate based on the fitness landscape to expedite convergence speed.", "configspace": "", "generation": 97, "fitness": 0.12648580484106858, "feedback": "The algorithm AdaptiveMutationMultiStepMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.21232772770431851, 0.24556641846996752, 0.22427608345341177, 0.18658184385586207, 0.19096621043796003, 0.20133746107590145, 0.1976801469824674, 0.20587627411745957, 0.18485967850168672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043461008548899005, 0.04636758032472721, 0.045801263241594614, 0.0471029951364359, 0.0474646250400812, 0.046493479740938204, 0.03754134445531232, 0.0543236920088318, 0.05412465901113228, 0.037388912758354986, 0.03451281316397692, 0.03320670694794314, 0.04113832384510241, 0.024345375771764877, 0.03142497310413983, 0.038873576857861525, 0.04490366636316834, 0.02789493749816052, 0.9966780539027794, 0.9944512679644345, 0.9879453606709716, 0.984816864055522, 0.9803663150729893, 0.9937363393799108, 0.9919756899015566, 0.9931498377814184, 0.9852096681679693, 0.10744414268748803, 0.09359105245790711, 0.061928155040634536, 0.07074897050393614, 0.11845291812913183, 0.10956528645140173, 0.09189485786725604, 0.09153833104544684, 0.06423371318674931, 0.11869227752089972, 0.1335788831323954, 0.11755531281875897, 0.11095223347723726, 0.1443414301635828, 0.13524924545256822, 0.11482413812760639, 0.1534656291260208, 0.12401061858301221, 9.999999999998899e-05, 9.999999999998899e-05, 0.06980718465352043, 0.011830445736875084, 0.000895507725651834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05337144943308447, 9.999999999998899e-05, 0.01855982942869072, 0.014848811714537669, 0.02500408558945222, 0.011765775773353249, 9.999999999998899e-05, 0.007409196565673293, 0.09051497380795448, 0.004992288531967093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045912792616515596, 9.999999999998899e-05, 0.0392910034990166, 0.02978564569232056, 0.06011259303156058, 0.005966582834315504, 0.04905430455740989, 0.006366292474264679, 0.006572476991893561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013477837962154071, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19647135443489028, 0.22563420987721894, 0.20884626999366274, 0.2424392380354108, 0.21545864945937998, 0.20521118610219502, 0.24721787253404814, 0.2255276024374805, 0.21782997480154165, 0.05395017380990663, 0.04489868431132382, 0.045665617805157654, 0.04996086615991879, 0.05022412748164551, 0.042568148418825835, 0.04906274264764765, 0.05362965296781497, 0.08631723003001257, 0.13530635701432314, 0.11846867324470589, 0.1384633571363746, 0.12868780237834254, 0.162201991448101, 0.1053492467292666, 0.1494389484213836, 0.10218240030506609, 0.11071717730588748, 0.15435471503817955, 0.1565046812126517, 0.13894257894314066, 0.16580289145764693, 0.1721097594732095, 0.13891497750776538, 0.17480419774075784, 0.17683354712369403, 0.15432338740574092, 0.07352143163418456, 0.11875068242556841, 0.10749436584147665, 0.10767821226175889, 0.12427584127372415, 0.12707554746430683, 0.10786979946823227, 0.10075539857295657, 0.10181442362633664, 0.18022864842996855, 0.15596577373775378, 0.1344895561268029, 0.14947167287204866, 0.1697977494673758, 0.12896362880820655, 0.18439645707791474, 0.15346269784419697, 0.14723598408268646, 0.15268002326877317, 0.17735749036269877, 0.14948898203932282, 0.14447908447885716, 0.14757580156645922, 0.14747704510916482, 0.15237808684211873, 0.15321601929196127, 0.1605481713725705, 0.15332857892020713, 0.1328427962322618, 0.163929702152237, 0.135704732095962, 0.1629166651053623, 0.10980756082867915, 0.12083096994559439, 0.11373162885432542, 0.13253736712590802, 0.22309771628850417, 0.10904866130417845, 0.11471648897123321, 0.10924142298428308, 0.1342529530034271, 0.1258811305952695, 0.10706767467189837, 0.14049700537564624, 0.13145436539092092, 0.17035964956453375, 0.17751590901245362, 0.17240802314964698, 0.177643016014012, 0.18735106814323643, 0.17975601561057553, 0.16285415920900448, 0.1887493486931905, 0.16581666718172294, 0.05506249438984723, 0.04604852620063171, 0.06185960619622144, 0.0566306612687949, 0.049196559347172486, 0.05578488786062774, 0.04816584621620257, 0.047334459157845066, 0.0686632123601949]}, "mutation_prompt": null}
{"id": "30709ff8-7ed5-4dfc-b199-6e5b44b93407", "solution": "import numpy as np\n\nclass DynamicMutationMultiStepMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                # Update mutation factors based on individual performance\n                self.mutation_factors *= 0.9 if candidate_fitness < best_fitness else 1.1\n                self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n            # Update mutation rate based on population diversity\n            self.mutation_rate *= 0.99\n\n        return best_solution", "name": "DynamicMutationMultiStepMetaheuristic", "description": "Utilizing a dynamic mutation strategy combined with a multi-step mutation approach to enhance convergence speed while maintaining algorithmic differences.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.8113063498050695, 0.8116002104829191, 0.8131508316200386, 0.8155710543627532, 0.8118496566897859, 0.8170521080409787, 0.8132954818407594, 0.8186921100169401, 0.813219654131011, 0.08121366167048405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012573064059243744, 9.999999999998899e-05, 0.1100060889582295, 0.11443446159976889, 0.05986066232147791, 0.09622823680853176, 0.13058339978305955, 0.11678757855328115, 0.10953113071203135, 0.12487263890128397, 0.10199103456965442, 0.09341580325875454, 0.12913493677911103, 0.15471785773152946, 0.098160621083767, 0.0947729746854491, 0.0922092467420087, 0.09476676528196826, 0.09437333347050303, 0.10319791276285162, 0.9923089937065398, 0.9936515046543983, 0.9862303029092295, 0.9822238404561379, 0.9780373787300575, 0.988898255750934, 0.9916345438739307, 0.9888533940757253, 0.983557350421538, 0.737055371424552, 0.7366277637012248, 0.7436231595300882, 0.7383348853166428, 0.7394366570890079, 0.7449400702619104, 0.7373982058445383, 0.745526951172525, 0.7357765295453402, 0.22675137271318557, 0.2293144665849307, 0.20734392786502476, 0.8753583765809603, 0.37578428814992326, 0.37825786262445926, 0.17778000323240972, 0.23689938565846735, 0.3779456235241523, 0.23920964084403762, 0.1317183741579856, 0.24934514846775213, 0.2119806974580224, 0.24437511494411035, 0.23606128499544865, 0.23468430193361434, 0.2199467836806206, 0.24266709108975215, 0.23587802408471814, 0.1897483357265426, 0.45054848676132775, 0.2394052612486547, 0.37000983824824396, 0.2925691927112839, 0.32392096686252214, 0.24300739623171963, 0.23606951987538294, 0.05686435387692634, 0.05098449429838514, 0.012034566894574716, 0.01022873428112292, 0.013157633059324714, 0.03502523666419144, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950412011351314, 0.05042984089098679, 0.06224048324271758, 0.08538122650748059, 0.0595078560100899, 0.03298446342545047, 0.017751720879966015, 0.12246072044460776, 0.009280949661411464, 0.03141908757313816, 0.13232781876459954, 0.16909396912883545, 0.08387766045450318, 0.07666382809037586, 0.1096485166072041, 0.282074926546782, 0.16545372455649376, 0.1168352945894876, 0.06779857291309854, 0.07761499440744135, 0.1012165739756472, 0.25413428927048365, 0.15994996909986803, 0.14756420352884236, 0.2275241557609522, 0.22187209961532495, 0.10096489756340687, 0.23070078402938654, 0.5597965284675761, 0.5468778943962999, 0.5548216701767996, 0.5417183049666129, 0.5316848746722409, 0.5347839664224769, 0.572876783403345, 0.5713162340786722, 0.5379622806152581, 0.10510821643599033, 0.09574301359679616, 0.13078678006818956, 0.1164161207614266, 0.04286454318598698, 0.13170723399161288, 0.14477365266670472, 0.07666291917370105, 0.10950670396398587, 0.3559315899366695, 0.2725198720493551, 0.3559944276227899, 0.22788539833925747, 0.647576836374223, 0.7303924842546494, 0.7013870098198512, 0.2663371923336062, 0.17301611434258213, 0.4978852897981755, 0.24868688295773644, 0.15466614962290604, 0.2680927485919471, 0.43855436632197997, 0.18101059713392176, 0.3449331246952264, 0.39663015862625617, 0.12429427378011881, 0.30812753527596304, 0.2570605769803226, 0.28813353087678495, 0.2152225112322853, 0.2526831853464039, 0.12466495988157544, 0.19697824936911457, 0.38989124785652807, 0.05892446181314659, 0.262685593377997, 0.2254618881945436, 0.2074049709176521, 0.16550944389715894, 0.15159551957988882, 0.24738161365402633, 0.21708193613705973, 0.21054096650718612, 0.24648030141612276, 0.19725058364602033, 0.18448652540585841, 0.16601322346670455, 0.19199778167854764, 0.19464580626055505, 0.18674882474855892, 0.19126378333582472, 0.22516171441031252, 0.1971583315583213, 0.10869889392812204, 0.1372470607006151, 0.10507210956708846, 0.905776389361781, 0.11228990020024576, 0.09902288116409841, 0.1083359962823861, 0.12684300771981705, 0.16603609787231322, 0.8908090165920637, 0.11293820254910114, 0.08311028701719114, 0.08314063346414258, 0.21247613935102494, 0.04423281559626846, 0.11352183705370211, 0.1690589915647115, 0.49565143453619687, 0.43914588859413517, 0.43791115640470346, 0.43459059055017113, 0.27180102264992834, 0.2685536066729983, 0.3361941307557679, 0.1926367870030744, 0.22952502595625468, 0.22316009042355966, 0.07873802321861711, 0.130674794922931, 0.06540838778315605, 0.09351232901204654, 0.09353040386710343, 0.09015117681741702, 0.1051107065571194, 0.09058166225661768, 0.08274127460177172]}, "mutation_prompt": null}
{"id": "142b7090-79ff-44b9-a7e2-e9e0d4d1c45e", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 1.0\n        self.mutation_factors = np.ones(dim)\n        self.steps = 5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.steps):\n                candidate_solution = best_solution + self.mutation_rate * np.random.uniform(-1, 1, self.dim) * self.mutation_factors\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n                candidate_fitness = func(candidate_solution)\n\n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n\n                    # Update mutation factors based on individual performance\n                    self.mutation_factors *= 0.9\n                    self.mutation_factors = np.clip(self.mutation_factors, 0.1, 2.0)\n\n                # Update mutation rate based on population diversity\n                self.mutation_rate *= 0.99\n\n            # Adjust step size based on individual performance\n            self.steps = max(1, min(self.steps + 1, 10)) if candidate_fitness < best_fitness else max(1, self.steps - 1)\n\n        return best_solution", "name": "ImprovedDynamicMutationMetaheuristic", "description": "Introducing adaptive step sizes based on individual performance to dynamically adjust exploration-exploitation trade-off for faster convergence.", "configspace": "", "generation": 99, "fitness": 0.0865982251515683, "feedback": "The algorithm ImprovedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.11.", "error": "", "parent_id": "3d1e0d1f-10d3-4e45-8a60-dc09ec36a668", "metadata": {"aucs": [0.9776953804508478, 0.13357011211230152, 0.2532260437109344, 0.09410643847594691, 0.06945539713243598, 0.11796296103408133, 0.15783993736753532, 0.47951847619627874, 0.10692381857830335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06971892234466048, 9.999999999998899e-05, 0.015080602585809677, 0.01570040852189336, 9.999999999998899e-05, 0.019470358186854164, 0.02023620735579479, 9.999999999998899e-05, 0.002523940984488604, 0.04561569543760324, 9.999999999998899e-05, 9.999999999998899e-05, 0.00989998895810984, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029738261567756608, 9.999999999998899e-05, 0.00031701490693869516, 0.07470502749791863, 0.026840759693490646, 0.022588578165768758, 0.0444457773450222, 0.04268109157192268, 0.04046228116032036, 0.04125681216441757, 0.044063898938846435, 0.04071027918773584, 0.3746020226577498, 9.999999999998899e-05, 9.999999999998899e-05, 0.05744141680630621, 0.09304277953654727, 0.0235464576957638, 9.999999999998899e-05, 9.999999999998899e-05, 0.07185278299298847, 0.09727105480484843, 0.06158154538713456, 0.028900564400277662, 0.24540139845508513, 9.999999999998899e-05, 9.999999999998899e-05, 0.07566920224169693, 9.999999999998899e-05, 9.999999999998899e-05, 0.25157186090739847, 9.999999999998899e-05, 9.999999999998899e-05, 0.2854509398990238, 9.999999999998899e-05, 9.999999999998899e-05, 0.25559281271932466, 9.999999999998899e-05, 0.07499449761174926, 0.16270835816339135, 0.04943326422820571, 0.13533849160907863, 0.18991963196736728, 9.999999999998899e-05, 0.025256188638808075, 0.17221912905228276, 9.999999999998899e-05, 0.04244259355799329, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053961500811005814, 0.05695352689861588, 0.15404290938395437, 0.053101852660309534, 9.999999999998899e-05, 0.012037886958100708, 0.11887044524802803, 0.022307724656641437, 9.999999999998899e-05, 9.999999999998899e-05, 0.06869685384560309, 9.999999999998899e-05, 0.0873672037578559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12914100751348923, 0.09701549805154541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04402896548671453, 0.2013778860021559, 0.11154738209410842, 0.2234579458406578, 0.13952454155431804, 0.10612046082438231, 0.06475804800272711, 0.17301397428466547, 0.17411995850138917, 0.16234076330973113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007445343697183304, 0.023715196777920555, 0.03774835661567999, 0.03476583894398222, 9.999999999998899e-05, 0.18199280146319008, 0.1455141727260476, 0.1794739934385765, 0.17603256483501495, 0.3031977355034777, 0.23176820905578377, 0.16509258873900112, 0.11000126442139424, 0.14136734866224065, 0.12778141534393073, 0.12422818925229462, 0.10994439294857239, 0.13882549042840964, 0.12320221691532096, 0.12034717736469791, 0.14042510527694907, 0.0968576453728196, 0.08843095232722131, 0.05603455032628302, 0.041501343291417636, 0.030016823972264683, 0.07151296627840098, 0.010144735574210584, 0.08174979938159455, 0.08531748710881149, 0.03719814534504462, 0.017965391496567062, 0.18442632653458535, 0.098787255912679, 0.13599000308777554, 0.2012318964800518, 0.12373425782239478, 0.13894884236884086, 0.1887682669883789, 0.14928873561928235, 0.17759064589570184, 0.16588242656716212, 9.999999999998899e-05, 0.15977368170103468, 0.1615612570634899, 0.20556238702647212, 0.1569416500749654, 0.18426900135151192, 9.999999999998899e-05, 0.05222851558337549, 0.1900800039456516, 0.13800879368056596, 0.06845891119936898, 0.17436415979282915, 0.10135765702920108, 0.06049675392803433, 0.1079791528569638, 0.12193318826722355, 0.11462805039331292, 0.5902922360033966, 0.10767853018163986, 0.06824768400939851, 0.07504242021459173, 0.16256358089178502, 0.08342914016433789, 0.11372737569681213, 0.05937065622723836, 0.1541643649888238, 0.256875953781192, 0.23724197973117211, 0.24910195638967214, 0.264711967702281, 0.2794779672936871, 0.17372053740872617, 0.22534991300740537, 0.23024002716084713, 0.28372382797193485, 0.04671003694760745, 0.010632526816498622, 0.023618197839377353, 0.05096381500197544, 0.014806104119337249, 0.04410905111458596, 0.0402353944259094, 0.0177328908498936, 0.042344876828878664]}, "mutation_prompt": null}
