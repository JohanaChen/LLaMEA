{"id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.33215995674189513, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "683a46dd-fa73-410c-924f-398a4629b523", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "051bd525-ef69-411f-86e9-769033d335b4", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "59c807d4-6c10-43a2-97c3-d5de9472d1da", "solution": "import numpy as np\n\nclass EHAPSOSDP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            rankings = np.argsort(self.personal_best_val)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                if np.random.rand() < 0.5 and i < self.pop_size // 2:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "EHAPSOSDP", "description": "Enhanced Hybrid Adaptive Particle Swarm Optimization with Selective Differential Perturbation (EHAPSO-SDP) introduces selective perturbation based on fitness ranking for improved convergence.", "configspace": "", "generation": 3, "fitness": 0.2696346199994191, "feedback": "The algorithm EHAPSOSDP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.8397971027200769, 0.835990595836758, 0.8558293740885768, 0.8206925564052738, 0.8637455613553884, 0.823257282066131, 0.8454557913259637, 0.8518812598871612, 0.8101817478582268, 9.999999999998899e-05, 0.04337370848005828, 0.24722725981219007, 0.14743821397568957, 0.1752588669549766, 0.4607426489436549, 0.05471974403716873, 0.6115119332006468, 0.039264950733823745, 0.1108608135376411, 0.0790378103304149, 0.12488801936183513, 0.09664947721689132, 0.09506867641946104, 0.09742648719608915, 0.15844914296321222, 0.17129066483278899, 0.0635445215292193, 0.06442634614568088, 0.08981234101521607, 0.03543336516675777, 0.10602872732376967, 0.13186703924001808, 0.17022884453958342, 0.08074045238538963, 0.0772187108505561, 0.09278288373252885, 0.9857863003737645, 0.9911373323005488, 0.9917068712397362, 0.9837236353465624, 0.9784046473506259, 0.9854052708903837, 0.9885147650038073, 0.9846262382785859, 0.9836176402159358, 0.3803439712157992, 0.05935862845796913, 0.3227547461860064, 0.33647450304439874, 0.17940501714715518, 0.3745842606396441, 0.41018100052654416, 0.08829479727650869, 0.07896412768876837, 0.22858598733173285, 0.36152504069484803, 0.22040951965029776, 0.2812009147943272, 0.2031166050803842, 0.2793209742056313, 0.07681022411215344, 0.2421518771407234, 0.3659847768357246, 0.17154945556948675, 0.1260024573091436, 0.2786133994516574, 0.14046154514369313, 0.1340885790140517, 0.18333828632405136, 0.1807539980687045, 0.12861179753362917, 0.4703609731809758, 0.19618183848084259, 0.016881744821862, 0.12113976153599981, 0.21207785991485884, 0.13338803951011946, 0.13150252476225832, 0.5415983011252516, 0.1348643701912361, 0.13293835318991332, 0.0383576084393884, 0.03928304739484023, 0.04819316906220683, 9.999999999998899e-05, 0.10993885151130511, 0.0227441291169429, 0.05869673449006929, 0.00965109614850479, 0.08006659285633722, 0.1513375876240014, 0.10239571680051263, 0.22705913327476834, 0.1587104773420155, 0.079576024193868, 0.18792499529560414, 0.18760779162744723, 0.33191445454769775, 0.14648875981804976, 0.0476634290692145, 0.10300201328703351, 0.17841985440312802, 0.17722211969888035, 0.17955495402394772, 0.08427928203773405, 0.22807451819684332, 0.1027732788332314, 0.08042950982819508, 0.14237435740776672, 0.08039396904866425, 0.16678295318269754, 0.2332180651054082, 0.03739696460932951, 0.1380597118314184, 0.10679432603808181, 0.3185742549854894, 0.08266678760017676, 0.5252262525435676, 0.5520528165651069, 0.5838233201417948, 0.5520479105175564, 0.7308119836893501, 0.717962834449374, 0.8132280612718289, 0.5530249197111481, 0.6914356733959875, 0.07790779472177944, 0.10295001015827543, 0.04533458450991257, 0.11134557269155465, 0.09805795484038482, 0.13472770664288836, 0.10486822306014687, 0.09283883381476976, 0.09638423122776041, 0.1957660743155467, 0.17212074746298078, 0.4492946923347314, 0.4468810767567305, 0.42902468860682086, 0.17516049886234908, 0.4565625834445647, 0.17625660928797404, 0.22111069077144185, 0.18036404424496466, 0.2747737642322169, 0.3650578190870267, 0.24933106581360143, 0.2886180437291469, 0.2894418764982468, 0.2455065666695636, 0.2701749261138672, 0.2742155504897651, 0.28604923935884286, 0.2504398960202846, 0.2669796276196327, 0.27154749054356564, 0.2804736984994012, 0.36126633268904274, 0.2144985888905364, 0.2829023626895477, 0.22300604530294943, 0.23613397065321362, 0.16660331454842925, 0.20801499882705465, 0.27388459761811723, 0.18296267567616986, 0.22256738205313753, 0.29611594355569437, 0.21334186783297182, 0.19484414922318638, 0.1929441724678972, 0.19711883391256202, 0.19669496532302377, 0.19163578471463805, 0.20392632768619745, 0.17854048750448714, 0.18297960467743035, 0.18001575280612792, 0.2512215159994998, 0.21096641729150567, 0.20935891990014055, 0.1538771586879768, 0.8623502879450315, 0.2010844479664583, 0.20031656939090092, 0.0999642822476502, 0.16950146172267289, 0.9123468710180881, 0.6012577677378743, 0.5643691858379676, 0.11285501672626341, 0.10474117694934726, 0.22671910887011015, 0.20910441506368616, 0.10447621636347104, 0.10497395262615905, 0.1051550752474334, 0.2061393464004705, 0.2040200332594675, 0.1966378050582036, 0.20190920516340116, 0.25110617911949507, 0.18004101430547848, 0.1840744457699638, 0.23047423199044448, 0.1937117053792038, 0.09200600849062246, 0.10362387762429714, 0.08839329838786603, 0.09687729110715859, 0.09009701171794882, 0.09427518767174037, 0.10095472806702765, 0.0954122720168592, 0.09081391902785385]}, "mutation_prompt": null}
{"id": "db12d261-810b-4107-b20c-955cd551de06", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n        self.init_mutation_factor = self.mutation_factor  # Track initial mutation factor\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    dynamic_factor = self.init_mutation_factor * (1 - self.evaluations/self.budget)  # Dynamic mutation\n                    differential = dynamic_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced Hybrid Adaptive PSO with Dynamic Mutation (EHAPSO-DM) introduces a dynamic mutation factor to enhance exploration and adaptively balance exploration-exploitation.", "configspace": "", "generation": 4, "fitness": 0.31940502098999296, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7856747789083075, 0.7666975352424372, 0.7903111296503484, 0.8642793868974042, 0.7691143044677029, 0.7461350405074947, 0.8530012179552168, 0.7856244984533896, 0.812438869874093, 0.5626219857742752, 0.5061122785170824, 0.045449866865076904, 0.10069575065331815, 0.5502044801438064, 0.5118903674594677, 0.4445385432909018, 0.23729588912454103, 0.04870866804532903, 0.14448686394837074, 0.11734128537537147, 0.10527491760478258, 0.11534388785708538, 0.11887647906330034, 0.09860826466063755, 0.14314228522796313, 0.15015961256650046, 0.12538592046739483, 0.11934485055322586, 0.08517571940506985, 0.09861514843229413, 0.08630144799472328, 0.09822983178900324, 0.12727856621596934, 0.08538385055792075, 0.12010965138990415, 0.06635936975557155, 0.9499367853712686, 0.9897688589169005, 0.9897133714725767, 0.9889924917234569, 0.9841798052930553, 0.9771840263596545, 0.9858988430193668, 0.9841106081607424, 0.9878646260353736, 0.42464767621793675, 0.3618827785919445, 0.33497881776638994, 0.5226274102057129, 0.27230069074001295, 0.34859053185500244, 0.4970054044559875, 0.27627213510266935, 0.3371689856674859, 0.8331319214530252, 0.7938854761417177, 0.7614165322860666, 0.2792020059925717, 0.903565585461025, 0.19189198226149706, 0.13556667540848044, 0.830747813616607, 0.3174880619262239, 0.62854644167473, 0.1267570680154475, 0.5838325637243021, 0.24671656006348264, 0.1405313953322913, 0.23572288760546467, 0.2342975579322354, 0.11074519577842823, 0.1410579166261947, 0.2246351695585589, 0.021034085258836988, 0.31401678525825094, 0.1324385217607914, 0.12805258636201466, 0.3287656639172447, 0.6721637904312547, 0.4766222403313891, 0.12275451664226711, 0.05514929666953772, 0.12328336753213864, 0.07850952363608343, 0.050117101520160245, 9.999999999998899e-05, 0.09360101125760079, 0.038122290420077865, 0.4520959278436807, 0.042873132237846945, 0.16802781091169705, 0.16763982382880527, 0.1772883549222577, 0.11553961765140741, 0.21682929969865972, 0.15590173929683548, 0.6322357165888315, 0.5479569610537729, 0.08150612098998555, 0.1228903054463204, 0.029656776725244915, 0.10225370019241198, 0.08780057939574903, 0.19874207271458322, 0.06737786900778808, 0.25704524055799516, 0.14695321246802107, 0.09461872662998194, 0.3357941217533965, 0.45385538513910884, 0.3210938595883498, 0.20994448193794302, 0.03749608253528436, 0.40783616210308804, 0.0565862032695148, 0.07802337264209003, 0.07658030760690548, 0.8011579630400197, 0.7425694929663216, 0.669177168232755, 0.6608286200454936, 0.640423993866942, 0.6949752831130298, 0.7676558192155581, 0.6903184626002381, 0.6751898281028389, 0.11275133173911667, 0.10551601347386785, 0.1089970102146619, 0.13106517972301257, 0.10664258153739392, 0.12652790332701258, 0.11569275110279198, 0.13935354047170945, 0.0930463722166689, 0.2706071544959867, 0.16444977919222614, 0.16045790883653588, 0.22283587497313673, 0.20892307447889202, 0.16351101213481212, 0.1870728735152326, 0.14430055714460488, 0.13490409689824423, 0.36446080493054633, 0.35928228145197194, 0.3811888871985045, 0.2742210501304059, 0.214901621173597, 0.33981114404164336, 0.3228873406999715, 0.3968232072978505, 0.42094276709253287, 0.28111115561945543, 0.22888481821173512, 0.21573399227956747, 0.4280452076664294, 0.21246634490328364, 0.32911622515806593, 0.31780305207572923, 0.25552026236233194, 0.2787856351886082, 0.20512240317262542, 0.19982048970353905, 0.2005658671618613, 0.21413025588867274, 0.21092698780169628, 0.19865149336427368, 0.21057613893685978, 0.19876357236673614, 0.1958509419001091, 0.18611446169097778, 0.23407810394066286, 0.20960004997827386, 0.19176991336520155, 0.21022653648850942, 0.1901936333955596, 0.1829620983569783, 0.19045271660324048, 0.19281373444465844, 0.20495876715721684, 0.1651450556165852, 0.15263259596134904, 0.8347608757586922, 0.2005318585723459, 0.19955290800243175, 0.09995162005865055, 0.16941579951298014, 0.8801911298946566, 0.7722883551125178, 0.7164965391822189, 0.807115305511653, 0.8388355646483254, 0.6208550883540029, 0.14259329583432367, 0.20540086373711752, 0.10472979531819404, 0.5645682284223947, 0.18981503532832034, 0.19616324820961695, 0.17786993655029204, 0.18727853713714238, 0.18149048318037353, 0.18821191637957513, 0.18599846000610265, 0.1809531705681896, 0.19523052671359198, 0.09930009406884766, 0.08110061526335755, 0.06803440648939418, 0.07238366046387823, 0.08584262096152273, 0.08074163900850984, 0.0884573686042075, 0.07966392667144517, 0.09311945063230453]}, "mutation_prompt": null}
{"id": "328a42c0-fb3b-4674-a8ce-df2e7001bbb4", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "9b68b319-38fd-4c44-9fd0-292baedf1500", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.initial_w = 0.9  # start inertia weight\n        self.final_w = 0.4    # end inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            w = self.initial_w - (self.initial_w - self.final_w) * (self.evaluations / self.budget)  # Adaptive inertia weight\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (EHAPSO-DP) by integrating adaptive inertia weight to improve exploration-exploitation balance.", "configspace": "", "generation": 6, "fitness": 0.18796449960789077, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.46404640016441623, 0.4101562097733552, 0.3724506608687159, 0.5145565302591173, 0.4192983970475166, 0.5226015719089221, 0.41028264757009725, 0.3966563720971483, 0.3331446485954873, 9.999999999998899e-05, 0.030571108891803478, 0.11279421076278373, 0.03319056498985973, 0.020492062502844965, 0.015221752075125217, 0.02321826042892261, 0.020461925085838772, 9.999999999998899e-05, 0.08859231305176929, 0.07866655640343656, 0.07086131337196289, 0.07982061610557778, 0.06946588889779137, 0.07744443530340528, 0.07529233908912225, 0.06870148453518454, 0.04284156471922396, 0.057871117886617474, 0.06066692666346152, 0.06645928223350406, 0.08639945396714788, 0.06592080567441827, 0.050357236422159946, 0.058397771131005194, 0.06399344911116045, 0.0557707764470613, 0.9708871722859169, 0.9907503228281112, 0.9898224804656601, 0.984899549845896, 0.9850244417936976, 0.9747439639863135, 0.9869452999613081, 0.9883980037233611, 0.9882096015807406, 0.12848920406983544, 0.15657804328364033, 0.11976442307197899, 0.17932574720729721, 0.11623753370117795, 0.17524119016396178, 0.08307619034530378, 0.0864752492420443, 0.16182028412221483, 0.24497992189856632, 0.19744620338206686, 0.3402266685771239, 0.21246054219027966, 0.514565266954959, 0.17413066745499817, 0.429935961648899, 0.12359386208002121, 0.1822807735763845, 0.11979175804248954, 0.08272951858117816, 0.11181575987490322, 0.0906632254242895, 0.0672484535199297, 0.1016615374247869, 0.09794986122960092, 0.03566234621784592, 0.11521409021425755, 0.04465750823587733, 0.03858245267549554, 0.09157179338868537, 0.11404811367215484, 0.08819727815280043, 0.04834837022473437, 0.09566575661059074, 0.09680493502398402, 0.08050945607923277, 0.014964657932478587, 0.009872143151907764, 0.019094753494120043, 0.005648393683144626, 0.01755444345694812, 9.999999999998899e-05, 0.10806693474780726, 0.003650122962564617, 9.999999999998899e-05, 0.05270580942358161, 0.07554608066946134, 0.10429651355518799, 0.05521308192729901, 0.0760238541913304, 0.013096490649090797, 0.0380680687901338, 0.09385687658030606, 0.06887143055227285, 9.999999999998899e-05, 0.010397912227064432, 0.028224694665084815, 0.055802504709953404, 0.037047383131128875, 0.03420476070985912, 0.12782094620646856, 0.03258430301340143, 0.031125470870854044, 0.10324001384842463, 0.14021244617091488, 0.0865854553549339, 0.0025753598651637732, 0.12740351411646644, 0.1320350991179543, 0.12089951198649085, 0.03485673993382277, 0.04087699958088875, 0.39538965482920685, 0.3566041469475746, 0.32534503697007744, 0.4208273135879538, 0.3126581148553258, 0.37820863112250847, 0.3682622050910541, 0.3291027653662796, 0.34591193205734294, 0.08232669210441412, 0.07477089104414769, 0.09547293008123381, 0.07715801834552216, 0.08121081148891995, 0.07713346524093101, 0.0679316663333035, 0.06817645590984689, 0.08275898327592646, 0.14602795321667705, 0.12753023022771592, 0.14750987336378762, 0.14009808766863951, 0.1578378610513751, 0.1353515953911798, 0.15633370127939816, 0.20396012779585915, 0.1730804171779622, 0.18087413311119593, 0.24018574478489885, 0.25060972657917346, 0.22535738298760932, 0.2220237758094935, 0.22741642043825527, 0.21766141594264188, 0.2591644030311351, 0.23731596512190922, 0.2002322560907136, 0.18111413097351725, 0.20068174799200822, 0.16303831655793632, 0.1391919095665306, 0.19719986903965037, 0.18755705132861145, 0.1989748264228639, 0.18698369653235836, 0.17022637189457857, 0.16656669340813735, 0.1835778097324059, 0.16852537039615856, 0.1592919084548332, 0.1703962486823708, 0.1771782161861093, 0.1605833870265162, 0.16577100361215757, 0.16653502771390793, 0.15734851753732693, 0.17464858572573616, 0.17138374579319537, 0.13587697984962377, 0.1944796356015488, 0.17091547302176735, 0.16905987209117923, 0.17709429782712816, 0.47272997633293645, 0.45916123295469324, 0.14944226381297088, 0.42947404184912774, 0.1833238364778691, 0.3719251536254894, 0.16531059692935834, 0.17043859918885151, 0.4026509739331474, 0.2231348442217871, 0.363829985419756, 0.16907555785310346, 0.22754406603261323, 0.2993341072512866, 0.3229922603028992, 0.19623520168622133, 0.19212169955004044, 0.18603794093469384, 0.1995296194179167, 0.1868775488552863, 0.18896712567793073, 0.19141825981000948, 0.18617540521640574, 0.1984577879788202, 0.19889180228058823, 0.17985475303630505, 0.2016764229956397, 0.06433228339771813, 0.06260216922567852, 0.059491208198915735, 0.06457273002607777, 0.06272953659683622, 0.06150390973023567, 0.07370101233875903, 0.0644586924914351, 0.06128762163659596]}, "mutation_prompt": null}
{"id": "84cdaa9b-4681-4462-979f-2305d73eb30c", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # adaptive inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n                \n                # Update inertia weight adaptively\n                self.w = max(0.4, self.w * 0.99)\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations with elite solutions\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n                    elif candidate_fitness < self.best_global_val:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "HAPSO-DP Enhanced with Adaptive Inertia and Elite Differential Perturbation, improving convergence by adjusting inertia and introducing elite solutions in differential mutations.", "configspace": "", "generation": 7, "fitness": 0.31861934719647145, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.9029810672590618, 0.8499981866382366, 0.8762132921680185, 0.8856903478214806, 0.8668211306580894, 0.8420569229647469, 0.7685398529687708, 0.8551902343705592, 0.8476788881777467, 0.03783446462128737, 0.08571188474207225, 0.04033224668140323, 0.5409362262108504, 0.21359753855466956, 0.047723773593652874, 0.18749510246873147, 0.05441595656299991, 0.22442098272065136, 0.14566344481200577, 0.12106984126741027, 0.13203546938564126, 0.11690546576357197, 0.11237703536262145, 0.12126292384132431, 0.13498407506828702, 0.10495944864862339, 0.14510497661062693, 0.12138293259921462, 0.10271439412395189, 0.11772699395448905, 0.08943931191808696, 0.09405430287677885, 0.048191360938415695, 0.11087025538022588, 0.11762629620209808, 0.08083133515373464, 0.9454464112314497, 0.9897695358542796, 0.9897301251310363, 0.9820811674193469, 0.9804938220208501, 0.9782594684344702, 0.9851668536480499, 0.9883722889571436, 0.9878970565300156, 0.4141365193420724, 0.5585896382767415, 0.3728090265254228, 0.38339741788017356, 0.3865376175559635, 0.40205953166899155, 0.4338554572250727, 0.08861435080673286, 0.5068090244214759, 0.17021824069687186, 0.8950947213151297, 0.79804196926301, 0.2812088607667279, 0.19208430009568067, 0.19349650061313795, 0.21091374721293177, 0.18137768157599699, 0.8703450417653329, 0.7546230409140996, 0.1311688236414582, 0.2083444307007426, 0.13155466356214018, 0.13299256458093933, 0.24363265081902274, 0.4029094796233115, 0.11321443010693033, 0.21292363931405944, 0.23062237352311454, 0.05516808792329653, 0.12785529189642952, 0.19235440709048002, 0.13317685183376704, 0.12122373839543821, 0.1432234410508899, 0.11602185611802163, 0.18141614940691675, 0.09974469681375175, 0.06252994246195254, 0.6576418395854433, 0.0006528681813624537, 0.021023212212524456, 9.999999999998899e-05, 0.055631180262531554, 0.2369423033357293, 0.33706118719932365, 0.24789361750011818, 0.11542775106066439, 0.5380376477024471, 0.07197147939494186, 0.6431893325167486, 0.357359459171827, 0.34487644788491123, 0.08098160513929709, 0.24493399142730465, 0.31527148077653, 0.37279353199914667, 0.10419269783240215, 0.24076496334991004, 0.2553471507171313, 0.16193063374750327, 0.13565126397405347, 0.16018565532777396, 0.19077820385814503, 0.2687207455292797, 0.11414539629233389, 0.3239374896029227, 0.006659468233869648, 0.6007437793496786, 0.4631795947608319, 0.26521912597021635, 0.3830386574333625, 0.13388859133907793, 0.8319809141383665, 0.7757600748115855, 0.7623292354874865, 0.7953557457121347, 0.6755444720960941, 0.8371461687437005, 0.7653097861000847, 0.7071521348753074, 0.6730802060587231, 0.1008624261331128, 0.11473626846316332, 0.05651001931709543, 0.09748783164787533, 0.0981691448478228, 0.15623496316734997, 0.11265702320382953, 0.1006989533318754, 0.12900028710258415, 0.16145824433179545, 0.2986456408997543, 0.16168849607393365, 0.20652050195551097, 0.18923766790225727, 0.18497701722357474, 0.20637835478096822, 0.23880919184753557, 0.20408755083759245, 0.17186000474593133, 0.23542180093195686, 0.31926154718136535, 0.5051567753946402, 0.22696214597285091, 0.30202267642034497, 0.26654240902914605, 0.3447691070374773, 0.32369522179353716, 0.3276083569796526, 0.1807271204390668, 0.21810087229733788, 0.368591702958845, 0.25337460319080196, 0.3562913995473951, 0.24248419875238492, 0.4173085256132175, 0.21946741994125085, 0.23634473675328205, 0.21942822278274743, 0.19241202446881966, 0.19123111018188454, 0.21356474561813, 0.18610360984121532, 0.23322440036354897, 0.1897574515597169, 0.2116016233060477, 0.20012714283528887, 0.20534817965368413, 0.17580180829407943, 0.21632982200965467, 0.19356903329137398, 0.1960706457751208, 0.1951667752479449, 0.21377947239515638, 0.24075826920324273, 0.895327692089032, 0.9055156522568781, 0.1537722151349381, 0.9199926730708425, 0.19958110470111146, 0.19865612436722369, 0.16781990806408453, 0.16861801417602806, 0.887810297030192, 0.9201793693925701, 0.15685295467311278, 0.8995096621310166, 0.7605196333551044, 0.16874147946593143, 0.20828751757945907, 0.10495751708228562, 0.20425939913219304, 0.2119568223399959, 0.18269218475706062, 0.17533987946540852, 0.17596208731363772, 0.185356558224806, 0.18375289481695045, 0.18507801541028135, 0.19982390324791677, 0.1932066288099017, 0.19218323341811638, 0.10226214411818346, 0.08074118176219203, 0.08903020786671845, 0.09697820810852498, 0.10014034639433189, 0.08660190066048712, 0.08891486215460753, 0.0902736647308362, 0.09248252246625344]}, "mutation_prompt": null}
{"id": "f8ef60d1-adf7-449a-9d62-9cb9154796dd", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "9660e56f-a6a3-4ea2-8545-aebfd2d49016", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # dynamic inertia weight start\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Dynamic inertia weight adjustment\n            self.w = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSODP with dynamic inertia weight adjustment to balance exploration and exploitation more effectively.", "configspace": "", "generation": 9, "fitness": 0.18921862005156498, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.4914980308374315, 0.4396653658636316, 0.45780992934828924, 0.397870885027944, 0.5012352439486594, 0.4351053482611599, 0.39404742298669015, 0.46196380378553126, 0.46110833063847434, 9.999999999998899e-05, 0.03691814920375469, 0.02342582837947449, 9.999999999998899e-05, 0.01726128750878364, 0.012769783715663618, 0.02525126118880039, 0.09983873416044464, 9.999999999998899e-05, 0.07499593969324392, 0.06693333557218961, 0.08894857809940171, 0.07957002129976443, 0.07084823511710214, 0.06356904376058337, 0.0744792198922185, 0.07501000259443846, 0.07347743057324319, 0.03921056924411037, 0.06662149917763494, 0.05286234440033566, 0.06942336365483393, 0.05944280309578576, 0.06073426148323324, 0.05568760302647968, 0.07424869076831786, 0.04208835264055155, 0.9708982407426144, 0.9907501007601675, 0.9898213258577497, 0.9848986622401102, 0.9850235970407828, 0.9747398233487695, 0.9869453720070751, 0.988397738258448, 0.9882057543041358, 0.17041750561539593, 0.1632350787963769, 0.14079957314471359, 0.14043203762693668, 0.11678023423006156, 0.13905037743369686, 0.07968109765355169, 0.08613660369251008, 0.14534235724308486, 0.15887753697592433, 0.21590187527139615, 0.35730045054616644, 0.18620061312093317, 0.42566885134029175, 0.27804560622209984, 0.3012941600494521, 0.40130796869200136, 0.15828707405354303, 0.16431293864264152, 0.13928914417549332, 0.07811257171247166, 0.09900912779995508, 0.08006753406872247, 0.11160571202770875, 0.19148229404862926, 0.049786857231596926, 0.12924193005612505, 0.04678937034596131, 0.028984860046483263, 0.11274014639335361, 0.20657377777137897, 0.09109735775993155, 0.14510404224791618, 0.0802698167623137, 0.0329505973874038, 0.04531892175439667, 0.02389157337206327, 0.02018292358085727, 0.043823421695221576, 0.012958826045319283, 0.033352770851718505, 0.00154487279346871, 0.12561655555778217, 0.000750562133086663, 0.02737405157944761, 0.06128368409585416, 0.1286931556718922, 0.023224745931287316, 0.13408638319783617, 0.10149350239208654, 0.025685542643787418, 0.05445138832252783, 0.0618554887234215, 0.03276071020961424, 0.025904830162992942, 9.999999999998899e-05, 0.012679450637482104, 0.03355922298906078, 0.02406570978170497, 0.03593755222831674, 0.018346297082920127, 0.027228863665670677, 0.07151166007451415, 0.1323496549013664, 0.006071259612645319, 0.09777405716069043, 0.0862087568287454, 0.08656799015359662, 0.09135663163625285, 0.0899263284349876, 0.14260505273524415, 0.03758046795645553, 0.3507711680386796, 0.38875380840163676, 0.3951267448708461, 0.37361774308646345, 0.3959424149848072, 0.3365509549113449, 0.32382462867676653, 0.4351133621154568, 0.349987877041982, 0.08329204611228747, 0.08150983439321313, 0.08179583907362653, 0.06776176839060499, 0.08503831161516318, 0.07706961352163777, 0.0802133089286946, 0.06807251516885915, 0.08134533975560099, 0.13743499327566644, 0.13370426571104255, 0.13621105198991645, 0.1632094659021699, 0.16342450078007353, 0.12434100889952082, 0.1460954019018622, 0.13171432612088663, 0.15130330079013166, 0.19936831344814232, 0.19785946427389667, 0.23247360586292143, 0.27700589285386357, 0.24454115922556463, 0.24925392266272461, 0.25628199321672696, 0.2974861540394289, 0.2311799424579586, 0.17302152472832, 0.16805663499378953, 0.21208007914359606, 0.1797919328540395, 0.15241036857718082, 0.1646708433918087, 0.18238886631374052, 0.21073496105219836, 0.18694711356145222, 0.17755525280414264, 0.14806798534297927, 0.1844335315460739, 0.17759494206359228, 0.17239015311775152, 0.15950592634491878, 0.17293573901293346, 0.16064829378613943, 0.14546053581129126, 0.18074348045096722, 0.15918610123339927, 0.1692152538575381, 0.17951338567672903, 0.14981251278068686, 0.16234512699260883, 0.16529590476809497, 0.16377111747613637, 0.15886052133379125, 0.557168928719089, 0.46438511222906365, 0.14870724669230184, 0.4556658790035867, 0.18504477877593828, 0.17285233899110009, 0.16628318505311923, 0.3153539509750388, 0.16872240058436383, 0.26687919983533925, 0.30513350459024113, 0.15871835058627204, 0.12671081530408046, 0.2320482036572693, 0.3120553489895317, 0.19598739943259447, 0.2665612286356409, 0.2483251009938613, 0.17555338322230818, 0.19838946044699002, 0.18595993491230078, 0.20652620454864934, 0.181971722604224, 0.1868776989989972, 0.1751192035793847, 0.1881787499102887, 0.18043584744503782, 0.06923320955426937, 0.0651036448613217, 0.05086516529361029, 0.05224104717685185, 0.06547815744642627, 0.06847133565873298, 0.0693173305795517, 0.06184387365504895, 0.06273759639095389]}, "mutation_prompt": null}
{"id": "1f39eba1-f415-46a4-93c3-accd70c06e4b", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # dynamic inertia weight starting value\n        self.w_min = 0.4  # minimum inertia weight\n        self.w_max = 0.9  # maximum inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update inertia weight dynamically\n            self.w = self.w_max - ((self.w_max - self.w_min) * (self.evaluations / self.budget))\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Dynamic Inertia Weight for Improved Convergence through Adaptive Exploration-Exploitation Balance.", "configspace": "", "generation": 10, "fitness": 0.18921862005156498, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.4914980308374315, 0.4396653658636316, 0.45780992934828924, 0.397870885027944, 0.5012352439486594, 0.4351053482611599, 0.39404742298669015, 0.46196380378553126, 0.46110833063847434, 9.999999999998899e-05, 0.03691814920375469, 0.02342582837947449, 9.999999999998899e-05, 0.01726128750878364, 0.012769783715663618, 0.02525126118880039, 0.09983873416044464, 9.999999999998899e-05, 0.07499593969324392, 0.06693333557218961, 0.08894857809940171, 0.07957002129976443, 0.07084823511710214, 0.06356904376058337, 0.0744792198922185, 0.07501000259443846, 0.07347743057324319, 0.03921056924411037, 0.06662149917763494, 0.05286234440033566, 0.06942336365483393, 0.05944280309578576, 0.06073426148323324, 0.05568760302647968, 0.07424869076831786, 0.04208835264055155, 0.9708982407426144, 0.9907501007601675, 0.9898213258577497, 0.9848986622401102, 0.9850235970407828, 0.9747398233487695, 0.9869453720070751, 0.988397738258448, 0.9882057543041358, 0.17041750561539593, 0.1632350787963769, 0.14079957314471359, 0.14043203762693668, 0.11678023423006156, 0.13905037743369686, 0.07968109765355169, 0.08613660369251008, 0.14534235724308486, 0.15887753697592433, 0.21590187527139615, 0.35730045054616644, 0.18620061312093317, 0.42566885134029175, 0.27804560622209984, 0.3012941600494521, 0.40130796869200136, 0.15828707405354303, 0.16431293864264152, 0.13928914417549332, 0.07811257171247166, 0.09900912779995508, 0.08006753406872247, 0.11160571202770875, 0.19148229404862926, 0.049786857231596926, 0.12924193005612505, 0.04678937034596131, 0.028984860046483263, 0.11274014639335361, 0.20657377777137897, 0.09109735775993155, 0.14510404224791618, 0.0802698167623137, 0.0329505973874038, 0.04531892175439667, 0.02389157337206327, 0.02018292358085727, 0.043823421695221576, 0.012958826045319283, 0.033352770851718505, 0.00154487279346871, 0.12561655555778217, 0.000750562133086663, 0.02737405157944761, 0.06128368409585416, 0.1286931556718922, 0.023224745931287316, 0.13408638319783617, 0.10149350239208654, 0.025685542643787418, 0.05445138832252783, 0.0618554887234215, 0.03276071020961424, 0.025904830162992942, 9.999999999998899e-05, 0.012679450637482104, 0.03355922298906078, 0.02406570978170497, 0.03593755222831674, 0.018346297082920127, 0.027228863665670677, 0.07151166007451415, 0.1323496549013664, 0.006071259612645319, 0.09777405716069043, 0.0862087568287454, 0.08656799015359662, 0.09135663163625285, 0.0899263284349876, 0.14260505273524415, 0.03758046795645553, 0.3507711680386796, 0.38875380840163676, 0.3951267448708461, 0.37361774308646345, 0.3959424149848072, 0.3365509549113449, 0.32382462867676653, 0.4351133621154568, 0.349987877041982, 0.08329204611228747, 0.08150983439321313, 0.08179583907362653, 0.06776176839060499, 0.08503831161516318, 0.07706961352163777, 0.0802133089286946, 0.06807251516885915, 0.08134533975560099, 0.13743499327566644, 0.13370426571104255, 0.13621105198991645, 0.1632094659021699, 0.16342450078007353, 0.12434100889952082, 0.1460954019018622, 0.13171432612088663, 0.15130330079013166, 0.19936831344814232, 0.19785946427389667, 0.23247360586292143, 0.27700589285386357, 0.24454115922556463, 0.24925392266272461, 0.25628199321672696, 0.2974861540394289, 0.2311799424579586, 0.17302152472832, 0.16805663499378953, 0.21208007914359606, 0.1797919328540395, 0.15241036857718082, 0.1646708433918087, 0.18238886631374052, 0.21073496105219836, 0.18694711356145222, 0.17755525280414264, 0.14806798534297927, 0.1844335315460739, 0.17759494206359228, 0.17239015311775152, 0.15950592634491878, 0.17293573901293346, 0.16064829378613943, 0.14546053581129126, 0.18074348045096722, 0.15918610123339927, 0.1692152538575381, 0.17951338567672903, 0.14981251278068686, 0.16234512699260883, 0.16529590476809497, 0.16377111747613637, 0.15886052133379125, 0.557168928719089, 0.46438511222906365, 0.14870724669230184, 0.4556658790035867, 0.18504477877593828, 0.17285233899110009, 0.16628318505311923, 0.3153539509750388, 0.16872240058436383, 0.26687919983533925, 0.30513350459024113, 0.15871835058627204, 0.12671081530408046, 0.2320482036572693, 0.3120553489895317, 0.19598739943259447, 0.2665612286356409, 0.2483251009938613, 0.17555338322230818, 0.19838946044699002, 0.18595993491230078, 0.20652620454864934, 0.181971722604224, 0.1868776989989972, 0.1751192035793847, 0.1881787499102887, 0.18043584744503782, 0.06923320955426937, 0.0651036448613217, 0.05086516529361029, 0.05224104717685185, 0.06547815744642627, 0.06847133565873298, 0.0693173305795517, 0.06184387365504895, 0.06273759639095389]}, "mutation_prompt": null}
{"id": "d7953b24-9d79-42ea-b64c-4fd752c2c482", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w_max = 0.9  # maximum inertia weight\n        self.w_min = 0.4  # minimum inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            w = self.w_max - ((self.w_max - self.w_min) * self.evaluations / self.budget)  # dynamic inertia weight\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Improved Hybrid Adaptive Particle Swarm Optimization with adaptive inertia weight to enhance convergence balance between exploration and exploitation.", "configspace": "", "generation": 11, "fitness": 0.18796449960789077, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.46404640016441623, 0.4101562097733552, 0.3724506608687159, 0.5145565302591173, 0.4192983970475166, 0.5226015719089221, 0.41028264757009725, 0.3966563720971483, 0.3331446485954873, 9.999999999998899e-05, 0.030571108891803478, 0.11279421076278373, 0.03319056498985973, 0.020492062502844965, 0.015221752075125217, 0.02321826042892261, 0.020461925085838772, 9.999999999998899e-05, 0.08859231305176929, 0.07866655640343656, 0.07086131337196289, 0.07982061610557778, 0.06946588889779137, 0.07744443530340528, 0.07529233908912225, 0.06870148453518454, 0.04284156471922396, 0.057871117886617474, 0.06066692666346152, 0.06645928223350406, 0.08639945396714788, 0.06592080567441827, 0.050357236422159946, 0.058397771131005194, 0.06399344911116045, 0.0557707764470613, 0.9708871722859169, 0.9907503228281112, 0.9898224804656601, 0.984899549845896, 0.9850244417936976, 0.9747439639863135, 0.9869452999613081, 0.9883980037233611, 0.9882096015807406, 0.12848920406983544, 0.15657804328364033, 0.11976442307197899, 0.17932574720729721, 0.11623753370117795, 0.17524119016396178, 0.08307619034530378, 0.0864752492420443, 0.16182028412221483, 0.24497992189856632, 0.19744620338206686, 0.3402266685771239, 0.21246054219027966, 0.514565266954959, 0.17413066745499817, 0.429935961648899, 0.12359386208002121, 0.1822807735763845, 0.11979175804248954, 0.08272951858117816, 0.11181575987490322, 0.0906632254242895, 0.0672484535199297, 0.1016615374247869, 0.09794986122960092, 0.03566234621784592, 0.11521409021425755, 0.04465750823587733, 0.03858245267549554, 0.09157179338868537, 0.11404811367215484, 0.08819727815280043, 0.04834837022473437, 0.09566575661059074, 0.09680493502398402, 0.08050945607923277, 0.014964657932478587, 0.009872143151907764, 0.019094753494120043, 0.005648393683144626, 0.01755444345694812, 9.999999999998899e-05, 0.10806693474780726, 0.003650122962564617, 9.999999999998899e-05, 0.05270580942358161, 0.07554608066946134, 0.10429651355518799, 0.05521308192729901, 0.0760238541913304, 0.013096490649090797, 0.0380680687901338, 0.09385687658030606, 0.06887143055227285, 9.999999999998899e-05, 0.010397912227064432, 0.028224694665084815, 0.055802504709953404, 0.037047383131128875, 0.03420476070985912, 0.12782094620646856, 0.03258430301340143, 0.031125470870854044, 0.10324001384842463, 0.14021244617091488, 0.0865854553549339, 0.0025753598651637732, 0.12740351411646644, 0.1320350991179543, 0.12089951198649085, 0.03485673993382277, 0.04087699958088875, 0.39538965482920685, 0.3566041469475746, 0.32534503697007744, 0.4208273135879538, 0.3126581148553258, 0.37820863112250847, 0.3682622050910541, 0.3291027653662796, 0.34591193205734294, 0.08232669210441412, 0.07477089104414769, 0.09547293008123381, 0.07715801834552216, 0.08121081148891995, 0.07713346524093101, 0.0679316663333035, 0.06817645590984689, 0.08275898327592646, 0.14602795321667705, 0.12753023022771592, 0.14750987336378762, 0.14009808766863951, 0.1578378610513751, 0.1353515953911798, 0.15633370127939816, 0.20396012779585915, 0.1730804171779622, 0.18087413311119593, 0.24018574478489885, 0.25060972657917346, 0.22535738298760932, 0.2220237758094935, 0.22741642043825527, 0.21766141594264188, 0.2591644030311351, 0.23731596512190922, 0.2002322560907136, 0.18111413097351725, 0.20068174799200822, 0.16303831655793632, 0.1391919095665306, 0.19719986903965037, 0.18755705132861145, 0.1989748264228639, 0.18698369653235836, 0.17022637189457857, 0.16656669340813735, 0.1835778097324059, 0.16852537039615856, 0.1592919084548332, 0.1703962486823708, 0.1771782161861093, 0.1605833870265162, 0.16577100361215757, 0.16653502771390793, 0.15734851753732693, 0.17464858572573616, 0.17138374579319537, 0.13587697984962377, 0.1944796356015488, 0.17091547302176735, 0.16905987209117923, 0.17709429782712816, 0.47272997633293645, 0.45916123295469324, 0.14944226381297088, 0.42947404184912774, 0.1833238364778691, 0.3719251536254894, 0.16531059692935834, 0.17043859918885151, 0.4026509739331474, 0.2231348442217871, 0.363829985419756, 0.16907555785310346, 0.22754406603261323, 0.2993341072512866, 0.3229922603028992, 0.19623520168622133, 0.19212169955004044, 0.18603794093469384, 0.1995296194179167, 0.1868775488552863, 0.18896712567793073, 0.19141825981000948, 0.18617540521640574, 0.1984577879788202, 0.19889180228058823, 0.17985475303630505, 0.2016764229956397, 0.06433228339771813, 0.06260216922567852, 0.059491208198915735, 0.06457273002607777, 0.06272953659683622, 0.06150390973023567, 0.07370101233875903, 0.0644586924914351, 0.06128762163659596]}, "mutation_prompt": null}
{"id": "e25eab66-e725-4c2d-a6f8-9164b35c2730", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.w_min = 0.2  # minimum inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Dynamic inertia weight adjustment\n            self.w = self.w_min + (0.5 - self.w_min) * (1 - self.evaluations / self.budget)\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with dynamic inertia weight adjustment based on evaluations to balance exploration and exploitation.", "configspace": "", "generation": 12, "fitness": 0.29352118735152966, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.8507503855139701, 0.8190657032116683, 0.8320810991694934, 0.8623459063080713, 0.8436168835773749, 0.19068920023176628, 0.8676089749412248, 0.8402597738659802, 0.7963629034932947, 9.999999999998899e-05, 0.03804190055393397, 0.03685884133013406, 0.30747876510685324, 0.1393787774553723, 0.04632622174914647, 0.2933712425957007, 0.32657873773719115, 0.37883605684615873, 0.11878272423643155, 0.12473192437178515, 0.11885612189340278, 0.08612944536320066, 0.1015120881366478, 0.09490604394948898, 0.11137004238939519, 0.15962258661247974, 0.11197042342853236, 0.08244254615971025, 0.09399661574231499, 0.11488635491375443, 0.11178942028710714, 0.09658988546707481, 0.08175348226608825, 0.07588127495145691, 0.13418207408689686, 0.11138804400349223, 0.9552125381023931, 0.9897702503319866, 0.9897135372377884, 0.9889966204478751, 0.9841825326237144, 0.9771849871687516, 0.9859117500550133, 0.9841108100320111, 0.9878639226780043, 0.303310122511554, 0.39811176918323576, 0.4597801655513337, 0.45747633893290895, 0.14653740283006933, 0.3079009349614823, 0.2185834606273921, 0.09792170507450193, 0.4747668400866605, 0.22840621151596874, 0.3681732337264739, 0.1967597585135833, 0.21033694061766484, 0.27689088979320464, 0.19926936351810942, 0.146998351544939, 0.2318816176778632, 0.8600497128834286, 0.23150154264429423, 0.1295704208237064, 0.19456018055728264, 0.11343900804002882, 0.14468895460431885, 0.3185264063962139, 0.2795871775478882, 0.11409261278593963, 0.2385621070659547, 0.21859147182418992, 0.00981397291610886, 0.16584064176200608, 0.36418085427847025, 0.3989163414119238, 0.32541749400567943, 0.12823352715424774, 0.22300624931365798, 0.340299466213587, 0.053134668424581144, 0.059855372058159495, 0.07537597814369934, 0.002448672569525301, 0.1782874380586722, 0.07579272829924999, 0.11618198601743512, 0.10008754371083284, 0.19834664074465902, 0.6623022645403056, 0.1786917065575362, 0.08373180194033181, 0.11002440476663211, 0.15062398426562285, 0.027149579793896428, 0.33344912314595687, 0.42094869935434776, 0.05157098581075947, 0.050074737115846646, 9.999999999998899e-05, 0.2568387256289887, 0.10748369794378831, 0.21725849754781879, 0.10320784339295375, 0.20259309465392672, 0.05881606606254497, 0.09648578209455139, 0.3442909141332964, 0.4457596371253342, 0.43159807453839805, 0.46464145291482095, 0.03686233822848339, 0.5004480701752232, 0.0768190245005167, 0.1311792696276205, 0.07473705894873728, 0.812661465822215, 0.8159120082458555, 0.7233239007403172, 0.6809331085970525, 0.6391074363567081, 0.7994947479275765, 0.6760225032875238, 0.7087043728471883, 0.5942160736099036, 0.08142145704456649, 0.11562844678843098, 0.12914748371474183, 0.16160330110785415, 0.11713928860239453, 0.10626327367439758, 0.1183399258149408, 0.10952033361908775, 0.1002535163197652, 0.14270044877908494, 0.49867996965922357, 0.1936082616272774, 0.21559845338002592, 0.3205314308687154, 0.1525708113993316, 0.3380966675147583, 0.3098604231560015, 0.1602508014952575, 0.29126835486879554, 0.4362394662622018, 0.39366926068798, 0.29466150378295497, 0.2724121577983438, 0.27085374659279016, 0.3305344840705309, 0.4655992936679181, 0.31542678168983207, 0.2955319299879976, 0.1941382869248508, 0.5120999208098393, 0.23344183017222642, 0.30797893777304197, 0.2895131891504047, 0.34365317423267117, 0.3678408275573076, 0.29309626586182747, 0.2127764867594959, 0.19001487812298623, 0.20320600382825382, 0.20500691566647655, 0.24471725352282458, 0.16773988611747737, 0.17653774177476167, 0.2017682643402532, 0.19543800758577867, 0.18874228401035076, 0.2057377087336968, 0.2106229318563625, 0.20825140330251957, 0.20399217084264742, 0.2039540652987354, 0.21114604589939467, 0.22114556104020133, 0.1898565867009886, 0.1836602935852587, 0.16525995324805387, 0.152712484470514, 0.885039328223904, 0.20056948099890615, 0.19812561461017386, 0.09997752277204397, 0.16953758457312018, 0.8299918557798113, 0.8889631752163457, 0.15695354708514753, 0.7232671144139319, 0.8195119020867728, 0.15289170587144396, 0.15165472043717343, 0.20435103838295288, 0.10468186682126468, 0.20864593998014858, 0.17325147561083887, 0.1968618458167406, 0.18476915415202455, 0.1996714168202136, 0.19132123208739404, 0.1933144616551472, 0.18571223700859263, 0.18234649709845951, 0.18648887841754136, 0.11153195563507712, 0.09350305046871776, 0.07036902179863513, 0.07719607378024884, 0.0864312501444825, 0.08624144704599734, 0.07875884408628553, 0.10932146837165402, 0.08481697772542052]}, "mutation_prompt": null}
{"id": "6b155314-1fa1-4c1f-889d-8570fc4f833e", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "04914b10-3a57-4cac-a494-7bc5b7bf8d24", "solution": "import numpy as np\n\nclass AHPSOEDP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.initial_mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update mutation factor dynamically based on convergence speed\n            convergence_rate = np.mean(self.personal_best_val) / (np.std(self.personal_best_val) + 1e-9)\n            mutation_factor = self.initial_mutation_factor * (1 - 0.5 * np.tanh(convergence_rate))\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply enhanced differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "AHPSOEDP", "description": "Adaptive Hybrid Particle Swarm Optimization with Enhanced Differential Perturbations (AHPSO-EDP) improves exploration by dynamically adjusting the mutation factor based on convergence rate.", "configspace": "", "generation": 14, "fitness": 0.3229520023824535, "feedback": "The algorithm AHPSOEDP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.8549036990041572, 0.7973215660118171, 0.844444857262719, 0.8607507235517828, 0.7934812781573743, 0.8642811781299227, 0.8282136787959732, 0.8206364736673624, 0.7268311726564959, 0.5253095075632308, 0.17652109929902182, 0.5613921902544713, 0.3583335233794116, 0.4179166567048376, 0.4335077580722595, 0.018137311189662775, 0.34456530813423847, 0.41057600934465477, 0.13601319494677666, 0.10491230619317271, 0.12155843686955903, 0.15796359810260507, 0.12954775001226748, 0.10215161473959744, 0.13009106233723344, 0.0825412561526413, 0.09619707733240279, 0.06930116120659002, 0.0920681951237029, 0.09649364331283106, 0.08299360557836954, 0.11314861795697961, 0.06553589712050434, 0.07219599425478085, 0.0922258793029177, 0.046778017140327255, 0.983462488249451, 0.9883468156279157, 0.9897103409581057, 0.0994231904190297, 0.9808436638431814, 0.9752384608781649, 0.9780626620641982, 0.9842363399808491, 0.9763192480526035, 0.48280317093386427, 0.38484533700393964, 0.36431552937943135, 0.31101699088597967, 0.41329110806909863, 0.14827968630331978, 0.3123673108972236, 0.08890809923375365, 0.08514029374059484, 0.22464986633387984, 0.8380787828407705, 0.7420207793698704, 0.6506532283581911, 0.26363137873404385, 0.19018865607217317, 0.07011718041462756, 0.778669435624104, 0.23220340599808387, 0.13188942838698747, 0.13171952714228607, 0.17966506194399612, 0.5137394874509322, 0.1327737572731572, 0.4408734639541011, 0.1301341272304668, 0.1817250337937002, 0.2265403237025344, 0.16884260447259003, 0.05360131595432327, 0.3999999159124882, 0.3172907247521487, 0.2158192403522412, 0.6207057927223738, 0.25655770390362187, 0.11934329096405671, 0.2660893877757038, 0.05887263471919191, 0.48243694049120167, 0.0890678208851754, 9.999999999998899e-05, 0.5954408051972122, 0.11759114400739767, 0.571629981258011, 0.47176115466377755, 0.3267599602101945, 0.5776352091408765, 0.18667442033951664, 0.6126336935538984, 0.5583363892731172, 0.027647224051382313, 0.146055017790085, 0.07640241809537562, 0.22449324423272043, 0.3680631407334607, 0.24401621089508885, 0.03329508963522554, 0.23282925516774045, 0.21876258930836134, 0.2152893170764031, 0.07877275206775303, 0.10308708805855915, 0.06799716898446695, 0.13109903928673994, 0.09073336308448965, 0.4561976327549503, 0.46023158489171634, 9.999999999998899e-05, 0.3786572735417252, 0.3062227981442145, 0.30898572716266237, 0.4066680900104308, 0.10799186172981268, 0.7494433578617785, 0.6573011081452775, 0.7620727773064762, 0.7704936664267676, 0.7421996576793061, 0.7641792732834938, 0.606250312452726, 0.7000167313789983, 0.6382988918971274, 0.11577621094011648, 0.10720196140857174, 0.09691837463624087, 0.11246599907355426, 0.10882588296331674, 0.11933747364323477, 0.08894577534785053, 0.12306246613619332, 0.10459000882079195, 0.13970420606076228, 0.643292290253812, 0.16681473639551625, 0.1479859763367074, 0.15566166196879694, 0.1646159919121929, 0.4085702632152838, 0.1901033496752763, 0.15779418621832864, 0.39328686072012364, 0.2982062669065445, 0.3594373059972058, 0.338110038123138, 0.43379422453266137, 0.4099164906290734, 0.2413042162243717, 0.48283654849687085, 0.38372747821810527, 0.25068246768453195, 0.22694422928342872, 0.22801145577442183, 0.5616268280993343, 0.4569402881401279, 0.24450971877096883, 0.3994614552776712, 0.27140938536932535, 0.3437752248095082, 0.21241529663708025, 0.2259063607092595, 0.21211850655693165, 0.2277066286149575, 0.21366407555724343, 0.1826307835045503, 0.20904570233547415, 0.17641831203508773, 0.2589678440207125, 0.1852757933420185, 0.293610745359005, 0.19390287076886414, 0.24554246268919, 0.20218663773510215, 0.20646312418784518, 0.18059385154238028, 0.1916508050819491, 0.1953149694806885, 0.17307621855028665, 0.9084726038591343, 0.15228440815188227, 0.891564112200342, 0.20002998179910558, 0.19974466566324411, 0.1822636133251686, 0.16991428557121202, 0.7710954935469696, 0.8379908279979332, 0.15582800158064014, 0.6840798142345789, 0.20509762883349858, 0.16800111261632122, 0.208828916464462, 0.18846592318747513, 0.5745771537652737, 0.1947813425460616, 0.17510215604950696, 0.1939886003392478, 0.17233545313305898, 0.19561603991300913, 0.18250500345900622, 0.19193737742491335, 0.18753922117500366, 0.1757823938900681, 0.19174789916252544, 0.09196557050342091, 0.08216557976004968, 0.0799672419607379, 0.08267639114603409, 0.08570403035974927, 0.08229569011774074, 0.08729285421141852, 0.07450294687826298, 0.09358113931860734]}, "mutation_prompt": null}
{"id": "3972b195-7243-47f1-9c70-cdef4a1c1a8c", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # initial inertia weight\n        self.w_end = 0.4  # final inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Dynamically adjust inertia weight\n            self.w = self.w_end + (self.w - self.w_end) * ((self.budget - self.evaluations) / self.budget)\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSODP by incorporating a dynamic inertia weight adjustment for improved exploration-exploitation balance.", "configspace": "", "generation": 15, "fitness": 0.2929866989070172, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.8031052290539344, 0.7881985596376485, 0.7530862062253629, 0.7859402554357912, 0.8171834495537761, 0.8219925528301614, 0.790374792765818, 0.7759713970140388, 0.7928671933341301, 0.0442093008679354, 0.22341545024628984, 0.026151783312266197, 0.17755782401734266, 0.10307030497763559, 0.05038948033131996, 0.1392918966735771, 0.07598724183795946, 0.583386470117587, 0.1186989687071135, 0.10895171915767676, 0.09345036825169029, 0.10878518688862293, 0.08443972722656667, 0.12385987259756515, 0.10521992918653233, 0.10506789067267308, 0.11431709629407139, 0.09855859889853347, 0.09222548064564484, 0.07333125110073446, 0.08373933493643104, 0.07982850953250165, 0.11733492415207203, 0.09086366288733638, 0.08907502251962252, 0.10983220392297732, 0.9709095190959594, 0.9907496430230761, 0.9898202954160402, 0.9848974657284394, 0.9850224359586496, 0.9747254871453785, 0.9869459745550795, 0.9883976112307429, 0.9882010091107793, 0.2650830035759725, 0.4460268937955232, 0.10289756251439108, 0.24270309534521628, 0.1415644885164956, 0.3565114570019595, 0.3480666909751975, 0.08791072771182118, 0.27311373999074673, 0.7967672045207185, 0.7677665456940035, 0.8066865656222997, 0.8258945791911755, 0.7499113914399572, 0.3363840293771726, 0.3083024112048445, 0.7559374896729195, 0.7573165962526923, 0.15329627231014498, 0.5357097885776766, 9.999999999998899e-05, 0.12250019079886099, 0.12187862258672177, 0.11914950077862685, 0.21659142914231766, 0.09509812866922296, 0.13360383258388608, 0.12948297589300406, 0.021141350615352494, 0.045094486781229404, 0.1958866134921956, 0.20275805023405868, 0.13705463871788215, 0.2944996644037857, 0.11090380162712832, 0.10447164360259775, 0.06002868569426578, 0.1002529564375807, 0.07170957354369678, 0.0005240973543337857, 0.17051204820495747, 9.999999999998899e-05, 0.18197863353456678, 0.009012670797245659, 0.04372291734909761, 0.07558719389805335, 0.471138039374862, 0.08658560981957131, 0.5845548096398119, 0.257525685634303, 0.13671311535396957, 0.35726101896949225, 0.19959831173183307, 0.07161673596755902, 0.03207249344735719, 0.028531849856183955, 0.15134294993111963, 0.12259828766772574, 0.06554054609110715, 0.0983878846355154, 0.15012867873893787, 0.11322212979644897, 0.14696476947801895, 0.13944506367955378, 0.04253577622449811, 0.41959774206049183, 0.16081572743542494, 0.3970182953620581, 0.26745713431016915, 0.07809322698768151, 0.03552063058499588, 0.3235962159735303, 0.6687995049464432, 0.7173256141944682, 0.7259743093489476, 0.7487189745426561, 0.6573669797469317, 0.7120150528520115, 0.6743786214391871, 0.5936975429428187, 0.48742580768387833, 0.1199925217092519, 0.14719181135444448, 0.0809398597643769, 0.08798635071976202, 0.12838496822429935, 0.14034045711514498, 0.07530781963949429, 0.09374268187777302, 0.12561517325332405, 0.17729726552450797, 0.24348452531168963, 0.2448729950848617, 0.14831439936640234, 0.38856235584078114, 0.12503077615932923, 0.14280118104901007, 0.16333404913920202, 0.24054815098052018, 0.25235912185032516, 0.19798434000118903, 0.25628748623035935, 0.31456959772555637, 0.3114960130585186, 0.2734923311758988, 0.2742316092467201, 0.3036332496111015, 0.2750423702212018, 0.23760488440024674, 0.21951276849141044, 0.3971262988402303, 0.2341999393745433, 0.4141602218177485, 0.3406404467729428, 0.31132867775627604, 0.2960905102282012, 0.2863061769878581, 0.19394604475421262, 0.1860183127120285, 0.19164608815682682, 0.18338805827662452, 0.21285597849774684, 0.20027461642678868, 0.20715830078242425, 0.2023961948034343, 0.19835993856844703, 0.18370327244790396, 0.1823560603787373, 0.20330355287333535, 0.20639057933935934, 0.19469982830046606, 0.18562550466724603, 0.20142964591131673, 0.20857482050030507, 0.20567572604658524, 0.164539871959427, 0.8005483273748966, 0.15202802481303157, 0.8122977759235672, 0.19531739326701936, 0.183953543910636, 0.16888337126385977, 0.16571300043962933, 0.8535974707673316, 0.7945502567397659, 0.7203737505321762, 0.12318897506180115, 0.6715170664479297, 0.16188147344324078, 0.8106377044878197, 0.20769462937710137, 0.20388249802867953, 0.19964434885483306, 0.17875747560458544, 0.17069125325586776, 0.19964006121687894, 0.18590441900417487, 0.20141179730024228, 0.16870405111924824, 0.18334505462791828, 0.1863120427521867, 0.1764188550471616, 0.07629062869130798, 0.07241562368064991, 0.07288602443245296, 0.07747753107436273, 0.07714243656364417, 0.07206208851619045, 0.07127819073451758, 0.06784414630375468, 0.08419193839329109]}, "mutation_prompt": null}
{"id": "23b793af-f737-4b25-9197-00c7ceaac730", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "6a7689ea-48f0-4297-b476-c0d7fdf9a69f", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w_max = 0.9  # max inertia weight\n        self.w_min = 0.4  # min inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.w = self.w_max - (self.w_max - self.w_min) * (self.evaluations / self.budget)  # adaptive inertia\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n            \n            # Elite selection: keep the best half of the population\n            sorted_indices = np.argsort(self.personal_best_val)\n            elite_indices = sorted_indices[:self.pop_size // 2]\n            self.population = self.population[elite_indices]\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Inertia and Elite Selection to improve exploration-exploitation balance and convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 15 is out of bounds for axis 0 with size 15').", "error": "IndexError('index 15 is out of bounds for axis 0 with size 15')", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {}, "mutation_prompt": null}
{"id": "3185f3ed-2c31-423a-af1b-b0494b49aa95", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # dynamic inertia weight\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Dynamic inertia weight adjustment\n            self.w = 0.9 - 0.5 * (self.evaluations / self.budget) \n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with dynamic inertia weight adjustment for better convergence.", "configspace": "", "generation": 18, "fitness": 0.18796449960789077, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.46404640016441623, 0.4101562097733552, 0.3724506608687159, 0.5145565302591173, 0.4192983970475166, 0.5226015719089221, 0.41028264757009725, 0.3966563720971483, 0.3331446485954873, 9.999999999998899e-05, 0.030571108891803478, 0.11279421076278373, 0.03319056498985973, 0.020492062502844965, 0.015221752075125217, 0.02321826042892261, 0.020461925085838772, 9.999999999998899e-05, 0.08859231305176929, 0.07866655640343656, 0.07086131337196289, 0.07982061610557778, 0.06946588889779137, 0.07744443530340528, 0.07529233908912225, 0.06870148453518454, 0.04284156471922396, 0.057871117886617474, 0.06066692666346152, 0.06645928223350406, 0.08639945396714788, 0.06592080567441827, 0.050357236422159946, 0.058397771131005194, 0.06399344911116045, 0.0557707764470613, 0.9708871722859169, 0.9907503228281112, 0.9898224804656601, 0.984899549845896, 0.9850244417936976, 0.9747439639863135, 0.9869452999613081, 0.9883980037233611, 0.9882096015807406, 0.12848920406983544, 0.15657804328364033, 0.11976442307197899, 0.17932574720729721, 0.11623753370117795, 0.17524119016396178, 0.08307619034530378, 0.0864752492420443, 0.16182028412221483, 0.24497992189856632, 0.19744620338206686, 0.3402266685771239, 0.21246054219027966, 0.514565266954959, 0.17413066745499817, 0.429935961648899, 0.12359386208002121, 0.1822807735763845, 0.11979175804248954, 0.08272951858117816, 0.11181575987490322, 0.0906632254242895, 0.0672484535199297, 0.1016615374247869, 0.09794986122960092, 0.03566234621784592, 0.11521409021425755, 0.04465750823587733, 0.03858245267549554, 0.09157179338868537, 0.11404811367215484, 0.08819727815280043, 0.04834837022473437, 0.09566575661059074, 0.09680493502398402, 0.08050945607923277, 0.014964657932478587, 0.009872143151907764, 0.019094753494120043, 0.005648393683144626, 0.01755444345694812, 9.999999999998899e-05, 0.10806693474780726, 0.003650122962564617, 9.999999999998899e-05, 0.05270580942358161, 0.07554608066946134, 0.10429651355518799, 0.05521308192729901, 0.0760238541913304, 0.013096490649090797, 0.0380680687901338, 0.09385687658030606, 0.06887143055227285, 9.999999999998899e-05, 0.010397912227064432, 0.028224694665084815, 0.055802504709953404, 0.037047383131128875, 0.03420476070985912, 0.12782094620646856, 0.03258430301340143, 0.031125470870854044, 0.10324001384842463, 0.14021244617091488, 0.0865854553549339, 0.0025753598651637732, 0.12740351411646644, 0.1320350991179543, 0.12089951198649085, 0.03485673993382277, 0.04087699958088875, 0.39538965482920685, 0.3566041469475746, 0.32534503697007744, 0.4208273135879538, 0.3126581148553258, 0.37820863112250847, 0.3682622050910541, 0.3291027653662796, 0.34591193205734294, 0.08232669210441412, 0.07477089104414769, 0.09547293008123381, 0.07715801834552216, 0.08121081148891995, 0.07713346524093101, 0.0679316663333035, 0.06817645590984689, 0.08275898327592646, 0.14602795321667705, 0.12753023022771592, 0.14750987336378762, 0.14009808766863951, 0.1578378610513751, 0.1353515953911798, 0.15633370127939816, 0.20396012779585915, 0.1730804171779622, 0.18087413311119593, 0.24018574478489885, 0.25060972657917346, 0.22535738298760932, 0.2220237758094935, 0.22741642043825527, 0.21766141594264188, 0.2591644030311351, 0.23731596512190922, 0.2002322560907136, 0.18111413097351725, 0.20068174799200822, 0.16303831655793632, 0.1391919095665306, 0.19719986903965037, 0.18755705132861145, 0.1989748264228639, 0.18698369653235836, 0.17022637189457857, 0.16656669340813735, 0.1835778097324059, 0.16852537039615856, 0.1592919084548332, 0.1703962486823708, 0.1771782161861093, 0.1605833870265162, 0.16577100361215757, 0.16653502771390793, 0.15734851753732693, 0.17464858572573616, 0.17138374579319537, 0.13587697984962377, 0.1944796356015488, 0.17091547302176735, 0.16905987209117923, 0.17709429782712816, 0.47272997633293645, 0.45916123295469324, 0.14944226381297088, 0.42947404184912774, 0.1833238364778691, 0.3719251536254894, 0.16531059692935834, 0.17043859918885151, 0.4026509739331474, 0.2231348442217871, 0.363829985419756, 0.16907555785310346, 0.22754406603261323, 0.2993341072512866, 0.3229922603028992, 0.19623520168622133, 0.19212169955004044, 0.18603794093469384, 0.1995296194179167, 0.1868775488552863, 0.18896712567793073, 0.19141825981000948, 0.18617540521640574, 0.1984577879788202, 0.19889180228058823, 0.17985475303630505, 0.2016764229956397, 0.06433228339771813, 0.06260216922567852, 0.059491208198915735, 0.06457273002607777, 0.06272953659683622, 0.06150390973023567, 0.07370101233875903, 0.0644586924914351, 0.06128762163659596]}, "mutation_prompt": null}
{"id": "14218567-40e8-40e8-8294-59d8e90ca9bf", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                # Dynamic inertia adjustment\n                self.w = 0.9 - 0.5 * (self.evaluations / self.budget) \n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced Hybrid Adaptive PSO with Dynamic Inertia to balance exploration and exploitation based on convergence speed.", "configspace": "", "generation": 19, "fitness": 0.1950462480875093, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.4003888191171183, 0.4213203060234899, 0.4496836896313873, 0.44219478669472523, 0.46202231234634406, 0.4435215531419858, 0.5142098100602249, 0.4619229785711675, 0.47503937393744, 0.014761173902703928, 0.06999770097020885, 0.10689238852028848, 0.12330590505861416, 0.03301087428741867, 0.07055727164014991, 0.16760428509158332, 0.10889782848390184, 0.01632230492155684, 0.08445066079600216, 0.08302443808970239, 0.07975848628647364, 0.07804235971112394, 0.0644522016821466, 0.06563204010620649, 0.07590165309063446, 0.07590624019475178, 0.1061990959830329, 0.055537299346811064, 0.07268293307824203, 0.06538095111682451, 0.0426614260142012, 0.0758986663109581, 0.05236757193498831, 0.04919453840022048, 0.07314630115614018, 0.056719333555084295, 0.9708993323172863, 0.99075006951208, 0.989821251692495, 0.9848984215355124, 0.9850234482940352, 0.9747393007240787, 0.9869452731561068, 0.9883976799902549, 0.9882049240952158, 0.1296432548466544, 0.2022254797651586, 0.05812611552837921, 0.15938470104055547, 0.1294996611022965, 0.1282353848255765, 0.08247376343283519, 0.08523802416102566, 0.1054613481990957, 0.1621034953857694, 0.3909558525606286, 0.3025178713293498, 0.41413077217726, 0.15845949961992667, 0.1643597579559566, 0.49903961610781933, 0.11949362349857873, 0.19541405085996022, 0.09163857929096852, 0.19259466453972318, 0.14589359495681087, 0.08598352666085607, 0.0728827110208824, 0.06612170183952715, 0.27130628781467525, 0.04873293218700814, 0.08383300899088286, 0.04852762648813436, 0.06504211740773569, 0.014708591656552028, 0.11102944322698005, 0.09188907466995788, 0.11448071223048684, 0.10049316338464809, 0.09472964946731588, 0.077478423945189, 0.019844351855819564, 0.04050346976373509, 0.018835429853587993, 0.008701987437860437, 0.00612712332797416, 0.008319621459603521, 0.06865673668510863, 0.09820825328913507, 0.0633372297676631, 0.10906052937435595, 0.09123016528557415, 0.0387784755351086, 0.058677332371912416, 0.13111250940491137, 0.03545345132836375, 0.061640922138561316, 0.07628464287383707, 0.08323094957202304, 0.011576082046881875, 0.017080157683969643, 0.01576730754174127, 0.028728126403611, 0.015761653275324305, 0.029538948101007878, 0.0642872363097402, 0.03008321879111009, 0.03680492598538909, 0.12616633370910968, 0.06100943697949679, 0.09651666291000549, 0.13524666488176385, 0.13431779257037346, 0.10591491425968835, 0.08263973891008247, 0.14744420851573847, 0.041201128613943205, 0.43075941266246254, 0.37986462484842665, 0.3539575520433953, 0.46493061315367257, 0.37395362416182065, 0.38947219665470734, 0.33420710455805824, 0.3485448821263807, 0.32016477156370016, 0.07565980688912854, 0.07519925045293563, 0.08477419616371284, 0.07491316120837876, 0.11310486682994547, 0.07245085164995657, 0.06318100076647915, 0.07261122130358288, 0.0845210436150623, 0.1390217520706123, 0.18259386458715798, 0.1405320476648907, 0.14040207119311832, 0.15483603175283756, 0.1532041322200921, 0.20988550321345711, 0.1389463505329459, 0.1672178341660503, 0.2299793871026823, 0.21546671315240296, 0.2526146181032063, 0.29249890480665963, 0.20209317427049278, 0.2639107723952254, 0.2541880262106806, 0.23385787100842326, 0.2583902367548597, 0.15611612764576444, 0.17087088255992533, 0.17863840391738717, 0.15335642149628625, 0.13933146775066563, 0.16302535400267892, 0.19418964313355436, 0.1621892029863069, 0.14975050727258898, 0.17909451090658435, 0.1812082173329841, 0.1620034273280938, 0.17324414594498083, 0.18726284782883607, 0.17891036189077003, 0.16171653394141283, 0.1781100889381647, 0.15614603597825316, 0.1717113761485456, 0.17715487661999263, 0.20069251912777064, 0.17163726355264775, 0.15431164265689346, 0.16674881571206046, 0.17296486043143156, 0.17044040953047057, 0.17793068290427205, 0.5623813293749906, 0.5668008855692213, 0.1516916334518379, 0.5027909835205338, 0.18064833490979382, 0.17157038574433503, 0.1667809645501508, 0.15440118486299548, 0.17514832918542556, 0.39983695290047394, 0.24694580609899364, 0.1582261482455799, 0.36013307271888784, 0.40097906878926204, 0.37033644996854964, 0.20509058227988397, 0.2338591874319691, 0.19686076797847718, 0.16586420384191747, 0.1972638412909259, 0.17716226004101443, 0.17615397169303815, 0.19122814665177268, 0.16905457624129772, 0.19140630952506987, 0.19879230963713956, 0.1829749725461055, 0.06003479270067946, 0.06233230611880536, 0.06457693590894364, 0.06300893177793332, 0.07030395252433941, 0.07152121112919141, 0.06544617529839525, 0.06430200807229303, 0.06290945336467191]}, "mutation_prompt": null}
{"id": "ed170dc0-13cd-44a4-bd70-f013904fbcd7", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # dynamic inertia weight starting value\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Adjust inertia weight dynamically\n            self.w = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with dynamic inertia weight adjustment to balance exploration and exploitation more effectively.", "configspace": "", "generation": 20, "fitness": 0.18921862005156498, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.4914980308374315, 0.4396653658636316, 0.45780992934828924, 0.397870885027944, 0.5012352439486594, 0.4351053482611599, 0.39404742298669015, 0.46196380378553126, 0.46110833063847434, 9.999999999998899e-05, 0.03691814920375469, 0.02342582837947449, 9.999999999998899e-05, 0.01726128750878364, 0.012769783715663618, 0.02525126118880039, 0.09983873416044464, 9.999999999998899e-05, 0.07499593969324392, 0.06693333557218961, 0.08894857809940171, 0.07957002129976443, 0.07084823511710214, 0.06356904376058337, 0.0744792198922185, 0.07501000259443846, 0.07347743057324319, 0.03921056924411037, 0.06662149917763494, 0.05286234440033566, 0.06942336365483393, 0.05944280309578576, 0.06073426148323324, 0.05568760302647968, 0.07424869076831786, 0.04208835264055155, 0.9708982407426144, 0.9907501007601675, 0.9898213258577497, 0.9848986622401102, 0.9850235970407828, 0.9747398233487695, 0.9869453720070751, 0.988397738258448, 0.9882057543041358, 0.17041750561539593, 0.1632350787963769, 0.14079957314471359, 0.14043203762693668, 0.11678023423006156, 0.13905037743369686, 0.07968109765355169, 0.08613660369251008, 0.14534235724308486, 0.15887753697592433, 0.21590187527139615, 0.35730045054616644, 0.18620061312093317, 0.42566885134029175, 0.27804560622209984, 0.3012941600494521, 0.40130796869200136, 0.15828707405354303, 0.16431293864264152, 0.13928914417549332, 0.07811257171247166, 0.09900912779995508, 0.08006753406872247, 0.11160571202770875, 0.19148229404862926, 0.049786857231596926, 0.12924193005612505, 0.04678937034596131, 0.028984860046483263, 0.11274014639335361, 0.20657377777137897, 0.09109735775993155, 0.14510404224791618, 0.0802698167623137, 0.0329505973874038, 0.04531892175439667, 0.02389157337206327, 0.02018292358085727, 0.043823421695221576, 0.012958826045319283, 0.033352770851718505, 0.00154487279346871, 0.12561655555778217, 0.000750562133086663, 0.02737405157944761, 0.06128368409585416, 0.1286931556718922, 0.023224745931287316, 0.13408638319783617, 0.10149350239208654, 0.025685542643787418, 0.05445138832252783, 0.0618554887234215, 0.03276071020961424, 0.025904830162992942, 9.999999999998899e-05, 0.012679450637482104, 0.03355922298906078, 0.02406570978170497, 0.03593755222831674, 0.018346297082920127, 0.027228863665670677, 0.07151166007451415, 0.1323496549013664, 0.006071259612645319, 0.09777405716069043, 0.0862087568287454, 0.08656799015359662, 0.09135663163625285, 0.0899263284349876, 0.14260505273524415, 0.03758046795645553, 0.3507711680386796, 0.38875380840163676, 0.3951267448708461, 0.37361774308646345, 0.3959424149848072, 0.3365509549113449, 0.32382462867676653, 0.4351133621154568, 0.349987877041982, 0.08329204611228747, 0.08150983439321313, 0.08179583907362653, 0.06776176839060499, 0.08503831161516318, 0.07706961352163777, 0.0802133089286946, 0.06807251516885915, 0.08134533975560099, 0.13743499327566644, 0.13370426571104255, 0.13621105198991645, 0.1632094659021699, 0.16342450078007353, 0.12434100889952082, 0.1460954019018622, 0.13171432612088663, 0.15130330079013166, 0.19936831344814232, 0.19785946427389667, 0.23247360586292143, 0.27700589285386357, 0.24454115922556463, 0.24925392266272461, 0.25628199321672696, 0.2974861540394289, 0.2311799424579586, 0.17302152472832, 0.16805663499378953, 0.21208007914359606, 0.1797919328540395, 0.15241036857718082, 0.1646708433918087, 0.18238886631374052, 0.21073496105219836, 0.18694711356145222, 0.17755525280414264, 0.14806798534297927, 0.1844335315460739, 0.17759494206359228, 0.17239015311775152, 0.15950592634491878, 0.17293573901293346, 0.16064829378613943, 0.14546053581129126, 0.18074348045096722, 0.15918610123339927, 0.1692152538575381, 0.17951338567672903, 0.14981251278068686, 0.16234512699260883, 0.16529590476809497, 0.16377111747613637, 0.15886052133379125, 0.557168928719089, 0.46438511222906365, 0.14870724669230184, 0.4556658790035867, 0.18504477877593828, 0.17285233899110009, 0.16628318505311923, 0.3153539509750388, 0.16872240058436383, 0.26687919983533925, 0.30513350459024113, 0.15871835058627204, 0.12671081530408046, 0.2320482036572693, 0.3120553489895317, 0.19598739943259447, 0.2665612286356409, 0.2483251009938613, 0.17555338322230818, 0.19838946044699002, 0.18595993491230078, 0.20652620454864934, 0.181971722604224, 0.1868776989989972, 0.1751192035793847, 0.1881787499102887, 0.18043584744503782, 0.06923320955426937, 0.0651036448613217, 0.05086516529361029, 0.05224104717685185, 0.06547815744642627, 0.06847133565873298, 0.0693173305795517, 0.06184387365504895, 0.06273759639095389]}, "mutation_prompt": null}
{"id": "eef24d2c-3932-490b-8f54-722424f4191d", "solution": "import numpy as np\n\nclass EHAPSOLF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def levy_flight(self, L=1.5):\n        u = np.random.normal(0, 1, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / abs(v)**(1/L)\n        return step\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n                # Apply Lévy flight\n                if np.random.rand() < 0.3:\n                    step = self.levy_flight()\n                    self.population[i] = np.clip(self.population[i] + step, self.bounds[0], self.bounds[1])\n\n        return self.best_global_pos, self.best_global_val", "name": "EHAPSOLF", "description": "Enhanced Hybrid Adaptive Particle Swarm Optimization with Lévy Flights (EHAPSO-LF), integrating Lévy flights for improved exploration of the search space.", "configspace": "", "generation": 21, "fitness": 0.1593714950229664, "feedback": "The algorithm EHAPSOLF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.29358834926418564, 0.2767469703246146, 0.3008807424047625, 0.3278242185301311, 0.3617339382824606, 0.34618283110248815, 0.25199921973755113, 0.26677279119298214, 0.32617139135391293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005294320162044119, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085168061832268, 0.05729052207453733, 0.06845097280242174, 0.0716884049078288, 0.06486563813028312, 0.08320186460970258, 0.07144264662798705, 0.06855694874610452, 0.07075171459745522, 0.06657770731468104, 0.04668937085114033, 0.06461897115690551, 0.05846459450943764, 0.07226120962271287, 0.04542515692661364, 0.07218054590685152, 0.04879131614366927, 0.05499247497079429, 0.9879664151706696, 0.9906491217208936, 0.9871496963728402, 0.9730856490281077, 0.9715550722712445, 0.9717073767762462, 0.9848039249708487, 0.9616676913352322, 0.9804843224442454, 0.13434289328743632, 0.13373188749994203, 0.12201703544192422, 0.12027732068356423, 0.1314400263715335, 0.1310335286937807, 0.10294882629048696, 0.1258239975912422, 0.11811009823806018, 0.2021738411510826, 0.20585168102900275, 0.17499707476211335, 0.17516015401682594, 0.19895533136749177, 0.17097729958499963, 0.18835871583669572, 0.16193929728713252, 0.15456584855357647, 0.09228221396798075, 0.07512153423898726, 0.0852846847352865, 0.09968984999454367, 0.09855175124212023, 0.09277293614248361, 0.0879991505869131, 0.02788686076665403, 0.0971178898281676, 0.07194079003963338, 0.04903724204548543, 0.04585881985079232, 0.07055351134299359, 0.09741607532982544, 0.09209317456376487, 0.024986547693235495, 0.09913874545585166, 0.06552605888139984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035339706227272005, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07340173600911926, 0.037506513179163425, 0.038316512805942504, 0.045129508029317034, 0.0029617179152219286, 0.007731944556297443, 0.03002463368031205, 0.06943292556814284, 0.06252609831725386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048600907638161495, 0.013173568593036311, 0.017874065776711023, 0.023140177955898067, 0.005283284513447284, 0.04895597580728828, 0.07874589117932884, 0.02903793323573811, 0.03718549241729541, 0.24205740831217604, 0.30299213478898424, 0.2696468027745461, 0.2852384145833975, 0.2864441991254417, 0.29173140169985423, 0.2515706213931226, 0.28379908962718337, 0.2973581070198281, 0.0743484608209406, 0.07269334491943535, 0.0926434753445432, 0.05794857424800115, 0.070133333379515, 0.05764824285128711, 0.07846631911038437, 0.06547612451831142, 0.06989464441241766, 0.14163417934532696, 0.1674533949060848, 0.16826815344726287, 0.13430453837090028, 0.1872314499416906, 0.13475815092695653, 0.14072362641636227, 0.1397712486411119, 0.14839869646150494, 0.20245770252282114, 0.20260595933835202, 0.2317670762638423, 0.20081794264228825, 0.21610939215844727, 0.21242997800721541, 0.21141699186238383, 0.22364026915189894, 0.23073626096076982, 0.16784855400638476, 0.13534207973927992, 0.15692686784693666, 0.12238360423770422, 0.12697248184978127, 0.1535594971879476, 0.1659872281248943, 0.1552178253724953, 0.13508735361524848, 0.1686586122967736, 0.16299445035376248, 0.1675530756522543, 0.1690633506757243, 0.17900523144068758, 0.16589279331364137, 0.17319803420896718, 0.17145552905383787, 0.16060590293924326, 0.16242915498017574, 0.17083488580575468, 0.1687355383319693, 0.17121501751673518, 0.1638798038079009, 0.17073444789503334, 0.17961747621036772, 0.16325203894447282, 0.16789407076632412, 0.32774576295207825, 0.16036807186448132, 0.150833294669516, 0.24883640425620612, 0.1751457589097969, 0.1940327967064197, 0.20031698715343105, 0.15447350468721344, 0.2442709372738091, 0.24821084529748783, 0.17293274702997186, 0.19104700795041618, 0.2324134363007304, 0.23429734654715884, 0.17630180350371483, 0.20158562482897624, 0.19543015008132725, 0.2593891815659446, 0.19075211827081207, 0.21874917624732282, 0.18237600088156725, 0.18537831087752332, 0.18349661385551108, 0.20366661407131037, 0.17574974530985876, 0.19541592301500277, 0.1871396726557798, 0.06616966729617835, 0.07517674562163079, 0.06019811478154313, 0.06694355659568485, 0.06815206012764907, 0.059625630204387936, 0.0634982573408015, 0.06430884366247314, 0.07014587972786757]}, "mutation_prompt": null}
{"id": "676c094b-0a14-431f-af10-b0212451026f", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w_max, self.w_min = 0.9, 0.4  # dynamic inertia weights\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.w = self.w_max - ((self.w_max - self.w_min) * (self.evaluations / self.budget))  # dynamic inertia\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations with crossover consideration\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    if np.random.rand() < 0.7:  # crossover probability\n                        candidate = 0.8 * candidate + 0.2 * self.best_global_pos\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with dynamic inertia and crossover for improved exploration-exploitation balance.", "configspace": "", "generation": 22, "fitness": 0.19394643016852667, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.42227465702159994, 0.37909707449557095, 0.4282893909280606, 0.1798346097991551, 0.4176174202459946, 0.42270028763328005, 0.38377933901066985, 0.4869552243449201, 0.5046705513084448, 0.11916689689963111, 0.12530402045158295, 0.028426138031691472, 0.050024235426811337, 0.1307281414026662, 0.01986050032419784, 0.019702135085294725, 0.14701853587727853, 0.019508739271677955, 0.07820898878237947, 0.07197407022541902, 0.06431979015182221, 0.08153588905200049, 0.08229422779911766, 0.07992442524344845, 0.07395702308094876, 0.08713682387967836, 0.08493453955312102, 0.06968599291208644, 0.06113261062784825, 0.06366676331303756, 0.0869236439704475, 0.048482068276061496, 0.07196500174422249, 0.062026956388239296, 0.06508128043387607, 0.049931959549446625, 0.9832132429471315, 0.9908081060723417, 0.9794864609481888, 0.9828991967630908, 0.9838705170335705, 0.9799479738710889, 0.9849111473787263, 0.9834803781161973, 0.9827971848850783, 0.09194157964791849, 0.1731045272387528, 0.14000648341618782, 0.18302109567173885, 0.17677774705609084, 0.1580277594330326, 0.07637278002006154, 0.08336496627258616, 0.0861587178477683, 0.39629301063070255, 0.40156995581307353, 0.317313996043439, 0.21180485227781543, 0.21983316444876277, 0.5480603780498254, 0.3834103200492628, 0.3296906119052042, 0.4445907247561236, 0.0759466504848606, 0.10830363367651274, 0.0698631569002428, 0.07712646786711141, 0.11654672275612976, 0.060724609308548505, 0.10191369292557884, 0.06217003684395839, 0.09912954346050595, 0.09069787152918785, 0.04827291374231624, 0.019898844914726932, 0.08874380596547349, 0.08580641145310708, 0.10036503236516725, 0.06607000172832833, 0.05484816669106729, 0.09281007691760113, 9.999999999998899e-05, 0.032421474467086764, 0.028218531436411842, 0.009745321982967625, 0.005892267215618863, 0.0255557841095142, 0.013354923023392473, 0.07286130072919472, 0.06753838840783988, 0.09413484755153512, 0.13675024030986227, 0.10078994030149702, 0.11182325556228856, 0.017930561218141516, 0.037592066949567404, 0.10842319222105634, 0.14719226383755357, 0.06727125082985153, 0.01440820657143671, 0.008503366489316044, 0.02183022004967783, 0.03415629078450311, 0.014403384970042454, 0.017845283780199006, 0.05045067848049456, 0.030280247913791025, 0.11298812508439093, 0.023499881258188693, 0.13426792085622508, 0.08926754594127306, 0.10738737368403195, 0.1739414027627969, 0.09806000365357848, 0.08013932831891102, 9.999999999998899e-05, 0.05511407186676154, 0.36024973450309494, 0.35975463303692745, 0.330700275660999, 0.41056969814473254, 0.29683375093166475, 0.35765366276761, 0.35543742533251865, 0.39504734813503173, 0.4224896658429531, 0.06617936674340508, 0.07761096238021292, 0.091171897849887, 0.07972207000478448, 0.07414180823318273, 0.10012180067756304, 0.09906790249280606, 0.06009074591712249, 0.06666788963398163, 0.1372056248241753, 0.23686876373893773, 0.1568279518238762, 0.22265919770488818, 0.1488336925163285, 0.11877830390975319, 0.15878446342407793, 0.19420502621759905, 0.18660030535616212, 0.27198045089752687, 0.23651392994803178, 0.25871791744423, 0.25975034294090915, 0.2183754428076109, 0.2581375467130136, 0.2319843123542168, 0.22734792982891572, 0.26474801621514343, 0.17492958776155776, 0.16516971142425263, 0.21659586691661292, 0.16064350433047203, 0.1403191435208695, 0.18612230305257949, 0.1828751707612707, 0.2088212170251802, 0.24575042113530365, 0.18728407968850247, 0.1698935066924363, 0.17161406594981488, 0.18215922157654352, 0.1816998380820375, 0.2105947534079049, 0.19982382619644656, 0.1685040071467372, 0.1799399754023725, 0.1708684701664328, 0.16145820228603114, 0.17978850186313833, 0.16220907636328252, 0.16958538822313918, 0.18325021572994615, 0.17057097120786857, 0.17095887047264569, 0.1661949092476951, 0.49522581037818125, 0.18903932602694962, 0.15117028502289154, 0.17199410937689297, 0.17375744427181383, 0.16241144882176828, 0.4056142193902915, 0.17132789392260606, 0.4212382770555374, 0.2975610882847133, 0.38035786171042096, 0.1451125517700964, 0.5299097021473166, 0.1928913115532439, 0.17156821180786042, 0.11450008755897545, 0.1850480373360075, 0.20664189566778335, 0.18920741518280404, 0.17709156164084183, 0.17618961470846883, 0.20105176675352276, 0.17807192986333797, 0.18689822890938845, 0.1817147005294324, 0.18198616802220735, 0.18805275934370125, 0.06544756796599926, 0.05736701467982963, 0.08094841176296741, 0.06807322767036583, 0.06236089543648071, 0.07162231388474394, 0.061956406908108885, 0.07411659744259358, 0.06107469772375407]}, "mutation_prompt": null}
{"id": "6eaa1ead-947c-4d2e-ba3a-f9d561d2a8b0", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w_max = 0.9  # maximum inertia weight\n        self.w_min = 0.4  # minimum inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Dynamic inertia weight calculation\n            w = self.w_max - (self.w_max - self.w_min) * (self.evaluations / self.budget)\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSODP with dynamic inertia weight adjustment for improved exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": 0.18921862005156498, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.4914980308374315, 0.4396653658636316, 0.45780992934828924, 0.397870885027944, 0.5012352439486594, 0.4351053482611599, 0.39404742298669015, 0.46196380378553126, 0.46110833063847434, 9.999999999998899e-05, 0.03691814920375469, 0.02342582837947449, 9.999999999998899e-05, 0.01726128750878364, 0.012769783715663618, 0.02525126118880039, 0.09983873416044464, 9.999999999998899e-05, 0.07499593969324392, 0.06693333557218961, 0.08894857809940171, 0.07957002129976443, 0.07084823511710214, 0.06356904376058337, 0.0744792198922185, 0.07501000259443846, 0.07347743057324319, 0.03921056924411037, 0.06662149917763494, 0.05286234440033566, 0.06942336365483393, 0.05944280309578576, 0.06073426148323324, 0.05568760302647968, 0.07424869076831786, 0.04208835264055155, 0.9708982407426144, 0.9907501007601675, 0.9898213258577497, 0.9848986622401102, 0.9850235970407828, 0.9747398233487695, 0.9869453720070751, 0.988397738258448, 0.9882057543041358, 0.17041750561539593, 0.1632350787963769, 0.14079957314471359, 0.14043203762693668, 0.11678023423006156, 0.13905037743369686, 0.07968109765355169, 0.08613660369251008, 0.14534235724308486, 0.15887753697592433, 0.21590187527139615, 0.35730045054616644, 0.18620061312093317, 0.42566885134029175, 0.27804560622209984, 0.3012941600494521, 0.40130796869200136, 0.15828707405354303, 0.16431293864264152, 0.13928914417549332, 0.07811257171247166, 0.09900912779995508, 0.08006753406872247, 0.11160571202770875, 0.19148229404862926, 0.049786857231596926, 0.12924193005612505, 0.04678937034596131, 0.028984860046483263, 0.11274014639335361, 0.20657377777137897, 0.09109735775993155, 0.14510404224791618, 0.0802698167623137, 0.0329505973874038, 0.04531892175439667, 0.02389157337206327, 0.02018292358085727, 0.043823421695221576, 0.012958826045319283, 0.033352770851718505, 0.00154487279346871, 0.12561655555778217, 0.000750562133086663, 0.02737405157944761, 0.06128368409585416, 0.1286931556718922, 0.023224745931287316, 0.13408638319783617, 0.10149350239208654, 0.025685542643787418, 0.05445138832252783, 0.0618554887234215, 0.03276071020961424, 0.025904830162992942, 9.999999999998899e-05, 0.012679450637482104, 0.03355922298906078, 0.02406570978170497, 0.03593755222831674, 0.018346297082920127, 0.027228863665670677, 0.07151166007451415, 0.1323496549013664, 0.006071259612645319, 0.09777405716069043, 0.0862087568287454, 0.08656799015359662, 0.09135663163625285, 0.0899263284349876, 0.14260505273524415, 0.03758046795645553, 0.3507711680386796, 0.38875380840163676, 0.3951267448708461, 0.37361774308646345, 0.3959424149848072, 0.3365509549113449, 0.32382462867676653, 0.4351133621154568, 0.349987877041982, 0.08329204611228747, 0.08150983439321313, 0.08179583907362653, 0.06776176839060499, 0.08503831161516318, 0.07706961352163777, 0.0802133089286946, 0.06807251516885915, 0.08134533975560099, 0.13743499327566644, 0.13370426571104255, 0.13621105198991645, 0.1632094659021699, 0.16342450078007353, 0.12434100889952082, 0.1460954019018622, 0.13171432612088663, 0.15130330079013166, 0.19936831344814232, 0.19785946427389667, 0.23247360586292143, 0.27700589285386357, 0.24454115922556463, 0.24925392266272461, 0.25628199321672696, 0.2974861540394289, 0.2311799424579586, 0.17302152472832, 0.16805663499378953, 0.21208007914359606, 0.1797919328540395, 0.15241036857718082, 0.1646708433918087, 0.18238886631374052, 0.21073496105219836, 0.18694711356145222, 0.17755525280414264, 0.14806798534297927, 0.1844335315460739, 0.17759494206359228, 0.17239015311775152, 0.15950592634491878, 0.17293573901293346, 0.16064829378613943, 0.14546053581129126, 0.18074348045096722, 0.15918610123339927, 0.1692152538575381, 0.17951338567672903, 0.14981251278068686, 0.16234512699260883, 0.16529590476809497, 0.16377111747613637, 0.15886052133379125, 0.557168928719089, 0.46438511222906365, 0.14870724669230184, 0.4556658790035867, 0.18504477877593828, 0.17285233899110009, 0.16628318505311923, 0.3153539509750388, 0.16872240058436383, 0.26687919983533925, 0.30513350459024113, 0.15871835058627204, 0.12671081530408046, 0.2320482036572693, 0.3120553489895317, 0.19598739943259447, 0.2665612286356409, 0.2483251009938613, 0.17555338322230818, 0.19838946044699002, 0.18595993491230078, 0.20652620454864934, 0.181971722604224, 0.1868776989989972, 0.1751192035793847, 0.1881787499102887, 0.18043584744503782, 0.06923320955426937, 0.0651036448613217, 0.05086516529361029, 0.05224104717685185, 0.06547815744642627, 0.06847133565873298, 0.0693173305795517, 0.06184387365504895, 0.06273759639095389]}, "mutation_prompt": null}
{"id": "69f40289-f035-4b1e-b943-b8c6f459d394", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            dynamic_scale = 0.9 + 0.1 * (self.evaluations / self.budget)  # Dynamic velocity scaling factor\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = dynamic_scale * (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    adaptive_mutation = self.mutation_factor * (1 - self.evaluations / self.budget)  # Adaptive mutation\n                    differential = adaptive_mutation * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Improved Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP+), incorporating adaptive mutation factor and dynamic velocity scaling for enhanced exploration-exploitation balance.", "configspace": "", "generation": 24, "fitness": 0.29863897937143474, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.8973011122521117, 0.8561018907520179, 0.8986687411814029, 0.8732544395293115, 0.8786863243879508, 0.3154115619517991, 0.8778953448272943, 0.8130532655523952, 0.8760746753531274, 0.09163338281712641, 0.039449037632520056, 0.07806992743004626, 0.0856537206737108, 0.4073341426626762, 0.05972294259270616, 0.2668040495786793, 0.7203134774994195, 0.05366904513173265, 0.08476096854951154, 0.12719847839451426, 0.12610802164568702, 0.09204774992048803, 0.1572414835106387, 0.10285824579657543, 0.12140684113251321, 0.14758904284166963, 0.13433723426228028, 0.1149821790026836, 0.10082023761195047, 0.06236231906491996, 0.07026905985152243, 0.09043871823409921, 0.09311293411880883, 0.09241243941893917, 0.10680973355776513, 0.08719237617116526, 0.9760414077300721, 0.9895862456113961, 0.9858346053821236, 0.9887018285975385, 0.9776920346737393, 0.9742187955626233, 0.9859030452962307, 0.984314289215038, 0.9806813958074433, 0.5721789710933685, 0.5045037892368849, 0.28395122249716, 0.44786828605023477, 0.5415326941807685, 0.6438697610463948, 0.5655852965209172, 0.0882337447275382, 0.082630171322292, 0.17268714074768743, 0.8334116998242541, 0.13896541695739084, 0.28044325838327866, 0.2679954282308139, 0.19113345429972306, 0.17654989297473278, 0.20332172757133116, 0.22243882187435726, 0.3669492806395911, 0.22543089604263444, 0.6614004859516125, 0.17996559323636951, 0.2109645104789183, 0.16904158585463425, 0.13630187093127133, 0.18990506227737092, 0.20664408887846863, 0.30264264305365307, 0.12345300880133292, 0.1338483183524064, 0.434502035129411, 0.20260824020513912, 0.3426605416196683, 0.7443003129298612, 0.09258450099754933, 0.1330674171421815, 9.999999999998899e-05, 0.06048564944333068, 0.1786620273946512, 9.999999999998899e-05, 0.07815014928855601, 0.031076770926717456, 0.009250870546795187, 0.007932552786553027, 0.6466010164805444, 0.24204786652924182, 0.08379252999276121, 0.19025067506577775, 0.19171352134720676, 0.07433139875933192, 0.037667279468604487, 0.6992196073805743, 0.3624951479888243, 0.23324839027226374, 0.08007142619892216, 0.13724761567408528, 0.15376439624642058, 0.2565476426179851, 0.3088121402975442, 0.11500209360933533, 0.1763428246559139, 0.1473995611511526, 0.19605074869305783, 0.3716958670615752, 0.11065487302128862, 0.5141016156245803, 9.999999999998899e-05, 0.049755128682526295, 0.2810749999140918, 0.21691085967037327, 0.24744825807697157, 0.08015606359337812, 0.7540647056800446, 0.709543197811142, 0.4817680672326564, 0.6796354494105767, 0.7530800208406689, 0.7672298776730679, 0.5895456789083068, 0.772637409482277, 0.8335885398807591, 0.0993456173588193, 0.09387653824145803, 0.1276088082478547, 0.1310106033405748, 0.15640777972234432, 0.1569322774496188, 0.1382160040392535, 0.10065856526839612, 0.10851882215714448, 0.3277868477502649, 0.24242861527669024, 0.21990616991910805, 0.43414746260655435, 0.1693594117766104, 0.18936024517413075, 0.21150549575583122, 0.387875118148306, 0.21769631534507572, 0.25926604771504613, 0.2554239610618394, 0.4614321762986239, 0.3191320931506181, 0.4870526135103679, 0.2800281143423835, 0.24647403498575227, 0.26997279645121686, 0.37724275648430305, 0.2640594686897144, 0.19720242945539612, 0.2636467598168838, 0.27194993297627246, 0.19588474324993266, 0.25844611494111036, 0.22697724557417565, 0.3275513142261183, 0.2544899556149931, 0.2361621266883922, 0.24960601848642316, 0.20385236325078482, 0.22019251243654314, 0.1954609217776372, 0.18430026710697434, 0.2121073733905452, 0.19888713633244304, 0.2604758836874924, 0.1826173586555535, 0.2223707276826471, 0.19814576477427237, 0.2195828042689768, 0.20856367794085595, 0.19292023774446876, 0.22539253820307525, 0.21147785514125694, 0.18060443224056655, 0.2108892732998433, 0.20617669233111935, 0.14906759817532633, 0.864116117956, 0.20074899822394177, 0.20001284295183464, 0.10002508996617998, 0.16902282752873576, 0.8778899787891008, 0.9031555299726626, 0.15740927720556397, 0.3161425842735891, 0.10507651184891931, 0.16787514175934115, 0.20124548071192216, 0.19437325408721384, 0.10416558928459285, 0.6174271457336459, 0.17253422882389968, 0.19035616004493805, 0.17908820836989836, 0.19173247856774678, 0.1771865010558611, 0.17264352574145336, 0.18078467366298956, 0.18616247317711043, 0.19288474139795087, 0.11098758181643842, 0.07899992490102214, 0.0851537765413175, 0.09002513449012417, 0.07742462473967882, 0.08563871746356289, 0.07691602161447286, 0.06727853326368882, 0.08486457031692207]}, "mutation_prompt": null}
{"id": "905f3210-e829-463b-a955-a0e026ad3342", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        stagnation_counter = 0\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n                    stagnation_counter = 0\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations with dynamic mutation factor\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    adaptive_factor = self.mutation_factor * (0.1 + 0.9 * np.random.rand())\n                    differential = adaptive_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n                        stagnation_counter = 0\n                    else:\n                        stagnation_counter += 1\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with diversity preservation through adaptive mutation rate to maintain exploration during stagnation.", "configspace": "", "generation": 25, "fitness": 0.3283957933627161, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.8275388010101256, 0.8027732655453604, 0.8452219992814838, 0.851497287128134, 0.8310246973465012, 0.8315422676300886, 0.8577453060612359, 0.8422743446569368, 0.8234731697969694, 0.09392524893320464, 0.6594420262012974, 0.18683412194270965, 9.999999999998899e-05, 0.03754203144178314, 0.0452477891838311, 0.6142380879274894, 0.09997398497131382, 0.0400479836922516, 0.11937392255813084, 0.14093377499485338, 0.13229316318595286, 0.1129174430548503, 0.1401315672943627, 0.1496085136957569, 0.14133356638702133, 0.10385369858089866, 0.11865007927340032, 0.07735509158664677, 0.096664266611588, 0.08505554500472423, 0.06458552993155753, 0.03868076658041186, 0.08673497197012547, 0.10301244801830778, 0.07270091473726392, 0.11527102157520241, 0.983316573847978, 0.9880584567278823, 0.9874915786684246, 0.9681726959711004, 0.9815356095485677, 0.9645519728708165, 0.9826562068960298, 0.983815811830361, 0.9761890076587647, 0.2609998611304163, 0.48819619886157894, 0.40395708057952784, 0.393847740638559, 0.4845441076228574, 0.5189896619431892, 0.35249698284595377, 0.5368443232060509, 0.0867895535390879, 0.22829417079796843, 0.7408984172275044, 0.8328718158927726, 0.3636272687246096, 0.21848954584993074, 0.2041916363055677, 0.8207204232649484, 0.23047893098018524, 0.18056424498767887, 0.6707485660101133, 0.15223031621396443, 0.17631938842560935, 0.14156462299906347, 0.13649758499807507, 0.20990625029051213, 0.3742261691993244, 0.7493149514026902, 0.18976095199351317, 0.2500704258191335, 0.0929875892460168, 0.11945635089466178, 0.1308066831977165, 0.16787969986440543, 0.1284001585865786, 0.13227695637211379, 0.1536607978131046, 0.11245152617704046, 0.02217812888182602, 0.08230954826562542, 0.08857947302262492, 0.4671183622440441, 0.13045256366105573, 9.999999999998899e-05, 0.4402814020761897, 0.12016063635317131, 0.5650024675318579, 0.3782731672059112, 0.10448508450329774, 0.5783534404965844, 0.22537153390105336, 0.2989064529486696, 0.10916618249805166, 0.07945844385989453, 0.7096076776149552, 0.3293086974800522, 0.044325931957293174, 0.12325654919349638, 0.06602439137131899, 0.12432067483983889, 0.13842274013202005, 0.10860479399207745, 0.094000721397973, 0.06897597875493178, 0.07719574852460209, 0.3909920481750042, 0.2841731962091645, 0.4255721007808937, 0.47121646694973907, 0.577065680240147, 0.33692911871839826, 0.40811052293356054, 9.999999999998899e-05, 0.1304698500930921, 0.7504855655141365, 0.6523596997859178, 0.692062011956414, 0.747904072054837, 0.7780978528736218, 0.753660451321958, 0.7979448174914584, 0.6733671667396974, 0.7319561799453151, 0.0974127013473004, 0.10026046616461859, 0.07976525810825097, 0.14266430986350498, 0.11758333213117111, 0.10252351312535135, 0.08616825157178842, 0.10165680579719372, 0.14731691979899786, 0.23678636543661646, 0.20657461927948662, 0.4831868312108131, 0.18145324015852182, 0.1571747072178814, 0.34314366574469934, 0.1643854712440409, 0.3377527942020875, 0.20732634327032207, 0.21292644927037474, 0.3591989540017473, 0.26567755551576955, 0.4164628714334877, 0.28758524755486004, 0.3365915257519577, 0.26791831754638673, 0.34376413164376907, 0.39797276381776636, 0.23099756383320247, 0.32968131047129157, 0.3247506079868534, 0.5210433273151527, 0.3000798735697874, 0.263021064612007, 0.24821942600395053, 0.26452221183117874, 0.27305243764500753, 0.18885729648057215, 0.17831594871310175, 0.19503173602695179, 0.2399188688033933, 0.15202175696199682, 0.18294118987196684, 0.22330310706850864, 0.19498934788840216, 0.22428440386779636, 0.2129459151213141, 0.21553960857480414, 0.20893496401534017, 0.19929937806329867, 0.2142888645484019, 0.20565415741123594, 0.1793707584357671, 0.19193324940110357, 0.19827651050178352, 0.26356049074900023, 0.16825690846634733, 0.15277898331811102, 0.8975611331122616, 0.2003816944003739, 0.8620600947511874, 0.8702872064371496, 0.16920994839059245, 0.8799713804150299, 0.82816435633538, 0.8360916034255159, 0.8542738324146705, 0.296054820872917, 0.165283985061213, 0.20127669973748408, 0.7651172456425663, 0.1051011199515679, 0.8101202227707711, 0.1948369264044234, 0.18023525430911325, 0.18265143181373222, 0.2016945579254784, 0.193993727699993, 0.18086419169746082, 0.1742339895959456, 0.18976648655467343, 0.18295393611658284, 0.0915188462829809, 0.08325599695113217, 0.08499739370417192, 0.0960966655675205, 0.08364189286625856, 0.08986636135936676, 0.08699571582340015, 0.07513329699718885, 0.07523951098668569]}, "mutation_prompt": null}
{"id": "e099e8d5-122f-4c00-ac8a-7b95d91923ab", "solution": "import numpy as np\n\nclass EHAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w_max = 0.9  # max inertia weight\n        self.w_min = 0.4  # min inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.w = self.w_max - ((self.w_max - self.w_min) * (self.evaluations / self.budget))  # Dynamic inertia weight\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "EHAPSODP", "description": "Enhanced Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (E-HAPSO-DP) introduces dynamic inertia weight adjustment to balance exploration and exploitation phases more effectively.", "configspace": "", "generation": 26, "fitness": 0.18796449960789077, "feedback": "The algorithm EHAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.46404640016441623, 0.4101562097733552, 0.3724506608687159, 0.5145565302591173, 0.4192983970475166, 0.5226015719089221, 0.41028264757009725, 0.3966563720971483, 0.3331446485954873, 9.999999999998899e-05, 0.030571108891803478, 0.11279421076278373, 0.03319056498985973, 0.020492062502844965, 0.015221752075125217, 0.02321826042892261, 0.020461925085838772, 9.999999999998899e-05, 0.08859231305176929, 0.07866655640343656, 0.07086131337196289, 0.07982061610557778, 0.06946588889779137, 0.07744443530340528, 0.07529233908912225, 0.06870148453518454, 0.04284156471922396, 0.057871117886617474, 0.06066692666346152, 0.06645928223350406, 0.08639945396714788, 0.06592080567441827, 0.050357236422159946, 0.058397771131005194, 0.06399344911116045, 0.0557707764470613, 0.9708871722859169, 0.9907503228281112, 0.9898224804656601, 0.984899549845896, 0.9850244417936976, 0.9747439639863135, 0.9869452999613081, 0.9883980037233611, 0.9882096015807406, 0.12848920406983544, 0.15657804328364033, 0.11976442307197899, 0.17932574720729721, 0.11623753370117795, 0.17524119016396178, 0.08307619034530378, 0.0864752492420443, 0.16182028412221483, 0.24497992189856632, 0.19744620338206686, 0.3402266685771239, 0.21246054219027966, 0.514565266954959, 0.17413066745499817, 0.429935961648899, 0.12359386208002121, 0.1822807735763845, 0.11979175804248954, 0.08272951858117816, 0.11181575987490322, 0.0906632254242895, 0.0672484535199297, 0.1016615374247869, 0.09794986122960092, 0.03566234621784592, 0.11521409021425755, 0.04465750823587733, 0.03858245267549554, 0.09157179338868537, 0.11404811367215484, 0.08819727815280043, 0.04834837022473437, 0.09566575661059074, 0.09680493502398402, 0.08050945607923277, 0.014964657932478587, 0.009872143151907764, 0.019094753494120043, 0.005648393683144626, 0.01755444345694812, 9.999999999998899e-05, 0.10806693474780726, 0.003650122962564617, 9.999999999998899e-05, 0.05270580942358161, 0.07554608066946134, 0.10429651355518799, 0.05521308192729901, 0.0760238541913304, 0.013096490649090797, 0.0380680687901338, 0.09385687658030606, 0.06887143055227285, 9.999999999998899e-05, 0.010397912227064432, 0.028224694665084815, 0.055802504709953404, 0.037047383131128875, 0.03420476070985912, 0.12782094620646856, 0.03258430301340143, 0.031125470870854044, 0.10324001384842463, 0.14021244617091488, 0.0865854553549339, 0.0025753598651637732, 0.12740351411646644, 0.1320350991179543, 0.12089951198649085, 0.03485673993382277, 0.04087699958088875, 0.39538965482920685, 0.3566041469475746, 0.32534503697007744, 0.4208273135879538, 0.3126581148553258, 0.37820863112250847, 0.3682622050910541, 0.3291027653662796, 0.34591193205734294, 0.08232669210441412, 0.07477089104414769, 0.09547293008123381, 0.07715801834552216, 0.08121081148891995, 0.07713346524093101, 0.0679316663333035, 0.06817645590984689, 0.08275898327592646, 0.14602795321667705, 0.12753023022771592, 0.14750987336378762, 0.14009808766863951, 0.1578378610513751, 0.1353515953911798, 0.15633370127939816, 0.20396012779585915, 0.1730804171779622, 0.18087413311119593, 0.24018574478489885, 0.25060972657917346, 0.22535738298760932, 0.2220237758094935, 0.22741642043825527, 0.21766141594264188, 0.2591644030311351, 0.23731596512190922, 0.2002322560907136, 0.18111413097351725, 0.20068174799200822, 0.16303831655793632, 0.1391919095665306, 0.19719986903965037, 0.18755705132861145, 0.1989748264228639, 0.18698369653235836, 0.17022637189457857, 0.16656669340813735, 0.1835778097324059, 0.16852537039615856, 0.1592919084548332, 0.1703962486823708, 0.1771782161861093, 0.1605833870265162, 0.16577100361215757, 0.16653502771390793, 0.15734851753732693, 0.17464858572573616, 0.17138374579319537, 0.13587697984962377, 0.1944796356015488, 0.17091547302176735, 0.16905987209117923, 0.17709429782712816, 0.47272997633293645, 0.45916123295469324, 0.14944226381297088, 0.42947404184912774, 0.1833238364778691, 0.3719251536254894, 0.16531059692935834, 0.17043859918885151, 0.4026509739331474, 0.2231348442217871, 0.363829985419756, 0.16907555785310346, 0.22754406603261323, 0.2993341072512866, 0.3229922603028992, 0.19623520168622133, 0.19212169955004044, 0.18603794093469384, 0.1995296194179167, 0.1868775488552863, 0.18896712567793073, 0.19141825981000948, 0.18617540521640574, 0.1984577879788202, 0.19889180228058823, 0.17985475303630505, 0.2016764229956397, 0.06433228339771813, 0.06260216922567852, 0.059491208198915735, 0.06457273002607777, 0.06272953659683622, 0.06150390973023567, 0.07370101233875903, 0.0644586924914351, 0.06128762163659596]}, "mutation_prompt": null}
{"id": "2b3fd745-47c1-42cc-95a6-61b01bb6c00c", "solution": "import numpy as np\n\nclass HAPSODPPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # Dynamic Inertia Reduction\n                self.w = 0.9 - 0.4 * (self.evaluations / self.budget)\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODPPlus", "description": "HAPSO-DP+ with dynamic inertia reduction for improved convergence balancing exploration and exploitation.", "configspace": "", "generation": 27, "fitness": 0.17100869517785172, "feedback": "The algorithm HAPSODPPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.39568592471105135, 0.2689095615763176, 0.3288121442278783, 0.436186963123139, 0.36016827841990484, 0.4775301442859422, 0.1737307451052309, 0.3698736030849983, 0.3270595936731293, 0.010405443037968864, 0.07503902636394888, 0.04774269284600763, 0.01986287713457424, 0.01402259961195873, 0.07139686810309054, 0.012759881698102826, 0.012107625795772181, 0.017926279905019715, 0.06873517053108158, 0.05919515949367904, 0.07773770717455786, 0.058800326511747936, 0.061192937752075904, 0.05861608444458799, 0.0697194117849278, 0.07154915964262032, 0.0665723082783648, 0.04883218060415051, 0.0440922336096391, 0.038831896089149276, 0.06089341997325881, 0.04924083010218527, 0.05687404920612571, 0.04250865380973956, 0.06875676239035744, 0.04979155697307924, 0.9754998038303628, 0.9907402585216903, 0.9898230525704701, 0.9849039831774856, 0.9850244606693538, 0.9746344891005746, 0.9869557224305867, 0.9884058749272358, 0.9882075285039773, 0.13443678296107642, 0.09518987405083024, 0.1386779741578592, 0.13963882467298516, 0.159522079292027, 0.12927003240389745, 0.07785380044281753, 0.08418717335603776, 0.09373133419471069, 0.1955652888386713, 0.32059652615140766, 0.2036806095312551, 0.3120521950289582, 0.20026075082536832, 0.1737192856996802, 0.1473878515185797, 0.11750186125437634, 0.31635755968337076, 0.07595542996767457, 0.09680381864388765, 0.03209068416342964, 0.07513165577555925, 0.08088457644027425, 0.06591057037283721, 0.0900276239233393, 0.21005836149419888, 0.05245065869753851, 0.013447646721025386, 0.06311770985831333, 0.014147633761969702, 0.0798371125275893, 0.1343684182785797, 0.0995733665568318, 0.07482968539412216, 0.06846674227659444, 0.06092351153472031, 0.05171339862854274, 0.019069110287812663, 0.016721640635062762, 9.999999999998899e-05, 9.999999999998899e-05, 0.036464400201206226, 9.999999999998899e-05, 0.0005315512091872421, 0.010527325030139756, 0.06554375258182532, 0.1020716792014007, 0.042122495424824935, 0.09226806466472348, 0.10121770631433702, 0.054935001118421534, 0.06387875004581456, 0.04844503186622007, 0.036396683688070364, 0.01564554493233994, 9.999999999998899e-05, 0.04294015273100937, 0.005974359121553086, 0.03264816035002782, 0.001878933422576834, 0.00584552760072421, 0.03440329598708736, 0.02353261986354116, 0.102458950644025, 0.022897567439339794, 0.05172336742474781, 0.060371037208727274, 0.016456243980391805, 0.08945696449212759, 0.04035999874924068, 0.040725728363065206, 0.028875913197414005, 0.31865768605759703, 0.3518344088908182, 0.26064074486069866, 0.3199790101293474, 0.344918826825947, 0.3090678496315743, 0.3142611453650521, 0.3029737233853703, 0.3161184773413688, 0.06745440793629154, 0.06376026261857337, 0.08096398115994219, 0.07490776503629859, 0.07075026763120806, 0.06278387970445876, 0.0713381247197119, 0.04786233685896746, 0.07885497492352056, 0.12874060949672916, 0.153021238144746, 0.13534279608645994, 0.13691660288775132, 0.14968795046463257, 0.1162982561832252, 0.14532837616689553, 0.1767923786571579, 0.16785460371225946, 0.20080653933745285, 0.2433685655677913, 0.22871742370053216, 0.24152452821204307, 0.21228399129120334, 0.20935420857903098, 0.23596740701004315, 0.2308528858891521, 0.2099827090474753, 0.1491396128419219, 0.14255531237580654, 0.14379430480118338, 0.2316349844861052, 0.1695258787377255, 0.1503319500554744, 0.19064253929959385, 0.1564876203404727, 0.15744237224085667, 0.1713083286895728, 0.1563450953409361, 0.17241939364363312, 0.18346178235060973, 0.18859700262188217, 0.16317998769787667, 0.18338629924642225, 0.1539408351824748, 0.16702945694555527, 0.16646738563599917, 0.1579323688909059, 0.1632399890126982, 0.16232772891886016, 0.1355605282833141, 0.16358094671725487, 0.16707636930335334, 0.17455335417601037, 0.16086288482576472, 0.43784681506516665, 0.4167619690801133, 0.1465088427258039, 0.38105969522711547, 0.1840398690379461, 0.17717657222068905, 0.16798504395400937, 0.14407260593304194, 0.16655731807332286, 0.17036016000274468, 0.29834508406014504, 0.15781204966310725, 0.25341076158451825, 0.28576283451017026, 0.36775963753625973, 0.20362509759519465, 0.19521616965468658, 0.19600998279771642, 0.17699649640674509, 0.18494392990496777, 0.18141831656369978, 0.19459456734803082, 0.18120080415594397, 0.17678130107457857, 0.17464414556362384, 0.1871790159601492, 0.188166820089111, 0.06650925377701455, 0.06466957360168668, 0.062434326765133275, 0.0628365102800943, 0.05909317904349176, 0.05645185488042426, 0.06216830153035369, 0.06306301569122863, 0.06011173921931989]}, "mutation_prompt": null}
{"id": "06870ae6-d455-4ce4-be85-ff3554b76bb5", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations with stochastic local exploration boost\n                if np.random.rand() < 0.6:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2) + 0.1 * np.random.randn(self.dim)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSODP with local exploration boost through stochastic differential perturbations, improving diversity and convergence.", "configspace": "", "generation": 28, "fitness": 0.2813677387561871, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7154207877780365, 0.8501653847987051, 0.8168771813499501, 0.7742239911143136, 0.8181376585699525, 0.8109059991213932, 0.7458832929808712, 0.8287237941152934, 0.8616157597197611, 0.12686265141801978, 0.05368819858334195, 0.05831923969497388, 0.037212570994306415, 0.046602618242968075, 0.048569097305531606, 0.08732677143187662, 0.12061883699971732, 0.08767392087667725, 0.14408647255382545, 0.12090762271569166, 0.15676901212004413, 0.10358927356855907, 0.10657753711597473, 0.11795749994957883, 0.08816961041259364, 0.1018681322269751, 0.0819368166501121, 0.0896650135674949, 0.08879410310933455, 0.10214892533104358, 0.09328832104258056, 0.09690371942079168, 0.11018772661925358, 0.10070738737735885, 0.1020136874469374, 0.14805327617155162, 0.9889227969525209, 0.995950883460711, 0.9867366715445723, 0.9775678273687279, 0.9830601329497259, 0.9644689409890386, 0.9887136219349678, 0.9875660977902194, 0.9808502560238824, 0.21864482788705464, 0.23162605522947044, 0.21302232916563935, 0.36850122577172806, 0.1682113418442872, 0.2908970641311689, 0.26499337726372985, 0.23499448602928175, 0.3049226716127955, 0.3990012530667991, 0.7657437516049179, 0.8728062231442028, 0.8162262102806472, 0.18851960569742154, 0.8541172447763596, 0.7496916798578912, 0.31848049365961173, 0.2146099927266648, 0.207312549590975, 0.16823116810365168, 0.17052457179277536, 0.21882593455108634, 0.20552414413449172, 0.19145043154154195, 0.19626195521454515, 0.1355777889792047, 0.2205628967979586, 0.22862632853032439, 0.12217955974824213, 0.17140972470720062, 0.2060265300185935, 0.23953051245424195, 0.2199199852898236, 0.1668942831399931, 0.344926709951898, 0.21216329184649196, 0.06123229925164775, 0.04416993294125293, 0.09717068990650679, 0.038259870099139004, 0.11842718472015734, 0.01802645967588523, 0.07992687603616944, 0.08657760325583441, 0.12270033079025344, 0.175573597560839, 0.35403609291855465, 0.39464022619617756, 0.18368670893742, 0.06827526115128624, 0.15946080861305856, 0.09696633245009834, 0.18794670630065868, 0.20519941585825585, 0.05918200189270251, 0.1629093864133716, 0.049849001476646615, 0.07044210553044217, 0.062445533560251176, 0.07317012355196328, 0.13217910519320486, 0.09509561188258109, 0.147954316583499, 0.243637018144383, 0.13641550257885104, 0.26511510130868055, 0.16972937301744728, 0.24403105964118277, 0.19267369567583703, 0.07845324672066545, 0.08150711729674709, 0.09556125007337612, 0.5008196335650241, 0.5613897303714726, 0.5269266339742837, 0.6491138097834559, 0.5349360069388539, 0.49713805280288503, 0.49269281420155053, 0.7363760128222198, 0.5191201065060498, 0.10716722604327644, 0.09960371152164282, 0.09823268084158643, 0.11164193596778282, 0.1755493303787944, 0.13006285509789994, 0.07424092150558703, 0.09871308116689392, 0.17759536318259161, 0.18269208207164522, 0.28742109742848276, 0.12630138110658518, 0.12655445803886456, 0.18718376577242823, 0.19606068597417803, 0.16479391402007915, 0.33070608436102134, 0.1828445888789303, 0.32937914732973517, 0.3180979377778136, 0.28807047514176376, 0.3010707278112058, 0.249654050452504, 0.37217061593235323, 0.31997800303304746, 0.2866465421693636, 0.29579696002269296, 0.3014837762806919, 0.2800014459977197, 0.2253632924774256, 0.2861782853212719, 0.1985941128273334, 0.25777598089188114, 0.24514143339193017, 0.3268400130520187, 0.2522236593860122, 0.19331820062039606, 0.1641406410727535, 0.17251102900844129, 0.2023719168061361, 0.15659564533008596, 0.22306011728203556, 0.18187110300071785, 0.1783675292628788, 0.19480020271988785, 0.1870640583543307, 0.19254995009420794, 0.19901806791714938, 0.18421493812239564, 0.19282719005752014, 0.18280649489765, 0.1891170836430005, 0.3319969055565142, 0.21261981406516584, 0.18590482284787546, 0.16532502910152302, 0.15342702462168034, 0.854529005202405, 0.20058084220534234, 0.19634935797044006, 0.09992634553583468, 0.16998497989494832, 0.8057555803545143, 0.8148589842264256, 0.7755451812979478, 0.7484644436516723, 0.1980257709543708, 0.7420322084875044, 0.20016418058703334, 0.20963440998254412, 0.45921798011615755, 0.2024414228519097, 0.18674366567527956, 0.19853149473435794, 0.17715815940978696, 0.1846845957955614, 0.18702737775627154, 0.17982036743615715, 0.17092294797428165, 0.1772652687815769, 0.18397047958762336, 0.09341229101331106, 0.09202348907315394, 0.08069034480525517, 0.0783664239182944, 0.08056465863574958, 0.07816970302079584, 0.07311751260853694, 0.0847373644010837, 0.08658827652961976]}, "mutation_prompt": null}
{"id": "f5f06292-8a0a-46d1-9c90-32423480e9e0", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "160c5614-b54e-4c51-9b16-5c9fbcb7e273", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # initial inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Adaptively adjust inertia weight over iterations\n            self.w = 0.4 + (0.5 * (self.budget - self.evaluations) / self.budget)\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with adaptive inertia weight for improved balance between exploration and exploitation.", "configspace": "", "generation": 30, "fitness": 0.18921861770683726, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.4914980308336001, 0.4396653659744989, 0.45780992933715703, 0.3978708862518686, 0.5012352439593346, 0.4351053478612026, 0.3940474231151234, 0.4619638037794018, 0.4611083307905264, 9.999999999998899e-05, 0.036918149203443495, 0.023425827393787957, 9.999999999998899e-05, 0.01726128862361498, 0.012769783727701767, 0.025251261188818708, 0.09983868654472294, 9.999999999998899e-05, 0.07499593968934914, 0.06693333557199899, 0.0889485781055217, 0.0795700213025109, 0.07084823511828886, 0.06356904376307881, 0.07447921989176043, 0.07501000259283841, 0.07347743057428491, 0.03921052908548284, 0.06662150710208137, 0.05286234440299231, 0.06942336365538082, 0.05944280310741723, 0.06073426147787109, 0.055687602857332985, 0.07424869076817509, 0.042088352616706626, 0.9708982407426144, 0.9907501007601675, 0.9898213258577497, 0.9848986622401102, 0.9850235970407828, 0.9747398233487695, 0.9869453720070751, 0.988397738258448, 0.9882057543041358, 0.17041750562708546, 0.16323507879447274, 0.14079957319320036, 0.14043203762458156, 0.11678023397588566, 0.13905037739665638, 0.07968109778872823, 0.08613660369243348, 0.1453423572358019, 0.15887753697592433, 0.21590187527139615, 0.35730045054616644, 0.18620061312093317, 0.42566885134029175, 0.27804560622209984, 0.3012941600494521, 0.40130796869200136, 0.15828707405354303, 0.16431293864198926, 0.13928914417501292, 0.07811257171138986, 0.0990091278017382, 0.08006753406801259, 0.11160571202619829, 0.19148229422214225, 0.04978685707165764, 0.12924193004226303, 0.04678937036061148, 0.02898475008511381, 0.11274010703306181, 0.20657377446656633, 0.09109735775278971, 0.14510404224649687, 0.08026981676223954, 0.0329505973829326, 0.04531892175408414, 0.023891573374011932, 0.020182923586729684, 0.04382342169301012, 0.012958825928502171, 0.03335277088402999, 0.0015448727418468922, 0.1256165554827381, 0.0007505624044581438, 0.027374051889193618, 0.06128368409571938, 0.12869315932723935, 0.02322474593135082, 0.13408638318391897, 0.10149350239500832, 0.02568554264287337, 0.05445138832247087, 0.06185548872343061, 0.032760709272059874, 0.02590483014520506, 9.999999999998899e-05, 0.012679450636584266, 0.033559221661955796, 0.024065709779404587, 0.035937552239408754, 0.018346297083277396, 0.02722886366940125, 0.07151165981442176, 0.13234965490343897, 0.0060712596123894125, 0.09777405454823362, 0.08620875680619922, 0.08656799015984185, 0.09135663155747276, 0.08992632842525872, 0.14260505252176903, 0.03758046795947434, 0.3507711681095742, 0.3887538083787596, 0.3951267451063678, 0.3736177432012602, 0.3959424151590544, 0.33655095517123346, 0.32382462895852016, 0.4351133645252687, 0.3499878769331498, 0.08329204650014022, 0.08150983213710483, 0.08179583906224974, 0.06776176839045567, 0.08503831161421405, 0.07706961345366692, 0.0802133089274284, 0.06807251516888646, 0.08134533975707559, 0.13743499327682163, 0.1337042657110291, 0.1362110519940034, 0.16320946589834961, 0.16342450091556726, 0.12434100889952204, 0.14609540190641745, 0.13171432612084188, 0.15130330079013166, 0.1993683126854061, 0.19785946447800484, 0.2324736058528768, 0.277005892854281, 0.24454115924497033, 0.2492539226560644, 0.2562819928064757, 0.29748615408697276, 0.23117994246603746, 0.17302152471942223, 0.1680566349930095, 0.2120800791611096, 0.1797919328556683, 0.1524103696194119, 0.1646708427466379, 0.1823888333046969, 0.21073496104977574, 0.18694711337603298, 0.17755525280065154, 0.14806798451222658, 0.1844335336351629, 0.17759479843372827, 0.1723901544211649, 0.15950592644042494, 0.1729357413257694, 0.1606481934598547, 0.14546053185894814, 0.18074348045064104, 0.1591861012313064, 0.16921525385940894, 0.1795133856763237, 0.1498125127790576, 0.16234512699540304, 0.16529590476796963, 0.1637711174764832, 0.15886052133553163, 0.5571689287127701, 0.46438511222914314, 0.14870724669230184, 0.45566587900220723, 0.18504477877594194, 0.17285233899110009, 0.16628318505311923, 0.3153539524191894, 0.16872240058485932, 0.2668792003096061, 0.305133504584274, 0.15871835058624295, 0.1267108153040224, 0.23204820548220784, 0.312055348985122, 0.19598739943257426, 0.2665612288414776, 0.24832510040720945, 0.17555338064195547, 0.19838946044699002, 0.18595993491168683, 0.20652620452870385, 0.18197172257678718, 0.1868776989989972, 0.17511920357988986, 0.1881787499093618, 0.18043584743309382, 0.06923320955223278, 0.06510364523880219, 0.05086516564334109, 0.05224104718041578, 0.06547815742931395, 0.06847133566655916, 0.06931733058045797, 0.06184387365147226, 0.06273759639439869]}, "mutation_prompt": null}
{"id": "da727da0-1fab-4d89-9f4f-fc77a2187a21", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w_min = 0.3  # inertia weight min\n        self.w_max = 0.7  # inertia weight max\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.w = self.w_max - ((self.w_max - self.w_min) * (self.evaluations / self.budget))\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with stochastic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 31, "fitness": 0.265756176961542, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7185841886573756, 0.652942135127053, 0.6618215494983783, 0.7638617026057375, 0.7544399194301445, 0.6988376814145628, 0.7028129726267021, 0.7250079290180846, 0.6350626959513559, 0.4590040131015445, 0.05278083496196284, 0.04712454450118364, 0.03743393420844421, 0.03779789148404766, 0.13720396728670725, 0.3613975376333376, 0.05805293271927947, 0.03247547213318536, 0.11323281571671417, 0.10146267960432309, 0.10292111350102096, 0.12553944262965178, 0.11018697811985934, 0.11430024293882757, 0.11444720364914296, 0.10331452387265594, 0.059613095450408604, 0.07884222067458635, 0.08162833573955741, 0.08726163585309821, 0.074939635952043, 0.08055492661656172, 0.08127894757831489, 0.10069031109205229, 0.07986405484228853, 0.06541988053460734, 0.9744336847260231, 0.9907330476197999, 0.9897470567222431, 0.98438730810223, 0.9842018457976005, 0.9759129966504022, 0.9851995185630279, 0.9883670496446919, 0.9879649715811805, 0.23498891400034616, 0.21326368537309948, 0.22218841145507218, 0.2844889948300655, 0.3097032887017176, 0.26176533874256824, 0.2602379372295325, 0.2628670595339222, 0.08167209769746164, 0.21729879914281547, 0.5381006750488534, 0.5378986686389495, 0.7009155595208396, 0.21032106700319952, 0.19750777700347155, 0.5745982216029162, 0.12626458464705503, 0.6232024734259044, 0.16637131880961276, 0.11045338202512667, 0.1583497533982905, 0.09574762747565224, 0.1139237777233788, 0.2806513410129914, 0.17838759556018557, 0.08908060163855369, 0.1692201174875696, 0.3559497129038497, 0.051752444823696564, 0.11330955573132451, 0.2548775435203252, 0.17877998281513607, 0.14170740756001654, 0.3054126770722181, 0.15244586923915426, 0.2038215340953604, 9.999999999998899e-05, 0.029677882675429146, 0.04361449090788394, 0.03570916072764829, 0.10336083276760855, 9.999999999998899e-05, 0.4821011015723011, 0.27244075432313164, 0.0014383348712122546, 0.06303107865952151, 0.08475164950821368, 0.3500379708653012, 0.11108546319895718, 0.18780965948841954, 0.03186572731191917, 0.42406994383351837, 0.2531845473824008, 0.2943087522639095, 0.08367437090106611, 0.022681942802207256, 0.03094198106531454, 0.06880448982073673, 0.12604619988577304, 0.04448775178135089, 0.16258373949134808, 0.07836783794714919, 0.05305553888137815, 0.2526513618979136, 9.999999999998899e-05, 0.21179561584974727, 0.2925194688804752, 0.2194962249607726, 0.26242846449190915, 0.07499765542044456, 0.03968274933679061, 0.18267485851393372, 0.6445645908561378, 0.644597010408872, 0.5925817559490474, 0.637203974753461, 0.608718370322243, 0.5187800068381712, 0.6025816152632631, 0.48530566587783763, 0.5763138573061322, 0.11329453185325367, 0.08708420609426937, 0.0543195155615076, 0.13259428722348088, 0.12113384430476037, 0.12123581008666029, 0.06437664068820104, 0.13108840698135704, 0.10866071142218048, 0.16410998598459847, 0.1698760179235318, 0.17652331006788669, 0.16860857633908455, 0.17190945763378274, 0.1602785137429491, 0.15583426764593, 0.23460357069700677, 0.1593032298981072, 0.3804689056818885, 0.217698302878518, 0.2508923069964679, 0.29488655927832175, 0.25609839002241497, 0.39000777532307196, 0.2870087690271772, 0.30823963353927275, 0.3219669667360284, 0.21007494816844852, 0.2058046265813398, 0.27025578053669064, 0.20084014849204124, 0.2620127231569923, 0.22987092753332672, 0.30088324083244977, 0.2360276990566178, 0.2739799246046385, 0.16911294996779247, 0.1591475587705472, 0.20286429765532876, 0.19210522055931922, 0.20253843831724583, 0.1828643242791791, 0.2042038648518616, 0.18422893967254372, 0.2042421586251033, 0.1835349634971668, 0.18124587910513168, 0.20749168693968545, 0.21264003330062375, 0.1962994543331803, 0.18929830704435224, 0.19425012410642606, 0.18304176422942042, 0.19317775159717754, 0.2066415273324892, 0.6371968676709248, 0.15321996161535734, 0.8538616416844143, 0.1950497427034824, 0.19020577255034254, 0.16404653328879992, 0.7306011967450481, 0.7273312983677086, 0.6925112904930454, 0.5583957788194003, 0.5740458505143884, 0.19885111165248093, 0.40036412704970603, 0.17958350759289765, 0.20517638498374713, 0.11446369384239785, 0.11956454641961556, 0.18093360349069754, 0.19057886070471208, 0.20091863884994166, 0.18157761105456616, 0.18145928089309193, 0.18337552006441238, 0.18484381212716094, 0.19650403004278816, 0.16934369139339323, 0.06987022718945501, 0.0786821493814952, 0.07596091433193508, 0.06604101847238741, 0.0774868797161189, 0.07781947012980184, 0.07147838038053067, 0.06415080333854217, 0.08012059687637862]}, "mutation_prompt": null}
{"id": "32f82fc6-ae84-49a3-8faf-93de4b697da0", "solution": "import numpy as np\n\nclass EHAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                # Introduce stochastic component boost\n                boost = np.random.uniform(-0.5, 0.5, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]) + boost)\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "EHAPSODP", "description": "Enhanced Hybrid Adaptive Particle Swarm Optimization (EHAPSO-DP) with stochastic component boosting for improved exploration and exploitation balance.", "configspace": "", "generation": 32, "fitness": 0.1767325851021108, "feedback": "The algorithm EHAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.3479334254115751, 0.3463705103444511, 0.29460815614343283, 0.3117531313132791, 0.3060369706753817, 0.32944311843238694, 0.39169208367403463, 0.34434482263950206, 0.3151199726930549, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011343437394687461, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07931495850053727, 0.08111230035840322, 0.09571156351830357, 0.1016402914440998, 0.09073459254810001, 0.08040531527655326, 0.08613708985795476, 0.07659306014946055, 0.08377754681423899, 0.0752313734899901, 0.07398084148147077, 0.06271923255303913, 0.06318793876843687, 0.07307144811970034, 0.09141198672644091, 0.07031920621350474, 0.07322657091106777, 0.0669898340682159, 0.9819970877747495, 0.9899091400214189, 0.9839561044569753, 0.9581428355464514, 0.9875324050484553, 0.9761051027666573, 0.9835815377368625, 0.9683454883006245, 0.9824886093446062, 0.18476279476018065, 0.1595229273234574, 0.16484060336656092, 0.17822528001672566, 0.18628527980921783, 0.17720187058918313, 0.1732952848851974, 0.18475213590979123, 0.16794957417812328, 0.20422185471856324, 0.2345462182155279, 0.20763386294505892, 0.2625131685842943, 0.23838904074628986, 0.2579653005329533, 0.20241176267248506, 0.2103977094469579, 0.24143224821478337, 0.11981354593665616, 0.1078068424249039, 0.09886937375794147, 0.11170399121502739, 0.12371783149559634, 0.1061348960717221, 0.1255705887036067, 0.10103042580632604, 0.10916157651351477, 0.1180016468714461, 0.04634022000853388, 0.09689146124030379, 0.11135679292135825, 0.10685109793278913, 0.11160988523255988, 0.09586483593435535, 0.005750590627497276, 0.1239847144635231, 9.999999999998899e-05, 9.999999999998899e-05, 0.007649463277028534, 9.999999999998899e-05, 0.022192846574056957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07525986283684594, 0.06726779236495128, 0.10204652301482764, 0.06598400009340655, 0.01835125749732247, 0.05387305511467455, 0.019860481881454506, 0.056548380113628394, 0.04734773931755176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031153121473612155, 0.03832523971337176, 0.05442591233185867, 0.061770135833709494, 0.04383622240365026, 0.06318575835850859, 0.04278282664872746, 0.044807512996934196, 0.05327718759297917, 0.30418843721186806, 0.3163977204610223, 0.29762862557980707, 0.3286506762888898, 0.3063005406374709, 0.310823182289397, 0.2980958948003878, 0.3136188142451931, 0.2989364781843916, 0.09076056509584651, 0.08660315454281842, 0.09130478401772757, 0.07957213262241436, 0.08165383875871723, 0.09125471630206872, 0.10443088804700751, 0.07331807547557823, 0.08465730963772766, 0.14730154399899875, 0.1700351073241705, 0.150250579475262, 0.2020269250997352, 0.19370508985284218, 0.13369915267289978, 0.18804362988531653, 0.16577778668484422, 0.18488235759435268, 0.23634902932503454, 0.21420788130336899, 0.2250636088751704, 0.25764662666178606, 0.21640432240390384, 0.23164384920472259, 0.22947181843772047, 0.22416965051602988, 0.22225216478517063, 0.18248083436106155, 0.1578339363154444, 0.19295411716446065, 0.16601149649769886, 0.13768197538304683, 0.15507796267907747, 0.1730920303807283, 0.17806026404138375, 0.17151233934300214, 0.18709784372043836, 0.19176571177630863, 0.2007845180306541, 0.17995124044759636, 0.19471496615257733, 0.17663385120418662, 0.22476286497795472, 0.18053487815722602, 0.191410993844235, 0.18371007225936242, 0.1684532123805702, 0.17164438900393109, 0.1740449685031339, 0.19392267911631356, 0.17158088556816165, 0.17317881693999337, 0.1816477730862408, 0.18369454794599804, 0.3731273664460807, 0.18197723374958497, 0.151864626056596, 0.39525053525716836, 0.1855732471181336, 0.19091783031784648, 0.14370221331220367, 0.16433581003142483, 0.3783809070783455, 0.2958280571448879, 0.16381157274466218, 0.1102723222586699, 0.3670719859755892, 0.16719924796050678, 0.29386468190957027, 0.2035702367372323, 0.20880368280005512, 0.20471355797602964, 0.2026842138268744, 0.1629192515515846, 0.18957165378426322, 0.17689703021564673, 0.18100979767692493, 0.18185649817176464, 0.18667969150615116, 0.18157918525753947, 0.1849853466720066, 0.06820519787107038, 0.07330667035693661, 0.07653565340850255, 0.07745698935925227, 0.07628781615580993, 0.07863640537482675, 0.09655079999963567, 0.07918358725468877, 0.06904880078241826]}, "mutation_prompt": null}
{"id": "59ed6b74-3562-4324-86ae-43cbd573791b", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # inertia weight (modified)\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n            \n            # Adaptive inertia weight adjustment\n            self.w = 0.9 - ((0.9 - 0.4) * (self.evaluations / self.budget))  # New line\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with adaptive inertia weight adjustment for improved convergence.", "configspace": "", "generation": 33, "fitness": 0.18796449960789077, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.46404640016441623, 0.4101562097733552, 0.3724506608687159, 0.5145565302591173, 0.4192983970475166, 0.5226015719089221, 0.41028264757009725, 0.3966563720971483, 0.3331446485954873, 9.999999999998899e-05, 0.030571108891803478, 0.11279421076278373, 0.03319056498985973, 0.020492062502844965, 0.015221752075125217, 0.02321826042892261, 0.020461925085838772, 9.999999999998899e-05, 0.08859231305176929, 0.07866655640343656, 0.07086131337196289, 0.07982061610557778, 0.06946588889779137, 0.07744443530340528, 0.07529233908912225, 0.06870148453518454, 0.04284156471922396, 0.057871117886617474, 0.06066692666346152, 0.06645928223350406, 0.08639945396714788, 0.06592080567441827, 0.050357236422159946, 0.058397771131005194, 0.06399344911116045, 0.0557707764470613, 0.9708871722859169, 0.9907503228281112, 0.9898224804656601, 0.984899549845896, 0.9850244417936976, 0.9747439639863135, 0.9869452999613081, 0.9883980037233611, 0.9882096015807406, 0.12848920406983544, 0.15657804328364033, 0.11976442307197899, 0.17932574720729721, 0.11623753370117795, 0.17524119016396178, 0.08307619034530378, 0.0864752492420443, 0.16182028412221483, 0.24497992189856632, 0.19744620338206686, 0.3402266685771239, 0.21246054219027966, 0.514565266954959, 0.17413066745499817, 0.429935961648899, 0.12359386208002121, 0.1822807735763845, 0.11979175804248954, 0.08272951858117816, 0.11181575987490322, 0.0906632254242895, 0.0672484535199297, 0.1016615374247869, 0.09794986122960092, 0.03566234621784592, 0.11521409021425755, 0.04465750823587733, 0.03858245267549554, 0.09157179338868537, 0.11404811367215484, 0.08819727815280043, 0.04834837022473437, 0.09566575661059074, 0.09680493502398402, 0.08050945607923277, 0.014964657932478587, 0.009872143151907764, 0.019094753494120043, 0.005648393683144626, 0.01755444345694812, 9.999999999998899e-05, 0.10806693474780726, 0.003650122962564617, 9.999999999998899e-05, 0.05270580942358161, 0.07554608066946134, 0.10429651355518799, 0.05521308192729901, 0.0760238541913304, 0.013096490649090797, 0.0380680687901338, 0.09385687658030606, 0.06887143055227285, 9.999999999998899e-05, 0.010397912227064432, 0.028224694665084815, 0.055802504709953404, 0.037047383131128875, 0.03420476070985912, 0.12782094620646856, 0.03258430301340143, 0.031125470870854044, 0.10324001384842463, 0.14021244617091488, 0.0865854553549339, 0.0025753598651637732, 0.12740351411646644, 0.1320350991179543, 0.12089951198649085, 0.03485673993382277, 0.04087699958088875, 0.39538965482920685, 0.3566041469475746, 0.32534503697007744, 0.4208273135879538, 0.3126581148553258, 0.37820863112250847, 0.3682622050910541, 0.3291027653662796, 0.34591193205734294, 0.08232669210441412, 0.07477089104414769, 0.09547293008123381, 0.07715801834552216, 0.08121081148891995, 0.07713346524093101, 0.0679316663333035, 0.06817645590984689, 0.08275898327592646, 0.14602795321667705, 0.12753023022771592, 0.14750987336378762, 0.14009808766863951, 0.1578378610513751, 0.1353515953911798, 0.15633370127939816, 0.20396012779585915, 0.1730804171779622, 0.18087413311119593, 0.24018574478489885, 0.25060972657917346, 0.22535738298760932, 0.2220237758094935, 0.22741642043825527, 0.21766141594264188, 0.2591644030311351, 0.23731596512190922, 0.2002322560907136, 0.18111413097351725, 0.20068174799200822, 0.16303831655793632, 0.1391919095665306, 0.19719986903965037, 0.18755705132861145, 0.1989748264228639, 0.18698369653235836, 0.17022637189457857, 0.16656669340813735, 0.1835778097324059, 0.16852537039615856, 0.1592919084548332, 0.1703962486823708, 0.1771782161861093, 0.1605833870265162, 0.16577100361215757, 0.16653502771390793, 0.15734851753732693, 0.17464858572573616, 0.17138374579319537, 0.13587697984962377, 0.1944796356015488, 0.17091547302176735, 0.16905987209117923, 0.17709429782712816, 0.47272997633293645, 0.45916123295469324, 0.14944226381297088, 0.42947404184912774, 0.1833238364778691, 0.3719251536254894, 0.16531059692935834, 0.17043859918885151, 0.4026509739331474, 0.2231348442217871, 0.363829985419756, 0.16907555785310346, 0.22754406603261323, 0.2993341072512866, 0.3229922603028992, 0.19623520168622133, 0.19212169955004044, 0.18603794093469384, 0.1995296194179167, 0.1868775488552863, 0.18896712567793073, 0.19141825981000948, 0.18617540521640574, 0.1984577879788202, 0.19889180228058823, 0.17985475303630505, 0.2016764229956397, 0.06433228339771813, 0.06260216922567852, 0.059491208198915735, 0.06457273002607777, 0.06272953659683622, 0.06150390973023567, 0.07370101233875903, 0.0644586924914351, 0.06128762163659596]}, "mutation_prompt": null}
{"id": "902ebd2f-baba-4f56-ad36-8cef3a4e9037", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "178c92eb-e06e-4fdb-b08b-e339fe15e587", "solution": "import numpy as np\n\nclass HAPSOIPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.8  # refined mutation factor\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply improved differential perturbations\n                if np.random.rand() < 0.4:  # adjusted probability\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSOIPS", "description": "Enhanced Hybrid Adaptive Particle Swarm Optimization with Improved Perturbation Strategy (HAPSO-IPS) which refines the balance between exploration and exploitation by adjusting velocity updates and perturbations.", "configspace": "", "generation": 35, "fitness": 0.32325169548261384, "feedback": "The algorithm HAPSOIPS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.8706149480849357, 0.8216490321457274, 0.7966050086112646, 0.8277514167752063, 0.8094488822315393, 0.8028663636408546, 0.8419484887969256, 0.8494275707513987, 0.8511709063778059, 0.1296717726639105, 0.5544173024498724, 0.6777210715416814, 0.2547499000543054, 9.999999999998899e-05, 0.17736814046705873, 0.4142001446072624, 0.6798865491196143, 0.053881819625352545, 0.11221993225461069, 0.10224383907269607, 0.12692030038461233, 0.13645406151096684, 0.13036556037908553, 0.10037338896731929, 0.13391641946249588, 0.13421462248054794, 0.105235468930573, 0.08883189175783102, 0.10170204131512361, 0.1074497920855958, 0.12113154610180932, 0.09258241316962612, 0.12130489989195226, 0.10726051015607896, 0.10125528077386048, 0.09162508138265779, 0.9781314398049774, 0.9933541811502042, 0.9865740668561941, 0.9849207773791535, 0.9851904322976202, 0.9773175776808958, 0.9854120940272382, 0.9888852287828034, 0.9870934236654715, 0.38665304814621515, 0.42545495226921515, 0.35108953989993996, 0.5077809766303516, 0.495576591056738, 0.49824808862639947, 0.3219585848129968, 0.47775092244222106, 0.36256195407318126, 0.1719693826875568, 0.8280297391176397, 0.6456949859608319, 0.6546330489606835, 0.2812022637793491, 0.2014614403174919, 0.16048473460068158, 0.21884943998439, 0.23647029535272146, 0.130414087428801, 0.6456243496813725, 0.12334142882546673, 9.999999999998899e-05, 0.6097371446374534, 0.3574426334980091, 0.22399220257286812, 0.2526864887257877, 0.13010880441533845, 0.6387187956595035, 0.1820528540461741, 0.12511982505117025, 0.4331417645095681, 0.36493820902299035, 0.1688437305992917, 0.11864580635224942, 0.13349035396224773, 0.12807839592319703, 9.999999999998899e-05, 0.20189804364807962, 0.05286825513800453, 0.5716636073118773, 0.35089861122019084, 0.018891355639716445, 0.6055140915941062, 0.0088104739698176, 0.43232580816141164, 0.06772876168771158, 0.03898412626133918, 0.6338524738837537, 0.5204608683046492, 0.16652527492594305, 0.11164730562172953, 0.3336426557652993, 0.19191609154835665, 0.10060485247415085, 0.30022317794354436, 0.052169955367068366, 0.08393328213211593, 0.1702559618491727, 0.15866320011832868, 0.08310833715144705, 0.10348974869281569, 0.14823286321275542, 0.057868372526157286, 0.4289549026858245, 0.03288021088673754, 0.04809729179677691, 0.40770748351480257, 0.4328579730409149, 0.31245523788342444, 0.40618429873481365, 0.10888997931084399, 0.09841981379348907, 0.7319960398342248, 0.7676048794407777, 0.7244804988872267, 0.7621885688661594, 0.763602318472325, 0.7698982228490394, 0.7536873511571359, 0.6747349567782702, 0.7935541960636104, 0.11807073356738129, 0.17631606830406277, 0.12733514564813964, 0.14952692769415066, 0.18483372421102462, 0.11509233252698192, 0.071707062305713, 0.09217361505686072, 0.17092728081694564, 0.21210329848992693, 0.4298778314824232, 0.1538054179864019, 0.3314947600492085, 0.15868006999963002, 0.2413404796070724, 0.32970049859956174, 0.19515029478099133, 0.2081916758401876, 0.4405737339172855, 0.2588759572997088, 0.3480474307724899, 0.42891637869307775, 0.3988726864960861, 0.35238720810291024, 0.3479325494049764, 0.361543086452463, 0.3452039861569727, 0.18631201288216614, 0.1771536990808139, 0.22097431672326484, 0.26488196456054436, 0.1969552286566545, 0.37059323329688243, 0.16823053461314175, 0.33678512637780633, 0.28464279534176073, 0.245400324364357, 0.15824243163797003, 0.1881350371693815, 0.18656938344784124, 0.22074069193994317, 0.20321937152845404, 0.21298892953505255, 0.18482462233061947, 0.20648568317593363, 0.24345187317763461, 0.17372536000493144, 0.19031865234710832, 0.21475953544081294, 0.21068802993459845, 0.18459731593295514, 0.1847671953148653, 0.21212122019507396, 0.19914210997470083, 0.8787502017992446, 0.16573251536075984, 0.18232440398366245, 0.9039400941176811, 0.20058411528396458, 0.15724423070864613, 0.1226947616580939, 0.1688667459663784, 0.8762777117933938, 0.8634355923058468, 0.15735052240227398, 0.21143132566535383, 0.10440420019209629, 0.16585441887177732, 0.7923894992872862, 0.10491886277760987, 0.10486162899691787, 0.7588324237850268, 0.18009008305702023, 0.19368732562581648, 0.18892003016556402, 0.19149549560563905, 0.1712640747569858, 0.182397474928932, 0.1811393539890459, 0.18199088446908895, 0.21893601384539407, 0.0778006644001511, 0.08020586069884628, 0.08279968705414997, 0.08407257526870215, 0.08969009563959607, 0.08250244490927194, 0.09335173540969077, 0.07941345151886436, 0.09506457125516066]}, "mutation_prompt": null}
{"id": "d484e423-3c2a-4a9d-bec1-cbd917830ab4", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply controlled differential perturbations\n                if np.random.rand() < 0.3:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced Hybrid Adaptive PSO with Controlled Differential Perturbations for Improved Convergence.", "configspace": "", "generation": 36, "fitness": 0.30561589019307867, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.8687469856236378, 0.8709637341691376, 0.8338393512795659, 0.6364516527368492, 0.8762662540443167, 0.8368672794638901, 0.843478683619512, 0.850185796941499, 0.18162161817894595, 9.999999999998899e-05, 0.03873028658176769, 9.999999999998899e-05, 0.4759207419598047, 0.11918512033073858, 0.6160298710825252, 0.6063402174749056, 0.6665755522073404, 0.027339968667113523, 0.10351753280803955, 0.11524600208140234, 0.11633031799527982, 0.11249624854176488, 0.0643441055454963, 0.1553431490106295, 0.14366306178700594, 0.11494504322484156, 0.07069791209390774, 0.10209500589779485, 0.040935782834418344, 0.09875048242931439, 0.09973707724005376, 0.07060490272519204, 0.0763303764946679, 0.09476159011424934, 0.06166684349044482, 0.09450802726409913, 0.9924855054483412, 0.993310963045178, 0.9857870250977675, 0.09975659778668289, 0.9834423809884447, 0.9777044711226955, 0.9898516021251393, 0.9901871747516418, 0.9889731147823995, 0.4512867745005219, 0.059491620174027204, 0.48897694298743, 0.5812091204641711, 0.15643106655202899, 0.21682528699403525, 0.4859459715241625, 0.08822807223999518, 0.36510034572970906, 0.22260791249821454, 0.3750526901997693, 0.34643592698053194, 0.22205822762427507, 0.19402281013408063, 0.1908422846904686, 0.1289563887695273, 0.22504847353293878, 0.8774538150934071, 0.26933657458871296, 0.1343650088556677, 0.13533413723038534, 9.999999999998899e-05, 0.17331339356248476, 0.6692049401479998, 0.40499430138520165, 0.1601661617256428, 0.132670323314379, 0.6651964956745294, 0.23174169385603305, 0.13459215252591095, 0.21988943615449374, 0.12592628689599783, 0.3706629583865546, 0.20487737600032685, 0.09190221084906791, 0.12861309540977794, 0.07638358738545736, 0.013314474819887567, 9.999999999998899e-05, 9.999999999998899e-05, 0.4448535863956409, 0.09631260405927455, 0.008887353307326928, 0.139190131423936, 0.0810704472565762, 0.6650088017691989, 0.2701403827413187, 0.2327211213807241, 0.4107460587370573, 0.03742571249888771, 0.07098981085177858, 0.6862127544325793, 0.5846644460152037, 0.24775867321388145, 0.1748218782927795, 0.03888081287167611, 0.16581448822811673, 0.10375360087429109, 0.09017591772028477, 0.07589359802216844, 0.22224243047153747, 0.07275986661872424, 0.25321267633682365, 0.5743682946677887, 0.44494384168707524, 0.42214473407454245, 0.5291749167281242, 0.2018659403323424, 0.10482442832385808, 0.08693538230472553, 0.36643467937684726, 0.17374757471786306, 0.7521443050231582, 0.7377124091417043, 0.6450634525581984, 0.8048921838511996, 0.8240964500493361, 0.4288653242709146, 0.8205867489945634, 0.6871298436022895, 0.8163552051114134, 0.10416066415677194, 0.0781540683700852, 0.05374865062767875, 0.10630419921370393, 0.11996601344466018, 0.15010566350124666, 0.07608327660304148, 0.07852147657232889, 0.12062040116983241, 0.26421092691653025, 0.23712289498304384, 0.1406488867703205, 0.3559776312956623, 0.405247879973035, 0.4479924065255486, 0.2734286124049866, 0.18157601295059145, 0.2106050234850816, 0.24350251743797247, 0.2784553087303092, 0.33339961102162696, 0.46515759603227946, 0.2169615994159214, 0.38971115851462723, 0.37163211762768356, 0.3069599686197344, 0.3052166709657629, 0.24684946701945587, 0.20974545215724216, 0.3040707069027193, 0.2531977271065655, 0.2170350906123354, 0.2695719423960071, 0.19275249651868576, 0.23186092200174402, 0.3481987226857649, 0.27280791751267164, 0.15710215293807817, 0.18834617910200024, 0.21736830194193957, 0.1819379530814096, 0.19882448843182332, 0.216771929071103, 0.20163334530257104, 0.2626734917929726, 0.21192596727928692, 0.1975094299929443, 0.197382707807921, 0.17507388106393862, 0.22419850524942941, 0.1843803403136519, 0.1901494104167446, 0.16534345690354946, 0.18499407662796463, 0.8791735226647737, 0.6451033513181275, 0.1533305850117962, 0.8885893337825992, 0.20087205637490857, 0.19639974452188902, 0.12257333137590298, 0.16765415291249697, 0.8744709143254976, 0.8905468851913078, 0.8326070939871809, 0.11189943654162848, 0.10429414676305826, 0.165401892403226, 0.20942742408769577, 0.20151816618502094, 0.11196346770828602, 0.7705781125024715, 0.18553607647389003, 0.1939097686811777, 0.19894860771923184, 0.17784379854058208, 0.2116224441924881, 0.18588221413627481, 0.21487246227945112, 0.18603556187388914, 0.18468961732488431, 0.08729179498863338, 0.10148977145984595, 0.08519443861391696, 0.0893409795296618, 0.08882633641578064, 0.093997968340507, 0.10015003402709621, 0.09935364285280235, 0.08466922815444355]}, "mutation_prompt": null}
{"id": "3c5abf34-6ab2-4c7a-8466-97f19698343d", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply controlled differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    adaptive_mutation_factor = self.mutation_factor * (1 - self.evaluations / self.budget)\n                    differential = adaptive_mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced Hybrid Adaptive PSO with Controlled Differential Perturbations (E-HAPSO-CDP) which improves exploration-exploitation balance using a dynamic mutation factor.", "configspace": "", "generation": 37, "fitness": 0.31940502098999296, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7856747789083075, 0.7666975352424372, 0.7903111296503484, 0.8642793868974042, 0.7691143044677029, 0.7461350405074947, 0.8530012179552168, 0.7856244984533896, 0.812438869874093, 0.5626219857742752, 0.5061122785170824, 0.045449866865076904, 0.10069575065331815, 0.5502044801438064, 0.5118903674594677, 0.4445385432909018, 0.23729588912454103, 0.04870866804532903, 0.14448686394837074, 0.11734128537537147, 0.10527491760478258, 0.11534388785708538, 0.11887647906330034, 0.09860826466063755, 0.14314228522796313, 0.15015961256650046, 0.12538592046739483, 0.11934485055322586, 0.08517571940506985, 0.09861514843229413, 0.08630144799472328, 0.09822983178900324, 0.12727856621596934, 0.08538385055792075, 0.12010965138990415, 0.06635936975557155, 0.9499367853712686, 0.9897688589169005, 0.9897133714725767, 0.9889924917234569, 0.9841798052930553, 0.9771840263596545, 0.9858988430193668, 0.9841106081607424, 0.9878646260353736, 0.42464767621793675, 0.3618827785919445, 0.33497881776638994, 0.5226274102057129, 0.27230069074001295, 0.34859053185500244, 0.4970054044559875, 0.27627213510266935, 0.3371689856674859, 0.8331319214530252, 0.7938854761417177, 0.7614165322860666, 0.2792020059925717, 0.903565585461025, 0.19189198226149706, 0.13556667540848044, 0.830747813616607, 0.3174880619262239, 0.62854644167473, 0.1267570680154475, 0.5838325637243021, 0.24671656006348264, 0.1405313953322913, 0.23572288760546467, 0.2342975579322354, 0.11074519577842823, 0.1410579166261947, 0.2246351695585589, 0.021034085258836988, 0.31401678525825094, 0.1324385217607914, 0.12805258636201466, 0.3287656639172447, 0.6721637904312547, 0.4766222403313891, 0.12275451664226711, 0.05514929666953772, 0.12328336753213864, 0.07850952363608343, 0.050117101520160245, 9.999999999998899e-05, 0.09360101125760079, 0.038122290420077865, 0.4520959278436807, 0.042873132237846945, 0.16802781091169705, 0.16763982382880527, 0.1772883549222577, 0.11553961765140741, 0.21682929969865972, 0.15590173929683548, 0.6322357165888315, 0.5479569610537729, 0.08150612098998555, 0.1228903054463204, 0.029656776725244915, 0.10225370019241198, 0.08780057939574903, 0.19874207271458322, 0.06737786900778808, 0.25704524055799516, 0.14695321246802107, 0.09461872662998194, 0.3357941217533965, 0.45385538513910884, 0.3210938595883498, 0.20994448193794302, 0.03749608253528436, 0.40783616210308804, 0.0565862032695148, 0.07802337264209003, 0.07658030760690548, 0.8011579630400197, 0.7425694929663216, 0.669177168232755, 0.6608286200454936, 0.640423993866942, 0.6949752831130298, 0.7676558192155581, 0.6903184626002381, 0.6751898281028389, 0.11275133173911667, 0.10551601347386785, 0.1089970102146619, 0.13106517972301257, 0.10664258153739392, 0.12652790332701258, 0.11569275110279198, 0.13935354047170945, 0.0930463722166689, 0.2706071544959867, 0.16444977919222614, 0.16045790883653588, 0.22283587497313673, 0.20892307447889202, 0.16351101213481212, 0.1870728735152326, 0.14430055714460488, 0.13490409689824423, 0.36446080493054633, 0.35928228145197194, 0.3811888871985045, 0.2742210501304059, 0.214901621173597, 0.33981114404164336, 0.3228873406999715, 0.3968232072978505, 0.42094276709253287, 0.28111115561945543, 0.22888481821173512, 0.21573399227956747, 0.4280452076664294, 0.21246634490328364, 0.32911622515806593, 0.31780305207572923, 0.25552026236233194, 0.2787856351886082, 0.20512240317262542, 0.19982048970353905, 0.2005658671618613, 0.21413025588867274, 0.21092698780169628, 0.19865149336427368, 0.21057613893685978, 0.19876357236673614, 0.1958509419001091, 0.18611446169097778, 0.23407810394066286, 0.20960004997827386, 0.19176991336520155, 0.21022653648850942, 0.1901936333955596, 0.1829620983569783, 0.19045271660324048, 0.19281373444465844, 0.20495876715721684, 0.1651450556165852, 0.15263259596134904, 0.8347608757586922, 0.2005318585723459, 0.19955290800243175, 0.09995162005865055, 0.16941579951298014, 0.8801911298946566, 0.7722883551125178, 0.7164965391822189, 0.807115305511653, 0.8388355646483254, 0.6208550883540029, 0.14259329583432367, 0.20540086373711752, 0.10472979531819404, 0.5645682284223947, 0.18981503532832034, 0.19616324820961695, 0.17786993655029204, 0.18727853713714238, 0.18149048318037353, 0.18821191637957513, 0.18599846000610265, 0.1809531705681896, 0.19523052671359198, 0.09930009406884766, 0.08110061526335755, 0.06803440648939418, 0.07238366046387823, 0.08584262096152273, 0.08074163900850984, 0.0884573686042075, 0.07966392667144517, 0.09311945063230453]}, "mutation_prompt": null}
{"id": "ef2c749e-267f-4a61-9b0c-44e3277abc28", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "fa24d439-8863-4f69-925f-cc4ccdcda657", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w_max = 0.9  # maximum inertia weight\n        self.w_min = 0.4  # minimum inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor_max = 0.9\n        self.mutation_factor_min = 0.5\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            w = self.w_max - ((self.w_max - self.w_min) * (self.evaluations / self.budget))\n            mutation_factor = self.mutation_factor_max - ((self.mutation_factor_max - self.mutation_factor_min) * (self.evaluations / self.budget))\n            \n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with adaptive inertia weight and dynamic mutation factor for improved convergence.", "configspace": "", "generation": 39, "fitness": 0.18643479449512237, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.43313574791835585, 0.3038824218707815, 0.4583995598728884, 0.5407659517046308, 0.4490403873665836, 0.40404695828937043, 0.4070330627839166, 0.3935555540656904, 0.5067238070506661, 9.999999999998899e-05, 0.10644258670868278, 0.013121110116143031, 9.999999999998899e-05, 0.0715263595728931, 0.011361908724465852, 0.023882323178289533, 0.12297384883439078, 9.999999999998899e-05, 0.07951679023345382, 0.08801242027239109, 0.08790025315283423, 0.049654269712687715, 0.0657865515040088, 0.08315055453874409, 0.06238762434865097, 0.06854878975690859, 0.06631897004519594, 0.056613311135496946, 0.07261227159463124, 0.07117984713775749, 0.07207402228321758, 0.05185093686845321, 0.052035639121529864, 0.05476990175184926, 0.06273183500612578, 0.06553824795702456, 0.9708464556877925, 0.9907502928214784, 0.9898224299960877, 0.9848996127917882, 0.9850244343019622, 0.9747544189257005, 0.9869440898270017, 0.9883980037233611, 0.9882096015807406, 0.1500177223358511, 0.16085254965186901, 0.10909369747632824, 0.16721494320024122, 0.14189558706426775, 0.16137939286109082, 0.0778961450479363, 0.08243537415776214, 0.13396956657324188, 0.31181264038779266, 0.25128131209057625, 0.2550549809155723, 0.4550068354900373, 0.20095827754080775, 0.17052861003982267, 0.42864087723022337, 0.12227956718190292, 0.34045951254654083, 0.07927431579214117, 0.06886507267803021, 0.040425477279180666, 0.09634415145932995, 0.083479141446271, 0.060085131073686404, 0.16859557582205376, 0.07820524862059797, 0.10142310679860433, 0.09067386269713007, 0.040275775475581366, 0.037878953251236136, 0.11382805099930715, 0.12364808452921205, 0.1096715526721258, 0.12537097552326615, 0.1546706645986473, 0.057726144391744505, 0.03912772816191956, 0.026233222784739718, 0.04014209151481751, 0.01803408825087971, 0.01044142551174787, 9.999999999998899e-05, 0.020667019559388766, 0.022521316065081565, 0.04111253413702831, 0.06003445548575359, 0.09681193260945908, 0.10626074854235523, 0.0848272172216793, 0.09564636506137192, 0.03258817555869664, 0.05173638774996159, 0.09006882950286377, 0.06478067895661588, 0.01907076423009002, 9.999999999998899e-05, 0.03499889091694508, 0.07614244336517073, 0.04148354073789018, 0.022035713515387023, 0.03241050716473659, 0.06038156364747305, 0.025898965549225106, 0.11412039596702073, 0.06395786024473404, 0.05605598941072587, 0.0806717704097577, 0.10472118630059468, 0.116337422474597, 0.04925307149563285, 0.03136775749847187, 0.046630422151561324, 0.4057008047543029, 0.36478152537729347, 0.33268633876492726, 0.32908666571868006, 0.2792240873517853, 0.37129387375761613, 0.3761994199862687, 0.3027121534520891, 0.43767400800197864, 0.08193807806502607, 0.08065171847524011, 0.09002857408647014, 0.0832445610856154, 0.0821554079037764, 0.0791048906398304, 0.051707551073238545, 0.06416686285297679, 0.07166730826438106, 0.16933272241091124, 0.1608212527541104, 0.13670905046601933, 0.13965337844195724, 0.17658905977510353, 0.1473360930696237, 0.15468748279058875, 0.15805051838481232, 0.18107314310577527, 0.2579014926254375, 0.22180712505534583, 0.250483969359094, 0.2565839833967739, 0.2328605638139174, 0.2033063158153845, 0.24147898699355308, 0.26880543414568814, 0.24760335651678356, 0.15629614628033506, 0.1765269536281614, 0.18245504539711843, 0.16623134830816177, 0.15175661580662214, 0.19799727470955597, 0.2081368583673684, 0.21403008991303718, 0.20269508009794235, 0.19100560707675796, 0.17642558599821168, 0.16734503657357602, 0.16220816476096644, 0.17011414313417395, 0.15968107437991963, 0.1631257669308408, 0.16981951830173947, 0.15917654025559058, 0.1613651158094055, 0.18239489093459849, 0.16384371149733956, 0.1704710579791343, 0.16213822999747096, 0.15975319373793995, 0.1744657770711927, 0.1661958316666281, 0.18075094615163567, 0.5025045505093131, 0.4766397068714775, 0.14634270554379158, 0.16497542557452183, 0.1847269038744328, 0.1813272324230959, 0.18502790584518736, 0.28027507628351267, 0.17067082735612382, 0.29812829741173064, 0.2506632417474015, 0.1618920917627269, 0.15043057851872732, 0.23533268284313502, 0.40849983236551, 0.1993178837762445, 0.12114220312263568, 0.19768993048984618, 0.1728670161727459, 0.19186389892073374, 0.20027071473292013, 0.18090130255545178, 0.17297159144850938, 0.1761290163116439, 0.18398783075527048, 0.17516928190840486, 0.17688710432353238, 0.06759933393173412, 0.05787688135492608, 0.06356764363996803, 0.05965667000515584, 0.06334992261121242, 0.07190279921524212, 0.07121777391013251, 0.06507011686231667, 0.07301174988031656]}, "mutation_prompt": null}
{"id": "c27d7a15-90e1-4855-a186-af00bd053e0c", "solution": "import numpy as np\n\nclass EHAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Adjust inertia weight dynamically\n            self.w = 0.9 - 0.5 * (self.evaluations / self.budget)\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply adaptive differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2) * np.random.uniform(0.8, 1.2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "EHAPSODP", "description": "Enhanced hybrid algorithm (E-HAPSO-DP) introducing adaptive inertia weight and dynamic mutation factor for better convergence.", "configspace": "", "generation": 40, "fitness": 0.1894184032372861, "feedback": "The algorithm EHAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.3692021765189297, 0.39268997885015244, 0.3911073075932211, 0.4445624132111259, 0.36305204609545194, 0.47490429953348823, 0.4539835794849243, 0.5033882581283478, 0.44513263745476406, 0.18512974485635392, 0.041780355136150304, 9.999999999998899e-05, 0.1692904813057574, 0.05827087336540482, 0.11813255494708719, 0.029465153855430803, 0.18685201531446916, 0.007223750309432453, 0.07179240101441176, 0.06320342631735476, 0.07833481319357927, 0.07437485005928579, 0.0748040706802452, 0.09088643794515516, 0.11357828390756863, 0.08961452543004433, 0.0775972542548734, 0.0583859606931636, 0.058841523021592734, 0.06428107383456094, 0.06403949871675763, 0.05938239512208021, 0.050342297403361824, 0.07354176488468689, 0.054141248456206825, 0.06857072963032385, 0.987257526938606, 0.9908171737690774, 0.9882351847120187, 0.9818721859241271, 0.9838520406217559, 0.9749504344223273, 0.9835977135301666, 0.9834623754866841, 0.98148782916815, 0.12150044860752474, 0.0563775059808862, 0.09506745243583936, 0.14727374598154996, 0.16406733002862328, 0.13549840091865206, 0.13928350432743264, 0.12305201276864486, 0.1271928428133371, 0.19894594289406786, 0.1464194040518847, 0.4481455869315767, 0.20498989373910403, 0.4327427007624991, 0.17489146474407102, 0.17845254719958326, 0.12773778316650863, 0.3507966358132274, 0.07754475010167339, 0.15033996540924544, 0.11397343273657135, 0.1850775852094716, 0.09436569994575106, 0.07016187727125434, 0.12443815038047668, 0.1051250061052924, 0.10056399315145315, 0.08851914586721321, 0.00997023292029231, 0.20757220303416668, 0.19478196072782317, 0.17021650802768162, 0.10727523060393618, 0.14809934103537647, 0.0704240001787928, 0.03953870246486568, 0.021821331828450807, 0.015364159052485449, 9.999999999998899e-05, 0.02832013020683355, 0.00627879638653972, 0.001670136933361377, 0.043944328752162254, 0.10842570134900287, 0.0433825215892355, 0.10990071823385494, 0.03947028534970709, 0.034068733735743484, 0.11695665245298348, 0.02551090703722181, 0.03462353233744164, 0.07307018141907884, 0.07239556607270492, 0.031661871760531146, 0.011454539258774044, 9.999999999998899e-05, 0.008319821139265104, 0.03229857287693938, 0.03556219948102679, 0.03776160408825968, 0.08596102831878705, 0.09490092846122788, 0.027407194164691617, 0.09634634972291733, 0.07818745117922077, 0.10603747532909713, 0.003733288751350261, 0.13434012035505982, 0.07106509469511824, 0.10101959263197402, 0.02631499129814041, 0.03441623012985495, 0.38310462967512093, 0.43499200057687426, 0.3581617252862158, 0.37350780985703136, 0.3570269238218202, 0.4370918147285593, 0.3840144804562805, 0.30679257406545046, 0.3586846913620054, 0.08104591524499316, 0.0645512978856354, 0.07871017865742902, 0.07815362433831974, 0.08089616834785196, 0.07701870248400411, 0.08944398854073021, 0.07526828278960673, 0.0884664601285221, 0.16434373025645, 0.16316128320098067, 0.13535001884042885, 0.1945768980171353, 0.1474897759449877, 0.14900352575627673, 0.19626302285661246, 0.15184536442300867, 0.14540234931544016, 0.2789620389147299, 0.2456334751484044, 0.24943916047429648, 0.24491316469971935, 0.2760488098562923, 0.24430888542499862, 0.22565489627706414, 0.24052748692084702, 0.2616838962126208, 0.1690187665161077, 0.14275959896469848, 0.17495270472568625, 0.1807214725780898, 0.17008581378148646, 0.15245300551564145, 0.2360665719746261, 0.23626314175648244, 0.19326272532838562, 0.1655824440746193, 0.1535949838272973, 0.17212556642529164, 0.160390044511318, 0.17235894752285763, 0.1905267655722932, 0.16891091683238013, 0.20039475246385474, 0.20244639848480506, 0.18799383933751335, 0.15399162198909377, 0.1700239291652983, 0.18571210049373754, 0.15898181770261832, 0.18207735935211722, 0.1811569482111468, 0.20428478698298735, 0.17666027194906364, 0.4679421632197803, 0.1616583080525137, 0.14513310844286076, 0.16267459757548441, 0.18436590447448797, 0.18015406691584845, 0.13596549644595057, 0.16240595478706676, 0.421751104114651, 0.2883170911762353, 0.17150661288921443, 0.2620983036572404, 0.19426028446515886, 0.17775613748306696, 0.18568638260123183, 0.2643928534297907, 0.2021695700234597, 0.24337212916323459, 0.17931242461841723, 0.18230654845070982, 0.17147220580529232, 0.1731771040452068, 0.18963099053793608, 0.18872696406892486, 0.17922586688909448, 0.17633859196571033, 0.1867376256873624, 0.0736796743079573, 0.06875691573583187, 0.08265183007152377, 0.06322493222467074, 0.06421289280997045, 0.06671894660203903, 0.0685871455467153, 0.06092569608253029, 0.06461465824633217]}, "mutation_prompt": null}
{"id": "b61f1174-e428-4dbd-a8de-85a4fc47f11d", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n                    \n            # Adaptive inertia weight\n            self.w = 0.9 - 0.7 * (self.evaluations / self.budget)\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "HAPSO-DP with Adaptive Inertia to dynamically adjust exploration and exploitation during optimization.", "configspace": "", "generation": 41, "fitness": 0.21524893354884791, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.5377097735592253, 0.5495899780432854, 0.4831786961714444, 0.645204222306968, 0.5770936469759491, 0.5430475513717159, 0.16885956184726714, 0.5257270581033453, 0.5779199117430669, 0.26380781932534414, 0.027741179895222068, 0.2873363901096472, 9.999999999998899e-05, 0.15902332872196878, 0.02247630981708204, 0.028462710722389817, 0.38077884558851227, 0.012592596073698448, 0.10314129527053906, 0.10509769205523767, 0.09089147704912959, 0.07324102830757495, 0.060261368395777004, 0.06861819602305663, 0.11338624752602355, 0.08574320451634976, 0.07060912047575352, 0.05937568712358021, 0.073400542996371, 0.0744149530476459, 0.07170210066621108, 0.06301887040384047, 0.046258843623817825, 0.06476635172358258, 0.07384843546076969, 0.058801818074795675, 0.9709027408315895, 0.9907497352853009, 0.9898202103033896, 0.9848972735832681, 0.985022710522728, 0.9747362915763217, 0.9869455712124129, 0.9883975555404922, 0.9882012051346519, 0.1900541320187885, 0.17251729069626454, 0.07879979275468885, 0.26401894472547394, 0.13937627592117752, 0.20318008644694863, 0.1086500604106706, 0.08543981430541647, 0.15603800926427502, 0.160392912088676, 0.4632770736637919, 0.4572302770228929, 0.2443280783869325, 0.6044639107909474, 0.4902569587585347, 0.19712605010489304, 0.12174219439530731, 0.15688922882665612, 0.13698063261095872, 0.11481722043920217, 0.08550490851326209, 0.1028510919720722, 0.08299804358860552, 0.11496283940172947, 0.13244678636304308, 0.05660169352889022, 0.09135742990293128, 0.04890007913243777, 0.0469018622187265, 0.009240503098856379, 0.19252567401551968, 0.3242801293252644, 0.08978057147660967, 0.11155374936334761, 0.2947062555341806, 0.11224802636788844, 0.03815636419647728, 0.08995525217144096, 0.035369554421625815, 0.0004963694049736622, 0.08288535947462083, 0.03608716782671417, 0.08099970811616297, 0.027226632493687064, 0.04498856015246078, 0.24407358465981466, 0.13692654539386262, 0.03244071536470783, 0.27680990970845387, 0.1113328160000927, 0.007879750568647204, 0.18770736064287763, 0.08410846472225186, 0.14482515357921222, 0.015035154743152868, 9.999999999998899e-05, 0.060346633295669694, 0.08502482933605238, 0.05319969108243383, 0.03193484476937991, 0.06598821510807862, 0.03329949204333238, 0.06098304761623363, 0.15501074430111328, 0.0051684186680891475, 0.18239350394250964, 0.18825485802221598, 0.12660398348363833, 0.13757664560589133, 0.056689930775187136, 0.15270454752600038, 0.049334035095841666, 0.4293884738532443, 0.4695353385714779, 0.3875991476874423, 0.4095661463491175, 0.4702680426951885, 0.47540369300382135, 0.510285981970872, 0.4275674205083735, 0.4293967527605417, 0.10300488228455029, 0.0935034313245916, 0.1433056502847223, 0.11017598229102077, 0.09269835088056477, 0.1035264554440517, 0.07231048688884589, 0.09046249989697885, 0.10232821672373671, 0.13428326710561944, 0.1366302952973234, 0.15368569146803435, 0.1367828835317505, 0.1305005776728725, 0.16284971688195526, 0.14349288658488146, 0.14951955825905805, 0.13757477904992066, 0.31138488288655564, 0.21260160070597034, 0.3005331530585713, 0.299394421376565, 0.2991572916061175, 0.2529052001460462, 0.25352332648998144, 0.2838964436563536, 0.28124579706041264, 0.15372329842061971, 0.2217413177096782, 0.2319250835388169, 0.2155630008546473, 0.2015766098134799, 0.1904176964625386, 0.2448136636441578, 0.21812396310690452, 0.1342438113815615, 0.1665273365679808, 0.19357710896516644, 0.17513742551204048, 0.2161169368468051, 0.17438513842693482, 0.17814499219494428, 0.2047147477229051, 0.22996788065313467, 0.15035027094993314, 0.1756710210070872, 0.17204926358041217, 0.17013570574730474, 0.18199539917174457, 0.17574641949536907, 0.18087491862081373, 0.1819633016068638, 0.30978567939364865, 0.16356646313337986, 0.5767521329679681, 0.1811570673751075, 0.14981226049157936, 0.402321713641537, 0.1850064618735645, 0.1789551140055673, 0.16883305660698444, 0.16377897473978786, 0.17535922886681432, 0.43101930437615843, 0.40480882509904936, 0.1846868603317997, 0.4251579059969338, 0.15433636353822744, 0.43111781189801457, 0.19748158559613715, 0.18587806305223809, 0.1210696063818183, 0.19035624286275998, 0.1984426861702432, 0.19103619649896786, 0.176928966617518, 0.1901002979808466, 0.1861842755910631, 0.18523887092341573, 0.1810254351629904, 0.17987187195201637, 0.06283458317540813, 0.05784491549266002, 0.0663231253461467, 0.06924965896683022, 0.08052404059717666, 0.06488072192830019, 0.07148141856063317, 0.07017150894719348, 0.0693587732965818]}, "mutation_prompt": null}
{"id": "0b69105a-fb16-458f-a964-dbe4f3251e9e", "solution": "import numpy as np\n\nclass EHAPSODIA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w_max = 0.9  # max inertia weight\n        self.w_min = 0.4  # min inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            w = self.w_max - ((self.w_max - self.w_min) * (self.evaluations / self.budget))  # dynamic inertia\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "EHAPSODIA", "description": "Enhanced Hybrid Adaptive PSO with Dynamic Inertia Adjustment (E-HAPSO-DIA) improves exploration-exploitation balance by dynamically adjusting inertia weight based on convergence speed.", "configspace": "", "generation": 42, "fitness": 0.18796449960789077, "feedback": "The algorithm EHAPSODIA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.46404640016441623, 0.4101562097733552, 0.3724506608687159, 0.5145565302591173, 0.4192983970475166, 0.5226015719089221, 0.41028264757009725, 0.3966563720971483, 0.3331446485954873, 9.999999999998899e-05, 0.030571108891803478, 0.11279421076278373, 0.03319056498985973, 0.020492062502844965, 0.015221752075125217, 0.02321826042892261, 0.020461925085838772, 9.999999999998899e-05, 0.08859231305176929, 0.07866655640343656, 0.07086131337196289, 0.07982061610557778, 0.06946588889779137, 0.07744443530340528, 0.07529233908912225, 0.06870148453518454, 0.04284156471922396, 0.057871117886617474, 0.06066692666346152, 0.06645928223350406, 0.08639945396714788, 0.06592080567441827, 0.050357236422159946, 0.058397771131005194, 0.06399344911116045, 0.0557707764470613, 0.9708871722859169, 0.9907503228281112, 0.9898224804656601, 0.984899549845896, 0.9850244417936976, 0.9747439639863135, 0.9869452999613081, 0.9883980037233611, 0.9882096015807406, 0.12848920406983544, 0.15657804328364033, 0.11976442307197899, 0.17932574720729721, 0.11623753370117795, 0.17524119016396178, 0.08307619034530378, 0.0864752492420443, 0.16182028412221483, 0.24497992189856632, 0.19744620338206686, 0.3402266685771239, 0.21246054219027966, 0.514565266954959, 0.17413066745499817, 0.429935961648899, 0.12359386208002121, 0.1822807735763845, 0.11979175804248954, 0.08272951858117816, 0.11181575987490322, 0.0906632254242895, 0.0672484535199297, 0.1016615374247869, 0.09794986122960092, 0.03566234621784592, 0.11521409021425755, 0.04465750823587733, 0.03858245267549554, 0.09157179338868537, 0.11404811367215484, 0.08819727815280043, 0.04834837022473437, 0.09566575661059074, 0.09680493502398402, 0.08050945607923277, 0.014964657932478587, 0.009872143151907764, 0.019094753494120043, 0.005648393683144626, 0.01755444345694812, 9.999999999998899e-05, 0.10806693474780726, 0.003650122962564617, 9.999999999998899e-05, 0.05270580942358161, 0.07554608066946134, 0.10429651355518799, 0.05521308192729901, 0.0760238541913304, 0.013096490649090797, 0.0380680687901338, 0.09385687658030606, 0.06887143055227285, 9.999999999998899e-05, 0.010397912227064432, 0.028224694665084815, 0.055802504709953404, 0.037047383131128875, 0.03420476070985912, 0.12782094620646856, 0.03258430301340143, 0.031125470870854044, 0.10324001384842463, 0.14021244617091488, 0.0865854553549339, 0.0025753598651637732, 0.12740351411646644, 0.1320350991179543, 0.12089951198649085, 0.03485673993382277, 0.04087699958088875, 0.39538965482920685, 0.3566041469475746, 0.32534503697007744, 0.4208273135879538, 0.3126581148553258, 0.37820863112250847, 0.3682622050910541, 0.3291027653662796, 0.34591193205734294, 0.08232669210441412, 0.07477089104414769, 0.09547293008123381, 0.07715801834552216, 0.08121081148891995, 0.07713346524093101, 0.0679316663333035, 0.06817645590984689, 0.08275898327592646, 0.14602795321667705, 0.12753023022771592, 0.14750987336378762, 0.14009808766863951, 0.1578378610513751, 0.1353515953911798, 0.15633370127939816, 0.20396012779585915, 0.1730804171779622, 0.18087413311119593, 0.24018574478489885, 0.25060972657917346, 0.22535738298760932, 0.2220237758094935, 0.22741642043825527, 0.21766141594264188, 0.2591644030311351, 0.23731596512190922, 0.2002322560907136, 0.18111413097351725, 0.20068174799200822, 0.16303831655793632, 0.1391919095665306, 0.19719986903965037, 0.18755705132861145, 0.1989748264228639, 0.18698369653235836, 0.17022637189457857, 0.16656669340813735, 0.1835778097324059, 0.16852537039615856, 0.1592919084548332, 0.1703962486823708, 0.1771782161861093, 0.1605833870265162, 0.16577100361215757, 0.16653502771390793, 0.15734851753732693, 0.17464858572573616, 0.17138374579319537, 0.13587697984962377, 0.1944796356015488, 0.17091547302176735, 0.16905987209117923, 0.17709429782712816, 0.47272997633293645, 0.45916123295469324, 0.14944226381297088, 0.42947404184912774, 0.1833238364778691, 0.3719251536254894, 0.16531059692935834, 0.17043859918885151, 0.4026509739331474, 0.2231348442217871, 0.363829985419756, 0.16907555785310346, 0.22754406603261323, 0.2993341072512866, 0.3229922603028992, 0.19623520168622133, 0.19212169955004044, 0.18603794093469384, 0.1995296194179167, 0.1868775488552863, 0.18896712567793073, 0.19141825981000948, 0.18617540521640574, 0.1984577879788202, 0.19889180228058823, 0.17985475303630505, 0.2016764229956397, 0.06433228339771813, 0.06260216922567852, 0.059491208198915735, 0.06457273002607777, 0.06272953659683622, 0.06150390973023567, 0.07370101233875903, 0.0644586924914351, 0.06128762163659596]}, "mutation_prompt": null}
{"id": "1ebc7e5e-f5d9-4f11-a915-b6babbfdde99", "solution": "import numpy as np\n\nclass EHAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # increased initial inertia weight for exploration\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n            \n            # Dynamic inertia weight adjustment for balancing\n            self.w = 0.9 - 0.5 * (self.evaluations / self.budget)\n\n        return self.best_global_pos, self.best_global_val", "name": "EHAPSODP", "description": "Enhanced Hybrid Adaptive Particle Swarm Optimization with Dynamic Inertia Adjustment (EHAPSO-DIA) incorporates dynamic inertia weight adjustment to balance exploration and exploitation more effectively.", "configspace": "", "generation": 43, "fitness": 0.18796449960789077, "feedback": "The algorithm EHAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.46404640016441623, 0.4101562097733552, 0.3724506608687159, 0.5145565302591173, 0.4192983970475166, 0.5226015719089221, 0.41028264757009725, 0.3966563720971483, 0.3331446485954873, 9.999999999998899e-05, 0.030571108891803478, 0.11279421076278373, 0.03319056498985973, 0.020492062502844965, 0.015221752075125217, 0.02321826042892261, 0.020461925085838772, 9.999999999998899e-05, 0.08859231305176929, 0.07866655640343656, 0.07086131337196289, 0.07982061610557778, 0.06946588889779137, 0.07744443530340528, 0.07529233908912225, 0.06870148453518454, 0.04284156471922396, 0.057871117886617474, 0.06066692666346152, 0.06645928223350406, 0.08639945396714788, 0.06592080567441827, 0.050357236422159946, 0.058397771131005194, 0.06399344911116045, 0.0557707764470613, 0.9708871722859169, 0.9907503228281112, 0.9898224804656601, 0.984899549845896, 0.9850244417936976, 0.9747439639863135, 0.9869452999613081, 0.9883980037233611, 0.9882096015807406, 0.12848920406983544, 0.15657804328364033, 0.11976442307197899, 0.17932574720729721, 0.11623753370117795, 0.17524119016396178, 0.08307619034530378, 0.0864752492420443, 0.16182028412221483, 0.24497992189856632, 0.19744620338206686, 0.3402266685771239, 0.21246054219027966, 0.514565266954959, 0.17413066745499817, 0.429935961648899, 0.12359386208002121, 0.1822807735763845, 0.11979175804248954, 0.08272951858117816, 0.11181575987490322, 0.0906632254242895, 0.0672484535199297, 0.1016615374247869, 0.09794986122960092, 0.03566234621784592, 0.11521409021425755, 0.04465750823587733, 0.03858245267549554, 0.09157179338868537, 0.11404811367215484, 0.08819727815280043, 0.04834837022473437, 0.09566575661059074, 0.09680493502398402, 0.08050945607923277, 0.014964657932478587, 0.009872143151907764, 0.019094753494120043, 0.005648393683144626, 0.01755444345694812, 9.999999999998899e-05, 0.10806693474780726, 0.003650122962564617, 9.999999999998899e-05, 0.05270580942358161, 0.07554608066946134, 0.10429651355518799, 0.05521308192729901, 0.0760238541913304, 0.013096490649090797, 0.0380680687901338, 0.09385687658030606, 0.06887143055227285, 9.999999999998899e-05, 0.010397912227064432, 0.028224694665084815, 0.055802504709953404, 0.037047383131128875, 0.03420476070985912, 0.12782094620646856, 0.03258430301340143, 0.031125470870854044, 0.10324001384842463, 0.14021244617091488, 0.0865854553549339, 0.0025753598651637732, 0.12740351411646644, 0.1320350991179543, 0.12089951198649085, 0.03485673993382277, 0.04087699958088875, 0.39538965482920685, 0.3566041469475746, 0.32534503697007744, 0.4208273135879538, 0.3126581148553258, 0.37820863112250847, 0.3682622050910541, 0.3291027653662796, 0.34591193205734294, 0.08232669210441412, 0.07477089104414769, 0.09547293008123381, 0.07715801834552216, 0.08121081148891995, 0.07713346524093101, 0.0679316663333035, 0.06817645590984689, 0.08275898327592646, 0.14602795321667705, 0.12753023022771592, 0.14750987336378762, 0.14009808766863951, 0.1578378610513751, 0.1353515953911798, 0.15633370127939816, 0.20396012779585915, 0.1730804171779622, 0.18087413311119593, 0.24018574478489885, 0.25060972657917346, 0.22535738298760932, 0.2220237758094935, 0.22741642043825527, 0.21766141594264188, 0.2591644030311351, 0.23731596512190922, 0.2002322560907136, 0.18111413097351725, 0.20068174799200822, 0.16303831655793632, 0.1391919095665306, 0.19719986903965037, 0.18755705132861145, 0.1989748264228639, 0.18698369653235836, 0.17022637189457857, 0.16656669340813735, 0.1835778097324059, 0.16852537039615856, 0.1592919084548332, 0.1703962486823708, 0.1771782161861093, 0.1605833870265162, 0.16577100361215757, 0.16653502771390793, 0.15734851753732693, 0.17464858572573616, 0.17138374579319537, 0.13587697984962377, 0.1944796356015488, 0.17091547302176735, 0.16905987209117923, 0.17709429782712816, 0.47272997633293645, 0.45916123295469324, 0.14944226381297088, 0.42947404184912774, 0.1833238364778691, 0.3719251536254894, 0.16531059692935834, 0.17043859918885151, 0.4026509739331474, 0.2231348442217871, 0.363829985419756, 0.16907555785310346, 0.22754406603261323, 0.2993341072512866, 0.3229922603028992, 0.19623520168622133, 0.19212169955004044, 0.18603794093469384, 0.1995296194179167, 0.1868775488552863, 0.18896712567793073, 0.19141825981000948, 0.18617540521640574, 0.1984577879788202, 0.19889180228058823, 0.17985475303630505, 0.2016764229956397, 0.06433228339771813, 0.06260216922567852, 0.059491208198915735, 0.06457273002607777, 0.06272953659683622, 0.06150390973023567, 0.07370101233875903, 0.0644586924914351, 0.06128762163659596]}, "mutation_prompt": null}
{"id": "1230c69d-b113-4441-bfe3-f115e1f10c51", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "95057b66-7a9c-4bb2-a1f0-6303863d665f", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "47e23609-5f10-4a78-9a36-c6d9cb708abc", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "9cd3e852-f4b0-413e-8d66-9e32b948bdbc", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "5fb89d03-8dc7-4ced-b525-72abbc96160e", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "57cd9772-3324-4ec2-8d00-f02c77dd156d", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "bcd419a4-bfb4-4ae8-a5c9-5e2fd5ed2118", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # Adjust initial inertia weight\n        self.w_min = 0.4  # Minimum inertia weight\n        self.w_max = 0.9  # Maximum inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Dynamically adjust inertia weight\n            self.w = self.w_max - (self.w_max - self.w_min) * (self.evaluations / self.budget)\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "HAPSO-DP with Adaptive Velocity Adjustment which dynamically adjusts the inertia weight during iterations to balance exploration and exploitation.", "configspace": "", "generation": 50, "fitness": 0.18921862005156498, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.4914980308374315, 0.4396653658636316, 0.45780992934828924, 0.397870885027944, 0.5012352439486594, 0.4351053482611599, 0.39404742298669015, 0.46196380378553126, 0.46110833063847434, 9.999999999998899e-05, 0.03691814920375469, 0.02342582837947449, 9.999999999998899e-05, 0.01726128750878364, 0.012769783715663618, 0.02525126118880039, 0.09983873416044464, 9.999999999998899e-05, 0.07499593969324392, 0.06693333557218961, 0.08894857809940171, 0.07957002129976443, 0.07084823511710214, 0.06356904376058337, 0.0744792198922185, 0.07501000259443846, 0.07347743057324319, 0.03921056924411037, 0.06662149917763494, 0.05286234440033566, 0.06942336365483393, 0.05944280309578576, 0.06073426148323324, 0.05568760302647968, 0.07424869076831786, 0.04208835264055155, 0.9708982407426144, 0.9907501007601675, 0.9898213258577497, 0.9848986622401102, 0.9850235970407828, 0.9747398233487695, 0.9869453720070751, 0.988397738258448, 0.9882057543041358, 0.17041750561539593, 0.1632350787963769, 0.14079957314471359, 0.14043203762693668, 0.11678023423006156, 0.13905037743369686, 0.07968109765355169, 0.08613660369251008, 0.14534235724308486, 0.15887753697592433, 0.21590187527139615, 0.35730045054616644, 0.18620061312093317, 0.42566885134029175, 0.27804560622209984, 0.3012941600494521, 0.40130796869200136, 0.15828707405354303, 0.16431293864264152, 0.13928914417549332, 0.07811257171247166, 0.09900912779995508, 0.08006753406872247, 0.11160571202770875, 0.19148229404862926, 0.049786857231596926, 0.12924193005612505, 0.04678937034596131, 0.028984860046483263, 0.11274014639335361, 0.20657377777137897, 0.09109735775993155, 0.14510404224791618, 0.0802698167623137, 0.0329505973874038, 0.04531892175439667, 0.02389157337206327, 0.02018292358085727, 0.043823421695221576, 0.012958826045319283, 0.033352770851718505, 0.00154487279346871, 0.12561655555778217, 0.000750562133086663, 0.02737405157944761, 0.06128368409585416, 0.1286931556718922, 0.023224745931287316, 0.13408638319783617, 0.10149350239208654, 0.025685542643787418, 0.05445138832252783, 0.0618554887234215, 0.03276071020961424, 0.025904830162992942, 9.999999999998899e-05, 0.012679450637482104, 0.03355922298906078, 0.02406570978170497, 0.03593755222831674, 0.018346297082920127, 0.027228863665670677, 0.07151166007451415, 0.1323496549013664, 0.006071259612645319, 0.09777405716069043, 0.0862087568287454, 0.08656799015359662, 0.09135663163625285, 0.0899263284349876, 0.14260505273524415, 0.03758046795645553, 0.3507711680386796, 0.38875380840163676, 0.3951267448708461, 0.37361774308646345, 0.3959424149848072, 0.3365509549113449, 0.32382462867676653, 0.4351133621154568, 0.349987877041982, 0.08329204611228747, 0.08150983439321313, 0.08179583907362653, 0.06776176839060499, 0.08503831161516318, 0.07706961352163777, 0.0802133089286946, 0.06807251516885915, 0.08134533975560099, 0.13743499327566644, 0.13370426571104255, 0.13621105198991645, 0.1632094659021699, 0.16342450078007353, 0.12434100889952082, 0.1460954019018622, 0.13171432612088663, 0.15130330079013166, 0.19936831344814232, 0.19785946427389667, 0.23247360586292143, 0.27700589285386357, 0.24454115922556463, 0.24925392266272461, 0.25628199321672696, 0.2974861540394289, 0.2311799424579586, 0.17302152472832, 0.16805663499378953, 0.21208007914359606, 0.1797919328540395, 0.15241036857718082, 0.1646708433918087, 0.18238886631374052, 0.21073496105219836, 0.18694711356145222, 0.17755525280414264, 0.14806798534297927, 0.1844335315460739, 0.17759494206359228, 0.17239015311775152, 0.15950592634491878, 0.17293573901293346, 0.16064829378613943, 0.14546053581129126, 0.18074348045096722, 0.15918610123339927, 0.1692152538575381, 0.17951338567672903, 0.14981251278068686, 0.16234512699260883, 0.16529590476809497, 0.16377111747613637, 0.15886052133379125, 0.557168928719089, 0.46438511222906365, 0.14870724669230184, 0.4556658790035867, 0.18504477877593828, 0.17285233899110009, 0.16628318505311923, 0.3153539509750388, 0.16872240058436383, 0.26687919983533925, 0.30513350459024113, 0.15871835058627204, 0.12671081530408046, 0.2320482036572693, 0.3120553489895317, 0.19598739943259447, 0.2665612286356409, 0.2483251009938613, 0.17555338322230818, 0.19838946044699002, 0.18595993491230078, 0.20652620454864934, 0.181971722604224, 0.1868776989989972, 0.1751192035793847, 0.1881787499102887, 0.18043584744503782, 0.06923320955426937, 0.0651036448613217, 0.05086516529361029, 0.05224104717685185, 0.06547815744642627, 0.06847133565873298, 0.0693173305795517, 0.06184387365504895, 0.06273759639095389]}, "mutation_prompt": null}
{"id": "4c0d20bc-a153-4cd6-a1bf-4c5de6c08d2d", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.disruption_chance = 0.05  # new parameter for stochastic disruption\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n                \n                # Apply stochastic disruption\n                if np.random.rand() < self.disruption_chance:\n                    self.population[i] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced Hybrid Adaptive PSO with Stochastic Disruption (E-HAPSO-SD) introduces stochastic disruption to escape local optima and improve global exploration.", "configspace": "", "generation": 51, "fitness": 0.2104978940756893, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.4861052562690632, 0.4533079913489587, 0.39760948788258865, 0.4709301867393174, 0.39513345150590407, 0.41050004623152414, 0.5241641904122708, 0.5006091266070991, 0.5427594951109738, 0.04595543410998848, 0.027025636937086372, 9.999999999998899e-05, 0.07738189458296185, 0.012579689279018536, 0.02407686846628654, 9.999999999998899e-05, 0.0001141263012773841, 0.06170593418839254, 0.12611193382511687, 0.09538129386257155, 0.15918132207998037, 0.09356218319202236, 0.09251628604027828, 0.08760879232588326, 0.10478593576368145, 0.1004363773009227, 0.12982147266625577, 0.11402567361116833, 0.06462883157435262, 0.08491564282591613, 0.061440660294115323, 0.07133236572608226, 0.06881565336677264, 0.06770280134576445, 0.09226131100568669, 0.07670747674794509, 0.9839807430925537, 0.9874967205003214, 0.9874634707460339, 0.9877483294074735, 0.9866295048193251, 0.9783451810289224, 0.9836544926400623, 0.9774121141701887, 0.9834523429349437, 0.2032612361939865, 0.18190212055339683, 0.1684758687649235, 0.16918568545366564, 0.1805628252971675, 0.15803290441324258, 0.22562010891873474, 0.18996730884001845, 0.1694630626432312, 0.33978206203473516, 0.2569509282041049, 0.20850649359483464, 0.23859756198505366, 0.20934137507827455, 0.20464366236208775, 0.22720039101765432, 0.13084387956090326, 0.21708170102644242, 0.12521872065446316, 0.11165429459661813, 0.1269200996235057, 0.12168400457728734, 0.12240427720804259, 0.14100528317849625, 0.14848716021805664, 0.2682646139326673, 0.14035421585783392, 0.1335537031072468, 0.12623596247358582, 0.1615296795862634, 0.199845656826805, 0.18298503629645346, 0.12901599689507115, 0.2519464892014034, 0.14810783868365396, 0.23453965075978012, 9.999999999998899e-05, 9.999999999998899e-05, 0.023552000358268765, 0.02951392858400903, 0.015890774772549743, 0.05303746653300301, 0.007114276715889378, 0.005588652734511368, 0.04409419623767752, 0.06806683091909194, 0.03652186416849312, 0.13995101710574176, 0.14604037325642405, 0.09538639931511383, 0.10011629665809285, 0.12462807240419838, 0.04428085124430814, 0.07606899700652903, 0.00698769550438505, 0.006514918771066358, 0.0008895632267440501, 0.09729642695465479, 0.0012897657652239936, 0.03084493315633463, 0.020539910856311128, 0.042499129335778485, 0.013921078902835005, 0.09773267043112899, 0.048789307418178995, 0.1334615231951175, 0.08742168947380557, 0.053544972711370264, 0.11690784510618213, 0.10921893538046856, 0.041346807019558174, 0.11343538597501623, 0.42321777897897817, 0.4495219799327438, 0.3765796099003119, 0.5187054350230833, 0.3838903118116762, 0.4169133642832964, 0.4969303573020404, 0.35526581937092083, 0.3801221672378414, 0.13736508188884122, 0.07672199701869176, 0.08289471788093672, 0.07513680308659554, 0.07994791842786686, 0.11969252866054136, 0.06622419244327049, 0.12145816417539612, 0.10197647450202107, 0.1541308323598516, 0.17445906932900668, 0.21638371829192105, 0.16729094956944757, 0.14578160621562586, 0.17278269282701453, 0.15523342984962363, 0.16223835325800773, 0.17560869568324888, 0.25042377147700845, 0.2646059355996825, 0.28855468667182793, 0.25765853927826887, 0.25444253526758576, 0.27027248089450795, 0.3746500997332268, 0.319893258711744, 0.25034645598876526, 0.1678637985911159, 0.1650991413939068, 0.19188306365010788, 0.23886549197742024, 0.2239116688695666, 0.19832668552097066, 0.19854950188645493, 0.2160036007881424, 0.18082520518510592, 0.17521670715110327, 0.1856714943487745, 0.17489632849974568, 0.17723811937794143, 0.19235159045839112, 0.1735187373102508, 0.19922965699914974, 0.19846546606511983, 0.20972542711948616, 0.19330495143349546, 0.18887107316235874, 0.1881855392902274, 0.18271076802993858, 0.19671919809960636, 0.19993377363417064, 0.18052591242262694, 0.19145378679708802, 0.1902334135835837, 0.9040239762526613, 0.722513628986962, 0.15873391171337115, 0.28042307723422644, 0.19801749460939, 0.1994387720291938, 0.2046385268112063, 0.48212423147055006, 0.43509497309525635, 0.4448535271235722, 0.24866196228980986, 0.35476241118009244, 0.20511922228147117, 0.16846163574238437, 0.1924385981374842, 0.15297018886478075, 0.12612763593776033, 0.20389792098474957, 0.1844976801345205, 0.1782136279622888, 0.20995087117597477, 0.1767406549439181, 0.18581358809958537, 0.18053913776106378, 0.1764359105771418, 0.19089348089318858, 0.17835625174842895, 0.07261188642151606, 0.06676927564587765, 0.08180914922774352, 0.07621144494177678, 0.07806016922962045, 0.06741342437376374, 0.07331920942433279, 0.07603631687921408, 0.07122528590193722]}, "mutation_prompt": null}
{"id": "db284e8e-719d-45ef-98c6-32ec601c67db", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply gradient-inspired perturbations\n                if np.random.rand() < 0.5:\n                    gradient = np.sign(self.best_global_pos - self.population[i])\n                    perturbation = self.mutation_factor * gradient\n                    candidate = np.clip(self.population[i] + perturbation, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced Hybrid Adaptive PSO with Gradient-Inspired Perturbations to intensify local search and improve convergence speed.", "configspace": "", "generation": 52, "fitness": 0.25422832980173016, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.8676752132671043, 0.8828165108839878, 0.8662888072342922, 0.3234648774803218, 0.8547940033944912, 0.7854323260278593, 0.8737971947803236, 0.1435676175192515, 0.8670422855979114, 0.2487030389526339, 0.011409255932806062, 9.999999999998899e-05, 0.1233290618735311, 0.06326000940587817, 0.04045532605184432, 9.999999999998899e-05, 0.057845290177124475, 9.999999999998899e-05, 0.08821416455630604, 0.13128743863451198, 0.06439143943795567, 0.1229136885988451, 0.1451941574312563, 0.09243355432141653, 0.1820347198395913, 0.09573640829654773, 0.09457024246446522, 0.058159102357174364, 0.13887196572788763, 0.09183687181843725, 0.09336045810968496, 0.048032430422307204, 0.056159000335554765, 0.12075307503098576, 0.07837985061792896, 0.08635613816810206, 0.9881524026057127, 0.9904462712896757, 0.9806013369366223, 0.9686721865442252, 0.9796647984353328, 0.9669167222480727, 0.9793754128966763, 0.9779800092480534, 0.9674189262484204, 0.4450195466301128, 0.2695424931059235, 0.36655853842567643, 0.15049409646854384, 0.28225281966783144, 0.15154543309910296, 0.1254251736789863, 0.41273267754945064, 0.08701960310527979, 0.3980132801225582, 0.2241760498701929, 0.2139409975941814, 0.27780986886842607, 0.3477763373614231, 0.19461473353578773, 0.1251604175590041, 0.23168062039089354, 0.2335495578668777, 0.22409410728217405, 0.2508648167308738, 0.14718207423555307, 0.18565528815265353, 0.3326478263063093, 0.20330383289803822, 0.1642924926292222, 0.12684071463253, 0.1510058600724602, 0.1535223788100044, 0.17675347710749778, 0.21965648142906125, 0.23737916140345816, 0.11238228642939008, 0.13212436083631596, 0.22163363913366108, 0.20943613137358186, 0.03223559986708646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2753240240945074, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171592151612806, 0.08537975794425223, 0.10955680125559653, 0.2779224002699079, 0.006867680643089846, 0.1479444026272858, 0.1668837367870879, 0.11150799990016969, 0.26046285194267027, 0.18108377477456972, 0.16706529551644256, 0.11049025554360703, 0.13719396790740335, 0.2717671689717296, 0.10588743828126457, 0.1528670784665248, 0.10129774832899197, 0.07117885404960866, 0.3126951038828064, 0.24086511464310034, 0.17209114874961629, 0.2194200610700543, 0.006327119376454138, 0.09608842787628835, 0.22126286138147255, 0.14922015109962417, 0.08181295617238304, 0.5909900578766181, 0.5434386259119199, 0.5309189499485382, 0.6559354259754424, 0.5167664733884244, 0.6615859303230074, 0.5119170594631653, 0.5559962683664605, 0.5221486020887532, 0.14114749753202327, 0.07822256598033606, 0.1121094608878549, 0.09375200245131654, 0.07664169227687767, 0.11600545233771375, 0.0894598511257354, 0.1096103327942024, 0.0797168335716546, 0.24027359313386054, 0.2763560850483815, 0.19456867244263254, 0.2524166659513053, 0.2248454048483982, 0.270011470620406, 0.44790676503077087, 0.18676266262386154, 0.2555998264181909, 0.3916348691224626, 0.24835030092727917, 0.437669516631389, 0.24153689606124729, 0.23432770225518884, 0.2713561245994577, 0.2181998587369418, 0.28647378419681335, 0.2707776530831295, 0.2566258086116894, 0.2381194655950054, 0.26906306264843516, 0.20187100440064965, 0.24361781084472023, 0.19938165807065855, 0.23018970028062702, 0.2703645873604068, 0.2599332370840891, 0.2199020772048762, 0.14347156429047025, 0.1882727708498355, 0.19381969362758789, 0.18112447043553848, 0.18835411342237396, 0.22384101633669684, 0.19883499864082044, 0.21048536963570552, 0.19212568460167267, 0.1780512142588635, 0.19840455432781778, 0.17837944573519526, 0.18248050598660526, 0.18277310760893917, 0.19235312358416146, 0.18759009895449708, 0.2532751793636767, 0.8507466778508219, 0.12667836435136048, 0.12485016437761443, 0.17335917191067296, 0.20125849331555978, 0.1998670351929357, 0.1000280606330125, 0.17044592739662134, 0.9245238747401124, 0.8795507527674769, 0.156961898724562, 0.11160449808485084, 0.41836293602039476, 0.16876708904876936, 0.21071011723046518, 0.10517549393154169, 0.10503815034152808, 0.9063968599059167, 0.18221280041182308, 0.22626726076747983, 0.20888750498437536, 0.20159198941925482, 0.1788364469743452, 0.21502318430071243, 0.1996689170479209, 0.19811158157836262, 0.19503909080273574, 0.07987070407130592, 0.08892878857339315, 0.07961372658576382, 0.0958379013191667, 0.09062073325366038, 0.1027839140417749, 0.09714137774663378, 0.10104415296855773, 0.08998087020497714]}, "mutation_prompt": null}
{"id": "7a0fa2ab-2cae-429c-9e88-b5ed80bc3f9b", "solution": "import numpy as np\n\nclass HAPSODMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        initial_mutation_factor = self.mutation_factor  # Store initial mutation factor\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    dynamic_mutation = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + dynamic_mutation, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n            \n            # Adjust mutation factor over time\n            self.mutation_factor = initial_mutation_factor * (1 - (self.evaluations / self.budget))\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODMS", "description": "Enhanced Hybrid Adaptive Particle Swarm Optimization with Dynamic Mutation Scaling (HAPSO-DMS) improves convergence by utilizing a dynamic mutation factor that decreases over time.", "configspace": "", "generation": 53, "fitness": 0.31823063750675074, "feedback": "The algorithm HAPSODMS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.845523200623843, 0.8059456892660276, 0.8187058081826837, 0.8745546129131718, 0.8123616030992984, 0.8346788502831054, 0.8613245683893727, 0.7758690059091091, 0.7834888230238074, 0.5998011071848628, 0.5423641163559203, 0.03729632983463704, 0.1324581651143093, 0.06491046627561647, 0.07512767339872639, 0.22230794134417586, 0.552626420782802, 0.04592581364851156, 0.12041023389648997, 0.12012403455577281, 0.1080693577479156, 0.10532605187673438, 0.09012080411515944, 0.09594526751828358, 0.09432424127155448, 0.10552534868069285, 0.10933647542236813, 0.1470310269118923, 0.08072440288058114, 0.09613125431577407, 0.09753084184754168, 0.07677829033613703, 0.07682488832175371, 0.07051052166597005, 0.08660845503235437, 0.08614406143322828, 0.9641603101429845, 0.9897710855115273, 0.9897135530392286, 0.9889953156708087, 0.9841813046713733, 0.9771827887499747, 0.9859030918991151, 0.9841114887328333, 0.9878645137644532, 0.3898002537002061, 0.3826129926595633, 0.3574670382182985, 0.4597614954137542, 0.3729872174010388, 0.3937522699514985, 0.2784665615663272, 0.23878615904440492, 0.37684239517316964, 0.8495793505544864, 0.8488280149796634, 0.31724663580456314, 0.8413087945111164, 0.34260756203248977, 0.20368389069961468, 0.17743801758400446, 0.7860813086524656, 0.8157879854953817, 0.29030298156494927, 0.12573760692959202, 0.5542963832488421, 0.11546625656794751, 0.1597699405620422, 0.22390572520793117, 0.2015958349775413, 0.11368656467808991, 0.22144821355400557, 0.33537321625458827, 0.21085168733729076, 0.5163402217960014, 0.13271669803740793, 0.5656078231024528, 0.1643392532143585, 0.6707178207329197, 0.23750365926098316, 0.19805315648682154, 0.05493948842147989, 0.08697465660690173, 0.07408068362098097, 0.02940062226960638, 0.0005237978227869977, 0.05493140139964525, 0.05282724497205449, 0.10416695578855395, 0.6085130000158093, 0.12000700649144824, 0.08057648781828519, 0.6513427260363263, 0.33857495338104604, 0.1792918293146416, 0.04023755591860767, 0.19382898343107868, 0.21869590360851743, 0.22169481734828378, 0.2110186802505687, 0.03459819753678273, 0.09587195322153563, 0.10243993658989803, 0.23748840563843254, 0.06907371805210549, 0.3681042742111731, 0.10555579708283713, 0.09330823775428176, 0.3873035904881472, 0.358372842836833, 0.3183845738467316, 9.999999999998899e-05, 0.03922181570093908, 0.28895783375000184, 0.05630839313367264, 0.17279456955695827, 0.07858238291519992, 0.7437747316074159, 0.7273100751559924, 0.6286891947999163, 0.6485277167613075, 0.6757217423686591, 0.7329633496495754, 0.7636062333297577, 0.6756972560674894, 0.7648932428534048, 0.10337624116909394, 0.10565997127960092, 0.1359917098928043, 0.14281726676360706, 0.1365006927487652, 0.10970355456606362, 0.1143927991779996, 0.09639291671396111, 0.10591191201283268, 0.18594901476917902, 0.1997116804666912, 0.14073241211892817, 0.2393794975638669, 0.3388154779452024, 0.1687894702906828, 0.2028356306793685, 0.24330172725292354, 0.18218184784465696, 0.43628263309833426, 0.36308737384156875, 0.420460320280429, 0.29775021423459824, 0.27896425718547035, 0.4594576595203781, 0.41221863090522215, 0.4582382640930901, 0.36080346742267944, 0.377163765839136, 0.2230779976461933, 0.3229426902989344, 0.2540438464961937, 0.2201950246494675, 0.39040892144478057, 0.3449855167999688, 0.31556862566006627, 0.3519843286991149, 0.21440881941589462, 0.22552712413527387, 0.2097752651869802, 0.22178265276589482, 0.19395027169907086, 0.194669820660325, 0.1928170443173033, 0.1956363221697004, 0.1984255554397074, 0.20711747018831428, 0.21019176988968835, 0.5730323563218382, 0.19369973516945915, 0.19421892188033385, 0.1824663633488759, 0.20220945508821497, 0.18828928906848497, 0.18049686277219046, 0.2068168361187882, 0.16493889577154186, 0.15282329882068624, 0.8523673153492488, 0.20043153448427475, 0.19782516185160914, 0.0999568558823557, 0.16955601742331405, 0.8887144057226036, 0.8230076542152989, 0.6017707523998238, 0.6539140100440002, 0.793698847954571, 0.30639577736658086, 0.2031112079306241, 0.2056133932813945, 0.10472869713899802, 0.2065338645815904, 0.20013391581755402, 0.1925412576917318, 0.1930480478735167, 0.18616962772759504, 0.18092602208705033, 0.17398446058450223, 0.17870803233921073, 0.17619473048542755, 0.18406773872666782, 0.0818624126370231, 0.09263984479123044, 0.08595494594316277, 0.08239803993785422, 0.08359712596629831, 0.08302526930040643, 0.0979812983505366, 0.07146692348684247, 0.07747396846086374]}, "mutation_prompt": null}
{"id": "bd7578b8-e7ef-40a4-8ff8-c8ba03c1046e", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "f04cd268-483e-4ac9-850f-1f863045aaae", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "c305cea0-075c-46ee-b466-c57546589f6e", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # dynamic inertia weight start\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n        self.initial_budget = budget  # store initial budget\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.w = 0.4 + 0.5 * (1 - self.evaluations / self.initial_budget)  # dynamic inertia weight\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    dynamic_mutation = self.mutation_factor * (1 - self.evaluations / self.initial_budget)  # adaptive mutation factor\n                    differential = dynamic_mutation * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with dynamic inertia weight and adaptive mutation factor for improved convergence and exploration.", "configspace": "", "generation": 56, "fitness": 0.18957163946032354, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.4710119082135007, 0.3428234780081989, 0.3613973026187446, 0.4945356541364371, 0.509037717106738, 0.42624798338439474, 0.1763955878061828, 0.3618880379258632, 0.41080535258738615, 0.015159378559513437, 0.0221960883818072, 0.06680997650419562, 9.999999999998899e-05, 0.0434066320465849, 0.05224972598488853, 0.05412001066978156, 0.02014660484690589, 0.023531995265307137, 0.08540310812431562, 0.07563180408249626, 0.08318592169493766, 0.07819135220664097, 0.0786049461546603, 0.07784665242462252, 0.0832322667181068, 0.08245414396138095, 0.051684436194742944, 0.05747755912413666, 0.06362508767771557, 0.07285647416072316, 0.06572091526947244, 0.06108736357068045, 0.06398195523391281, 0.04714818698893508, 0.07225768187604753, 0.06257108849424897, 0.9708047212814935, 0.9907502442452862, 0.9898223159808472, 0.9848966837436546, 0.985024177381614, 0.9747600292105659, 0.9869403043473792, 0.9883977736305382, 0.9882052915895123, 0.16397743849022284, 0.166944270558396, 0.07000837877985744, 0.1704464468376744, 0.20086520909330197, 0.16349040337943244, 0.08333063064554713, 0.08441033400453235, 0.07757547976464374, 0.19076942201365332, 0.4039737555326496, 0.4026969674609916, 0.21256633870679775, 0.3789630815265279, 0.26015331652086515, 0.4311238723059636, 0.21324600961994333, 0.4479592821183367, 0.1100576582633006, 0.09691901911333134, 0.07127966172214362, 0.08088457848263608, 0.08600136260893265, 0.07616584567091067, 0.09914388926219131, 0.11357586484767779, 0.08922937714856438, 0.08395066210713176, 0.0411573611342585, 0.10125723632256689, 0.10277045964987941, 0.09355265907739008, 0.07523892791097586, 0.11619756672816639, 0.01804598140860092, 0.04694800109199637, 0.006918049803902648, 0.036923514646501454, 0.04194250057583526, 0.0002227193654796844, 0.010103528894543579, 9.999999999998899e-05, 0.014515568967541692, 0.0023423274283271844, 0.0015326947370102317, 0.05543987343033974, 0.07509130914542361, 0.01740128435040611, 0.017637115542431303, 0.06241045375838983, 0.0381954332176887, 0.10977159863974617, 0.14613694984897707, 0.04098239447082053, 0.015560946479832638, 0.012714831221757983, 0.012777095180888542, 0.03273261787912818, 0.1014592359959845, 0.09977505706446776, 0.048646093306884186, 0.08097114519305249, 0.09701107051165325, 0.08594339649707383, 0.024061248621754072, 0.08934479799601103, 0.11429519814226519, 0.039006762894335356, 0.1478025834094696, 0.03970079878066368, 0.023458316868031015, 0.04861148802161974, 0.3235997217931146, 0.4169897541977474, 0.3396904997114293, 0.37918807754441053, 0.3032828221485492, 0.4171202899743497, 0.3627341831094407, 0.35926729038499383, 0.4301120791495504, 0.1062991507895018, 0.09073162624793873, 0.04598662512947327, 0.08752500560463727, 0.08716811052296658, 0.09701879187143791, 0.06178217053133772, 0.07646314813878419, 0.08609184316627527, 0.12869632430847144, 0.14860428819522475, 0.15260694441473766, 0.19242300567129278, 0.1646361212711498, 0.17047551985589093, 0.1709726429212346, 0.13456782293515213, 0.17574117348210805, 0.26673069436557184, 0.32391207298319014, 0.22985023465562748, 0.24825455087473702, 0.22710410613802245, 0.2374558128753148, 0.2322666181520029, 0.2861890366486799, 0.2674069602395369, 0.21630662412715707, 0.15771005563451168, 0.2143502903525315, 0.18671438698978582, 0.17645496369199154, 0.2178274020911597, 0.19387500560407744, 0.1837673566848086, 0.22166367065806902, 0.1858070499191694, 0.17605200151376033, 0.1733926107398589, 0.15544127648296668, 0.16756001321924052, 0.16081073861091388, 0.1779217822646244, 0.180082547633851, 0.15926341367709718, 0.17963082538811903, 0.1456185820579894, 0.16952259490763588, 0.17855687187698965, 0.16311494490127865, 0.16992445017217783, 0.16799059030636887, 0.1548087594232882, 0.16978082869465416, 0.45426260925470174, 0.4812957827606561, 0.15129587298171665, 0.5332088406073201, 0.18162518482082135, 0.18043107667730163, 0.1663361550255812, 0.15916342810707884, 0.5055247243282284, 0.4390094339388422, 0.17183289871797647, 0.15603416039162876, 0.2379440302423128, 0.13556886393492606, 0.1610389932269174, 0.192609589460631, 0.198843468401243, 0.19811175579455909, 0.17296219336371554, 0.17811472209963708, 0.2034732587116087, 0.17300818278105312, 0.18089988753502206, 0.19024619724091973, 0.1870468810740269, 0.17575263194797186, 0.18802234005495178, 0.07416500065579179, 0.05657591897057557, 0.06118887211254698, 0.06324639636182239, 0.05964776623629897, 0.058551236826575814, 0.0597596223333956, 0.07634249961953699, 0.06059621899071099]}, "mutation_prompt": null}
{"id": "7722fa5b-d518-4df0-902c-d979d6c23766", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # initial inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Dynamic inertia weight update\n                self.w = 0.4 + 0.5 * (self.budget - self.evaluations) / self.budget\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n                # Local search phase\n                if np.random.rand() < 0.1:\n                    local_candidate = self.population[i] + np.random.uniform(-0.1, 0.1, self.dim)\n                    local_candidate = np.clip(local_candidate, self.bounds[0], self.bounds[1])\n                    local_fitness = func(local_candidate)\n                    self.evaluations += 1\n                    if local_fitness < self.personal_best_val[i]:\n                        self.personal_best_val[i] = local_fitness\n                        self.population[i] = local_candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP by introducing a dynamic inertia weight and a local search phase to balance exploration and exploitation.", "configspace": "", "generation": 57, "fitness": 0.18195930660741655, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.310792028387032, 0.43974681394026305, 0.3870608086869938, 0.42786578393597297, 0.38209831994427157, 0.5427519116779904, 0.21387898658673865, 0.41577549398321634, 0.35835647760329026, 9.999999999998899e-05, 0.0764727250231716, 0.04681921521536658, 0.004860857958102094, 0.026123854719225847, 0.034119876805864036, 0.006254453177104713, 0.17941291484089283, 0.07894603162950442, 0.07283934371242196, 0.0719840801118744, 0.06756413582272636, 0.07686340325724128, 0.059898107158935066, 0.08838748376922834, 0.08258064775311325, 0.07082036469809794, 0.07950466934087674, 0.04538023847142758, 0.04912966064392854, 0.06191959059954055, 0.05162846426289269, 0.0733654644127415, 0.0514219171829563, 0.05426631845369867, 0.05317368465274541, 0.06419753358610092, 0.988281782067305, 0.9865997613650686, 0.9799793853646496, 0.9321443462519696, 0.9833365073916064, 0.9800867833150364, 0.9832104679275293, 0.9800193323124794, 0.9849939764998771, 0.16211151796798184, 0.15978993291895838, 0.12530357954884563, 0.15347827434042516, 0.1310507990482025, 0.1508803733593923, 0.17224730908206531, 0.13655823037413795, 0.10316929515032935, 0.15500131821118246, 0.3921630052526276, 0.35960752419082487, 0.24465297631550842, 0.16793893586105457, 0.34844708667308344, 0.16384122763874676, 0.3864988769217236, 0.1474704006957258, 0.05798856369128225, 0.07929536316054075, 0.1296151031463867, 0.0806762828417219, 0.08642688789756447, 0.08031086130045573, 0.09443455338594231, 0.09528284124220776, 0.14639201757118647, 0.09111127276324982, 0.09951706397379823, 0.2001961174414354, 0.0740629561408257, 0.11808868929317362, 0.15350830086253286, 0.14195462371012801, 0.06728797636441397, 0.07829390413293236, 9.999999999998899e-05, 0.0551717261579634, 0.031334069153868715, 0.002682839078347765, 0.03187917281351804, 0.06548654550563349, 0.017913612680669044, 0.0001003558587895359, 0.03604811650334627, 0.05685881566116491, 0.05224491221943095, 0.11494928590904019, 0.08534347472178705, 0.02654382566865221, 0.06430289521712407, 0.06394346804366324, 0.15719471846194844, 0.06319864668357478, 0.009431978179464617, 0.007561744101410306, 0.024407873810211256, 0.022992710761863377, 0.021256525483960842, 0.02147982250369096, 0.02548847666556664, 0.014235676305423328, 0.01415494419402108, 0.06789487164739749, 0.10021286145015185, 0.016745329534166187, 0.0634699549022193, 0.13127558505114956, 0.112215246125689, 0.09007652582042924, 0.04636547469088914, 0.03860264377116562, 0.32454049571237287, 0.39207573761950976, 0.27318240316539355, 0.38058574619705055, 0.4137898283398449, 0.31991381365762583, 0.3263719242963685, 0.4039585632534147, 0.35155386746418493, 0.07234026251779524, 0.089394126896301, 0.06628401006673335, 0.08079713357162221, 0.09726863931348895, 0.07054183781957113, 0.059928146335810006, 0.07414551257865709, 0.07975477350687254, 0.12545900444893232, 0.14348205021133453, 0.14959385294407135, 0.14654834757471014, 0.15055970635763682, 0.15435603090131955, 0.20640129681911512, 0.1662994113006282, 0.1423296760581536, 0.22756743247675448, 0.2537043671608463, 0.23066430473128374, 0.21242408863807427, 0.24257943656583214, 0.2107539741998914, 0.267250883878542, 0.2759029651390398, 0.21965791668847756, 0.13977802099184866, 0.15119236028213823, 0.130505889334406, 0.15077419943398196, 0.14900936296309175, 0.1800754744842754, 0.1593956657187251, 0.1506703985991893, 0.18328357460107203, 0.17095285675809502, 0.15682845992608907, 0.21280660059416212, 0.1614701316385132, 0.15839898193995372, 0.16285717102587116, 0.1666363222644821, 0.17184843796291893, 0.18826890651168726, 0.16881908794912726, 0.16566888835162064, 0.16154152918033649, 0.16914154071298926, 0.17233408008858064, 0.15945362741677638, 0.1581807646735076, 0.15236259276444797, 0.15623675339862841, 0.4099340535394168, 0.14536456337585368, 0.1396206272275733, 0.22449370824087334, 0.18054009499718338, 0.16930245875059813, 0.15887677529063693, 0.1675667631749982, 0.33333951394520844, 0.36456157421240676, 0.15259614798938348, 0.1886719174065592, 0.281014506394779, 0.2903701696413259, 0.26347257617777864, 0.1920811086784726, 0.19852314581330177, 0.197128902631024, 0.17374558152152608, 0.21292798632549725, 0.1886731093820183, 0.19282539766189188, 0.18086746504158824, 0.18715280576644744, 0.17977403570277417, 0.1849663472325187, 0.17365580589220153, 0.058588395985035846, 0.06688792902181029, 0.06502115294833566, 0.06631933940114654, 0.06956105336468388, 0.06081542838649823, 0.053603432796131334, 0.057359809819526375, 0.06972052318213062]}, "mutation_prompt": null}
{"id": "33f241c7-00aa-47df-ae34-fafeb448e435", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # Initial inertia weight\n        self.w_min = 0.4  # Minimum inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Adaptive inertia weight update\n            self.w = self.w_min + (0.9 - self.w_min) * (1 - self.evaluations / self.budget)\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with adaptive inertia weight for improved exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": 0.18921861853460237, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.4914980308333624, 0.4396653658720858, 0.45780992930679587, 0.3978708862543294, 0.5012352439449583, 0.4351053477804311, 0.39404742311870544, 0.4619638037856886, 0.46110833077820956, 9.999999999998899e-05, 0.0369181492039341, 0.02342582740263055, 9.999999999998899e-05, 0.017261287473378406, 0.01276978371599402, 0.025251261188818708, 0.09983872392961768, 9.999999999998899e-05, 0.07499593968939555, 0.06693333557207448, 0.08894857810702272, 0.07957002130250745, 0.07084823511712457, 0.06356904376346795, 0.07447921989176043, 0.07501000259449142, 0.0734774305741972, 0.039210529516951254, 0.06662149705347453, 0.05286234440036042, 0.06942336365545432, 0.059442803095687835, 0.06073426147684802, 0.05568760285637875, 0.0742486907682518, 0.04208835261538102, 0.9708982407426144, 0.9907501007601675, 0.9898213258577497, 0.9848986622401102, 0.9850235970407828, 0.9747398233487695, 0.9869453720070751, 0.988397738258448, 0.9882057543041358, 0.17041750562701474, 0.16323507879595567, 0.1407995729993805, 0.14043203762455903, 0.11678023426706097, 0.13905037733002867, 0.07968109778912369, 0.08613660369251008, 0.1453423572384107, 0.15887753697592433, 0.21590187527139615, 0.35730045054616644, 0.18620061312093317, 0.42566885134029175, 0.27804560622209984, 0.3012941600494521, 0.40130796869200136, 0.15828707405354303, 0.16431293864194574, 0.13928914417589933, 0.07811257171181607, 0.09900912780174054, 0.08006753406867939, 0.11160571203131187, 0.19148229422146912, 0.049786857236318594, 0.12924193003514173, 0.04678937036061381, 0.028984878571040817, 0.1127400317373396, 0.2065737744752132, 0.09109735776083694, 0.14510404224715456, 0.08026981676223954, 0.032950597387436, 0.04531892175421437, 0.023891573374011932, 0.020182923580690515, 0.04382342169280162, 0.01295882592610964, 0.03335277086354249, 0.0015448727314458788, 0.12561655549464845, 0.0007505621266518103, 0.02737405193771225, 0.06128368409571938, 0.12869317135782854, 0.023224745929835477, 0.1340863831796958, 0.1014935023930339, 0.025685542643675174, 0.05445138832242846, 0.06185548872343061, 0.03276070940409992, 0.025904830145201285, 9.999999999998899e-05, 0.01267945063668341, 0.03355922166303571, 0.024065709790932255, 0.03593755223619899, 0.01834629708328972, 0.02722886366289945, 0.07151165986815289, 0.13234965490312445, 0.0060712596126282214, 0.09777405453962196, 0.08620875680659101, 0.08656799015606398, 0.09135663156559493, 0.08992632842558701, 0.1426050527528494, 0.037580467959168695, 0.35077116810972997, 0.38875380840105944, 0.39512674521101476, 0.373617743201198, 0.39594241499126015, 0.336550955127495, 0.32382462904940024, 0.4351133621756774, 0.3499878769693422, 0.08329204650009159, 0.0815098349455089, 0.08179583906373022, 0.06776176839045567, 0.08503831161519826, 0.07706961347131458, 0.08021330892742384, 0.06807251516885915, 0.08134533975712144, 0.13743499327691588, 0.13370426571104255, 0.13621105203696804, 0.16320946589684393, 0.163424500777558, 0.12434100889952227, 0.14609540190641745, 0.1317143261205327, 0.15130330079013166, 0.1993683127020116, 0.19785946426960077, 0.2324736058536605, 0.2770058928543041, 0.24454115922512287, 0.24925392266192659, 0.256281992808552, 0.2974861540445872, 0.23117994246556361, 0.17302152471944532, 0.16805663499392065, 0.21208007911493743, 0.17979193285565764, 0.15241036849255485, 0.16467084301565282, 0.18238883247883753, 0.2107349610511111, 0.18694711337447545, 0.1775552528002352, 0.14806798605888216, 0.18443353278658825, 0.17759479761402996, 0.17239015327802099, 0.15950592643873973, 0.172935741324857, 0.16064829485762677, 0.14546053245825352, 0.18074348045064104, 0.15918610123364652, 0.16921525386265346, 0.1795133856763237, 0.14981251278060514, 0.1623451270009013, 0.16529590476796963, 0.16377111747602136, 0.15886052133574724, 0.5571689287125436, 0.4643851122278774, 0.14870724669230184, 0.45566587900213107, 0.18504477877593828, 0.17285233899110009, 0.16628318505311923, 0.3153539510558586, 0.16872240058484944, 0.26687920035208723, 0.30513350458674116, 0.15871835058624295, 0.1267108153040959, 0.2320482036596957, 0.3120553489743435, 0.19598739943257426, 0.26656122746128863, 0.24832509283223858, 0.17555338063086967, 0.19838946044700068, 0.18595993491190344, 0.20652620452870385, 0.18197172260900207, 0.1868776989989972, 0.17511920357988986, 0.18817874990992645, 0.1804358474330946, 0.06923320955221601, 0.06510364487005771, 0.05086516572949751, 0.052241047180179856, 0.0654781574468658, 0.06847133566605512, 0.06931733058068346, 0.06184387365529331, 0.06273759638249599]}, "mutation_prompt": null}
{"id": "6bd1348e-1ca7-4bc7-8a81-730764c93120", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w_max = 0.9  # max inertia weight\n        self.w_min = 0.4  # min inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            current_iter = self.evaluations / self.budget\n            self.w = self.w_max - (self.w_max - self.w_min) * current_iter  # adaptive inertia weight\n\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSODP with adaptive inertia weights to dynamically balance exploration and exploitation over iterations.", "configspace": "", "generation": 59, "fitness": 0.18796449960789077, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.46404640016441623, 0.4101562097733552, 0.3724506608687159, 0.5145565302591173, 0.4192983970475166, 0.5226015719089221, 0.41028264757009725, 0.3966563720971483, 0.3331446485954873, 9.999999999998899e-05, 0.030571108891803478, 0.11279421076278373, 0.03319056498985973, 0.020492062502844965, 0.015221752075125217, 0.02321826042892261, 0.020461925085838772, 9.999999999998899e-05, 0.08859231305176929, 0.07866655640343656, 0.07086131337196289, 0.07982061610557778, 0.06946588889779137, 0.07744443530340528, 0.07529233908912225, 0.06870148453518454, 0.04284156471922396, 0.057871117886617474, 0.06066692666346152, 0.06645928223350406, 0.08639945396714788, 0.06592080567441827, 0.050357236422159946, 0.058397771131005194, 0.06399344911116045, 0.0557707764470613, 0.9708871722859169, 0.9907503228281112, 0.9898224804656601, 0.984899549845896, 0.9850244417936976, 0.9747439639863135, 0.9869452999613081, 0.9883980037233611, 0.9882096015807406, 0.12848920406983544, 0.15657804328364033, 0.11976442307197899, 0.17932574720729721, 0.11623753370117795, 0.17524119016396178, 0.08307619034530378, 0.0864752492420443, 0.16182028412221483, 0.24497992189856632, 0.19744620338206686, 0.3402266685771239, 0.21246054219027966, 0.514565266954959, 0.17413066745499817, 0.429935961648899, 0.12359386208002121, 0.1822807735763845, 0.11979175804248954, 0.08272951858117816, 0.11181575987490322, 0.0906632254242895, 0.0672484535199297, 0.1016615374247869, 0.09794986122960092, 0.03566234621784592, 0.11521409021425755, 0.04465750823587733, 0.03858245267549554, 0.09157179338868537, 0.11404811367215484, 0.08819727815280043, 0.04834837022473437, 0.09566575661059074, 0.09680493502398402, 0.08050945607923277, 0.014964657932478587, 0.009872143151907764, 0.019094753494120043, 0.005648393683144626, 0.01755444345694812, 9.999999999998899e-05, 0.10806693474780726, 0.003650122962564617, 9.999999999998899e-05, 0.05270580942358161, 0.07554608066946134, 0.10429651355518799, 0.05521308192729901, 0.0760238541913304, 0.013096490649090797, 0.0380680687901338, 0.09385687658030606, 0.06887143055227285, 9.999999999998899e-05, 0.010397912227064432, 0.028224694665084815, 0.055802504709953404, 0.037047383131128875, 0.03420476070985912, 0.12782094620646856, 0.03258430301340143, 0.031125470870854044, 0.10324001384842463, 0.14021244617091488, 0.0865854553549339, 0.0025753598651637732, 0.12740351411646644, 0.1320350991179543, 0.12089951198649085, 0.03485673993382277, 0.04087699958088875, 0.39538965482920685, 0.3566041469475746, 0.32534503697007744, 0.4208273135879538, 0.3126581148553258, 0.37820863112250847, 0.3682622050910541, 0.3291027653662796, 0.34591193205734294, 0.08232669210441412, 0.07477089104414769, 0.09547293008123381, 0.07715801834552216, 0.08121081148891995, 0.07713346524093101, 0.0679316663333035, 0.06817645590984689, 0.08275898327592646, 0.14602795321667705, 0.12753023022771592, 0.14750987336378762, 0.14009808766863951, 0.1578378610513751, 0.1353515953911798, 0.15633370127939816, 0.20396012779585915, 0.1730804171779622, 0.18087413311119593, 0.24018574478489885, 0.25060972657917346, 0.22535738298760932, 0.2220237758094935, 0.22741642043825527, 0.21766141594264188, 0.2591644030311351, 0.23731596512190922, 0.2002322560907136, 0.18111413097351725, 0.20068174799200822, 0.16303831655793632, 0.1391919095665306, 0.19719986903965037, 0.18755705132861145, 0.1989748264228639, 0.18698369653235836, 0.17022637189457857, 0.16656669340813735, 0.1835778097324059, 0.16852537039615856, 0.1592919084548332, 0.1703962486823708, 0.1771782161861093, 0.1605833870265162, 0.16577100361215757, 0.16653502771390793, 0.15734851753732693, 0.17464858572573616, 0.17138374579319537, 0.13587697984962377, 0.1944796356015488, 0.17091547302176735, 0.16905987209117923, 0.17709429782712816, 0.47272997633293645, 0.45916123295469324, 0.14944226381297088, 0.42947404184912774, 0.1833238364778691, 0.3719251536254894, 0.16531059692935834, 0.17043859918885151, 0.4026509739331474, 0.2231348442217871, 0.363829985419756, 0.16907555785310346, 0.22754406603261323, 0.2993341072512866, 0.3229922603028992, 0.19623520168622133, 0.19212169955004044, 0.18603794093469384, 0.1995296194179167, 0.1868775488552863, 0.18896712567793073, 0.19141825981000948, 0.18617540521640574, 0.1984577879788202, 0.19889180228058823, 0.17985475303630505, 0.2016764229956397, 0.06433228339771813, 0.06260216922567852, 0.059491208198915735, 0.06457273002607777, 0.06272953659683622, 0.06150390973023567, 0.07370101233875903, 0.0644586924914351, 0.06128762163659596]}, "mutation_prompt": null}
{"id": "d1398ee3-7d78-4cb2-a852-b7b36464ea46", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "dc3d05ff-b8c1-44fd-934e-143667f38218", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "ea7c18e8-378a-452d-926e-ead2e2711152", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Adaptive inertia weight\n            self.w = 0.9 - 0.5 * (self.evaluations / self.budget)\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update with crossover\n                new_position = self.population[i] + self.velocities[i]\n                cross_prob = 0.7\n                if np.random.rand() < cross_prob:\n                    new_position = np.where(np.random.rand(self.dim) < 0.5, self.population[i], new_position)\n\n                self.population[i] = np.clip(new_position, self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with adaptive inertia and crossover strategy to improve convergence and diversity.", "configspace": "", "generation": 62, "fitness": 0.1422881312651642, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.3409023661446594, 0.25063105801010166, 0.2639487155457453, 0.3354580325577796, 0.1819748916157068, 0.33376037647997847, 0.29826974644856696, 0.33998899654575243, 0.333263940863075, 0.007882066507978402, 0.07979451404497995, 0.005913548215200404, 0.015270199050442024, 0.03655480640302067, 0.0229508251172742, 0.04125535801770053, 0.006748462544749256, 9.999999999998899e-05, 0.04495972824728378, 0.06622365389589246, 0.05844090594481588, 0.06693794734011027, 0.06121633883974831, 0.048311305220021694, 0.05890752014472178, 0.07394865510111415, 0.0593546420040979, 0.03433909819491476, 0.03069414065465592, 0.04374085135024397, 0.036794770673647004, 0.03311664702468442, 0.03509135763676263, 0.0432720791670248, 0.045755668704970054, 0.03183695812991172, 0.9846456530734807, 0.9890558901669808, 0.991123317029818, 0.9806296092742396, 0.9878691655253256, 0.9736749288743585, 0.9766009435177934, 0.9846038598518968, 0.9882347369185782, 0.07161994982908704, 0.09366784104844172, 0.0664381634371859, 0.09746105696788054, 0.08318922671870421, 0.08421878994982213, 0.10360168456689056, 0.07852312925381133, 0.07398550404582416, 0.1407149928338477, 0.14623434442724514, 0.13811925913983703, 0.18542019776109808, 0.1747703437594733, 0.1692311252728803, 0.11889315849658555, 0.1574652032902919, 0.14764664888432455, 0.027986123017396114, 0.04173350669962905, 0.051106199086057846, 0.025297353052074478, 0.052101570859575674, 0.03227723353511558, 0.07039116654756306, 0.008655299585408449, 0.03482794213015783, 0.029451696498658753, 0.04530249573022849, 0.013749265306307601, 0.014221697847729198, 0.03346741814649301, 0.04758976065523279, 0.012009828972252778, 0.013809761699903333, 0.01724737525254172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05117383958638855, 0.03040229716410847, 0.06349719347162741, 0.028487910472790867, 9.999999999998899e-05, 0.006210301969785892, 0.03947718133859657, 0.039252662086037726, 0.01710737482007152, 9.999999999998899e-05, 9.999999999998899e-05, 0.00022199513422349604, 9.999999999998899e-05, 0.0010103407392023644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002250797997895959, 0.028348038239803808, 0.011083712261254597, 0.00400672712702943, 0.057216937429142356, 0.01434826821195856, 0.045960288039209596, 0.02738969307493555, 0.04029481446631911, 0.024590320509898955, 0.21704540711094888, 0.2733616316667422, 0.23906414530308728, 0.256395008115769, 0.26968081219298246, 0.2542605096045407, 0.20353918412462535, 0.22870586189765896, 0.2330462475753431, 0.06419475709985523, 0.05886413560849846, 0.07316903526930962, 0.04770260556916506, 0.05084714954886749, 0.052161439473529914, 0.04844146650059644, 0.06614555496651808, 0.053054591748565305, 0.1445576477321553, 0.13310728582977682, 0.13462936215802035, 0.12961809001454805, 0.15245458108521293, 0.13336469429872466, 0.16038809815516797, 0.14312676870058827, 0.13726004436577843, 0.18434674332491208, 0.19485264028109706, 0.18710872724755845, 0.16423442415530776, 0.17625640018943833, 0.18719732651203758, 0.19987634801765908, 0.21323434597874402, 0.19369172768359233, 0.1106070296743441, 0.12916992874596345, 0.11207093834509119, 0.11050336766804181, 0.12243364407844926, 0.10785619718163564, 0.13603153962440573, 0.12786899715305722, 0.1394078877556958, 0.151832056810279, 0.13426121936001223, 0.14771279934602588, 0.15142182864232112, 0.18902016944691702, 0.14898565595991553, 0.16687996566718433, 0.15827342520578114, 0.16607913704118205, 0.15419566118646888, 0.1681036987443365, 0.16620537703369032, 0.14195611970011401, 0.16015203676032108, 0.1525750356222383, 0.1727481018842263, 0.14554180241619796, 0.15714894204169416, 0.38731921156729665, 0.19857488542653168, 0.12140856446024895, 0.14441052604652527, 0.1533014277525213, 0.16047422893218788, 0.1457277519317015, 0.16205076890839043, 0.15476659805004567, 0.20496205282928182, 0.15101411870581083, 0.12685928976477956, 0.13177393821215155, 0.1855253478335417, 0.17534855899814006, 0.19437907121841524, 0.17084340883077054, 0.20092408005038498, 0.17320379946533015, 0.17155569303646845, 0.18135496693319308, 0.19240633590354972, 0.17654899767106014, 0.19259961280500748, 0.19288399111720012, 0.18713596126142207, 0.17487513759996087, 0.06507518639391796, 0.05280094851688932, 0.05253288554273772, 0.04150264726807962, 0.04501404863204339, 0.05736956520944936, 0.05786311458095461, 0.05257694058909168, 0.04884004396222985]}, "mutation_prompt": null}
{"id": "92c9b465-6db9-41f5-ac42-525d89838c4f", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # initial inertia weight\n        self.w_min = 0.4  # minimum inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update inertia weight\n            self.w = max(self.w_min, self.w - ((0.9 - 0.4) / (0.5 * self.budget)))\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations, introducing adaptive inertia weight decay for better convergence.", "configspace": "", "generation": 63, "fitness": 0.13100246928851209, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.2068400844711492, 0.16567655938839687, 0.2281129231411222, 0.2357433478984584, 0.2571732428204663, 0.23752238197551245, 0.17872451370334186, 0.22216526547898074, 0.2026740017994062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04104809354501826, 0.04828040496003727, 0.03766756441327146, 0.04194798172607461, 0.05252995323651555, 0.055348984773930354, 0.0533272876931582, 0.04860181931789653, 0.044685864176344126, 0.03053396742417358, 0.02408457870676106, 0.027292555501261084, 0.039378999556355154, 0.04294921609190028, 0.03860432674228231, 0.026473643945460923, 0.015843443759546605, 0.032735087137003016, 0.970882336313503, 0.9907509803192291, 0.9898240723485892, 0.9849020907814284, 0.9850257190208044, 0.9747586309508045, 0.9869449014761843, 0.9883981703132254, 0.9882172627889546, 0.11239333217982495, 0.10133013879312036, 0.08948331069214999, 0.11776963982701438, 0.10474130433547546, 0.09899094120694518, 0.08393248053633795, 0.07903225273273984, 0.0799532119661619, 0.14888103028451183, 0.1296851291851555, 0.12631783426962007, 0.16151294501614955, 0.1144881574846659, 0.15375010348431073, 0.11152596160595585, 0.11374207534822622, 0.17122766275392787, 0.035555251276139455, 9.999999999998899e-05, 9.999999999998899e-05, 0.039925623065581894, 0.002117436867804412, 0.0071788252304119116, 0.011203886773971328, 0.023308578174550676, 9.999999999998899e-05, 0.04312807007426256, 0.023895409180738736, 0.042890108709424224, 0.029277431837368195, 0.014238132449882923, 9.999999999998899e-05, 0.0009047827447354884, 9.999999999998899e-05, 0.006023291250150775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053048061120238854, 0.0333507839615218, 0.03286098602884524, 0.04450115515672637, 0.0783010784153153, 0.014621104686017627, 0.019614895970441082, 0.0767147957240959, 0.01500026574569202, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008870000477346873, 9.999999999998899e-05, 0.007251775106979608, 0.005923140852446385, 0.0044822342451440456, 0.024345773814230975, 0.010530479754563005, 0.03677042469491387, 0.015933275716678907, 0.21896717698033885, 0.20452060799584793, 0.19206251010864506, 0.22071326943192715, 0.18989037089646932, 0.22627526375598173, 0.22471146711838574, 0.18225326206250525, 0.20489466051420813, 0.06584412837833387, 0.06997038989078741, 0.06054722153044545, 0.054393526137104575, 0.062326901068356366, 0.05687851781944442, 0.03475113527998108, 0.08729590806683973, 0.044658658283293184, 0.12512863673404573, 0.15286409550955227, 0.13906593897386976, 0.1226649835569289, 0.1538457870817701, 0.12629129390902272, 0.15766230474013032, 0.15220849702853867, 0.12200720033115031, 0.16435771470588223, 0.17534364538749292, 0.1838214542433827, 0.17351987874218144, 0.14401861872417832, 0.16268873426228836, 0.18335427196898113, 0.1840756663854911, 0.1758670663095725, 0.10112738527237997, 0.10739748438128338, 0.1076024164422168, 0.1337779672084971, 0.11176318649293737, 0.13503572300729616, 0.11189162380139772, 0.11252402397294625, 0.11350164309697341, 0.16056885350602057, 0.1455954466589544, 0.20445162120721105, 0.15141409598348943, 0.15926079269362436, 0.1599043341748111, 0.15058360509393276, 0.14929961001622982, 0.14426031145355078, 0.16424643724522936, 0.1334916434955572, 0.15387690529683584, 0.14040159337195546, 0.13070391972215534, 0.14309064760561307, 0.15391018455780925, 0.15450683730616022, 0.14479409848947777, 0.18768332149251687, 0.16761485671644694, 0.14258808058096217, 0.16493327252400036, 0.16421078211076112, 0.16539877985793683, 0.163615080392558, 0.14072417483581245, 0.15853577593156365, 0.13649193692201456, 0.16258531343831695, 0.139213786364342, 0.12548241256768455, 0.13850279794949416, 0.10771042924695451, 0.19289693419267473, 0.18106439019631948, 0.18330670429020124, 0.17938622623322886, 0.18060644469233644, 0.18334498286747902, 0.1801497083313055, 0.19762985271127131, 0.20129579434386746, 0.21150483070584847, 0.1808149688024644, 0.20051136068456377, 0.047153617000254444, 0.04596934927179841, 0.04638105322075703, 0.03991584928931391, 0.047462206202239954, 0.05186444124084266, 0.041210212604516516, 0.0512530236999017, 0.04930263083310016]}, "mutation_prompt": null}
{"id": "56d54191-0b02-48d7-a4b7-fb63fcd9cf27", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w_max = 0.9  # maximum inertia weight\n        self.w_min = 0.4  # minimum inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n                \n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Calculate dynamic inertia weight\n            w = self.w_max - (self.w_max - self.w_min) * (self.evaluations / self.budget)\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply adaptive differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with dynamic inertia and adaptive local mutation for improved exploration-exploitation balance.", "configspace": "", "generation": 64, "fitness": 0.18921862005156498, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.4914980308374315, 0.4396653658636316, 0.45780992934828924, 0.397870885027944, 0.5012352439486594, 0.4351053482611599, 0.39404742298669015, 0.46196380378553126, 0.46110833063847434, 9.999999999998899e-05, 0.03691814920375469, 0.02342582837947449, 9.999999999998899e-05, 0.01726128750878364, 0.012769783715663618, 0.02525126118880039, 0.09983873416044464, 9.999999999998899e-05, 0.07499593969324392, 0.06693333557218961, 0.08894857809940171, 0.07957002129976443, 0.07084823511710214, 0.06356904376058337, 0.0744792198922185, 0.07501000259443846, 0.07347743057324319, 0.03921056924411037, 0.06662149917763494, 0.05286234440033566, 0.06942336365483393, 0.05944280309578576, 0.06073426148323324, 0.05568760302647968, 0.07424869076831786, 0.04208835264055155, 0.9708982407426144, 0.9907501007601675, 0.9898213258577497, 0.9848986622401102, 0.9850235970407828, 0.9747398233487695, 0.9869453720070751, 0.988397738258448, 0.9882057543041358, 0.17041750561539593, 0.1632350787963769, 0.14079957314471359, 0.14043203762693668, 0.11678023423006156, 0.13905037743369686, 0.07968109765355169, 0.08613660369251008, 0.14534235724308486, 0.15887753697592433, 0.21590187527139615, 0.35730045054616644, 0.18620061312093317, 0.42566885134029175, 0.27804560622209984, 0.3012941600494521, 0.40130796869200136, 0.15828707405354303, 0.16431293864264152, 0.13928914417549332, 0.07811257171247166, 0.09900912779995508, 0.08006753406872247, 0.11160571202770875, 0.19148229404862926, 0.049786857231596926, 0.12924193005612505, 0.04678937034596131, 0.028984860046483263, 0.11274014639335361, 0.20657377777137897, 0.09109735775993155, 0.14510404224791618, 0.0802698167623137, 0.0329505973874038, 0.04531892175439667, 0.02389157337206327, 0.02018292358085727, 0.043823421695221576, 0.012958826045319283, 0.033352770851718505, 0.00154487279346871, 0.12561655555778217, 0.000750562133086663, 0.02737405157944761, 0.06128368409585416, 0.1286931556718922, 0.023224745931287316, 0.13408638319783617, 0.10149350239208654, 0.025685542643787418, 0.05445138832252783, 0.0618554887234215, 0.03276071020961424, 0.025904830162992942, 9.999999999998899e-05, 0.012679450637482104, 0.03355922298906078, 0.02406570978170497, 0.03593755222831674, 0.018346297082920127, 0.027228863665670677, 0.07151166007451415, 0.1323496549013664, 0.006071259612645319, 0.09777405716069043, 0.0862087568287454, 0.08656799015359662, 0.09135663163625285, 0.0899263284349876, 0.14260505273524415, 0.03758046795645553, 0.3507711680386796, 0.38875380840163676, 0.3951267448708461, 0.37361774308646345, 0.3959424149848072, 0.3365509549113449, 0.32382462867676653, 0.4351133621154568, 0.349987877041982, 0.08329204611228747, 0.08150983439321313, 0.08179583907362653, 0.06776176839060499, 0.08503831161516318, 0.07706961352163777, 0.0802133089286946, 0.06807251516885915, 0.08134533975560099, 0.13743499327566644, 0.13370426571104255, 0.13621105198991645, 0.1632094659021699, 0.16342450078007353, 0.12434100889952082, 0.1460954019018622, 0.13171432612088663, 0.15130330079013166, 0.19936831344814232, 0.19785946427389667, 0.23247360586292143, 0.27700589285386357, 0.24454115922556463, 0.24925392266272461, 0.25628199321672696, 0.2974861540394289, 0.2311799424579586, 0.17302152472832, 0.16805663499378953, 0.21208007914359606, 0.1797919328540395, 0.15241036857718082, 0.1646708433918087, 0.18238886631374052, 0.21073496105219836, 0.18694711356145222, 0.17755525280414264, 0.14806798534297927, 0.1844335315460739, 0.17759494206359228, 0.17239015311775152, 0.15950592634491878, 0.17293573901293346, 0.16064829378613943, 0.14546053581129126, 0.18074348045096722, 0.15918610123339927, 0.1692152538575381, 0.17951338567672903, 0.14981251278068686, 0.16234512699260883, 0.16529590476809497, 0.16377111747613637, 0.15886052133379125, 0.557168928719089, 0.46438511222906365, 0.14870724669230184, 0.4556658790035867, 0.18504477877593828, 0.17285233899110009, 0.16628318505311923, 0.3153539509750388, 0.16872240058436383, 0.26687919983533925, 0.30513350459024113, 0.15871835058627204, 0.12671081530408046, 0.2320482036572693, 0.3120553489895317, 0.19598739943259447, 0.2665612286356409, 0.2483251009938613, 0.17555338322230818, 0.19838946044699002, 0.18595993491230078, 0.20652620454864934, 0.181971722604224, 0.1868776989989972, 0.1751192035793847, 0.1881787499102887, 0.18043584744503782, 0.06923320955426937, 0.0651036448613217, 0.05086516529361029, 0.05224104717685185, 0.06547815744642627, 0.06847133565873298, 0.0693173305795517, 0.06184387365504895, 0.06273759639095389]}, "mutation_prompt": null}
{"id": "63bc2bfb-9829-4c9b-96d8-eb5feafc6ad0", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # dynamic inertia weight starts high\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.w = 0.9 - 0.7 * (self.evaluations / self.budget)  # dynamic inertia weight\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with dynamic inertia weight adjustment for improved exploration-exploitation balance.", "configspace": "", "generation": 65, "fitness": 0.2212591221828961, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.5699616076867313, 0.5403380412703407, 0.5493613850516803, 0.6733134750334401, 0.5799776204683924, 0.4705307007516556, 0.5813965156783911, 0.5384690221089191, 0.5340238077280812, 9.999999999998899e-05, 0.31194308939700344, 0.3174861536956566, 0.26859074727527354, 0.19308853879133026, 0.23269750997889782, 0.31077939922706665, 0.28261811293973305, 9.999999999998899e-05, 0.0943651306585005, 0.0780868430946553, 0.09895114075808142, 0.09780900957300231, 0.08090504577815305, 0.09172348454512846, 0.08203198974135462, 0.11027129395730062, 0.050732216273777, 0.0994434880607119, 0.08066924680680454, 0.09358176090104242, 0.07694357572156518, 0.06061733594604335, 0.06267594093482454, 0.09518718759030431, 0.06990833477225167, 0.06398679600294177, 0.970904283832053, 0.9907496918891988, 0.9898201088416098, 0.9848973506865444, 0.9850225035673851, 0.974735696937403, 0.9869454326240382, 0.9883974741268468, 0.988200085249806, 0.18118162518087488, 0.19926443277531758, 0.05809924696814306, 0.22109572700054192, 0.12348372258338036, 0.2057083188776906, 0.09232811601732793, 0.08417588313726743, 0.13985953263344997, 0.1826721843286323, 0.5131459539579695, 0.4030381421796362, 0.38173710208364886, 0.18016499423912025, 0.1725352942591335, 0.4361437420629213, 0.12137791224474537, 0.12334157299725845, 0.11270696152174386, 0.1270024670931149, 0.06399844019003853, 0.13461939447915972, 0.09334993203690811, 0.19295456581331139, 0.1832131360031476, 9.999999999998899e-05, 0.28253268801127174, 0.020930993290975475, 0.08916482721419161, 0.04749726992851577, 0.12584006080152554, 0.09077074397835327, 0.13806990653716134, 0.10740682686965486, 0.1405994313560568, 0.11986002163980614, 0.03410398685558924, 0.04272950031255385, 0.04306598782824245, 0.016513018963383197, 0.04656274948352879, 0.030240499680745048, 0.3624188475062521, 0.25482910667791825, 0.0134813013391335, 0.055038541314060385, 0.12066675309487651, 0.04784217699014148, 0.13442935765994357, 0.07970881445666733, 0.015269264990434017, 0.1651187602139138, 0.13647503136920458, 0.06171887350129068, 9.999999999998899e-05, 0.061763207618133475, 0.04628251117537108, 0.16176500792141835, 0.04462305325241145, 0.02379970525689934, 0.04400400531777615, 0.06943416244426448, 0.07622282026071736, 0.19022551255754427, 0.029469221740792473, 0.12057265705859976, 0.2617382692992344, 0.21360451909469869, 0.1371793398835438, 0.06292428017080742, 0.03564214160202339, 0.05152408270731268, 0.43355149088261646, 0.480219054928793, 0.503859090400417, 0.5795598626880814, 0.43381998964478086, 0.42194411215084504, 0.40604576027433237, 0.40854076960289754, 0.4386124482096706, 0.09411454962545818, 0.09069703926478045, 0.10328070327344507, 0.08092143317119249, 0.08227902441521362, 0.10318014507028017, 0.06492286653895118, 0.061418819305603, 0.11278871070194818, 0.17666569274845279, 0.14852282706450315, 0.19309973313461293, 0.13548563281816228, 0.12772258754910748, 0.15126155875566916, 0.1699961374824407, 0.15167939640688166, 0.13400720738740235, 0.2721613225629249, 0.20658011528092124, 0.31268136966971094, 0.3512488463158865, 0.26161680502899987, 0.25052986773482067, 0.2679920949612742, 0.2797385531768992, 0.19369388072934612, 0.20118377514168329, 0.2089104630621963, 0.2061596723037471, 0.20162969212965332, 0.2455563511580433, 0.23821078139526752, 0.24203313040358576, 0.26619280216796837, 0.2155307268987312, 0.18279429705435446, 0.14994809777413798, 0.17904825293279591, 0.17404707716174161, 0.18582428690686148, 0.1670137023423378, 0.169106712229374, 0.17254344259713872, 0.18689858884620092, 0.1830161188133127, 0.1669441887665596, 0.19421646287592143, 0.19538002909282692, 0.17219509363182972, 0.16996832133969586, 0.17518227470471415, 0.16777975140203993, 0.18916781909656433, 0.6998930921171111, 0.6134572033358854, 0.15029308057842494, 0.486541573881359, 0.18607047198822824, 0.17354536947577293, 0.1689226664596728, 0.16426311233731872, 0.16806016853051875, 0.357589016008807, 0.4755368055582545, 0.15278686711838363, 0.1542901261072368, 0.15584266302609362, 0.45131318127794506, 0.19570805358266574, 0.17731732653501953, 0.19863509576381788, 0.17427524159903807, 0.18641740954059383, 0.17867613807832128, 0.17445554134264873, 0.16862047206972852, 0.1944847198491314, 0.19332289911333123, 0.19301321194956322, 0.179866849922937, 0.06629114545480208, 0.07045070707404355, 0.061645476940147326, 0.07486892507611975, 0.07997561225194405, 0.07506028700234624, 0.06984378035366567, 0.07668694599667758, 0.06963132717604825]}, "mutation_prompt": null}
{"id": "7cca733c-8505-4d80-bda8-e0ee73427180", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # initial inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Adaptive inertia weight\n            self.w = 0.4 + 0.5 * (1 - (self.evaluations / self.budget))\n            \n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP now with adaptive inertia weight for improved exploration-exploitation balance.", "configspace": "", "generation": 66, "fitness": 0.18921861853460237, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.4914980308333624, 0.4396653658720858, 0.45780992930679587, 0.3978708862543294, 0.5012352439449583, 0.4351053477804311, 0.39404742311870544, 0.4619638037856886, 0.46110833077820956, 9.999999999998899e-05, 0.0369181492039341, 0.02342582740263055, 9.999999999998899e-05, 0.017261287473378406, 0.01276978371599402, 0.025251261188818708, 0.09983872392961768, 9.999999999998899e-05, 0.07499593968939555, 0.06693333557207448, 0.08894857810702272, 0.07957002130250745, 0.07084823511712457, 0.06356904376346795, 0.07447921989176043, 0.07501000259449142, 0.0734774305741972, 0.039210529516951254, 0.06662149705347453, 0.05286234440036042, 0.06942336365545432, 0.059442803095687835, 0.06073426147684802, 0.05568760285637875, 0.0742486907682518, 0.04208835261538102, 0.9708982407426144, 0.9907501007601675, 0.9898213258577497, 0.9848986622401102, 0.9850235970407828, 0.9747398233487695, 0.9869453720070751, 0.988397738258448, 0.9882057543041358, 0.17041750562701474, 0.16323507879595567, 0.1407995729993805, 0.14043203762455903, 0.11678023426706097, 0.13905037733002867, 0.07968109778912369, 0.08613660369251008, 0.1453423572384107, 0.15887753697592433, 0.21590187527139615, 0.35730045054616644, 0.18620061312093317, 0.42566885134029175, 0.27804560622209984, 0.3012941600494521, 0.40130796869200136, 0.15828707405354303, 0.16431293864194574, 0.13928914417589933, 0.07811257171181607, 0.09900912780174054, 0.08006753406867939, 0.11160571203131187, 0.19148229422146912, 0.049786857236318594, 0.12924193003514173, 0.04678937036061381, 0.028984878571040817, 0.1127400317373396, 0.2065737744752132, 0.09109735776083694, 0.14510404224715456, 0.08026981676223954, 0.032950597387436, 0.04531892175421437, 0.023891573374011932, 0.020182923580690515, 0.04382342169280162, 0.01295882592610964, 0.03335277086354249, 0.0015448727314458788, 0.12561655549464845, 0.0007505621266518103, 0.02737405193771225, 0.06128368409571938, 0.12869317135782854, 0.023224745929835477, 0.1340863831796958, 0.1014935023930339, 0.025685542643675174, 0.05445138832242846, 0.06185548872343061, 0.03276070940409992, 0.025904830145201285, 9.999999999998899e-05, 0.01267945063668341, 0.03355922166303571, 0.024065709790932255, 0.03593755223619899, 0.01834629708328972, 0.02722886366289945, 0.07151165986815289, 0.13234965490312445, 0.0060712596126282214, 0.09777405453962196, 0.08620875680659101, 0.08656799015606398, 0.09135663156559493, 0.08992632842558701, 0.1426050527528494, 0.037580467959168695, 0.35077116810972997, 0.38875380840105944, 0.39512674521101476, 0.373617743201198, 0.39594241499126015, 0.336550955127495, 0.32382462904940024, 0.4351133621756774, 0.3499878769693422, 0.08329204650009159, 0.0815098349455089, 0.08179583906373022, 0.06776176839045567, 0.08503831161519826, 0.07706961347131458, 0.08021330892742384, 0.06807251516885915, 0.08134533975712144, 0.13743499327691588, 0.13370426571104255, 0.13621105203696804, 0.16320946589684393, 0.163424500777558, 0.12434100889952227, 0.14609540190641745, 0.1317143261205327, 0.15130330079013166, 0.1993683127020116, 0.19785946426960077, 0.2324736058536605, 0.2770058928543041, 0.24454115922512287, 0.24925392266192659, 0.256281992808552, 0.2974861540445872, 0.23117994246556361, 0.17302152471944532, 0.16805663499392065, 0.21208007911493743, 0.17979193285565764, 0.15241036849255485, 0.16467084301565282, 0.18238883247883753, 0.2107349610511111, 0.18694711337447545, 0.1775552528002352, 0.14806798605888216, 0.18443353278658825, 0.17759479761402996, 0.17239015327802099, 0.15950592643873973, 0.172935741324857, 0.16064829485762677, 0.14546053245825352, 0.18074348045064104, 0.15918610123364652, 0.16921525386265346, 0.1795133856763237, 0.14981251278060514, 0.1623451270009013, 0.16529590476796963, 0.16377111747602136, 0.15886052133574724, 0.5571689287125436, 0.4643851122278774, 0.14870724669230184, 0.45566587900213107, 0.18504477877593828, 0.17285233899110009, 0.16628318505311923, 0.3153539510558586, 0.16872240058484944, 0.26687920035208723, 0.30513350458674116, 0.15871835058624295, 0.1267108153040959, 0.2320482036596957, 0.3120553489743435, 0.19598739943257426, 0.26656122746128863, 0.24832509283223858, 0.17555338063086967, 0.19838946044700068, 0.18595993491190344, 0.20652620452870385, 0.18197172260900207, 0.1868776989989972, 0.17511920357988986, 0.18817874990992645, 0.1804358474330946, 0.06923320955221601, 0.06510364487005771, 0.05086516572949751, 0.052241047180179856, 0.0654781574468658, 0.06847133566605512, 0.06931733058068346, 0.06184387365529331, 0.06273759638249599]}, "mutation_prompt": null}
{"id": "ca60965a-03c9-4ecd-a16a-cad47bdc8761", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # increased initial inertia weight for exploration\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.5  # decreased initial mutation factor\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            self.w *= 0.99  # adaptively reduce inertia weight\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n                    self.mutation_factor *= 0.99  # adaptively reduce mutation factor\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced convergence and diversity in HAPSO-DP by introducing adaptive inertia weight and dynamic mutation factor.", "configspace": "", "generation": 67, "fitness": 0.19880973257904772, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.6647681340718874, 0.3552323070752532, 0.4870302879101315, 0.2005652862062327, 0.19636803472376663, 0.7341837964201245, 0.18154536821281708, 0.39470043649294706, 0.3513819547419318, 0.1309981944506251, 0.030269062954592085, 9.999999999998899e-05, 0.03188845665073625, 0.038844467495520396, 9.999999999998899e-05, 0.038677494241338706, 0.004114772841076975, 9.999999999998899e-05, 0.08388728204945506, 0.08783704178459462, 0.08489073982698558, 0.06514543274170304, 0.10456736057503768, 0.10634861544080154, 0.120892734642982, 0.10373263690926326, 0.05289226934111757, 0.12481466040710298, 0.10073926530247612, 0.09545619385676751, 0.06396083181599299, 0.07204751375995633, 0.04660492878120148, 0.07704122104604882, 0.09228245346145847, 0.09382421995524926, 0.9871019250645606, 0.9907489924721575, 0.9898036365357058, 0.09939344955212615, 0.9841200629712316, 0.9786836359951988, 0.9801698513031502, 0.9876383021750894, 0.9833750152741682, 0.2325035216830641, 0.20381315944890477, 0.15961386981174852, 0.16473367676932726, 0.14359744435879152, 0.14594519083254653, 0.08555691659519926, 0.12494233580735348, 9.999999999998899e-05, 0.2220726876370116, 0.3475328797439403, 0.3268109978731424, 0.19011061553718023, 0.11453105571023803, 0.20892748655139537, 0.7538786427412648, 0.1229920373065363, 0.17625968507446577, 0.21649424166270737, 0.1026049350596493, 0.15314854619103901, 0.12645228314968315, 0.13133963312475883, 0.11781698119154893, 0.15234147173706447, 0.12788756862144723, 0.11119569726402878, 0.19154782478176036, 0.04960905571123353, 0.11542981457949697, 0.14304395591393293, 0.13065143444481275, 0.10783047328945561, 0.06548500778802446, 0.17971500010400776, 0.10872014723153822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032120039992796445, 0.10819455933511091, 0.048488074589230434, 9.999999999998899e-05, 0.10391412150770829, 0.10190843578470399, 0.026387357695354496, 0.15752403946458848, 9.999999999998899e-05, 0.030147747532028424, 0.029022770087954064, 0.08776770519660482, 0.16548046633803282, 0.04232705315927088, 9.999999999998899e-05, 0.1655800691501127, 9.999999999998899e-05, 0.09785437367085814, 0.17852548153666725, 0.10030237448051771, 0.0485723075949589, 0.08095369199405977, 0.10392350606685397, 0.03430778552857083, 0.05378982607581273, 0.005237054207604008, 0.07831794089589461, 0.1864378327383751, 9.999999999998899e-05, 9.999999999998899e-05, 0.070587636627923, 0.5547909536322103, 0.40607266476646187, 0.42278621968515295, 0.5107964533672762, 0.41040987378025207, 0.5145486817564828, 0.5852955951743066, 0.44357247078808837, 0.5388108499030033, 0.07135171882210034, 0.095277262463347, 0.06784792989719768, 0.15621537944269825, 0.045509238049072476, 0.0970150832765363, 0.06803788686061074, 0.10776305032119649, 0.1750036489335569, 0.1503224776227171, 0.2181560581294565, 0.16246740119949377, 0.22438519181238858, 0.134506726021965, 0.17171027133024797, 0.1580212119481712, 0.1736036254595399, 0.17759807848258424, 0.1895227996231591, 0.30249557238181435, 0.2675695481258805, 0.24466573837431882, 0.23159273050708173, 0.21850696097641809, 0.3129690160460187, 0.23652284315952743, 0.2616357051599667, 0.22733079283549895, 0.1800290704640447, 0.25089376024185495, 0.18140086634895602, 0.1493979523616128, 0.21211181656551714, 0.2597508821277341, 0.21392346804806595, 0.29385263965920516, 0.21550729946904734, 0.22110517697657783, 0.21477250735211095, 0.2054626748710724, 0.19206358937495738, 0.1875594079340629, 0.2068979234961167, 0.24308484440960487, 0.21495765123281385, 0.18756965778391377, 0.18371188170148067, 0.21589040024974016, 0.1958989139995243, 0.18799322891192527, 0.17986520187059618, 0.18146628308188673, 0.17282384325726396, 0.18920370113245488, 0.1653735124396446, 0.20146332047107696, 0.14824620977117753, 0.5215916474797258, 0.1952735000929413, 0.1668972058313728, 0.1195044452076407, 0.16643485574821737, 0.19588395695069272, 0.2985012018198868, 0.2482471693482574, 0.3747198285910933, 0.5176779217110868, 0.35002459948951314, 0.13218752748703932, 0.10270478456722665, 0.1245281321697932, 0.2068923307288767, 0.18487220367614365, 0.18510508271120196, 0.18410212540164017, 0.19943904540403823, 0.23104537438198813, 0.20000155860930957, 0.21136205320867663, 0.1874122490233523, 0.17874873960748716, 0.06789888252316689, 0.06206190986203397, 0.0875638587336347, 0.07547131216408687, 0.07753393537705966, 0.06898908750807242, 0.08322099985615206, 0.07625212876722731, 0.08091033320537411]}, "mutation_prompt": null}
{"id": "b50c8dd8-c6d8-4b06-a2ec-1abe5ad74b58", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "4337cae6-259c-4ac9-952b-cf7def6b1c82", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w_max = 0.9  # max inertia weight\n        self.w_min = 0.4  # min inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.8\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Adaptive inertia weight\n            self.w = self.w_max - ((self.w_max - self.w_min) * (self.evaluations / self.budget))\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with adaptive inertia weight and dynamic mutation factor for improved exploration-exploitation balance.", "configspace": "", "generation": 69, "fitness": 0.18842164513770032, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.4781233185483956, 0.41954413305635363, 0.36096447159139, 0.5070861895454211, 0.41968799859139094, 0.45215158046470016, 0.41359906302559246, 0.44565676995234027, 0.45951241688710553, 0.08097521068637292, 0.14998655286753604, 0.14927492455263947, 0.10743744918927678, 0.08350859249185105, 0.11224867728533516, 0.1503971392649588, 0.0063071976816032604, 0.018053278626655844, 0.10799979610086463, 0.09857426197413821, 0.08844582778707843, 0.06873948353360537, 0.06632486968921036, 0.0862012727343392, 0.08081679417161536, 0.07411082778271116, 0.047652732430881084, 0.0675259251676753, 0.04647723799390746, 0.054139527166836565, 0.06280227215740253, 0.06268352853782022, 0.05003315091374316, 0.07637619707303034, 0.06029148908796089, 0.06423432593196632, 0.9697144703197857, 0.990752570137518, 0.9898218835525741, 0.09964351288533924, 0.9845415836576099, 0.9808171896250336, 0.9868979991870719, 0.9883910045475736, 0.9879703335672678, 0.190936177048892, 0.12085507080296598, 0.15693435948654644, 0.13929529786812367, 0.14298912163971234, 0.15185181095847056, 0.12235666633904152, 0.12601351306775632, 0.14463519356257715, 0.1985637677565849, 0.2237739133417379, 0.3950510379085779, 0.2587218428533232, 0.18422819875358754, 0.18203752648836202, 0.2446034679700434, 0.4463058522047302, 0.1269856830794519, 0.10743209788731167, 0.10681883803134684, 0.05691750495419434, 0.19594172074500238, 0.08682460322646401, 0.06630440546375871, 0.11951426395953368, 0.10124576580487832, 0.11053806904542618, 0.020052175982966047, 0.09390712679443636, 0.04468064355728407, 0.10913258129076908, 0.12479637002131205, 0.09615562457721649, 0.11122992021427835, 0.03873527583214231, 0.13032158397906712, 0.09189010297547451, 0.029253155432781175, 0.023325001045348293, 0.0002516555122632491, 0.08845001625000481, 0.04225067012903583, 0.1060191113341501, 0.006010343566574372, 0.012167766755173948, 0.05852478408923001, 0.06271258238056943, 0.03564772662373639, 0.1384407208844859, 0.07859421088163054, 0.010252850550250714, 0.04790988645205452, 0.03333383904169385, 0.11431116533269847, 0.02123542661377764, 9.999999999998899e-05, 0.028155576486936118, 0.05022029052959165, 0.03092150799042226, 0.05024134684810089, 0.051837915187396555, 0.08500543472646316, 0.023747576324208652, 0.10318942566583411, 0.0642588889615332, 0.0927073099615241, 0.13741225478343844, 9.999999999998899e-05, 0.13603451659472632, 0.11867391020665052, 0.09296639084022063, 0.04809117814471042, 0.38276920227037214, 0.3368683165935137, 0.33965997883479426, 0.40539925717886727, 0.4000906899901383, 0.34030058147467757, 0.3455398235759869, 0.336141863357199, 0.40548586119352104, 0.05943858470832242, 0.08401154208580208, 0.043325037836333125, 0.09272509954377894, 0.08156855232807392, 0.08352626001597252, 0.0625195764591363, 0.176525051393863, 0.07578841660790736, 0.12529610236612332, 0.13256789012654568, 0.16442535029957528, 0.12686241887981053, 0.1649955104900631, 0.15626924861495117, 0.17464171913038595, 0.14883176379140262, 0.15238445671923417, 0.2636262781823485, 0.2734440273158161, 0.2474598634586177, 0.23659867584446093, 0.21100854037658212, 0.24426249321620452, 0.31153023797719215, 0.21208995718941215, 0.2367843707466647, 0.20782874832021403, 0.1432598749190318, 0.182473741708012, 0.15925975906129575, 0.14525373600030833, 0.16053241434776122, 0.22470542425674567, 0.16450237224467745, 0.16387119467608913, 0.18264451352306688, 0.15958446187795527, 0.1822741645432282, 0.1802578233215838, 0.1704204226231799, 0.17417444810272464, 0.16314079391388792, 0.172057513058949, 0.16709114756502352, 0.17171678633878495, 0.1607777420746228, 0.1718457391980981, 0.1525754423217739, 0.15568447674999042, 0.16645895110318543, 0.17503796440908737, 0.16180112438080851, 0.18332564013191555, 0.16335867888529576, 0.38978121188253956, 0.14961673136378772, 0.38666524775629496, 0.1766768196243591, 0.17437492040399316, 0.09779249373307997, 0.17260561150028864, 0.43702810270813386, 0.6053571282955607, 0.15589000477042847, 0.17766631030941293, 0.5753770499867432, 0.33243886486540863, 0.21927209798905223, 0.18174434516342142, 0.20309698258881725, 0.1872099012225854, 0.1869358310648367, 0.1859514711025564, 0.2010146833056643, 0.1909385918046812, 0.16286577975388683, 0.17080314892382398, 0.17823836935195014, 0.17616724141328866, 0.19908955326260824, 0.06688820807994855, 0.0732527046158955, 0.055729388244867506, 0.06328317064709243, 0.06591087054680067, 0.057679280113901, 0.06689189860598976, 0.0675203061898012, 0.05921668509677147]}, "mutation_prompt": null}
{"id": "4d14f40e-2746-4753-9ae0-ee73a4014e0a", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # initial inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Dynamic inertia weight update\n            self.w = 0.9 - (0.5 * self.evaluations / self.budget)\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced Adaptive Particle Swarm Optimization (EAPSO) introduces adaptive update of inertia weight for dynamic balancing of exploration and exploitation.", "configspace": "", "generation": 70, "fitness": 0.18921862005156498, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.4914980308374315, 0.4396653658636316, 0.45780992934828924, 0.397870885027944, 0.5012352439486594, 0.4351053482611599, 0.39404742298669015, 0.46196380378553126, 0.46110833063847434, 9.999999999998899e-05, 0.03691814920375469, 0.02342582837947449, 9.999999999998899e-05, 0.01726128750878364, 0.012769783715663618, 0.02525126118880039, 0.09983873416044464, 9.999999999998899e-05, 0.07499593969324392, 0.06693333557218961, 0.08894857809940171, 0.07957002129976443, 0.07084823511710214, 0.06356904376058337, 0.0744792198922185, 0.07501000259443846, 0.07347743057324319, 0.03921056924411037, 0.06662149917763494, 0.05286234440033566, 0.06942336365483393, 0.05944280309578576, 0.06073426148323324, 0.05568760302647968, 0.07424869076831786, 0.04208835264055155, 0.9708982407426144, 0.9907501007601675, 0.9898213258577497, 0.9848986622401102, 0.9850235970407828, 0.9747398233487695, 0.9869453720070751, 0.988397738258448, 0.9882057543041358, 0.17041750561539593, 0.1632350787963769, 0.14079957314471359, 0.14043203762693668, 0.11678023423006156, 0.13905037743369686, 0.07968109765355169, 0.08613660369251008, 0.14534235724308486, 0.15887753697592433, 0.21590187527139615, 0.35730045054616644, 0.18620061312093317, 0.42566885134029175, 0.27804560622209984, 0.3012941600494521, 0.40130796869200136, 0.15828707405354303, 0.16431293864264152, 0.13928914417549332, 0.07811257171247166, 0.09900912779995508, 0.08006753406872247, 0.11160571202770875, 0.19148229404862926, 0.049786857231596926, 0.12924193005612505, 0.04678937034596131, 0.028984860046483263, 0.11274014639335361, 0.20657377777137897, 0.09109735775993155, 0.14510404224791618, 0.0802698167623137, 0.0329505973874038, 0.04531892175439667, 0.02389157337206327, 0.02018292358085727, 0.043823421695221576, 0.012958826045319283, 0.033352770851718505, 0.00154487279346871, 0.12561655555778217, 0.000750562133086663, 0.02737405157944761, 0.06128368409585416, 0.1286931556718922, 0.023224745931287316, 0.13408638319783617, 0.10149350239208654, 0.025685542643787418, 0.05445138832252783, 0.0618554887234215, 0.03276071020961424, 0.025904830162992942, 9.999999999998899e-05, 0.012679450637482104, 0.03355922298906078, 0.02406570978170497, 0.03593755222831674, 0.018346297082920127, 0.027228863665670677, 0.07151166007451415, 0.1323496549013664, 0.006071259612645319, 0.09777405716069043, 0.0862087568287454, 0.08656799015359662, 0.09135663163625285, 0.0899263284349876, 0.14260505273524415, 0.03758046795645553, 0.3507711680386796, 0.38875380840163676, 0.3951267448708461, 0.37361774308646345, 0.3959424149848072, 0.3365509549113449, 0.32382462867676653, 0.4351133621154568, 0.349987877041982, 0.08329204611228747, 0.08150983439321313, 0.08179583907362653, 0.06776176839060499, 0.08503831161516318, 0.07706961352163777, 0.0802133089286946, 0.06807251516885915, 0.08134533975560099, 0.13743499327566644, 0.13370426571104255, 0.13621105198991645, 0.1632094659021699, 0.16342450078007353, 0.12434100889952082, 0.1460954019018622, 0.13171432612088663, 0.15130330079013166, 0.19936831344814232, 0.19785946427389667, 0.23247360586292143, 0.27700589285386357, 0.24454115922556463, 0.24925392266272461, 0.25628199321672696, 0.2974861540394289, 0.2311799424579586, 0.17302152472832, 0.16805663499378953, 0.21208007914359606, 0.1797919328540395, 0.15241036857718082, 0.1646708433918087, 0.18238886631374052, 0.21073496105219836, 0.18694711356145222, 0.17755525280414264, 0.14806798534297927, 0.1844335315460739, 0.17759494206359228, 0.17239015311775152, 0.15950592634491878, 0.17293573901293346, 0.16064829378613943, 0.14546053581129126, 0.18074348045096722, 0.15918610123339927, 0.1692152538575381, 0.17951338567672903, 0.14981251278068686, 0.16234512699260883, 0.16529590476809497, 0.16377111747613637, 0.15886052133379125, 0.557168928719089, 0.46438511222906365, 0.14870724669230184, 0.4556658790035867, 0.18504477877593828, 0.17285233899110009, 0.16628318505311923, 0.3153539509750388, 0.16872240058436383, 0.26687919983533925, 0.30513350459024113, 0.15871835058627204, 0.12671081530408046, 0.2320482036572693, 0.3120553489895317, 0.19598739943259447, 0.2665612286356409, 0.2483251009938613, 0.17555338322230818, 0.19838946044699002, 0.18595993491230078, 0.20652620454864934, 0.181971722604224, 0.1868776989989972, 0.1751192035793847, 0.1881787499102887, 0.18043584744503782, 0.06923320955426937, 0.0651036448613217, 0.05086516529361029, 0.05224104717685185, 0.06547815744642627, 0.06847133565873298, 0.0693173305795517, 0.06184387365504895, 0.06273759639095389]}, "mutation_prompt": null}
{"id": "ddf99132-0a79-47cf-b1ca-978a5092d556", "solution": "import numpy as np\n\nclass EAPSOSDP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        diversity_threshold = 0.1  # New variable to adjust mutation frequency\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Measure diversity\n            diversity = np.mean(np.std(self.population, axis=0))\n            \n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations based on diversity\n                if diversity < diversity_threshold and np.random.rand() < 0.7:  # Adjust perturbation probability\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "EAPSOSDP", "description": "Enhanced Adaptive Particle Swarm Optimization with Strategic Differential Perturbations (EAPSO-SDP) adjusts perturbation frequency based on population diversity to improve convergence.", "configspace": "", "generation": 71, "fitness": 0.30953779028750616, "feedback": "The algorithm EAPSOSDP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.8345182395545014, 0.8506194220673247, 0.8852687195868147, 0.8476372202458794, 0.1900523010482117, 0.8417825323821716, 0.8898075986845464, 0.8547946664279056, 0.8501185222252615, 0.15952289145928367, 9.999999999998899e-05, 0.2863662687908499, 0.5340814027345562, 0.2079007498699118, 0.04334783215782101, 0.050717888618746265, 0.6012780253525358, 0.5026170558581902, 0.08003954744812869, 0.1441792831598283, 0.09832654033135135, 0.10751401603730626, 0.1623519676973043, 0.10670386749103022, 0.06496721952093776, 0.1187474716488357, 0.09833102860810372, 0.04994083568501828, 0.09696357726655225, 0.11570080153256146, 0.09715781223576736, 0.03390143550189317, 0.04235359532627958, 0.10138126929995739, 0.038856288651586746, 0.12479175950594512, 0.9894296434230032, 0.9936176434709755, 0.9916572904687547, 0.9782334224310744, 0.9837253487610792, 0.9166066227174423, 0.9855995720348594, 0.9837133814540697, 0.9919982291826877, 0.44717423452509053, 0.13334885819088027, 0.3007247985809074, 0.4106030760551501, 0.33514906330257377, 0.2831742142537993, 0.12638225218169608, 0.2952948216348432, 0.24130003762982866, 0.1877397270872706, 0.09088271093796718, 0.13556767981479556, 0.28449596469298677, 0.18045706504486225, 0.20560371598992044, 0.13812729411938762, 0.12913736214736582, 0.08912485993874819, 0.4813768855530458, 0.397343893216224, 0.32707664318420737, 0.1340579953617551, 0.5751554252274778, 0.2881675811279065, 0.6345996361896105, 0.7541996532227938, 0.5108097462402411, 0.5792522614750315, 0.12951266373549752, 0.1336512061002626, 0.48446654617142737, 0.6668992048211079, 0.5143111108957028, 0.32769227055796324, 0.15069768041358167, 0.12742177765124418, 9.999999999998899e-05, 0.1852114359227588, 0.09033376134284665, 0.4085869875253133, 0.5820641656453345, 0.018952747595238018, 0.13874017977644904, 0.05626736884363104, 0.05338595517569955, 0.1691511933494887, 0.08334796759056828, 0.4487612731798428, 0.10976108878876656, 0.013494680585193097, 0.1458012154224433, 0.42855786565058873, 0.3888737017679922, 0.10497796275486182, 0.5061535334493084, 0.20279574641543907, 0.04861813494810052, 0.25447807288102164, 0.30822949985777337, 0.2022893783260894, 0.15066469045509512, 0.3559434482062226, 0.09275846252967801, 0.16931991072896158, 0.37481911804345414, 0.3751683026956857, 0.19650974535372545, 0.16934807435673715, 0.38348591000370524, 0.08192557375324483, 0.1589136070437911, 0.31735852856927693, 0.7545651915462133, 0.844812580098377, 0.7622699133019564, 0.7419138035111815, 0.7308744969779208, 0.7730352599825063, 0.7935593584150188, 0.7148683176105308, 0.6656353957635677, 0.0710234706691526, 0.07645964526998472, 0.028110096503870086, 0.09704996480613592, 0.09489964401263806, 0.10787033292071013, 0.08530096169746826, 0.06573960259022515, 0.16529383559749655, 0.20418371886448938, 0.26958108213331666, 0.20927712214739314, 0.21783448920381077, 0.23658018147792315, 0.16294841406167837, 0.27372864206433867, 0.15183305532502256, 0.22469684943936086, 0.1586501656490602, 0.22571883703171514, 0.22788464529162222, 0.29533071598424343, 0.23492790454132284, 0.3409785881990147, 0.28723403511594814, 0.25219568433728756, 0.20583801679933633, 0.22399043178540412, 0.18724757893641952, 0.1502584060391675, 0.29401108511643304, 0.2177872331611458, 0.23601272918023897, 0.221174184578822, 0.3543226041126124, 0.18827521065988417, 0.20092668910378353, 0.16991210684192914, 0.2154072770754698, 0.23517060933778877, 0.21709976819839383, 0.1705557975813463, 0.18949084618305245, 0.261186704508516, 0.2131672868162635, 0.18346746628009802, 0.178832882725952, 0.1875681788762179, 0.18290014700549106, 0.18282110354582226, 0.19313209290936706, 0.2016708574906414, 0.22609376590250674, 0.17052911956559036, 0.9093179888682855, 0.20956814511562838, 0.1542142254073764, 0.9421009487975203, 0.20179665969733995, 0.20052391629697186, 0.09996905659557598, 0.1702168315654966, 0.9392237070714532, 0.9411326954460821, 0.15752530829054756, 0.11130496354613972, 0.10481103416528026, 0.16942483238951667, 0.8341982828961637, 0.860934427735706, 0.10483581071734338, 0.5675585992090855, 0.21716860734421273, 0.2242486099525175, 0.24937747493228757, 0.24806358401435868, 0.18313290783966296, 0.2265673434618498, 0.21867440200782695, 0.28012412456801294, 0.2675721848522077, 0.1112067122691156, 0.050748156333796035, 0.0737062113957343, 0.07535917713229523, 0.10088260784088621, 0.10229785250252776, 0.0841798815637741, 0.054879778610926744, 0.07414945544330165]}, "mutation_prompt": null}
{"id": "e7063c6e-295d-42ca-bb5f-de0ffdb79402", "solution": "import numpy as np\n\nclass EHAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.7  # increased inertia weight for exploration\n        self.c1 = 1.8  # slightly increased cognitive component\n        self.c2 = 1.3  # slightly decreased social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "EHAPSODP", "description": "Enhanced Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (EHAPSO-DP) optimizes swarm parameter adaptation, balancing exploration and exploitation more effectively.", "configspace": "", "generation": 72, "fitness": 0.19155996089483926, "feedback": "The algorithm EHAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.5080216107752569, 0.2891534037227522, 0.4426076217963979, 0.49829427867203246, 0.4444388121737549, 0.4708285138311912, 0.4306579225001712, 0.38934946818034966, 0.3614610907835738, 9.999999999998899e-05, 0.08458566238548415, 0.02227936195414748, 0.02840623682608079, 0.0068451462050838074, 0.014755346666707747, 0.09741563238399009, 0.02734231772004625, 0.019390976650304093, 0.09242306680140833, 0.08478570116579232, 0.09234706217810507, 0.0886533944123552, 0.07794367969405425, 0.08158570016266298, 0.09968697324486564, 0.08084845441199451, 0.07049601015339013, 0.06057552704958702, 0.06275003803165036, 0.06743791461328241, 0.06552097312658756, 0.05464116881897296, 0.03615689706867453, 0.05000827922315221, 0.04839145696692926, 0.06246092185059393, 0.9795408119351477, 0.9895123768540486, 0.9790875533051078, 0.9831925277930328, 0.9804638280618273, 0.982831444681946, 0.9857079321770974, 0.984664892062556, 0.9868431622535061, 0.15872439790438497, 0.1588578782963268, 0.1240700423366663, 0.19782965892677573, 0.13594908376757253, 0.1476495428176744, 0.1775317143298547, 0.14449830222507842, 0.09009321934260084, 0.20398442242327608, 0.6372578458657279, 0.2892021606012234, 0.2444728923089584, 0.33563479515671457, 0.1893639235351514, 0.21057318715869144, 0.3674984939753937, 0.2513656069882959, 0.12443867390987229, 0.1187808852806882, 0.0692506270750538, 0.14781125048405797, 0.21073126611014892, 0.06942887411843335, 0.10179444696080209, 0.039865340104176306, 0.13061522154680605, 0.12310148575986424, 0.10093079021797657, 0.085430460768955, 0.17300082800188177, 0.14104489157430344, 0.07249406513199297, 0.16087690167517, 0.09454989616513809, 0.1395783302381831, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03188617081806766, 9.999999999998899e-05, 0.0005457448230162809, 9.999999999998899e-05, 0.10641264597205935, 0.13543267598618947, 0.0234151793156816, 0.09358815234190931, 0.05962494728735224, 0.02482823288906022, 0.036458519815861345, 0.11594378841239084, 0.06263227299812735, 0.0430535125639917, 0.04000891960042896, 9.999999999998899e-05, 0.005718063859401212, 0.078990137268523, 0.029736093725457602, 0.013564050603871669, 0.04099249089700974, 0.057716709107926034, 0.056621741279272664, 0.1459517603015953, 0.08115706744928719, 0.06645740231820951, 0.08634608548651346, 0.13509717155437773, 0.09916338339837893, 0.1422499043660913, 0.08515902330521663, 0.10914254204665397, 0.40183643754594844, 0.3773237654514272, 0.28377695331296005, 0.3302941506475934, 0.33255617750195177, 0.28056538316735813, 0.5328946455321272, 0.3828640787608627, 0.30182934720764754, 0.08309557209094853, 0.08677069770562806, 0.07556447172924163, 0.10707917037279835, 0.09445092020984758, 0.08189683162115358, 0.07281568733840649, 0.06903171942689856, 0.08759452258571343, 0.1388824050901174, 0.22104530082212048, 0.14455510939693084, 0.1707748641615945, 0.17431938348791098, 0.15807599570602104, 0.17038686823886784, 0.18431629498405377, 0.15624590970301144, 0.30609368463084297, 0.20790038996409, 0.23077100850635957, 0.26151624107294347, 0.17880281808387322, 0.20431784836699163, 0.24076114380456037, 0.23254964050650273, 0.20189128533064904, 0.1465999549954855, 0.1826035712567532, 0.17942332976841358, 0.2045190770182269, 0.17883381044231483, 0.15870075582106602, 0.13710587210859781, 0.19368640510856872, 0.18493600803530796, 0.1910759953513156, 0.1657616971925714, 0.19722533971081213, 0.1924808836048405, 0.1928270412974905, 0.17655198784001735, 0.16762794459881658, 0.16989112182607857, 0.1930547041933417, 0.17640551586197528, 0.15793709724580873, 0.1929291264572096, 0.1746443561465557, 0.17790033443905107, 0.17074384160230582, 0.16881669986859849, 0.1647163107651961, 0.16566289165959458, 0.17933500437933814, 0.16628181620213545, 0.1487591973271728, 0.5997068317842335, 0.1842837968880583, 0.17473751184616138, 0.09959461059056862, 0.16410755591995496, 0.544637128917377, 0.33891483423638846, 0.29113958255443895, 0.17696135006107994, 0.19629794777859277, 0.20473457025717834, 0.31793508134565074, 0.12132728364306367, 0.20614181187897995, 0.2796114916212947, 0.17463102222166837, 0.17816374003248725, 0.17474145639395267, 0.18650220005142037, 0.16384404048417944, 0.18565959871775095, 0.18659001607502934, 0.17120172847205217, 0.18074249380848773, 0.060372578638987706, 0.07528647272270828, 0.07126875040549696, 0.0642158806849753, 0.07202790980855911, 0.07366895045941235, 0.06787050099297665, 0.059178263026465894, 0.06700320057328557]}, "mutation_prompt": null}
{"id": "ea74b5cf-f041-4666-ac2b-0673580a126a", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "2320f649-a9e1-4444-ab21-04c7a29daf42", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * np.random.uniform(0.4, 0.6) * self.velocities[i] +  # Stochastic inertia\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with stochastic inertia adjustment for improved exploration-exploitation balance.", "configspace": "", "generation": 74, "fitness": 0.23569977512168094, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.5035598884413737, 0.8980633702804817, 0.9108723564783782, 0.183275858544372, 0.3099458813700927, 0.6223425177438131, 0.48128770058189585, 0.41851840909883986, 0.5573343282449807, 0.0791856345398424, 0.05175686370939969, 0.1477971408190668, 0.06061584888775562, 9.999999999998899e-05, 9.999999999998899e-05, 0.21795408639021363, 0.09754048154765316, 9.999999999998899e-05, 0.10964967162313044, 0.10965429979194874, 0.1098446847739375, 0.1353162560968032, 0.05841006833780116, 0.12262698955672202, 0.07971014458611025, 0.1915723495612297, 0.11659733940920392, 0.11009277345193169, 0.08334701562336855, 0.08669584948147113, 0.08988083706481398, 0.06145815188011661, 0.14177543921752422, 0.03228913008717804, 0.048415522384220644, 0.04152807224138655, 0.9814127592430141, 0.99333158884741, 0.9870829260272235, 0.8854884551032998, 0.9660248977362158, 0.9748551705215714, 0.9849900513859146, 0.9893106146734038, 0.9670755115281964, 0.28553317389519417, 0.07964686594411141, 0.05945850790934315, 0.16415169297291066, 0.42447938354561787, 0.4642938452850416, 0.31562627598603243, 0.16635567291495668, 0.0801899726338472, 0.15963235449255975, 0.23666104721288328, 0.28565380979954, 0.259585870234029, 0.19393092086837005, 0.19243112460963607, 0.11698591912769041, 0.891956534937316, 0.24178716732199945, 0.31268657387783627, 0.12554846991177782, 0.07779922451908028, 0.12258777937666221, 0.16188783011508745, 0.04644110901416898, 0.11633232029372098, 0.14853262268989742, 0.1771066405965348, 0.18475981013783982, 0.11817553970257344, 0.2405395621371622, 0.16465239038903678, 0.02628744870245503, 0.1316424563753411, 0.2020772845852874, 0.014650056588828342, 0.15173189206567383, 0.06340688791359661, 9.999999999998899e-05, 9.999999999998899e-05, 0.04006519715356749, 0.02199981173036103, 0.07256798937002262, 9.999999999998899e-05, 9.999999999998899e-05, 0.010124267153226896, 0.10739233433241047, 0.029947010774269978, 0.15854708131088135, 0.20196633100328942, 0.021622557545053156, 0.01574515503589413, 0.46066534741831133, 0.06088507604601745, 0.1546130418684306, 0.05220678697589687, 0.04522519711793427, 0.33192184730301455, 0.079334790649219, 0.2629932746169499, 0.08195071217855254, 0.1628554051528801, 0.07653185213854208, 0.07564230062834754, 0.17393076343334923, 0.20656654194068647, 0.21026114376772498, 0.10296446676562265, 0.04120085801538009, 0.1746652300097976, 0.25194375366670463, 0.05003909168620235, 0.1442716174960751, 0.6063777775667029, 0.4265608287561692, 0.366917735216418, 0.426378576922653, 0.34333788699017564, 0.45531288262549885, 0.5014023455255956, 0.3429021398334845, 0.6927864341901527, 0.0971067689070938, 0.07217786771130397, 0.06326223499403294, 0.11476947318269981, 0.07021173751543774, 0.14505099873761373, 0.07592689236651207, 0.11505808449126742, 0.09011188218275878, 0.24909968053678477, 0.16186397399182573, 0.19554156175702941, 0.2540457153396992, 0.26274860789736565, 0.17478134333572903, 0.3216924278357558, 0.18875725073991656, 0.20421867996132237, 0.20483057032866214, 0.22069935518307893, 0.336701155151508, 0.30716140937034264, 0.31963847629358466, 0.24328990762594216, 0.1939190104424966, 0.37142507806733216, 0.29045517864819625, 0.10776430497443434, 0.23533667469248432, 0.1744862003009906, 0.24342493192396264, 0.18658181418184672, 0.2372077287178771, 0.16197652446516309, 0.2605206806602981, 0.23727298296221666, 0.2288419534412257, 0.2096261894407332, 0.21445750206457592, 0.21827423455199124, 0.21635160620042804, 0.190388933276202, 0.20804475690238655, 0.21640782237625267, 0.22855354464937339, 0.17344604279837206, 0.1828896513274022, 0.1934658486843842, 0.18406718465653926, 0.19557487489008907, 0.17094709996956114, 0.1897613653293151, 0.18046467257672283, 0.19039636956453476, 0.48517645940446197, 0.17344137259824843, 0.15451426160600457, 0.941216340440733, 0.20167398366495337, 0.19997799709332031, 0.15077624635576425, 0.17009021900642696, 0.6709372126106778, 0.9220464849533622, 0.15628360048319379, 0.11247922906559016, 0.21059691180585216, 0.1674578034881744, 0.35409718960848, 0.20320465661133302, 0.10529309061264414, 0.9319944109625755, 0.18310959463478238, 0.18805769969532515, 0.18082400708988666, 0.2137048084850549, 0.2067973225807036, 0.1805057141756914, 0.1996890193280506, 0.19091155753862454, 0.21123412731370006, 0.07291436590498668, 0.08660871436091, 0.0803649338581538, 0.0779099137439292, 0.1001689644365017, 0.11510441694629603, 0.11507000213152296, 0.08276332111499252, 0.08606223688910308]}, "mutation_prompt": null}
{"id": "a4e5dc4b-829c-4f1c-96ce-6df5c8e80676", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities, inertia weight, and positions\n            self.w = self.w_max - ((self.w_max - self.w_min) * (self.evaluations / self.budget))\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSODP with adaptive inertia weight and velocity clamping for improved exploration and exploitation balance.", "configspace": "", "generation": 75, "fitness": 0.2606450276304431, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.5664183471678292, 0.5005392151116913, 0.5485249875749576, 0.5050848577838701, 0.5682791971780455, 0.6277184070510355, 0.6003145705358216, 0.5537519918838083, 0.5545457739050883, 0.1963511575952276, 0.1601074627686141, 0.14916969323187057, 0.14509626608162796, 0.21080236965883836, 0.13712332151634787, 0.1778318129722758, 0.2681982751156504, 0.20389400905742205, 0.11753887303695065, 0.13731341048108825, 0.09943592688229819, 0.10369594432908835, 0.1120554188277616, 0.12594683157622677, 0.11694031718057774, 0.10701258370707234, 0.0940157072911636, 0.09849919239401939, 0.0782905060140503, 0.11160622848289148, 0.0877372607260537, 0.10022283073859817, 0.10360620246836605, 0.09759835272290185, 0.07564314079409828, 0.10521502831936291, 0.9507297679181239, 0.9646351721213884, 0.9374654581870888, 0.9619430578052403, 0.9839396964960391, 0.9517107888854781, 0.9695192385565696, 0.960605258335684, 0.9513097351439114, 0.2598583416330411, 0.2842829379630889, 0.26349981890405383, 0.2512090877774319, 0.259951715934871, 0.23971169100071443, 0.2627253137056471, 0.25578122253334246, 0.27059721542633497, 0.6309930488974569, 0.5167988831399433, 0.42750965362047333, 0.5367578054987963, 0.19831008246301407, 0.2017232446442414, 0.5805748992088128, 0.559553406298271, 0.5448918521401865, 0.15944611990810464, 0.20312835930988205, 0.12241146722490526, 0.14959579343895457, 0.20511266688810892, 0.2687015122887594, 0.25590586012843397, 0.164378356984194, 0.43008721847880127, 0.20926602334933075, 0.19976424055069297, 0.15433843086847887, 0.21632547892079212, 0.19235740520086775, 0.1751971334782051, 0.2356633296489924, 0.31078449032496214, 0.16753182903434172, 0.0909808382838484, 0.03675045916820019, 0.08372049689176242, 0.11372831017023122, 0.23802311272648602, 9.999999999998899e-05, 0.04049759929881491, 0.010331658432965574, 0.0850231369277209, 0.15855928506059425, 0.1255834443827365, 0.2080374348261017, 0.08107914156886853, 0.07420923975893134, 0.07706035025835589, 0.12283527193097199, 0.13086836484310516, 0.07081900563597232, 0.10135133887251757, 0.03169256958861644, 0.08003744172900273, 0.0779324858091257, 0.0659582432698127, 0.027700644380446615, 0.07372764427208445, 0.040689363953347546, 0.06501358441412397, 0.18269116469351487, 0.09736149440714759, 0.10592689971637026, 0.16050606247763932, 0.19434694386499973, 0.14446158954557575, 0.14917147207731907, 0.1581985707960084, 0.06375509289998804, 0.5032894047741852, 0.48878204728355135, 0.46830014117104135, 0.5047668958521346, 0.43555953154828086, 0.4720708084120394, 0.4872991615426313, 0.5054365114506856, 0.45346632979924306, 0.12874825161771475, 0.12324890963966229, 0.1085477446919535, 0.13527583979416447, 0.1144403284864457, 0.10134799692901342, 0.12748393048227558, 0.12002022921433653, 0.09494104536513381, 0.13857539945198938, 0.15294398645551177, 0.1564771966816485, 0.12846865706040278, 0.1512498644299468, 0.15146152008705394, 0.1519118611750484, 0.3565837510521509, 0.24305224738888076, 0.32523343631777635, 0.2980572473503772, 0.3044512459509582, 0.3072852589880889, 0.32158477327832424, 0.3106007560604155, 0.320915507872939, 0.3390143054861362, 0.2890581931787807, 0.22803001080929586, 0.2580952617962703, 0.262862805972228, 0.2775536254716048, 0.23511501189148132, 0.24529017714849422, 0.23379575508880424, 0.2466795612653595, 0.21714773987070335, 0.22669322265535363, 0.2168559168227272, 0.22380596949113762, 0.20670827720966856, 0.22310811572951328, 0.22548125531698282, 0.2084242991941554, 0.18838920229797718, 0.19884907139959285, 0.2039522586467819, 0.20405256143573514, 0.2342345357610639, 0.19164042977204754, 0.21025182180860835, 0.19141904523360864, 0.19763095901974348, 0.19750827348562972, 0.20359123664289225, 0.18580222168937988, 0.17417832592387528, 0.18417350929453602, 0.6492338742849315, 0.19641940419968118, 0.6772991771009261, 0.7385046664754923, 0.6739200274429082, 0.612036714960368, 0.5680426782577563, 0.16603756293310712, 0.6294320841372727, 0.16621263547852305, 0.20897216915749084, 0.587304386902026, 0.16772466360738958, 0.15189452738573583, 0.20643936268773067, 0.17803466020363945, 0.16927757421187395, 0.18987033045257518, 0.20571967337256114, 0.18388877509673807, 0.17722696003892957, 0.18642583075028496, 0.18557225606952565, 0.19295186784900198, 0.10213688649514319, 0.07979945033729507, 0.08700275550727943, 0.09726712434431306, 0.09073138361920008, 0.09974878972236856, 0.08160754392152614, 0.08187911708928264, 0.07800094025471083]}, "mutation_prompt": null}
{"id": "dae266b2-fec5-4e1b-9537-2e8e91848230", "solution": "import numpy as np\n\nclass EHAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.9  # initial inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Adaptive inertia weight\n            self.w = 0.4 + (0.5 * (self.budget - self.evaluations) / self.budget)\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "EHAPSODP", "description": "Enhanced Hybrid Adaptive Particle Swarm Optimization with Dynamic Inertia and Differential Perturbations (EHAPSO-DP) adjusts inertia adaptively and integrates differential perturbations for robust exploration and exploitation.", "configspace": "", "generation": 76, "fitness": 0.18921861770683726, "feedback": "The algorithm EHAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.4914980308336001, 0.4396653659744989, 0.45780992933715703, 0.3978708862518686, 0.5012352439593346, 0.4351053478612026, 0.3940474231151234, 0.4619638037794018, 0.4611083307905264, 9.999999999998899e-05, 0.036918149203443495, 0.023425827393787957, 9.999999999998899e-05, 0.01726128862361498, 0.012769783727701767, 0.025251261188818708, 0.09983868654472294, 9.999999999998899e-05, 0.07499593968934914, 0.06693333557199899, 0.0889485781055217, 0.0795700213025109, 0.07084823511828886, 0.06356904376307881, 0.07447921989176043, 0.07501000259283841, 0.07347743057428491, 0.03921052908548284, 0.06662150710208137, 0.05286234440299231, 0.06942336365538082, 0.05944280310741723, 0.06073426147787109, 0.055687602857332985, 0.07424869076817509, 0.042088352616706626, 0.9708982407426144, 0.9907501007601675, 0.9898213258577497, 0.9848986622401102, 0.9850235970407828, 0.9747398233487695, 0.9869453720070751, 0.988397738258448, 0.9882057543041358, 0.17041750562708546, 0.16323507879447274, 0.14079957319320036, 0.14043203762458156, 0.11678023397588566, 0.13905037739665638, 0.07968109778872823, 0.08613660369243348, 0.1453423572358019, 0.15887753697592433, 0.21590187527139615, 0.35730045054616644, 0.18620061312093317, 0.42566885134029175, 0.27804560622209984, 0.3012941600494521, 0.40130796869200136, 0.15828707405354303, 0.16431293864198926, 0.13928914417501292, 0.07811257171138986, 0.0990091278017382, 0.08006753406801259, 0.11160571202619829, 0.19148229422214225, 0.04978685707165764, 0.12924193004226303, 0.04678937036061148, 0.02898475008511381, 0.11274010703306181, 0.20657377446656633, 0.09109735775278971, 0.14510404224649687, 0.08026981676223954, 0.0329505973829326, 0.04531892175408414, 0.023891573374011932, 0.020182923586729684, 0.04382342169301012, 0.012958825928502171, 0.03335277088402999, 0.0015448727418468922, 0.1256165554827381, 0.0007505624044581438, 0.027374051889193618, 0.06128368409571938, 0.12869315932723935, 0.02322474593135082, 0.13408638318391897, 0.10149350239500832, 0.02568554264287337, 0.05445138832247087, 0.06185548872343061, 0.032760709272059874, 0.02590483014520506, 9.999999999998899e-05, 0.012679450636584266, 0.033559221661955796, 0.024065709779404587, 0.035937552239408754, 0.018346297083277396, 0.02722886366940125, 0.07151165981442176, 0.13234965490343897, 0.0060712596123894125, 0.09777405454823362, 0.08620875680619922, 0.08656799015984185, 0.09135663155747276, 0.08992632842525872, 0.14260505252176903, 0.03758046795947434, 0.3507711681095742, 0.3887538083787596, 0.3951267451063678, 0.3736177432012602, 0.3959424151590544, 0.33655095517123346, 0.32382462895852016, 0.4351133645252687, 0.3499878769331498, 0.08329204650014022, 0.08150983213710483, 0.08179583906224974, 0.06776176839045567, 0.08503831161421405, 0.07706961345366692, 0.0802133089274284, 0.06807251516888646, 0.08134533975707559, 0.13743499327682163, 0.1337042657110291, 0.1362110519940034, 0.16320946589834961, 0.16342450091556726, 0.12434100889952204, 0.14609540190641745, 0.13171432612084188, 0.15130330079013166, 0.1993683126854061, 0.19785946447800484, 0.2324736058528768, 0.277005892854281, 0.24454115924497033, 0.2492539226560644, 0.2562819928064757, 0.29748615408697276, 0.23117994246603746, 0.17302152471942223, 0.1680566349930095, 0.2120800791611096, 0.1797919328556683, 0.1524103696194119, 0.1646708427466379, 0.1823888333046969, 0.21073496104977574, 0.18694711337603298, 0.17755525280065154, 0.14806798451222658, 0.1844335336351629, 0.17759479843372827, 0.1723901544211649, 0.15950592644042494, 0.1729357413257694, 0.1606481934598547, 0.14546053185894814, 0.18074348045064104, 0.1591861012313064, 0.16921525385940894, 0.1795133856763237, 0.1498125127790576, 0.16234512699540304, 0.16529590476796963, 0.1637711174764832, 0.15886052133553163, 0.5571689287127701, 0.46438511222914314, 0.14870724669230184, 0.45566587900220723, 0.18504477877594194, 0.17285233899110009, 0.16628318505311923, 0.3153539524191894, 0.16872240058485932, 0.2668792003096061, 0.305133504584274, 0.15871835058624295, 0.1267108153040224, 0.23204820548220784, 0.312055348985122, 0.19598739943257426, 0.2665612288414776, 0.24832510040720945, 0.17555338064195547, 0.19838946044699002, 0.18595993491168683, 0.20652620452870385, 0.18197172257678718, 0.1868776989989972, 0.17511920357988986, 0.1881787499093618, 0.18043584743309382, 0.06923320955223278, 0.06510364523880219, 0.05086516564334109, 0.05224104718041578, 0.06547815742931395, 0.06847133566655916, 0.06931733058045797, 0.06184387365147226, 0.06273759639439869]}, "mutation_prompt": null}
{"id": "de85d9ff-bb66-439a-8a30-7a3698a1e5a5", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Hybrid Adaptive Particle Swarm Optimization with Differential Perturbations (HAPSO-DP) which combines PSO's social dynamics with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.7991377841548553, 0.7622543220398044, 0.7792038471269633, 0.8698607035389662, 0.8046741886281772, 0.7633544547229114, 0.7999589562049985, 0.8287443094106386, 0.8280317954612868, 0.5597452375261472, 0.23107496041729747, 0.20035374382946025, 0.6150377031087388, 0.19700548750273617, 0.04424153868409064, 0.011681262763893363, 0.4433824626433104, 0.052304600465697515, 0.092674437281688, 0.09921639687312345, 0.08916040142825454, 0.09541531964890759, 0.1304799745575379, 0.135022624673921, 0.1262879953964532, 0.12422187635907833, 0.10537069449401593, 0.1382651384122171, 0.09912999820344137, 0.1027479667025113, 0.0920778315631513, 0.08871177817092868, 0.13651051620943, 0.08397786838168886, 0.09393035668348149, 0.1293549468391768, 0.9641108253853766, 0.9897709837454711, 0.9897137451666456, 0.9889962434395838, 0.984184452577056, 0.9771808584989631, 0.9859111223072778, 0.9841127777304739, 0.9878645137644532, 0.339693161905096, 0.2561085843068531, 0.31124230534429476, 0.27783854132034214, 0.19660862984033234, 0.19022697697808155, 0.3631105181139175, 0.10868138382381021, 0.2812832173882661, 0.8234421678723751, 0.8138805218105072, 0.6538964781804772, 0.28632046825327706, 0.37118604414530076, 0.19211496576154463, 0.12468398365049738, 0.23076153672134547, 0.7698484045515093, 0.44598574363203347, 0.1250048581760288, 0.6254508008255095, 0.12629098021188234, 0.47706836256701624, 0.38069169248911017, 0.4029327218573937, 0.11393911594188344, 0.38389842482102665, 0.6085650336104038, 0.11462358482063806, 0.12643404493669808, 0.616781287687866, 0.3927412294346492, 0.46118717634082296, 0.15898081412475262, 0.625020406662421, 0.23682775918760435, 0.05479162787929148, 0.291050762447991, 0.0788920892727345, 0.0010880487966578034, 9.999999999998899e-05, 9.999999999998899e-05, 0.4494722659589476, 0.024514255522347206, 0.4909799001052887, 0.21706771350724086, 0.5210130792986523, 0.13211479038597684, 0.2865775133963242, 0.4744186909474525, 0.0309833426495586, 0.4205141102665336, 0.6127771176257146, 0.6199013438663379, 0.12228384514086743, 0.033128601151544035, 0.17285600125887357, 0.08505938328649754, 0.20148598289415998, 0.20195106711142796, 0.26115508327901527, 0.06376667063492636, 0.09533995524960959, 0.5266309188265965, 0.44100877861605436, 0.42283412701146394, 9.999999999998899e-05, 0.037753212470783226, 0.3642671601761204, 0.2772775630861918, 0.33353926534120404, 0.07690060927805553, 0.8053130465158186, 0.7581510358826772, 0.7299741445016834, 0.7704234025776815, 0.7316932497580726, 0.7184853014090455, 0.6798827474175739, 0.7493044646554194, 0.7787465666506954, 0.11534270388932455, 0.09394469062932653, 0.10790133122404355, 0.12180095804245061, 0.12093169889234645, 0.10689225401446967, 0.10181785418983003, 0.10787497104470589, 0.08662512829275293, 0.14586976779847516, 0.14138438685341448, 0.15415446999752713, 0.16095462906786417, 0.2741057993139956, 0.2063670239823464, 0.3759993008901775, 0.2129048905714268, 0.4710751508565152, 0.42842713086853945, 0.3029266943007568, 0.4527126237639154, 0.30945005767835887, 0.37720908993678814, 0.37480693812682153, 0.3476547068721776, 0.40669548888377516, 0.3436569883134536, 0.25548432056447823, 0.2709521238900854, 0.30775190312631195, 0.28166857801118506, 0.20848375174347133, 0.24246899871006422, 0.3648949080302456, 0.45835695946949995, 0.37157483988478524, 0.21121259639329204, 0.19742743646505, 0.17791545673664, 0.20239307624728053, 0.17973090736221586, 0.198636511746913, 0.19243423010133764, 0.1858867873542075, 0.20087356041119064, 0.17336398392196206, 0.2014080349906897, 0.19876692099571203, 0.20924191571640005, 0.20751156398846293, 0.18983430544497015, 0.4911384537899426, 0.17920628735833766, 0.21642416172068024, 0.18525178066081582, 0.16521243024210963, 0.1531979255752698, 0.8264209726867687, 0.20036004582720612, 0.1936944098924237, 0.09996001994222847, 0.7046450585558244, 0.8300259342670337, 0.8821303075439064, 0.6809413950353763, 0.7860074268837631, 0.774277010556925, 0.5928181371098815, 0.20324682112140713, 0.2032544065043551, 0.10473018093895203, 0.2045354540781198, 0.18273911074986404, 0.18077627743933444, 0.17801670252509172, 0.1985594277443734, 0.1941634912539365, 0.18601995396160653, 0.17978422485438628, 0.17624498905898267, 0.17839423447175362, 0.08447296856742126, 0.0800535849777152, 0.07351637354169849, 0.0801108378005605, 0.07479606249626958, 0.07633065509927817, 0.08321511203332488, 0.08307337408003901, 0.07757448957141189]}, "mutation_prompt": null}
{"id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 78, "fitness": 0.3434479844705891, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "4449654d-0bdc-4b71-b08b-14d6916015d7", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "1bc0053e-7db5-4ab3-a970-53f6ef424697", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "11bb8dbe-6e52-4675-b275-0fce45a5a89d", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                progress = self.evaluations / self.budget\n                # Dynamic learning rate based on progress\n                adaptive_c1 = self.c1 * (1 - progress)\n                adaptive_c2 = self.c2 * progress\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     adaptive_c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     adaptive_c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Improved convergence by introducing a dynamic learning rate for velocity updates, adjusted based on optimization progress.", "configspace": "", "generation": 80, "fitness": 0.27437418826541937, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8166467329579546, 0.8312036430089266, 0.47642414699724334, 0.6030482201687675, 0.848500499853982, 0.6522148313416369, 0.6132767212621938, 0.5947391048718196, 0.766354094108544, 0.2107755366732792, 0.18419799734149922, 0.13863014556477682, 0.06156346814308378, 0.07495092109577273, 0.0929856675209001, 0.21647101867680718, 0.007397816244877009, 0.1502170176766382, 0.13872183491282808, 0.11699904466606692, 0.11144961289474631, 0.12199077043851592, 0.12401002752268997, 0.12742961976411915, 0.11557436380313701, 0.11498417962594454, 0.10014747603221363, 0.09486014170373291, 0.09237040967742505, 0.09774016449389578, 0.09460246648276593, 0.11005001763995137, 0.10491022552200835, 0.11043887756880943, 0.0842735289140768, 0.07709888220421235, 0.933269967417225, 0.9877834868318174, 0.8960800926834072, 0.8979805838344541, 0.9473847669594462, 0.6214418791817669, 0.9778398087401958, 0.8778370972692535, 0.8929014796928275, 0.20400346992033724, 0.16187352877784633, 0.14260366019951765, 0.256980849459862, 0.20943667352293172, 0.21145684467922432, 0.27090356956996287, 0.20960813711719473, 0.4059535423795212, 0.7741366837346051, 0.7288708406747675, 0.2386544964950289, 0.8257506151372875, 0.7113590933863627, 0.7958807453339072, 0.7934024943489681, 0.7460022382935492, 0.21960349088461073, 0.12143545856687832, 0.12818297174597282, 0.11462477791185044, 0.12006079893073451, 0.22666942816123514, 0.12275779127224318, 0.12282606959880027, 0.14135467325576578, 0.23520818723694248, 0.2566111843601073, 0.14008502930031952, 0.3954514261089612, 0.1387205964660443, 0.11966240051571642, 0.11880231465670843, 0.11676998140666095, 0.19801116109394945, 0.14428152063537358, 0.07991886157804984, 0.12820074606550058, 9.999999999998899e-05, 0.016324264416612277, 0.04065163614333378, 9.999999999998899e-05, 9.999999999998899e-05, 0.21940826065200514, 0.233871181568174, 0.7570877596821988, 0.23517705777429432, 0.323984332504624, 0.10776545730272302, 0.055248687656165196, 0.5855597872438232, 0.7791569414906566, 0.2197080819487771, 0.09566225038214649, 0.2810713837046823, 0.17801079541484832, 0.10457359607997518, 0.13574719143223957, 0.2573135544711289, 0.18117292316583733, 0.18574064829826575, 0.15190098259986284, 0.2566663680900394, 0.1859123936899667, 0.2336123354160764, 0.15789913038909653, 0.1679879452756351, 0.13969567875449862, 0.104758879676906, 0.238890589973489, 0.039024465324411395, 0.12202071934953496, 0.3213438130972486, 0.44008502141133443, 0.5135638138537472, 0.4868960742848516, 0.33557875631402023, 0.4967791103484438, 0.597886258881209, 0.630353855258877, 0.44149243916929704, 0.14353391726678744, 0.133378363158701, 0.10609743199696109, 0.254213335894551, 0.11596489993587511, 0.12798092072171663, 0.12834238726299008, 0.11091632707370025, 0.09822346499769774, 0.13673348604682034, 0.16578499886862297, 0.16489085347199361, 0.14899379742787133, 0.15409918790630672, 0.17612046129665782, 0.16971722735267047, 0.1630170464584194, 0.16891273209849655, 0.33505386985168806, 0.32102684004843274, 0.2759400507921952, 0.35809049493234457, 0.33387798740254715, 0.475487596381728, 0.3441545665195377, 0.2891829382172959, 0.26837744816483466, 0.24013772419310775, 0.27022180367014725, 0.3061786212452129, 0.2473779750943108, 0.2556875561878704, 0.24856235396418047, 0.3426231585914806, 0.2302187858660527, 0.24176443919914636, 0.2151093825670216, 0.20200820746902937, 0.2198133536886161, 0.20924838923140776, 0.18919056719346994, 0.20667620463519054, 0.22117112609121792, 0.19920755392707945, 0.2062928120816031, 0.17580924163707567, 0.19958986525824407, 0.1790008863987177, 0.19418190481790243, 0.1804301550359163, 0.2043521770998843, 0.18982961188685898, 0.18756488700057006, 0.17856914156490966, 0.7543177861121751, 0.1642428019784118, 0.1713185200218792, 0.4469695695746805, 0.19427853026587294, 0.18488967954976665, 0.5779282285909335, 0.666605914405272, 0.16488430938598742, 0.36913870813927274, 0.15276801330492473, 0.5299740030298373, 0.37905650693497905, 0.16161216931792044, 0.14636433404224447, 0.2577034762102747, 0.20569706252296416, 0.20498829778928063, 0.17984625145824118, 0.20370794104480006, 0.20042979117440973, 0.19496706366794603, 0.1792569435023561, 0.18317520502731566, 0.1763959846815878, 0.18871134676036505, 0.1859673093201879, 0.0876632553010731, 0.10003921677861638, 0.07628890218723794, 0.08286876351114902, 0.08800108981915855, 0.08546303759169938, 0.08725399218778418, 0.08374642332755067, 0.09760455440816462]}, "mutation_prompt": null}
{"id": "d640127a-8bf5-468d-91c6-b0ee87efd691", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "8484fa74-3121-47f1-8b49-dcc1e12cea6a", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "cbdc2794-a2eb-4fc7-9742-e8754ff94c36", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "c65e52d2-a39b-4a77-a197-f1937c766bc3", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        restart_threshold = 0.2  # Threshold for random restart\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n            # Introduce random restart if progress is below threshold\n            if progress < restart_threshold:\n                self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n                self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n                self.personal_best_pos = np.copy(self.population)\n                self.personal_best_val = np.full(self.pop_size, float('inf'))\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced population diversity by introducing a random restart mechanism to prevent premature convergence and improve exploration.", "configspace": "", "generation": 84, "fitness": 0.2902744384984836, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.6024157267855493, 0.6846406322737462, 0.6121840686515195, 0.68441827598603, 0.638693044609759, 0.596056111410696, 0.6498736860146268, 0.679161890582739, 0.663408688616919, 0.2232007269778269, 0.39919432917609954, 0.07814353930357543, 0.1557258989678123, 0.03213699823845617, 0.3322522932531191, 0.4539182481074068, 0.03793483609778925, 0.028848588644245887, 0.1162793456382537, 0.09057143092283237, 0.09029583201100666, 0.09262605097851029, 0.07008275035358236, 0.10106210094683443, 0.07625277980186451, 0.1157688207176949, 0.09332831013860143, 0.08492631680056695, 0.08451339331922225, 0.07814456016787097, 0.04124280469805741, 0.07189182865787369, 0.0754111216195612, 0.08273318744794089, 0.06190725716797241, 0.07671859504808598, 0.8140268073294197, 0.8683280396733792, 0.8492067930261191, 0.9351056896016122, 0.9651316970004997, 0.9327173364621648, 0.9347604980026788, 0.932271641484215, 0.8751453931324612, 0.2615452192086365, 0.28440263786625997, 0.30444011962076434, 0.19798910463990504, 0.3494872287632047, 0.1970679670223915, 0.24672518651524844, 0.2157934252516268, 0.3315374141417671, 0.5646467953133791, 0.12921141088897659, 0.2969562905629445, 0.6434373004094749, 0.11182779975442958, 0.6121345770783919, 0.5255168713231768, 0.6898400061900629, 0.16040819692620556, 0.22113806109194412, 0.10274839606072295, 0.33773729930615504, 0.29420675934709184, 0.253565701136354, 0.22813430143932334, 0.2051829723180023, 0.10359634528654027, 0.06200215927562913, 0.34380668310957263, 0.10214338202018003, 0.37358274963767124, 0.22266685413666787, 0.1367081871187258, 0.17444141195250706, 0.08049387947129871, 0.10296262337385742, 0.24139267223326366, 0.2233797659928024, 0.050780966324234345, 0.12556052505110527, 0.41302827797841934, 0.03395399027506629, 0.1933115861391258, 0.11779074025256342, 0.02407373669841728, 0.2027719196344473, 0.27559829638669675, 0.4421212300396242, 0.40781327072221085, 0.011897992200887164, 0.246332067179316, 0.3347775998510597, 0.488607454433146, 0.2242720824282154, 0.5228234017190425, 0.031909072076115486, 0.026326589339281226, 0.030634842546945373, 0.3087744303565245, 0.28372730496622267, 0.1751752489201832, 0.1588910245660401, 0.047045335655373166, 0.14508510227483928, 0.20333432255902473, 0.1139609387877728, 0.2513595299739222, 0.272194341715545, 0.3052287105573127, 0.23789675465925264, 0.24834714548712644, 0.2504888482745966, 0.05020733763675411, 0.5028259804302218, 0.5622872143229058, 0.5459371012256873, 0.4799323110645525, 0.6259248860190554, 0.4934374611038942, 0.6161527331708061, 0.5943840937606137, 0.6336222129961873, 0.10071732421564761, 0.09056353996724575, 0.09279951434500833, 0.07980715624724166, 0.08645790601170866, 0.08269893819918683, 0.10137013859408472, 0.1136468327873863, 0.10255300643294685, 0.13891000363978856, 0.18869355599818582, 0.2100608750366627, 0.2137383798062168, 0.1514772319839578, 0.14881467062258324, 0.45143311137478825, 0.2956821037606765, 0.15956729399558767, 0.24605900711759487, 0.32176398867092226, 0.33598911281034494, 0.267706502156121, 0.2939116400753745, 0.25304736448134313, 0.3647580582607838, 0.28915398219655986, 0.3372217878079806, 0.262462898705937, 0.21199707343903318, 0.20708308708060497, 0.3354910666016002, 0.2275497735927704, 0.15526310501487917, 0.2022801554107032, 0.21618992457892494, 0.29784316826532686, 0.1905022347149986, 0.1944074790258622, 0.17268183169113127, 0.1772343501474839, 0.18435476288427588, 0.17784193795956416, 0.19141664849048712, 0.18976067755942305, 0.19026556518547644, 0.18810398884275326, 0.171882392002784, 0.21922402286779108, 0.20691110439048976, 0.17095282189719796, 0.19800426765959267, 0.2575088041523067, 0.17954054490712756, 0.21458358725526228, 0.7477618995291759, 0.12554755036976695, 0.7236099459479732, 0.7053539586582553, 0.1857693673751637, 0.725943710763257, 0.3328692534742491, 0.7218028173580966, 0.6749449741452318, 0.6929017782763569, 0.5977098867731464, 0.6924588815410281, 0.6992841919312383, 0.19336420298018087, 0.7040919932975589, 0.4792857043030968, 0.6844397067169132, 0.1512674058098915, 0.18477694198866967, 0.189982906192239, 0.17556369653428805, 0.17695970582691012, 0.1977270321227611, 0.18339974330432052, 0.18670216728446842, 0.19123422138522617, 0.17606760236312569, 0.08689226251715465, 0.07261276404642214, 0.06918726620833782, 0.08456030702521855, 0.08383875323422674, 0.07526816158159522, 0.06864010944948662, 0.06603533647370785, 0.07536047457171935]}, "mutation_prompt": null}
{"id": "b419e9b3-ab33-4bce-914d-2f1a2baa5d23", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "95121f08-aa0a-47ba-a8ab-44111a5cf253", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "fbc50b45-9f2c-4893-9ecc-fbb40fecea2b", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "c29511e3-c13e-47d1-9fe6-e930694d1e08", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "ccccee16-5252-4e86-869b-79e49dc8551e", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "34f7c1bf-7e08-4b49-8815-29e34eb97ef6", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "4f4b5061-7d11-4637-8ecc-d06d6067857a", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n        self.restart_interval = self.budget // 10  # every 10% of the budget\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            if self.evaluations % self.restart_interval == 0:\n                # Reinitialize a portion of the population\n                num_reinit = self.pop_size // 5\n                indices = np.random.choice(self.pop_size, num_reinit, replace=False)\n                self.population[indices] = np.random.uniform(self.bounds[0], self.bounds[1], (num_reinit, self.dim))\n\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor and Random Restart Strategy to escape local optima and improve exploration by periodically reinitializing parts of the population.", "configspace": "", "generation": 91, "fitness": 0.3155040665676233, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8062579650037972, 0.765155606521079, 0.8516160680381323, 0.15648068798015446, 0.802987332262705, 0.24810237425943726, 0.8237515944088706, 0.8380594466334459, 0.8057288579380125, 0.03871883066374482, 0.3161745883779715, 9.999999999998899e-05, 0.5713134745604755, 0.4572217586375056, 0.21827099937776606, 0.5384142673444453, 0.06589732831240458, 0.347942783905837, 0.11331168748454512, 0.14640463676722248, 0.10921241800438142, 0.13936656773781542, 0.0996657304630355, 0.16022269686692947, 0.10151814941931137, 0.10922196197133927, 0.10198473023101506, 0.11761220054410793, 0.06966575017291943, 0.058327412039102966, 0.1029066703609911, 0.09608187207357255, 0.09720343644796736, 0.09535519166827566, 0.08466664943395841, 0.06945451908721845, 0.9888723523523717, 0.9898658902289004, 0.9879627295413655, 0.868428957545269, 0.971688099215563, 0.9869958185966058, 0.9807718969094447, 0.9852638725468188, 0.9915391281737151, 0.3479296290250966, 0.059478394906968046, 0.3239703741705361, 0.14275281026937847, 0.46162664525986774, 0.15257961756581795, 0.3125447242365311, 0.08679591537530973, 0.23059802302734178, 0.22978503803668204, 0.7728689815256087, 0.806517767361252, 0.27713113162511105, 0.20952656849529983, 0.8105933368516798, 0.12089668707888324, 0.23409680690485457, 0.22902905654900252, 0.12651896602036627, 0.3007799042635765, 0.2880878787987339, 0.5222471115703027, 0.2431141387626078, 0.0923299675505983, 0.3053731635766084, 0.12034166302079519, 0.2930525285538972, 0.40721479187448417, 0.13901306050127582, 0.12277845246394592, 0.16426873334089465, 0.13087236455483287, 0.5615392290322239, 0.5439300061294444, 0.12885023503689064, 0.11880146245349665, 9.999999999998899e-05, 0.5131996707880578, 0.14038151724979997, 0.3925996072721678, 0.5075171516236616, 0.48834432452757515, 0.33589319119154315, 0.49221574546339353, 0.3480626367146187, 0.4524642440303398, 0.1853048022355357, 0.13064277682737924, 0.31027662272109824, 0.231384559985212, 0.11387857721753203, 0.58791757158311, 0.4162483791059888, 0.437368620334184, 0.0868507630954537, 0.10507139503157525, 0.16284544497340336, 0.18273549481111717, 0.14230112214991897, 0.4877106435201456, 0.18535804245231047, 0.258913589778649, 0.12580731843306492, 0.4115166181735813, 0.3805549108214058, 0.3694490246489822, 0.43754886597596, 0.42498246992433497, 0.25142408883618117, 0.1480881725470905, 0.15257083069550104, 0.11399512784453603, 0.5603707384118047, 0.6636733973036416, 0.8255109927531155, 0.7300651768229209, 0.7281628474730424, 0.20829950085799565, 0.7280050283238688, 0.6777736645041744, 0.7530706853738878, 0.09015141212101752, 0.08896251086624873, 0.10323769298694518, 0.11578482616227759, 0.16886228158740946, 0.09910902271179589, 0.07814580701882645, 0.08711608480978705, 0.11122298285945476, 0.2919572484988795, 0.2315980840096915, 0.12594280938944735, 0.2828456837360649, 0.16728559372864438, 0.13359826164046607, 0.1924115096772654, 0.20326091166094262, 0.2531937445656588, 0.2834002989969062, 0.397052409632924, 0.3525464090274746, 0.31640702199042403, 0.42128591816488525, 0.397491285097303, 0.24764200348722798, 0.4982338182844521, 0.2974928214805116, 0.23644469908321153, 0.2207122972214176, 0.2777872015891064, 0.3742584661656556, 0.25047923423763563, 0.30451262512723243, 0.34848043513704074, 0.26693571719153153, 0.16014944878320725, 0.2142386215794052, 0.20589699843115616, 0.2031663132893713, 0.22565273059016433, 0.2381010765460021, 0.19157231863115898, 0.18365689757992465, 0.1942315318044081, 0.2120607732642643, 0.21038133617005583, 0.18109925789676973, 0.3409547392352692, 0.23189960943787835, 0.18306552695595657, 0.20050792768382886, 0.19666951267520105, 0.19254022437902973, 0.17812014978157098, 0.895777459626734, 0.9087796388259872, 0.17858132852799757, 0.854723870834777, 0.1761080316630631, 0.20064830633555641, 0.12120594054131728, 0.16863886018662777, 0.18519362302875808, 0.8790534149500977, 0.15648810212241093, 0.11259985530625904, 0.7984360632364057, 0.8085776040852679, 0.2099944350415801, 0.10497720140036504, 0.20717146485503735, 0.4460840598679352, 0.17982729280632825, 0.18989127124620908, 0.17945707375702347, 0.17837774791301342, 0.17846541122380422, 0.1806773160901881, 0.19043029198294925, 0.18806352367421475, 0.1797172899720323, 0.08877890161510837, 0.07046245287552377, 0.08538833516429079, 0.08481806103035994, 0.09199170127060474, 0.0693547163918915, 0.09335595684820086, 0.08425677125240327, 0.08265476810732286]}, "mutation_prompt": null}
{"id": "8234faaf-044f-4476-94a0-8d0dfa51f4c0", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "a16d8d4c-21a4-42fa-a9d0-3ac80d24f1a7", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n                # Local search intensification\n                if np.random.rand() < 0.1:  # 10% chance of intensification\n                    perturbation = np.random.normal(0, 0.1, self.dim)\n                    candidate = self.population[i] + perturbation\n                    candidate = np.clip(candidate, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < self.personal_best_val[i]:\n                        self.population[i] = candidate\n                        self.personal_best_val[i] = candidate_fitness\n                        self.personal_best_pos[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Introduced local search intensification via Gaussian perturbation for enhanced local exploration and adaptive velocity scaling.", "configspace": "", "generation": 93, "fitness": 0.3411357965537092, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8086980789800498, 0.8476658907731306, 0.7796415623763436, 0.7758595210097258, 0.7775037946081004, 0.7885500931248073, 0.7577625555249387, 0.779734890889768, 0.8102953220133419, 0.5360357065745063, 0.36317414954120464, 0.5229934062351972, 0.47462553823164666, 0.4294723944429696, 0.644158829607344, 0.5949621216426977, 0.4358333542923811, 0.05052167393347973, 0.12699819637020027, 0.11638249654163302, 0.10725379228858856, 0.12831846524823032, 0.1408416478800174, 0.10409944682434813, 0.13223345696794964, 0.13875150221688348, 0.12734162651728043, 0.09485589671446992, 0.11523889178642599, 0.10093858724231719, 0.08244282569527239, 0.11123833015541074, 0.12943520793356367, 0.11378329172660784, 0.05259551498575199, 0.10255033626979637, 0.9712631974325285, 0.9961605946595575, 0.9773499492026712, 0.9805112121432249, 0.9799048467956044, 0.9228426368022997, 0.9834437169660577, 0.9801920320964297, 0.9831809817322789, 0.3772298117939561, 0.277644456481291, 0.2826927944205321, 0.33354248067681, 0.28263154166890836, 0.33478665209374125, 0.40744132647864184, 0.2882948384500995, 0.2998839459021645, 0.22571491356630102, 0.11667634012875183, 0.7611548790631683, 0.8757744209659194, 0.795060478807165, 0.20596690972236242, 0.12901698830138453, 0.8286560417646163, 0.23149576125922156, 0.4881128958997726, 0.11841584670775196, 0.3950391095165362, 0.5627070831685834, 0.19669759681235932, 0.15931333984366391, 0.5328850879450018, 0.4874162389077732, 0.20952570522168212, 0.5424040372267372, 0.1295324476027181, 0.12008009755096227, 0.3013631798492179, 0.1882504918507084, 0.1270737072304139, 0.6253282196019965, 0.1359370348366501, 0.4327220709603844, 0.20873686413084558, 0.05373024180939301, 0.18679740818794321, 0.016601696865236604, 0.2747340205296386, 0.2126597768071914, 0.48994644695980916, 0.19459806498368626, 0.07671373134613035, 0.46523272750960276, 0.38383104975671956, 0.3809088884568015, 0.6906997657781137, 0.17560875497558248, 0.07470147828141593, 0.184192446617511, 0.11149465007908443, 0.2963031473994897, 0.13775822480175992, 0.130935078947221, 0.13150251242657995, 0.09729359689654815, 0.06445431832587167, 0.310802239048399, 0.09177385077970834, 0.06091532592162696, 0.15493451465618147, 0.40235950381266516, 0.43114230981321267, 0.41112228912215976, 0.43697119429503706, 0.3832525771268216, 0.4371474208086077, 0.42980632428518795, 0.32023528709069926, 0.332843006260947, 0.6482797028999079, 0.7480128699900511, 0.7322479858193236, 0.713563231892765, 0.7066485663705194, 0.688196435543448, 0.6974258286314019, 0.7216989325423336, 0.7661974800231253, 0.14308626287635107, 0.14432467239999458, 0.0855148420417623, 0.13204182360787342, 0.11669170365048409, 0.6916213253989912, 0.12537111417929336, 0.1240677990845852, 0.10612131564344363, 0.17365925747934763, 0.13891546114417774, 0.21762128046653084, 0.13467974632729407, 0.24528413362535362, 0.14650887086549924, 0.29652875448235483, 0.1662592831829286, 0.17615829344547962, 0.30193434079465253, 0.326732802789519, 0.37494689701539496, 0.4228993331193204, 0.4135908717039912, 0.45479326512353846, 0.41279510912647555, 0.37861674234005105, 0.3747577632118426, 0.3426802710688239, 0.3692019647396705, 0.20108470245407062, 0.28108259310081785, 0.2824198146010103, 0.2436746317058437, 0.2864363898105807, 0.31860649218804826, 0.37012522709840145, 0.19596793488391517, 0.18767742428253564, 0.19554331853645002, 0.21999735336043802, 0.18264176676091237, 0.2173386566881571, 0.19629266084111996, 0.21376923927612257, 0.18774874281927556, 0.19370089107313437, 0.19086574879765794, 0.24307814000332928, 0.19322982043424275, 0.2031915478044245, 0.19624009821346644, 0.16980871271854303, 0.27435731946857644, 0.2196447743932285, 0.7917468796551805, 0.12595318561805047, 0.15408496764632396, 0.8940261786990344, 0.20047269033480375, 0.19939896169259064, 0.6610540112212451, 0.16961401417632604, 0.9052290332793678, 0.8978877172079214, 0.15737946365613242, 0.6152814108604615, 0.2077849840632241, 0.16749973816100627, 0.8304219802536114, 0.3547939310160755, 0.10453286330298184, 0.21128915263675818, 0.1753203005248024, 0.1824906232336465, 0.17408108335451888, 0.20307419729293796, 0.17452298395199795, 0.18806293262181473, 0.16804498824519376, 0.1837582303323495, 0.18646441805635483, 0.091765479708392, 0.08416801400755503, 0.0756167129801113, 0.08377715152616094, 0.07761336352450365, 0.09603734414612441, 0.0815718805855864, 0.0813175453471211, 0.07814623455030068]}, "mutation_prompt": null}
{"id": "f9eab59e-de57-436a-8c18-682d2ce73285", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "3da0469d-3153-4096-91ec-0ad3c709dfd9", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "3a476711-13e3-4f40-9b7c-a4a56ccba02e", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            velocity_variance = np.var(self.velocities, axis=0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i])) * (1 + 0.1 * velocity_variance)\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Improved convergence by incorporating velocity variance scaling to enhance exploration during optimization.", "configspace": "", "generation": 96, "fitness": 0.1014198282004516, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.20.", "error": "", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.15412208148809547, 0.14237883642916072, 0.13968706860194657, 0.11878720570966839, 0.1588363102728063, 0.12883264853970378, 0.17709490439001618, 0.13921912020080418, 0.13315342718147327, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02559902398994307, 0.02941122904449711, 0.032432150033674056, 0.015184375642711134, 0.03391014008187854, 0.020104639470180152, 0.018150078853237606, 0.02018455931405483, 0.026089282844334982, 0.009813842916351456, 0.002876194556125866, 0.012619064668489943, 0.04393543968654556, 0.0030956443510833376, 0.0, 0.0, 0.014039710433521924, 0.0, 0.9843917448867866, 0.9914903053795161, 0.989865633663098, 0.9890736029134354, 0.9886997157026736, 0.9847822486632113, 0.9890686679768701, 0.9884203242623164, 0.988027959196559, 0.06065057328331824, 0.048596738210284096, 0.0, 0.04528414059785879, 0.02100549784610284, 0.05501138478920564, 0.005630837498305619, 0.03901121355732029, 0.0, 0.11530517480308011, 0.04559212165363502, 0.09890959286108869, 0.15935188488906593, 0.11160410586948966, 0.163675085554434, 0.05553958787183799, 0.0920494575432329, 0.009809447265859639, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011272574879176323, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.046963929520452585, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03547783270698346, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.016632348402598085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18664124896693324, 0.15329039591780003, 0.14829537673711257, 0.12255463452530546, 0.09699835892693331, 0.17771240914752706, 0.21356353201056222, 0.1731269834785102, 0.16348696059168033, 0.034297754979400796, 0.018106183471996884, 0.0011110657694225479, 0.032425022710267704, 0.021157177084708878, 0.026906444239331306, 0.037125710828900815, 0.0032672317386761573, 0.062341188921522184, 0.10764254108504734, 0.09319938489041946, 0.10294770174548284, 0.09846289938816155, 0.11798767664128629, 0.09628427252071636, 0.10724806732349845, 0.10055809369218549, 0.12759634325726388, 0.1384661882987317, 0.12051700506859764, 0.14873617587796994, 0.18331133728844462, 0.1394456615145847, 0.15061011749874653, 0.14657983833237065, 0.17369512487615535, 0.1403039211733782, 0.04822807554688591, 0.03952168933301181, 0.10846817521370977, 0.1010509970835356, 0.06397588396999399, 0.07295151227255625, 0.11460388342445038, 0.09968109929816105, 0.10455225498997334, 0.12404220189372483, 0.1093214854867014, 0.13336421106438578, 0.1297566349456356, 0.0952590292349128, 0.11422894834064878, 0.12237199858757553, 0.11245721158890098, 0.12610897469223925, 0.14492135921600857, 0.0, 0.14496469852477167, 0.13424527654357388, 0.040625910144938326, 0.027030477805856767, 0.14001100418172174, 0.0, 0.0, 0.09960619858860176, 0.09749699054460759, 0.12805368117486937, 0.1693315890977528, 0.1455586129167452, 0.16175463073546448, 0.08501920311565558, 0.11176286926379508, 0.1677133972908852, 0.28774388543615115, 0.11522537653945941, 0.07099524280900626, 0.08496929579080992, 0.0686762567053254, 0.09510051127509356, 0.06472980278527685, 0.06812345115960583, 0.06331880144561675, 0.1468256900365772, 0.17118996679073428, 0.14894716632422422, 0.14371782395626376, 0.14962346177412345, 0.15120955539931746, 0.17164146930063873, 0.16800106305568552, 0.14680476350940752, 0.035102588619030706, 0.024823077746737754, 0.03129662407793499, 0.028906622329945675, 0.034154360663547045, 0.03477964349314988, 0.023371660661118954, 0.024986787126542898, 0.03762703490623931]}, "mutation_prompt": null}
{"id": "ecfd2b88-90b3-4236-b793-4fa4d0fcd32c", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "8a32c985-1701-44b8-8918-9156efb7c618", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Enhanced HAPSO-DP with Adaptive Mutation Factor Adjustment to improve convergence by dynamically tuning the mutation factor based on optimization progress.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.8423219474265686, 0.7767325735722522, 0.8180267685754156, 0.8711990443888219, 0.8454831176302959, 0.7808577238889731, 0.8390519626073222, 0.7434935082409146, 0.8119021175759759, 0.5396241272748845, 0.1259904516717979, 0.3627603351917924, 0.5615250570237739, 0.5295862258981618, 0.4968444247479541, 0.5942782637284938, 0.5279045658433283, 0.47467927013304434, 0.5663222833143473, 0.18423454109922954, 0.11106717397813881, 0.07882241293210879, 0.10264686457924221, 0.13062531504451713, 0.10835519483428613, 0.10952589961989723, 0.09366382959400765, 0.09982180616037328, 0.06894488346987837, 0.08632246377179853, 0.09337203462602883, 0.09073429007504108, 0.13169698656623063, 0.08496289055851591, 0.08795799229102608, 0.07609678321425817, 0.9483317497658916, 0.9897710825484534, 0.9897135780495804, 0.9889945181638283, 0.9841823751630959, 0.9771820347390401, 0.9859055657619896, 0.9841117693171093, 0.9878645638284825, 0.28219310946518006, 0.293639908477881, 0.33868344600252487, 0.2873980940718971, 0.14121931577954472, 0.36179131230993344, 0.29715658507598364, 0.08840876280840126, 0.23334911669296754, 0.8456086315571174, 0.7441442447495533, 0.809278463571779, 0.8514322889495165, 0.8126596145260281, 0.1915393840923444, 0.8066248885880638, 0.23243827717306953, 0.8165382799940646, 0.5678847131562864, 0.12678858015333394, 0.4032829123307591, 0.2114481140743517, 0.1291815289069509, 0.5022711507072111, 0.5461203774650925, 0.11383272443858627, 0.15859634716615167, 0.5285601901253465, 0.0162940301777853, 0.1272764805103086, 0.6220945616765202, 0.6235768967615541, 0.4352722569865235, 0.12384523679168802, 0.5237653117246486, 0.11556181204324545, 0.055098153526655036, 0.2543477634030854, 0.07418213739506896, 0.0006062150638453945, 0.0006340455133928558, 0.46799584424887397, 0.4792970984952676, 0.19273614481024515, 0.22595951534636216, 0.1976745931541234, 0.21380782583518176, 0.4058225199381944, 0.49423737750984487, 0.17608142916623548, 0.05490884424381326, 0.4832080543460039, 0.5300302185820907, 0.3428910495081323, 0.17584037153319498, 0.1409441177297842, 0.10244718736177105, 0.08633918939873053, 0.2218170235057113, 0.1696184684306572, 0.31697931416487923, 0.11905684286210794, 0.09856363796431866, 0.4994113085702161, 0.4611732084090582, 0.49630643892481774, 9.999999999998899e-05, 0.03770636617236922, 0.4190180590664664, 0.0486032779618607, 0.37630462696751377, 0.0772665509315088, 0.7764602738126236, 0.7327283726780993, 0.6011409420160402, 0.7615294930194079, 0.6939213671971824, 0.7051485064136322, 0.768358958822566, 0.7283420888750191, 0.7243138809746922, 0.12900490908550077, 0.1005740198632662, 0.11140593935783505, 0.13185176714790303, 0.09900452640506718, 0.09931365163896788, 0.15822688462621481, 0.10691262722525807, 0.08426771185353099, 0.1446455949141393, 0.23921520793323947, 0.20190106446965628, 0.15625708201936162, 0.23325414640803777, 0.15546445556704547, 0.20893636213603217, 0.24456871677989056, 0.17237400954282878, 0.40145116348656984, 0.4207033378526376, 0.3202348350014391, 0.44938365205683184, 0.4145439696537747, 0.4263225947113136, 0.487586494665044, 0.2962117723472646, 0.4464311064472706, 0.31624933412675293, 0.23902749736655604, 0.23590969204723, 0.3983566684262644, 0.21883574030135367, 0.26614642290061175, 0.30837522664176753, 0.2888163991453152, 0.34118723094656467, 0.19928451465852315, 0.2154739526842372, 0.19777198090271964, 0.19996322215021078, 0.19120256005218317, 0.18256899319836728, 0.2063243631299576, 0.19570421040265829, 0.21204250641625844, 0.20294765572892914, 0.1944741778770065, 0.2041869871433768, 0.2065413014361298, 0.19725974934514, 0.1795595016387901, 0.181264487621544, 0.19789086948991585, 0.1947996187538471, 0.18439759990602056, 0.16522193255079443, 0.1531034751909618, 0.8300838567626815, 0.20023213537670703, 0.1995642090104106, 0.09995867398368596, 0.16951282750782992, 0.8788355284937908, 0.8169279655936847, 0.6666215032217886, 0.809332763144277, 0.707308751522338, 0.16340447657650603, 0.19851571384302302, 0.10470985993749404, 0.1047352158257201, 0.7156152566529965, 0.1836803919536385, 0.17634165997829498, 0.17728576000264296, 0.23080909762732293, 0.1808690417436205, 0.19649863663273337, 0.17941951515970977, 0.18054127268539066, 0.18585703978902712, 0.0827117941587292, 0.08620512788454271, 0.0713361532462139, 0.07907124945700128, 0.07700704119597068, 0.07527809300308108, 0.09451882121497424, 0.08905520504937647, 0.0757765106171151]}, "mutation_prompt": null}
{"id": "a4b3bd32-f406-4213-a052-735e4f658812", "solution": "import numpy as np\n\nclass HAPSODP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.mutation_factor = 0.9\n        self.best_global_val = float('inf')\n        self.best_global_pos = None\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_val = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n\n                # Update global best\n                if fitness < self.best_global_val:\n                    self.best_global_val = fitness\n                    self.best_global_pos = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n\n                # Sinusoidal dynamic inertia weight adaptation\n                self.w = 0.5 + 0.5 * np.sin(np.pi * self.evaluations / self.budget)\n\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_pos - self.population[i]))\n\n                # PSO position update\n                self.population[i] = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.bounds[0], self.bounds[1])\n\n                # Adaptive mutation factor adjustment\n                progress = self.evaluations / self.budget\n                self.mutation_factor = 0.9 - 0.4 * progress\n\n                # Apply differential perturbations\n                if np.random.rand() < 0.5:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    differential = self.mutation_factor * (x1 - x2)\n                    candidate = np.clip(x0 + differential, self.bounds[0], self.bounds[1])\n                    candidate_fitness = func(candidate)\n                    self.evaluations += 1\n                    if candidate_fitness < fitness:\n                        self.population[i] = candidate\n\n        return self.best_global_pos, self.best_global_val", "name": "HAPSODP", "description": "Improved dynamic inertia weight adaptation in HAPSODP to balance exploration and exploitation more effectively by using a sinusoidal function based on evaluations.", "configspace": "", "generation": 99, "fitness": 0.16846202910983377, "feedback": "The algorithm HAPSODP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "ef7d4497-3b0e-4502-8918-9699be44e1de", "metadata": {"aucs": [0.37693833807215105, 0.3089934142110873, 0.3908547458598115, 0.3529058374204407, 0.3584360903181224, 0.26624421383457364, 0.37797078332492406, 0.29351424345148125, 0.2978612252389987, 9.999999999998899e-05, 0.0006019865677935332, 0.0021917472463582888, 0.00015909711136319338, 9.999999999998899e-05, 9.999999999998899e-05, 0.04377601770416728, 0.0006273792575218762, 9.999999999998899e-05, 0.08999352433370855, 0.07180106538989972, 0.12491193956968583, 0.06897071508025676, 0.08203558409618217, 0.06216045177012164, 0.07145332069681065, 0.0729327406941922, 0.08839655624824738, 0.08006016293831797, 0.06255677914303592, 0.03881802397588596, 0.08473277881039898, 0.04167516614210853, 0.08559774541717402, 0.05841484321611157, 0.07456665583146516, 0.05301896129472372, 0.9515209236403586, 0.9897776822829624, 0.9897153358099078, 0.9889908794695168, 0.9842005013002756, 0.9771508129738129, 0.9859021931516677, 0.9846979364700363, 0.9878698484350814, 0.13140047963266221, 0.13201246317624793, 0.09479734098807091, 0.1584408283697889, 0.13704313971423365, 0.1252459774433482, 0.12114100953911278, 0.088228263167626, 0.14340411806318365, 0.19566762629791024, 0.20813792470757675, 0.20026090523474882, 0.17216730613659637, 0.26771651938354446, 0.18624485529919654, 0.12718556757015576, 0.12541716089249932, 0.2538621700091006, 0.11860625537117087, 0.02141670060295997, 0.09719475068242045, 0.012315124308416303, 0.12668780105345212, 0.10222231342947175, 0.13163805021668762, 0.1649808221825484, 0.1204493891246129, 0.11910251608549027, 0.015758559408920902, 0.12654408087245705, 0.0813394540732757, 0.1306820181127547, 0.1280438279424152, 0.08777769357087928, 0.05078627728755469, 0.12190364670044307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00015397582104093033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13115740767028583, 0.03908407787608992, 0.021127459574389662, 0.09675025707401363, 9.999999999998899e-05, 0.017602077733028687, 0.06379076577955967, 0.07994695284393727, 0.060297662241847516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10582225952235169, 0.09109923026293709, 0.06624662008858673, 9.999999999998899e-05, 0.025303492007486605, 0.05617507517426257, 0.08613537070724941, 0.058188350318135185, 0.04876739529740903, 0.2827761435375792, 0.367689637659101, 0.343140912405842, 0.4106779501463662, 0.3123461766828868, 0.35542434603112283, 0.2827742309197976, 0.29266014385216554, 0.31359137869211795, 0.10036288145121419, 0.0713156036682765, 0.041624845973934343, 0.08933627651518872, 0.10093345159036748, 0.08728314668756687, 0.06363236941791617, 0.07994930129241129, 0.08153976960556397, 0.15861756582390119, 0.19210696692213536, 0.16569532650090746, 0.13023017067085552, 0.1368118925760513, 0.13640661607487492, 0.2940896313594824, 0.13159223278867682, 0.16127290254852178, 0.229650577840675, 0.2121604976597098, 0.23860684533194632, 0.25599662653592936, 0.17916807092042686, 0.2363020821258327, 0.25810314630268094, 0.22002421560820673, 0.20696364210803464, 0.16153020219950953, 0.14390852116319697, 0.17957879794428755, 0.17509668237225373, 0.1566798620331873, 0.13679344882034927, 0.21697865812249784, 0.16161931488136017, 0.1274095923921552, 0.1689103624530055, 0.15719884402081352, 0.19960907367948433, 0.19797120510264343, 0.18751330816823675, 0.17872909326812225, 0.17493785219897295, 0.19063327209166292, 0.16951275261854992, 0.17305180319373503, 0.15881243587699845, 0.18738325616953455, 0.17599388744981315, 0.17799433832025646, 0.15959010812603103, 0.1744920945500995, 0.17180194656907533, 0.1718800177885862, 0.1412709804558956, 0.16347217882414222, 0.1524556149188544, 0.34483171563488724, 0.17575489948795098, 0.1960510197270865, 0.09982960856883527, 0.16960551739413532, 0.40278473425843786, 0.2883606244330339, 0.16004614666800843, 0.15506822996781466, 0.21522046014355645, 0.15232832872442703, 0.11480763797284343, 0.15995171891975346, 0.16746352465125258, 0.14747756146201152, 0.20525826117128199, 0.1798564190794214, 0.18518836490011348, 0.19630244810500808, 0.16175980606515183, 0.1715821220778122, 0.17128179606643135, 0.18674087457435107, 0.17292649822486383, 0.08064142085893178, 0.06106206942807202, 0.04796590585548288, 0.05378174354874177, 0.08680581874465387, 0.07455725135697444, 0.06879853945215453, 0.06606415146180711, 0.05520637269234341]}, "mutation_prompt": null}
