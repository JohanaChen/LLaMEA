{"id": "7001932c-8f2c-4acf-947a-218cbda76b6e", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Adapt population size\n        self.inertia_weight = 0.729  # Inertia weight for PSO\n        self.cognitive_coeff = 1.49445  # Cognitive coefficient for PSO\n        self.social_coeff = 1.49445  # Social coefficient for PSO\n\n    def __call__(self, func):\n        eval_count = 0\n\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            # Gradient-based exploitation\n            if eval_count < self.budget - self.dim:\n                for i in range(len(particles)):\n                    # Approximate gradient using central difference\n                    grad = np.zeros(self.dim)\n                    for d in range(self.dim):\n                        x_plus = np.copy(particles[i])\n                        x_plus[d] += 1e-5\n                        x_minus = np.copy(particles[i])\n                        x_minus[d] -= 1e-5\n\n                        grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                        eval_count += 2\n\n                    # Gradient descent step\n                    particles[i] = particles[i] - 0.01 * grad\n                    particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "HybridOptimizer", "description": "A hybrid gradient-based and swarm-intelligence metaheuristic combines exploration and exploitation to adaptively optimize black box functions.", "configspace": "", "generation": 0, "fitness": 0.12437423261194804, "feedback": "The algorithm HybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.32353173829081894, 0.3389081126009129, 0.3367678188719867, 0.3089690765829485, 0.17958138095079046, 0.313538568369955, 0.31170573767771725, 0.32162709161472536, 0.2986916061049266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029911184549279435, 0.0334530537573251, 0.03438546348585192, 0.03393152650594278, 0.040402337736356486, 0.03547226598343367, 0.05187610417334543, 0.04826398299817336, 0.0786775364382778, 0.006859244369682882, 0.0154521008736348, 0.011465287986527573, 0.05668965523986513, 0.02479143632747871, 0.003423298222042792, 0.010938910086105924, 0.02275087510547269, 0.02826225963159723, 0.9469898482055686, 0.9702147665111004, 0.9267964557519535, 0.9217244129146859, 0.8978404068486495, 0.8519111424355429, 0.92301642386613, 0.8985887616850836, 0.9468618740717385, 0.020913227716230165, 0.021400232757379678, 0.05156443080575723, 0.05509858796230038, 0.05696551963057295, 0.04072284481379662, 9.999999999998899e-05, 0.044913854854575, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11626614409784541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032092115141158284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2919448402602085, 0.28071673551086307, 0.27899570176468647, 0.29401568986950954, 0.262075957417752, 0.29126314480863014, 0.2821675355030715, 0.20165527567993113, 0.29160910061622836, 0.04614628343390159, 0.050610658517970974, 0.03913978885897362, 0.043442634181555695, 0.03438346393089864, 0.04434101026653148, 0.027851761072088865, 0.026444981483652708, 0.044454026575114214, 0.11355983688889004, 0.10992185047960223, 0.11659659106955655, 0.1000611968759928, 0.12637393551572773, 0.09456541914029326, 0.0998952023520715, 0.09052494541840206, 0.09270353616695648, 0.20090140991891425, 0.22166154130595983, 0.2219121525618578, 0.1790784944290501, 0.17642758345316178, 0.20894884785992152, 0.19298206438972887, 0.2340316549559438, 0.20843759286775942, 0.10857744028300309, 0.10372954216331454, 0.10175964753044497, 0.10560481516892928, 0.11183505083918366, 0.09598383728222193, 0.08936616453706991, 0.13668185199155947, 0.1223923728752665, 0.14636291464886453, 0.09786566454779799, 0.13345086981233123, 0.1404055211152332, 0.1635992980331905, 0.1205303621571755, 0.12245976138762271, 0.11771787371037412, 0.1261963614278906, 0.13030633068921782, 9.999999999998899e-05, 0.14482598892049814, 0.11963727363365795, 9.999999999998899e-05, 0.14952831575656833, 0.14880753693717108, 9.999999999998899e-05, 9.999999999998899e-05, 0.14975095707812813, 0.15002136204492422, 0.143201281411237, 0.4305368448965139, 0.18569216510881803, 0.18669053835285854, 0.0900243951923092, 0.1676271281796924, 0.49205074312863983, 0.07015485512118336, 0.13473840076898635, 0.09281229459105411, 0.14955942222353547, 0.14286216555912212, 0.1723557097094527, 0.09976644553818736, 0.19272075802479205, 0.20716218696599165, 0.15753115333393108, 0.16314747784606776, 0.17114474042001548, 0.15223304749990552, 0.1843698117726108, 0.16550562617223863, 0.15508096700638585, 0.14472417365626356, 0.19116178159756203, 0.0275348253392933, 0.032047063773085416, 0.03470411622743197, 0.03222036639769288, 0.03269391875362848, 0.035004327602089824, 0.030738877498160178, 0.02703102056725748, 0.02035913785510224]}, "mutation_prompt": null}
{"id": "3d79b755-9a30-46cf-bac2-d08e5fb25af2", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Adapt population size\n        self.inertia_weight = 0.729  # Inertia weight for PSO\n        self.cognitive_coeff = 1.49445  # Cognitive coefficient for PSO\n        self.social_coeff = 1.49445  # Social coefficient for PSO\n\n    def __call__(self, func):\n        eval_count = 0\n\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            # Gradient-based exploitation\n            if eval_count < self.budget - self.dim:\n                for i in range(len(particles)):\n                    # Approximate gradient using central difference\n                    grad = np.zeros(self.dim)\n                    for d in range(self.dim):\n                        x_plus = np.copy(particles[i])\n                        x_plus[d] += 1e-5\n                        x_minus = np.copy(particles[i])\n                        x_minus[d] -= 1e-5\n\n                        grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                        eval_count += 2\n\n                    # Gradient descent step\n                    particles[i] = particles[i] - 0.01 * grad\n                    particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "HybridOptimizer", "description": "A hybrid gradient-based and swarm-intelligence metaheuristic combines exploration and exploitation to adaptively optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7001932c-8f2c-4acf-947a-218cbda76b6e", "metadata": {"aucs": [0.32353173829081894, 0.3389081126009129, 0.3367678188719867, 0.3089690765829485, 0.17958138095079046, 0.313538568369955, 0.31170573767771725, 0.32162709161472536, 0.2986916061049266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029911184549279435, 0.0334530537573251, 0.03438546348585192, 0.03393152650594278, 0.040402337736356486, 0.03547226598343367, 0.05187610417334543, 0.04826398299817336, 0.0786775364382778, 0.006859244369682882, 0.0154521008736348, 0.011465287986527573, 0.05668965523986513, 0.02479143632747871, 0.003423298222042792, 0.010938910086105924, 0.02275087510547269, 0.02826225963159723, 0.9469898482055686, 0.9702147665111004, 0.9267964557519535, 0.9217244129146859, 0.8978404068486495, 0.8519111424355429, 0.92301642386613, 0.8985887616850836, 0.9468618740717385, 0.020913227716230165, 0.021400232757379678, 0.05156443080575723, 0.05509858796230038, 0.05696551963057295, 0.04072284481379662, 9.999999999998899e-05, 0.044913854854575, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11626614409784541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032092115141158284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2919448402602085, 0.28071673551086307, 0.27899570176468647, 0.29401568986950954, 0.262075957417752, 0.29126314480863014, 0.2821675355030715, 0.20165527567993113, 0.29160910061622836, 0.04614628343390159, 0.050610658517970974, 0.03913978885897362, 0.043442634181555695, 0.03438346393089864, 0.04434101026653148, 0.027851761072088865, 0.026444981483652708, 0.044454026575114214, 0.11355983688889004, 0.10992185047960223, 0.11659659106955655, 0.1000611968759928, 0.12637393551572773, 0.09456541914029326, 0.0998952023520715, 0.09052494541840206, 0.09270353616695648, 0.20090140991891425, 0.22166154130595983, 0.2219121525618578, 0.1790784944290501, 0.17642758345316178, 0.20894884785992152, 0.19298206438972887, 0.2340316549559438, 0.20843759286775942, 0.10857744028300309, 0.10372954216331454, 0.10175964753044497, 0.10560481516892928, 0.11183505083918366, 0.09598383728222193, 0.08936616453706991, 0.13668185199155947, 0.1223923728752665, 0.14636291464886453, 0.09786566454779799, 0.13345086981233123, 0.1404055211152332, 0.1635992980331905, 0.1205303621571755, 0.12245976138762271, 0.11771787371037412, 0.1261963614278906, 0.13030633068921782, 9.999999999998899e-05, 0.14482598892049814, 0.11963727363365795, 9.999999999998899e-05, 0.14952831575656833, 0.14880753693717108, 9.999999999998899e-05, 9.999999999998899e-05, 0.14975095707812813, 0.15002136204492422, 0.143201281411237, 0.4305368448965139, 0.18569216510881803, 0.18669053835285854, 0.0900243951923092, 0.1676271281796924, 0.49205074312863983, 0.07015485512118336, 0.13473840076898635, 0.09281229459105411, 0.14955942222353547, 0.14286216555912212, 0.1723557097094527, 0.09976644553818736, 0.19272075802479205, 0.20716218696599165, 0.15753115333393108, 0.16314747784606776, 0.17114474042001548, 0.15223304749990552, 0.1843698117726108, 0.16550562617223863, 0.15508096700638585, 0.14472417365626356, 0.19116178159756203, 0.0275348253392933, 0.032047063773085416, 0.03470411622743197, 0.03222036639769288, 0.03269391875362848, 0.035004327602089824, 0.030738877498160178, 0.02703102056725748, 0.02035913785510224]}, "mutation_prompt": null}
{"id": "8639d4df-54d6-44b1-a6b7-3136187d5d14", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Adapt population size\n        self.inertia_weight = 0.729  # Inertia weight for PSO\n        self.cognitive_coeff = 1.49445  # Cognitive coefficient for PSO\n        self.social_coeff = 1.49445  # Social coefficient for PSO\n\n    def __call__(self, func):\n        eval_count = 0\n\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            # Gradient-based exploitation\n            if eval_count < self.budget - self.dim:\n                for i in range(len(particles)):\n                    # Approximate gradient using central difference\n                    grad = np.zeros(self.dim)\n                    for d in range(self.dim):\n                        x_plus = np.copy(particles[i])\n                        x_plus[d] += 1e-5\n                        x_minus = np.copy(particles[i])\n                        x_minus[d] -= 1e-5\n\n                        grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                        eval_count += 2\n\n                    # Gradient descent step\n                    particles[i] = particles[i] - 0.01 * grad\n                    particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "HybridOptimizer", "description": "A hybrid gradient-based and swarm-intelligence metaheuristic combines exploration and exploitation to adaptively optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7001932c-8f2c-4acf-947a-218cbda76b6e", "metadata": {"aucs": [0.32353173829081894, 0.3389081126009129, 0.3367678188719867, 0.3089690765829485, 0.17958138095079046, 0.313538568369955, 0.31170573767771725, 0.32162709161472536, 0.2986916061049266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029911184549279435, 0.0334530537573251, 0.03438546348585192, 0.03393152650594278, 0.040402337736356486, 0.03547226598343367, 0.05187610417334543, 0.04826398299817336, 0.0786775364382778, 0.006859244369682882, 0.0154521008736348, 0.011465287986527573, 0.05668965523986513, 0.02479143632747871, 0.003423298222042792, 0.010938910086105924, 0.02275087510547269, 0.02826225963159723, 0.9469898482055686, 0.9702147665111004, 0.9267964557519535, 0.9217244129146859, 0.8978404068486495, 0.8519111424355429, 0.92301642386613, 0.8985887616850836, 0.9468618740717385, 0.020913227716230165, 0.021400232757379678, 0.05156443080575723, 0.05509858796230038, 0.05696551963057295, 0.04072284481379662, 9.999999999998899e-05, 0.044913854854575, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11626614409784541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032092115141158284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2919448402602085, 0.28071673551086307, 0.27899570176468647, 0.29401568986950954, 0.262075957417752, 0.29126314480863014, 0.2821675355030715, 0.20165527567993113, 0.29160910061622836, 0.04614628343390159, 0.050610658517970974, 0.03913978885897362, 0.043442634181555695, 0.03438346393089864, 0.04434101026653148, 0.027851761072088865, 0.026444981483652708, 0.044454026575114214, 0.11355983688889004, 0.10992185047960223, 0.11659659106955655, 0.1000611968759928, 0.12637393551572773, 0.09456541914029326, 0.0998952023520715, 0.09052494541840206, 0.09270353616695648, 0.20090140991891425, 0.22166154130595983, 0.2219121525618578, 0.1790784944290501, 0.17642758345316178, 0.20894884785992152, 0.19298206438972887, 0.2340316549559438, 0.20843759286775942, 0.10857744028300309, 0.10372954216331454, 0.10175964753044497, 0.10560481516892928, 0.11183505083918366, 0.09598383728222193, 0.08936616453706991, 0.13668185199155947, 0.1223923728752665, 0.14636291464886453, 0.09786566454779799, 0.13345086981233123, 0.1404055211152332, 0.1635992980331905, 0.1205303621571755, 0.12245976138762271, 0.11771787371037412, 0.1261963614278906, 0.13030633068921782, 9.999999999998899e-05, 0.14482598892049814, 0.11963727363365795, 9.999999999998899e-05, 0.14952831575656833, 0.14880753693717108, 9.999999999998899e-05, 9.999999999998899e-05, 0.14975095707812813, 0.15002136204492422, 0.143201281411237, 0.4305368448965139, 0.18569216510881803, 0.18669053835285854, 0.0900243951923092, 0.1676271281796924, 0.49205074312863983, 0.07015485512118336, 0.13473840076898635, 0.09281229459105411, 0.14955942222353547, 0.14286216555912212, 0.1723557097094527, 0.09976644553818736, 0.19272075802479205, 0.20716218696599165, 0.15753115333393108, 0.16314747784606776, 0.17114474042001548, 0.15223304749990552, 0.1843698117726108, 0.16550562617223863, 0.15508096700638585, 0.14472417365626356, 0.19116178159756203, 0.0275348253392933, 0.032047063773085416, 0.03470411622743197, 0.03222036639769288, 0.03269391875362848, 0.035004327602089824, 0.030738877498160178, 0.02703102056725748, 0.02035913785510224]}, "mutation_prompt": null}
{"id": "3347f012-ccc5-41e6-9f36-748578d81b08", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Adapt population size\n        self.inertia_weight = 0.729  # Inertia weight for PSO\n        self.cognitive_coeff = 1.49445  # Cognitive coefficient for PSO\n        self.social_coeff = 1.49445  # Social coefficient for PSO\n\n    def __call__(self, func):\n        eval_count = 0\n\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            # Gradient-based exploitation\n            if eval_count < self.budget - self.dim:\n                for i in range(len(particles)):\n                    # Approximate gradient using central difference\n                    grad = np.zeros(self.dim)\n                    for d in range(self.dim):\n                        x_plus = np.copy(particles[i])\n                        x_plus[d] += 1e-5\n                        x_minus = np.copy(particles[i])\n                        x_minus[d] -= 1e-5\n\n                        grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                        eval_count += 2\n\n                    # Gradient descent step\n                    particles[i] = particles[i] - 0.01 * grad\n                    particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "HybridOptimizer", "description": "A hybrid gradient-based and swarm-intelligence metaheuristic combines exploration and exploitation to adaptively optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7001932c-8f2c-4acf-947a-218cbda76b6e", "metadata": {"aucs": [0.32353173829081894, 0.3389081126009129, 0.3367678188719867, 0.3089690765829485, 0.17958138095079046, 0.313538568369955, 0.31170573767771725, 0.32162709161472536, 0.2986916061049266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029911184549279435, 0.0334530537573251, 0.03438546348585192, 0.03393152650594278, 0.040402337736356486, 0.03547226598343367, 0.05187610417334543, 0.04826398299817336, 0.0786775364382778, 0.006859244369682882, 0.0154521008736348, 0.011465287986527573, 0.05668965523986513, 0.02479143632747871, 0.003423298222042792, 0.010938910086105924, 0.02275087510547269, 0.02826225963159723, 0.9469898482055686, 0.9702147665111004, 0.9267964557519535, 0.9217244129146859, 0.8978404068486495, 0.8519111424355429, 0.92301642386613, 0.8985887616850836, 0.9468618740717385, 0.020913227716230165, 0.021400232757379678, 0.05156443080575723, 0.05509858796230038, 0.05696551963057295, 0.04072284481379662, 9.999999999998899e-05, 0.044913854854575, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11626614409784541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032092115141158284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2919448402602085, 0.28071673551086307, 0.27899570176468647, 0.29401568986950954, 0.262075957417752, 0.29126314480863014, 0.2821675355030715, 0.20165527567993113, 0.29160910061622836, 0.04614628343390159, 0.050610658517970974, 0.03913978885897362, 0.043442634181555695, 0.03438346393089864, 0.04434101026653148, 0.027851761072088865, 0.026444981483652708, 0.044454026575114214, 0.11355983688889004, 0.10992185047960223, 0.11659659106955655, 0.1000611968759928, 0.12637393551572773, 0.09456541914029326, 0.0998952023520715, 0.09052494541840206, 0.09270353616695648, 0.20090140991891425, 0.22166154130595983, 0.2219121525618578, 0.1790784944290501, 0.17642758345316178, 0.20894884785992152, 0.19298206438972887, 0.2340316549559438, 0.20843759286775942, 0.10857744028300309, 0.10372954216331454, 0.10175964753044497, 0.10560481516892928, 0.11183505083918366, 0.09598383728222193, 0.08936616453706991, 0.13668185199155947, 0.1223923728752665, 0.14636291464886453, 0.09786566454779799, 0.13345086981233123, 0.1404055211152332, 0.1635992980331905, 0.1205303621571755, 0.12245976138762271, 0.11771787371037412, 0.1261963614278906, 0.13030633068921782, 9.999999999998899e-05, 0.14482598892049814, 0.11963727363365795, 9.999999999998899e-05, 0.14952831575656833, 0.14880753693717108, 9.999999999998899e-05, 9.999999999998899e-05, 0.14975095707812813, 0.15002136204492422, 0.143201281411237, 0.4305368448965139, 0.18569216510881803, 0.18669053835285854, 0.0900243951923092, 0.1676271281796924, 0.49205074312863983, 0.07015485512118336, 0.13473840076898635, 0.09281229459105411, 0.14955942222353547, 0.14286216555912212, 0.1723557097094527, 0.09976644553818736, 0.19272075802479205, 0.20716218696599165, 0.15753115333393108, 0.16314747784606776, 0.17114474042001548, 0.15223304749990552, 0.1843698117726108, 0.16550562617223863, 0.15508096700638585, 0.14472417365626356, 0.19116178159756203, 0.0275348253392933, 0.032047063773085416, 0.03470411622743197, 0.03222036639769288, 0.03269391875362848, 0.035004327602089824, 0.030738877498160178, 0.02703102056725748, 0.02035913785510224]}, "mutation_prompt": null}
{"id": "0566c3af-4c11-46bc-85b0-b09d5f531f90", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Adapt population size\n        self.inertia_weight = 0.729  # Inertia weight for PSO\n        self.cognitive_coeff = 1.49445  # Cognitive coefficient for PSO\n        self.social_coeff = 1.49445  # Social coefficient for PSO\n\n    def __call__(self, func):\n        eval_count = 0\n\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            # Gradient-based exploitation\n            if eval_count < self.budget - self.dim:\n                for i in range(len(particles)):\n                    # Approximate gradient using central difference\n                    grad = np.zeros(self.dim)\n                    for d in range(self.dim):\n                        x_plus = np.copy(particles[i])\n                        x_plus[d] += 1e-5\n                        x_minus = np.copy(particles[i])\n                        x_minus[d] -= 1e-5\n\n                        grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                        eval_count += 2\n\n                    # Gradient descent step\n                    particles[i] = particles[i] - 0.01 * grad\n                    particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "HybridOptimizer", "description": "A hybrid gradient-based and swarm-intelligence metaheuristic combines exploration and exploitation to adaptively optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7001932c-8f2c-4acf-947a-218cbda76b6e", "metadata": {"aucs": [0.32353173829081894, 0.3389081126009129, 0.3367678188719867, 0.3089690765829485, 0.17958138095079046, 0.313538568369955, 0.31170573767771725, 0.32162709161472536, 0.2986916061049266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029911184549279435, 0.0334530537573251, 0.03438546348585192, 0.03393152650594278, 0.040402337736356486, 0.03547226598343367, 0.05187610417334543, 0.04826398299817336, 0.0786775364382778, 0.006859244369682882, 0.0154521008736348, 0.011465287986527573, 0.05668965523986513, 0.02479143632747871, 0.003423298222042792, 0.010938910086105924, 0.02275087510547269, 0.02826225963159723, 0.9469898482055686, 0.9702147665111004, 0.9267964557519535, 0.9217244129146859, 0.8978404068486495, 0.8519111424355429, 0.92301642386613, 0.8985887616850836, 0.9468618740717385, 0.020913227716230165, 0.021400232757379678, 0.05156443080575723, 0.05509858796230038, 0.05696551963057295, 0.04072284481379662, 9.999999999998899e-05, 0.044913854854575, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11626614409784541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032092115141158284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2919448402602085, 0.28071673551086307, 0.27899570176468647, 0.29401568986950954, 0.262075957417752, 0.29126314480863014, 0.2821675355030715, 0.20165527567993113, 0.29160910061622836, 0.04614628343390159, 0.050610658517970974, 0.03913978885897362, 0.043442634181555695, 0.03438346393089864, 0.04434101026653148, 0.027851761072088865, 0.026444981483652708, 0.044454026575114214, 0.11355983688889004, 0.10992185047960223, 0.11659659106955655, 0.1000611968759928, 0.12637393551572773, 0.09456541914029326, 0.0998952023520715, 0.09052494541840206, 0.09270353616695648, 0.20090140991891425, 0.22166154130595983, 0.2219121525618578, 0.1790784944290501, 0.17642758345316178, 0.20894884785992152, 0.19298206438972887, 0.2340316549559438, 0.20843759286775942, 0.10857744028300309, 0.10372954216331454, 0.10175964753044497, 0.10560481516892928, 0.11183505083918366, 0.09598383728222193, 0.08936616453706991, 0.13668185199155947, 0.1223923728752665, 0.14636291464886453, 0.09786566454779799, 0.13345086981233123, 0.1404055211152332, 0.1635992980331905, 0.1205303621571755, 0.12245976138762271, 0.11771787371037412, 0.1261963614278906, 0.13030633068921782, 9.999999999998899e-05, 0.14482598892049814, 0.11963727363365795, 9.999999999998899e-05, 0.14952831575656833, 0.14880753693717108, 9.999999999998899e-05, 9.999999999998899e-05, 0.14975095707812813, 0.15002136204492422, 0.143201281411237, 0.4305368448965139, 0.18569216510881803, 0.18669053835285854, 0.0900243951923092, 0.1676271281796924, 0.49205074312863983, 0.07015485512118336, 0.13473840076898635, 0.09281229459105411, 0.14955942222353547, 0.14286216555912212, 0.1723557097094527, 0.09976644553818736, 0.19272075802479205, 0.20716218696599165, 0.15753115333393108, 0.16314747784606776, 0.17114474042001548, 0.15223304749990552, 0.1843698117726108, 0.16550562617223863, 0.15508096700638585, 0.14472417365626356, 0.19116178159756203, 0.0275348253392933, 0.032047063773085416, 0.03470411622743197, 0.03222036639769288, 0.03269391875362848, 0.035004327602089824, 0.030738877498160178, 0.02703102056725748, 0.02035913785510224]}, "mutation_prompt": null}
{"id": "3b04cdea-5f9d-4689-b88a-d76eecb77957", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Adapt population size\n        self.inertia_weight = 0.729  # Inertia weight for PSO\n        self.cognitive_coeff = 1.49445  # Cognitive coefficient for PSO\n        self.social_coeff = 1.49445  # Social coefficient for PSO\n\n    def __call__(self, func):\n        eval_count = 0\n\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            # Gradient-based exploitation\n            if eval_count < self.budget - self.dim:\n                for i in range(len(particles)):\n                    # Approximate gradient using central difference\n                    grad = np.zeros(self.dim)\n                    for d in range(self.dim):\n                        x_plus = np.copy(particles[i])\n                        x_plus[d] += 1e-5\n                        x_minus = np.copy(particles[i])\n                        x_minus[d] -= 1e-5\n\n                        grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                        eval_count += 2\n\n                    # Gradient descent step\n                    particles[i] = particles[i] - 0.01 * grad\n                    particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "HybridOptimizer", "description": "A hybrid gradient-based and swarm-intelligence metaheuristic combines exploration and exploitation to adaptively optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7001932c-8f2c-4acf-947a-218cbda76b6e", "metadata": {"aucs": [0.32353173829081894, 0.3389081126009129, 0.3367678188719867, 0.3089690765829485, 0.17958138095079046, 0.313538568369955, 0.31170573767771725, 0.32162709161472536, 0.2986916061049266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029911184549279435, 0.0334530537573251, 0.03438546348585192, 0.03393152650594278, 0.040402337736356486, 0.03547226598343367, 0.05187610417334543, 0.04826398299817336, 0.0786775364382778, 0.006859244369682882, 0.0154521008736348, 0.011465287986527573, 0.05668965523986513, 0.02479143632747871, 0.003423298222042792, 0.010938910086105924, 0.02275087510547269, 0.02826225963159723, 0.9469898482055686, 0.9702147665111004, 0.9267964557519535, 0.9217244129146859, 0.8978404068486495, 0.8519111424355429, 0.92301642386613, 0.8985887616850836, 0.9468618740717385, 0.020913227716230165, 0.021400232757379678, 0.05156443080575723, 0.05509858796230038, 0.05696551963057295, 0.04072284481379662, 9.999999999998899e-05, 0.044913854854575, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11626614409784541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032092115141158284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2919448402602085, 0.28071673551086307, 0.27899570176468647, 0.29401568986950954, 0.262075957417752, 0.29126314480863014, 0.2821675355030715, 0.20165527567993113, 0.29160910061622836, 0.04614628343390159, 0.050610658517970974, 0.03913978885897362, 0.043442634181555695, 0.03438346393089864, 0.04434101026653148, 0.027851761072088865, 0.026444981483652708, 0.044454026575114214, 0.11355983688889004, 0.10992185047960223, 0.11659659106955655, 0.1000611968759928, 0.12637393551572773, 0.09456541914029326, 0.0998952023520715, 0.09052494541840206, 0.09270353616695648, 0.20090140991891425, 0.22166154130595983, 0.2219121525618578, 0.1790784944290501, 0.17642758345316178, 0.20894884785992152, 0.19298206438972887, 0.2340316549559438, 0.20843759286775942, 0.10857744028300309, 0.10372954216331454, 0.10175964753044497, 0.10560481516892928, 0.11183505083918366, 0.09598383728222193, 0.08936616453706991, 0.13668185199155947, 0.1223923728752665, 0.14636291464886453, 0.09786566454779799, 0.13345086981233123, 0.1404055211152332, 0.1635992980331905, 0.1205303621571755, 0.12245976138762271, 0.11771787371037412, 0.1261963614278906, 0.13030633068921782, 9.999999999998899e-05, 0.14482598892049814, 0.11963727363365795, 9.999999999998899e-05, 0.14952831575656833, 0.14880753693717108, 9.999999999998899e-05, 9.999999999998899e-05, 0.14975095707812813, 0.15002136204492422, 0.143201281411237, 0.4305368448965139, 0.18569216510881803, 0.18669053835285854, 0.0900243951923092, 0.1676271281796924, 0.49205074312863983, 0.07015485512118336, 0.13473840076898635, 0.09281229459105411, 0.14955942222353547, 0.14286216555912212, 0.1723557097094527, 0.09976644553818736, 0.19272075802479205, 0.20716218696599165, 0.15753115333393108, 0.16314747784606776, 0.17114474042001548, 0.15223304749990552, 0.1843698117726108, 0.16550562617223863, 0.15508096700638585, 0.14472417365626356, 0.19116178159756203, 0.0275348253392933, 0.032047063773085416, 0.03470411622743197, 0.03222036639769288, 0.03269391875362848, 0.035004327602089824, 0.030738877498160178, 0.02703102056725748, 0.02035913785510224]}, "mutation_prompt": null}
{"id": "2a88e4da-b1db-4a26-8010-69b57ea6da3d", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Adapt population size\n        self.inertia_weight = 0.729  # Inertia weight for PSO\n        self.cognitive_coeff = 1.49445  # Cognitive coefficient for PSO\n        self.social_coeff = 1.49445  # Social coefficient for PSO\n\n    def __call__(self, func):\n        eval_count = 0\n\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            # Gradient-based exploitation\n            if eval_count < self.budget - self.dim:\n                for i in range(len(particles)):\n                    # Approximate gradient using central difference\n                    grad = np.zeros(self.dim)\n                    for d in range(self.dim):\n                        x_plus = np.copy(particles[i])\n                        x_plus[d] += 1e-5\n                        x_minus = np.copy(particles[i])\n                        x_minus[d] -= 1e-5\n\n                        grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                        eval_count += 2\n\n                    # Gradient descent step\n                    particles[i] = particles[i] - 0.01 * grad\n                    particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "HybridOptimizer", "description": "A hybrid gradient-based and swarm-intelligence metaheuristic combines exploration and exploitation to adaptively optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7001932c-8f2c-4acf-947a-218cbda76b6e", "metadata": {"aucs": [0.32353173829081894, 0.3389081126009129, 0.3367678188719867, 0.3089690765829485, 0.17958138095079046, 0.313538568369955, 0.31170573767771725, 0.32162709161472536, 0.2986916061049266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029911184549279435, 0.0334530537573251, 0.03438546348585192, 0.03393152650594278, 0.040402337736356486, 0.03547226598343367, 0.05187610417334543, 0.04826398299817336, 0.0786775364382778, 0.006859244369682882, 0.0154521008736348, 0.011465287986527573, 0.05668965523986513, 0.02479143632747871, 0.003423298222042792, 0.010938910086105924, 0.02275087510547269, 0.02826225963159723, 0.9469898482055686, 0.9702147665111004, 0.9267964557519535, 0.9217244129146859, 0.8978404068486495, 0.8519111424355429, 0.92301642386613, 0.8985887616850836, 0.9468618740717385, 0.020913227716230165, 0.021400232757379678, 0.05156443080575723, 0.05509858796230038, 0.05696551963057295, 0.04072284481379662, 9.999999999998899e-05, 0.044913854854575, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11626614409784541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032092115141158284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2919448402602085, 0.28071673551086307, 0.27899570176468647, 0.29401568986950954, 0.262075957417752, 0.29126314480863014, 0.2821675355030715, 0.20165527567993113, 0.29160910061622836, 0.04614628343390159, 0.050610658517970974, 0.03913978885897362, 0.043442634181555695, 0.03438346393089864, 0.04434101026653148, 0.027851761072088865, 0.026444981483652708, 0.044454026575114214, 0.11355983688889004, 0.10992185047960223, 0.11659659106955655, 0.1000611968759928, 0.12637393551572773, 0.09456541914029326, 0.0998952023520715, 0.09052494541840206, 0.09270353616695648, 0.20090140991891425, 0.22166154130595983, 0.2219121525618578, 0.1790784944290501, 0.17642758345316178, 0.20894884785992152, 0.19298206438972887, 0.2340316549559438, 0.20843759286775942, 0.10857744028300309, 0.10372954216331454, 0.10175964753044497, 0.10560481516892928, 0.11183505083918366, 0.09598383728222193, 0.08936616453706991, 0.13668185199155947, 0.1223923728752665, 0.14636291464886453, 0.09786566454779799, 0.13345086981233123, 0.1404055211152332, 0.1635992980331905, 0.1205303621571755, 0.12245976138762271, 0.11771787371037412, 0.1261963614278906, 0.13030633068921782, 9.999999999998899e-05, 0.14482598892049814, 0.11963727363365795, 9.999999999998899e-05, 0.14952831575656833, 0.14880753693717108, 9.999999999998899e-05, 9.999999999998899e-05, 0.14975095707812813, 0.15002136204492422, 0.143201281411237, 0.4305368448965139, 0.18569216510881803, 0.18669053835285854, 0.0900243951923092, 0.1676271281796924, 0.49205074312863983, 0.07015485512118336, 0.13473840076898635, 0.09281229459105411, 0.14955942222353547, 0.14286216555912212, 0.1723557097094527, 0.09976644553818736, 0.19272075802479205, 0.20716218696599165, 0.15753115333393108, 0.16314747784606776, 0.17114474042001548, 0.15223304749990552, 0.1843698117726108, 0.16550562617223863, 0.15508096700638585, 0.14472417365626356, 0.19116178159756203, 0.0275348253392933, 0.032047063773085416, 0.03470411622743197, 0.03222036639769288, 0.03269391875362848, 0.035004327602089824, 0.030738877498160178, 0.02703102056725748, 0.02035913785510224]}, "mutation_prompt": null}
{"id": "7e4fe139-5dd0-4b34-9c1b-fb40d505281b", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Adapt population size\n        self.inertia_weight = 0.729  # Inertia weight for PSO\n        self.cognitive_coeff = 1.49445  # Cognitive coefficient for PSO\n        self.social_coeff = 1.49445  # Social coefficient for PSO\n\n    def __call__(self, func):\n        eval_count = 0\n\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            # Gradient-based exploitation\n            if eval_count < self.budget - self.dim:\n                for i in range(len(particles)):\n                    # Approximate gradient using central difference\n                    grad = np.zeros(self.dim)\n                    for d in range(self.dim):\n                        x_plus = np.copy(particles[i])\n                        x_plus[d] += 1e-5\n                        x_minus = np.copy(particles[i])\n                        x_minus[d] -= 1e-5\n\n                        grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                        eval_count += 2\n\n                    # Gradient descent step\n                    particles[i] = particles[i] - 0.01 * grad\n                    particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "HybridOptimizer", "description": "A hybrid gradient-based and swarm-intelligence metaheuristic combines exploration and exploitation to adaptively optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7001932c-8f2c-4acf-947a-218cbda76b6e", "metadata": {"aucs": [0.32353173829081894, 0.3389081126009129, 0.3367678188719867, 0.3089690765829485, 0.17958138095079046, 0.313538568369955, 0.31170573767771725, 0.32162709161472536, 0.2986916061049266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029911184549279435, 0.0334530537573251, 0.03438546348585192, 0.03393152650594278, 0.040402337736356486, 0.03547226598343367, 0.05187610417334543, 0.04826398299817336, 0.0786775364382778, 0.006859244369682882, 0.0154521008736348, 0.011465287986527573, 0.05668965523986513, 0.02479143632747871, 0.003423298222042792, 0.010938910086105924, 0.02275087510547269, 0.02826225963159723, 0.9469898482055686, 0.9702147665111004, 0.9267964557519535, 0.9217244129146859, 0.8978404068486495, 0.8519111424355429, 0.92301642386613, 0.8985887616850836, 0.9468618740717385, 0.020913227716230165, 0.021400232757379678, 0.05156443080575723, 0.05509858796230038, 0.05696551963057295, 0.04072284481379662, 9.999999999998899e-05, 0.044913854854575, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11626614409784541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032092115141158284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2919448402602085, 0.28071673551086307, 0.27899570176468647, 0.29401568986950954, 0.262075957417752, 0.29126314480863014, 0.2821675355030715, 0.20165527567993113, 0.29160910061622836, 0.04614628343390159, 0.050610658517970974, 0.03913978885897362, 0.043442634181555695, 0.03438346393089864, 0.04434101026653148, 0.027851761072088865, 0.026444981483652708, 0.044454026575114214, 0.11355983688889004, 0.10992185047960223, 0.11659659106955655, 0.1000611968759928, 0.12637393551572773, 0.09456541914029326, 0.0998952023520715, 0.09052494541840206, 0.09270353616695648, 0.20090140991891425, 0.22166154130595983, 0.2219121525618578, 0.1790784944290501, 0.17642758345316178, 0.20894884785992152, 0.19298206438972887, 0.2340316549559438, 0.20843759286775942, 0.10857744028300309, 0.10372954216331454, 0.10175964753044497, 0.10560481516892928, 0.11183505083918366, 0.09598383728222193, 0.08936616453706991, 0.13668185199155947, 0.1223923728752665, 0.14636291464886453, 0.09786566454779799, 0.13345086981233123, 0.1404055211152332, 0.1635992980331905, 0.1205303621571755, 0.12245976138762271, 0.11771787371037412, 0.1261963614278906, 0.13030633068921782, 9.999999999998899e-05, 0.14482598892049814, 0.11963727363365795, 9.999999999998899e-05, 0.14952831575656833, 0.14880753693717108, 9.999999999998899e-05, 9.999999999998899e-05, 0.14975095707812813, 0.15002136204492422, 0.143201281411237, 0.4305368448965139, 0.18569216510881803, 0.18669053835285854, 0.0900243951923092, 0.1676271281796924, 0.49205074312863983, 0.07015485512118336, 0.13473840076898635, 0.09281229459105411, 0.14955942222353547, 0.14286216555912212, 0.1723557097094527, 0.09976644553818736, 0.19272075802479205, 0.20716218696599165, 0.15753115333393108, 0.16314747784606776, 0.17114474042001548, 0.15223304749990552, 0.1843698117726108, 0.16550562617223863, 0.15508096700638585, 0.14472417365626356, 0.19116178159756203, 0.0275348253392933, 0.032047063773085416, 0.03470411622743197, 0.03222036639769288, 0.03269391875362848, 0.035004327602089824, 0.030738877498160178, 0.02703102056725748, 0.02035913785510224]}, "mutation_prompt": null}
{"id": "81c76909-2231-426c-aa0a-5e2cefee076c", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Adapt population size\n        self.inertia_weight = 0.729  # Inertia weight for PSO\n        self.cognitive_coeff = 1.49445  # Cognitive coefficient for PSO\n        self.social_coeff = 1.49445  # Social coefficient for PSO\n\n    def __call__(self, func):\n        eval_count = 0\n\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            # Gradient-based exploitation\n            if eval_count < self.budget - self.dim:\n                for i in range(len(particles)):\n                    # Approximate gradient using central difference\n                    grad = np.zeros(self.dim)\n                    for d in range(self.dim):\n                        x_plus = np.copy(particles[i])\n                        x_plus[d] += 1e-5\n                        x_minus = np.copy(particles[i])\n                        x_minus[d] -= 1e-5\n\n                        grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                        eval_count += 2\n\n                    # Gradient descent step\n                    particles[i] = particles[i] - 0.01 * grad\n                    particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "HybridOptimizer", "description": "A hybrid gradient-based and swarm-intelligence metaheuristic combines exploration and exploitation to adaptively optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7001932c-8f2c-4acf-947a-218cbda76b6e", "metadata": {"aucs": [0.32353173829081894, 0.3389081126009129, 0.3367678188719867, 0.3089690765829485, 0.17958138095079046, 0.313538568369955, 0.31170573767771725, 0.32162709161472536, 0.2986916061049266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029911184549279435, 0.0334530537573251, 0.03438546348585192, 0.03393152650594278, 0.040402337736356486, 0.03547226598343367, 0.05187610417334543, 0.04826398299817336, 0.0786775364382778, 0.006859244369682882, 0.0154521008736348, 0.011465287986527573, 0.05668965523986513, 0.02479143632747871, 0.003423298222042792, 0.010938910086105924, 0.02275087510547269, 0.02826225963159723, 0.9469898482055686, 0.9702147665111004, 0.9267964557519535, 0.9217244129146859, 0.8978404068486495, 0.8519111424355429, 0.92301642386613, 0.8985887616850836, 0.9468618740717385, 0.020913227716230165, 0.021400232757379678, 0.05156443080575723, 0.05509858796230038, 0.05696551963057295, 0.04072284481379662, 9.999999999998899e-05, 0.044913854854575, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11626614409784541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032092115141158284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2919448402602085, 0.28071673551086307, 0.27899570176468647, 0.29401568986950954, 0.262075957417752, 0.29126314480863014, 0.2821675355030715, 0.20165527567993113, 0.29160910061622836, 0.04614628343390159, 0.050610658517970974, 0.03913978885897362, 0.043442634181555695, 0.03438346393089864, 0.04434101026653148, 0.027851761072088865, 0.026444981483652708, 0.044454026575114214, 0.11355983688889004, 0.10992185047960223, 0.11659659106955655, 0.1000611968759928, 0.12637393551572773, 0.09456541914029326, 0.0998952023520715, 0.09052494541840206, 0.09270353616695648, 0.20090140991891425, 0.22166154130595983, 0.2219121525618578, 0.1790784944290501, 0.17642758345316178, 0.20894884785992152, 0.19298206438972887, 0.2340316549559438, 0.20843759286775942, 0.10857744028300309, 0.10372954216331454, 0.10175964753044497, 0.10560481516892928, 0.11183505083918366, 0.09598383728222193, 0.08936616453706991, 0.13668185199155947, 0.1223923728752665, 0.14636291464886453, 0.09786566454779799, 0.13345086981233123, 0.1404055211152332, 0.1635992980331905, 0.1205303621571755, 0.12245976138762271, 0.11771787371037412, 0.1261963614278906, 0.13030633068921782, 9.999999999998899e-05, 0.14482598892049814, 0.11963727363365795, 9.999999999998899e-05, 0.14952831575656833, 0.14880753693717108, 9.999999999998899e-05, 9.999999999998899e-05, 0.14975095707812813, 0.15002136204492422, 0.143201281411237, 0.4305368448965139, 0.18569216510881803, 0.18669053835285854, 0.0900243951923092, 0.1676271281796924, 0.49205074312863983, 0.07015485512118336, 0.13473840076898635, 0.09281229459105411, 0.14955942222353547, 0.14286216555912212, 0.1723557097094527, 0.09976644553818736, 0.19272075802479205, 0.20716218696599165, 0.15753115333393108, 0.16314747784606776, 0.17114474042001548, 0.15223304749990552, 0.1843698117726108, 0.16550562617223863, 0.15508096700638585, 0.14472417365626356, 0.19116178159756203, 0.0275348253392933, 0.032047063773085416, 0.03470411622743197, 0.03222036639769288, 0.03269391875362848, 0.035004327602089824, 0.030738877498160178, 0.02703102056725748, 0.02035913785510224]}, "mutation_prompt": null}
{"id": "0233ce07-1e06-486b-928b-458e66dd8456", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Adapt population size\n        self.inertia_weight = 0.729  # Inertia weight for PSO\n        self.cognitive_coeff = 1.49445  # Cognitive coefficient for PSO\n        self.social_coeff = 1.49445  # Social coefficient for PSO\n\n    def __call__(self, func):\n        eval_count = 0\n\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            # Gradient-based exploitation\n            if eval_count < self.budget - self.dim:\n                for i in range(len(particles)):\n                    # Approximate gradient using central difference\n                    grad = np.zeros(self.dim)\n                    for d in range(self.dim):\n                        x_plus = np.copy(particles[i])\n                        x_plus[d] += 1e-5\n                        x_minus = np.copy(particles[i])\n                        x_minus[d] -= 1e-5\n\n                        grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                        eval_count += 2\n\n                    # Gradient descent step\n                    particles[i] = particles[i] - 0.01 * grad\n                    particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "HybridOptimizer", "description": "A hybrid gradient-based and swarm-intelligence metaheuristic combines exploration and exploitation to adaptively optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7001932c-8f2c-4acf-947a-218cbda76b6e", "metadata": {"aucs": [0.32353173829081894, 0.3389081126009129, 0.3367678188719867, 0.3089690765829485, 0.17958138095079046, 0.313538568369955, 0.31170573767771725, 0.32162709161472536, 0.2986916061049266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029911184549279435, 0.0334530537573251, 0.03438546348585192, 0.03393152650594278, 0.040402337736356486, 0.03547226598343367, 0.05187610417334543, 0.04826398299817336, 0.0786775364382778, 0.006859244369682882, 0.0154521008736348, 0.011465287986527573, 0.05668965523986513, 0.02479143632747871, 0.003423298222042792, 0.010938910086105924, 0.02275087510547269, 0.02826225963159723, 0.9469898482055686, 0.9702147665111004, 0.9267964557519535, 0.9217244129146859, 0.8978404068486495, 0.8519111424355429, 0.92301642386613, 0.8985887616850836, 0.9468618740717385, 0.020913227716230165, 0.021400232757379678, 0.05156443080575723, 0.05509858796230038, 0.05696551963057295, 0.04072284481379662, 9.999999999998899e-05, 0.044913854854575, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11626614409784541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032092115141158284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2919448402602085, 0.28071673551086307, 0.27899570176468647, 0.29401568986950954, 0.262075957417752, 0.29126314480863014, 0.2821675355030715, 0.20165527567993113, 0.29160910061622836, 0.04614628343390159, 0.050610658517970974, 0.03913978885897362, 0.043442634181555695, 0.03438346393089864, 0.04434101026653148, 0.027851761072088865, 0.026444981483652708, 0.044454026575114214, 0.11355983688889004, 0.10992185047960223, 0.11659659106955655, 0.1000611968759928, 0.12637393551572773, 0.09456541914029326, 0.0998952023520715, 0.09052494541840206, 0.09270353616695648, 0.20090140991891425, 0.22166154130595983, 0.2219121525618578, 0.1790784944290501, 0.17642758345316178, 0.20894884785992152, 0.19298206438972887, 0.2340316549559438, 0.20843759286775942, 0.10857744028300309, 0.10372954216331454, 0.10175964753044497, 0.10560481516892928, 0.11183505083918366, 0.09598383728222193, 0.08936616453706991, 0.13668185199155947, 0.1223923728752665, 0.14636291464886453, 0.09786566454779799, 0.13345086981233123, 0.1404055211152332, 0.1635992980331905, 0.1205303621571755, 0.12245976138762271, 0.11771787371037412, 0.1261963614278906, 0.13030633068921782, 9.999999999998899e-05, 0.14482598892049814, 0.11963727363365795, 9.999999999998899e-05, 0.14952831575656833, 0.14880753693717108, 9.999999999998899e-05, 9.999999999998899e-05, 0.14975095707812813, 0.15002136204492422, 0.143201281411237, 0.4305368448965139, 0.18569216510881803, 0.18669053835285854, 0.0900243951923092, 0.1676271281796924, 0.49205074312863983, 0.07015485512118336, 0.13473840076898635, 0.09281229459105411, 0.14955942222353547, 0.14286216555912212, 0.1723557097094527, 0.09976644553818736, 0.19272075802479205, 0.20716218696599165, 0.15753115333393108, 0.16314747784606776, 0.17114474042001548, 0.15223304749990552, 0.1843698117726108, 0.16550562617223863, 0.15508096700638585, 0.14472417365626356, 0.19116178159756203, 0.0275348253392933, 0.032047063773085416, 0.03470411622743197, 0.03222036639769288, 0.03269391875362848, 0.035004327602089824, 0.030738877498160178, 0.02703102056725748, 0.02035913785510224]}, "mutation_prompt": null}
{"id": "d4b80c74-e4f3-4f6e-b997-9dae2a701909", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Adapt population size\n        self.inertia_weight = 0.729  # Inertia weight for PSO\n        self.cognitive_coeff = 1.49445  # Cognitive coefficient for PSO\n        self.social_coeff = 1.49445  # Social coefficient for PSO\n\n    def __call__(self, func):\n        eval_count = 0\n\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            # Gradient-based exploitation\n            if eval_count < self.budget - self.dim:\n                for i in range(len(particles)):\n                    # Approximate gradient using central difference\n                    grad = np.zeros(self.dim)\n                    for d in range(self.dim):\n                        x_plus = np.copy(particles[i])\n                        x_plus[d] += 1e-5\n                        x_minus = np.copy(particles[i])\n                        x_minus[d] -= 1e-5\n\n                        grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                        eval_count += 2\n\n                    # Gradient descent step\n                    particles[i] = particles[i] - 0.01 * grad\n                    particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "HybridOptimizer", "description": "A hybrid gradient-based and swarm-intelligence metaheuristic combines exploration and exploitation to adaptively optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7001932c-8f2c-4acf-947a-218cbda76b6e", "metadata": {"aucs": [0.32353173829081894, 0.3389081126009129, 0.3367678188719867, 0.3089690765829485, 0.17958138095079046, 0.313538568369955, 0.31170573767771725, 0.32162709161472536, 0.2986916061049266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029911184549279435, 0.0334530537573251, 0.03438546348585192, 0.03393152650594278, 0.040402337736356486, 0.03547226598343367, 0.05187610417334543, 0.04826398299817336, 0.0786775364382778, 0.006859244369682882, 0.0154521008736348, 0.011465287986527573, 0.05668965523986513, 0.02479143632747871, 0.003423298222042792, 0.010938910086105924, 0.02275087510547269, 0.02826225963159723, 0.9469898482055686, 0.9702147665111004, 0.9267964557519535, 0.9217244129146859, 0.8978404068486495, 0.8519111424355429, 0.92301642386613, 0.8985887616850836, 0.9468618740717385, 0.020913227716230165, 0.021400232757379678, 0.05156443080575723, 0.05509858796230038, 0.05696551963057295, 0.04072284481379662, 9.999999999998899e-05, 0.044913854854575, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11626614409784541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032092115141158284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2919448402602085, 0.28071673551086307, 0.27899570176468647, 0.29401568986950954, 0.262075957417752, 0.29126314480863014, 0.2821675355030715, 0.20165527567993113, 0.29160910061622836, 0.04614628343390159, 0.050610658517970974, 0.03913978885897362, 0.043442634181555695, 0.03438346393089864, 0.04434101026653148, 0.027851761072088865, 0.026444981483652708, 0.044454026575114214, 0.11355983688889004, 0.10992185047960223, 0.11659659106955655, 0.1000611968759928, 0.12637393551572773, 0.09456541914029326, 0.0998952023520715, 0.09052494541840206, 0.09270353616695648, 0.20090140991891425, 0.22166154130595983, 0.2219121525618578, 0.1790784944290501, 0.17642758345316178, 0.20894884785992152, 0.19298206438972887, 0.2340316549559438, 0.20843759286775942, 0.10857744028300309, 0.10372954216331454, 0.10175964753044497, 0.10560481516892928, 0.11183505083918366, 0.09598383728222193, 0.08936616453706991, 0.13668185199155947, 0.1223923728752665, 0.14636291464886453, 0.09786566454779799, 0.13345086981233123, 0.1404055211152332, 0.1635992980331905, 0.1205303621571755, 0.12245976138762271, 0.11771787371037412, 0.1261963614278906, 0.13030633068921782, 9.999999999998899e-05, 0.14482598892049814, 0.11963727363365795, 9.999999999998899e-05, 0.14952831575656833, 0.14880753693717108, 9.999999999998899e-05, 9.999999999998899e-05, 0.14975095707812813, 0.15002136204492422, 0.143201281411237, 0.4305368448965139, 0.18569216510881803, 0.18669053835285854, 0.0900243951923092, 0.1676271281796924, 0.49205074312863983, 0.07015485512118336, 0.13473840076898635, 0.09281229459105411, 0.14955942222353547, 0.14286216555912212, 0.1723557097094527, 0.09976644553818736, 0.19272075802479205, 0.20716218696599165, 0.15753115333393108, 0.16314747784606776, 0.17114474042001548, 0.15223304749990552, 0.1843698117726108, 0.16550562617223863, 0.15508096700638585, 0.14472417365626356, 0.19116178159756203, 0.0275348253392933, 0.032047063773085416, 0.03470411622743197, 0.03222036639769288, 0.03269391875362848, 0.035004327602089824, 0.030738877498160178, 0.02703102056725748, 0.02035913785510224]}, "mutation_prompt": null}
{"id": "edef447c-0770-4161-8d4e-e0354ad2803c", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Adapt population size\n        self.inertia_weight = 0.729  # Inertia weight for PSO\n        self.cognitive_coeff = 1.49445  # Cognitive coefficient for PSO\n        self.social_coeff = 1.49445  # Social coefficient for PSO\n\n    def __call__(self, func):\n        eval_count = 0\n\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            # Gradient-based exploitation\n            if eval_count < self.budget - self.dim:\n                for i in range(len(particles)):\n                    # Approximate gradient using central difference\n                    grad = np.zeros(self.dim)\n                    for d in range(self.dim):\n                        x_plus = np.copy(particles[i])\n                        x_plus[d] += 1e-5\n                        x_minus = np.copy(particles[i])\n                        x_minus[d] -= 1e-5\n\n                        grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                        eval_count += 2\n\n                    # Gradient descent step\n                    particles[i] = particles[i] - 0.01 * grad\n                    particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "HybridOptimizer", "description": "A hybrid gradient-based and swarm-intelligence metaheuristic combines exploration and exploitation to adaptively optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7001932c-8f2c-4acf-947a-218cbda76b6e", "metadata": {"aucs": [0.32353173829081894, 0.3389081126009129, 0.3367678188719867, 0.3089690765829485, 0.17958138095079046, 0.313538568369955, 0.31170573767771725, 0.32162709161472536, 0.2986916061049266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029911184549279435, 0.0334530537573251, 0.03438546348585192, 0.03393152650594278, 0.040402337736356486, 0.03547226598343367, 0.05187610417334543, 0.04826398299817336, 0.0786775364382778, 0.006859244369682882, 0.0154521008736348, 0.011465287986527573, 0.05668965523986513, 0.02479143632747871, 0.003423298222042792, 0.010938910086105924, 0.02275087510547269, 0.02826225963159723, 0.9469898482055686, 0.9702147665111004, 0.9267964557519535, 0.9217244129146859, 0.8978404068486495, 0.8519111424355429, 0.92301642386613, 0.8985887616850836, 0.9468618740717385, 0.020913227716230165, 0.021400232757379678, 0.05156443080575723, 0.05509858796230038, 0.05696551963057295, 0.04072284481379662, 9.999999999998899e-05, 0.044913854854575, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11626614409784541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032092115141158284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2919448402602085, 0.28071673551086307, 0.27899570176468647, 0.29401568986950954, 0.262075957417752, 0.29126314480863014, 0.2821675355030715, 0.20165527567993113, 0.29160910061622836, 0.04614628343390159, 0.050610658517970974, 0.03913978885897362, 0.043442634181555695, 0.03438346393089864, 0.04434101026653148, 0.027851761072088865, 0.026444981483652708, 0.044454026575114214, 0.11355983688889004, 0.10992185047960223, 0.11659659106955655, 0.1000611968759928, 0.12637393551572773, 0.09456541914029326, 0.0998952023520715, 0.09052494541840206, 0.09270353616695648, 0.20090140991891425, 0.22166154130595983, 0.2219121525618578, 0.1790784944290501, 0.17642758345316178, 0.20894884785992152, 0.19298206438972887, 0.2340316549559438, 0.20843759286775942, 0.10857744028300309, 0.10372954216331454, 0.10175964753044497, 0.10560481516892928, 0.11183505083918366, 0.09598383728222193, 0.08936616453706991, 0.13668185199155947, 0.1223923728752665, 0.14636291464886453, 0.09786566454779799, 0.13345086981233123, 0.1404055211152332, 0.1635992980331905, 0.1205303621571755, 0.12245976138762271, 0.11771787371037412, 0.1261963614278906, 0.13030633068921782, 9.999999999998899e-05, 0.14482598892049814, 0.11963727363365795, 9.999999999998899e-05, 0.14952831575656833, 0.14880753693717108, 9.999999999998899e-05, 9.999999999998899e-05, 0.14975095707812813, 0.15002136204492422, 0.143201281411237, 0.4305368448965139, 0.18569216510881803, 0.18669053835285854, 0.0900243951923092, 0.1676271281796924, 0.49205074312863983, 0.07015485512118336, 0.13473840076898635, 0.09281229459105411, 0.14955942222353547, 0.14286216555912212, 0.1723557097094527, 0.09976644553818736, 0.19272075802479205, 0.20716218696599165, 0.15753115333393108, 0.16314747784606776, 0.17114474042001548, 0.15223304749990552, 0.1843698117726108, 0.16550562617223863, 0.15508096700638585, 0.14472417365626356, 0.19116178159756203, 0.0275348253392933, 0.032047063773085416, 0.03470411622743197, 0.03222036639769288, 0.03269391875362848, 0.035004327602089824, 0.030738877498160178, 0.02703102056725748, 0.02035913785510224]}, "mutation_prompt": null}
{"id": "8a0b6c52-89b4-40cf-935f-54e92831bc1c", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)  # Adapt population size\n        self.inertia_weight = 0.729  # Inertia weight for PSO\n        self.cognitive_coeff = 1.49445  # Cognitive coefficient for PSO\n        self.social_coeff = 1.49445  # Social coefficient for PSO\n\n    def __call__(self, func):\n        eval_count = 0\n\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            # Gradient-based exploitation\n            if eval_count < self.budget - self.dim:\n                for i in range(len(particles)):\n                    # Approximate gradient using central difference\n                    grad = np.zeros(self.dim)\n                    for d in range(self.dim):\n                        x_plus = np.copy(particles[i])\n                        x_plus[d] += 1e-5\n                        x_minus = np.copy(particles[i])\n                        x_minus[d] -= 1e-5\n\n                        grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                        eval_count += 2\n\n                    # Gradient descent step\n                    particles[i] = particles[i] - 0.01 * grad\n                    particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "HybridOptimizer", "description": "A hybrid gradient-based and swarm-intelligence metaheuristic combines exploration and exploitation to adaptively optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7001932c-8f2c-4acf-947a-218cbda76b6e", "metadata": {"aucs": [0.32353173829081894, 0.3389081126009129, 0.3367678188719867, 0.3089690765829485, 0.17958138095079046, 0.313538568369955, 0.31170573767771725, 0.32162709161472536, 0.2986916061049266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029911184549279435, 0.0334530537573251, 0.03438546348585192, 0.03393152650594278, 0.040402337736356486, 0.03547226598343367, 0.05187610417334543, 0.04826398299817336, 0.0786775364382778, 0.006859244369682882, 0.0154521008736348, 0.011465287986527573, 0.05668965523986513, 0.02479143632747871, 0.003423298222042792, 0.010938910086105924, 0.02275087510547269, 0.02826225963159723, 0.9469898482055686, 0.9702147665111004, 0.9267964557519535, 0.9217244129146859, 0.8978404068486495, 0.8519111424355429, 0.92301642386613, 0.8985887616850836, 0.9468618740717385, 0.020913227716230165, 0.021400232757379678, 0.05156443080575723, 0.05509858796230038, 0.05696551963057295, 0.04072284481379662, 9.999999999998899e-05, 0.044913854854575, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11626614409784541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032092115141158284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2919448402602085, 0.28071673551086307, 0.27899570176468647, 0.29401568986950954, 0.262075957417752, 0.29126314480863014, 0.2821675355030715, 0.20165527567993113, 0.29160910061622836, 0.04614628343390159, 0.050610658517970974, 0.03913978885897362, 0.043442634181555695, 0.03438346393089864, 0.04434101026653148, 0.027851761072088865, 0.026444981483652708, 0.044454026575114214, 0.11355983688889004, 0.10992185047960223, 0.11659659106955655, 0.1000611968759928, 0.12637393551572773, 0.09456541914029326, 0.0998952023520715, 0.09052494541840206, 0.09270353616695648, 0.20090140991891425, 0.22166154130595983, 0.2219121525618578, 0.1790784944290501, 0.17642758345316178, 0.20894884785992152, 0.19298206438972887, 0.2340316549559438, 0.20843759286775942, 0.10857744028300309, 0.10372954216331454, 0.10175964753044497, 0.10560481516892928, 0.11183505083918366, 0.09598383728222193, 0.08936616453706991, 0.13668185199155947, 0.1223923728752665, 0.14636291464886453, 0.09786566454779799, 0.13345086981233123, 0.1404055211152332, 0.1635992980331905, 0.1205303621571755, 0.12245976138762271, 0.11771787371037412, 0.1261963614278906, 0.13030633068921782, 9.999999999998899e-05, 0.14482598892049814, 0.11963727363365795, 9.999999999998899e-05, 0.14952831575656833, 0.14880753693717108, 9.999999999998899e-05, 9.999999999998899e-05, 0.14975095707812813, 0.15002136204492422, 0.143201281411237, 0.4305368448965139, 0.18569216510881803, 0.18669053835285854, 0.0900243951923092, 0.1676271281796924, 0.49205074312863983, 0.07015485512118336, 0.13473840076898635, 0.09281229459105411, 0.14955942222353547, 0.14286216555912212, 0.1723557097094527, 0.09976644553818736, 0.19272075802479205, 0.20716218696599165, 0.15753115333393108, 0.16314747784606776, 0.17114474042001548, 0.15223304749990552, 0.1843698117726108, 0.16550562617223863, 0.15508096700638585, 0.14472417365626356, 0.19116178159756203, 0.0275348253392933, 0.032047063773085416, 0.03470411622743197, 0.03222036639769288, 0.03269391875362848, 0.035004327602089824, 0.030738877498160178, 0.02703102056725748, 0.02035913785510224]}, "mutation_prompt": null}
{"id": "f56a992a-71d3-4ee9-97c1-7c5cf58d4d76", "solution": "import numpy as np\n\nclass EnhancedCooperativeOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)\n        self.inertia_weight = 0.729\n        self.cognitive_coeff = 1.49445\n        self.social_coeff = 1.49445\n        self.partition_count = 3  # Divide dimensions into partitions\n\n    def __call__(self, func):\n        eval_count = 0\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if eval_count < self.budget - self.dim:\n                partitions = np.array_split(np.arange(self.dim), self.partition_count)\n                for i in range(len(particles)):\n                    for partition in partitions:\n                        grad = np.zeros(self.dim)\n                        for d in partition:\n                            x_plus = np.copy(particles[i])\n                            x_plus[d] += 1e-5\n                            x_minus = np.copy(particles[i])\n                            x_minus[d] -= 1e-5\n\n                            grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                            eval_count += 2\n\n                        particles[i] = particles[i] - 0.01 * grad\n                        particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "EnhancedCooperativeOptimizer", "description": "A cooperative co-evolution strategy combines adaptive PSO and local search with dynamic dimension partitioning for efficient optimization.", "configspace": "", "generation": 13, "fitness": 0.1302972338355548, "feedback": "The algorithm EnhancedCooperativeOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "7001932c-8f2c-4acf-947a-218cbda76b6e", "metadata": {"aucs": [0.32442578775343034, 0.3398326043868388, 0.3378082031182831, 0.31005652129067585, 0.18103077410287138, 0.314784651992264, 0.3128261619857553, 0.3224895802057215, 0.2995989907596487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04130096383414661, 0.037864655980646256, 0.044701331397819954, 0.040935382664240905, 0.04746919071623579, 0.05516255382898194, 0.0588762887819666, 0.04992324647377189, 0.07958652732195148, 0.011450556765387754, 0.04713259484936283, 0.028187336539747254, 0.05666078522846851, 0.024790913454672214, 0.028520899287462265, 0.02102675563706613, 0.045528895286075954, 0.03324495409888839, 0.9470084694455512, 0.9702300496566011, 0.9269207287256299, 0.921789861127121, 0.8978796426837066, 0.8519710335448041, 0.9230873140223065, 0.8986226564025411, 0.9468980180492945, 0.025026591006191867, 0.026727117941241163, 0.06037343343721491, 0.01995455476696384, 0.058325615533171504, 0.08407926114049136, 9.999999999998899e-05, 0.049772807793645346, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11624912549738764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00653003247614703, 0.032092115141158284, 9.999999999998899e-05, 0.0017952385795469983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017066367417273298, 0.0016330404383352315, 9.999999999998899e-05, 9.999999999998899e-05, 0.011479121438262019, 9.999999999998899e-05, 9.999999999998899e-05, 0.019588980680019796, 0.31611573132481685, 0.31667554786836705, 0.296818235506228, 0.29237710006490225, 0.2734232046146532, 0.34896590047736686, 0.28015344801584263, 0.2042086376965534, 0.28498168699700577, 0.047943253482329085, 0.05267549627010126, 0.05726289808204932, 0.06311756416713543, 0.02736868533257697, 0.051356130010696166, 0.05409627889712321, 0.06565106569619583, 0.05435960505476489, 0.12486766282852746, 0.12624935693932093, 0.12903478154634507, 0.1087901802997634, 0.13688469929287772, 0.11116351001388225, 0.12617442333255513, 0.1025267968232011, 0.10427180398046754, 0.2027973440543689, 0.18244074320973447, 0.20726763697982442, 0.19269000195628228, 0.18083834586270753, 0.22352983651865044, 0.23058611582137511, 0.25248481136752454, 0.22823322021842274, 0.10501636435538042, 0.12286563473265377, 0.11326022725788443, 0.12762531581725, 0.11382999464678523, 0.12824315546790188, 0.12054229478119383, 0.12746685090439036, 0.11223396968886168, 0.14636291464886453, 0.10728477142012749, 0.13345086981233123, 0.11984072380672717, 0.1635992980331905, 0.12151869511135371, 0.12245976138762271, 0.11760478181143286, 0.1261963614278906, 0.1738291862504182, 9.999999999998899e-05, 0.17381424702796378, 0.1244245210151439, 9.999999999998899e-05, 0.1531167631527367, 0.15915089635216173, 9.999999999998899e-05, 9.999999999998899e-05, 0.14561602314648026, 0.15655462297639156, 0.1377554544580365, 0.4294208618535058, 0.18724659724810255, 0.18837933716995048, 0.11219361451154597, 0.16812492072810203, 0.46222526551229215, 0.0726056776295183, 0.1437151132861998, 0.10188943132411443, 0.2036672770368766, 0.14457387876257888, 0.18411355257330164, 0.11342200067706998, 0.3155765251139585, 0.21837032695509173, 0.16950002754712679, 0.1916617881622994, 0.16222263322990316, 0.15508233818291284, 0.1507408161180187, 0.1635411249030232, 0.1739980922375225, 0.1772254091336285, 0.19110014197137093, 0.03691945724135948, 0.0688717032409184, 0.0378117457217928, 0.032219316499300654, 0.03848180511372701, 0.037064116586736584, 0.07195777453098329, 0.03479969424455065, 0.03087793781385939]}, "mutation_prompt": null}
{"id": "4c1cea95-fb71-4157-a148-7d1a0c3e0846", "solution": "import numpy as np\n\nclass EnhancedDifferentialSGDEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.partition_count = 3  # Divide dimensions into partitions\n\n    def __call__(self, func):\n        eval_count = 0\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        eval_count += self.population_size\n\n        best_index = np.argmin(scores)\n        best_position = population[best_index]\n        best_score = scores[best_index]\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial_vector = np.where(cross_points, mutant_vector, population[i])\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < scores[i]:\n                    population[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_position = trial_vector\n\n            if eval_count < self.budget - self.dim:\n                partitions = np.array_split(np.arange(self.dim), self.partition_count)\n                for i in range(len(population)):\n                    for partition in partitions:\n                        grad = np.zeros(self.dim)\n                        for d in partition:\n                            x_plus = np.copy(population[i])\n                            x_plus[d] += 1e-5\n                            x_minus = np.copy(population[i])\n                            x_minus[d] -= 1e-5\n\n                            grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                            eval_count += 2\n\n                        population[i] -= 0.01 * grad\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n\n        return best_position", "name": "EnhancedDifferentialSGDEvolution", "description": "A blended strategy integrating Adaptive Differential Evolution and Stochastic Gradient Descent for robust optimization.", "configspace": "", "generation": 14, "fitness": 0.11909833352905164, "feedback": "The algorithm EnhancedDifferentialSGDEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.16.", "error": "", "parent_id": "f56a992a-71d3-4ee9-97c1-7c5cf58d4d76", "metadata": {"aucs": [0.25203797536423533, 0.2522366606890951, 0.2301555329369056, 0.23831778783288327, 0.24015082529075127, 0.2824257461042955, 0.2269606694688795, 0.2231902453322948, 0.25637017613326984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049254300303783194, 0.04427773112944633, 0.06172647332035153, 0.05502909093895503, 0.0364253026953858, 0.06043414217642762, 0.037143767255773286, 0.031693476416306265, 0.04075046467560428, 0.03139525463252435, 0.045884240191316206, 0.03358044831882201, 0.04196994624658601, 0.0278585599653276, 0.029980307515905635, 0.03689658646084393, 0.045402196846985876, 0.05095233026494572, 0.7872247391789081, 0.8760622341935899, 0.8243291303309763, 0.6993313071797901, 0.7843500886750525, 0.6501776280227369, 0.702488111039739, 0.9964070659403929, 0.7757908446649641, 0.10576247044210108, 0.09065284643673843, 0.0746169902054784, 0.10888236401021711, 0.09885082552939073, 0.15053568050655863, 0.08664309223346989, 0.076748207617375, 0.07459311927598189, 0.14224892665494282, 0.11853919623685127, 0.13670704324231664, 0.16385116049292736, 0.14661694568937034, 0.12006813960050933, 0.16980760172186182, 0.1469725145990335, 0.13940949273035042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006789637137293303, 0.005011094287125317, 0.0005035813726382843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015005516739641678, 0.010357726659859123, 0.014829402922385437, 0.03525922968235973, 0.040296840165083836, 0.029170540829930536, 0.03476887733559886, 0.03792390109043842, 0.023492892328004555, 0.23472781548492572, 0.2152850722839732, 0.22486715203033392, 0.24651838839462592, 0.20969275975405954, 0.23286890470273336, 0.22539228944092615, 0.21109229101720195, 0.22134114204550093, 0.05408157526441393, 0.06363259387429865, 0.052782914174433926, 0.055967262132725626, 0.04738334486071705, 0.05330139688128477, 0.06232797795325784, 0.055526386443681464, 0.04833902881460039, 0.0979933696999562, 0.12206446469923904, 0.09294945149623801, 0.1092930928288477, 0.12761241916210075, 0.10255363402832185, 0.1231507218566632, 0.10975429969598716, 0.1141696491958506, 0.20384017320068137, 0.17840247069032134, 0.21932355531407444, 0.17796184165244644, 0.17136651863566243, 0.19565605651556295, 0.20325028198374717, 0.19762823089321424, 0.18371347092371393, 0.12209364962168179, 0.10904497842607974, 0.11571952317682244, 0.1704953572840493, 0.10591263935752504, 0.11227635169585626, 0.10729360633209073, 0.11714918954706022, 0.11439920865921449, 0.09179390141492172, 0.12450625092470202, 0.13400850166812595, 0.10314215051749964, 0.08770278443582225, 0.109972024453449, 0.12253290709568754, 0.08046867724915341, 0.12709468223904752, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04494465681861015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16573429963286546, 0.1618800884482433, 0.15676799381519846, 0.21580014551769777, 0.1928114016499629, 0.1877902825716291, 0.166467928448911, 0.15734382209132924, 0.1610642960070463, 0.19805064562875796, 0.17047540508973003, 0.2706156538495057, 0.16304205166531704, 0.26929313873384075, 0.26208099379476624, 0.22612701872287566, 0.26291537169813906, 0.19208836440274868, 0.2190854711736161, 0.238520049277116, 0.17142949762153858, 0.1579830115291383, 0.17046463777117637, 0.1637159794880736, 0.18030332445233455, 0.1799576302829513, 0.1830415231128094, 0.16781126332055407, 0.1742785348420779, 0.028782752413586077, 0.032735834461650515, 0.032783602230658127, 0.03723365116489585, 0.036650885228167174, 0.05496966361258404, 0.04186787740325759, 0.029507794944254373, 0.02812787172254505]}, "mutation_prompt": null}
{"id": "57e9d8f7-e9d7-4b78-b6bf-90eddd58cbce", "solution": "import numpy as np\n\nclass EnhancedCooperativeOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)\n        self.inertia_weight = 0.729\n        self.cognitive_coeff = 1.49445\n        self.social_coeff = 1.49445\n        self.partition_count = 3  # Divide dimensions into partitions\n\n    def __call__(self, func):\n        eval_count = 0\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if eval_count < self.budget - self.dim:\n                partitions = np.array_split(np.arange(self.dim), self.partition_count)\n                for i in range(len(particles)):\n                    for partition in partitions:\n                        grad = np.zeros(self.dim)\n                        for d in partition:\n                            x_plus = np.copy(particles[i])\n                            x_plus[d] += 1e-5\n                            x_minus = np.copy(particles[i])\n                            x_minus[d] -= 1e-5\n\n                            grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                            eval_count += 2\n\n                        particles[i] = particles[i] - 0.01 * grad\n                        particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "EnhancedCooperativeOptimizer", "description": "A cooperative co-evolution strategy combines adaptive PSO and local search with dynamic dimension partitioning for efficient optimization.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f56a992a-71d3-4ee9-97c1-7c5cf58d4d76", "metadata": {"aucs": [0.32442578775343034, 0.3398326043868388, 0.3378082031182831, 0.31005652129067585, 0.18103077410287138, 0.314784651992264, 0.3128261619857553, 0.3224895802057215, 0.2995989907596487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04130096383414661, 0.037864655980646256, 0.044701331397819954, 0.040935382664240905, 0.04746919071623579, 0.05516255382898194, 0.0588762887819666, 0.04992324647377189, 0.07958652732195148, 0.011450556765387754, 0.04713259484936283, 0.028187336539747254, 0.05666078522846851, 0.024790913454672214, 0.028520899287462265, 0.02102675563706613, 0.045528895286075954, 0.03324495409888839, 0.9470084694455512, 0.9702300496566011, 0.9269207287256299, 0.921789861127121, 0.8978796426837066, 0.8519710335448041, 0.9230873140223065, 0.8986226564025411, 0.9468980180492945, 0.025026591006191867, 0.026727117941241163, 0.06037343343721491, 0.01995455476696384, 0.058325615533171504, 0.08407926114049136, 9.999999999998899e-05, 0.049772807793645346, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11624912549738764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00653003247614703, 0.032092115141158284, 9.999999999998899e-05, 0.0017952385795469983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017066367417273298, 0.0016330404383352315, 9.999999999998899e-05, 9.999999999998899e-05, 0.011479121438262019, 9.999999999998899e-05, 9.999999999998899e-05, 0.019588980680019796, 0.31611573132481685, 0.31667554786836705, 0.296818235506228, 0.29237710006490225, 0.2734232046146532, 0.34896590047736686, 0.28015344801584263, 0.2042086376965534, 0.28498168699700577, 0.047943253482329085, 0.05267549627010126, 0.05726289808204932, 0.06311756416713543, 0.02736868533257697, 0.051356130010696166, 0.05409627889712321, 0.06565106569619583, 0.05435960505476489, 0.12486766282852746, 0.12624935693932093, 0.12903478154634507, 0.1087901802997634, 0.13688469929287772, 0.11116351001388225, 0.12617442333255513, 0.1025267968232011, 0.10427180398046754, 0.2027973440543689, 0.18244074320973447, 0.20726763697982442, 0.19269000195628228, 0.18083834586270753, 0.22352983651865044, 0.23058611582137511, 0.25248481136752454, 0.22823322021842274, 0.10501636435538042, 0.12286563473265377, 0.11326022725788443, 0.12762531581725, 0.11382999464678523, 0.12824315546790188, 0.12054229478119383, 0.12746685090439036, 0.11223396968886168, 0.14636291464886453, 0.10728477142012749, 0.13345086981233123, 0.11984072380672717, 0.1635992980331905, 0.12151869511135371, 0.12245976138762271, 0.11760478181143286, 0.1261963614278906, 0.1738291862504182, 9.999999999998899e-05, 0.17381424702796378, 0.1244245210151439, 9.999999999998899e-05, 0.1531167631527367, 0.15915089635216173, 9.999999999998899e-05, 9.999999999998899e-05, 0.14561602314648026, 0.15655462297639156, 0.1377554544580365, 0.4294208618535058, 0.18724659724810255, 0.18837933716995048, 0.11219361451154597, 0.16812492072810203, 0.46222526551229215, 0.0726056776295183, 0.1437151132861998, 0.10188943132411443, 0.2036672770368766, 0.14457387876257888, 0.18411355257330164, 0.11342200067706998, 0.3155765251139585, 0.21837032695509173, 0.16950002754712679, 0.1916617881622994, 0.16222263322990316, 0.15508233818291284, 0.1507408161180187, 0.1635411249030232, 0.1739980922375225, 0.1772254091336285, 0.19110014197137093, 0.03691945724135948, 0.0688717032409184, 0.0378117457217928, 0.032219316499300654, 0.03848180511372701, 0.037064116586736584, 0.07195777453098329, 0.03479969424455065, 0.03087793781385939]}, "mutation_prompt": null}
{"id": "b789d5d3-0cd1-4c1d-9b6b-088ad0c23fbc", "solution": "import numpy as np\n\nclass EnhancedCooperativeOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)\n        self.inertia_weight = 0.729\n        self.cognitive_coeff = 1.49445\n        self.social_coeff = 1.49445\n        self.partition_count = 3  # Divide dimensions into partitions\n\n    def __call__(self, func):\n        eval_count = 0\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if eval_count < self.budget - self.dim:\n                partitions = np.array_split(np.arange(self.dim), self.partition_count)\n                for i in range(len(particles)):\n                    for partition in partitions:\n                        grad = np.zeros(self.dim)\n                        for d in partition:\n                            x_plus = np.copy(particles[i])\n                            x_plus[d] += 1e-5\n                            x_minus = np.copy(particles[i])\n                            x_minus[d] -= 1e-5\n\n                            grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                            eval_count += 2\n\n                        particles[i] = particles[i] - 0.01 * grad\n                        particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "EnhancedCooperativeOptimizer", "description": "A cooperative co-evolution strategy combines adaptive PSO and local search with dynamic dimension partitioning for efficient optimization.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f56a992a-71d3-4ee9-97c1-7c5cf58d4d76", "metadata": {"aucs": [0.32442578775343034, 0.3398326043868388, 0.3378082031182831, 0.31005652129067585, 0.18103077410287138, 0.314784651992264, 0.3128261619857553, 0.3224895802057215, 0.2995989907596487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04130096383414661, 0.037864655980646256, 0.044701331397819954, 0.040935382664240905, 0.04746919071623579, 0.05516255382898194, 0.0588762887819666, 0.04992324647377189, 0.07958652732195148, 0.011450556765387754, 0.04713259484936283, 0.028187336539747254, 0.05666078522846851, 0.024790913454672214, 0.028520899287462265, 0.02102675563706613, 0.045528895286075954, 0.03324495409888839, 0.9470084694455512, 0.9702300496566011, 0.9269207287256299, 0.921789861127121, 0.8978796426837066, 0.8519710335448041, 0.9230873140223065, 0.8986226564025411, 0.9468980180492945, 0.025026591006191867, 0.026727117941241163, 0.06037343343721491, 0.01995455476696384, 0.058325615533171504, 0.08407926114049136, 9.999999999998899e-05, 0.049772807793645346, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11624912549738764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00653003247614703, 0.032092115141158284, 9.999999999998899e-05, 0.0017952385795469983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017066367417273298, 0.0016330404383352315, 9.999999999998899e-05, 9.999999999998899e-05, 0.011479121438262019, 9.999999999998899e-05, 9.999999999998899e-05, 0.019588980680019796, 0.31611573132481685, 0.31667554786836705, 0.296818235506228, 0.29237710006490225, 0.2734232046146532, 0.34896590047736686, 0.28015344801584263, 0.2042086376965534, 0.28498168699700577, 0.047943253482329085, 0.05267549627010126, 0.05726289808204932, 0.06311756416713543, 0.02736868533257697, 0.051356130010696166, 0.05409627889712321, 0.06565106569619583, 0.05435960505476489, 0.12486766282852746, 0.12624935693932093, 0.12903478154634507, 0.1087901802997634, 0.13688469929287772, 0.11116351001388225, 0.12617442333255513, 0.1025267968232011, 0.10427180398046754, 0.2027973440543689, 0.18244074320973447, 0.20726763697982442, 0.19269000195628228, 0.18083834586270753, 0.22352983651865044, 0.23058611582137511, 0.25248481136752454, 0.22823322021842274, 0.10501636435538042, 0.12286563473265377, 0.11326022725788443, 0.12762531581725, 0.11382999464678523, 0.12824315546790188, 0.12054229478119383, 0.12746685090439036, 0.11223396968886168, 0.14636291464886453, 0.10728477142012749, 0.13345086981233123, 0.11984072380672717, 0.1635992980331905, 0.12151869511135371, 0.12245976138762271, 0.11760478181143286, 0.1261963614278906, 0.1738291862504182, 9.999999999998899e-05, 0.17381424702796378, 0.1244245210151439, 9.999999999998899e-05, 0.1531167631527367, 0.15915089635216173, 9.999999999998899e-05, 9.999999999998899e-05, 0.14561602314648026, 0.15655462297639156, 0.1377554544580365, 0.4294208618535058, 0.18724659724810255, 0.18837933716995048, 0.11219361451154597, 0.16812492072810203, 0.46222526551229215, 0.0726056776295183, 0.1437151132861998, 0.10188943132411443, 0.2036672770368766, 0.14457387876257888, 0.18411355257330164, 0.11342200067706998, 0.3155765251139585, 0.21837032695509173, 0.16950002754712679, 0.1916617881622994, 0.16222263322990316, 0.15508233818291284, 0.1507408161180187, 0.1635411249030232, 0.1739980922375225, 0.1772254091336285, 0.19110014197137093, 0.03691945724135948, 0.0688717032409184, 0.0378117457217928, 0.032219316499300654, 0.03848180511372701, 0.037064116586736584, 0.07195777453098329, 0.03479969424455065, 0.03087793781385939]}, "mutation_prompt": null}
{"id": "da4f273c-ff56-459c-a54c-a73541772427", "solution": "import numpy as np\n\nclass EnhancedCooperativeOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)\n        self.inertia_weight = 0.729\n        self.cognitive_coeff = 1.49445\n        self.social_coeff = 1.49445\n        self.partition_count = 3  # Divide dimensions into partitions\n\n    def __call__(self, func):\n        eval_count = 0\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if eval_count < self.budget - self.dim:\n                partitions = np.array_split(np.arange(self.dim), self.partition_count)\n                for i in range(len(particles)):\n                    for partition in partitions:\n                        grad = np.zeros(self.dim)\n                        for d in partition:\n                            x_plus = np.copy(particles[i])\n                            x_plus[d] += 1e-5\n                            x_minus = np.copy(particles[i])\n                            x_minus[d] -= 1e-5\n\n                            grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                            eval_count += 2\n\n                        particles[i] = particles[i] - 0.01 * grad\n                        particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "EnhancedCooperativeOptimizer", "description": "A cooperative co-evolution strategy combines adaptive PSO and local search with dynamic dimension partitioning for efficient optimization.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f56a992a-71d3-4ee9-97c1-7c5cf58d4d76", "metadata": {"aucs": [0.32442578775343034, 0.3398326043868388, 0.3378082031182831, 0.31005652129067585, 0.18103077410287138, 0.314784651992264, 0.3128261619857553, 0.3224895802057215, 0.2995989907596487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04130096383414661, 0.037864655980646256, 0.044701331397819954, 0.040935382664240905, 0.04746919071623579, 0.05516255382898194, 0.0588762887819666, 0.04992324647377189, 0.07958652732195148, 0.011450556765387754, 0.04713259484936283, 0.028187336539747254, 0.05666078522846851, 0.024790913454672214, 0.028520899287462265, 0.02102675563706613, 0.045528895286075954, 0.03324495409888839, 0.9470084694455512, 0.9702300496566011, 0.9269207287256299, 0.921789861127121, 0.8978796426837066, 0.8519710335448041, 0.9230873140223065, 0.8986226564025411, 0.9468980180492945, 0.025026591006191867, 0.026727117941241163, 0.06037343343721491, 0.01995455476696384, 0.058325615533171504, 0.08407926114049136, 9.999999999998899e-05, 0.049772807793645346, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11624912549738764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00653003247614703, 0.032092115141158284, 9.999999999998899e-05, 0.0017952385795469983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017066367417273298, 0.0016330404383352315, 9.999999999998899e-05, 9.999999999998899e-05, 0.011479121438262019, 9.999999999998899e-05, 9.999999999998899e-05, 0.019588980680019796, 0.31611573132481685, 0.31667554786836705, 0.296818235506228, 0.29237710006490225, 0.2734232046146532, 0.34896590047736686, 0.28015344801584263, 0.2042086376965534, 0.28498168699700577, 0.047943253482329085, 0.05267549627010126, 0.05726289808204932, 0.06311756416713543, 0.02736868533257697, 0.051356130010696166, 0.05409627889712321, 0.06565106569619583, 0.05435960505476489, 0.12486766282852746, 0.12624935693932093, 0.12903478154634507, 0.1087901802997634, 0.13688469929287772, 0.11116351001388225, 0.12617442333255513, 0.1025267968232011, 0.10427180398046754, 0.2027973440543689, 0.18244074320973447, 0.20726763697982442, 0.19269000195628228, 0.18083834586270753, 0.22352983651865044, 0.23058611582137511, 0.25248481136752454, 0.22823322021842274, 0.10501636435538042, 0.12286563473265377, 0.11326022725788443, 0.12762531581725, 0.11382999464678523, 0.12824315546790188, 0.12054229478119383, 0.12746685090439036, 0.11223396968886168, 0.14636291464886453, 0.10728477142012749, 0.13345086981233123, 0.11984072380672717, 0.1635992980331905, 0.12151869511135371, 0.12245976138762271, 0.11760478181143286, 0.1261963614278906, 0.1738291862504182, 9.999999999998899e-05, 0.17381424702796378, 0.1244245210151439, 9.999999999998899e-05, 0.1531167631527367, 0.15915089635216173, 9.999999999998899e-05, 9.999999999998899e-05, 0.14561602314648026, 0.15655462297639156, 0.1377554544580365, 0.4294208618535058, 0.18724659724810255, 0.18837933716995048, 0.11219361451154597, 0.16812492072810203, 0.46222526551229215, 0.0726056776295183, 0.1437151132861998, 0.10188943132411443, 0.2036672770368766, 0.14457387876257888, 0.18411355257330164, 0.11342200067706998, 0.3155765251139585, 0.21837032695509173, 0.16950002754712679, 0.1916617881622994, 0.16222263322990316, 0.15508233818291284, 0.1507408161180187, 0.1635411249030232, 0.1739980922375225, 0.1772254091336285, 0.19110014197137093, 0.03691945724135948, 0.0688717032409184, 0.0378117457217928, 0.032219316499300654, 0.03848180511372701, 0.037064116586736584, 0.07195777453098329, 0.03479969424455065, 0.03087793781385939]}, "mutation_prompt": null}
{"id": "5b11b36c-d612-431d-899f-c10e4c3fc2e8", "solution": "import numpy as np\n\nclass EnhancedCooperativeOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)\n        self.inertia_weight = 0.729\n        self.cognitive_coeff = 1.49445\n        self.social_coeff = 1.49445\n        self.partition_count = 3  # Divide dimensions into partitions\n\n    def __call__(self, func):\n        eval_count = 0\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if eval_count < self.budget - self.dim:\n                partitions = np.array_split(np.arange(self.dim), self.partition_count)\n                for i in range(len(particles)):\n                    for partition in partitions:\n                        grad = np.zeros(self.dim)\n                        for d in partition:\n                            x_plus = np.copy(particles[i])\n                            x_plus[d] += 1e-5\n                            x_minus = np.copy(particles[i])\n                            x_minus[d] -= 1e-5\n\n                            grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                            eval_count += 2\n\n                        particles[i] = particles[i] - 0.01 * grad\n                        particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "EnhancedCooperativeOptimizer", "description": "A cooperative co-evolution strategy combines adaptive PSO and local search with dynamic dimension partitioning for efficient optimization.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f56a992a-71d3-4ee9-97c1-7c5cf58d4d76", "metadata": {"aucs": [0.32442578775343034, 0.3398326043868388, 0.3378082031182831, 0.31005652129067585, 0.18103077410287138, 0.314784651992264, 0.3128261619857553, 0.3224895802057215, 0.2995989907596487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04130096383414661, 0.037864655980646256, 0.044701331397819954, 0.040935382664240905, 0.04746919071623579, 0.05516255382898194, 0.0588762887819666, 0.04992324647377189, 0.07958652732195148, 0.011450556765387754, 0.04713259484936283, 0.028187336539747254, 0.05666078522846851, 0.024790913454672214, 0.028520899287462265, 0.02102675563706613, 0.045528895286075954, 0.03324495409888839, 0.9470084694455512, 0.9702300496566011, 0.9269207287256299, 0.921789861127121, 0.8978796426837066, 0.8519710335448041, 0.9230873140223065, 0.8986226564025411, 0.9468980180492945, 0.025026591006191867, 0.026727117941241163, 0.06037343343721491, 0.01995455476696384, 0.058325615533171504, 0.08407926114049136, 9.999999999998899e-05, 0.049772807793645346, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11624912549738764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00653003247614703, 0.032092115141158284, 9.999999999998899e-05, 0.0017952385795469983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017066367417273298, 0.0016330404383352315, 9.999999999998899e-05, 9.999999999998899e-05, 0.011479121438262019, 9.999999999998899e-05, 9.999999999998899e-05, 0.019588980680019796, 0.31611573132481685, 0.31667554786836705, 0.296818235506228, 0.29237710006490225, 0.2734232046146532, 0.34896590047736686, 0.28015344801584263, 0.2042086376965534, 0.28498168699700577, 0.047943253482329085, 0.05267549627010126, 0.05726289808204932, 0.06311756416713543, 0.02736868533257697, 0.051356130010696166, 0.05409627889712321, 0.06565106569619583, 0.05435960505476489, 0.12486766282852746, 0.12624935693932093, 0.12903478154634507, 0.1087901802997634, 0.13688469929287772, 0.11116351001388225, 0.12617442333255513, 0.1025267968232011, 0.10427180398046754, 0.2027973440543689, 0.18244074320973447, 0.20726763697982442, 0.19269000195628228, 0.18083834586270753, 0.22352983651865044, 0.23058611582137511, 0.25248481136752454, 0.22823322021842274, 0.10501636435538042, 0.12286563473265377, 0.11326022725788443, 0.12762531581725, 0.11382999464678523, 0.12824315546790188, 0.12054229478119383, 0.12746685090439036, 0.11223396968886168, 0.14636291464886453, 0.10728477142012749, 0.13345086981233123, 0.11984072380672717, 0.1635992980331905, 0.12151869511135371, 0.12245976138762271, 0.11760478181143286, 0.1261963614278906, 0.1738291862504182, 9.999999999998899e-05, 0.17381424702796378, 0.1244245210151439, 9.999999999998899e-05, 0.1531167631527367, 0.15915089635216173, 9.999999999998899e-05, 9.999999999998899e-05, 0.14561602314648026, 0.15655462297639156, 0.1377554544580365, 0.4294208618535058, 0.18724659724810255, 0.18837933716995048, 0.11219361451154597, 0.16812492072810203, 0.46222526551229215, 0.0726056776295183, 0.1437151132861998, 0.10188943132411443, 0.2036672770368766, 0.14457387876257888, 0.18411355257330164, 0.11342200067706998, 0.3155765251139585, 0.21837032695509173, 0.16950002754712679, 0.1916617881622994, 0.16222263322990316, 0.15508233818291284, 0.1507408161180187, 0.1635411249030232, 0.1739980922375225, 0.1772254091336285, 0.19110014197137093, 0.03691945724135948, 0.0688717032409184, 0.0378117457217928, 0.032219316499300654, 0.03848180511372701, 0.037064116586736584, 0.07195777453098329, 0.03479969424455065, 0.03087793781385939]}, "mutation_prompt": null}
{"id": "c4616c6a-7178-4e06-9cd9-290c813de709", "solution": "import numpy as np\n\nclass EnhancedCooperativeOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)\n        self.inertia_weight = 0.729\n        self.cognitive_coeff = 1.49445\n        self.social_coeff = 1.49445\n        self.partition_count = 3  # Divide dimensions into partitions\n\n    def __call__(self, func):\n        eval_count = 0\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if eval_count < self.budget - self.dim:\n                partitions = np.array_split(np.arange(self.dim), self.partition_count)\n                for i in range(len(particles)):\n                    for partition in partitions:\n                        grad = np.zeros(self.dim)\n                        for d in partition:\n                            x_plus = np.copy(particles[i])\n                            x_plus[d] += 1e-5\n                            x_minus = np.copy(particles[i])\n                            x_minus[d] -= 1e-5\n\n                            grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                            eval_count += 2\n\n                        particles[i] = particles[i] - 0.01 * grad\n                        particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "EnhancedCooperativeOptimizer", "description": "A cooperative co-evolution strategy combines adaptive PSO and local search with dynamic dimension partitioning for efficient optimization.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f56a992a-71d3-4ee9-97c1-7c5cf58d4d76", "metadata": {"aucs": [0.32442578775343034, 0.3398326043868388, 0.3378082031182831, 0.31005652129067585, 0.18103077410287138, 0.314784651992264, 0.3128261619857553, 0.3224895802057215, 0.2995989907596487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04130096383414661, 0.037864655980646256, 0.044701331397819954, 0.040935382664240905, 0.04746919071623579, 0.05516255382898194, 0.0588762887819666, 0.04992324647377189, 0.07958652732195148, 0.011450556765387754, 0.04713259484936283, 0.028187336539747254, 0.05666078522846851, 0.024790913454672214, 0.028520899287462265, 0.02102675563706613, 0.045528895286075954, 0.03324495409888839, 0.9470084694455512, 0.9702300496566011, 0.9269207287256299, 0.921789861127121, 0.8978796426837066, 0.8519710335448041, 0.9230873140223065, 0.8986226564025411, 0.9468980180492945, 0.025026591006191867, 0.026727117941241163, 0.06037343343721491, 0.01995455476696384, 0.058325615533171504, 0.08407926114049136, 9.999999999998899e-05, 0.049772807793645346, 9.999999999998899e-05, 0.23491015143448624, 0.11037851555406775, 0.14577868581493603, 0.22540255407128984, 0.17292058635273555, 0.19042349915082246, 0.14168435678572822, 0.13989986234737284, 0.11624912549738764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00653003247614703, 0.032092115141158284, 9.999999999998899e-05, 0.0017952385795469983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017066367417273298, 0.0016330404383352315, 9.999999999998899e-05, 9.999999999998899e-05, 0.011479121438262019, 9.999999999998899e-05, 9.999999999998899e-05, 0.019588980680019796, 0.31611573132481685, 0.31667554786836705, 0.296818235506228, 0.29237710006490225, 0.2734232046146532, 0.34896590047736686, 0.28015344801584263, 0.2042086376965534, 0.28498168699700577, 0.047943253482329085, 0.05267549627010126, 0.05726289808204932, 0.06311756416713543, 0.02736868533257697, 0.051356130010696166, 0.05409627889712321, 0.06565106569619583, 0.05435960505476489, 0.12486766282852746, 0.12624935693932093, 0.12903478154634507, 0.1087901802997634, 0.13688469929287772, 0.11116351001388225, 0.12617442333255513, 0.1025267968232011, 0.10427180398046754, 0.2027973440543689, 0.18244074320973447, 0.20726763697982442, 0.19269000195628228, 0.18083834586270753, 0.22352983651865044, 0.23058611582137511, 0.25248481136752454, 0.22823322021842274, 0.10501636435538042, 0.12286563473265377, 0.11326022725788443, 0.12762531581725, 0.11382999464678523, 0.12824315546790188, 0.12054229478119383, 0.12746685090439036, 0.11223396968886168, 0.14636291464886453, 0.10728477142012749, 0.13345086981233123, 0.11984072380672717, 0.1635992980331905, 0.12151869511135371, 0.12245976138762271, 0.11760478181143286, 0.1261963614278906, 0.1738291862504182, 9.999999999998899e-05, 0.17381424702796378, 0.1244245210151439, 9.999999999998899e-05, 0.1531167631527367, 0.15915089635216173, 9.999999999998899e-05, 9.999999999998899e-05, 0.14561602314648026, 0.15655462297639156, 0.1377554544580365, 0.4294208618535058, 0.18724659724810255, 0.18837933716995048, 0.11219361451154597, 0.16812492072810203, 0.46222526551229215, 0.0726056776295183, 0.1437151132861998, 0.10188943132411443, 0.2036672770368766, 0.14457387876257888, 0.18411355257330164, 0.11342200067706998, 0.3155765251139585, 0.21837032695509173, 0.16950002754712679, 0.1916617881622994, 0.16222263322990316, 0.15508233818291284, 0.1507408161180187, 0.1635411249030232, 0.1739980922375225, 0.1772254091336285, 0.19110014197137093, 0.03691945724135948, 0.0688717032409184, 0.0378117457217928, 0.032219316499300654, 0.03848180511372701, 0.037064116586736584, 0.07195777453098329, 0.03479969424455065, 0.03087793781385939]}, "mutation_prompt": null}
{"id": "98bab848-ea5b-4625-af36-544a92a82975", "solution": "import numpy as np\n\nclass RefinedCooperativeOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.partition_count = 5  # Increased partition count for finer adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if eval_count < self.budget - self.dim:\n                partitions = np.array_split(np.arange(self.dim), self.partition_count)\n                for i in range(len(particles)):\n                    for partition in partitions:\n                        grad = np.zeros(self.dim)\n                        for d in partition:\n                            x_plus = np.copy(particles[i])\n                            x_plus[d] += 1e-5\n                            x_minus = np.copy(particles[i])\n                            x_minus[d] -= 1e-5\n\n                            grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                            eval_count += 2\n                        \n                        mutation_factor = 0.8\n                        grad = grad + mutation_factor * (global_best_position - particles[i])\n                        \n                        particles[i] = particles[i] - 0.01 * grad\n                        particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "RefinedCooperativeOptimizer", "description": "An adaptive cooperative co-evolutionary optimizer that integrates a hybrid strategy of PSO, differential evolution, and gradient approximation with dynamic partition refinement for robust black-box optimization.", "configspace": "", "generation": 20, "fitness": 0.1314608989552306, "feedback": "The algorithm RefinedCooperativeOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "f56a992a-71d3-4ee9-97c1-7c5cf58d4d76", "metadata": {"aucs": [0.29110169431433164, 0.3106697659692349, 0.33514571947550253, 0.3401610940596007, 0.24290063590451294, 0.3594593713563924, 0.32183130498010737, 0.30077334345931184, 0.3197422318984975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045144175949692555, 0.0334503830580245, 0.05342442031674455, 0.057732909930390486, 0.06882815316820834, 0.038205583432661894, 0.0545147717651302, 0.06773454736344697, 0.06240531260023685, 0.02330560505335666, 0.022837649811350613, 0.032394859537720366, 0.065879568886551, 0.030267229003989593, 0.031213700653541343, 0.02212789669161197, 0.022100095673424636, 0.031482362926638974, 0.9470243082777637, 0.9702294811173665, 0.9271808948993432, 0.9217760827427838, 0.8981778950344574, 0.8521896787865095, 0.9223602876383025, 0.898781587298721, 0.9464838159736519, 0.02590185761483821, 0.02120666860689102, 0.06008220488587834, 0.021116461267732145, 0.059401417541567025, 0.05770341718375405, 0.044176362623846166, 0.0479465924741842, 9.999999999998899e-05, 0.22653208650588752, 0.11261651966610497, 0.17621167559145956, 0.23125867379335263, 0.15400156751508298, 0.15661643638451117, 0.16752395095329997, 0.11603545852902208, 0.13961104932745516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01151222368122451, 0.0287484622826929, 0.00019203896743691384, 9.999999999998899e-05, 9.999999999998899e-05, 0.011511543519510115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005436017499123036, 0.00700563981057134, 0.01882273449259375, 9.999999999998899e-05, 9.999999999998899e-05, 0.01540825607215579, 0.0032670797495849557, 0.03433721027027459, 0.012877592002752847, 0.3158656358895162, 0.2886746452796364, 0.2858803550805328, 0.2794092441604563, 0.1706658033364734, 0.28468477447433405, 0.2812109318772765, 0.2694105674614955, 0.29267499857566215, 0.06379101562463152, 0.07069961032442662, 0.07600175664155884, 0.061764702052493736, 0.03967455641451578, 0.05892570578113032, 0.03838305038796863, 0.052267916236539036, 0.05065132250527149, 0.12960462792641902, 0.12803559456686475, 0.12863225958847702, 0.11005871832342984, 0.12209848028548698, 0.13629029191482167, 0.12209303144797345, 0.11803506482976411, 0.11956766246069928, 0.22428049122226346, 0.17278914950679902, 0.22193017637577417, 0.16699882915860798, 0.18347032908103722, 0.18714584436170578, 0.22220388240123734, 0.2559063379410881, 0.20934402488165282, 0.10566878332719443, 0.10050378905443635, 0.12349529594395359, 0.11184373206763554, 0.11378410578297804, 0.10871224383121736, 0.11697784057842031, 0.13507482725256692, 0.1321140300664112, 0.14870032380301523, 0.10976511200593364, 0.15112939644598555, 0.12649326162092, 0.12281238174035747, 0.11129206732443597, 0.12245976138762271, 0.11295332976472205, 0.14797156419232216, 0.17531541017250196, 9.999999999998899e-05, 0.16957878619276012, 0.12740326039404792, 9.999999999998899e-05, 0.15269142815704217, 0.15864186643330247, 9.999999999998899e-05, 0.13762398798423325, 0.14389044012795582, 0.15882414539634448, 0.1421438636765433, 0.4828105560987883, 0.18799240773666293, 0.19144578428985726, 0.11110177594955728, 0.16975165466038977, 0.41510924811630234, 0.07211390544340635, 0.1451686802493577, 0.10136113102501809, 0.18941499045931331, 0.1495512683524437, 0.19463405863165073, 0.10156999148494927, 0.33478113635367013, 0.19305598440274174, 0.1863208941792388, 0.16831265998415712, 0.18101135560507908, 0.18242926735755494, 0.16863033958627804, 0.21255806155102697, 0.17578027783209504, 0.16997819149788906, 0.17758191551963687, 0.030287954831510255, 0.040866467539858786, 0.03772094147657712, 0.06604868302783051, 0.04623591371264679, 0.04036942578136038, 0.03609281233414108, 0.040615845717645205, 0.046164552616396404]}, "mutation_prompt": null}
{"id": "2aa94444-7320-4b9e-a9a6-db1fcb1c69c3", "solution": "import numpy as np\n\nclass EnhancedCooperativeOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)\n        self.inertia_weight = 0.8  # Increase inertia for better exploration\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient\n        self.social_coeff = 1.8  # Adjusted social coefficient\n        self.partition_count = 6  # Further increased partition count\n\n    def __call__(self, func):\n        eval_count = 0\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if eval_count < self.budget - self.dim:\n                partitions = np.array_split(np.arange(self.dim), self.partition_count)\n                for i in range(len(particles)):\n                    for partition in partitions:\n                        grad = np.zeros(self.dim)\n                        for d in partition:\n                            x_plus = np.copy(particles[i])\n                            x_plus[d] += 1e-4  # Adjusted step size\n                            x_minus = np.copy(particles[i])\n                            x_minus[d] -= 1e-4\n\n                            grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-4)\n                            eval_count += 2\n                        \n                        mutation_factor = 0.9  # Adjust mutation factor\n                        adaptive_factor = np.random.rand(self.dim)  # Add randomness for diversity\n                        grad = grad + mutation_factor * (global_best_position - particles[i]) * adaptive_factor\n                        \n                        particles[i] = particles[i] - 0.005 * grad  # Adjust learning rate\n                        particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "EnhancedCooperativeOptimizer", "description": "A hybrid metaheuristic using adaptive particle swarm and differential evolution with localized gradient search and adaptive mutation to enhance black-box optimization.", "configspace": "", "generation": 21, "fitness": 0.12520521016422784, "feedback": "The algorithm EnhancedCooperativeOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "98bab848-ea5b-4625-af36-544a92a82975", "metadata": {"aucs": [0.27254322582693635, 0.23122732640461197, 0.27980586492027426, 0.18247403582741484, 0.21780971060711096, 0.26753041710540504, 0.17032435394748313, 0.2882432143529945, 0.2633677993188245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06489739547595896, 0.06475046665224271, 0.04552838632649381, 0.05126113776696861, 0.045000601609026636, 0.05152556439265721, 0.08889378688062677, 0.07395870293905171, 0.07956855428852161, 0.03165813183223254, 0.04017155804121597, 0.028007002088799582, 0.03946883199888285, 0.030425401010344078, 0.03272909233840804, 0.047039761725517715, 0.023709052522104535, 0.02788167470817826, 0.9713540522149253, 0.9724887764904773, 0.9474295628992229, 0.9224992561511515, 0.9235194758436333, 0.9013105364344567, 0.9260331118664977, 0.946277234461474, 0.9472206299885945, 0.028588439943067923, 0.04045293036631681, 0.062420200246293245, 0.03580992112795078, 0.016238593740804053, 0.03451631874951022, 0.03510911679596174, 0.08662212133654246, 0.02499375315254182, 0.16573961857980124, 0.17087001305919325, 0.1307071667354387, 0.16153504188890166, 0.23630802545147833, 0.1563019626365989, 0.18105790597931304, 0.10640380218472223, 0.1323692930413115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0051704884194058165, 9.999999999998899e-05, 0.003352876014148798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006348719269673175, 0.006141771292294429, 0.0002026884907434523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03259669422452316, 0.020889178014904974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015726876736484652, 0.01627944331817055, 0.03009975709686441, 9.999999999998899e-05, 9.999999999998899e-05, 0.0235014839894373, 0.03654172411175127, 0.021230710316332946, 0.00516237119063534, 0.242558145232598, 0.22694613317289436, 0.23901671985484185, 0.2940222819026357, 0.235388608215361, 0.2514137179821304, 0.24600719553983885, 0.2136388639808009, 0.24651683847978523, 0.0550113149726027, 0.045847770815276245, 0.049438334166552855, 0.07320280667996082, 0.04573422091113277, 0.07196693281954158, 0.06108974084330765, 0.06663382179362165, 0.0709440365255477, 0.10906204905544747, 0.11000381553844674, 0.12029123409754461, 0.1428538966145403, 0.13785186843690667, 0.1177709053623599, 0.13818501857532606, 0.1424693454570779, 0.11226646989414912, 0.15637569817663155, 0.1466168888725693, 0.21475246086948074, 0.15779044901354877, 0.17736683880312498, 0.18584348160602937, 0.20059231283408518, 0.23119563667086973, 0.18058228622526806, 0.1630882806582864, 0.11274674358924819, 0.13637654289031065, 0.12017204385299551, 0.09918884108252501, 0.10694858843480137, 0.1598796090406175, 0.15443408405471437, 0.11988758972677238, 0.11544551312130857, 0.12401827045906244, 0.13345086981233123, 0.13368889567423925, 0.12153129568836807, 0.11321364222004027, 0.1494185589369077, 0.13155115292113073, 0.157210788733536, 0.14464867102725398, 9.999999999998899e-05, 0.13946401958314258, 0.1368521996535279, 9.999999999998899e-05, 9.999999999998899e-05, 0.13383656312743897, 9.999999999998899e-05, 0.13668931604500156, 0.14315897837410563, 0.11603148993580947, 0.12440064093820113, 0.34277813800804635, 0.1738531697086455, 0.2019562755539911, 0.09615165178928642, 0.16495066268459702, 0.17955189282990636, 0.11643391363616706, 0.14688207044378687, 0.09683901795575489, 0.17631723748872263, 0.15785926073389533, 0.1656878327834549, 0.18956117303488196, 0.1948110031217839, 0.16414078033697055, 0.16132752181671972, 0.17545809535947354, 0.17581213598921863, 0.16692258352039824, 0.1804056379547827, 0.17837908292075166, 0.18001253932050953, 0.19495125541657277, 0.17800995849877654, 0.04450632501800633, 0.032471364412432924, 0.06183364538784064, 0.03892876267641643, 0.04213844962952629, 0.060362290830382026, 0.047348876800472284, 0.037833369332256894, 0.04274539614543915]}, "mutation_prompt": null}
{"id": "71063144-3f34-4297-9a2c-05f853c320fa", "solution": "import numpy as np\n\nclass RefinedCooperativeOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.partition_count = 5  # Increased partition count for finer adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if eval_count < self.budget - self.dim:\n                partitions = np.array_split(np.arange(self.dim), self.partition_count)\n                for i in range(len(particles)):\n                    for partition in partitions:\n                        grad = np.zeros(self.dim)\n                        for d in partition:\n                            x_plus = np.copy(particles[i])\n                            x_plus[d] += 1e-5\n                            x_minus = np.copy(particles[i])\n                            x_minus[d] -= 1e-5\n\n                            grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                            eval_count += 2\n                        \n                        mutation_factor = 0.8\n                        grad = grad + mutation_factor * (global_best_position - particles[i])\n                        \n                        particles[i] = particles[i] - 0.01 * grad\n                        particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "RefinedCooperativeOptimizer", "description": "An adaptive cooperative co-evolutionary optimizer that integrates a hybrid strategy of PSO, differential evolution, and gradient approximation with dynamic partition refinement for robust black-box optimization.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "98bab848-ea5b-4625-af36-544a92a82975", "metadata": {"aucs": [0.29110169431433164, 0.3106697659692349, 0.33514571947550253, 0.3401610940596007, 0.24290063590451294, 0.3594593713563924, 0.32183130498010737, 0.30077334345931184, 0.3197422318984975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045144175949692555, 0.0334503830580245, 0.05342442031674455, 0.057732909930390486, 0.06882815316820834, 0.038205583432661894, 0.0545147717651302, 0.06773454736344697, 0.06240531260023685, 0.02330560505335666, 0.022837649811350613, 0.032394859537720366, 0.065879568886551, 0.030267229003989593, 0.031213700653541343, 0.02212789669161197, 0.022100095673424636, 0.031482362926638974, 0.9470243082777637, 0.9702294811173665, 0.9271808948993432, 0.9217760827427838, 0.8981778950344574, 0.8521896787865095, 0.9223602876383025, 0.898781587298721, 0.9464838159736519, 0.02590185761483821, 0.02120666860689102, 0.06008220488587834, 0.021116461267732145, 0.059401417541567025, 0.05770341718375405, 0.044176362623846166, 0.0479465924741842, 9.999999999998899e-05, 0.22653208650588752, 0.11261651966610497, 0.17621167559145956, 0.23125867379335263, 0.15400156751508298, 0.15661643638451117, 0.16752395095329997, 0.11603545852902208, 0.13961104932745516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01151222368122451, 0.0287484622826929, 0.00019203896743691384, 9.999999999998899e-05, 9.999999999998899e-05, 0.011511543519510115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005436017499123036, 0.00700563981057134, 0.01882273449259375, 9.999999999998899e-05, 9.999999999998899e-05, 0.01540825607215579, 0.0032670797495849557, 0.03433721027027459, 0.012877592002752847, 0.3158656358895162, 0.2886746452796364, 0.2858803550805328, 0.2794092441604563, 0.1706658033364734, 0.28468477447433405, 0.2812109318772765, 0.2694105674614955, 0.29267499857566215, 0.06379101562463152, 0.07069961032442662, 0.07600175664155884, 0.061764702052493736, 0.03967455641451578, 0.05892570578113032, 0.03838305038796863, 0.052267916236539036, 0.05065132250527149, 0.12960462792641902, 0.12803559456686475, 0.12863225958847702, 0.11005871832342984, 0.12209848028548698, 0.13629029191482167, 0.12209303144797345, 0.11803506482976411, 0.11956766246069928, 0.22428049122226346, 0.17278914950679902, 0.22193017637577417, 0.16699882915860798, 0.18347032908103722, 0.18714584436170578, 0.22220388240123734, 0.2559063379410881, 0.20934402488165282, 0.10566878332719443, 0.10050378905443635, 0.12349529594395359, 0.11184373206763554, 0.11378410578297804, 0.10871224383121736, 0.11697784057842031, 0.13507482725256692, 0.1321140300664112, 0.14870032380301523, 0.10976511200593364, 0.15112939644598555, 0.12649326162092, 0.12281238174035747, 0.11129206732443597, 0.12245976138762271, 0.11295332976472205, 0.14797156419232216, 0.17531541017250196, 9.999999999998899e-05, 0.16957878619276012, 0.12740326039404792, 9.999999999998899e-05, 0.15269142815704217, 0.15864186643330247, 9.999999999998899e-05, 0.13762398798423325, 0.14389044012795582, 0.15882414539634448, 0.1421438636765433, 0.4828105560987883, 0.18799240773666293, 0.19144578428985726, 0.11110177594955728, 0.16975165466038977, 0.41510924811630234, 0.07211390544340635, 0.1451686802493577, 0.10136113102501809, 0.18941499045931331, 0.1495512683524437, 0.19463405863165073, 0.10156999148494927, 0.33478113635367013, 0.19305598440274174, 0.1863208941792388, 0.16831265998415712, 0.18101135560507908, 0.18242926735755494, 0.16863033958627804, 0.21255806155102697, 0.17578027783209504, 0.16997819149788906, 0.17758191551963687, 0.030287954831510255, 0.040866467539858786, 0.03772094147657712, 0.06604868302783051, 0.04623591371264679, 0.04036942578136038, 0.03609281233414108, 0.040615845717645205, 0.046164552616396404]}, "mutation_prompt": null}
{"id": "073eb42a-715a-4eec-9fbc-a78bb4bb6c63", "solution": "import numpy as np\n\nclass EnhancedCooperativeOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 5)\n        self.inertia_weight = 0.6  # Adjusted inertia weight for better exploration-exploitation balance\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.7  # Increased social coefficient for stronger global influence\n        self.adaptive_lr = 0.02  # Adaptive learning rate initialization\n        self.partition_count = 7  # Increased partition count for finer adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while eval_count < self.budget:\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if eval_count < self.budget - self.dim:\n                partitions = np.array_split(np.arange(self.dim), self.partition_count)\n                for i in range(len(particles)):\n                    for partition in partitions:\n                        grad = np.zeros(self.dim)\n                        for d in partition:\n                            x_plus = np.copy(particles[i])\n                            x_plus[d] += 1e-5\n                            x_minus = np.copy(particles[i])\n                            x_minus[d] -= 1e-5\n\n                            grad[d] = (func(x_plus) - func(x_minus)) / (2 * 1e-5)\n                            eval_count += 2\n                        \n                        # Adaptive learning rate based on distance to global best\n                        distance_to_best = np.linalg.norm(global_best_position - particles[i])\n                        adaptive_step = self.adaptive_lr / (1 + distance_to_best)\n\n                        grad = grad + 0.5 * (global_best_position - particles[i])\n                        particles[i] = particles[i] - adaptive_step * grad\n                        particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "EnhancedCooperativeOptimizer", "description": "An enhanced co-evolutionary optimizer integrating an adaptive learning rate strategy and multi-modal attraction points for improved black-box optimization performance.", "configspace": "", "generation": 23, "fitness": 0.13918128344695252, "feedback": "The algorithm EnhancedCooperativeOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "98bab848-ea5b-4625-af36-544a92a82975", "metadata": {"aucs": [0.3488584786336183, 0.3442322178642724, 0.3573553886642682, 0.18617300324439634, 0.38311627831287753, 0.37312029806557234, 0.3499157540053097, 0.3512527378635202, 0.3300031599231885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325817950097158, 0.07278346240471278, 0.062451993830832775, 0.051155029472146785, 0.075026456357287, 0.08639986232159558, 0.08479444254259594, 0.06639636817151728, 0.09471608365924844, 0.049375003123071304, 0.03563790975518588, 0.04619606658677822, 0.055471988690501184, 0.04515568163758654, 0.03213849667306001, 0.032454319383387165, 0.043746252616739034, 0.05096841800888452, 0.9485901030583596, 0.9703750668752803, 0.9273610880523633, 0.9019893244578806, 0.899983846139628, 0.8546178027473961, 0.8738097201823412, 0.9236783939490417, 0.946606525682599, 0.07273424866064782, 0.048592502285450756, 0.062429082655700796, 0.058006198809345544, 0.06316266048244057, 0.05872286859498399, 0.03537122427299777, 0.062040458079423155, 0.02103455029069845, 0.19839115796842288, 0.1267105157342987, 0.2109726768941288, 0.2160137866533529, 0.19527669218879384, 0.17155877530074592, 0.14682541807787386, 0.15041084962125884, 0.11949720351925186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006676593465936631, 9.999999999998899e-05, 0.03895757494283936, 0.040705968257533254, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022780340592846948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0075555888656768655, 0.018388851734222444, 0.03362836147577941, 9.999999999998899e-05, 0.015688943258010846, 0.028834494993986715, 0.010471914058524656, 0.029785641903622873, 0.01863041630249551, 0.34357612180179486, 0.36436719977607934, 0.32189674278398284, 0.3731363166807592, 0.3042780141819107, 0.20375488707581857, 0.3143234215098907, 0.27556969220345595, 0.3623407455299752, 0.05326809649608499, 0.05908143467270488, 0.05179296038744574, 0.06943432184818643, 0.05516854255518955, 0.07855753013136602, 0.051944110125751286, 0.05359574722756133, 0.06141155197240822, 0.10016975139757434, 0.12426100759217062, 0.1189847477533631, 0.13362929043283234, 0.12808596165354535, 0.10581772238240761, 0.1328791845363697, 0.1111645907308475, 0.13275790112875763, 0.16875855232753634, 0.20666674774956761, 0.23315035387733907, 0.17697869472723848, 0.1846681116764034, 0.26211865481220564, 0.2437747716466171, 0.24778987185272705, 0.25238723768518057, 0.15073136714251645, 0.14999727260774054, 0.14854708408309214, 0.11089266671067766, 0.12064478244861898, 0.14339927479441283, 0.1469471456252066, 0.1504557211070371, 0.14355150940814387, 0.11740667668479021, 0.1058608662488727, 0.13345086981233123, 0.12701663604819935, 0.1200708681357302, 0.12001664687881841, 0.14082888579180652, 0.11154526192328917, 0.1261963614278906, 0.1457793621249419, 9.999999999998899e-05, 0.16712130239904177, 0.1531684671061042, 0.06611327923361188, 9.999999999998899e-05, 0.15582211007836577, 9.999999999998899e-05, 0.13290432521268192, 0.44197216739815304, 0.12156773318024883, 0.12977463772372122, 0.41788623967217264, 0.18828796222906619, 0.18904237217331898, 0.09510000050770717, 0.1691334507833221, 0.20637605441967788, 0.2724916408490906, 0.1454019417007385, 0.09800234950129305, 0.20791718698830763, 0.15780242183607118, 0.19581255670692732, 0.20883021769287946, 0.2934561769120597, 0.24086518428660864, 0.1628536013492905, 0.17327048337249074, 0.18308504261674408, 0.17039114742390082, 0.17583155435356712, 0.16031585591186703, 0.18692512066364653, 0.1645818938101773, 0.17044434107309758, 0.056114130266833095, 0.05298137707730022, 0.05528307814676359, 0.0479294560804594, 0.04840660906180072, 0.0527052453667195, 0.05646807019909317, 0.04488257492930514, 0.04653725192104452]}, "mutation_prompt": null}
{"id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 24, "fitness": 0.2575874517735007, "feedback": "The algorithm EnhancedAdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "073eb42a-715a-4eec-9fbc-a78bb4bb6c63", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "ee75e27e-372e-44c5-b4bb-4f827d8ac854", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "d9fb7808-eacb-48bb-b1fa-0bbdd761094b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.3  # Slightly increased cognitive coefficient\n        self.social_coeff = 1.7  # Slightly decreased social coefficient\n        self.local_search_prob = 0.15  # Increased local search probability\n        self.eval_count = 0\n        self.mutation_prob = 0.2  # New mutation probability\n        self.mutation_step_size = 0.1  # Step size for mutation\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Mutation step\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_prob\n            mutations = np.random.normal(0, self.mutation_step_size, (self.population_size, self.dim))\n            particles += mutation_mask * mutations\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "A hybrid optimizer merging adaptive particle swarm optimization with a stochastic hill-climbing mutation for enhanced exploration and exploitation balance.", "configspace": "", "generation": 26, "fitness": 0.223101925357904, "feedback": "The algorithm EnhancedAdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.4662156711482749, 0.4581516244303496, 0.4842093549282297, 0.4917036862794647, 0.4614664788066186, 0.4668666576002938, 0.450614159614372, 0.45988235489811646, 0.4588309541671989, 0.11563123474351722, 0.12377260121715117, 0.0721853539022953, 0.03246321175034994, 0.02951262544182609, 0.060284233240383234, 0.0979517248394921, 0.0862518118540635, 0.06937893503211467, 0.13057019556960692, 0.11892792265984553, 0.10172806669679135, 0.12790396958019956, 0.06705922403084785, 0.06853415734036294, 0.12393920229266531, 0.13950678496479396, 0.1454500669139065, 0.1041865211415588, 0.08060599774631827, 0.10091920640807728, 0.10304255454769295, 0.09752444758155321, 0.11257225203025578, 0.11276307301503408, 0.10265253657746276, 0.11536354192100429, 0.9925445951441884, 0.9904132150688364, 0.9813744063711876, 0.9467506369308123, 0.989849558069281, 0.9777230713162048, 0.9902864541084442, 0.9900515627217107, 0.9871271871218774, 0.2766201346705883, 0.2737939566951514, 0.28365798480659155, 0.2839217829322983, 0.2856568075929683, 0.3245280743082072, 0.28172287049381295, 0.2878534784486678, 0.27466492625338723, 0.21637674315866484, 0.6497136647721709, 0.20476247720418295, 0.25244817317055224, 0.22175678683371536, 0.2537914608476015, 0.3528669182052777, 0.15675775627276434, 0.36540919299774977, 0.09054115731044221, 0.1477572784839234, 0.15451696557680683, 0.09899322089058482, 0.1485602837954101, 0.14458543784944777, 0.14729327244554913, 0.12703778184021686, 0.18745688416772344, 0.14982529262632616, 0.15197814399154008, 0.16580051523018757, 0.10885258616634474, 0.14186713310717536, 0.18247004885938312, 0.08012949036768569, 9.999999999998899e-05, 0.19232230172427245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012287018863625043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026484902523997378, 0.07017445012941625, 0.05084166884437891, 0.1300287076802299, 0.0658044355340236, 0.11945579855531085, 0.014779691938266337, 0.12934218788244567, 0.05962880738438869, 0.05756044452317888, 0.013982189335933981, 9.999999999998899e-05, 0.002140562693880965, 9.999999999998899e-05, 0.014592184251857598, 0.012156446856097736, 0.008443959438572901, 0.00014504363323575298, 0.0002061499412571166, 0.0736011832933744, 0.03936098781561981, 0.03749035401745093, 0.03405781771864003, 0.03007815993419205, 0.052938114707139494, 0.07152212158808924, 0.08008740480557697, 0.09311250176584196, 0.40588238611451144, 0.399221687387738, 0.4277661708469347, 0.40935658203008063, 0.4090144821895012, 0.40399614901068537, 0.42381926134630343, 0.4304177058109041, 0.41548972413924834, 0.0728300132902383, 0.06059905693395162, 0.08091610966436746, 0.0857804999863172, 0.11462241636479265, 0.10613824584074139, 0.07777377965018695, 0.16039586912991888, 0.08495390841688788, 0.21755776875464194, 0.17507590432151354, 0.2770530377500159, 0.23357420544622232, 0.22504167124376806, 0.22308922929699215, 0.12640272706212896, 0.2670555882399064, 0.18778886659288663, 0.29997279192661164, 0.23022373999988854, 0.2977039252342002, 0.2583972480701624, 0.1719760033824237, 0.2952202776716648, 0.3002047369882662, 0.29982144659909504, 0.25546714006268734, 0.15178618852228243, 0.16356188093040636, 0.22264725955429876, 0.23400454673265125, 0.18061118312613056, 0.229317747902551, 0.2503992967708015, 0.21841968182115445, 0.21349216533701976, 0.2020569525074517, 0.18540372436184493, 0.18009603076030922, 0.20007328128571245, 0.1519840878677633, 0.1971730075571605, 0.18669059693808776, 0.2051708685595207, 0.22812259115038813, 0.25674883662783876, 0.20067983969163472, 0.23127946609507, 0.3024876496875869, 0.20605757242226952, 0.1780259506951285, 0.20127305940773, 0.22917204116572354, 0.19636393286996556, 0.6891579010339527, 0.16798491501546609, 0.1641635889042644, 0.6498599454749867, 0.6585594648609419, 0.19245458777235924, 0.1691955459048089, 0.16954168668896308, 0.7049448426224811, 0.48272531074014535, 0.20749785490298034, 0.6253629638731957, 0.2011349363472873, 0.44390018899273553, 0.20729200083458432, 0.20955759906034888, 0.20754221005007312, 0.45773931361048736, 0.18937359408377819, 0.1810820942083442, 0.18819614270146778, 0.1924964724977084, 0.1786148601046138, 0.1962362454587625, 0.1805017657808059, 0.19394990539370527, 0.19271479930899904, 0.09270578339268964, 0.06909945534849937, 0.08871185649857105, 0.0815888549246363, 0.07911128321857408, 0.07607735044886199, 0.07837903585594541, 0.07726705767466524, 0.07925730505367423]}, "mutation_prompt": null}
{"id": "296f2c13-db03-4874-8e7e-67c8eff2fc29", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "0901c118-556c-47db-9890-3bcd266cab42", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "fb513e24-4815-4ab8-ae23-0be79b85a821", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "ffed1df6-a4ec-4c98-b8d2-359b60a52fad", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "fe29c9c6-398c-402f-8ffd-a7a9aeac5982", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "abba860b-b04e-4c35-996a-28251a85690e", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.3  # More dynamic range for inertia\n        self.cognitive_coeff = 1.5  # Increasing focus on exploration\n        self.social_coeff = 1.7  # Slight reduction for balance\n        self.local_search_prob = 0.15  # Higher probability for local exploitation\n        self.dynamic_learning_rate = 0.1  # Initial dynamic learning rate\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            dynamic_lr = self.dynamic_learning_rate * (1 - phase)  # Decrease over time\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * phase)\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += dynamic_lr * velocities  # Multiply by dynamic learning rate\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor_step = np.random.normal(0, 0.5, self.dim)  # Gaussian step for local search\n                    neighbor = np.clip(particles[i] + neighbor_step, self.lower_bound, self.upper_bound)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "HybridSwarmOptimizer", "description": "A hybrid swarm optimizer integrating dynamic learning rates and multi-phase diversity management for enhanced exploration and convergence.", "configspace": "", "generation": 32, "fitness": 0.24512315226786785, "feedback": "The algorithm HybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.837713912481053, 0.8421420442790643, 0.8371554787591062, 0.8244100981228295, 0.7922338374949388, 0.8082558750185567, 0.7296991083551451, 0.834498673242787, 0.826829230268756, 0.04769489417754613, 0.0025150058623713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08606736024974504, 0.08779232918990842, 0.10782599258616632, 0.11645860054839108, 0.11282126153232297, 0.10135921721531027, 0.08267704439728041, 0.15838096528256296, 0.11366820628728824, 0.10329884434619818, 0.13812086710246307, 0.07002333073821942, 0.10233292445767961, 0.08378143275918104, 0.07226654872642124, 0.0678936324380145, 0.10846721283695038, 0.09117997287778179, 0.9416512193354415, 0.970142874668517, 0.9545160339396299, 0.8675988308924413, 0.9300572589185978, 0.8637165166695681, 0.928476114194385, 0.9300193006347948, 0.9617584220058456, 0.21846548224993778, 0.36720602262383695, 0.16358211270037004, 0.22268087195694408, 0.27934274035501805, 0.376640706577428, 0.27433845723806216, 0.2085238061115504, 0.35240040574127596, 0.337573703935905, 0.16370106186363642, 0.14118594422107267, 0.21815532974163687, 0.2053584812742948, 0.2067111440030699, 0.15788504077463983, 0.22359087739796069, 0.22034533502149356, 0.17639451896346203, 0.18217969850183313, 0.14306857850649835, 0.12884330774078046, 0.1782582549992765, 0.1682028291909894, 0.15495929444990164, 0.3010388989113465, 0.1425523543281988, 0.13962883938842574, 0.12634255538281136, 0.19628340628430396, 0.12999871748577385, 0.14601718134538044, 0.13391816174995308, 0.15275327803300132, 0.1855457090407262, 0.10524925728605339, 0.010731186311597196, 9.999999999998899e-05, 9.999999999998899e-05, 0.008801963285645753, 9.999999999998899e-05, 0.028393914112965435, 0.07003489234836946, 9.999999999998899e-05, 0.08080463037705898, 0.11166357817691774, 0.07637540941432786, 0.14705126449216155, 0.0708200565327668, 0.01725502637086429, 0.03725244050379284, 0.09670746823308796, 0.08025834693819855, 0.04175788581691431, 0.07601368421762122, 0.24370245529808066, 0.2310565653948834, 0.13049862120500844, 0.12099676769118195, 0.10316176871380212, 0.10391710522541797, 0.1709085332235336, 0.11262549248186748, 0.1951608700978693, 0.1272713901629695, 0.16863594030722473, 0.022803343504196327, 0.033516578275056386, 0.3815598456947533, 0.20773542302313308, 0.11095557621810437, 0.26248034706442636, 0.41222882728397303, 0.5193401772217332, 0.4886694991038901, 0.45308521393343226, 0.43747124977477825, 0.44119131185872007, 0.45149793623268164, 0.46436376660300693, 0.4990279551481527, 0.10802987813065423, 0.12724365714148766, 0.06391357270122355, 0.11403167173160367, 0.09108455605532073, 0.10747098645277586, 0.08158464747805261, 0.4262069609092194, 0.10855485219116945, 0.17134620372918485, 0.1668703953762244, 0.20364301296922882, 0.254820338859609, 0.2716211053975911, 0.1722944538838863, 0.19668751025422027, 0.2623595530697872, 0.2608394690894974, 0.21585623332716775, 0.30768797105917844, 0.3749417750514983, 0.37402012261095186, 0.38518995502765385, 0.262678766026334, 0.2568427148171105, 0.3088951202705156, 0.39911341741368656, 0.16812111510801864, 0.2643855616159033, 0.21966733995340826, 0.2308139168535176, 0.19447120460759282, 0.24484787044665168, 0.21262083263236187, 0.26337781438928476, 0.21691741044921153, 0.21692505408523788, 0.19728008137933972, 0.22884689074055098, 0.22714274159166603, 0.20391049831251395, 0.2431187680555026, 0.24629749566105297, 0.22150492703234936, 0.23529464000816402, 0.1878567874113528, 0.19537584167161015, 0.18640964751511557, 0.19022433067712086, 0.19637186043138932, 0.2209423408104222, 0.18935002622902153, 0.1868884277990177, 0.20583805817589218, 0.18541800318996604, 0.1760736098429485, 0.15322109025684894, 0.8865931496332473, 0.2006207548994664, 0.8057640276339144, 0.14215371774728114, 0.16855979562125412, 0.1677778849594006, 0.42471440681655037, 0.15577979322395308, 0.4641593773986654, 0.36681860835706703, 0.1672524905067283, 0.5533908754662138, 0.2407218526001399, 0.29727827572801957, 0.3011102449810277, 0.22496929440710156, 0.19996158791273522, 0.20205400576499766, 0.17844054495996375, 0.1796588798768597, 0.19991008817057854, 0.18653152182631816, 0.20023407612300714, 0.18086628313572872, 0.07481694932867722, 0.08040262307287815, 0.1302864063816811, 0.11518009493904324, 0.09951213214344257, 0.09601052874278115, 0.08072635563775388, 0.07879496060692859, 0.09889906715390939]}, "mutation_prompt": null}
{"id": "f7bf7dc8-e277-4e63-a321-92ba48bf06d7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "62816256-cf84-4b76-a7c0-75016e3df475", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "588ee42a-04ca-4a48-a6b4-260347231d36", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "c2c0a8e8-e862-4698-9d20-0a0b29f0910a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "f52db5f6-e4f1-4aa1-8233-5c2ddbc5a38e", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 6)  # Slightly reduced population size for efficiency\n        self.inertia_weight_max = 0.8\n        self.inertia_weight_min = 0.3\n        self.cognitive_coeff = 1.1  # Balanced cognitive coefficient\n        self.social_coeff = 2.0  # Strengthened social coefficient for cohesion\n        self.local_search_prob = 0.2  # Increased probability for local search\n        self.eval_count = 0\n        self.alpha = 0.5  # New parameter for quantum superposition influence\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        phase = np.random.uniform(0, 2 * np.pi, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            phase = (phase + self.alpha * velocities) % (2 * np.pi)\n            particles = self.lower_bound + (self.upper_bound - self.lower_bound) * (1 + np.sin(phase)) / 2\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "QuantumInspiredAdaptiveSwarmOptimizer", "description": "Quantum-Inspired Adaptive Swarm Optimizer leverages quantum-inspired superposition and adaptive strategies for more effective exploration and convergence.", "configspace": "", "generation": 37, "fitness": 0.08591007700102483, "feedback": "The algorithm QuantumInspiredAdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.16431053751421298, 0.18017517868169708, 0.1735952277536471, 0.1776400524857238, 0.17534775952033155, 0.16055716674277576, 0.1571971710124429, 0.20525972306962836, 0.20180736585775816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03364260760048654, 0.0384008197679947, 0.048625033772422666, 0.04979164553307924, 0.04554495414259163, 0.04641060409512843, 0.05131325134469211, 0.039369648505860666, 0.046170270714491424, 0.026824895102777413, 0.016793407122458803, 0.024152463072829256, 0.029458123235554412, 0.044513578033688495, 0.028501958588944, 0.02548909379436759, 0.03131674073003976, 0.028908826174049107, 0.12942983717836232, 0.10838860431794983, 0.16086696481915208, 0.11274364472829179, 0.1345967037309792, 0.1191497498544799, 0.1360629279565857, 0.1321154305833785, 0.11516111305922894, 0.05701219373223032, 0.05135705641909738, 0.08890670101762121, 0.08715890905163848, 0.059838392142655183, 0.036110188768225804, 0.06438751597293135, 0.07853264064542631, 0.07192814891115917, 0.11158698611498041, 0.10802344406773468, 0.09404137601136642, 0.11279147497669728, 0.09763911725200303, 0.09956711396512996, 0.12192393862864848, 0.11787787653964499, 0.13406634582935972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013071016878835495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005092511611048622, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04830419676250475, 0.03179211812547367, 0.05850471445256722, 0.04228889563544502, 0.026811068005528793, 0.02627740868420969, 0.03817688601197056, 0.03675359497020525, 0.023836478001172168, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008069525909422337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18203580662311059, 0.17705792430731349, 0.19479514938453224, 0.17527834727518188, 0.19716876098926572, 0.16939630492793933, 0.18498174210152174, 0.15643872441690965, 0.17285254895587387, 0.04735433882329232, 0.038296850958936424, 0.042873556909958865, 0.0448874790075906, 0.03831256635176272, 0.038469703794331345, 0.040586993046752506, 0.04441708929251331, 0.04915102138083782, 0.15014257848505186, 0.14015449510638123, 0.13913272244869734, 0.12532644976423668, 0.13845240318245855, 0.20923362419811975, 0.14667351045331034, 0.13373606178967945, 0.15654625665775146, 0.173817524194102, 0.15389713673053373, 0.1510502568282529, 0.14737848178021118, 0.14169642496107115, 0.15287840083432913, 0.1717098857886562, 0.17377774300845283, 0.16322271346435446, 0.09774147976889724, 0.10149803556196602, 0.09747453057544064, 0.09702787164833748, 0.09933748387915042, 0.09981716392494688, 0.1098851714360557, 0.10888578670260829, 0.09459255441861736, 0.15000343574571162, 0.14252267391202245, 0.15403148926593024, 0.1382950657687566, 0.13501598556575534, 0.18067803688118744, 0.16417385303252563, 0.1493093258026258, 0.16390120572165456, 0.10730633857233207, 0.11624879493376139, 0.1322849843803986, 0.12349909236088064, 0.10309860174349472, 0.1483895362451516, 0.11530415817251649, 0.13425469040555615, 0.1139096066232107, 0.16803086297141068, 0.15611157863359038, 0.18069679443714126, 0.15304558913221067, 0.13758242442092627, 0.16397587941116343, 0.16603203567521618, 0.14336934181683048, 0.17195620690334912, 0.15090287206746367, 0.1637787130057632, 0.16413393186898773, 0.1524279903717647, 0.14815508111663078, 0.15621161895686508, 0.16399051247870244, 0.16015240568292943, 0.15460873408663334, 0.19073665753160451, 0.20279628080710088, 0.17518855013912593, 0.19333337744345036, 0.17654254265851255, 0.2084556949308638, 0.18462547557476838, 0.1918154698647594, 0.22204658530461496, 0.05243340996428347, 0.04657524644097211, 0.051047978010438366, 0.054796439925365314, 0.04121190956292253, 0.051789979858803736, 0.0475095310412611, 0.04676787735770327, 0.06561160620145057]}, "mutation_prompt": null}
{"id": "379832bd-49cd-4d6f-984b-8a3e523bd384", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "cf4f0917-edc9-45df-9382-22abb4696b12", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "5da1f75e-ad18-41ed-8678-17cea395970c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "6a00e532-6aac-4468-a112-c3ef43a87175", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "1924b081-7db3-47d9-a363-2a6e2b3857f1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)  # Increased population for diversity\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.2  # Adjusted cognitive coefficient for exploration\n        self.social_coeff = 1.8  # Enhanced social coefficient for stronger convergence\n        self.local_search_prob = 0.1  # Probability for local search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(len(particles)):\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedAdaptiveSwarmOptimizer", "description": "An adaptive particle swarm optimizer enhanced with local search intensification and adaptive neighborhood strategies for robust black-box function optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7497679570380114, 0.7173359215548015, 0.6996430631666399, 0.182672752937861, 0.7304450579358235, 0.729545384025851, 0.7336619082248224, 0.7018020638142632, 0.181781784167372, 0.49721136457097004, 9.999999999998899e-05, 0.4119668189596003, 0.03542683308956107, 0.03515775876307348, 0.43093025893865866, 0.044195387083883375, 0.042340692147614045, 0.48887237846352305, 0.13181731443915357, 0.13437863404788875, 0.12773039624178018, 0.40269335488022817, 0.06925778062544619, 0.5189487377109343, 0.5946188676685658, 0.38744797758864824, 0.1540801690517195, 0.11932881596192224, 0.08535626766659721, 0.12875258222257713, 0.13248296177758456, 0.11537105048127183, 0.087795599155566, 0.10897764741700089, 0.14206390279079073, 0.1101211158206512, 0.9872837580488704, 0.9903019755458301, 0.9860931737537907, 0.9748915016335509, 0.9904381232120388, 0.9702867990428514, 0.9877168996545986, 0.9900575732293448, 0.9861652478155468, 0.5204585360597928, 0.1801211309099866, 0.5173713764322722, 0.1443995728374784, 0.14901397633049096, 0.15147959320681514, 0.08734157977877699, 0.5189562881900994, 0.08744328970903459, 0.21746497581090507, 0.598847292547196, 0.6399842464748156, 0.21433013495590625, 0.11739832877722911, 0.1891260619282612, 0.207951715230553, 0.12189419918326516, 0.7128698721751796, 0.19160476771579127, 0.1701389650043328, 0.18883304260078215, 0.11414581280063407, 0.18516665484010408, 0.09398226389001285, 0.17295217119016126, 0.08977661814754301, 0.18070290316482673, 0.18618650222064392, 0.17733380763176443, 0.18330856822998132, 0.12563636684935575, 0.12988963993165892, 0.1734448504726408, 0.13220412682247984, 0.030417631439528803, 0.207483224208036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008153034415711358, 9.999999999998899e-05, 9.999999999998899e-05, 0.015968490226041854, 0.04270342134188121, 0.04920035550852386, 0.052295422573777395, 0.11326748743149984, 0.015456998504206787, 0.042947508171633286, 0.06444392540185095, 0.0361122271376938, 0.07836243794451825, 0.02658915796125183, 9.999999999998899e-05, 0.02723442787825403, 0.17140249514609152, 0.060145006074197815, 0.1607834736456094, 0.1281637591000464, 0.07571831015552488, 0.05310255498485095, 0.10454382842180021, 0.03822529428219423, 0.037626045548281084, 0.005554648662983497, 0.005679566461304075, 0.005839346776055354, 0.07451170388020067, 0.07244479644407675, 0.07484313057064407, 0.4626915981769558, 0.4508291796973273, 0.5045715345880788, 0.4846857726147943, 0.5120127429265233, 0.4890716741329224, 0.5164431292477849, 0.46865322449249247, 0.4952781737256463, 0.11015864538901965, 0.07554442682832874, 0.08529242150834904, 0.159960586870446, 0.09691776230418381, 0.10033878390905171, 0.05926403943149505, 0.08345109001919959, 0.10295166825847046, 0.2130146897851548, 0.19873285554682496, 0.21374868293603377, 0.16709237432364754, 0.17041482773943806, 0.18494078147730086, 0.19039296557498864, 0.18033611163422902, 0.2880604084673377, 0.2293629942840123, 0.2354230270436447, 0.2993217815989073, 0.17724643854385758, 0.31103462080085365, 0.3235366581021052, 0.33237863320381567, 0.36990181812853307, 0.478786895924748, 0.164951490438335, 0.1656151272000348, 0.2860922634507308, 0.23126395156430568, 0.1858764042229949, 0.20004842920195065, 0.24897198325009307, 0.22850892193969963, 0.143436920586815, 0.19483396257592578, 0.22465698191193018, 0.19075784756629588, 0.20782287379187825, 0.1660896017549569, 0.2279130590278856, 0.17781761776400196, 0.1946766129965014, 0.1995226199490423, 0.1904425192662217, 0.2348435788051464, 0.21185132143638108, 0.440754888734606, 0.22490131725116358, 0.19854197214640112, 0.21471873091978388, 0.21407496518684954, 0.22870924385065905, 0.795765592172432, 0.1656506796062227, 0.5947346539273581, 0.7571641426873678, 0.7801931202300251, 0.18454182752857873, 0.16285203386923552, 0.29528459115118355, 0.8134273080381422, 0.6033801818088922, 0.20961025403063827, 0.5326002181820375, 0.5477231979784964, 0.167490236295059, 0.2079768857271732, 0.1934888913839925, 0.20775980452916998, 0.6508461522421312, 0.20456927641616274, 0.1955780642997389, 0.1957719927826873, 0.20794471578725215, 0.18599011120799225, 0.18540269887878802, 0.20711607793405307, 0.20157297120807305, 0.23428081330347694, 0.07477274006032097, 0.09852441147323732, 0.08554787675531694, 0.0638069630222784, 0.09363049659406641, 0.09884563131647306, 0.07558888269643227, 0.07760590372653842, 0.0832174034819122]}, "mutation_prompt": null}
{"id": "8af80f83-6ddd-4b4f-8355-7aaedc9d0a6e", "solution": "import numpy as np\n\nclass DynamicMultiPhasePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, dim * 7)\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.3\n        self.cognitive_coeff = 1.5  # Increased cognitive coefficient\n        self.social_coeff = 1.5  # Balanced social coefficient\n        self.de_mutation_prob = 0.2  # Probability for differential evolution mutation\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1.5, (self.population_size, self.dim))  # Adjusted velocity range\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        phase_switch = self.budget // 2  # Switch phase halfway through the budget\n\n        while self.eval_count < self.budget:\n            if self.eval_count > phase_switch:\n                r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n                velocities = (self.inertia_weight_max * velocities +\n                              self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                              self.social_coeff * r2 * (global_best_position - particles))\n            else:\n                velocities = (self.inertia_weight_min * velocities +\n                              np.random.rand(self.population_size, self.dim) * (global_best_position - particles))\n\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.de_mutation_prob:\n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                    mutant = personal_best_positions[indices[0]] + 0.5 * (personal_best_positions[indices[1]] - personal_best_positions[indices[2]])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    mutant_score = func(mutant)\n                    self.eval_count += 1\n                    if mutant_score < personal_best_scores[i]:\n                        personal_best_positions[i] = mutant\n                        personal_best_scores[i] = mutant_score\n                        if mutant_score < global_best_score:\n                            global_best_score = mutant_score\n                            global_best_position = mutant\n\n        return global_best_position", "name": "DynamicMultiPhasePSO", "description": "A dynamic multi-phase particle swarm optimizer integrating adaptive velocity control and differential evolution mutation for enhanced exploration and exploitation balance.", "configspace": "", "generation": 43, "fitness": 0.1808920932423987, "feedback": "The algorithm DynamicMultiPhasePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.16.", "error": "", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.36774268315250846, 0.831037023910946, 0.7536017711850226, 0.24795036650027036, 0.3581744906976998, 0.9179849911218286, 0.7716999102617459, 0.9427432276331158, 0.3414840757823593, 9.999999999998899e-05, 0.027591922421797643, 0.04992870293941465, 0.08481510823530203, 0.005614969447783502, 0.01981283104059184, 0.012942521034845944, 0.024033549879234117, 0.012857671068490562, 0.0736036779459941, 0.11257853562892983, 0.1165307742970062, 0.07569643619967159, 0.07610352298446454, 0.08126069042406958, 0.07401069301184127, 0.14846652415616934, 0.11215698858777345, 0.05329495506182158, 0.09358590605607098, 0.1327515581988027, 0.0735504688619103, 0.04485474049657312, 0.13571232596063476, 0.059122183939846806, 0.06640968846498074, 0.10199077224518405, 0.11965962360067084, 0.48393385017255297, 0.18384504962181047, 0.08960350283603036, 0.45345227461538284, 0.39923788701954155, 0.14239955802803528, 0.41096279980372186, 0.9564516509834157, 0.12224241693933069, 0.11658313743720683, 0.0591003741633227, 0.1799148091382542, 0.1962504964024483, 0.18234693396583657, 0.10335687284935269, 0.11713476293730962, 0.08849529830183034, 0.21870557005083358, 0.13159762536341546, 0.15047320048097956, 0.1955800447733793, 0.2827750935868134, 0.18920939763194156, 0.08241894545281869, 0.11663783926399918, 0.148842753820418, 0.18408113387796254, 0.43579016877411936, 0.1435260583559107, 0.1646083598971203, 0.13102761760658455, 9.999999999998899e-05, 0.00983869006589444, 0.12439809372797594, 0.2892907566818147, 0.0242171497994359, 0.18184039862937684, 0.15028486974566402, 0.01899231873716345, 0.2252502243819503, 0.17982914124999572, 0.05823291335385106, 0.13647275858965136, 0.12448673176876224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02444157245930123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062053748982988544, 0.022462572029212202, 0.11707251143282627, 0.07749720217542677, 0.06527091227453563, 0.0345907637303402, 0.1701985920141127, 0.11008917088855974, 0.03749913716952724, 0.001874878408289593, 9.999999999998899e-05, 0.2592879270292777, 0.10439724773583581, 0.11025768261499269, 0.08499179501667609, 0.18742549841806555, 0.15815579060121576, 0.23048799326305125, 0.15228825881336594, 0.0333009499525273, 0.17787821384430647, 0.06752787197362509, 0.03798542116911907, 0.24949198702877062, 0.11338737388564746, 0.0846953464118354, 0.08413237431766507, 0.42163062254729655, 0.40954764085292505, 0.4493175701646943, 0.3235882612617559, 0.33806319435041954, 0.3494053167801209, 0.45802013379096684, 0.3292800235143807, 0.36099087090929916, 0.11461500291978899, 0.04097443086757413, 0.07274866297396143, 0.10224399897689995, 0.08711570448672334, 0.1652885852497229, 0.07324715300113582, 0.07077754742530473, 0.13480870189415362, 0.17872248017207948, 0.26808714955153523, 0.27626940240028275, 0.25352726500898193, 0.1561801087982716, 0.192163717319493, 0.17516194649361116, 0.1355108858937326, 0.3412929072808746, 0.2171372575020165, 0.21632899064891842, 0.29359920172006027, 0.20370802931663845, 0.22344257561537584, 0.22473845177153418, 0.18720318799070412, 0.19129517429243514, 0.35743256182116234, 0.11625902790409437, 0.18081213213239944, 0.26758848338656294, 0.12587929891306326, 0.1181334530853162, 0.17941799749646903, 0.1384153111222176, 0.19833709436162061, 0.23021338706530492, 0.16151079100751375, 0.15643462258079321, 0.2191263723569763, 0.23569061302132255, 0.20275972846417212, 0.2455095362370474, 0.24699262454404558, 0.1824315896257993, 0.22915205719142873, 0.17805009847710718, 0.1620839473207467, 0.1695521776740314, 0.2153533540260958, 0.22766313181831443, 0.18432631328515314, 0.2195648222876514, 0.19210881820789205, 0.1957078470550051, 0.27264970882491, 0.12700196943593944, 0.154559636159617, 0.17366515063265509, 0.20190070482602007, 0.20139919491801683, 0.14325139214920224, 0.17044443419347932, 0.6290696265181794, 0.5886076668612596, 0.212267074570884, 0.16598517645560096, 0.17615101573857772, 0.16935771307153447, 0.2050710641453164, 0.10493891237842912, 0.1562915795017592, 0.2212063829348936, 0.23469757969221738, 0.22432922967552626, 0.23289297738579995, 0.24079032742926143, 0.20603379795000754, 0.20453389032007785, 0.1782402885235127, 0.1772402710535167, 0.2586576887403079, 0.0715754553854846, 0.08379529955161358, 0.09577464022049131, 0.05520367111168856, 0.10700752359977983, 0.08312230810567067, 0.0447087460602863, 0.06625274327512232, 0.09655974578881454]}, "mutation_prompt": null}
{"id": "e7c80d9d-4107-4ce9-a1c1-a17a7b9aff89", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(25, dim * 6)  # Adjusted population for balance\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.3\n        self.cognitive_coeff = 1.5  # Increased cognitive coefficient for exploration\n        self.social_coeff = 1.5  # Balanced social coefficient\n        self.topology_change_prob = 0.2  # Probability to change particle's neighborhood\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (self.eval_count / self.budget))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.topology_change_prob:\n                shuffled_indices = np.random.permutation(self.population_size)\n                particles = particles[shuffled_indices]\n                velocities = velocities[shuffled_indices]\n\n            for i in range(len(particles)):\n                if self.eval_count >= self.budget:\n                    break\n                if np.random.rand() < 0.1:  # Local search with stochastic selection\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "HybridSwarmOptimizer", "description": "A hybrid swarm optimizer integrating dynamic topology adjustment and stochastic local search to enhance global exploration and local exploitation.", "configspace": "", "generation": 44, "fitness": 0.2669415297892222, "feedback": "The algorithm HybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "321fe186-96ff-4beb-a9e1-7b6b9e4ecf32", "metadata": {"aucs": [0.7013076957468725, 0.694228516892979, 0.6843244905758304, 0.7193945385492961, 0.7453628409096438, 0.6839948974839074, 0.7173558232080738, 0.6901133356004162, 0.18139441780446064, 0.47729137092305884, 0.45136999324195537, 0.4651582492434344, 0.47984095937489835, 0.4978281223023233, 0.4338475417650116, 0.489243370689994, 0.49288384227627413, 0.03969092386605266, 0.12293914741479817, 0.23956477067956738, 0.12725283495218898, 0.18972235840311646, 0.14806796835502678, 0.17370369163226473, 0.2610390272919477, 0.14329261265299598, 0.10667935346860324, 0.1165446139913825, 0.11490690999386899, 0.10314153931546899, 0.1081515270829364, 0.1097145806860168, 0.12896056066857886, 0.09812306182189623, 0.11269792450713267, 0.12546501039028046, 0.9911764169349881, 0.9940068609822684, 0.9929978027602633, 0.984173586935815, 0.9851116566051112, 0.9878886047982763, 0.9899661634051444, 0.9880882459311688, 0.9908428065726677, 0.058310953433656665, 0.4748136672138775, 0.3041450740441959, 0.33942113174319055, 0.4660194975949373, 0.4822090527083205, 0.42320526452365215, 0.46797281592753603, 0.08261932507727199, 0.5038865641254092, 0.4921403168820552, 0.46384421978844637, 0.26296424262420515, 0.637819749141133, 0.45968645282598275, 0.12234770423426777, 0.32065113931627387, 0.3176188228118324, 0.1713414860698167, 0.18112359717817939, 0.15956215456970002, 0.1615883030409897, 0.1049712585650695, 0.14463436069429048, 0.1406200171704851, 0.152587309782111, 0.16555312736061967, 0.18084145193027779, 0.021811724734275617, 0.010053373909390428, 0.11893892983531662, 0.12640504654384277, 0.17925503404440934, 0.15138312433706635, 0.060002271514567496, 0.1856821744187518, 0.0014627903204366133, 0.0003382084585616951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027866310768998148, 9.999999999998899e-05, 0.025776096318179564, 0.1113976059282219, 0.03507025555884524, 0.08406923427663893, 0.10148713173979962, 0.008687224648861736, 0.009922469555157076, 0.07461989420512327, 0.11480852414964116, 0.05734303880652025, 0.02532989866198787, 0.024711023984979485, 0.034983458727875005, 0.053928429096421815, 0.0551248381170939, 0.0957080237356488, 0.07131629129292705, 0.07077641804932577, 0.16713058939079128, 0.14327226162827322, 0.03858196095658473, 0.12732192776429385, 0.13781479793078033, 0.10771238451027709, 0.09117828700832742, 0.036505041491702306, 0.1833896236425453, 0.07245198773534045, 0.4848351417901995, 0.4622770438312792, 0.48592263090267374, 0.48744590257338005, 0.49919991547471065, 0.49011666601386594, 0.5003651591435256, 0.47917706445932995, 0.4748209151521917, 0.09772721956798536, 0.0869549995482437, 0.0857835071105656, 0.0917402153205712, 0.10763901683755739, 0.09975121802015496, 0.1288349316216918, 0.08915155234584327, 0.10000821523053816, 0.15614698753921696, 0.15628104765745343, 0.17341531578204195, 0.3450590017121731, 0.18182126526281062, 0.1902407438120698, 0.1955021216103452, 0.14844663022080973, 0.19494785520799807, 0.31962857080337914, 0.3522718172608502, 0.3569537072746177, 0.337798627483876, 0.3424956058307447, 0.29056902578730937, 0.40794873000911525, 0.39312616026875635, 0.45400321987651027, 0.30295152998149455, 0.18784359084811542, 0.2696949160479467, 0.15879150545513132, 0.18835263872913743, 0.17045109169411676, 0.22476847391798394, 0.28789134722048026, 0.23150696859206854, 0.22371651486223743, 0.16834222122085918, 0.18484410293505749, 0.21400898607023422, 0.19129149394922285, 0.18623295627463776, 0.19071139393554248, 0.18520232793445468, 0.2026945573479335, 0.5143035007819918, 0.19142464760553535, 0.35193615417381174, 0.19426687461967962, 0.3728678936214025, 0.1820897098739327, 0.20932187325009355, 0.35903220947632164, 0.46023283808625004, 0.7604232485415059, 0.6486221765651686, 0.15294759591764273, 0.17330067891238654, 0.19469081425224777, 0.19506718094995223, 0.6721940371381055, 0.19489371977097092, 0.20363999981430403, 0.37496287378713555, 0.15920449997207875, 0.3517251834336361, 0.1543393770570194, 0.2968744385083093, 0.5496129127668281, 0.1986020137909592, 0.19238603304256308, 0.5397685499589382, 0.1992702117519245, 0.1872925359997336, 0.18195305470946055, 0.19091431521352775, 0.19197294714517377, 0.18086378825238048, 0.1783849543532171, 0.18233554222556392, 0.17874269820822464, 0.08572982977929533, 0.07409257932541313, 0.0754546281412719, 0.08792999096218879, 0.07812991019022297, 0.08337898431115587, 0.10704090328530746, 0.079174130600008, 0.08480669212428804]}, "mutation_prompt": null}
{"id": "3944182a-d600-496d-b151-12c5d9b2362d", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(30, dim * 5)  # Adjusted population for balance\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.6  # Increased cognitive coefficient for exploration\n        self.social_coeff = 1.4  # Decreased social coefficient for diversity\n        self.dynamic_topology_change_prob = 0.25  # Probability to change particle's neighborhood\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * np.sin(phase * np.pi / 2))  # Non-linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.dynamic_topology_change_prob:\n                neighbors = np.random.randint(0, self.population_size, self.population_size)\n                velocities += np.random.rand(self.population_size, self.dim) * (particles[neighbors] - particles)\n\n            for i in range(len(particles)):\n                if self.eval_count >= self.budget:\n                    break\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced Hybrid Swarm Optimizer with adaptive neighborhood, non-linear inertia, and multi-phase exploration for improved convergence.", "configspace": "", "generation": 45, "fitness": 0.2682020707194961, "feedback": "The algorithm EnhancedHybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "e7c80d9d-4107-4ce9-a1c1-a17a7b9aff89", "metadata": {"aucs": [0.7146448455064045, 0.7195488432595147, 0.7296212050438625, 0.7213217036135129, 0.18045447740538967, 0.7061754872292487, 0.7027212494800459, 0.7077100542900115, 0.7339940919989418, 0.5216377116866924, 0.47350848390947275, 0.500869143116067, 0.5023332012692551, 0.4854256100998495, 0.4925140886919521, 0.5239549609413354, 0.4992179614835238, 0.46570881595504154, 0.14479923834067343, 0.25336289735243067, 0.11289132413477532, 0.14475854433801993, 0.12456194718459168, 0.11656940185779008, 0.24129196597683145, 0.40160100328035775, 0.12965685662423343, 0.09876164442827362, 0.12053295755986859, 0.09955886788874957, 0.12736973387705475, 0.10375172207734018, 0.10565448558786905, 0.11671566703654823, 0.1212285143424926, 0.13485557171371998, 0.9878016355603961, 0.9906892446230443, 0.9927880321286583, 0.9849584715757225, 0.9897947149235449, 0.981615335230462, 0.9892451813062059, 0.9874484189372079, 0.9901003116644738, 0.059582702098381235, 0.541213635561087, 0.5631021253259709, 0.14520000003277223, 0.14820722429102096, 0.19666973018976353, 0.5160343083689879, 0.5167514731091744, 0.5126959625660079, 0.5625444389491407, 0.31299288374330025, 0.5949724969174621, 0.327552698952853, 0.1920893119499909, 0.18987180118382152, 0.5781746827447225, 0.2146374878105991, 0.33729559753066185, 0.1784447758040777, 0.15484776541732903, 0.18542619845627506, 0.1144691697719229, 0.10237125954936177, 0.17024718910200531, 0.1682231774202706, 0.2344820094635357, 0.17397122986190683, 0.2069109321233331, 0.10458747641186927, 0.1917556815740663, 0.17363452692523862, 0.08546829968772418, 0.17653011345537906, 0.12018483935608038, 0.19142779968324541, 0.09073069072994044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03026155707235556, 9.999999999998899e-05, 0.0006469868235124965, 9.999999999998899e-05, 9.999999999998899e-05, 0.004573141109635581, 0.07883365601425063, 0.13444891073412657, 0.07941849700882708, 0.09099546595258512, 0.014031963835678285, 0.12106508735760968, 0.10166726256316849, 0.07785234946977493, 0.07610345218046055, 0.035321002128340884, 0.025231552352570574, 0.036988387007719004, 0.06946055225794623, 0.06541572356990655, 0.055973348069822015, 0.08029560479590858, 0.07433360020468738, 0.0518496027782136, 0.03910964846890275, 0.04205238979931947, 0.10488737435518036, 0.04441505887344299, 0.03374737330858557, 0.2235056529735222, 0.04509880188562132, 0.05304135221926409, 0.07393858447697199, 0.5608002899494267, 0.44758469274742174, 0.4698248655625412, 0.49705546689313085, 0.48365282714454694, 0.4879553738475938, 0.49034854206869694, 0.49495817108803053, 0.49386763757234153, 0.09789311274745338, 0.06329919122026695, 0.10574237567319056, 0.10297038960195293, 0.09974940519700104, 0.12506863403714374, 0.0828107742949078, 0.141325081057327, 0.11116813816434479, 0.19979956038440572, 0.21233822935852453, 0.15045427080789975, 0.20923113498667534, 0.16484434309090124, 0.15490444052671482, 0.2829681580085308, 0.1872714552960819, 0.19258005243294352, 0.29920338046365735, 0.3067257549422949, 0.46956744740986944, 0.38885867470864177, 0.2057088644182934, 0.3007696803396487, 0.46165926459105655, 0.4577528018948509, 0.47541365636638344, 0.21759246624266504, 0.21178426430624098, 0.22286255088627926, 0.280576270924089, 0.19688433180663523, 0.24620607618687018, 0.23618422447958132, 0.28078339805897123, 0.2513077188623789, 0.2098816568230868, 0.17798144696693274, 0.19338983700958134, 0.18519234541525587, 0.18632916554794055, 0.18883516885537543, 0.1946385437518503, 0.19692037792301587, 0.20030463595335946, 0.2084756430266803, 0.21287133259022661, 0.19576481097649856, 0.2093784948994687, 0.28231655892387897, 0.18236163173869524, 0.1988000990910327, 0.20845906938954506, 0.2233739389064806, 0.8001350781804215, 0.16242753846488633, 0.1503640704539173, 0.17587892316223608, 0.19401557967734284, 0.19634373674059624, 0.6772850325012568, 0.16914675271422952, 0.20595679488438867, 0.40868311506781285, 0.1526276247727727, 0.20103086134139125, 0.20723700384627952, 0.460161492093241, 0.4353231735265939, 0.5703675828847523, 0.2091675166139867, 0.5357378582374867, 0.1901608904639941, 0.17584434227342605, 0.1981292533167489, 0.19913528804404346, 0.19228602909740267, 0.18766347174972942, 0.20167930140972956, 0.1834636333154699, 0.17951236454772956, 0.08936726633598191, 0.08877770808276053, 0.08427085925764677, 0.07736409525094712, 0.0869927675613339, 0.09511032561046218, 0.08233125153348841, 0.08118644750535897, 0.07870878615535692]}, "mutation_prompt": null}
{"id": "54e8269f-f8a6-4c39-8baf-07e753bbf7e8", "solution": "import numpy as np\n\nclass AdaptiveParticleSwarmFusion:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(30, dim * 5)\n        self.inertia_weight_max = 0.85\n        self.inertia_weight_min = 0.3\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.dynamic_topology_change_prob = 0.2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * np.power(phase, 2))  # Quadratic decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.dynamic_topology_change_prob:\n                neighbors = np.random.randint(0, self.population_size, self.population_size)\n                disturbances = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))\n                velocities += disturbances * (particles[neighbors] - particles)\n\n            for i in range(len(particles)):\n                if self.eval_count >= self.budget:\n                    break\n                if np.random.rand() < 0.18:  # Slightly increased probability for random walk\n                    walk_step = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    walk_score = func(walk_step)\n                    self.eval_count += 1\n                    if walk_score < personal_best_scores[i]:\n                        personal_best_positions[i] = walk_step\n                        personal_best_scores[i] = walk_score\n                        if walk_score < global_best_score:\n                            global_best_score = walk_score\n                            global_best_position = walk_step\n\n        return global_best_position", "name": "AdaptiveParticleSwarmFusion", "description": "Adaptive Particle Swarm Fusion (APSF) with stochastic update strategies, inertia variance, and localized random walks for enhanced convergence.", "configspace": "", "generation": 46, "fitness": 0.23712161594458353, "feedback": "The algorithm AdaptiveParticleSwarmFusion got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "3944182a-d600-496d-b151-12c5d9b2362d", "metadata": {"aucs": [0.6245671352650153, 0.6194633067625356, 0.6222273894714867, 0.6386407237430984, 0.18931608900090036, 0.19278304475090557, 0.6268627387678286, 0.6265184511029854, 0.6251260019778562, 0.3267109193251251, 0.3216034353082705, 0.36341316303452054, 0.2539812922420419, 0.09080918902277701, 0.332130106157038, 0.3302964718353961, 0.03317390649138363, 0.3465710168314273, 0.2252798138664932, 0.11543320659233014, 0.10578635549743631, 0.1008173546467449, 0.27026148918888626, 0.19147091269998529, 0.14196457102579807, 0.12290964865437404, 0.13047939284011167, 0.10352165571827898, 0.09263726966376218, 0.0956529487962271, 0.1306288775506117, 0.08696188529917048, 0.11921348691317757, 0.11877912032262317, 0.10328972111526669, 0.13602814184751766, 0.9903375098999326, 0.9907676644132818, 0.99283264900328, 0.9874312865141306, 0.9891144952362957, 0.9817315000595905, 0.9875085790229268, 0.9878357818545653, 0.9901235863770989, 0.12213737374075861, 0.4211138258176562, 0.44554688373381557, 0.14765580789106458, 0.1472803277353003, 0.1476202817199297, 0.08799677401363348, 0.4078333580296082, 0.08769854098388807, 0.32021105188502386, 0.26603969825303386, 0.3063839798183158, 0.19104666698648975, 0.18976960312884827, 0.2373077798041051, 0.22291008989690342, 0.2383863427754288, 0.11578994170645351, 0.15555741628611286, 0.1572632818532005, 0.16376201492094222, 0.08380478673549008, 0.13796269374666248, 0.09605269337246503, 0.15459457022937206, 0.12138381976572055, 0.16679793005540033, 0.12355291057806139, 0.06850637406453841, 0.15804989828145022, 0.14078629196486692, 0.1593687667777336, 0.11658199783267342, 0.16951187646241728, 0.10323233807238086, 0.0919111620589067, 0.0013049040134927026, 9.999999999998899e-05, 0.05302489035105684, 0.0005349445087520222, 0.030412652712000443, 9.999999999998899e-05, 0.00017034359454415338, 9.999999999998899e-05, 0.026187905471158568, 0.0659202602470772, 0.05866982803841214, 0.11699543587627104, 0.05969430544411969, 0.05174920698908192, 0.03651929169202872, 0.08790911880201657, 0.05369915786512225, 0.06262065532523486, 0.056955987063197266, 0.01986431972873981, 0.02773838083237079, 0.038476127477400035, 0.04810967465565841, 0.03639770906088813, 0.10120457779291558, 0.05219713472243237, 0.044254773403830217, 0.07375845735567543, 0.03891434436706098, 0.16667726651051984, 0.005088927863784898, 0.0048291763238553775, 0.16472896282204874, 0.062049585208273084, 0.0434711161020741, 0.07143869219200438, 0.42385588236205074, 0.4368696107975738, 0.43731862456237947, 0.4903105180785994, 0.4513726665826914, 0.2087773868232734, 0.44752302899782725, 0.4194644894616282, 0.4742848523677875, 0.08528686062437851, 0.07674613128570784, 0.12407606727748366, 0.11034318954012579, 0.09563267100888895, 0.09960221626043131, 0.11375148258564383, 0.07372697172290577, 0.0843604304414255, 0.1885526728371808, 0.2221520648607811, 0.19627616479727972, 0.21834326870573795, 0.1851387654716351, 0.13857093447179036, 0.18759384896409648, 0.154426568856045, 0.19416746226017045, 0.31402306933569935, 0.35931466736927864, 0.2833797443127388, 0.32206896241765925, 0.3300146529879807, 0.2653984789066247, 0.3808712380176956, 0.3332209841433128, 0.2902924717597435, 0.3010114868134458, 0.19016620278140994, 0.28926815342526657, 0.24214852061876402, 0.22386640523168821, 0.18351311385139857, 0.24933003134299003, 0.309968832005743, 0.2349687977478473, 0.17954495500998013, 0.17268412659243493, 0.2086128809128489, 0.18631445048264994, 0.18965648241710797, 0.17312298285840477, 0.1961391926851166, 0.18466529093805628, 0.20833079273920463, 0.19190794588409799, 0.20177625708789326, 0.1893095690672283, 0.19995054040846016, 0.21864570746056955, 0.3586683952504637, 0.1838972146079857, 0.4158664010067469, 0.3932596919889869, 0.6554684101295896, 0.1842563076616217, 0.16667492145878537, 0.6575004266996267, 0.19559222364618056, 0.6437564084162325, 0.47375028699483, 0.16823698032314127, 0.21492378009550528, 0.5961312323810568, 0.1542855120161164, 0.20223367361929645, 0.2078165367108068, 0.316618635154732, 0.6200759093320554, 0.4817499901187442, 0.20776452841427606, 0.48486260989460106, 0.18961588515951577, 0.19003804616808195, 0.18809082126302934, 0.1846399110599446, 0.19651011136558727, 0.1812455972644461, 0.17306258273786845, 0.19456147063512697, 0.1922201908489053, 0.07403408721638749, 0.09600499348243574, 0.0763970764983295, 0.07361137245018867, 0.07762815564110659, 0.08206821723786195, 0.08069442409821115, 0.07523904163033002, 0.08093461263020685]}, "mutation_prompt": null}
{"id": "006e6c76-7b67-4660-9ec2-f2732ccdca38", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(30, dim * 5)  # Adjusted population for balance\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.6  # Increased cognitive coefficient for exploration\n        self.social_coeff = 1.4  # Decreased social coefficient for diversity\n        self.dynamic_topology_change_prob = 0.25  # Probability to change particle's neighborhood\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * np.sin(phase * np.pi / 2))  # Non-linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.dynamic_topology_change_prob:\n                neighbors = np.random.randint(0, self.population_size, self.population_size)\n                velocities += np.random.rand(self.population_size, self.dim) * (particles[neighbors] - particles)\n\n            for i in range(len(particles)):\n                if self.eval_count >= self.budget:\n                    break\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced Hybrid Swarm Optimizer with adaptive neighborhood, non-linear inertia, and multi-phase exploration for improved convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3944182a-d600-496d-b151-12c5d9b2362d", "metadata": {"aucs": [0.7146448455064045, 0.7195488432595147, 0.7296212050438625, 0.7213217036135129, 0.18045447740538967, 0.7061754872292487, 0.7027212494800459, 0.7077100542900115, 0.7339940919989418, 0.5216377116866924, 0.47350848390947275, 0.500869143116067, 0.5023332012692551, 0.4854256100998495, 0.4925140886919521, 0.5239549609413354, 0.4992179614835238, 0.46570881595504154, 0.14479923834067343, 0.25336289735243067, 0.11289132413477532, 0.14475854433801993, 0.12456194718459168, 0.11656940185779008, 0.24129196597683145, 0.40160100328035775, 0.12965685662423343, 0.09876164442827362, 0.12053295755986859, 0.09955886788874957, 0.12736973387705475, 0.10375172207734018, 0.10565448558786905, 0.11671566703654823, 0.1212285143424926, 0.13485557171371998, 0.9878016355603961, 0.9906892446230443, 0.9927880321286583, 0.9849584715757225, 0.9897947149235449, 0.981615335230462, 0.9892451813062059, 0.9874484189372079, 0.9901003116644738, 0.059582702098381235, 0.541213635561087, 0.5631021253259709, 0.14520000003277223, 0.14820722429102096, 0.19666973018976353, 0.5160343083689879, 0.5167514731091744, 0.5126959625660079, 0.5625444389491407, 0.31299288374330025, 0.5949724969174621, 0.327552698952853, 0.1920893119499909, 0.18987180118382152, 0.5781746827447225, 0.2146374878105991, 0.33729559753066185, 0.1784447758040777, 0.15484776541732903, 0.18542619845627506, 0.1144691697719229, 0.10237125954936177, 0.17024718910200531, 0.1682231774202706, 0.2344820094635357, 0.17397122986190683, 0.2069109321233331, 0.10458747641186927, 0.1917556815740663, 0.17363452692523862, 0.08546829968772418, 0.17653011345537906, 0.12018483935608038, 0.19142779968324541, 0.09073069072994044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03026155707235556, 9.999999999998899e-05, 0.0006469868235124965, 9.999999999998899e-05, 9.999999999998899e-05, 0.004573141109635581, 0.07883365601425063, 0.13444891073412657, 0.07941849700882708, 0.09099546595258512, 0.014031963835678285, 0.12106508735760968, 0.10166726256316849, 0.07785234946977493, 0.07610345218046055, 0.035321002128340884, 0.025231552352570574, 0.036988387007719004, 0.06946055225794623, 0.06541572356990655, 0.055973348069822015, 0.08029560479590858, 0.07433360020468738, 0.0518496027782136, 0.03910964846890275, 0.04205238979931947, 0.10488737435518036, 0.04441505887344299, 0.03374737330858557, 0.2235056529735222, 0.04509880188562132, 0.05304135221926409, 0.07393858447697199, 0.5608002899494267, 0.44758469274742174, 0.4698248655625412, 0.49705546689313085, 0.48365282714454694, 0.4879553738475938, 0.49034854206869694, 0.49495817108803053, 0.49386763757234153, 0.09789311274745338, 0.06329919122026695, 0.10574237567319056, 0.10297038960195293, 0.09974940519700104, 0.12506863403714374, 0.0828107742949078, 0.141325081057327, 0.11116813816434479, 0.19979956038440572, 0.21233822935852453, 0.15045427080789975, 0.20923113498667534, 0.16484434309090124, 0.15490444052671482, 0.2829681580085308, 0.1872714552960819, 0.19258005243294352, 0.29920338046365735, 0.3067257549422949, 0.46956744740986944, 0.38885867470864177, 0.2057088644182934, 0.3007696803396487, 0.46165926459105655, 0.4577528018948509, 0.47541365636638344, 0.21759246624266504, 0.21178426430624098, 0.22286255088627926, 0.280576270924089, 0.19688433180663523, 0.24620607618687018, 0.23618422447958132, 0.28078339805897123, 0.2513077188623789, 0.2098816568230868, 0.17798144696693274, 0.19338983700958134, 0.18519234541525587, 0.18632916554794055, 0.18883516885537543, 0.1946385437518503, 0.19692037792301587, 0.20030463595335946, 0.2084756430266803, 0.21287133259022661, 0.19576481097649856, 0.2093784948994687, 0.28231655892387897, 0.18236163173869524, 0.1988000990910327, 0.20845906938954506, 0.2233739389064806, 0.8001350781804215, 0.16242753846488633, 0.1503640704539173, 0.17587892316223608, 0.19401557967734284, 0.19634373674059624, 0.6772850325012568, 0.16914675271422952, 0.20595679488438867, 0.40868311506781285, 0.1526276247727727, 0.20103086134139125, 0.20723700384627952, 0.460161492093241, 0.4353231735265939, 0.5703675828847523, 0.2091675166139867, 0.5357378582374867, 0.1901608904639941, 0.17584434227342605, 0.1981292533167489, 0.19913528804404346, 0.19228602909740267, 0.18766347174972942, 0.20167930140972956, 0.1834636333154699, 0.17951236454772956, 0.08936726633598191, 0.08877770808276053, 0.08427085925764677, 0.07736409525094712, 0.0869927675613339, 0.09511032561046218, 0.08233125153348841, 0.08118644750535897, 0.07870878615535692]}, "mutation_prompt": null}
{"id": "858691a9-b24e-4ccb-b66b-85ea874ff0c6", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(30, dim * 5)  # Adjusted population for balance\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.6  # Increased cognitive coefficient for exploration\n        self.social_coeff = 1.4  # Decreased social coefficient for diversity\n        self.dynamic_topology_change_prob = 0.25  # Probability to change particle's neighborhood\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * np.sin(phase * np.pi / 2))  # Non-linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.dynamic_topology_change_prob:\n                neighbors = np.random.randint(0, self.population_size, self.population_size)\n                velocities += np.random.rand(self.population_size, self.dim) * (particles[neighbors] - particles)\n\n            for i in range(len(particles)):\n                if self.eval_count >= self.budget:\n                    break\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced Hybrid Swarm Optimizer with adaptive neighborhood, non-linear inertia, and multi-phase exploration for improved convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3944182a-d600-496d-b151-12c5d9b2362d", "metadata": {"aucs": [0.7146448455064045, 0.7195488432595147, 0.7296212050438625, 0.7213217036135129, 0.18045447740538967, 0.7061754872292487, 0.7027212494800459, 0.7077100542900115, 0.7339940919989418, 0.5216377116866924, 0.47350848390947275, 0.500869143116067, 0.5023332012692551, 0.4854256100998495, 0.4925140886919521, 0.5239549609413354, 0.4992179614835238, 0.46570881595504154, 0.14479923834067343, 0.25336289735243067, 0.11289132413477532, 0.14475854433801993, 0.12456194718459168, 0.11656940185779008, 0.24129196597683145, 0.40160100328035775, 0.12965685662423343, 0.09876164442827362, 0.12053295755986859, 0.09955886788874957, 0.12736973387705475, 0.10375172207734018, 0.10565448558786905, 0.11671566703654823, 0.1212285143424926, 0.13485557171371998, 0.9878016355603961, 0.9906892446230443, 0.9927880321286583, 0.9849584715757225, 0.9897947149235449, 0.981615335230462, 0.9892451813062059, 0.9874484189372079, 0.9901003116644738, 0.059582702098381235, 0.541213635561087, 0.5631021253259709, 0.14520000003277223, 0.14820722429102096, 0.19666973018976353, 0.5160343083689879, 0.5167514731091744, 0.5126959625660079, 0.5625444389491407, 0.31299288374330025, 0.5949724969174621, 0.327552698952853, 0.1920893119499909, 0.18987180118382152, 0.5781746827447225, 0.2146374878105991, 0.33729559753066185, 0.1784447758040777, 0.15484776541732903, 0.18542619845627506, 0.1144691697719229, 0.10237125954936177, 0.17024718910200531, 0.1682231774202706, 0.2344820094635357, 0.17397122986190683, 0.2069109321233331, 0.10458747641186927, 0.1917556815740663, 0.17363452692523862, 0.08546829968772418, 0.17653011345537906, 0.12018483935608038, 0.19142779968324541, 0.09073069072994044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03026155707235556, 9.999999999998899e-05, 0.0006469868235124965, 9.999999999998899e-05, 9.999999999998899e-05, 0.004573141109635581, 0.07883365601425063, 0.13444891073412657, 0.07941849700882708, 0.09099546595258512, 0.014031963835678285, 0.12106508735760968, 0.10166726256316849, 0.07785234946977493, 0.07610345218046055, 0.035321002128340884, 0.025231552352570574, 0.036988387007719004, 0.06946055225794623, 0.06541572356990655, 0.055973348069822015, 0.08029560479590858, 0.07433360020468738, 0.0518496027782136, 0.03910964846890275, 0.04205238979931947, 0.10488737435518036, 0.04441505887344299, 0.03374737330858557, 0.2235056529735222, 0.04509880188562132, 0.05304135221926409, 0.07393858447697199, 0.5608002899494267, 0.44758469274742174, 0.4698248655625412, 0.49705546689313085, 0.48365282714454694, 0.4879553738475938, 0.49034854206869694, 0.49495817108803053, 0.49386763757234153, 0.09789311274745338, 0.06329919122026695, 0.10574237567319056, 0.10297038960195293, 0.09974940519700104, 0.12506863403714374, 0.0828107742949078, 0.141325081057327, 0.11116813816434479, 0.19979956038440572, 0.21233822935852453, 0.15045427080789975, 0.20923113498667534, 0.16484434309090124, 0.15490444052671482, 0.2829681580085308, 0.1872714552960819, 0.19258005243294352, 0.29920338046365735, 0.3067257549422949, 0.46956744740986944, 0.38885867470864177, 0.2057088644182934, 0.3007696803396487, 0.46165926459105655, 0.4577528018948509, 0.47541365636638344, 0.21759246624266504, 0.21178426430624098, 0.22286255088627926, 0.280576270924089, 0.19688433180663523, 0.24620607618687018, 0.23618422447958132, 0.28078339805897123, 0.2513077188623789, 0.2098816568230868, 0.17798144696693274, 0.19338983700958134, 0.18519234541525587, 0.18632916554794055, 0.18883516885537543, 0.1946385437518503, 0.19692037792301587, 0.20030463595335946, 0.2084756430266803, 0.21287133259022661, 0.19576481097649856, 0.2093784948994687, 0.28231655892387897, 0.18236163173869524, 0.1988000990910327, 0.20845906938954506, 0.2233739389064806, 0.8001350781804215, 0.16242753846488633, 0.1503640704539173, 0.17587892316223608, 0.19401557967734284, 0.19634373674059624, 0.6772850325012568, 0.16914675271422952, 0.20595679488438867, 0.40868311506781285, 0.1526276247727727, 0.20103086134139125, 0.20723700384627952, 0.460161492093241, 0.4353231735265939, 0.5703675828847523, 0.2091675166139867, 0.5357378582374867, 0.1901608904639941, 0.17584434227342605, 0.1981292533167489, 0.19913528804404346, 0.19228602909740267, 0.18766347174972942, 0.20167930140972956, 0.1834636333154699, 0.17951236454772956, 0.08936726633598191, 0.08877770808276053, 0.08427085925764677, 0.07736409525094712, 0.0869927675613339, 0.09511032561046218, 0.08233125153348841, 0.08118644750535897, 0.07870878615535692]}, "mutation_prompt": null}
{"id": "a394522f-6cf4-4282-a77a-a8bc5612a598", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(30, dim * 5)  # Adjusted population for balance\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.6  # Increased cognitive coefficient for exploration\n        self.social_coeff = 1.4  # Decreased social coefficient for diversity\n        self.dynamic_topology_change_prob = 0.25  # Probability to change particle's neighborhood\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * np.sin(phase * np.pi / 2))  # Non-linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.dynamic_topology_change_prob:\n                neighbors = np.random.randint(0, self.population_size, self.population_size)\n                velocities += np.random.rand(self.population_size, self.dim) * (particles[neighbors] - particles)\n\n            for i in range(len(particles)):\n                if self.eval_count >= self.budget:\n                    break\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced Hybrid Swarm Optimizer with adaptive neighborhood, non-linear inertia, and multi-phase exploration for improved convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3944182a-d600-496d-b151-12c5d9b2362d", "metadata": {"aucs": [0.7146448455064045, 0.7195488432595147, 0.7296212050438625, 0.7213217036135129, 0.18045447740538967, 0.7061754872292487, 0.7027212494800459, 0.7077100542900115, 0.7339940919989418, 0.5216377116866924, 0.47350848390947275, 0.500869143116067, 0.5023332012692551, 0.4854256100998495, 0.4925140886919521, 0.5239549609413354, 0.4992179614835238, 0.46570881595504154, 0.14479923834067343, 0.25336289735243067, 0.11289132413477532, 0.14475854433801993, 0.12456194718459168, 0.11656940185779008, 0.24129196597683145, 0.40160100328035775, 0.12965685662423343, 0.09876164442827362, 0.12053295755986859, 0.09955886788874957, 0.12736973387705475, 0.10375172207734018, 0.10565448558786905, 0.11671566703654823, 0.1212285143424926, 0.13485557171371998, 0.9878016355603961, 0.9906892446230443, 0.9927880321286583, 0.9849584715757225, 0.9897947149235449, 0.981615335230462, 0.9892451813062059, 0.9874484189372079, 0.9901003116644738, 0.059582702098381235, 0.541213635561087, 0.5631021253259709, 0.14520000003277223, 0.14820722429102096, 0.19666973018976353, 0.5160343083689879, 0.5167514731091744, 0.5126959625660079, 0.5625444389491407, 0.31299288374330025, 0.5949724969174621, 0.327552698952853, 0.1920893119499909, 0.18987180118382152, 0.5781746827447225, 0.2146374878105991, 0.33729559753066185, 0.1784447758040777, 0.15484776541732903, 0.18542619845627506, 0.1144691697719229, 0.10237125954936177, 0.17024718910200531, 0.1682231774202706, 0.2344820094635357, 0.17397122986190683, 0.2069109321233331, 0.10458747641186927, 0.1917556815740663, 0.17363452692523862, 0.08546829968772418, 0.17653011345537906, 0.12018483935608038, 0.19142779968324541, 0.09073069072994044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03026155707235556, 9.999999999998899e-05, 0.0006469868235124965, 9.999999999998899e-05, 9.999999999998899e-05, 0.004573141109635581, 0.07883365601425063, 0.13444891073412657, 0.07941849700882708, 0.09099546595258512, 0.014031963835678285, 0.12106508735760968, 0.10166726256316849, 0.07785234946977493, 0.07610345218046055, 0.035321002128340884, 0.025231552352570574, 0.036988387007719004, 0.06946055225794623, 0.06541572356990655, 0.055973348069822015, 0.08029560479590858, 0.07433360020468738, 0.0518496027782136, 0.03910964846890275, 0.04205238979931947, 0.10488737435518036, 0.04441505887344299, 0.03374737330858557, 0.2235056529735222, 0.04509880188562132, 0.05304135221926409, 0.07393858447697199, 0.5608002899494267, 0.44758469274742174, 0.4698248655625412, 0.49705546689313085, 0.48365282714454694, 0.4879553738475938, 0.49034854206869694, 0.49495817108803053, 0.49386763757234153, 0.09789311274745338, 0.06329919122026695, 0.10574237567319056, 0.10297038960195293, 0.09974940519700104, 0.12506863403714374, 0.0828107742949078, 0.141325081057327, 0.11116813816434479, 0.19979956038440572, 0.21233822935852453, 0.15045427080789975, 0.20923113498667534, 0.16484434309090124, 0.15490444052671482, 0.2829681580085308, 0.1872714552960819, 0.19258005243294352, 0.29920338046365735, 0.3067257549422949, 0.46956744740986944, 0.38885867470864177, 0.2057088644182934, 0.3007696803396487, 0.46165926459105655, 0.4577528018948509, 0.47541365636638344, 0.21759246624266504, 0.21178426430624098, 0.22286255088627926, 0.280576270924089, 0.19688433180663523, 0.24620607618687018, 0.23618422447958132, 0.28078339805897123, 0.2513077188623789, 0.2098816568230868, 0.17798144696693274, 0.19338983700958134, 0.18519234541525587, 0.18632916554794055, 0.18883516885537543, 0.1946385437518503, 0.19692037792301587, 0.20030463595335946, 0.2084756430266803, 0.21287133259022661, 0.19576481097649856, 0.2093784948994687, 0.28231655892387897, 0.18236163173869524, 0.1988000990910327, 0.20845906938954506, 0.2233739389064806, 0.8001350781804215, 0.16242753846488633, 0.1503640704539173, 0.17587892316223608, 0.19401557967734284, 0.19634373674059624, 0.6772850325012568, 0.16914675271422952, 0.20595679488438867, 0.40868311506781285, 0.1526276247727727, 0.20103086134139125, 0.20723700384627952, 0.460161492093241, 0.4353231735265939, 0.5703675828847523, 0.2091675166139867, 0.5357378582374867, 0.1901608904639941, 0.17584434227342605, 0.1981292533167489, 0.19913528804404346, 0.19228602909740267, 0.18766347174972942, 0.20167930140972956, 0.1834636333154699, 0.17951236454772956, 0.08936726633598191, 0.08877770808276053, 0.08427085925764677, 0.07736409525094712, 0.0869927675613339, 0.09511032561046218, 0.08233125153348841, 0.08118644750535897, 0.07870878615535692]}, "mutation_prompt": null}
{"id": "d1516490-5f84-4cf6-9880-23db2d0e394a", "solution": "import numpy as np\n\nclass AdaptiveQuantumSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Increased population for enhanced search space coverage\n        self.inertia_weight_max = 0.8\n        self.inertia_weight_min = 0.5\n        self.cognitive_coeff = 2.0  # Increased cognitive coefficient for adaptive exploration\n        self.social_coeff = 1.3  # Reduced social coefficient for better diversity\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_min + ((self.inertia_weight_max - self.inertia_weight_min) * (1 - np.cos(phase * np.pi / 2)))  # Adaptive inertia adjustment\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            quantum_step = np.random.normal(0, 1, (self.population_size, self.dim)) * (global_best_position - particles)\n            particles += velocities + quantum_step\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < 0.2:  # Increased probability for local search enhancement\n                neighbor_indices = np.random.choice(self.population_size, self.population_size // 5, replace=False)\n                for i in neighbor_indices:\n                    if self.eval_count >= self.budget:\n                        break\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "AdaptiveQuantumSwarmOptimizer", "description": "Adaptive Quantum Swarm Optimizer enhances exploration and convergence through quantum-inspired position updates and adaptive coefficients.", "configspace": "", "generation": 50, "fitness": 0.16906124038854403, "feedback": "The algorithm AdaptiveQuantumSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "3944182a-d600-496d-b151-12c5d9b2362d", "metadata": {"aucs": [0.33797576465993906, 0.40327058108152847, 0.35443069284788886, 0.275823283561046, 0.3474529415692962, 0.18746262146069614, 0.3719960283556454, 0.34018364414887037, 0.3303918979073911, 0.008050769636624544, 0.031334915542945097, 9.999999999998899e-05, 0.03826433453838474, 0.03750296744463599, 0.03072900596656114, 0.05359659110980741, 0.11354026922291682, 0.030681898327225454, 0.06465256090875249, 0.07738345858295492, 0.07620858884347947, 0.11349897154372679, 0.07752736478720545, 0.06952208555527428, 0.07591302422770296, 0.0915926561199103, 0.08823513158848983, 0.06493426027945881, 0.058698611025878145, 0.06554535466687306, 0.07540925426596401, 0.07128757609959757, 0.03868929103398455, 0.07366257895910044, 0.06391379877613312, 0.07118052351577353, 0.9814940709436634, 0.9907013372747577, 0.9874687801691968, 0.9870970980212272, 0.9838350882991669, 0.9904779174372369, 0.988370918802257, 0.9849340995439704, 0.9835066464714659, 0.1579421726154302, 0.0861547648723463, 0.10259539218644054, 0.1195346772282071, 0.1319619923031502, 0.14364911589520346, 0.15176659820867622, 0.08860794368495772, 0.10885728925639448, 0.20356914251572866, 0.14712379370223627, 0.20954484756831693, 0.18843984493109434, 0.25074793538347195, 0.18600472250512845, 0.19489380340196238, 0.16332345699572837, 0.3035076217733903, 0.08068514683211014, 0.12640010367394838, 0.0481157248325188, 0.08771659441380109, 0.0679022046420309, 0.06180889033901926, 0.10955665511511181, 0.09453969920784311, 0.10437080405384658, 0.12261132531426322, 0.1078563723758863, 0.0619670085278361, 0.1320089931877002, 0.09673026708280108, 0.1189386698629592, 0.0599380231999288, 0.03144022462778906, 0.08603864074946288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020739285615878567, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06006169516757831, 0.037491246583912674, 0.07048826021752197, 0.039045829834158385, 0.029546387688360265, 0.00875558902566076, 0.05900844214643619, 0.04333802537339959, 0.007412800957329657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028236695620973862, 0.024339090508547323, 0.08835211964775169, 0.002318071813606548, 0.11166828074860091, 0.06890039155122318, 0.05183704430918856, 0.04828346878041667, 0.07201706419092058, 0.32639653405196, 0.3153749632894576, 0.3025372629605263, 0.35887688348183067, 0.31376628817675556, 0.29603367094357025, 0.37695777225748484, 0.32419556220908285, 0.30553554905005365, 0.07320219467508071, 0.07503712480270863, 0.05118915489281861, 0.05721328265686354, 0.06517393714349162, 0.07130529366342364, 0.08110763434762724, 0.06599556736434675, 0.06099120485074727, 0.16574426197344438, 0.14493137742309192, 0.1484756213614804, 0.1504503450551472, 0.1845174486611636, 0.14401905789521874, 0.14655506912480976, 0.19670298484558524, 0.1380101448844796, 0.20931596485850879, 0.2201333924259361, 0.2078862378937517, 0.1844740416763987, 0.23779366594586704, 0.18655236656465335, 0.24510815609098568, 0.26313745170416913, 0.19179746490841054, 0.15449594404279288, 0.17375978192606667, 0.1893113260668443, 0.15192221922145888, 0.14095692053944453, 0.1335019281058929, 0.13072962455115067, 0.1815081282834924, 0.1909711677268745, 0.18457682641362871, 0.19930535295023133, 0.17365407402832878, 0.17081980118886386, 0.15486999932603862, 0.19184468477924588, 0.17074311337197146, 0.18188066282305193, 0.17783154725856398, 0.19618060476698718, 0.1604529610332105, 0.17216937055506865, 0.18484256224417306, 0.17225052456866308, 0.16512284407993905, 0.17330330605621913, 0.1709938986685433, 0.17903097331535445, 0.3553534050735775, 0.2408744661818416, 0.17638844930128383, 0.2409707640171106, 0.18948567015645412, 0.19006300381082153, 0.1425318295113268, 0.19259760414026328, 0.20454642434405135, 0.2743092124937865, 0.19514540040249717, 0.18467990871904538, 0.19514994823653975, 0.1852439761800576, 0.1243962393742939, 0.22632158621290754, 0.19824129164736404, 0.20511156913549788, 0.1852303176205118, 0.18934042509465943, 0.1790847698625141, 0.2245881982432959, 0.18218810209686298, 0.21273677667157787, 0.18335753684789247, 0.17703719601131995, 0.20086239364317326, 0.07890821963331895, 0.06401933475791122, 0.06595141013344652, 0.07909142584010109, 0.07217036215700756, 0.07792273933669236, 0.07026456876504728, 0.06486972079989539, 0.07574908749574061]}, "mutation_prompt": null}
{"id": "5856a0c4-01a2-42f6-b149-8f8ce35a6bce", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(30, dim * 5)  # Adjusted population for balance\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.6  # Increased cognitive coefficient for exploration\n        self.social_coeff = 1.4  # Decreased social coefficient for diversity\n        self.dynamic_topology_change_prob = 0.25  # Probability to change particle's neighborhood\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * np.sin(phase * np.pi / 2))  # Non-linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.dynamic_topology_change_prob:\n                neighbors = np.random.randint(0, self.population_size, self.population_size)\n                velocities += np.random.rand(self.population_size, self.dim) * (particles[neighbors] - particles)\n\n            for i in range(len(particles)):\n                if self.eval_count >= self.budget:\n                    break\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced Hybrid Swarm Optimizer with adaptive neighborhood, non-linear inertia, and multi-phase exploration for improved convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3944182a-d600-496d-b151-12c5d9b2362d", "metadata": {"aucs": [0.7146448455064045, 0.7195488432595147, 0.7296212050438625, 0.7213217036135129, 0.18045447740538967, 0.7061754872292487, 0.7027212494800459, 0.7077100542900115, 0.7339940919989418, 0.5216377116866924, 0.47350848390947275, 0.500869143116067, 0.5023332012692551, 0.4854256100998495, 0.4925140886919521, 0.5239549609413354, 0.4992179614835238, 0.46570881595504154, 0.14479923834067343, 0.25336289735243067, 0.11289132413477532, 0.14475854433801993, 0.12456194718459168, 0.11656940185779008, 0.24129196597683145, 0.40160100328035775, 0.12965685662423343, 0.09876164442827362, 0.12053295755986859, 0.09955886788874957, 0.12736973387705475, 0.10375172207734018, 0.10565448558786905, 0.11671566703654823, 0.1212285143424926, 0.13485557171371998, 0.9878016355603961, 0.9906892446230443, 0.9927880321286583, 0.9849584715757225, 0.9897947149235449, 0.981615335230462, 0.9892451813062059, 0.9874484189372079, 0.9901003116644738, 0.059582702098381235, 0.541213635561087, 0.5631021253259709, 0.14520000003277223, 0.14820722429102096, 0.19666973018976353, 0.5160343083689879, 0.5167514731091744, 0.5126959625660079, 0.5625444389491407, 0.31299288374330025, 0.5949724969174621, 0.327552698952853, 0.1920893119499909, 0.18987180118382152, 0.5781746827447225, 0.2146374878105991, 0.33729559753066185, 0.1784447758040777, 0.15484776541732903, 0.18542619845627506, 0.1144691697719229, 0.10237125954936177, 0.17024718910200531, 0.1682231774202706, 0.2344820094635357, 0.17397122986190683, 0.2069109321233331, 0.10458747641186927, 0.1917556815740663, 0.17363452692523862, 0.08546829968772418, 0.17653011345537906, 0.12018483935608038, 0.19142779968324541, 0.09073069072994044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03026155707235556, 9.999999999998899e-05, 0.0006469868235124965, 9.999999999998899e-05, 9.999999999998899e-05, 0.004573141109635581, 0.07883365601425063, 0.13444891073412657, 0.07941849700882708, 0.09099546595258512, 0.014031963835678285, 0.12106508735760968, 0.10166726256316849, 0.07785234946977493, 0.07610345218046055, 0.035321002128340884, 0.025231552352570574, 0.036988387007719004, 0.06946055225794623, 0.06541572356990655, 0.055973348069822015, 0.08029560479590858, 0.07433360020468738, 0.0518496027782136, 0.03910964846890275, 0.04205238979931947, 0.10488737435518036, 0.04441505887344299, 0.03374737330858557, 0.2235056529735222, 0.04509880188562132, 0.05304135221926409, 0.07393858447697199, 0.5608002899494267, 0.44758469274742174, 0.4698248655625412, 0.49705546689313085, 0.48365282714454694, 0.4879553738475938, 0.49034854206869694, 0.49495817108803053, 0.49386763757234153, 0.09789311274745338, 0.06329919122026695, 0.10574237567319056, 0.10297038960195293, 0.09974940519700104, 0.12506863403714374, 0.0828107742949078, 0.141325081057327, 0.11116813816434479, 0.19979956038440572, 0.21233822935852453, 0.15045427080789975, 0.20923113498667534, 0.16484434309090124, 0.15490444052671482, 0.2829681580085308, 0.1872714552960819, 0.19258005243294352, 0.29920338046365735, 0.3067257549422949, 0.46956744740986944, 0.38885867470864177, 0.2057088644182934, 0.3007696803396487, 0.46165926459105655, 0.4577528018948509, 0.47541365636638344, 0.21759246624266504, 0.21178426430624098, 0.22286255088627926, 0.280576270924089, 0.19688433180663523, 0.24620607618687018, 0.23618422447958132, 0.28078339805897123, 0.2513077188623789, 0.2098816568230868, 0.17798144696693274, 0.19338983700958134, 0.18519234541525587, 0.18632916554794055, 0.18883516885537543, 0.1946385437518503, 0.19692037792301587, 0.20030463595335946, 0.2084756430266803, 0.21287133259022661, 0.19576481097649856, 0.2093784948994687, 0.28231655892387897, 0.18236163173869524, 0.1988000990910327, 0.20845906938954506, 0.2233739389064806, 0.8001350781804215, 0.16242753846488633, 0.1503640704539173, 0.17587892316223608, 0.19401557967734284, 0.19634373674059624, 0.6772850325012568, 0.16914675271422952, 0.20595679488438867, 0.40868311506781285, 0.1526276247727727, 0.20103086134139125, 0.20723700384627952, 0.460161492093241, 0.4353231735265939, 0.5703675828847523, 0.2091675166139867, 0.5357378582374867, 0.1901608904639941, 0.17584434227342605, 0.1981292533167489, 0.19913528804404346, 0.19228602909740267, 0.18766347174972942, 0.20167930140972956, 0.1834636333154699, 0.17951236454772956, 0.08936726633598191, 0.08877770808276053, 0.08427085925764677, 0.07736409525094712, 0.0869927675613339, 0.09511032561046218, 0.08233125153348841, 0.08118644750535897, 0.07870878615535692]}, "mutation_prompt": null}
{"id": "01c2710e-76e9-4970-9411-ad8f5486a6a5", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(30, dim * 5)  # Adjusted population for balance\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.6  # Increased cognitive coefficient for exploration\n        self.social_coeff = 1.4  # Decreased social coefficient for diversity\n        self.dynamic_topology_change_prob = 0.25  # Probability to change particle's neighborhood\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * np.sin(phase * np.pi / 2))  # Non-linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.dynamic_topology_change_prob:\n                neighbors = np.random.randint(0, self.population_size, self.population_size)\n                velocities += np.random.rand(self.population_size, self.dim) * (particles[neighbors] - particles)\n\n            for i in range(len(particles)):\n                if self.eval_count >= self.budget:\n                    break\n                if np.random.rand() < 0.15:  # Increased probability for local search\n                    neighbor = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    neighbor_score = func(neighbor)\n                    self.eval_count += 1\n                    if neighbor_score < personal_best_scores[i]:\n                        personal_best_positions[i] = neighbor\n                        personal_best_scores[i] = neighbor_score\n                        if neighbor_score < global_best_score:\n                            global_best_score = neighbor_score\n                            global_best_position = neighbor\n\n        return global_best_position", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced Hybrid Swarm Optimizer with adaptive neighborhood, non-linear inertia, and multi-phase exploration for improved convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3944182a-d600-496d-b151-12c5d9b2362d", "metadata": {"aucs": [0.7146448455064045, 0.7195488432595147, 0.7296212050438625, 0.7213217036135129, 0.18045447740538967, 0.7061754872292487, 0.7027212494800459, 0.7077100542900115, 0.7339940919989418, 0.5216377116866924, 0.47350848390947275, 0.500869143116067, 0.5023332012692551, 0.4854256100998495, 0.4925140886919521, 0.5239549609413354, 0.4992179614835238, 0.46570881595504154, 0.14479923834067343, 0.25336289735243067, 0.11289132413477532, 0.14475854433801993, 0.12456194718459168, 0.11656940185779008, 0.24129196597683145, 0.40160100328035775, 0.12965685662423343, 0.09876164442827362, 0.12053295755986859, 0.09955886788874957, 0.12736973387705475, 0.10375172207734018, 0.10565448558786905, 0.11671566703654823, 0.1212285143424926, 0.13485557171371998, 0.9878016355603961, 0.9906892446230443, 0.9927880321286583, 0.9849584715757225, 0.9897947149235449, 0.981615335230462, 0.9892451813062059, 0.9874484189372079, 0.9901003116644738, 0.059582702098381235, 0.541213635561087, 0.5631021253259709, 0.14520000003277223, 0.14820722429102096, 0.19666973018976353, 0.5160343083689879, 0.5167514731091744, 0.5126959625660079, 0.5625444389491407, 0.31299288374330025, 0.5949724969174621, 0.327552698952853, 0.1920893119499909, 0.18987180118382152, 0.5781746827447225, 0.2146374878105991, 0.33729559753066185, 0.1784447758040777, 0.15484776541732903, 0.18542619845627506, 0.1144691697719229, 0.10237125954936177, 0.17024718910200531, 0.1682231774202706, 0.2344820094635357, 0.17397122986190683, 0.2069109321233331, 0.10458747641186927, 0.1917556815740663, 0.17363452692523862, 0.08546829968772418, 0.17653011345537906, 0.12018483935608038, 0.19142779968324541, 0.09073069072994044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03026155707235556, 9.999999999998899e-05, 0.0006469868235124965, 9.999999999998899e-05, 9.999999999998899e-05, 0.004573141109635581, 0.07883365601425063, 0.13444891073412657, 0.07941849700882708, 0.09099546595258512, 0.014031963835678285, 0.12106508735760968, 0.10166726256316849, 0.07785234946977493, 0.07610345218046055, 0.035321002128340884, 0.025231552352570574, 0.036988387007719004, 0.06946055225794623, 0.06541572356990655, 0.055973348069822015, 0.08029560479590858, 0.07433360020468738, 0.0518496027782136, 0.03910964846890275, 0.04205238979931947, 0.10488737435518036, 0.04441505887344299, 0.03374737330858557, 0.2235056529735222, 0.04509880188562132, 0.05304135221926409, 0.07393858447697199, 0.5608002899494267, 0.44758469274742174, 0.4698248655625412, 0.49705546689313085, 0.48365282714454694, 0.4879553738475938, 0.49034854206869694, 0.49495817108803053, 0.49386763757234153, 0.09789311274745338, 0.06329919122026695, 0.10574237567319056, 0.10297038960195293, 0.09974940519700104, 0.12506863403714374, 0.0828107742949078, 0.141325081057327, 0.11116813816434479, 0.19979956038440572, 0.21233822935852453, 0.15045427080789975, 0.20923113498667534, 0.16484434309090124, 0.15490444052671482, 0.2829681580085308, 0.1872714552960819, 0.19258005243294352, 0.29920338046365735, 0.3067257549422949, 0.46956744740986944, 0.38885867470864177, 0.2057088644182934, 0.3007696803396487, 0.46165926459105655, 0.4577528018948509, 0.47541365636638344, 0.21759246624266504, 0.21178426430624098, 0.22286255088627926, 0.280576270924089, 0.19688433180663523, 0.24620607618687018, 0.23618422447958132, 0.28078339805897123, 0.2513077188623789, 0.2098816568230868, 0.17798144696693274, 0.19338983700958134, 0.18519234541525587, 0.18632916554794055, 0.18883516885537543, 0.1946385437518503, 0.19692037792301587, 0.20030463595335946, 0.2084756430266803, 0.21287133259022661, 0.19576481097649856, 0.2093784948994687, 0.28231655892387897, 0.18236163173869524, 0.1988000990910327, 0.20845906938954506, 0.2233739389064806, 0.8001350781804215, 0.16242753846488633, 0.1503640704539173, 0.17587892316223608, 0.19401557967734284, 0.19634373674059624, 0.6772850325012568, 0.16914675271422952, 0.20595679488438867, 0.40868311506781285, 0.1526276247727727, 0.20103086134139125, 0.20723700384627952, 0.460161492093241, 0.4353231735265939, 0.5703675828847523, 0.2091675166139867, 0.5357378582374867, 0.1901608904639941, 0.17584434227342605, 0.1981292533167489, 0.19913528804404346, 0.19228602909740267, 0.18766347174972942, 0.20167930140972956, 0.1834636333154699, 0.17951236454772956, 0.08936726633598191, 0.08877770808276053, 0.08427085925764677, 0.07736409525094712, 0.0869927675613339, 0.09511032561046218, 0.08233125153348841, 0.08118644750535897, 0.07870878615535692]}, "mutation_prompt": null}
{"id": "84920041-8dc6-4204-95ea-ed153f3630a2", "solution": "import numpy as np\n\nclass QuantumEnhancedSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Increased population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.3\n        self.cognitive_coeff = 2.0  # Higher cognitive coefficient for better local search\n        self.social_coeff = 1.5  # Balanced social coefficient\n        self.quantum_coeff = 0.5  # Quantum behavior introduction\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * phase  # Linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1, 1, (self.population_size, self.dim))\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n\n                for i, q_p in enumerate(quantum_particles):\n                    if self.eval_count >= self.budget:\n                        break\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n        \n        return global_best_position", "name": "QuantumEnhancedSwarmOptimizer", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization with cooperative learning and quantum superposition for diverse global exploration and robust convergence.", "configspace": "", "generation": 53, "fitness": 0.29116461770553254, "feedback": "The algorithm QuantumEnhancedSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "3944182a-d600-496d-b151-12c5d9b2362d", "metadata": {"aucs": [0.8034469212423827, 0.7740656922411523, 0.7748702358909143, 0.8280944962527033, 0.7884938956432748, 0.78101991669297, 0.8201903427930248, 0.786444104391438, 0.7504603955137089, 0.5256382073464052, 0.5448036747011062, 0.5184289448728303, 0.5583818917854111, 0.4409002419877651, 0.4730955182188643, 0.5526160105539657, 0.5413637741726407, 0.5692162220144463, 0.1359145902265616, 0.1485267618985341, 0.14359655934846138, 0.13599960832147406, 0.11570556123024667, 0.141034821330964, 0.6050835595656305, 0.15505906086345222, 0.1442729486744796, 0.11909243219201748, 0.09168548488347039, 0.14241236981212224, 0.188802464341028, 0.14356362798572952, 0.13160602942850452, 0.13039835830138202, 0.11686203582268406, 0.13226885647873443, 0.9818785876799984, 0.9922916716240827, 0.9846387816721429, 0.9746480364488835, 0.985617202145352, 0.9706235518618289, 0.9885498345438651, 0.9856133515909308, 0.977926999288298, 0.510435567631637, 0.5078957309697127, 0.4888341274528879, 0.5160775317518107, 0.5589087599498077, 0.5434350414826099, 0.531968120729915, 0.4993055724148082, 0.4952500446755401, 0.4727625831507677, 0.21851759875826948, 0.22390347726312676, 0.7300849232130595, 0.34426510945622735, 0.25314918307632817, 0.21718415735468577, 0.2299424566238556, 0.7438686228424043, 0.17454842047512553, 0.17177973855580853, 0.15400465227786042, 0.10536442889087427, 0.14709063732770733, 0.13953762253513946, 0.17205497066160003, 0.17556450412095437, 0.18009599564529855, 0.12664159862122704, 0.18994752898771539, 0.17920920409616503, 0.18380896416755654, 0.17972358834976998, 0.1251816120993351, 0.21809399713664746, 0.1140108363912894, 0.18647601909433908, 0.028005363553326057, 0.00042587668539506573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009635099548160775, 9.999999999998899e-05, 0.1271241232876097, 0.03911337254693115, 0.03127602976133925, 0.10393791620956783, 0.09419237535517133, 0.0460054846079464, 0.009919128333921945, 0.06301945903662232, 0.0740010148837087, 0.03356449714437659, 0.07104029903416553, 0.0283333071103129, 0.2135534526547117, 0.08674842075664779, 0.08258018155517055, 0.08273241279879961, 0.084103689079574, 0.06420705312797303, 0.12259525279177164, 0.08426612695474123, 0.2401169782365814, 0.15940386363328762, 0.11355509515640638, 0.11487324116526765, 0.2557803220370122, 0.2582720355007265, 0.07193064841118813, 0.07697321647886168, 0.5254360815339181, 0.5015626456817525, 0.5078009024966279, 0.5490976351445032, 0.49710050555846363, 0.5132299264801475, 0.522074784115222, 0.5282398326362259, 0.4950378979577984, 0.07953631183983567, 0.12659831453549142, 0.09160467744591738, 0.11501182294252577, 0.12684873879601544, 0.09333121972675507, 0.1169382930413605, 0.0970659163521772, 0.10382575922378567, 0.240926388020129, 0.2330407256675482, 0.22142278930026282, 0.21621852776160666, 0.3042944386162306, 0.1889323225650129, 0.23312142928873658, 0.23523799981767046, 0.21928914473174776, 0.3853405832942006, 0.30450390701917296, 0.2892063340635017, 0.23837035057542966, 0.26484531568576775, 0.34767324329972793, 0.46043467822318385, 0.3768988881947619, 0.4279779369005292, 0.23898868213468594, 0.24191864597400192, 0.21529672029847247, 0.17787040321508718, 0.2944740548278445, 0.2694923606307298, 0.23172940697532918, 0.25412148261240186, 0.2709893617964614, 0.2073399211242305, 0.21009140241488278, 0.20385917460930736, 0.20578248386459996, 0.16010922703241215, 0.2088919828074386, 0.20290122892982487, 0.2000384119755374, 0.21159602502385022, 0.20137627856870344, 0.19656367637749994, 0.20937371711120034, 0.5463164422635065, 0.23354182403180102, 0.20761677554560642, 0.20424842106357455, 0.20202334168527036, 0.20790161356436443, 0.8555353575045516, 0.1986765469880586, 0.15361812447959933, 0.8401755103490995, 0.19977821791669992, 0.19802402147412035, 0.14208110417783848, 0.1701499509247063, 0.791869558725476, 0.6393226782374226, 0.21121365928763658, 0.15530590036111735, 0.20383740160449193, 0.23969147658604895, 0.151737764560391, 0.10489282918878728, 0.10449123167540586, 0.49522366264320605, 0.21515829688063637, 0.19352048007743594, 0.18496005813105965, 0.18213880076443145, 0.20439245507777126, 0.19671649173344719, 0.20918890886866337, 0.2035555811038381, 0.20187959592576377, 0.09843971998728007, 0.08783727416147902, 0.07786037390165768, 0.0743510219134631, 0.10061925905094704, 0.07981764069798114, 0.08238719990423782, 0.08575115406980971, 0.08891688092309291]}, "mutation_prompt": null}
{"id": "72f772ec-7014-4a1d-b45b-7cd35fddab17", "solution": "import numpy as np\n\nclass EnhancedQuantumSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 7)  # Slightly increased population for enhanced diversity\n        self.inertia_weight_init = 0.9  # Higher initial inertia weight for global exploration\n        self.inertia_weight_final = 0.4  # Increased final inertia weight for maintaining some exploration\n        self.cognitive_coeff = 1.5  # Reduced cognitive coefficient for less local focus\n        self.social_coeff = 1.7  # Increased social coefficient for improved convergence\n        self.quantum_coeff = 0.3  # Reduced quantum coefficient for balance\n        self.mutation_rate = 0.1  # Added mutation for diversity\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * phase\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Mutation step to enhance exploration\n            mutation = np.random.uniform(-0.5, 0.5, particles.shape) < self.mutation_rate\n            particles += mutation * np.random.uniform(-1, 1, particles.shape)\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1, 1, (self.population_size, self.dim))\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n\n                for i, q_p in enumerate(quantum_particles):\n                    if self.eval_count >= self.budget:\n                        break\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n        \n        return global_best_position", "name": "EnhancedQuantumSwarmOptimizer", "description": "Enhanced Quantum Swarm with adaptive mutation and dynamic parameter tuning for improved exploration and exploitation balance.", "configspace": "", "generation": 54, "fitness": 0.16265003398018238, "feedback": "The algorithm EnhancedQuantumSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "84920041-8dc6-4204-95ea-ed153f3630a2", "metadata": {"aucs": [0.27619296768031076, 0.2581897422093431, 0.30282402195094127, 0.2812565329706703, 0.28609096139303647, 0.2744932210897627, 0.30324804239780656, 0.2824297974666632, 0.27077219410148934, 0.00016956041033300284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08633903399624288, 0.07287936756806279, 0.07196101556163126, 0.06828042775651899, 0.07158503096617841, 0.0766756910612717, 0.08779871855609489, 0.09834624924596158, 0.07976678822150918, 0.06573690994145587, 0.06975733951493546, 0.06296933353265699, 0.07123696982416583, 0.06240231286677733, 0.07521937693415237, 0.08148963402253173, 0.05790252869263679, 0.07336383250888612, 0.987715736258161, 0.9903484948770982, 0.9857727569015274, 0.974072275363809, 0.9838709139724463, 0.9757205775062247, 0.9840763461260524, 0.9877313238185519, 0.9819812587742567, 0.1842738200439109, 0.15152537611318107, 0.13530713506956693, 0.14308547039904773, 0.16239693249747256, 0.1681438656929316, 0.15512421323809444, 0.16613024918827846, 0.1526888763896781, 0.1993552858968023, 0.17926054824664495, 0.19583890092353762, 0.18271244949055643, 0.18024253003524204, 0.2120171011502443, 0.18183134237415943, 0.18885383468803252, 0.17221039380887648, 0.07289696820943758, 0.07052166678352878, 0.07904796041917539, 0.07562644308326338, 0.06875098162919913, 0.08957166782680703, 0.07365316338102312, 0.07347659411514851, 0.07820299427028421, 0.08058620487923929, 0.07610231044313676, 0.07597900578439476, 0.07711725317921025, 0.030332224324825074, 0.0989378767160699, 0.07292376342937334, 0.026516330110969988, 0.06338504472771278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04226148658823092, 0.043058257291952895, 0.03162198888378076, 0.04629333461825025, 0.010526703746162824, 0.017818555116497214, 0.04872730062755748, 0.05009533541014877, 0.06640267171540903, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01920907156510132, 0.02115481756138382, 0.023334823053019815, 0.020349450999725405, 0.026062198412511672, 0.024593696126258724, 0.03560117128032858, 0.027227299525588, 0.02848477254472659, 0.2677724484298598, 0.2923912917467574, 0.2620736754000149, 0.2861456619952587, 0.2840443504814444, 0.2965003469696147, 0.3089378618305738, 0.26662169070276964, 0.28678692356020774, 0.07667255831837261, 0.08847548145807282, 0.08016748230011439, 0.07606382619231356, 0.08522437399417526, 0.0768153275272132, 0.09359761460918381, 0.0849187630906506, 0.10340621057014832, 0.13192941799625857, 0.1654227918600727, 0.15255810261267455, 0.1749614222035767, 0.1700182865132328, 0.14346831139191019, 0.14496377974380448, 0.149783108163975, 0.1508064006404798, 0.20885195987469818, 0.22638835745896202, 0.20972712516863545, 0.17432207475579165, 0.2024513430787407, 0.21206068833423752, 0.22220501016882888, 0.21214116452623466, 0.21785647207517156, 0.16237123728234215, 0.15186471407265312, 0.14266247619016958, 0.13492349671423143, 0.1543912801362498, 0.14284437551855012, 0.16163290228628557, 0.16430652900370257, 0.1703195726584923, 0.18104276222273918, 0.18843092787188143, 0.18881428687257384, 0.1945140693152131, 0.17994696564820511, 0.18617189596131334, 0.18091210675470648, 0.17910320390750223, 0.19421669473702585, 0.1889668165368088, 0.16070280313742746, 0.17524716684913055, 0.17001840826529968, 0.16806659501540966, 0.17224578700735726, 0.16953654194458267, 0.16940730438039153, 0.17018712563368787, 0.357623850062596, 0.15751467948282827, 0.1506406763273922, 0.30904896487398514, 0.17963390752257224, 0.1749908352087557, 0.12998352398209623, 0.16737765221260925, 0.39826375683226, 0.25491532482069523, 0.1877057954290794, 0.13968355722856685, 0.18109986399107225, 0.2701780621233213, 0.13395840528906555, 0.20380223115497353, 0.19457636285711277, 0.3499717334755218, 0.18725164502675162, 0.18782150463305247, 0.191497269230259, 0.17862816152826166, 0.17826776697502977, 0.1831630944672965, 0.18896681286369577, 0.17986059259297804, 0.19145827998683662, 0.07141227038340947, 0.0657446207703446, 0.06713352487210344, 0.07168906228117611, 0.07107367163520006, 0.07404936324597144, 0.07457839323735693, 0.0631869854626046, 0.07555838631875744]}, "mutation_prompt": null}
{"id": "b9a295bd-a4f8-4464-bb5c-fb1bee1e2768", "solution": "import numpy as np\n\nclass QuantumEnhancedSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Increased population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.3\n        self.cognitive_coeff = 2.0  # Higher cognitive coefficient for better local search\n        self.social_coeff = 1.5  # Balanced social coefficient\n        self.quantum_coeff = 0.5  # Quantum behavior introduction\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * phase  # Linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1, 1, (self.population_size, self.dim))\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n\n                for i, q_p in enumerate(quantum_particles):\n                    if self.eval_count >= self.budget:\n                        break\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n        \n        return global_best_position", "name": "QuantumEnhancedSwarmOptimizer", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization with cooperative learning and quantum superposition for diverse global exploration and robust convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "84920041-8dc6-4204-95ea-ed153f3630a2", "metadata": {"aucs": [0.8034469212423827, 0.7740656922411523, 0.7748702358909143, 0.8280944962527033, 0.7884938956432748, 0.78101991669297, 0.8201903427930248, 0.786444104391438, 0.7504603955137089, 0.5256382073464052, 0.5448036747011062, 0.5184289448728303, 0.5583818917854111, 0.4409002419877651, 0.4730955182188643, 0.5526160105539657, 0.5413637741726407, 0.5692162220144463, 0.1359145902265616, 0.1485267618985341, 0.14359655934846138, 0.13599960832147406, 0.11570556123024667, 0.141034821330964, 0.6050835595656305, 0.15505906086345222, 0.1442729486744796, 0.11909243219201748, 0.09168548488347039, 0.14241236981212224, 0.188802464341028, 0.14356362798572952, 0.13160602942850452, 0.13039835830138202, 0.11686203582268406, 0.13226885647873443, 0.9818785876799984, 0.9922916716240827, 0.9846387816721429, 0.9746480364488835, 0.985617202145352, 0.9706235518618289, 0.9885498345438651, 0.9856133515909308, 0.977926999288298, 0.510435567631637, 0.5078957309697127, 0.4888341274528879, 0.5160775317518107, 0.5589087599498077, 0.5434350414826099, 0.531968120729915, 0.4993055724148082, 0.4952500446755401, 0.4727625831507677, 0.21851759875826948, 0.22390347726312676, 0.7300849232130595, 0.34426510945622735, 0.25314918307632817, 0.21718415735468577, 0.2299424566238556, 0.7438686228424043, 0.17454842047512553, 0.17177973855580853, 0.15400465227786042, 0.10536442889087427, 0.14709063732770733, 0.13953762253513946, 0.17205497066160003, 0.17556450412095437, 0.18009599564529855, 0.12664159862122704, 0.18994752898771539, 0.17920920409616503, 0.18380896416755654, 0.17972358834976998, 0.1251816120993351, 0.21809399713664746, 0.1140108363912894, 0.18647601909433908, 0.028005363553326057, 0.00042587668539506573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009635099548160775, 9.999999999998899e-05, 0.1271241232876097, 0.03911337254693115, 0.03127602976133925, 0.10393791620956783, 0.09419237535517133, 0.0460054846079464, 0.009919128333921945, 0.06301945903662232, 0.0740010148837087, 0.03356449714437659, 0.07104029903416553, 0.0283333071103129, 0.2135534526547117, 0.08674842075664779, 0.08258018155517055, 0.08273241279879961, 0.084103689079574, 0.06420705312797303, 0.12259525279177164, 0.08426612695474123, 0.2401169782365814, 0.15940386363328762, 0.11355509515640638, 0.11487324116526765, 0.2557803220370122, 0.2582720355007265, 0.07193064841118813, 0.07697321647886168, 0.5254360815339181, 0.5015626456817525, 0.5078009024966279, 0.5490976351445032, 0.49710050555846363, 0.5132299264801475, 0.522074784115222, 0.5282398326362259, 0.4950378979577984, 0.07953631183983567, 0.12659831453549142, 0.09160467744591738, 0.11501182294252577, 0.12684873879601544, 0.09333121972675507, 0.1169382930413605, 0.0970659163521772, 0.10382575922378567, 0.240926388020129, 0.2330407256675482, 0.22142278930026282, 0.21621852776160666, 0.3042944386162306, 0.1889323225650129, 0.23312142928873658, 0.23523799981767046, 0.21928914473174776, 0.3853405832942006, 0.30450390701917296, 0.2892063340635017, 0.23837035057542966, 0.26484531568576775, 0.34767324329972793, 0.46043467822318385, 0.3768988881947619, 0.4279779369005292, 0.23898868213468594, 0.24191864597400192, 0.21529672029847247, 0.17787040321508718, 0.2944740548278445, 0.2694923606307298, 0.23172940697532918, 0.25412148261240186, 0.2709893617964614, 0.2073399211242305, 0.21009140241488278, 0.20385917460930736, 0.20578248386459996, 0.16010922703241215, 0.2088919828074386, 0.20290122892982487, 0.2000384119755374, 0.21159602502385022, 0.20137627856870344, 0.19656367637749994, 0.20937371711120034, 0.5463164422635065, 0.23354182403180102, 0.20761677554560642, 0.20424842106357455, 0.20202334168527036, 0.20790161356436443, 0.8555353575045516, 0.1986765469880586, 0.15361812447959933, 0.8401755103490995, 0.19977821791669992, 0.19802402147412035, 0.14208110417783848, 0.1701499509247063, 0.791869558725476, 0.6393226782374226, 0.21121365928763658, 0.15530590036111735, 0.20383740160449193, 0.23969147658604895, 0.151737764560391, 0.10489282918878728, 0.10449123167540586, 0.49522366264320605, 0.21515829688063637, 0.19352048007743594, 0.18496005813105965, 0.18213880076443145, 0.20439245507777126, 0.19671649173344719, 0.20918890886866337, 0.2035555811038381, 0.20187959592576377, 0.09843971998728007, 0.08783727416147902, 0.07786037390165768, 0.0743510219134631, 0.10061925905094704, 0.07981764069798114, 0.08238719990423782, 0.08575115406980971, 0.08891688092309291]}, "mutation_prompt": null}
{"id": "cb634682-c084-47dc-83fb-8d84237ed4ec", "solution": "import numpy as np\n\nclass QuantumEnhancedSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Increased population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.3\n        self.cognitive_coeff = 2.0  # Higher cognitive coefficient for better local search\n        self.social_coeff = 1.5  # Balanced social coefficient\n        self.quantum_coeff = 0.5  # Quantum behavior introduction\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * phase  # Linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1, 1, (self.population_size, self.dim))\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n\n                for i, q_p in enumerate(quantum_particles):\n                    if self.eval_count >= self.budget:\n                        break\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n        \n        return global_best_position", "name": "QuantumEnhancedSwarmOptimizer", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization with cooperative learning and quantum superposition for diverse global exploration and robust convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "84920041-8dc6-4204-95ea-ed153f3630a2", "metadata": {"aucs": [0.8034469212423827, 0.7740656922411523, 0.7748702358909143, 0.8280944962527033, 0.7884938956432748, 0.78101991669297, 0.8201903427930248, 0.786444104391438, 0.7504603955137089, 0.5256382073464052, 0.5448036747011062, 0.5184289448728303, 0.5583818917854111, 0.4409002419877651, 0.4730955182188643, 0.5526160105539657, 0.5413637741726407, 0.5692162220144463, 0.1359145902265616, 0.1485267618985341, 0.14359655934846138, 0.13599960832147406, 0.11570556123024667, 0.141034821330964, 0.6050835595656305, 0.15505906086345222, 0.1442729486744796, 0.11909243219201748, 0.09168548488347039, 0.14241236981212224, 0.188802464341028, 0.14356362798572952, 0.13160602942850452, 0.13039835830138202, 0.11686203582268406, 0.13226885647873443, 0.9818785876799984, 0.9922916716240827, 0.9846387816721429, 0.9746480364488835, 0.985617202145352, 0.9706235518618289, 0.9885498345438651, 0.9856133515909308, 0.977926999288298, 0.510435567631637, 0.5078957309697127, 0.4888341274528879, 0.5160775317518107, 0.5589087599498077, 0.5434350414826099, 0.531968120729915, 0.4993055724148082, 0.4952500446755401, 0.4727625831507677, 0.21851759875826948, 0.22390347726312676, 0.7300849232130595, 0.34426510945622735, 0.25314918307632817, 0.21718415735468577, 0.2299424566238556, 0.7438686228424043, 0.17454842047512553, 0.17177973855580853, 0.15400465227786042, 0.10536442889087427, 0.14709063732770733, 0.13953762253513946, 0.17205497066160003, 0.17556450412095437, 0.18009599564529855, 0.12664159862122704, 0.18994752898771539, 0.17920920409616503, 0.18380896416755654, 0.17972358834976998, 0.1251816120993351, 0.21809399713664746, 0.1140108363912894, 0.18647601909433908, 0.028005363553326057, 0.00042587668539506573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009635099548160775, 9.999999999998899e-05, 0.1271241232876097, 0.03911337254693115, 0.03127602976133925, 0.10393791620956783, 0.09419237535517133, 0.0460054846079464, 0.009919128333921945, 0.06301945903662232, 0.0740010148837087, 0.03356449714437659, 0.07104029903416553, 0.0283333071103129, 0.2135534526547117, 0.08674842075664779, 0.08258018155517055, 0.08273241279879961, 0.084103689079574, 0.06420705312797303, 0.12259525279177164, 0.08426612695474123, 0.2401169782365814, 0.15940386363328762, 0.11355509515640638, 0.11487324116526765, 0.2557803220370122, 0.2582720355007265, 0.07193064841118813, 0.07697321647886168, 0.5254360815339181, 0.5015626456817525, 0.5078009024966279, 0.5490976351445032, 0.49710050555846363, 0.5132299264801475, 0.522074784115222, 0.5282398326362259, 0.4950378979577984, 0.07953631183983567, 0.12659831453549142, 0.09160467744591738, 0.11501182294252577, 0.12684873879601544, 0.09333121972675507, 0.1169382930413605, 0.0970659163521772, 0.10382575922378567, 0.240926388020129, 0.2330407256675482, 0.22142278930026282, 0.21621852776160666, 0.3042944386162306, 0.1889323225650129, 0.23312142928873658, 0.23523799981767046, 0.21928914473174776, 0.3853405832942006, 0.30450390701917296, 0.2892063340635017, 0.23837035057542966, 0.26484531568576775, 0.34767324329972793, 0.46043467822318385, 0.3768988881947619, 0.4279779369005292, 0.23898868213468594, 0.24191864597400192, 0.21529672029847247, 0.17787040321508718, 0.2944740548278445, 0.2694923606307298, 0.23172940697532918, 0.25412148261240186, 0.2709893617964614, 0.2073399211242305, 0.21009140241488278, 0.20385917460930736, 0.20578248386459996, 0.16010922703241215, 0.2088919828074386, 0.20290122892982487, 0.2000384119755374, 0.21159602502385022, 0.20137627856870344, 0.19656367637749994, 0.20937371711120034, 0.5463164422635065, 0.23354182403180102, 0.20761677554560642, 0.20424842106357455, 0.20202334168527036, 0.20790161356436443, 0.8555353575045516, 0.1986765469880586, 0.15361812447959933, 0.8401755103490995, 0.19977821791669992, 0.19802402147412035, 0.14208110417783848, 0.1701499509247063, 0.791869558725476, 0.6393226782374226, 0.21121365928763658, 0.15530590036111735, 0.20383740160449193, 0.23969147658604895, 0.151737764560391, 0.10489282918878728, 0.10449123167540586, 0.49522366264320605, 0.21515829688063637, 0.19352048007743594, 0.18496005813105965, 0.18213880076443145, 0.20439245507777126, 0.19671649173344719, 0.20918890886866337, 0.2035555811038381, 0.20187959592576377, 0.09843971998728007, 0.08783727416147902, 0.07786037390165768, 0.0743510219134631, 0.10061925905094704, 0.07981764069798114, 0.08238719990423782, 0.08575115406980971, 0.08891688092309291]}, "mutation_prompt": null}
{"id": "ce57fa85-41d6-49c3-9551-87e92aeaf50b", "solution": "import numpy as np\n\nclass HybridQuantumEvolutionarySwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.3\n        self.cognitive_coeff = 1.8\n        self.social_coeff = 1.8\n        self.quantum_coeff = 0.5\n        self.mutation_rate = 0.1  # Introduce mutation\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * phase\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n                          \n            if np.random.rand() < self.mutation_rate:\n                mutations = np.random.normal(0, 1, (self.population_size, self.dim))\n                particles += mutations  # Apply mutations\n            \n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n\n                for i, q_p in enumerate(quantum_particles):\n                    if self.eval_count >= self.budget:\n                        break\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n        \n        return global_best_position", "name": "HybridQuantumEvolutionarySwarmOptimizer", "description": "Hybrid Quantum-Guided Evolutionary Swarm Optimizer with adaptive mutation and hierarchical learning for enhanced search and convergence.", "configspace": "", "generation": 57, "fitness": 0.21713558752317416, "feedback": "The algorithm HybridQuantumEvolutionarySwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "84920041-8dc6-4204-95ea-ed153f3630a2", "metadata": {"aucs": [0.5076810694817557, 0.4934380363856291, 0.4294197020853713, 0.4996139760773731, 0.5275052031855967, 0.4714702539712706, 0.4731227839369514, 0.5036597633005501, 0.4591434991020158, 0.14677278272199923, 0.08176300661630043, 9.999999999998899e-05, 0.09111059941373567, 0.05911985843289713, 0.09158288245460877, 0.043364441032262446, 0.0614388170795519, 0.03330603092493423, 0.10800754281837632, 0.11234042432620495, 0.11834671349363979, 0.13472697612047302, 0.10553061549972387, 0.1453693948654533, 0.12533728697029123, 0.10803428393973047, 0.09463585926417895, 0.10220402488999569, 0.10226049707059393, 0.10817165128628459, 0.09036565635700977, 0.09615658079487499, 0.10257836132262732, 0.09987882373814749, 0.10134869149968195, 0.1268388943779024, 0.9873975108749311, 0.9886810896663085, 0.9825891612031085, 0.9749720793638249, 0.977789501008479, 0.9713573887481256, 0.9815636019773444, 0.9816310402610969, 0.9793388956583917, 0.29519525248431133, 0.26973846305157445, 0.27399750862979755, 0.2930379851121704, 0.2528543570741367, 0.24786940260242396, 0.2999973890875508, 0.25616376791288886, 0.26098287234709727, 0.35502231314258836, 0.20331907843776642, 0.21177142856622644, 0.4401110513889548, 0.32540123962933654, 0.207927221339814, 0.21414131136967685, 0.22015903054876884, 0.2433395785240664, 0.1821296674133731, 0.09303032910021414, 0.13723666906865528, 0.1489696991949282, 0.11478341671524994, 0.1311224470002359, 0.1408017523452545, 0.12164231376242496, 0.1357864544684233, 0.17027022224779453, 0.16243757899603062, 0.12816086335771526, 0.1761787315395248, 0.17229524270130692, 0.10767845225679962, 0.15819145158412162, 0.10087569060974566, 0.10535547921868982, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023470341142239892, 9.999999999998899e-05, 0.01394728737807438, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844608127726224, 0.034249958781298884, 0.12315722938111417, 0.07393205017518412, 0.020218488204964524, 0.033234916960000915, 0.04576547602665637, 0.10507282596727252, 0.06038649684039088, 0.02157377708764685, 0.016364594951448486, 0.007664252401005656, 0.03424613841067026, 0.02709816259056419, 0.0033512754776584552, 0.041744000148110194, 0.04775311677636351, 0.020939039307583007, 0.08500981948316566, 0.044900631358646526, 0.09843988087798095, 0.0796010414216769, 0.13779551568500392, 0.07702538976084927, 0.11581108211148639, 0.07029028584606878, 0.08702136788814985, 0.43757106181856165, 0.40798657274000294, 0.3814907788167279, 0.41165955004340116, 0.42941999411328957, 0.39062748062788855, 0.39629234900300736, 0.37576550404394793, 0.38216980229917774, 0.11352040614011838, 0.0887182373831038, 0.0937407723198006, 0.1159141946060297, 0.09290767067204797, 0.09579365281310515, 0.09846466352664462, 0.11396713444207596, 0.10315329576322452, 0.18341065907814003, 0.1665353377679094, 0.23175102603259412, 0.16020928084820696, 0.2944419186653483, 0.17022769316690733, 0.23109996667215915, 0.20743700359629913, 0.20570975653766743, 0.2261260389295644, 0.2225377999184851, 0.2941002708212018, 0.3065769951007902, 0.20761913055746362, 0.1971706202430369, 0.3163910643359833, 0.3036142602945544, 0.28586089415467697, 0.21189265975303384, 0.2191537526823789, 0.19287135241210607, 0.24289823586654768, 0.1818083201821663, 0.17303592262265577, 0.2694705355494671, 0.21623893192982868, 0.20231342833802946, 0.19830007447891007, 0.179868100883672, 0.18400840800722063, 0.2096133980545506, 0.21527295637895338, 0.18937070764760555, 0.18376760412630366, 0.21368666885258447, 0.19766055781264558, 0.21129198446668074, 0.19948616820182596, 0.18590623070665457, 0.2726081038955458, 0.22084993212742277, 0.210224648696393, 0.3263418192887141, 0.182653628171892, 0.18394622514261172, 0.6818703209403263, 0.16590385962950271, 0.15230817443269784, 0.7003691600302402, 0.19639134233529787, 0.19567298590123694, 0.14035856944283465, 0.16944778905073732, 0.6580590562628623, 0.4382119617047683, 0.2103635113608988, 0.15218736662187415, 0.20088736711714827, 0.3310052453690133, 0.14627837954426504, 0.2105938099214265, 0.20861885043285033, 0.31306167218350067, 0.2116934402448073, 0.1946587986460382, 0.21072308263702766, 0.1860945802176761, 0.19891398792545456, 0.18469145900678652, 0.19557003454684196, 0.1939083774890874, 0.18057616818856204, 0.06948680587051637, 0.09262389279199146, 0.08532420458263534, 0.0820097354990128, 0.085894926393555, 0.07369227085063068, 0.09184704077121009, 0.08237112222033216, 0.08007850825546958]}, "mutation_prompt": null}
{"id": "99bc8423-8d92-4909-810b-a22495737b94", "solution": "import numpy as np\n\nclass QuantumEnhancedSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Increased population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.3\n        self.cognitive_coeff = 2.0  # Higher cognitive coefficient for better local search\n        self.social_coeff = 1.5  # Balanced social coefficient\n        self.quantum_coeff = 0.5  # Quantum behavior introduction\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * phase  # Linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1, 1, (self.population_size, self.dim))\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n\n                for i, q_p in enumerate(quantum_particles):\n                    if self.eval_count >= self.budget:\n                        break\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n        \n        return global_best_position", "name": "QuantumEnhancedSwarmOptimizer", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization with cooperative learning and quantum superposition for diverse global exploration and robust convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "84920041-8dc6-4204-95ea-ed153f3630a2", "metadata": {"aucs": [0.8034469212423827, 0.7740656922411523, 0.7748702358909143, 0.8280944962527033, 0.7884938956432748, 0.78101991669297, 0.8201903427930248, 0.786444104391438, 0.7504603955137089, 0.5256382073464052, 0.5448036747011062, 0.5184289448728303, 0.5583818917854111, 0.4409002419877651, 0.4730955182188643, 0.5526160105539657, 0.5413637741726407, 0.5692162220144463, 0.1359145902265616, 0.1485267618985341, 0.14359655934846138, 0.13599960832147406, 0.11570556123024667, 0.141034821330964, 0.6050835595656305, 0.15505906086345222, 0.1442729486744796, 0.11909243219201748, 0.09168548488347039, 0.14241236981212224, 0.188802464341028, 0.14356362798572952, 0.13160602942850452, 0.13039835830138202, 0.11686203582268406, 0.13226885647873443, 0.9818785876799984, 0.9922916716240827, 0.9846387816721429, 0.9746480364488835, 0.985617202145352, 0.9706235518618289, 0.9885498345438651, 0.9856133515909308, 0.977926999288298, 0.510435567631637, 0.5078957309697127, 0.4888341274528879, 0.5160775317518107, 0.5589087599498077, 0.5434350414826099, 0.531968120729915, 0.4993055724148082, 0.4952500446755401, 0.4727625831507677, 0.21851759875826948, 0.22390347726312676, 0.7300849232130595, 0.34426510945622735, 0.25314918307632817, 0.21718415735468577, 0.2299424566238556, 0.7438686228424043, 0.17454842047512553, 0.17177973855580853, 0.15400465227786042, 0.10536442889087427, 0.14709063732770733, 0.13953762253513946, 0.17205497066160003, 0.17556450412095437, 0.18009599564529855, 0.12664159862122704, 0.18994752898771539, 0.17920920409616503, 0.18380896416755654, 0.17972358834976998, 0.1251816120993351, 0.21809399713664746, 0.1140108363912894, 0.18647601909433908, 0.028005363553326057, 0.00042587668539506573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009635099548160775, 9.999999999998899e-05, 0.1271241232876097, 0.03911337254693115, 0.03127602976133925, 0.10393791620956783, 0.09419237535517133, 0.0460054846079464, 0.009919128333921945, 0.06301945903662232, 0.0740010148837087, 0.03356449714437659, 0.07104029903416553, 0.0283333071103129, 0.2135534526547117, 0.08674842075664779, 0.08258018155517055, 0.08273241279879961, 0.084103689079574, 0.06420705312797303, 0.12259525279177164, 0.08426612695474123, 0.2401169782365814, 0.15940386363328762, 0.11355509515640638, 0.11487324116526765, 0.2557803220370122, 0.2582720355007265, 0.07193064841118813, 0.07697321647886168, 0.5254360815339181, 0.5015626456817525, 0.5078009024966279, 0.5490976351445032, 0.49710050555846363, 0.5132299264801475, 0.522074784115222, 0.5282398326362259, 0.4950378979577984, 0.07953631183983567, 0.12659831453549142, 0.09160467744591738, 0.11501182294252577, 0.12684873879601544, 0.09333121972675507, 0.1169382930413605, 0.0970659163521772, 0.10382575922378567, 0.240926388020129, 0.2330407256675482, 0.22142278930026282, 0.21621852776160666, 0.3042944386162306, 0.1889323225650129, 0.23312142928873658, 0.23523799981767046, 0.21928914473174776, 0.3853405832942006, 0.30450390701917296, 0.2892063340635017, 0.23837035057542966, 0.26484531568576775, 0.34767324329972793, 0.46043467822318385, 0.3768988881947619, 0.4279779369005292, 0.23898868213468594, 0.24191864597400192, 0.21529672029847247, 0.17787040321508718, 0.2944740548278445, 0.2694923606307298, 0.23172940697532918, 0.25412148261240186, 0.2709893617964614, 0.2073399211242305, 0.21009140241488278, 0.20385917460930736, 0.20578248386459996, 0.16010922703241215, 0.2088919828074386, 0.20290122892982487, 0.2000384119755374, 0.21159602502385022, 0.20137627856870344, 0.19656367637749994, 0.20937371711120034, 0.5463164422635065, 0.23354182403180102, 0.20761677554560642, 0.20424842106357455, 0.20202334168527036, 0.20790161356436443, 0.8555353575045516, 0.1986765469880586, 0.15361812447959933, 0.8401755103490995, 0.19977821791669992, 0.19802402147412035, 0.14208110417783848, 0.1701499509247063, 0.791869558725476, 0.6393226782374226, 0.21121365928763658, 0.15530590036111735, 0.20383740160449193, 0.23969147658604895, 0.151737764560391, 0.10489282918878728, 0.10449123167540586, 0.49522366264320605, 0.21515829688063637, 0.19352048007743594, 0.18496005813105965, 0.18213880076443145, 0.20439245507777126, 0.19671649173344719, 0.20918890886866337, 0.2035555811038381, 0.20187959592576377, 0.09843971998728007, 0.08783727416147902, 0.07786037390165768, 0.0743510219134631, 0.10061925905094704, 0.07981764069798114, 0.08238719990423782, 0.08575115406980971, 0.08891688092309291]}, "mutation_prompt": null}
{"id": "c4dab20b-fb65-482e-98ad-e2ed78bc0bf7", "solution": "import numpy as np\n\nclass QuantumEnhancedSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Increased population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.3\n        self.cognitive_coeff = 2.0  # Higher cognitive coefficient for better local search\n        self.social_coeff = 1.5  # Balanced social coefficient\n        self.quantum_coeff = 0.5  # Quantum behavior introduction\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * phase  # Linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1, 1, (self.population_size, self.dim))\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n\n                for i, q_p in enumerate(quantum_particles):\n                    if self.eval_count >= self.budget:\n                        break\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n        \n        return global_best_position", "name": "QuantumEnhancedSwarmOptimizer", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization with cooperative learning and quantum superposition for diverse global exploration and robust convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "84920041-8dc6-4204-95ea-ed153f3630a2", "metadata": {"aucs": [0.8034469212423827, 0.7740656922411523, 0.7748702358909143, 0.8280944962527033, 0.7884938956432748, 0.78101991669297, 0.8201903427930248, 0.786444104391438, 0.7504603955137089, 0.5256382073464052, 0.5448036747011062, 0.5184289448728303, 0.5583818917854111, 0.4409002419877651, 0.4730955182188643, 0.5526160105539657, 0.5413637741726407, 0.5692162220144463, 0.1359145902265616, 0.1485267618985341, 0.14359655934846138, 0.13599960832147406, 0.11570556123024667, 0.141034821330964, 0.6050835595656305, 0.15505906086345222, 0.1442729486744796, 0.11909243219201748, 0.09168548488347039, 0.14241236981212224, 0.188802464341028, 0.14356362798572952, 0.13160602942850452, 0.13039835830138202, 0.11686203582268406, 0.13226885647873443, 0.9818785876799984, 0.9922916716240827, 0.9846387816721429, 0.9746480364488835, 0.985617202145352, 0.9706235518618289, 0.9885498345438651, 0.9856133515909308, 0.977926999288298, 0.510435567631637, 0.5078957309697127, 0.4888341274528879, 0.5160775317518107, 0.5589087599498077, 0.5434350414826099, 0.531968120729915, 0.4993055724148082, 0.4952500446755401, 0.4727625831507677, 0.21851759875826948, 0.22390347726312676, 0.7300849232130595, 0.34426510945622735, 0.25314918307632817, 0.21718415735468577, 0.2299424566238556, 0.7438686228424043, 0.17454842047512553, 0.17177973855580853, 0.15400465227786042, 0.10536442889087427, 0.14709063732770733, 0.13953762253513946, 0.17205497066160003, 0.17556450412095437, 0.18009599564529855, 0.12664159862122704, 0.18994752898771539, 0.17920920409616503, 0.18380896416755654, 0.17972358834976998, 0.1251816120993351, 0.21809399713664746, 0.1140108363912894, 0.18647601909433908, 0.028005363553326057, 0.00042587668539506573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009635099548160775, 9.999999999998899e-05, 0.1271241232876097, 0.03911337254693115, 0.03127602976133925, 0.10393791620956783, 0.09419237535517133, 0.0460054846079464, 0.009919128333921945, 0.06301945903662232, 0.0740010148837087, 0.03356449714437659, 0.07104029903416553, 0.0283333071103129, 0.2135534526547117, 0.08674842075664779, 0.08258018155517055, 0.08273241279879961, 0.084103689079574, 0.06420705312797303, 0.12259525279177164, 0.08426612695474123, 0.2401169782365814, 0.15940386363328762, 0.11355509515640638, 0.11487324116526765, 0.2557803220370122, 0.2582720355007265, 0.07193064841118813, 0.07697321647886168, 0.5254360815339181, 0.5015626456817525, 0.5078009024966279, 0.5490976351445032, 0.49710050555846363, 0.5132299264801475, 0.522074784115222, 0.5282398326362259, 0.4950378979577984, 0.07953631183983567, 0.12659831453549142, 0.09160467744591738, 0.11501182294252577, 0.12684873879601544, 0.09333121972675507, 0.1169382930413605, 0.0970659163521772, 0.10382575922378567, 0.240926388020129, 0.2330407256675482, 0.22142278930026282, 0.21621852776160666, 0.3042944386162306, 0.1889323225650129, 0.23312142928873658, 0.23523799981767046, 0.21928914473174776, 0.3853405832942006, 0.30450390701917296, 0.2892063340635017, 0.23837035057542966, 0.26484531568576775, 0.34767324329972793, 0.46043467822318385, 0.3768988881947619, 0.4279779369005292, 0.23898868213468594, 0.24191864597400192, 0.21529672029847247, 0.17787040321508718, 0.2944740548278445, 0.2694923606307298, 0.23172940697532918, 0.25412148261240186, 0.2709893617964614, 0.2073399211242305, 0.21009140241488278, 0.20385917460930736, 0.20578248386459996, 0.16010922703241215, 0.2088919828074386, 0.20290122892982487, 0.2000384119755374, 0.21159602502385022, 0.20137627856870344, 0.19656367637749994, 0.20937371711120034, 0.5463164422635065, 0.23354182403180102, 0.20761677554560642, 0.20424842106357455, 0.20202334168527036, 0.20790161356436443, 0.8555353575045516, 0.1986765469880586, 0.15361812447959933, 0.8401755103490995, 0.19977821791669992, 0.19802402147412035, 0.14208110417783848, 0.1701499509247063, 0.791869558725476, 0.6393226782374226, 0.21121365928763658, 0.15530590036111735, 0.20383740160449193, 0.23969147658604895, 0.151737764560391, 0.10489282918878728, 0.10449123167540586, 0.49522366264320605, 0.21515829688063637, 0.19352048007743594, 0.18496005813105965, 0.18213880076443145, 0.20439245507777126, 0.19671649173344719, 0.20918890886866337, 0.2035555811038381, 0.20187959592576377, 0.09843971998728007, 0.08783727416147902, 0.07786037390165768, 0.0743510219134631, 0.10061925905094704, 0.07981764069798114, 0.08238719990423782, 0.08575115406980971, 0.08891688092309291]}, "mutation_prompt": null}
{"id": "a741dc67-3106-4263-bac5-360b16ed1538", "solution": "import numpy as np\n\nclass QuantumEnhancedSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Increased population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.3\n        self.cognitive_coeff = 2.0  # Higher cognitive coefficient for better local search\n        self.social_coeff = 1.5  # Balanced social coefficient\n        self.quantum_coeff = 0.5  # Quantum behavior introduction\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * phase  # Linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1, 1, (self.population_size, self.dim))\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n\n                for i, q_p in enumerate(quantum_particles):\n                    if self.eval_count >= self.budget:\n                        break\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n        \n        return global_best_position", "name": "QuantumEnhancedSwarmOptimizer", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization with cooperative learning and quantum superposition for diverse global exploration and robust convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "84920041-8dc6-4204-95ea-ed153f3630a2", "metadata": {"aucs": [0.8034469212423827, 0.7740656922411523, 0.7748702358909143, 0.8280944962527033, 0.7884938956432748, 0.78101991669297, 0.8201903427930248, 0.786444104391438, 0.7504603955137089, 0.5256382073464052, 0.5448036747011062, 0.5184289448728303, 0.5583818917854111, 0.4409002419877651, 0.4730955182188643, 0.5526160105539657, 0.5413637741726407, 0.5692162220144463, 0.1359145902265616, 0.1485267618985341, 0.14359655934846138, 0.13599960832147406, 0.11570556123024667, 0.141034821330964, 0.6050835595656305, 0.15505906086345222, 0.1442729486744796, 0.11909243219201748, 0.09168548488347039, 0.14241236981212224, 0.188802464341028, 0.14356362798572952, 0.13160602942850452, 0.13039835830138202, 0.11686203582268406, 0.13226885647873443, 0.9818785876799984, 0.9922916716240827, 0.9846387816721429, 0.9746480364488835, 0.985617202145352, 0.9706235518618289, 0.9885498345438651, 0.9856133515909308, 0.977926999288298, 0.510435567631637, 0.5078957309697127, 0.4888341274528879, 0.5160775317518107, 0.5589087599498077, 0.5434350414826099, 0.531968120729915, 0.4993055724148082, 0.4952500446755401, 0.4727625831507677, 0.21851759875826948, 0.22390347726312676, 0.7300849232130595, 0.34426510945622735, 0.25314918307632817, 0.21718415735468577, 0.2299424566238556, 0.7438686228424043, 0.17454842047512553, 0.17177973855580853, 0.15400465227786042, 0.10536442889087427, 0.14709063732770733, 0.13953762253513946, 0.17205497066160003, 0.17556450412095437, 0.18009599564529855, 0.12664159862122704, 0.18994752898771539, 0.17920920409616503, 0.18380896416755654, 0.17972358834976998, 0.1251816120993351, 0.21809399713664746, 0.1140108363912894, 0.18647601909433908, 0.028005363553326057, 0.00042587668539506573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009635099548160775, 9.999999999998899e-05, 0.1271241232876097, 0.03911337254693115, 0.03127602976133925, 0.10393791620956783, 0.09419237535517133, 0.0460054846079464, 0.009919128333921945, 0.06301945903662232, 0.0740010148837087, 0.03356449714437659, 0.07104029903416553, 0.0283333071103129, 0.2135534526547117, 0.08674842075664779, 0.08258018155517055, 0.08273241279879961, 0.084103689079574, 0.06420705312797303, 0.12259525279177164, 0.08426612695474123, 0.2401169782365814, 0.15940386363328762, 0.11355509515640638, 0.11487324116526765, 0.2557803220370122, 0.2582720355007265, 0.07193064841118813, 0.07697321647886168, 0.5254360815339181, 0.5015626456817525, 0.5078009024966279, 0.5490976351445032, 0.49710050555846363, 0.5132299264801475, 0.522074784115222, 0.5282398326362259, 0.4950378979577984, 0.07953631183983567, 0.12659831453549142, 0.09160467744591738, 0.11501182294252577, 0.12684873879601544, 0.09333121972675507, 0.1169382930413605, 0.0970659163521772, 0.10382575922378567, 0.240926388020129, 0.2330407256675482, 0.22142278930026282, 0.21621852776160666, 0.3042944386162306, 0.1889323225650129, 0.23312142928873658, 0.23523799981767046, 0.21928914473174776, 0.3853405832942006, 0.30450390701917296, 0.2892063340635017, 0.23837035057542966, 0.26484531568576775, 0.34767324329972793, 0.46043467822318385, 0.3768988881947619, 0.4279779369005292, 0.23898868213468594, 0.24191864597400192, 0.21529672029847247, 0.17787040321508718, 0.2944740548278445, 0.2694923606307298, 0.23172940697532918, 0.25412148261240186, 0.2709893617964614, 0.2073399211242305, 0.21009140241488278, 0.20385917460930736, 0.20578248386459996, 0.16010922703241215, 0.2088919828074386, 0.20290122892982487, 0.2000384119755374, 0.21159602502385022, 0.20137627856870344, 0.19656367637749994, 0.20937371711120034, 0.5463164422635065, 0.23354182403180102, 0.20761677554560642, 0.20424842106357455, 0.20202334168527036, 0.20790161356436443, 0.8555353575045516, 0.1986765469880586, 0.15361812447959933, 0.8401755103490995, 0.19977821791669992, 0.19802402147412035, 0.14208110417783848, 0.1701499509247063, 0.791869558725476, 0.6393226782374226, 0.21121365928763658, 0.15530590036111735, 0.20383740160449193, 0.23969147658604895, 0.151737764560391, 0.10489282918878728, 0.10449123167540586, 0.49522366264320605, 0.21515829688063637, 0.19352048007743594, 0.18496005813105965, 0.18213880076443145, 0.20439245507777126, 0.19671649173344719, 0.20918890886866337, 0.2035555811038381, 0.20187959592576377, 0.09843971998728007, 0.08783727416147902, 0.07786037390165768, 0.0743510219134631, 0.10061925905094704, 0.07981764069798114, 0.08238719990423782, 0.08575115406980971, 0.08891688092309291]}, "mutation_prompt": null}
{"id": "0aa78ee2-140e-4954-bed2-c3a5dada3b2e", "solution": "import numpy as np\n\nclass QuantumEnhancedSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Increased population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.3\n        self.cognitive_coeff = 2.0  # Higher cognitive coefficient for better local search\n        self.social_coeff = 1.5  # Balanced social coefficient\n        self.quantum_coeff = 0.5  # Quantum behavior introduction\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * phase  # Linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1, 1, (self.population_size, self.dim))\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n\n                for i, q_p in enumerate(quantum_particles):\n                    if self.eval_count >= self.budget:\n                        break\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n        \n        return global_best_position", "name": "QuantumEnhancedSwarmOptimizer", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization with cooperative learning and quantum superposition for diverse global exploration and robust convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "84920041-8dc6-4204-95ea-ed153f3630a2", "metadata": {"aucs": [0.8034469212423827, 0.7740656922411523, 0.7748702358909143, 0.8280944962527033, 0.7884938956432748, 0.78101991669297, 0.8201903427930248, 0.786444104391438, 0.7504603955137089, 0.5256382073464052, 0.5448036747011062, 0.5184289448728303, 0.5583818917854111, 0.4409002419877651, 0.4730955182188643, 0.5526160105539657, 0.5413637741726407, 0.5692162220144463, 0.1359145902265616, 0.1485267618985341, 0.14359655934846138, 0.13599960832147406, 0.11570556123024667, 0.141034821330964, 0.6050835595656305, 0.15505906086345222, 0.1442729486744796, 0.11909243219201748, 0.09168548488347039, 0.14241236981212224, 0.188802464341028, 0.14356362798572952, 0.13160602942850452, 0.13039835830138202, 0.11686203582268406, 0.13226885647873443, 0.9818785876799984, 0.9922916716240827, 0.9846387816721429, 0.9746480364488835, 0.985617202145352, 0.9706235518618289, 0.9885498345438651, 0.9856133515909308, 0.977926999288298, 0.510435567631637, 0.5078957309697127, 0.4888341274528879, 0.5160775317518107, 0.5589087599498077, 0.5434350414826099, 0.531968120729915, 0.4993055724148082, 0.4952500446755401, 0.4727625831507677, 0.21851759875826948, 0.22390347726312676, 0.7300849232130595, 0.34426510945622735, 0.25314918307632817, 0.21718415735468577, 0.2299424566238556, 0.7438686228424043, 0.17454842047512553, 0.17177973855580853, 0.15400465227786042, 0.10536442889087427, 0.14709063732770733, 0.13953762253513946, 0.17205497066160003, 0.17556450412095437, 0.18009599564529855, 0.12664159862122704, 0.18994752898771539, 0.17920920409616503, 0.18380896416755654, 0.17972358834976998, 0.1251816120993351, 0.21809399713664746, 0.1140108363912894, 0.18647601909433908, 0.028005363553326057, 0.00042587668539506573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009635099548160775, 9.999999999998899e-05, 0.1271241232876097, 0.03911337254693115, 0.03127602976133925, 0.10393791620956783, 0.09419237535517133, 0.0460054846079464, 0.009919128333921945, 0.06301945903662232, 0.0740010148837087, 0.03356449714437659, 0.07104029903416553, 0.0283333071103129, 0.2135534526547117, 0.08674842075664779, 0.08258018155517055, 0.08273241279879961, 0.084103689079574, 0.06420705312797303, 0.12259525279177164, 0.08426612695474123, 0.2401169782365814, 0.15940386363328762, 0.11355509515640638, 0.11487324116526765, 0.2557803220370122, 0.2582720355007265, 0.07193064841118813, 0.07697321647886168, 0.5254360815339181, 0.5015626456817525, 0.5078009024966279, 0.5490976351445032, 0.49710050555846363, 0.5132299264801475, 0.522074784115222, 0.5282398326362259, 0.4950378979577984, 0.07953631183983567, 0.12659831453549142, 0.09160467744591738, 0.11501182294252577, 0.12684873879601544, 0.09333121972675507, 0.1169382930413605, 0.0970659163521772, 0.10382575922378567, 0.240926388020129, 0.2330407256675482, 0.22142278930026282, 0.21621852776160666, 0.3042944386162306, 0.1889323225650129, 0.23312142928873658, 0.23523799981767046, 0.21928914473174776, 0.3853405832942006, 0.30450390701917296, 0.2892063340635017, 0.23837035057542966, 0.26484531568576775, 0.34767324329972793, 0.46043467822318385, 0.3768988881947619, 0.4279779369005292, 0.23898868213468594, 0.24191864597400192, 0.21529672029847247, 0.17787040321508718, 0.2944740548278445, 0.2694923606307298, 0.23172940697532918, 0.25412148261240186, 0.2709893617964614, 0.2073399211242305, 0.21009140241488278, 0.20385917460930736, 0.20578248386459996, 0.16010922703241215, 0.2088919828074386, 0.20290122892982487, 0.2000384119755374, 0.21159602502385022, 0.20137627856870344, 0.19656367637749994, 0.20937371711120034, 0.5463164422635065, 0.23354182403180102, 0.20761677554560642, 0.20424842106357455, 0.20202334168527036, 0.20790161356436443, 0.8555353575045516, 0.1986765469880586, 0.15361812447959933, 0.8401755103490995, 0.19977821791669992, 0.19802402147412035, 0.14208110417783848, 0.1701499509247063, 0.791869558725476, 0.6393226782374226, 0.21121365928763658, 0.15530590036111735, 0.20383740160449193, 0.23969147658604895, 0.151737764560391, 0.10489282918878728, 0.10449123167540586, 0.49522366264320605, 0.21515829688063637, 0.19352048007743594, 0.18496005813105965, 0.18213880076443145, 0.20439245507777126, 0.19671649173344719, 0.20918890886866337, 0.2035555811038381, 0.20187959592576377, 0.09843971998728007, 0.08783727416147902, 0.07786037390165768, 0.0743510219134631, 0.10061925905094704, 0.07981764069798114, 0.08238719990423782, 0.08575115406980971, 0.08891688092309291]}, "mutation_prompt": null}
{"id": "9de94f4d-bfc0-4166-91a4-24cfa1a40db6", "solution": "import numpy as np\n\nclass QuantumCooperativeDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)\n        self.quantum_coeff = 0.5  # Quantum behavior probability\n        self.scale_factor = 0.8  # Differential evolution scale factor\n        self.crossover_rate = 0.9  # Crossover rate\n        self.eval_count = 0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        self.eval_count += self.population_size\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n                # Differential Evolution mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant = np.clip(x1 + self.scale_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Quantum behavior exploration\n                if np.random.rand() < self.quantum_coeff:\n                    quantum_shift = np.random.uniform(-1, 1, self.dim)\n                    trial = np.clip(trial + quantum_shift, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                self.eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "QuantumCooperativeDE", "description": "Quantum-Inspired Cooperative Differential Evolution integrates quantum behavior and cooperative learning for enhanced exploration and convergence in high-dimensional spaces.", "configspace": "", "generation": 62, "fitness": 0.22675368791657616, "feedback": "The algorithm QuantumCooperativeDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "84920041-8dc6-4204-95ea-ed153f3630a2", "metadata": {"aucs": [0.5537214420474612, 0.48942530480871704, 0.5008235203296046, 0.4754654368229345, 0.5284197135304651, 0.5076288174684809, 0.558655015118544, 0.5516475618748582, 0.501893883451777, 0.21469354773413007, 0.18859079903927956, 0.18050495478772677, 0.22690743499358745, 0.19498588977182119, 0.20883981447543387, 0.19280215714414917, 0.22078696363102512, 0.24024933624344091, 0.09660148233639099, 0.07952795608320007, 0.09415883543722958, 0.09106301387947768, 0.10009534533608022, 0.10592730964146613, 0.08702640763462, 0.0928520195740119, 0.09812365518301724, 0.07851594764359038, 0.08610342084081402, 0.08088441097020582, 0.07301392637220816, 0.08557260757596175, 0.07171529564682766, 0.08690688696038018, 0.0781044659385911, 0.08071935182778378, 0.93637137899755, 0.946289348232929, 0.9279005997090015, 0.9316663354853632, 0.9544020140573968, 0.911344666715986, 0.9228594644055946, 0.9729414564359341, 0.9442739883200604, 0.25243895978000963, 0.2426481864329787, 0.23085470627906501, 0.22337679119998233, 0.2284435849235832, 0.23312807416778203, 0.24554756709837522, 0.22266364004331496, 0.2151492404322045, 0.27761745401733595, 0.32482273787191485, 0.2563890801979293, 0.42727840389595007, 0.41052687521791, 0.41226442003437325, 0.2759516712944835, 0.3371574454397964, 0.326650527163895, 0.16035421542745953, 0.1361554959303195, 0.18835361604898215, 0.14291005071417273, 0.19615150309453366, 0.11913250112613516, 0.1372193874346329, 0.14510084333217943, 0.16754875217345067, 0.14385167123999743, 0.15032562812042083, 0.11882011550835869, 0.15049878103870573, 0.18136751668233608, 0.13886134888505253, 0.1916161417188803, 0.1368067086629231, 0.14562708027267068, 0.05333812662489623, 0.0448338157678152, 0.05274980600891033, 0.1160156560361022, 0.057936747967007984, 0.05581271311947489, 0.05716362103118011, 0.061128859258753665, 0.057131314854286575, 0.18025156555908872, 0.2029602982277, 0.1802060637113454, 0.19341036053733973, 0.17735515549897574, 0.1553520917951704, 0.22670665646044563, 0.19700527254554945, 0.2017757696656789, 0.007460903809425323, 0.01359007981267768, 0.015215619524196367, 0.006787332885483943, 0.0057076086965131, 0.004764150547681645, 9.999999999998899e-05, 0.017411382348767046, 0.01256084488509801, 0.10920595676900868, 0.10979935578296351, 0.10453775519259179, 0.10270555265218484, 0.11868962161511665, 0.11113091475550974, 0.11978971236168456, 0.11574190930108053, 0.12294437725978369, 0.43649582514150054, 0.41127461146371047, 0.4259776625847306, 0.4189264049991164, 0.4238245163194976, 0.41652616668617026, 0.4170123949226209, 0.4389961439885859, 0.4394420823194234, 0.0776385066226225, 0.08183316951529773, 0.09477728614729586, 0.08004605813403509, 0.09107871961157221, 0.09440487946949017, 0.07653783493462141, 0.08916450076961724, 0.0856023278580973, 0.1524435143025734, 0.16253829959643085, 0.15209696875783663, 0.12199220894842178, 0.1395998049520103, 0.15229652076971778, 0.1475100560238063, 0.1299144851262103, 0.1586308521279408, 0.2651645133207827, 0.25717585789848185, 0.24413856413237978, 0.2566096087057467, 0.2615855066839695, 0.2518084434164761, 0.2611649492871392, 0.25946100388133997, 0.26414431053022314, 0.20044210121355188, 0.18964277240824556, 0.18420484545438953, 0.17651303416431963, 0.19198876635911588, 0.1703783473814261, 0.2014877428069184, 0.20323764903056663, 0.1916830295338695, 0.17371665528105062, 0.18440309094245344, 0.17514970134411434, 0.1904549116828932, 0.22189831624859035, 0.18626518640140843, 0.17520097102293453, 0.1895475466659795, 0.18872917684643753, 0.17876491495354674, 0.18878692704124655, 0.18353531097795017, 0.1740830051814708, 0.17931933859223992, 0.1741561734216417, 0.1765529393088393, 0.17242289872773797, 0.18825836425320963, 0.164430200310679, 0.5004738958632474, 0.5556530883795212, 0.5620804273611992, 0.18170506061894243, 0.40700264237766226, 0.17624878174730052, 0.22778602594469244, 0.543055760368806, 0.28861367187838516, 0.46891776591931644, 0.30518783634561153, 0.1935188395080456, 0.18755730030422468, 0.30832289309043803, 0.21123087783886296, 0.12449469085529963, 0.20810465738618633, 0.18091666580387755, 0.18897373000036344, 0.18792802577822998, 0.1745743657615605, 0.182498738275101, 0.17056065590503822, 0.1776586543013463, 0.18164960099128924, 0.20756638620998513, 0.05943587788836924, 0.06413238738677118, 0.07835044702206473, 0.08106237907979752, 0.06809690948934388, 0.06266593754629335, 0.07598592822798489, 0.08694198018520816, 0.0728643465470723]}, "mutation_prompt": null}
{"id": "83594e4d-ae92-4736-8c09-b094a62ae4fd", "solution": "import numpy as np\n\nclass EnhancedQuantumSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(50, dim * 7)  # Further increased population for diversity\n        self.inertia_weight_init = 0.8\n        self.inertia_weight_final = 0.2\n        self.cognitive_coeff = 1.5  # Reduced cognitive coefficient\n        self.social_coeff = 2.0  # Increased social coefficient for better global search\n        self.quantum_coeff = 0.6  # Adjusted quantum behavior for exploration\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init * (1 - phase) + self.inertia_weight_final * phase  # Non-linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities * (1 + 0.5 * np.sin(2 * np.pi * phase))  # Directional search enhancement\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n\n                for i, q_p in enumerate(quantum_particles):\n                    if self.eval_count >= self.budget:\n                        break\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n        \n        return global_best_position", "name": "EnhancedQuantumSwarmOptimizer", "description": "Enhanced Quantum-Inspired Swarm Optimizer with adaptive diversity control and directional search for improved global exploration and convergence.", "configspace": "", "generation": 63, "fitness": 0.21342081810885247, "feedback": "The algorithm EnhancedQuantumSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "84920041-8dc6-4204-95ea-ed153f3630a2", "metadata": {"aucs": [0.549285574487663, 0.5412279626404242, 0.5395914447058345, 0.5813068303920071, 0.5899369197308939, 0.5885127702449524, 0.5752544126720174, 0.5763762723765764, 0.5500645619900852, 0.004963440255555507, 0.025837583216661186, 9.999999999998899e-05, 0.31202930357606196, 0.30521508694747035, 0.03139973881460156, 0.021360162787919967, 0.11753525509807927, 9.999999999998899e-05, 0.10349609241777435, 0.11014560399075257, 0.09174982245180308, 0.3368110957761752, 0.09618544262221818, 0.08677019036211053, 0.09406980632925821, 0.1044266422349821, 0.10391735926945511, 0.06915355842414561, 0.08458559674961419, 0.07921328058652521, 0.07727759244614318, 0.084606533069563, 0.09080840484157993, 0.26506238867610743, 0.09032268376059294, 0.07858784299975485, 0.9848437459167405, 0.9818063079415752, 0.9900907016839526, 0.971806038077135, 0.9720809408922068, 0.977146572338228, 0.9777067358524395, 0.9856782831136431, 0.9821228990826042, 0.25860236856482355, 0.3584577264724911, 0.29471772166994825, 0.24558203840702608, 0.25724485539565756, 0.24856741981002117, 0.24934313159582222, 0.2729440588152361, 0.2780480371939348, 0.5139619435366829, 0.1930570715708222, 0.17257247658571018, 0.2042778214191443, 0.20021525768935444, 0.19909483622375634, 0.16259463368916172, 0.18281481431391, 0.1582827649802352, 0.09110880203817673, 0.09407120601425212, 0.0964310063193472, 0.10660581396139057, 0.11038227330421846, 0.15815262416047204, 0.09803724500030297, 0.11040597564121724, 0.1194360640294202, 0.0934234900187012, 0.12002912467831917, 0.1100373351454671, 0.1248007469037582, 0.11165840150237039, 0.19353597719943427, 0.0891349897827558, 0.0816301478247431, 0.14412200985027845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012288638601634871, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044338568495313146, 0.03480085548934131, 0.11504943575977888, 0.11785127691772379, 9.999999999998899e-05, 0.03926693324998254, 0.054100061686266465, 0.0820027201703819, 0.03602529116241804, 9.999999999998899e-05, 0.03405415201971662, 0.02353138717044745, 0.03664261486944742, 0.04842184753664791, 0.17908880693100748, 0.04885412766553221, 0.03561123192665072, 0.04557788359541459, 0.09393809638118511, 0.025945493757664417, 0.0970705992040779, 0.007501598145338573, 0.04100235926547724, 0.09919436460136333, 0.07214818840090143, 0.05021180611333187, 0.05023264421782059, 0.3816293173332309, 0.3756946371447005, 0.374317648577285, 0.3843987147910528, 0.3664065546622135, 0.3622064119825198, 0.39245909383523037, 0.3748039871155443, 0.3981990559584254, 0.0997713016441556, 0.0856372451430405, 0.09117178822520033, 0.10435821946204538, 0.10488139706723232, 0.10457499471667908, 0.0751851908287483, 0.0736576856885095, 0.09076875851246202, 0.2343909531320556, 0.17936396884360384, 0.21956146244238262, 0.22102731357012084, 0.1758936094871948, 0.1755987397841895, 0.17457451623793663, 0.18071299992925305, 0.20506126930887458, 0.21977224869485767, 0.26899308776739195, 0.28394446675954754, 0.2812943756039735, 0.1919625436630975, 0.2843906119926213, 0.3035834012117127, 0.2789144709541329, 0.3467842953650401, 0.22176731978048214, 0.20729299583111038, 0.2151864189455216, 0.24306189491627606, 0.17205922468920876, 0.18962832874590296, 0.1380466207600468, 0.21314858317134044, 0.2003786222291576, 0.1776867493039952, 0.17938284351009348, 0.19052244411109331, 0.18241885069030384, 0.19177799058092082, 0.19952002661743418, 0.19625662444139913, 0.17566794204046543, 0.1861655706650135, 0.17881987558835932, 0.192201880694428, 0.17165405549417834, 0.17558546294346566, 0.1940155299944588, 0.17466275771423045, 0.18398748834129597, 0.18783213425832446, 0.4154553154417667, 0.6501232509460844, 0.14722994814405266, 0.15287202699481006, 0.5684688672386435, 0.556677068769695, 0.15852286834624052, 0.1380966896864375, 0.15393529534044614, 0.20006461814812115, 0.3790134305543035, 0.20785285491035055, 0.18924077873346257, 0.3272108858904297, 0.45760784093606033, 0.14044551855069876, 0.20066982524555887, 0.20924468502285332, 0.203961564598641, 0.18392845966330096, 0.2032228800657917, 0.18300191023772017, 0.20999615784805314, 0.1900336342921657, 0.20070395669710306, 0.2063063695430497, 0.18423660532569452, 0.1821311243570134, 0.08391814604305214, 0.065758396760072, 0.07809457846391965, 0.07065708285145245, 0.08493371478865397, 0.0701006359817451, 0.07923025817991058, 0.07020329864953767, 0.08136891828335535]}, "mutation_prompt": null}
{"id": "ccceccbf-ea81-4db2-95f1-50fa9e9ece7c", "solution": "import numpy as np\n\nclass QuantumEnhancedSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Increased population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.3\n        self.cognitive_coeff = 2.0  # Higher cognitive coefficient for better local search\n        self.social_coeff = 1.5  # Balanced social coefficient\n        self.quantum_coeff = 0.5  # Quantum behavior introduction\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * phase  # Linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1, 1, (self.population_size, self.dim))\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n\n                for i, q_p in enumerate(quantum_particles):\n                    if self.eval_count >= self.budget:\n                        break\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n        \n        return global_best_position", "name": "QuantumEnhancedSwarmOptimizer", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization with cooperative learning and quantum superposition for diverse global exploration and robust convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "84920041-8dc6-4204-95ea-ed153f3630a2", "metadata": {"aucs": [0.8034469212423827, 0.7740656922411523, 0.7748702358909143, 0.8280944962527033, 0.7884938956432748, 0.78101991669297, 0.8201903427930248, 0.786444104391438, 0.7504603955137089, 0.5256382073464052, 0.5448036747011062, 0.5184289448728303, 0.5583818917854111, 0.4409002419877651, 0.4730955182188643, 0.5526160105539657, 0.5413637741726407, 0.5692162220144463, 0.1359145902265616, 0.1485267618985341, 0.14359655934846138, 0.13599960832147406, 0.11570556123024667, 0.141034821330964, 0.6050835595656305, 0.15505906086345222, 0.1442729486744796, 0.11909243219201748, 0.09168548488347039, 0.14241236981212224, 0.188802464341028, 0.14356362798572952, 0.13160602942850452, 0.13039835830138202, 0.11686203582268406, 0.13226885647873443, 0.9818785876799984, 0.9922916716240827, 0.9846387816721429, 0.9746480364488835, 0.985617202145352, 0.9706235518618289, 0.9885498345438651, 0.9856133515909308, 0.977926999288298, 0.510435567631637, 0.5078957309697127, 0.4888341274528879, 0.5160775317518107, 0.5589087599498077, 0.5434350414826099, 0.531968120729915, 0.4993055724148082, 0.4952500446755401, 0.4727625831507677, 0.21851759875826948, 0.22390347726312676, 0.7300849232130595, 0.34426510945622735, 0.25314918307632817, 0.21718415735468577, 0.2299424566238556, 0.7438686228424043, 0.17454842047512553, 0.17177973855580853, 0.15400465227786042, 0.10536442889087427, 0.14709063732770733, 0.13953762253513946, 0.17205497066160003, 0.17556450412095437, 0.18009599564529855, 0.12664159862122704, 0.18994752898771539, 0.17920920409616503, 0.18380896416755654, 0.17972358834976998, 0.1251816120993351, 0.21809399713664746, 0.1140108363912894, 0.18647601909433908, 0.028005363553326057, 0.00042587668539506573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009635099548160775, 9.999999999998899e-05, 0.1271241232876097, 0.03911337254693115, 0.03127602976133925, 0.10393791620956783, 0.09419237535517133, 0.0460054846079464, 0.009919128333921945, 0.06301945903662232, 0.0740010148837087, 0.03356449714437659, 0.07104029903416553, 0.0283333071103129, 0.2135534526547117, 0.08674842075664779, 0.08258018155517055, 0.08273241279879961, 0.084103689079574, 0.06420705312797303, 0.12259525279177164, 0.08426612695474123, 0.2401169782365814, 0.15940386363328762, 0.11355509515640638, 0.11487324116526765, 0.2557803220370122, 0.2582720355007265, 0.07193064841118813, 0.07697321647886168, 0.5254360815339181, 0.5015626456817525, 0.5078009024966279, 0.5490976351445032, 0.49710050555846363, 0.5132299264801475, 0.522074784115222, 0.5282398326362259, 0.4950378979577984, 0.07953631183983567, 0.12659831453549142, 0.09160467744591738, 0.11501182294252577, 0.12684873879601544, 0.09333121972675507, 0.1169382930413605, 0.0970659163521772, 0.10382575922378567, 0.240926388020129, 0.2330407256675482, 0.22142278930026282, 0.21621852776160666, 0.3042944386162306, 0.1889323225650129, 0.23312142928873658, 0.23523799981767046, 0.21928914473174776, 0.3853405832942006, 0.30450390701917296, 0.2892063340635017, 0.23837035057542966, 0.26484531568576775, 0.34767324329972793, 0.46043467822318385, 0.3768988881947619, 0.4279779369005292, 0.23898868213468594, 0.24191864597400192, 0.21529672029847247, 0.17787040321508718, 0.2944740548278445, 0.2694923606307298, 0.23172940697532918, 0.25412148261240186, 0.2709893617964614, 0.2073399211242305, 0.21009140241488278, 0.20385917460930736, 0.20578248386459996, 0.16010922703241215, 0.2088919828074386, 0.20290122892982487, 0.2000384119755374, 0.21159602502385022, 0.20137627856870344, 0.19656367637749994, 0.20937371711120034, 0.5463164422635065, 0.23354182403180102, 0.20761677554560642, 0.20424842106357455, 0.20202334168527036, 0.20790161356436443, 0.8555353575045516, 0.1986765469880586, 0.15361812447959933, 0.8401755103490995, 0.19977821791669992, 0.19802402147412035, 0.14208110417783848, 0.1701499509247063, 0.791869558725476, 0.6393226782374226, 0.21121365928763658, 0.15530590036111735, 0.20383740160449193, 0.23969147658604895, 0.151737764560391, 0.10489282918878728, 0.10449123167540586, 0.49522366264320605, 0.21515829688063637, 0.19352048007743594, 0.18496005813105965, 0.18213880076443145, 0.20439245507777126, 0.19671649173344719, 0.20918890886866337, 0.2035555811038381, 0.20187959592576377, 0.09843971998728007, 0.08783727416147902, 0.07786037390165768, 0.0743510219134631, 0.10061925905094704, 0.07981764069798114, 0.08238719990423782, 0.08575115406980971, 0.08891688092309291]}, "mutation_prompt": null}
{"id": "4f2e8976-610b-41c1-9c90-f38847d40200", "solution": "import numpy as np\n\nclass QuantumEnhancedSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Increased population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.3\n        self.cognitive_coeff = 2.0  # Higher cognitive coefficient for better local search\n        self.social_coeff = 1.5  # Balanced social coefficient\n        self.quantum_coeff = 0.5  # Quantum behavior introduction\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * phase  # Linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1, 1, (self.population_size, self.dim))\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n\n                for i, q_p in enumerate(quantum_particles):\n                    if self.eval_count >= self.budget:\n                        break\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n        \n        return global_best_position", "name": "QuantumEnhancedSwarmOptimizer", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization with cooperative learning and quantum superposition for diverse global exploration and robust convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "84920041-8dc6-4204-95ea-ed153f3630a2", "metadata": {"aucs": [0.8034469212423827, 0.7740656922411523, 0.7748702358909143, 0.8280944962527033, 0.7884938956432748, 0.78101991669297, 0.8201903427930248, 0.786444104391438, 0.7504603955137089, 0.5256382073464052, 0.5448036747011062, 0.5184289448728303, 0.5583818917854111, 0.4409002419877651, 0.4730955182188643, 0.5526160105539657, 0.5413637741726407, 0.5692162220144463, 0.1359145902265616, 0.1485267618985341, 0.14359655934846138, 0.13599960832147406, 0.11570556123024667, 0.141034821330964, 0.6050835595656305, 0.15505906086345222, 0.1442729486744796, 0.11909243219201748, 0.09168548488347039, 0.14241236981212224, 0.188802464341028, 0.14356362798572952, 0.13160602942850452, 0.13039835830138202, 0.11686203582268406, 0.13226885647873443, 0.9818785876799984, 0.9922916716240827, 0.9846387816721429, 0.9746480364488835, 0.985617202145352, 0.9706235518618289, 0.9885498345438651, 0.9856133515909308, 0.977926999288298, 0.510435567631637, 0.5078957309697127, 0.4888341274528879, 0.5160775317518107, 0.5589087599498077, 0.5434350414826099, 0.531968120729915, 0.4993055724148082, 0.4952500446755401, 0.4727625831507677, 0.21851759875826948, 0.22390347726312676, 0.7300849232130595, 0.34426510945622735, 0.25314918307632817, 0.21718415735468577, 0.2299424566238556, 0.7438686228424043, 0.17454842047512553, 0.17177973855580853, 0.15400465227786042, 0.10536442889087427, 0.14709063732770733, 0.13953762253513946, 0.17205497066160003, 0.17556450412095437, 0.18009599564529855, 0.12664159862122704, 0.18994752898771539, 0.17920920409616503, 0.18380896416755654, 0.17972358834976998, 0.1251816120993351, 0.21809399713664746, 0.1140108363912894, 0.18647601909433908, 0.028005363553326057, 0.00042587668539506573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009635099548160775, 9.999999999998899e-05, 0.1271241232876097, 0.03911337254693115, 0.03127602976133925, 0.10393791620956783, 0.09419237535517133, 0.0460054846079464, 0.009919128333921945, 0.06301945903662232, 0.0740010148837087, 0.03356449714437659, 0.07104029903416553, 0.0283333071103129, 0.2135534526547117, 0.08674842075664779, 0.08258018155517055, 0.08273241279879961, 0.084103689079574, 0.06420705312797303, 0.12259525279177164, 0.08426612695474123, 0.2401169782365814, 0.15940386363328762, 0.11355509515640638, 0.11487324116526765, 0.2557803220370122, 0.2582720355007265, 0.07193064841118813, 0.07697321647886168, 0.5254360815339181, 0.5015626456817525, 0.5078009024966279, 0.5490976351445032, 0.49710050555846363, 0.5132299264801475, 0.522074784115222, 0.5282398326362259, 0.4950378979577984, 0.07953631183983567, 0.12659831453549142, 0.09160467744591738, 0.11501182294252577, 0.12684873879601544, 0.09333121972675507, 0.1169382930413605, 0.0970659163521772, 0.10382575922378567, 0.240926388020129, 0.2330407256675482, 0.22142278930026282, 0.21621852776160666, 0.3042944386162306, 0.1889323225650129, 0.23312142928873658, 0.23523799981767046, 0.21928914473174776, 0.3853405832942006, 0.30450390701917296, 0.2892063340635017, 0.23837035057542966, 0.26484531568576775, 0.34767324329972793, 0.46043467822318385, 0.3768988881947619, 0.4279779369005292, 0.23898868213468594, 0.24191864597400192, 0.21529672029847247, 0.17787040321508718, 0.2944740548278445, 0.2694923606307298, 0.23172940697532918, 0.25412148261240186, 0.2709893617964614, 0.2073399211242305, 0.21009140241488278, 0.20385917460930736, 0.20578248386459996, 0.16010922703241215, 0.2088919828074386, 0.20290122892982487, 0.2000384119755374, 0.21159602502385022, 0.20137627856870344, 0.19656367637749994, 0.20937371711120034, 0.5463164422635065, 0.23354182403180102, 0.20761677554560642, 0.20424842106357455, 0.20202334168527036, 0.20790161356436443, 0.8555353575045516, 0.1986765469880586, 0.15361812447959933, 0.8401755103490995, 0.19977821791669992, 0.19802402147412035, 0.14208110417783848, 0.1701499509247063, 0.791869558725476, 0.6393226782374226, 0.21121365928763658, 0.15530590036111735, 0.20383740160449193, 0.23969147658604895, 0.151737764560391, 0.10489282918878728, 0.10449123167540586, 0.49522366264320605, 0.21515829688063637, 0.19352048007743594, 0.18496005813105965, 0.18213880076443145, 0.20439245507777126, 0.19671649173344719, 0.20918890886866337, 0.2035555811038381, 0.20187959592576377, 0.09843971998728007, 0.08783727416147902, 0.07786037390165768, 0.0743510219134631, 0.10061925905094704, 0.07981764069798114, 0.08238719990423782, 0.08575115406980971, 0.08891688092309291]}, "mutation_prompt": null}
{"id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Maintain population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.4  # Slightly higher final inertia for stability\n        self.cognitive_coeff = 1.8  # Slightly reduced for balance\n        self.social_coeff = 1.8  # Balanced social coefficient\n        self.quantum_coeff = 0.6  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi / 2)  # Cosine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with dynamic neighborhood learning and enhanced quantum leaps for robust exploration and convergence.", "configspace": "", "generation": 66, "fitness": 0.30483830998361156, "feedback": "The algorithm QuantumAdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "84920041-8dc6-4204-95ea-ed153f3630a2", "metadata": {"aucs": [0.86809843180453, 0.8656865911426441, 0.8520359754768346, 0.8689424779516427, 0.8833534924019595, 0.8801421218086176, 0.8721560948385834, 0.8634062411407808, 0.8470759917238162, 0.6731760713842743, 0.6984099073015564, 9.999999999998899e-05, 0.7153748986695032, 0.7382878408244324, 0.704009479561104, 0.5904943076564743, 0.6955089531526448, 0.4651001105784881, 0.1382893192137934, 0.14700397866728565, 0.12913293972348638, 0.1759303304669133, 0.17303176482832094, 0.5365713493906714, 0.16645677476221077, 0.1457322522928609, 0.5586144074084555, 0.3642476444045266, 0.138225955628012, 0.12650718919554016, 0.12338912672246294, 0.1337548907142766, 0.13646208448779928, 0.15772718046087408, 0.17574233200011224, 0.1089760639902797, 0.9814142243321458, 0.992311977478297, 0.9834889655451481, 0.9750066404543468, 0.9781706588561505, 0.9750789789320502, 0.988583733314754, 0.9863141471271968, 0.9782154418328087, 0.6065880869571294, 0.5967720386430975, 0.4942958589358364, 0.426691750200218, 0.5168566427423578, 0.4270911099261455, 0.5119784501385705, 0.5421179169945152, 0.6327876731591711, 0.20270133011854563, 0.8401556746546058, 0.22254750946681712, 0.3003245377072742, 0.19211790276791485, 0.19490579599263935, 0.22849995088368447, 0.40518433213993954, 0.39140263433541655, 0.20026783760443456, 0.18350798856932238, 0.2190955350090832, 0.1119177074752512, 0.17937402852203488, 0.12911412062741434, 0.31718776706386764, 0.16015889974530306, 0.19979350355828707, 0.2145706236443129, 0.22560095911706168, 0.2199530543268292, 0.21202861034561304, 0.2263695433373203, 0.18773008744115327, 0.3183954462954178, 0.21064225867144148, 0.23079774984096735, 9.999999999998899e-05, 0.033481396564341015, 9.999999999998899e-05, 0.024729183314617487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016565281902716222, 0.10469164517640106, 0.04534986570119326, 0.06225893865981302, 0.0732222375592606, 0.03382105791684953, 0.0359239804842133, 0.06194958746066259, 0.0453821655842892, 0.11447296859435407, 0.1191794744787672, 0.034320659298624934, 0.20341857903206606, 0.07515691146040704, 0.07623823293753595, 0.07525890200605101, 0.09869738523629368, 0.16830281627970767, 0.07231146258022858, 0.0723203898865975, 0.16126183813471884, 0.15926107511735277, 0.04363855826957408, 0.18988333137116464, 0.1352023143551, 0.11649772579811601, 0.1460226538284869, 0.08335173385367689, 0.6147295648379401, 0.5651061686144145, 0.5157825383736048, 0.513713077675898, 0.5434666760963826, 0.550371676094936, 0.5627308026588336, 0.5654446278449188, 0.5276343978066933, 0.09159643084439795, 0.12814970568640716, 0.08929832856829256, 0.11517643742676431, 0.16343642858358887, 0.13796100842287595, 0.11383376492074004, 0.13107137567848937, 0.09977711382141896, 0.26252269491531866, 0.20614921875537906, 0.24251614212904804, 0.28616406073200606, 0.3215841927926255, 0.15960649467868537, 0.3345583518300329, 0.21353380892362472, 0.2676044822474519, 0.41574256171845214, 0.3213472496655988, 0.3474289350965245, 0.28094723098789953, 0.20758026658125894, 0.3307691144834287, 0.2363110534074273, 0.4100078612789384, 0.3025865709952452, 0.24760102008799634, 0.2352775712102676, 0.3074835799791821, 0.2317531087487883, 0.15785821262332178, 0.33806687381452105, 0.21490611536991477, 0.32371200531321986, 0.2603237857821705, 0.24290709494357832, 0.19115754564583953, 0.1941943518530671, 0.21313331592185236, 0.19064356023472195, 0.527737971065595, 0.2382319403689599, 0.24894221106001446, 0.22437678580611387, 0.2392285288953977, 0.5884940169709203, 0.3942985110577699, 0.2394561942454273, 0.22018875592073672, 0.19888324487025544, 0.21929039715436627, 0.2272152477409236, 0.6241699070880998, 0.9221889268189425, 0.12689168130862438, 0.15336743451992574, 0.17303540289206243, 0.20116093222745546, 0.19990929863511597, 0.1421147804612758, 0.1694519036612706, 0.21355146013657822, 0.4928310132342645, 0.2134533254307388, 0.1496960205625334, 0.41788563625481556, 0.1682306963337742, 0.20731421866532596, 0.1049392372847382, 0.1051179114684404, 0.5611177739082233, 0.19086889504407778, 0.22595933326916207, 0.200978461179119, 0.21095816062868844, 0.1900637808819079, 0.19841867777942057, 0.19024252017227972, 0.17800754969531718, 0.18072025186600527, 0.12666379560630125, 0.1373089791204215, 0.09765569439316313, 0.08546667493689442, 0.08080541052732138, 0.09020828994915886, 0.10762034059557513, 0.09946373738746606, 0.09759787122430719]}, "mutation_prompt": null}
{"id": "3799d72b-5fb7-4434-a068-aee9667c4505", "solution": "import numpy as np\n\nclass HybridQuantumSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(50, dim * 5)  # Adjusted population size for dimension\n        self.inertia_weight_init = 0.8  # Increased initial inertia for exploration\n        self.inertia_weight_final = 0.3  # Lower final inertia for exploitation\n        self.cognitive_coeff = 2.0  # Increased cognitive component for diversity\n        self.social_coeff = 2.0  # Increased social component for convergence\n        self.quantum_coeff = 0.7  # Slightly enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_final + (self.inertia_weight_init - self.inertia_weight_final) * np.exp(-5 * phase)  # Exponential inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift_magnitude = np.random.normal(0, 1, (self.population_size, self.dim))  # Gaussian quantum shifts\n                quantum_particles = particles + quantum_shift_magnitude\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "HybridQuantumSwarmOptimizer", "description": "Hybrid Quantum Swarm Optimization with adaptive exploration-exploitation balance and dynamic quantum leaps for enhanced convergence.", "configspace": "", "generation": 67, "fitness": 0.2547722239548226, "feedback": "The algorithm HybridQuantumSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.7126931097336959, 0.7129555082161365, 0.6987228532015999, 0.7332099667440969, 0.7359720449586408, 0.7229832745431599, 0.7448344962995876, 0.6939409269666754, 0.6939237353382809, 0.43691040027639694, 0.4577096595304705, 0.4791529213123338, 0.4004544437009314, 0.03923469031557192, 0.03608163751395621, 0.0406185399657778, 0.4585248121406661, 0.0444116806044047, 0.3603077161629167, 0.26135356451314573, 0.11684605686593297, 0.10915031504347239, 0.144238056087037, 0.13973528155781512, 0.12021007974159548, 0.23645281628147763, 0.13269283224136108, 0.12395120547258265, 0.11135506007717, 0.120388914270812, 0.12438895454964605, 0.1062797720412576, 0.11832691974995035, 0.1367251745540392, 0.1141583638191791, 0.11472835903363598, 0.9849369391253359, 0.9817686558578125, 0.9819834498914375, 0.9650648734669071, 0.9759407035859164, 0.9808824429837224, 0.9843963908871884, 0.9816154373645184, 0.9806736560453799, 0.36766697699014095, 0.3304899104145971, 0.33018657153906106, 0.3279223013571937, 0.37198621288669287, 0.3592556041835293, 0.3069577567440396, 0.34069341185082225, 0.2968288436311234, 0.23258778103288646, 0.33178925087537037, 0.21733553666614702, 0.20470156731675748, 0.32925908919172797, 0.34104458328461795, 0.214730843155289, 0.22245230695517926, 0.22549409409055365, 0.18110599772944702, 0.08668751351518134, 0.17242664623821802, 0.09299808028319434, 0.16632511814280693, 0.15066489280504125, 0.30575482368101514, 0.12765015306101846, 0.1512105401667031, 0.171634455902827, 0.18337865429814815, 0.16403873725264562, 0.15048752651515274, 0.16027009919651647, 0.1613140567853305, 0.1514120216353969, 0.08606812285724974, 0.14198268897349153, 0.000476196019201236, 0.023118684889599117, 0.0009277216021679191, 0.004328062829087709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05450670436671479, 0.054978888726193276, 0.07966565788913982, 0.0735912331446531, 0.012960338033289887, 0.011402272324866902, 0.05420138094408666, 0.07537916948720558, 0.04591194441745361, 0.17200963451835016, 0.027562905951572292, 0.08869466082080724, 0.05713974290613244, 0.06952892345265349, 0.11840767760217674, 0.08912683558783852, 0.06330037765292218, 0.08424302481879153, 0.08241911276263258, 0.07889142748686284, 0.10851938545785911, 0.20959726864263462, 0.1565705044693424, 0.05765613029653471, 0.07315331190713059, 0.07542082366498126, 0.07419120565531268, 0.442655489709159, 0.4620271599338127, 0.45838711431222456, 0.4939175317888169, 0.5356197010189145, 0.4496409032278519, 0.5031173996261813, 0.4951630793391978, 0.5333077822449035, 0.1235618393912864, 0.09647973264848009, 0.08137753979517115, 0.1444015413549563, 0.10254163158526275, 0.1511229140948126, 0.12108273719787555, 0.15927957816017224, 0.1243502703686814, 0.20951481271896322, 0.1897753401612451, 0.1843558914053708, 0.18830035250670363, 0.2443172958695169, 0.20124850011604534, 0.18037797801197264, 0.21760976302951773, 0.2938986450996699, 0.2790921820850669, 0.2814586164028178, 0.3443220277579365, 0.31370116730237974, 0.2672957092175531, 0.3433407191464104, 0.4109698468080233, 0.3340844051021675, 0.3872659645667018, 0.26791925778098025, 0.2612282704709932, 0.24403072042423968, 0.3178440760971575, 0.18466366066665674, 0.2289253168477341, 0.22855684102348672, 0.21630292974165144, 0.2691006895052057, 0.20818508503648447, 0.22811147207732152, 0.20710866379019066, 0.19334930905265468, 0.2327663155730394, 0.18456720969224383, 0.20327054090566898, 0.20273584659207056, 0.19474704126562714, 0.205436858953586, 0.24827409659166388, 0.2061017771393373, 0.2424539613112534, 0.20003261197913802, 0.19509321335323848, 0.41424587096263277, 0.18996431439127326, 0.18291840985162044, 0.7681471372604058, 0.16793259580815179, 0.16962207417457353, 0.7846711256719554, 0.7334129305434613, 0.1930790012211856, 0.14341305072394428, 0.15921721629198005, 0.2059856339165519, 0.3412439640663638, 0.20904207002143105, 0.16428522537370405, 0.32225671995133287, 0.3624203588653496, 0.14802456980932588, 0.18461195075977088, 0.1990630114475619, 0.20029506987291346, 0.18449674848109698, 0.18216598662353856, 0.20211713636571538, 0.19706944945611748, 0.18245506805593026, 0.18450149712920205, 0.1884786289742436, 0.17490802576503317, 0.19692051579649106, 0.07541075901164329, 0.07840910880823138, 0.07740778043265273, 0.06890236640509884, 0.08016068495531203, 0.07581413051192898, 0.08044510216967171, 0.0742624366673037, 0.07719304650258252]}, "mutation_prompt": null}
{"id": "a917aa3c-3986-48f6-9cb9-1df99866be6d", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Maintain population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.4  # Slightly higher final inertia for stability\n        self.cognitive_coeff = 1.8  # Slightly reduced for balance\n        self.social_coeff = 1.8  # Balanced social coefficient\n        self.quantum_coeff = 0.6  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi / 2)  # Cosine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with dynamic neighborhood learning and enhanced quantum leaps for robust exploration and convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.86809843180453, 0.8656865911426441, 0.8520359754768346, 0.8689424779516427, 0.8833534924019595, 0.8801421218086176, 0.8721560948385834, 0.8634062411407808, 0.8470759917238162, 0.6731760713842743, 0.6984099073015564, 9.999999999998899e-05, 0.7153748986695032, 0.7382878408244324, 0.704009479561104, 0.5904943076564743, 0.6955089531526448, 0.4651001105784881, 0.1382893192137934, 0.14700397866728565, 0.12913293972348638, 0.1759303304669133, 0.17303176482832094, 0.5365713493906714, 0.16645677476221077, 0.1457322522928609, 0.5586144074084555, 0.3642476444045266, 0.138225955628012, 0.12650718919554016, 0.12338912672246294, 0.1337548907142766, 0.13646208448779928, 0.15772718046087408, 0.17574233200011224, 0.1089760639902797, 0.9814142243321458, 0.992311977478297, 0.9834889655451481, 0.9750066404543468, 0.9781706588561505, 0.9750789789320502, 0.988583733314754, 0.9863141471271968, 0.9782154418328087, 0.6065880869571294, 0.5967720386430975, 0.4942958589358364, 0.426691750200218, 0.5168566427423578, 0.4270911099261455, 0.5119784501385705, 0.5421179169945152, 0.6327876731591711, 0.20270133011854563, 0.8401556746546058, 0.22254750946681712, 0.3003245377072742, 0.19211790276791485, 0.19490579599263935, 0.22849995088368447, 0.40518433213993954, 0.39140263433541655, 0.20026783760443456, 0.18350798856932238, 0.2190955350090832, 0.1119177074752512, 0.17937402852203488, 0.12911412062741434, 0.31718776706386764, 0.16015889974530306, 0.19979350355828707, 0.2145706236443129, 0.22560095911706168, 0.2199530543268292, 0.21202861034561304, 0.2263695433373203, 0.18773008744115327, 0.3183954462954178, 0.21064225867144148, 0.23079774984096735, 9.999999999998899e-05, 0.033481396564341015, 9.999999999998899e-05, 0.024729183314617487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016565281902716222, 0.10469164517640106, 0.04534986570119326, 0.06225893865981302, 0.0732222375592606, 0.03382105791684953, 0.0359239804842133, 0.06194958746066259, 0.0453821655842892, 0.11447296859435407, 0.1191794744787672, 0.034320659298624934, 0.20341857903206606, 0.07515691146040704, 0.07623823293753595, 0.07525890200605101, 0.09869738523629368, 0.16830281627970767, 0.07231146258022858, 0.0723203898865975, 0.16126183813471884, 0.15926107511735277, 0.04363855826957408, 0.18988333137116464, 0.1352023143551, 0.11649772579811601, 0.1460226538284869, 0.08335173385367689, 0.6147295648379401, 0.5651061686144145, 0.5157825383736048, 0.513713077675898, 0.5434666760963826, 0.550371676094936, 0.5627308026588336, 0.5654446278449188, 0.5276343978066933, 0.09159643084439795, 0.12814970568640716, 0.08929832856829256, 0.11517643742676431, 0.16343642858358887, 0.13796100842287595, 0.11383376492074004, 0.13107137567848937, 0.09977711382141896, 0.26252269491531866, 0.20614921875537906, 0.24251614212904804, 0.28616406073200606, 0.3215841927926255, 0.15960649467868537, 0.3345583518300329, 0.21353380892362472, 0.2676044822474519, 0.41574256171845214, 0.3213472496655988, 0.3474289350965245, 0.28094723098789953, 0.20758026658125894, 0.3307691144834287, 0.2363110534074273, 0.4100078612789384, 0.3025865709952452, 0.24760102008799634, 0.2352775712102676, 0.3074835799791821, 0.2317531087487883, 0.15785821262332178, 0.33806687381452105, 0.21490611536991477, 0.32371200531321986, 0.2603237857821705, 0.24290709494357832, 0.19115754564583953, 0.1941943518530671, 0.21313331592185236, 0.19064356023472195, 0.527737971065595, 0.2382319403689599, 0.24894221106001446, 0.22437678580611387, 0.2392285288953977, 0.5884940169709203, 0.3942985110577699, 0.2394561942454273, 0.22018875592073672, 0.19888324487025544, 0.21929039715436627, 0.2272152477409236, 0.6241699070880998, 0.9221889268189425, 0.12689168130862438, 0.15336743451992574, 0.17303540289206243, 0.20116093222745546, 0.19990929863511597, 0.1421147804612758, 0.1694519036612706, 0.21355146013657822, 0.4928310132342645, 0.2134533254307388, 0.1496960205625334, 0.41788563625481556, 0.1682306963337742, 0.20731421866532596, 0.1049392372847382, 0.1051179114684404, 0.5611177739082233, 0.19086889504407778, 0.22595933326916207, 0.200978461179119, 0.21095816062868844, 0.1900637808819079, 0.19841867777942057, 0.19024252017227972, 0.17800754969531718, 0.18072025186600527, 0.12666379560630125, 0.1373089791204215, 0.09765569439316313, 0.08546667493689442, 0.08080541052732138, 0.09020828994915886, 0.10762034059557513, 0.09946373738746606, 0.09759787122430719]}, "mutation_prompt": null}
{"id": "9a710334-21e1-40b6-9912-1be40a960857", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.3  # Adjusted for better convergence\n        self.cognitive_coeff = 2.0  # Slightly increased for more exploration\n        self.social_coeff = 1.5  # Reduced social influence\n        self.quantum_coeff = 0.5  # Adaptive quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.sin(phase * np.pi / 2)  # Sinusoidal inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < (self.quantum_coeff * (1 - phase)):  # Adaptive quantum leap\n                quantum_shift = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))  # Smaller quantum leaps for stability\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with enhanced leader selection and adaptive quantum leap strategy for improved exploration and convergence.", "configspace": "", "generation": 69, "fitness": 0.29713238810297776, "feedback": "The algorithm QuantumAdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.8298745886590213, 0.8198497199195562, 0.8133799332226133, 0.8060438747756832, 0.815034345229341, 0.8037022695570932, 0.8021598874168948, 0.8289182567574536, 0.7918625758878985, 0.6292863503376358, 0.4977030696952579, 0.3760113531922208, 0.5948744082070205, 0.21357222098475082, 0.5919624017936801, 0.6064415681243757, 0.6316173035524033, 0.6176948882806634, 0.16019440217997094, 0.14425244484178168, 0.16689555931891897, 0.14881556072128255, 0.16444968509495428, 0.12927268850833806, 0.1362717356166906, 0.6315075067471501, 0.36934329243142094, 0.1226199717217159, 0.12605802399682686, 0.12578005077122056, 0.13561926330288698, 0.1287499685389295, 0.1330580982554289, 0.31124636582704257, 0.13966072222420478, 0.13899378484686475, 0.9818692282106062, 0.9922916829193301, 0.9846145490815258, 0.9619248885506417, 0.9856141394624022, 0.970603096946256, 0.9828320661531695, 0.9856114469450189, 0.977909386484524, 0.5991196675818689, 0.5594026618904702, 0.4533384121050402, 0.5333415897405908, 0.44326658931799134, 0.4521617507307264, 0.578629875383764, 0.5603936111242824, 0.5614790392662136, 0.25710012181335873, 0.2102417745934675, 0.21933970146391435, 0.2110781389354236, 0.326659023484261, 0.29601494146619534, 0.3048752077326399, 0.361917514950311, 0.2247378595101136, 0.23765606632510594, 0.18878648029177314, 0.16056726649678954, 0.10025383090303186, 0.1832274740563994, 0.17733450240856763, 0.2365630707081523, 0.17501620789365224, 0.20388350538994615, 0.1898414948956232, 0.19527975045338686, 0.19216614236147056, 0.14783595636384816, 0.15089226927599397, 0.18361911458808544, 0.21791158855026715, 0.11407711225620876, 0.19353779548216288, 9.999999999998899e-05, 0.004121555954627376, 0.04654635800106155, 0.042014818514304886, 0.000328221335559431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051072291028949945, 0.05179465009486395, 0.08377281207757847, 0.1315073496836371, 0.05770336868940429, 0.006347668521145211, 0.027522583416504154, 0.059849325215258986, 0.048006685807228, 0.058936314432292414, 0.10997296464698325, 0.03334502360676128, 0.18545798102823619, 0.11278596837754817, 0.0870871254029707, 0.10354074731312046, 0.12959194409233477, 0.06458825480879316, 0.064630410412429, 0.11471936993157683, 0.10991477660414217, 0.13403425018742687, 0.10499753974822834, 0.10977991275309873, 0.1603132437636261, 0.0787821807903083, 0.047102654186576, 0.08310886316995747, 0.48802992858036254, 0.4878114375294673, 0.521433799431527, 0.5896474021490683, 0.519291487902624, 0.5513386359018408, 0.5517700786450015, 0.5509088101670823, 0.5052748144687279, 0.08848565107827666, 0.11353848482090156, 0.10034749901882822, 0.10025005311502555, 0.1172708159732554, 0.08666844605175461, 0.11684634558997242, 0.08715507294539726, 0.1458576273938661, 0.1657392530968873, 0.3599435671768555, 0.21707598158639296, 0.1818889935134751, 0.20984409076528587, 0.1815305244693346, 0.36114444387584876, 0.2566149139586644, 0.18058786346933609, 0.3086392386310074, 0.36748907893441196, 0.4984321537474644, 0.4592546272039353, 0.4217412963144378, 0.3549424029681314, 0.31548654692838973, 0.5223866903721228, 0.37408153987333326, 0.3365314921892546, 0.3257514522696704, 0.2676085961591912, 0.29767008458725697, 0.2537723150221819, 0.26316192135490135, 0.2612074926470427, 0.27354900426689277, 0.2806844244125575, 0.21560246664957827, 0.16800149699224898, 0.19405859294329353, 0.24391671798843262, 0.1957334899724097, 0.2315678922759118, 0.20947075927169512, 0.20308646306776212, 0.22410357211499798, 0.21312851725596993, 0.1932297816456907, 0.21623892918171905, 0.43879291481690363, 0.635446915422252, 0.24021193789031703, 0.22031604323510445, 0.19501526834630334, 0.5928735991563392, 0.16441690623259442, 0.19961515160245613, 0.15395336098175705, 0.8728178742978867, 0.1999550355668409, 0.19892083375389047, 0.14258592354723332, 0.1701180133726673, 0.8490346090218849, 0.80212574874966, 0.21116788724890767, 0.1558552606691188, 0.20760001859397959, 0.1691153306076285, 0.15074346224468504, 0.1049943243536563, 0.20524849026106262, 0.602728904675794, 0.17828191585213504, 0.18274913285294925, 0.18546859458203313, 0.18061750129934662, 0.19333250829208515, 0.19524013533910556, 0.20935618470345385, 0.18010856457209845, 0.21025328806764687, 0.11909872223151796, 0.09029418505050146, 0.08522635485316221, 0.09473220826097839, 0.09895492379960047, 0.08357556587556414, 0.08878890808685314, 0.09747124858201317, 0.08529406469597856]}, "mutation_prompt": null}
{"id": "e35e1dbf-356c-4ec2-b97c-e905753fe6db", "solution": "import numpy as np\n\nclass QuantumSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(50, dim * 7)  # Increased population for diversity\n        self.inertia_weight_init = 0.8  # Slightly increased initial inertia for exploration\n        self.inertia_weight_final = 0.3  # Reduced final inertia for faster convergence\n        self.cognitive_coeff = 2.0  # Enhanced cognitive component\n        self.social_coeff = 1.5  # Reduced social coefficient for individual exploration\n        self.quantum_coeff = 0.7  # Increased quantum behavior for diverse search\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.sin(phase * np.pi / 2)  # Sine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            local_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[local_best_index] < global_best_score:\n                global_best_score = personal_best_scores[local_best_index]\n                global_best_position = personal_best_positions[local_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2.5, 2.5, (self.population_size, self.dim))  # More aggressive quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumSwarmOptimizer", "description": "Quantum Swarm Optimizer with Adaptive Neighborhood Interaction and Proactive Quantum Leaps for Enhanced Exploration and Convergence.", "configspace": "", "generation": 70, "fitness": 0.266425911939295, "feedback": "The algorithm QuantumSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.7126894173888498, 0.7233057131169942, 0.6952863449039637, 0.6753882289333815, 0.7265289674081339, 0.7039696593754108, 0.7057609943741514, 0.7186672541252194, 0.7303647091906278, 0.43630760506998667, 0.4250419279291918, 0.4602782075289409, 0.4362178277300238, 0.4663802889599087, 0.42623646873382526, 0.4395159517638384, 0.41325236042209423, 0.44970424378625673, 0.12093797731416511, 0.15043038564858868, 0.40594847937311984, 0.13339810682626807, 0.16969979026946969, 0.1334393676953396, 0.21526974296781154, 0.17420472849346202, 0.1373985997741367, 0.12438135381505144, 0.11504107944684128, 0.1358982244295912, 0.12683669503953476, 0.129109274695953, 0.11524740597682936, 0.11735340012457507, 0.09522753350736934, 0.11166790781334479, 0.9776809960606566, 0.9776152415872134, 0.9772854542504672, 0.9724864604974209, 0.9681060579450632, 0.9760311028810684, 0.9780398588553056, 0.9768862095170789, 0.9743628008693948, 0.39865518116245835, 0.43184933382910273, 0.3922874558517241, 0.3817681437935291, 0.3464049952293716, 0.34333303580730723, 0.3756619106319653, 0.34347483490723396, 0.40707202417250965, 0.20852716382433223, 0.39904291759355126, 0.2126520448761441, 0.20386533723720623, 0.1880355061110749, 0.20517044383124294, 0.6280975488394278, 0.22249719690391556, 0.21254438153129163, 0.10766736694937118, 0.11862058480325466, 0.10567648064255752, 0.10224868031570389, 0.1512714495383476, 0.14687087387585307, 0.15495484791025027, 0.15776771052205185, 0.16433617154582225, 0.12319666714499289, 0.15231197894436843, 0.1501460435393538, 0.167482562076666, 0.17374875190700423, 0.1546686012654943, 0.17890607988395535, 0.11813550174141474, 0.1780336779855186, 0.0347288907813168, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020397770832670026, 0.016354931517989058, 0.05978285862626531, 9.999999999998899e-05, 9.999999999998899e-05, 0.12761082530605694, 0.07855600976017862, 0.11680653256169005, 0.06209737252574232, 0.015862656315230206, 0.05887091453790838, 0.07629546658197828, 0.04094773869545498, 0.04872118502784328, 0.034547827347215954, 0.02398490016656163, 0.037415146018017764, 0.05289024953785626, 0.10625722922468961, 0.07241687571344135, 0.06502765325441928, 0.0728528672821851, 0.09162975911295657, 0.19030453727154495, 0.055019562567468316, 0.17251264987625214, 0.12122750923619297, 0.034066577494987205, 0.11931444176145944, 0.06881273551046851, 0.11675077952233315, 0.07284838173238373, 0.47767348300656376, 0.46112909370870436, 0.44748395116187545, 0.4537396914737456, 0.46090261224601436, 0.46464477039889407, 0.4840836907939854, 0.4844906282914436, 0.46667449552096263, 0.11941452016815057, 0.07479826579954019, 0.09525856657447385, 0.12336869854353738, 0.1125601256289317, 0.11151437051481228, 0.09383721186991445, 0.10933777591913363, 0.11388674079130268, 0.341455457344933, 0.19424794800588274, 0.15826897238217175, 0.2403081838160468, 0.22757620906031528, 0.18122782341341537, 0.1858429144802619, 0.20507864014554922, 0.16788911505056403, 0.3733542465029801, 0.35530749479936874, 0.3100881484292768, 0.27853744293554994, 0.4050446840504537, 0.3494704953759602, 0.3780707567260736, 0.31024944127329523, 0.4172711432502426, 0.2788216933506896, 0.22086947519147881, 0.24286902276064182, 0.2589804084115327, 0.2157170811458563, 0.1882898841876588, 0.21351681655126709, 0.293145126617548, 0.27760476509052234, 0.18932688650701457, 0.18256143801249913, 0.18423045434027208, 0.21245165905516128, 0.19531575669149293, 0.21495072528801396, 0.20698631892145958, 0.19928701736386223, 0.2081151331058917, 0.18467028913094508, 0.20991553577706656, 0.20824906690948042, 0.4024807557495973, 0.2259400137228449, 0.2091098313823332, 0.22991774222636308, 0.20542237186355217, 0.22170560333903755, 0.7530961242231708, 0.1677521562617651, 0.21585182234920153, 0.7805309037654631, 0.19826330850356422, 0.19702943105317638, 0.715128509842486, 0.1936509329681455, 0.20405599117054385, 0.5066383663049667, 0.20739890331384203, 0.5437199759985618, 0.40915576845300716, 0.40874594490471483, 0.15190979759201728, 0.15162482882701356, 0.19008041054752134, 0.1818307535542455, 0.20296417358624452, 0.17316728000727832, 0.2103827104986582, 0.1899148451191187, 0.19086281839085073, 0.19052628662127602, 0.1949474097267634, 0.18304697707350515, 0.1879337713629029, 0.07493358631078795, 0.07303175026450714, 0.0740610115991347, 0.09663928007285305, 0.07448714460016559, 0.08406774381963733, 0.07762639709922403, 0.09498824458643795, 0.07613620752450678]}, "mutation_prompt": null}
{"id": "a45f4a3b-e6ef-47b0-8e6f-15e3158d5db2", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Maintain population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.4  # Slightly higher final inertia for stability\n        self.cognitive_coeff = 1.8  # Slightly reduced for balance\n        self.social_coeff = 1.8  # Balanced social coefficient\n        self.quantum_coeff = 0.6  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi / 2)  # Cosine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with dynamic neighborhood learning and enhanced quantum leaps for robust exploration and convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.86809843180453, 0.8656865911426441, 0.8520359754768346, 0.8689424779516427, 0.8833534924019595, 0.8801421218086176, 0.8721560948385834, 0.8634062411407808, 0.8470759917238162, 0.6731760713842743, 0.6984099073015564, 9.999999999998899e-05, 0.7153748986695032, 0.7382878408244324, 0.704009479561104, 0.5904943076564743, 0.6955089531526448, 0.4651001105784881, 0.1382893192137934, 0.14700397866728565, 0.12913293972348638, 0.1759303304669133, 0.17303176482832094, 0.5365713493906714, 0.16645677476221077, 0.1457322522928609, 0.5586144074084555, 0.3642476444045266, 0.138225955628012, 0.12650718919554016, 0.12338912672246294, 0.1337548907142766, 0.13646208448779928, 0.15772718046087408, 0.17574233200011224, 0.1089760639902797, 0.9814142243321458, 0.992311977478297, 0.9834889655451481, 0.9750066404543468, 0.9781706588561505, 0.9750789789320502, 0.988583733314754, 0.9863141471271968, 0.9782154418328087, 0.6065880869571294, 0.5967720386430975, 0.4942958589358364, 0.426691750200218, 0.5168566427423578, 0.4270911099261455, 0.5119784501385705, 0.5421179169945152, 0.6327876731591711, 0.20270133011854563, 0.8401556746546058, 0.22254750946681712, 0.3003245377072742, 0.19211790276791485, 0.19490579599263935, 0.22849995088368447, 0.40518433213993954, 0.39140263433541655, 0.20026783760443456, 0.18350798856932238, 0.2190955350090832, 0.1119177074752512, 0.17937402852203488, 0.12911412062741434, 0.31718776706386764, 0.16015889974530306, 0.19979350355828707, 0.2145706236443129, 0.22560095911706168, 0.2199530543268292, 0.21202861034561304, 0.2263695433373203, 0.18773008744115327, 0.3183954462954178, 0.21064225867144148, 0.23079774984096735, 9.999999999998899e-05, 0.033481396564341015, 9.999999999998899e-05, 0.024729183314617487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016565281902716222, 0.10469164517640106, 0.04534986570119326, 0.06225893865981302, 0.0732222375592606, 0.03382105791684953, 0.0359239804842133, 0.06194958746066259, 0.0453821655842892, 0.11447296859435407, 0.1191794744787672, 0.034320659298624934, 0.20341857903206606, 0.07515691146040704, 0.07623823293753595, 0.07525890200605101, 0.09869738523629368, 0.16830281627970767, 0.07231146258022858, 0.0723203898865975, 0.16126183813471884, 0.15926107511735277, 0.04363855826957408, 0.18988333137116464, 0.1352023143551, 0.11649772579811601, 0.1460226538284869, 0.08335173385367689, 0.6147295648379401, 0.5651061686144145, 0.5157825383736048, 0.513713077675898, 0.5434666760963826, 0.550371676094936, 0.5627308026588336, 0.5654446278449188, 0.5276343978066933, 0.09159643084439795, 0.12814970568640716, 0.08929832856829256, 0.11517643742676431, 0.16343642858358887, 0.13796100842287595, 0.11383376492074004, 0.13107137567848937, 0.09977711382141896, 0.26252269491531866, 0.20614921875537906, 0.24251614212904804, 0.28616406073200606, 0.3215841927926255, 0.15960649467868537, 0.3345583518300329, 0.21353380892362472, 0.2676044822474519, 0.41574256171845214, 0.3213472496655988, 0.3474289350965245, 0.28094723098789953, 0.20758026658125894, 0.3307691144834287, 0.2363110534074273, 0.4100078612789384, 0.3025865709952452, 0.24760102008799634, 0.2352775712102676, 0.3074835799791821, 0.2317531087487883, 0.15785821262332178, 0.33806687381452105, 0.21490611536991477, 0.32371200531321986, 0.2603237857821705, 0.24290709494357832, 0.19115754564583953, 0.1941943518530671, 0.21313331592185236, 0.19064356023472195, 0.527737971065595, 0.2382319403689599, 0.24894221106001446, 0.22437678580611387, 0.2392285288953977, 0.5884940169709203, 0.3942985110577699, 0.2394561942454273, 0.22018875592073672, 0.19888324487025544, 0.21929039715436627, 0.2272152477409236, 0.6241699070880998, 0.9221889268189425, 0.12689168130862438, 0.15336743451992574, 0.17303540289206243, 0.20116093222745546, 0.19990929863511597, 0.1421147804612758, 0.1694519036612706, 0.21355146013657822, 0.4928310132342645, 0.2134533254307388, 0.1496960205625334, 0.41788563625481556, 0.1682306963337742, 0.20731421866532596, 0.1049392372847382, 0.1051179114684404, 0.5611177739082233, 0.19086889504407778, 0.22595933326916207, 0.200978461179119, 0.21095816062868844, 0.1900637808819079, 0.19841867777942057, 0.19024252017227972, 0.17800754969531718, 0.18072025186600527, 0.12666379560630125, 0.1373089791204215, 0.09765569439316313, 0.08546667493689442, 0.08080541052732138, 0.09020828994915886, 0.10762034059557513, 0.09946373738746606, 0.09759787122430719]}, "mutation_prompt": null}
{"id": "ece81d5f-f2e5-4c87-befa-ff2e38a5b23f", "solution": "import numpy as np\n\nclass QuantumInspiredDynamicSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(50, dim * 5)  # Adjusted for improved diversity\n        self.inertia_weight_init = 0.8  # Higher initial inertia for exploration\n        self.inertia_weight_final = 0.3  # Lower final inertia for exploitation\n        self.cognitive_coeff = 2.0  # Enhanced cognitive learning\n        self.social_coeff = 2.0  # Enhanced social learning\n        self.quantum_coeff = 0.5  # Balanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = (self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * phase)  # Linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.normal(0, 1.5, (self.population_size, self.dim))  # Gaussian quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumInspiredDynamicSwarmOptimizer", "description": "Quantum-Inspired Dynamic Swarm Optimizer with adaptive learning rates and strategic exploration via multi-phase dynamics.", "configspace": "", "generation": 72, "fitness": 0.23081311790905307, "feedback": "The algorithm QuantumInspiredDynamicSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.6202636655506422, 0.5952165409162853, 0.5540490700219398, 0.5856322197589054, 0.621533238120239, 0.5861974527651712, 0.6066156735833688, 0.601312561747247, 0.5794049479957959, 0.25831073999930854, 0.32976121273177483, 0.3109043963630117, 0.2649449902628226, 0.2083419046473769, 0.04049769137725456, 0.2291000607628999, 0.03925190709132875, 0.27734763870369983, 0.12051919456649807, 0.12278530564899792, 0.11601750931133614, 0.11059280307147978, 0.10067047808977492, 0.1827000154244841, 0.09710690362524332, 0.17050274411196364, 0.11131088389614674, 0.09963145238396154, 0.11827717440314589, 0.10759381916305522, 0.13013160486675557, 0.09205030259521885, 0.11599134101398523, 0.10905817973478549, 0.1112721904980799, 0.10241661166192584, 0.9895115917832441, 0.9823918754026753, 0.9900707192398873, 0.9775895023261244, 0.9810260390515337, 0.9777483970556212, 0.9863409235271071, 0.9816211375828414, 0.9814612116197727, 0.2694839731725833, 0.28958174752769716, 0.24401201610479362, 0.2992475761231913, 0.2362166208897143, 0.2946407991275012, 0.266856529534354, 0.265030218561499, 0.24850529010912348, 0.1629056548907778, 0.16758292221098525, 0.19008239419061734, 0.19910028835614557, 0.1859950676167894, 0.19591593168951837, 0.22069334013313358, 0.5069947633510323, 0.2077460040769541, 0.1302273120364129, 0.08396930843836548, 0.14734163838525294, 0.1534751130946055, 0.13488331832668532, 0.0980812272591649, 0.14053908859653674, 0.13224532566257818, 0.14175730220364058, 0.1393708238662491, 0.13803723552536284, 0.12693753714388334, 0.12879414803622546, 0.13233983254378034, 0.11909528914508405, 0.15961555875498, 0.08589489030339426, 0.10820979079971216, 0.002085190714969043, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034986203124731663, 9.999999999998899e-05, 0.0035213960701329095, 9.999999999998899e-05, 9.999999999998899e-05, 0.00041279554491557846, 0.08574557929039617, 0.057792392717768926, 0.0862402204477245, 0.0648291669911032, 0.02062248634197772, 0.012176579303124546, 0.05964297390669959, 0.036490097351452144, 0.0534366766223775, 0.0425164477895803, 9.999999999998899e-05, 0.046428898820563, 0.05345365245153044, 0.11640057631036749, 0.04354125947244991, 0.05564730210374824, 0.052804579871224444, 0.05219624244901366, 0.1523540360852509, 0.17493966575150754, 0.08571545421096183, 0.004804964601468731, 0.11256767691997771, 0.10639838276258484, 0.042059144595715914, 0.09718746586912352, 0.06677417597168789, 0.4357278045368611, 0.40662170251232466, 0.44102744699597474, 0.42399677914244793, 0.45235474160684663, 0.4678781864072037, 0.4343887338209427, 0.4398498055809611, 0.4034472687856131, 0.07884309949719825, 0.09123327663494452, 0.09046693606600786, 0.1165636620596413, 0.1076744026720502, 0.10587639499815904, 0.08291107279883869, 0.0858234019659827, 0.08346521515682848, 0.24095939858461013, 0.16638741233618426, 0.2470481297426459, 0.21673355304773523, 0.2139795207496309, 0.1605988041514873, 0.32040377288798494, 0.20612445635257015, 0.2242394965431248, 0.3325401793395987, 0.30373732012437105, 0.2365523894370577, 0.3098029471206917, 0.2520327973620162, 0.24434954229263617, 0.32681829465376666, 0.3249432093631598, 0.3088835830584383, 0.25162014638758423, 0.1970181703233863, 0.19835686733074331, 0.21800593267219281, 0.16446273975461223, 0.18900958757059283, 0.2306729275967211, 0.252866460243959, 0.19579290978469732, 0.18946619792020392, 0.20898335931564604, 0.16877444572129807, 0.1947513864026923, 0.20288506326850186, 0.18169237114988301, 0.21303998593121065, 0.18250871602115437, 0.18554178213693218, 0.2103584393442396, 0.21588324699337247, 0.21053637955034388, 0.20091616300371418, 0.25022092994460765, 0.18509838656909872, 0.18440782283992585, 0.17241244599259187, 0.19004995128215674, 0.6945413483067567, 0.1645180149151012, 0.15296765173276794, 0.6385098011912138, 0.6406606171698551, 0.13483480824787353, 0.16810522360358393, 0.15131599531475093, 0.7265899344833643, 0.39862792538290104, 0.20592427452903994, 0.1917927976716206, 0.41296381473206034, 0.32059251484102724, 0.1876185934224861, 0.1941494191944495, 0.20789437100031005, 0.20459410994817107, 0.1951370338441738, 0.18260764548039587, 0.18076974862121165, 0.1891230295450923, 0.19316239509043198, 0.20352700964094428, 0.18613309742348993, 0.1836333871948448, 0.1846815034832734, 0.08205551901836028, 0.08154945970567584, 0.07377863674402774, 0.08041887508973755, 0.07875592679955845, 0.07966243840985499, 0.0865499199499633, 0.07747923794495604, 0.07457279002985417]}, "mutation_prompt": null}
{"id": "eea27a05-3d9a-4a1c-ac49-3dc12344670b", "solution": "import numpy as np\n\nclass QuantumEnhancedSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)\n        self.inertia_weight_init = 0.9  # Higher initial inertia for exploration\n        self.inertia_weight_final = 0.3  # Lower final inertia for convergence\n        self.cognitive_coeff = 2.0  # Increased cognitive coefficient\n        self.social_coeff = 2.0  # Increased social coefficient\n        self.quantum_coeff = 0.7  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * (1 - np.cos(phase * np.pi)) / 2  # Cyclic inertia\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumEnhancedSwarmOptimizer", "description": "Quantum-Enhanced Swarm Optimization with adaptive learning rates and cyclic inertia for improved exploration and convergence stability.", "configspace": "", "generation": 73, "fitness": 0.20407688769006846, "feedback": "The algorithm QuantumEnhancedSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.48187772957299135, 0.4709578567063333, 0.4879824306949443, 0.5314938603693703, 0.5172963162008712, 0.5405628352235313, 0.5416232699622323, 0.5396610031991547, 0.4832774472867608, 0.1913593423589881, 0.023417091767259812, 0.1893670644531651, 0.1106477524114029, 0.13575941579921347, 0.19874264867329494, 0.02505104466531083, 0.17915131953621843, 0.1155660410001097, 0.11462569668218237, 0.09562888687384585, 0.10556936992987953, 0.08446559706738499, 0.09925635555306322, 0.11601675229930208, 0.08368802960465638, 0.09355346315141921, 0.12552094064473318, 0.0850611011228084, 0.07843843658375749, 0.08448909989149811, 0.0676895856829306, 0.08902852208509326, 0.07790061383312841, 0.08470166701605975, 0.10354607525788706, 0.07418604366262627, 0.9867376355296604, 0.9924164891004096, 0.9885178828140444, 0.9751403096774599, 0.9846421082352415, 0.9745915662242478, 0.9889181575459542, 0.9854939310912663, 0.9875262422198502, 0.252367824791776, 0.24506750782031317, 0.22558404309770064, 0.25245095268098816, 0.21995168360879902, 0.21701650051460653, 0.2405261727314082, 0.22048567333411717, 0.22180181476979965, 0.1964547963971477, 0.25396454840562543, 0.18669978931760878, 0.1850541759103317, 0.2866392545916817, 0.15444203213464502, 0.5192878576407264, 0.23310754176872717, 0.22107114884017764, 0.12025876176811923, 0.13284875602253354, 0.14810920451204435, 0.07496377603736415, 0.12040871288096655, 0.11938280516791544, 0.10088738650892537, 0.09977982496321869, 0.10294356668950189, 0.08895092026601381, 0.14280154513213328, 0.08596124312022313, 0.10818641913269567, 0.07003445424393595, 0.09774514807952817, 0.08264280036953808, 0.0883308713561437, 0.07788138766426567, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013394438747392767, 0.061099621653866065, 0.06772497049963588, 0.06527467642296758, 0.05854863217882034, 0.01229663311979634, 0.01446918996287172, 0.05139694553864971, 0.01971807649208146, 0.061333114865666394, 0.020328687764950115, 0.015146296090596478, 0.029246274326229504, 0.08593141797951209, 0.03319424931789128, 0.028267699131123702, 0.03299436095845687, 0.02804711009794425, 0.058294805793268956, 0.05380858195806071, 0.08848273276491803, 0.10101922589562295, 0.05536742756185109, 0.07802411490777994, 0.06960543026916766, 0.05907339521981625, 0.05219814727533134, 0.05010069225448133, 0.352597331593562, 0.3904134284463062, 0.3723427224377871, 0.3753700378788716, 0.3562295783592504, 0.38801700302346576, 0.36806602164547186, 0.3615832975649176, 0.3467662442209204, 0.09797493768696952, 0.08615071626727244, 0.09831986051119435, 0.08316649512666374, 0.09688148828505128, 0.08255553189248699, 0.09980400259667765, 0.09739820170818825, 0.1062863117158962, 0.16834588178335486, 0.15972395571822728, 0.20351859679278883, 0.18534621736257695, 0.1937923731291462, 0.18492060444373215, 0.15414636403633808, 0.12783877390092513, 0.17797738590726297, 0.26667906033155964, 0.23530768323812623, 0.2891420281464917, 0.25891845886752385, 0.18852321155839047, 0.25735009414622945, 0.2751319023509171, 0.24196779350412867, 0.3022143305209113, 0.17825756828507766, 0.1774219121566013, 0.16447411001803935, 0.15744619620614309, 0.14429931102742577, 0.17180910177157438, 0.18342150718679195, 0.17559502360974677, 0.15113368403616645, 0.16927733525841526, 0.1876827840596288, 0.1866242358486786, 0.1848885131503475, 0.1765223862326497, 0.1775471573694798, 0.17507857682750383, 0.1793104660372643, 0.18561641464405754, 0.18347421612447923, 0.17946227291311312, 0.1712562193724978, 0.1881247794901647, 0.18287390828951977, 0.17445605244341478, 0.1980854568755529, 0.17312234070998544, 0.17688800531258764, 0.5725162131814807, 0.190829202342778, 0.15307918955368582, 0.5565015126532935, 0.18880546550456412, 0.18959748893893014, 0.5057605086926145, 0.16805537017723504, 0.5646553677425933, 0.2935708487453099, 0.20132077632366796, 0.1716263577014162, 0.38053107477129844, 0.21336970729611893, 0.14184875960558163, 0.2040038755228728, 0.20023263838718774, 0.19978999656990004, 0.1847087738265314, 0.19102936298919904, 0.2034543424295977, 0.19115620937998956, 0.18119620716830453, 0.18908187770006435, 0.18586409565347362, 0.19541694319347702, 0.2059714101707455, 0.0741856924956883, 0.06152573143029427, 0.06515913083856617, 0.06760463500534697, 0.06207796871434512, 0.07125799545951017, 0.08527921067893274, 0.07451564286015833, 0.07174280968465241]}, "mutation_prompt": null}
{"id": "b10234fd-036d-48b0-ac49-3d81e9af7452", "solution": "import numpy as np\n\nclass HybridQuantumEnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)\n        self.inertia_weight_init = 0.9  # Increased initial inertia for exploration\n        self.inertia_weight_final = 0.3  # Reduced final inertia for exploitation\n        self.cognitive_coeff = 1.5  # Reduced cognitive coefficient for convergence\n        self.social_coeff = 2.0  # Enhanced social influence for diversity\n        self.quantum_coeff = 0.7  # More prominent quantum behavior\n        self.local_search_prob = 0.3  # Probability for localized exploitation\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))  # Reduced initial velocity\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init * (1 - phase) + self.inertia_weight_final * phase  # Linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1, 1, (self.population_size, self.dim))  # Reduced quantum leap\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n            if np.random.rand() < self.local_search_prob:\n                local_shift = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))  # Localized shifts\n                local_particles = particles + local_shift\n                local_particles = np.clip(local_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    l_p = local_particles[i]\n                    local_score = func(l_p)\n                    self.eval_count += 1\n                    if local_score < personal_best_scores[i]:\n                        personal_best_positions[i] = l_p\n                        personal_best_scores[i] = local_score\n                        if local_score < global_best_score:\n                            global_best_score = local_score\n                            global_best_position = l_p\n\n        return global_best_position", "name": "HybridQuantumEnhancedPSO", "description": "Hybrid Quantum-Enhanced Particle Swarm Optimization with adaptive velocity update and localized exploitation for improved convergence and exploration balance.", "configspace": "", "generation": 74, "fitness": 0.2258195263478836, "feedback": "The algorithm HybridQuantumEnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.5791597199840224, 0.6136988192658137, 0.5405346910598419, 0.6187108391675571, 0.6008323676637648, 0.608517259442787, 0.5958674963292616, 0.578769070300722, 0.6043265426313114, 0.20117486432677478, 0.17553278828074437, 0.13689282315808182, 0.09305435431019526, 0.2681861364986975, 0.24921933226618342, 0.04429833752234302, 0.25998262406251127, 0.2705446965232019, 0.11896419440603112, 0.12631915713578123, 0.11986720850302535, 0.12277115870049216, 0.0924958125118388, 0.16916176058788002, 0.12210928589455894, 0.11278575074004438, 0.10984474948670009, 0.08021690438636964, 0.10414766947289811, 0.12928058764410066, 0.1051684819361055, 0.07276008175645188, 0.08894133385538006, 0.10023436279720699, 0.0887492814178017, 0.08676891553402588, 0.9745576870056564, 0.9888151412377157, 0.9856723873429372, 0.935284016641169, 0.9824831123504292, 0.9757536338406301, 0.9827521194240316, 0.985253679350111, 0.9850134286536967, 0.3154696876026829, 0.32162614580718196, 0.32348725789300625, 0.3185064806914978, 0.2773666987867116, 0.2687102220774297, 0.2716908911163707, 0.32674770711278955, 0.32944540341709194, 0.28327680050407256, 0.18762457269550536, 0.2080815254958166, 0.3041949499604293, 0.2009988975018765, 0.19871318826897566, 0.27043862760223847, 0.31929303575510604, 0.201602982400664, 0.10517190598699344, 0.15004262858410622, 0.13138075709120056, 0.08714287828655776, 0.13118907216090114, 0.12110424951625132, 0.12470197051757603, 0.11172826475155018, 0.11834410497625303, 0.1648920712849593, 0.13461871134087033, 0.10103433592736089, 0.15144749548927816, 0.0799146217029384, 0.10351962684277549, 0.0965981229124172, 0.07516275710028641, 0.08785344848568799, 9.999999999998899e-05, 0.049781830290441254, 9.999999999998899e-05, 0.00440232698876919, 0.014655855115197847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07710848651020352, 0.06458106210237835, 0.10654482333206594, 0.06271993967433831, 0.000107977681465532, 0.028261745918417347, 0.04553416550553191, 0.13307031875790054, 0.038979323055796544, 0.02841308168679313, 0.016009623834162823, 0.13572533191826153, 0.0629277190103712, 0.046478500792633715, 0.03991298112396813, 0.0475785408710897, 0.048985754797232994, 0.1190130050414997, 0.060327752369695786, 0.09283355486874256, 0.07745473622261378, 0.08806490598289185, 0.05366773749454801, 0.061098385456896165, 0.09324404687241694, 0.06356064236571635, 0.06497606271055678, 0.4506369818371686, 0.44169356835160023, 0.40754656251590526, 0.41234119685890414, 0.4205890013923297, 0.4276226937257689, 0.39913406195649914, 0.3840339429534517, 0.3928454762768159, 0.10834837167489242, 0.10124270672274105, 0.12445692948724663, 0.10942401160779058, 0.09154582249986998, 0.10241145564226639, 0.09929680727646295, 0.08812426468609191, 0.10175419570463051, 0.23202311451108149, 0.18610484555145013, 0.37579850492525113, 0.23004185250621756, 0.20577520841224073, 0.16120636174536607, 0.21491048960312287, 0.22374303793254058, 0.22109664714884558, 0.2749164516072551, 0.3060916246515665, 0.3335205872751331, 0.2725014258291234, 0.3171573459692476, 0.18041602810847468, 0.3346746643276657, 0.350291743900336, 0.346145873103456, 0.18907532014456752, 0.21308519535410608, 0.1881651199249218, 0.1692801298364084, 0.1847272273549112, 0.24310112490348879, 0.24740059208663934, 0.2368865306063883, 0.22305840932618293, 0.19468087257384314, 0.15514479867303765, 0.1880091320673608, 0.19012693034920725, 0.18222555681064312, 0.19897774242496302, 0.20360798394469903, 0.18948391331130443, 0.17698420396577585, 0.19294767790702094, 0.20172099175112712, 0.33819917432208924, 0.3487346484359305, 0.20673431555422161, 0.17781998627846152, 0.20770456050953567, 0.20167093770663436, 0.17745178880326107, 0.1583574187351704, 0.1663170243597526, 0.15228217191304227, 0.7033969942475322, 0.19598581266461346, 0.19194230112649424, 0.1394015263015459, 0.1693435913197815, 0.6474342651583929, 0.497032762278515, 0.20646490457836875, 0.1530358859446549, 0.19934912666427418, 0.37733450061751095, 0.14517550766434484, 0.19019940648831746, 0.20786045163522293, 0.20566255739175887, 0.18845040764393695, 0.17997641679500287, 0.19754763806284537, 0.2075940042824167, 0.18119856765886755, 0.18135429003231796, 0.18633676959004175, 0.18063998620895416, 0.18393128328526887, 0.108085073389523, 0.0757564316863738, 0.07407580160228133, 0.07563237628929531, 0.0851551497439843, 0.08377843900775661, 0.07381669679324931, 0.0689971292120064, 0.06642931615701186]}, "mutation_prompt": null}
{"id": "82089afc-a040-40fe-aebe-e074bde9efe6", "solution": "import numpy as np\n\nclass HybridQuantumEvolutionarySwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(50, dim * 8)  # Increased population size for diversity\n        self.inertia_weight_init = 0.9\n        self.inertia_weight_final = 0.3  # Lower final inertia for exploitation\n        self.cognitive_coeff = 2.0  # Enhanced cognitive effect\n        self.social_coeff = 1.5  # Reduced social influence for balance\n        self.quantum_coeff = 0.7  # Enhanced quantum behavior\n        self.mutation_rate = 0.2  # Introduced mutation for diversity\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.sqrt(phase)  # Square root decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            mutation_mask = np.random.rand(self.population_size, self.dim) < self.mutation_rate\n            mutation_values = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))\n            particles = np.where(mutation_mask, particles + mutation_values, particles)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-3, 3, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "HybridQuantumEvolutionarySwarm", "description": "Hybrid Quantum Evolutionary Swarm with Adaptive Mutation and Multi-local Search for enhanced exploration and faster convergence.", "configspace": "", "generation": 75, "fitness": 0.20367170808082063, "feedback": "The algorithm HybridQuantumEvolutionarySwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.36523976288290727, 0.3791285793095831, 0.3914905586341162, 0.40453476338268946, 0.4001109688303247, 0.406441442169195, 0.38401022205248814, 0.4382086240861315, 0.3941416538233702, 0.04162238629256043, 0.021820905739091345, 0.017458245593759636, 0.016373799983739112, 0.032164779183342596, 0.05154376786292725, 0.034735043366076246, 0.07374163472732576, 0.024365503441066916, 0.10323284833974744, 0.10031621020506265, 0.09756200799054326, 0.11139771143506882, 0.09425093865313794, 0.11225586993296455, 0.11722837531704822, 0.11410103165408092, 0.08836283117030619, 0.09825376225743199, 0.08877287632823372, 0.0823448889079591, 0.09192251792851314, 0.09194797646653241, 0.08006343508600511, 0.09301066031039207, 0.10445431771659519, 0.08832707312273436, 0.9775618875868857, 0.9813810541364751, 0.9824977614345526, 0.9747479121255938, 0.973292042913418, 0.9637260872339558, 0.9774510545076056, 0.9815766620118943, 0.9748905562053332, 0.2803680955941187, 0.26924285918519486, 0.2127882647048508, 0.26816355038230655, 0.2502918742765079, 0.2586675869621359, 0.2278213424215242, 0.23612898030805007, 0.23517921062234204, 0.29674834468257394, 0.25310988114940824, 0.31319821206615084, 0.23522893771126074, 0.30328446174888024, 0.25446747213505183, 0.28607798044797017, 0.22793189158124127, 0.3134455531595147, 0.13295937082920373, 0.07422392864234695, 0.1438383669383806, 0.09353860354901955, 0.11454807507152309, 0.10336489092467804, 0.1415254382244726, 0.1347486546956761, 0.1365396433788073, 0.12956618383137797, 0.12480862472830723, 0.13622623723753036, 0.13528530788110416, 0.10311017852764581, 0.12326701731179779, 0.12587291202777173, 0.07778603492267433, 0.12861925801766372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0047504743938836524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0674509155626094, 0.03599659292776125, 0.08667172176528548, 0.08961350842788507, 0.061440527982866144, 0.0357476154800459, 0.0699029288330012, 0.04234617777766214, 0.07613784492786291, 9.999999999998899e-05, 0.0004315241740798781, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0755464871357151, 0.04017113076860912, 0.0908543469501556, 0.05351070360919674, 0.07562250893939093, 0.10099446404046541, 0.07804262394329331, 0.07122857701955221, 0.06058254097946991, 0.35682900712071075, 0.40218598448666876, 0.3972511154734111, 0.38052710611819096, 0.3787922204179799, 0.36727776158784287, 0.3615437723496595, 0.3754469766769536, 0.3624764893061392, 0.08437912505986245, 0.08126827347788823, 0.08294731131492483, 0.07603164813998098, 0.09546333351109171, 0.09298096268704281, 0.10939333067400481, 0.10007416120909562, 0.09122935414727418, 0.19083827291727196, 0.23615322316059117, 0.1669377961789018, 0.15869480931892044, 0.18428882138301816, 0.14935470126848072, 0.21215599764205673, 0.14379252336598625, 0.17780297276425605, 0.2657604701217905, 0.2563881982328263, 0.2750119083127499, 0.2619542888573505, 0.2646341742707975, 0.18909846219226922, 0.289620674463119, 0.26173302872317716, 0.25711220040112126, 0.18501689382872244, 0.20458986247620614, 0.18791481782473451, 0.20712460557830725, 0.17115567908258822, 0.1630508971940251, 0.17667179261271104, 0.20848630699782167, 0.20245297610778012, 0.1807892207884053, 0.16913219534886192, 0.1954337658452291, 0.19507295882745268, 0.19162822542757163, 0.1723773886950477, 0.20672374888291423, 0.19572441287928644, 0.21228651793554432, 0.20824122864215633, 0.20238444068021255, 0.19602933835068126, 0.2099789379705843, 0.19740305315403706, 0.19237681522859573, 0.19301981840546756, 0.20308975163973775, 0.20633985881980976, 0.5495589051358563, 0.31179749156446146, 0.15175266396540288, 0.5175256892205153, 0.1952304452031567, 0.18714821884909028, 0.2607977073185235, 0.1772645722538273, 0.5611351761525314, 0.3742992434019051, 0.2022756229899595, 0.36716278269653624, 0.3742466320279897, 0.28017306964355837, 0.14702268882441916, 0.199026518039231, 0.39557948157081024, 0.44537651960575764, 0.21831527738892087, 0.174643381476425, 0.1971344000812837, 0.17833252516836307, 0.203458005712031, 0.1743802529402363, 0.18265143624457092, 0.17795396709657996, 0.18341937707714473, 0.07674111439605691, 0.08097777982895837, 0.08559246255836483, 0.07318365317082154, 0.07933857337658157, 0.07849706876300167, 0.08074867562155852, 0.08068413417406539, 0.07505803150423984]}, "mutation_prompt": null}
{"id": "54c20602-1427-40a5-ac1a-6efebf021831", "solution": "import numpy as np\n\nclass AdaptiveQuantumEnhancedSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(45, dim * 5)  # Slightly increased population\n        self.inertia_weight_init = 0.6  # Adjusted for initial exploration\n        self.inertia_weight_final = 0.3  # Reduced final inertia for convergence\n        self.cognitive_coeff = 2.0  # Enhanced cognitive component\n        self.social_coeff = 1.5  # Reduced social coefficient\n        self.quantum_coeff = 0.7  # Increased quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.sin(phase * np.pi / 2)  # Sine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            stochastic_perturbation = np.random.uniform(-0.5, 0.5, velocities.shape)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles) +\n                          stochastic_perturbation)\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Moderate quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "AdaptiveQuantumEnhancedSwarmOptimizer", "description": "Adaptive Quantum-Enhanced Swarm Optimization with stochastic velocity perturbations and local intensification for balanced exploration-exploitation.", "configspace": "", "generation": 76, "fitness": 0.18607494660678367, "feedback": "The algorithm AdaptiveQuantumEnhancedSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.3226251568794143, 0.33887323088569443, 0.34463222915990377, 0.3435959427832388, 0.3413964940539277, 0.33921383372776925, 0.32380872952335926, 0.3292318995408178, 0.3332309389523993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09393155369695105, 0.10578872957162255, 0.100393718242614, 0.08539725819225319, 0.09226846348185447, 0.10058549569543085, 0.08495181627535608, 0.0889032328197058, 0.09153117571915159, 0.08070760852714154, 0.07544241723655465, 0.0853879053065626, 0.06597743251770483, 0.06621510803949893, 0.09014400376791987, 0.09989412725789226, 0.07537060972284693, 0.06989049958243321, 0.9832799854966177, 0.9680066953661753, 0.9695454425268716, 0.9726835186967163, 0.9757402696398172, 0.9558581123334371, 0.9823235596277857, 0.9683200689284666, 0.9769439138213456, 0.2070453828512382, 0.20784445987995592, 0.22097121119462027, 0.21247599161296404, 0.20321325157020542, 0.21250626945269646, 0.20445551637043702, 0.1944289021428307, 0.20478323604195892, 0.2221457797577715, 0.2576899281559435, 0.22702271384083228, 0.23661523749060553, 0.25306004011971395, 0.24649437663541696, 0.236630901434276, 0.2133177023631101, 0.20500911285790735, 0.12321611001838917, 0.08766087969204583, 0.09916759639478112, 0.11424614848713788, 0.130310652813434, 0.1282337684074748, 0.13420338052304792, 0.06556791298300835, 0.11625613551375669, 0.12030314133903919, 0.1418876479669936, 0.05512206847745127, 0.11094241030835272, 0.11653207016466771, 0.10917641094120556, 0.10377953838510545, 0.03835657183762309, 0.12338878991477198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0043052762906996556, 9.999999999998899e-05, 9.999999999998899e-05, 0.009734116032557583, 9.999999999998899e-05, 9.999999999998899e-05, 0.10078716807111376, 0.09126612058670669, 0.08220075422141704, 0.09731393747984907, 0.01570655721739389, 0.022770901395886, 0.0612489306406504, 0.03267256164312038, 0.08904832586891831, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05483525082259477, 0.04653378630968397, 0.059392752507054114, 0.0317568757498482, 0.0391668777806522, 0.04892738378906547, 0.06364581738681385, 0.06095280357290267, 0.051424496560511734, 0.3282260490380823, 0.32417441640830624, 0.32207808368985746, 0.34348721150745876, 0.30527713084795016, 0.3218455749022775, 0.32224937802212783, 0.3038234042227933, 0.3324004301300877, 0.08736060065857332, 0.08506864919296986, 0.0985652289255795, 0.0863847287752384, 0.08382366615879366, 0.09548581386239607, 0.09992544446210616, 0.10777393347787734, 0.08020171950937272, 0.26509013412959037, 0.15424118429187272, 0.1702008221859158, 0.20150654479754948, 0.2218639474034999, 0.1529337617652483, 0.14844479267941346, 0.15118929774865375, 0.1706218906929864, 0.2354353796836106, 0.23639620924616134, 0.23635073284792962, 0.23179839819228487, 0.2402683223494666, 0.23102890173435198, 0.2528885944694258, 0.23903005146572254, 0.23353999280420834, 0.18837531323246381, 0.17501875777108922, 0.16909811768320415, 0.1644382528216658, 0.1477235842356911, 0.1615562114458886, 0.17722224035849432, 0.1893043661839574, 0.18325056803501438, 0.22882604598259026, 0.17951602374388365, 0.21580909283185523, 0.18839580853856752, 0.23814548389371137, 0.20106387516665603, 0.20338750159725583, 0.19978130939825856, 0.184280770546827, 0.18377232161343737, 0.1690319842064657, 0.17613491340276377, 0.17676851173168195, 0.17950847080512045, 0.17331172371175285, 0.18265604623135534, 0.16550856665028602, 0.1768597688457132, 0.45289175366992007, 0.159162102646904, 0.15132900133045946, 0.3807984775258415, 0.19496977370545832, 0.19157064043651795, 0.36967925247722155, 0.1694503841076075, 0.45971187409094216, 0.34252064120948456, 0.20421077722906955, 0.1981458733276138, 0.3225910095537522, 0.35596289593918495, 0.17620384686270296, 0.20589734751435185, 0.31298578980972536, 0.36761552672060493, 0.18452713447647306, 0.1848293603717005, 0.1860321129568474, 0.1765998633660214, 0.19214404376486205, 0.17554982024518306, 0.19484522767461743, 0.18437978583014247, 0.1914215550339623, 0.08072888292114822, 0.09631708822060936, 0.07988598056858087, 0.08665502774376999, 0.07536611682305538, 0.08273303144560074, 0.08810159099999415, 0.07872686668259887, 0.08557883737188732]}, "mutation_prompt": null}
{"id": "d7d9d294-a6ac-407c-8c2d-c770e2cfae38", "solution": "import numpy as np\n\nclass EnhancedQuantumLeapSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(30, dim * 6)  # Adjusted population for efficiency\n        self.inertia_weight_init = 0.8\n        self.inertia_weight_final = 0.3  # More dynamic final inertia for adaptability\n        self.cognitive_coeff = 1.5  # Reduced to encourage exploration\n        self.social_coeff = 2.0  # Increased social learning\n        self.quantum_coeff = 0.7  # Amplified quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * (1 - np.cos(phase * np.pi))  # Sinusoidal inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            random_neighbor = personal_best_positions[np.random.randint(self.population_size)]\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (random_neighbor - particles))  # Random neighbor influence\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2.5, 2.5, (self.population_size, self.dim))  # Broader quantum shifts\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "EnhancedQuantumLeapSwarmOptimizer", "description": "Enhanced Quantum-Leap Adaptive Swarm Optimization with diverse quantum dynamics and randomized neighborhood influence for superior exploration and convergence.", "configspace": "", "generation": 77, "fitness": 0.1562945605533543, "feedback": "The algorithm EnhancedQuantumLeapSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.3021449315827668, 0.31130005343333267, 0.2630157342714978, 0.32502678464824364, 0.36639595467049324, 0.37000882259346235, 0.32973208317150904, 0.37178781226267066, 0.33471812600401485, 0.07660266129961979, 0.035915567209785504, 0.08453924799944978, 0.05353219425157185, 0.10295028722319077, 0.09212899754870063, 0.0914429589077328, 0.0988917315335095, 0.10004359702076071, 0.06695485974330972, 0.08016627367225115, 0.06648955636947973, 0.06349491857074285, 0.06741362929545958, 0.06861875599240352, 0.07104918638800206, 0.06255398738587536, 0.05942739572505229, 0.050690594959336366, 0.06527921009247895, 0.05799805776303457, 0.05346504382729145, 0.0649984682411241, 0.06256667804527694, 0.05933882146841474, 0.05793585432026538, 0.07391572016508996, 0.9710506366001443, 0.9571556693294175, 0.9623296839440283, 0.9498788860292661, 0.9603087718626696, 0.9653491809719604, 0.9715874882000874, 0.9718130510758572, 0.9659772594714133, 0.1366697300912494, 0.12853141578895333, 0.14831849468429503, 0.14997989238991138, 0.13178211525401107, 0.12577947886979168, 0.1801068071777585, 0.1384902361530811, 0.13499447408831422, 0.16441627853060692, 0.15834262349028727, 0.16294771895714388, 0.16250764376237026, 0.15737421162006704, 0.15796922822313897, 0.15941203305262064, 0.18088020218963607, 0.15373128453910212, 0.060713393056452514, 0.08940139804011338, 0.07402047220336883, 0.06991544280414785, 0.0747008993929108, 0.031565522408228186, 0.06407019407816172, 0.06768442577417177, 0.028598278743931616, 0.021557577186963717, 0.027624591622763872, 0.022095299271476465, 0.05993444342392018, 0.05552065184786148, 0.08011679308473363, 0.024010121243971505, 0.01756595863722632, 0.003278643024031025, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0491139411392012, 0.04882502742207784, 0.05630036604224664, 0.05335532975896018, 0.021087413878338124, 0.04324233961419399, 0.041122993673256336, 0.011267255166076406, 0.05510246522411488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019630837625225994, 0.01988363843818297, 0.023324025905584467, 0.03026847388055498, 0.03893988346384614, 0.03184570194592673, 0.0330877944854141, 0.03636459869264397, 0.03866474731949543, 0.29236238813033555, 0.2995826096431795, 0.29404959477685544, 0.335794313501001, 0.29952479243592667, 0.3097667082652821, 0.2877091159195506, 0.3076648624259941, 0.2776914381215546, 0.0704890984272124, 0.07839899747749546, 0.06787100343235775, 0.05824300615261169, 0.06011772096997425, 0.07137338417273931, 0.05793153809299911, 0.06203716623397648, 0.06339162949982835, 0.16857448536218067, 0.13000252018033587, 0.1555301155119012, 0.12923200164644788, 0.1431908103411308, 0.20771632602929102, 0.18672389158960245, 0.15922422298450423, 0.14869859981974753, 0.19297049277736544, 0.1966249217331738, 0.20295540789573208, 0.19402191804398405, 0.17763371975476838, 0.1785166703847415, 0.2199872277670939, 0.22146940165623497, 0.2256545072907885, 0.1553482812745628, 0.1510306146673447, 0.131038317886235, 0.13575792731088643, 0.13037446842061962, 0.1280256691039362, 0.14608516564131113, 0.15139723989804155, 0.1352120007517591, 0.15505876655581974, 0.15257203857087664, 0.17231035082853619, 0.1757002867290095, 0.1861678085251397, 0.15025168433702252, 0.16357262242190806, 0.15890111038502996, 0.16307550033766383, 0.1538930382832696, 0.1702329566963584, 0.15985164874840263, 0.14570508544699956, 0.16911654190009429, 0.13632108609773674, 0.15153115415960583, 0.14157487821176307, 0.16318375226395998, 0.15800410926883923, 0.1581788725016351, 0.1776320394268629, 0.15752557527051414, 0.17902931519663556, 0.12719982988940937, 0.14126663433788944, 0.2049859327611876, 0.17254758932322056, 0.18928758495596953, 0.15895736102423874, 0.16469123852422907, 0.15735766031569787, 0.1625121075512097, 0.17618091232691746, 0.19359108353305254, 0.1820730559558783, 0.1990731597983192, 0.1940381357934874, 0.17606751619376482, 0.18630070018927913, 0.19272553874905574, 0.18512289868155185, 0.20046036239699538, 0.19395817808906202, 0.18998055647393786, 0.1999634380255365, 0.07009813414419364, 0.04999963186272294, 0.05603817805498745, 0.05639886255851634, 0.06455951767862056, 0.05359695517219987, 0.05750793047928293, 0.05230935333656839, 0.058568532257114]}, "mutation_prompt": null}
{"id": "fe5783ba-a225-489b-9496-228098abc435", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Maintain population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.4  # Slightly higher final inertia for stability\n        self.cognitive_coeff = 1.8  # Slightly reduced for balance\n        self.social_coeff = 1.8  # Balanced social coefficient\n        self.quantum_coeff = 0.6  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi / 2)  # Cosine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with dynamic neighborhood learning and enhanced quantum leaps for robust exploration and convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.86809843180453, 0.8656865911426441, 0.8520359754768346, 0.8689424779516427, 0.8833534924019595, 0.8801421218086176, 0.8721560948385834, 0.8634062411407808, 0.8470759917238162, 0.6731760713842743, 0.6984099073015564, 9.999999999998899e-05, 0.7153748986695032, 0.7382878408244324, 0.704009479561104, 0.5904943076564743, 0.6955089531526448, 0.4651001105784881, 0.1382893192137934, 0.14700397866728565, 0.12913293972348638, 0.1759303304669133, 0.17303176482832094, 0.5365713493906714, 0.16645677476221077, 0.1457322522928609, 0.5586144074084555, 0.3642476444045266, 0.138225955628012, 0.12650718919554016, 0.12338912672246294, 0.1337548907142766, 0.13646208448779928, 0.15772718046087408, 0.17574233200011224, 0.1089760639902797, 0.9814142243321458, 0.992311977478297, 0.9834889655451481, 0.9750066404543468, 0.9781706588561505, 0.9750789789320502, 0.988583733314754, 0.9863141471271968, 0.9782154418328087, 0.6065880869571294, 0.5967720386430975, 0.4942958589358364, 0.426691750200218, 0.5168566427423578, 0.4270911099261455, 0.5119784501385705, 0.5421179169945152, 0.6327876731591711, 0.20270133011854563, 0.8401556746546058, 0.22254750946681712, 0.3003245377072742, 0.19211790276791485, 0.19490579599263935, 0.22849995088368447, 0.40518433213993954, 0.39140263433541655, 0.20026783760443456, 0.18350798856932238, 0.2190955350090832, 0.1119177074752512, 0.17937402852203488, 0.12911412062741434, 0.31718776706386764, 0.16015889974530306, 0.19979350355828707, 0.2145706236443129, 0.22560095911706168, 0.2199530543268292, 0.21202861034561304, 0.2263695433373203, 0.18773008744115327, 0.3183954462954178, 0.21064225867144148, 0.23079774984096735, 9.999999999998899e-05, 0.033481396564341015, 9.999999999998899e-05, 0.024729183314617487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016565281902716222, 0.10469164517640106, 0.04534986570119326, 0.06225893865981302, 0.0732222375592606, 0.03382105791684953, 0.0359239804842133, 0.06194958746066259, 0.0453821655842892, 0.11447296859435407, 0.1191794744787672, 0.034320659298624934, 0.20341857903206606, 0.07515691146040704, 0.07623823293753595, 0.07525890200605101, 0.09869738523629368, 0.16830281627970767, 0.07231146258022858, 0.0723203898865975, 0.16126183813471884, 0.15926107511735277, 0.04363855826957408, 0.18988333137116464, 0.1352023143551, 0.11649772579811601, 0.1460226538284869, 0.08335173385367689, 0.6147295648379401, 0.5651061686144145, 0.5157825383736048, 0.513713077675898, 0.5434666760963826, 0.550371676094936, 0.5627308026588336, 0.5654446278449188, 0.5276343978066933, 0.09159643084439795, 0.12814970568640716, 0.08929832856829256, 0.11517643742676431, 0.16343642858358887, 0.13796100842287595, 0.11383376492074004, 0.13107137567848937, 0.09977711382141896, 0.26252269491531866, 0.20614921875537906, 0.24251614212904804, 0.28616406073200606, 0.3215841927926255, 0.15960649467868537, 0.3345583518300329, 0.21353380892362472, 0.2676044822474519, 0.41574256171845214, 0.3213472496655988, 0.3474289350965245, 0.28094723098789953, 0.20758026658125894, 0.3307691144834287, 0.2363110534074273, 0.4100078612789384, 0.3025865709952452, 0.24760102008799634, 0.2352775712102676, 0.3074835799791821, 0.2317531087487883, 0.15785821262332178, 0.33806687381452105, 0.21490611536991477, 0.32371200531321986, 0.2603237857821705, 0.24290709494357832, 0.19115754564583953, 0.1941943518530671, 0.21313331592185236, 0.19064356023472195, 0.527737971065595, 0.2382319403689599, 0.24894221106001446, 0.22437678580611387, 0.2392285288953977, 0.5884940169709203, 0.3942985110577699, 0.2394561942454273, 0.22018875592073672, 0.19888324487025544, 0.21929039715436627, 0.2272152477409236, 0.6241699070880998, 0.9221889268189425, 0.12689168130862438, 0.15336743451992574, 0.17303540289206243, 0.20116093222745546, 0.19990929863511597, 0.1421147804612758, 0.1694519036612706, 0.21355146013657822, 0.4928310132342645, 0.2134533254307388, 0.1496960205625334, 0.41788563625481556, 0.1682306963337742, 0.20731421866532596, 0.1049392372847382, 0.1051179114684404, 0.5611177739082233, 0.19086889504407778, 0.22595933326916207, 0.200978461179119, 0.21095816062868844, 0.1900637808819079, 0.19841867777942057, 0.19024252017227972, 0.17800754969531718, 0.18072025186600527, 0.12666379560630125, 0.1373089791204215, 0.09765569439316313, 0.08546667493689442, 0.08080541052732138, 0.09020828994915886, 0.10762034059557513, 0.09946373738746606, 0.09759787122430719]}, "mutation_prompt": null}
{"id": "c4e0bbb3-60a2-4075-8675-1bf19e9ec9a1", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Maintain population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.4  # Slightly higher final inertia for stability\n        self.cognitive_coeff = 1.8  # Slightly reduced for balance\n        self.social_coeff = 1.8  # Balanced social coefficient\n        self.quantum_coeff = 0.6  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi / 2)  # Cosine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with dynamic neighborhood learning and enhanced quantum leaps for robust exploration and convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.86809843180453, 0.8656865911426441, 0.8520359754768346, 0.8689424779516427, 0.8833534924019595, 0.8801421218086176, 0.8721560948385834, 0.8634062411407808, 0.8470759917238162, 0.6731760713842743, 0.6984099073015564, 9.999999999998899e-05, 0.7153748986695032, 0.7382878408244324, 0.704009479561104, 0.5904943076564743, 0.6955089531526448, 0.4651001105784881, 0.1382893192137934, 0.14700397866728565, 0.12913293972348638, 0.1759303304669133, 0.17303176482832094, 0.5365713493906714, 0.16645677476221077, 0.1457322522928609, 0.5586144074084555, 0.3642476444045266, 0.138225955628012, 0.12650718919554016, 0.12338912672246294, 0.1337548907142766, 0.13646208448779928, 0.15772718046087408, 0.17574233200011224, 0.1089760639902797, 0.9814142243321458, 0.992311977478297, 0.9834889655451481, 0.9750066404543468, 0.9781706588561505, 0.9750789789320502, 0.988583733314754, 0.9863141471271968, 0.9782154418328087, 0.6065880869571294, 0.5967720386430975, 0.4942958589358364, 0.426691750200218, 0.5168566427423578, 0.4270911099261455, 0.5119784501385705, 0.5421179169945152, 0.6327876731591711, 0.20270133011854563, 0.8401556746546058, 0.22254750946681712, 0.3003245377072742, 0.19211790276791485, 0.19490579599263935, 0.22849995088368447, 0.40518433213993954, 0.39140263433541655, 0.20026783760443456, 0.18350798856932238, 0.2190955350090832, 0.1119177074752512, 0.17937402852203488, 0.12911412062741434, 0.31718776706386764, 0.16015889974530306, 0.19979350355828707, 0.2145706236443129, 0.22560095911706168, 0.2199530543268292, 0.21202861034561304, 0.2263695433373203, 0.18773008744115327, 0.3183954462954178, 0.21064225867144148, 0.23079774984096735, 9.999999999998899e-05, 0.033481396564341015, 9.999999999998899e-05, 0.024729183314617487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016565281902716222, 0.10469164517640106, 0.04534986570119326, 0.06225893865981302, 0.0732222375592606, 0.03382105791684953, 0.0359239804842133, 0.06194958746066259, 0.0453821655842892, 0.11447296859435407, 0.1191794744787672, 0.034320659298624934, 0.20341857903206606, 0.07515691146040704, 0.07623823293753595, 0.07525890200605101, 0.09869738523629368, 0.16830281627970767, 0.07231146258022858, 0.0723203898865975, 0.16126183813471884, 0.15926107511735277, 0.04363855826957408, 0.18988333137116464, 0.1352023143551, 0.11649772579811601, 0.1460226538284869, 0.08335173385367689, 0.6147295648379401, 0.5651061686144145, 0.5157825383736048, 0.513713077675898, 0.5434666760963826, 0.550371676094936, 0.5627308026588336, 0.5654446278449188, 0.5276343978066933, 0.09159643084439795, 0.12814970568640716, 0.08929832856829256, 0.11517643742676431, 0.16343642858358887, 0.13796100842287595, 0.11383376492074004, 0.13107137567848937, 0.09977711382141896, 0.26252269491531866, 0.20614921875537906, 0.24251614212904804, 0.28616406073200606, 0.3215841927926255, 0.15960649467868537, 0.3345583518300329, 0.21353380892362472, 0.2676044822474519, 0.41574256171845214, 0.3213472496655988, 0.3474289350965245, 0.28094723098789953, 0.20758026658125894, 0.3307691144834287, 0.2363110534074273, 0.4100078612789384, 0.3025865709952452, 0.24760102008799634, 0.2352775712102676, 0.3074835799791821, 0.2317531087487883, 0.15785821262332178, 0.33806687381452105, 0.21490611536991477, 0.32371200531321986, 0.2603237857821705, 0.24290709494357832, 0.19115754564583953, 0.1941943518530671, 0.21313331592185236, 0.19064356023472195, 0.527737971065595, 0.2382319403689599, 0.24894221106001446, 0.22437678580611387, 0.2392285288953977, 0.5884940169709203, 0.3942985110577699, 0.2394561942454273, 0.22018875592073672, 0.19888324487025544, 0.21929039715436627, 0.2272152477409236, 0.6241699070880998, 0.9221889268189425, 0.12689168130862438, 0.15336743451992574, 0.17303540289206243, 0.20116093222745546, 0.19990929863511597, 0.1421147804612758, 0.1694519036612706, 0.21355146013657822, 0.4928310132342645, 0.2134533254307388, 0.1496960205625334, 0.41788563625481556, 0.1682306963337742, 0.20731421866532596, 0.1049392372847382, 0.1051179114684404, 0.5611177739082233, 0.19086889504407778, 0.22595933326916207, 0.200978461179119, 0.21095816062868844, 0.1900637808819079, 0.19841867777942057, 0.19024252017227972, 0.17800754969531718, 0.18072025186600527, 0.12666379560630125, 0.1373089791204215, 0.09765569439316313, 0.08546667493689442, 0.08080541052732138, 0.09020828994915886, 0.10762034059557513, 0.09946373738746606, 0.09759787122430719]}, "mutation_prompt": null}
{"id": "553ab729-115b-45f6-a9a2-f715a7735421", "solution": "import numpy as np\n\nclass QuantumSwarmOptimizerAdaptiveVariance:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(50, dim * 6)  # Increased population for robustness\n        self.inertia_weight_init = 0.6\n        self.inertia_weight_final = 0.3  # Lower final inertia for convergence\n        self.cognitive_coeff = 1.5  # Reduced for better balance with social\n        self.social_coeff = 2.0  # Enhanced social learning\n        self.quantum_coeff = 0.5  # Reduced quantum behavior for stability\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            adaptive_variance = (1 - phase) * 2.0 + phase * 0.5  # Adaptive variance reduction\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight_init * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.normal(0, adaptive_variance, (self.population_size, self.dim))  # Adaptive quantum shifts\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumSwarmOptimizerAdaptiveVariance", "description": "Quantum Swarm Optimization with Adaptive Exploratory Variance to balance exploration and exploitation dynamically.", "configspace": "", "generation": 80, "fitness": 0.2712534952364313, "feedback": "The algorithm QuantumSwarmOptimizerAdaptiveVariance got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.7669805401694467, 0.7285058407514354, 0.7190724860836636, 0.7665503256613609, 0.7597867279837643, 0.740242105115372, 0.7783716420478094, 0.7370825682664366, 0.7465095850538137, 0.48526386255980747, 0.06971060101798521, 0.4476366092176064, 0.49933729777930125, 0.49314033137231483, 0.4898821545994333, 0.4369367245367821, 0.4207707867792658, 0.40610653120021467, 0.11339086959814193, 0.12836205186169458, 0.14629034434569588, 0.2843919458891685, 0.13096202841127957, 0.12134701818656302, 0.13852169311856888, 0.1580972678360496, 0.1737291657262089, 0.1302197486236617, 0.10382732813815876, 0.11678799478331725, 0.09954966264106602, 0.13684152675339467, 0.12677840886823122, 0.11328130274813486, 0.13591627180774835, 0.15216902960363365, 0.9892688019817544, 0.9821503627201136, 0.9829417023341316, 0.9757219417132895, 0.9810295861554391, 0.9771373727780616, 0.9860368716250973, 0.9819244278228989, 0.9813409599921167, 0.4403260627277342, 0.3777051997587598, 0.41423455812209753, 0.4547143047647242, 0.16531057462726018, 0.24118930272746542, 0.47346416807552827, 0.4211711401248003, 0.3977209987220913, 0.3032252813039831, 0.21645579224597455, 0.21098518029412183, 0.21604243354291797, 0.26865481192083573, 0.18979661615839039, 0.24399791333837784, 0.17970798687494172, 0.3163101385597138, 0.1835672314857476, 0.13060009704918285, 0.1815923689246971, 0.09840155855073296, 0.1821646310764108, 0.11644869742939301, 0.16523883299983821, 0.16781849865380372, 0.17001586866568796, 0.18654970117076852, 0.19392096179418072, 0.23857799109904043, 0.18661967972854288, 0.1869700158500337, 0.12153907847667655, 0.12668269298657509, 0.13177062830666053, 0.11073988820261349, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033362405800372086, 9.999999999998899e-05, 0.01356243974147986, 0.00030996531131999294, 9.999999999998899e-05, 9.999999999998899e-05, 0.06946127547964498, 0.06110270757634795, 0.10762126048312659, 0.07787046066594794, 0.016719111454406077, 0.022979539026264706, 0.06666460845879407, 0.0509942318463662, 0.05055287222836591, 0.02649315920768258, 0.019678882626240957, 0.12301719817312173, 0.06596425949179407, 0.064576378156465, 0.06202887637600785, 0.07965462058089745, 0.06078763812812826, 0.07582038021313586, 0.18906901930611508, 0.0491590308791352, 0.15231710534254506, 0.011753851266656956, 0.09890426716194456, 0.17715193779891325, 0.07932262140229374, 0.1319458508746495, 0.0787591292294394, 0.5044930089243747, 0.5231488336435202, 0.46639788304029384, 0.49409585130290223, 0.46810246356077956, 0.5101230230854785, 0.49360275451380353, 0.5055350556881082, 0.5103608723997278, 0.12843768985390924, 0.14627597442983242, 0.09400153882421514, 0.08581089903014127, 0.11123772027199375, 0.10240104104619863, 0.07402446666230955, 0.14679562944041158, 0.11971701187815065, 0.1596233787693776, 0.19609971519663028, 0.19079686119272454, 0.2407096310206145, 0.4312926714080372, 0.26600587447519597, 0.38904304760287667, 0.23224778335359653, 0.1932724606646139, 0.2734013035286411, 0.3060471433433505, 0.3957946955187416, 0.22058390705557251, 0.2261253426993326, 0.32309814594904573, 0.22135787965568865, 0.2786453313837396, 0.34123611731288495, 0.18121449587040606, 0.30801341137171, 0.23305721277819336, 0.21636832824260432, 0.17845662494258452, 0.22986017695071237, 0.16343676340354996, 0.25695759774320437, 0.20353432942464655, 0.20206632453019235, 0.2320187475721336, 0.18528269611157644, 0.23590679838374984, 0.21659039786002676, 0.1904827380387054, 0.20923706834499234, 0.19746423526541435, 0.19784318581532379, 0.21790897190227265, 0.18308674353466292, 0.18763014509271203, 0.22227728969453164, 0.20055228073119935, 0.21421141278121492, 0.3402420567011676, 0.19853130352689508, 0.20829827499212794, 0.8465021366912224, 0.15752217494764775, 0.15413835962112576, 0.8619961013704383, 0.78860513896081, 0.16266847761979975, 0.15424608528588324, 0.7218631474618344, 0.8212146127870253, 0.575980142994879, 0.2117800299378716, 0.19602654314238155, 0.4258648656047078, 0.4532368047110005, 0.16694334044118309, 0.1048550489948673, 0.5205536681872441, 0.20192058807157554, 0.18193865195998737, 0.1936886338953926, 0.17462842540683665, 0.18268994333712674, 0.20116446906437135, 0.2103287257374169, 0.1956910732462206, 0.1950755281544332, 0.18431798093162133, 0.08818021602103765, 0.08358512502615922, 0.08708395975045247, 0.07700969504816635, 0.07799245147830647, 0.0895096356259999, 0.12484703538799147, 0.09657060609652113, 0.07172455184894755]}, "mutation_prompt": null}
{"id": "b5a5707e-b995-4e92-8d45-87cf4c560046", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Maintain population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.4  # Slightly higher final inertia for stability\n        self.cognitive_coeff = 1.8  # Slightly reduced for balance\n        self.social_coeff = 1.8  # Balanced social coefficient\n        self.quantum_coeff = 0.6  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi / 2)  # Cosine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with dynamic neighborhood learning and enhanced quantum leaps for robust exploration and convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.86809843180453, 0.8656865911426441, 0.8520359754768346, 0.8689424779516427, 0.8833534924019595, 0.8801421218086176, 0.8721560948385834, 0.8634062411407808, 0.8470759917238162, 0.6731760713842743, 0.6984099073015564, 9.999999999998899e-05, 0.7153748986695032, 0.7382878408244324, 0.704009479561104, 0.5904943076564743, 0.6955089531526448, 0.4651001105784881, 0.1382893192137934, 0.14700397866728565, 0.12913293972348638, 0.1759303304669133, 0.17303176482832094, 0.5365713493906714, 0.16645677476221077, 0.1457322522928609, 0.5586144074084555, 0.3642476444045266, 0.138225955628012, 0.12650718919554016, 0.12338912672246294, 0.1337548907142766, 0.13646208448779928, 0.15772718046087408, 0.17574233200011224, 0.1089760639902797, 0.9814142243321458, 0.992311977478297, 0.9834889655451481, 0.9750066404543468, 0.9781706588561505, 0.9750789789320502, 0.988583733314754, 0.9863141471271968, 0.9782154418328087, 0.6065880869571294, 0.5967720386430975, 0.4942958589358364, 0.426691750200218, 0.5168566427423578, 0.4270911099261455, 0.5119784501385705, 0.5421179169945152, 0.6327876731591711, 0.20270133011854563, 0.8401556746546058, 0.22254750946681712, 0.3003245377072742, 0.19211790276791485, 0.19490579599263935, 0.22849995088368447, 0.40518433213993954, 0.39140263433541655, 0.20026783760443456, 0.18350798856932238, 0.2190955350090832, 0.1119177074752512, 0.17937402852203488, 0.12911412062741434, 0.31718776706386764, 0.16015889974530306, 0.19979350355828707, 0.2145706236443129, 0.22560095911706168, 0.2199530543268292, 0.21202861034561304, 0.2263695433373203, 0.18773008744115327, 0.3183954462954178, 0.21064225867144148, 0.23079774984096735, 9.999999999998899e-05, 0.033481396564341015, 9.999999999998899e-05, 0.024729183314617487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016565281902716222, 0.10469164517640106, 0.04534986570119326, 0.06225893865981302, 0.0732222375592606, 0.03382105791684953, 0.0359239804842133, 0.06194958746066259, 0.0453821655842892, 0.11447296859435407, 0.1191794744787672, 0.034320659298624934, 0.20341857903206606, 0.07515691146040704, 0.07623823293753595, 0.07525890200605101, 0.09869738523629368, 0.16830281627970767, 0.07231146258022858, 0.0723203898865975, 0.16126183813471884, 0.15926107511735277, 0.04363855826957408, 0.18988333137116464, 0.1352023143551, 0.11649772579811601, 0.1460226538284869, 0.08335173385367689, 0.6147295648379401, 0.5651061686144145, 0.5157825383736048, 0.513713077675898, 0.5434666760963826, 0.550371676094936, 0.5627308026588336, 0.5654446278449188, 0.5276343978066933, 0.09159643084439795, 0.12814970568640716, 0.08929832856829256, 0.11517643742676431, 0.16343642858358887, 0.13796100842287595, 0.11383376492074004, 0.13107137567848937, 0.09977711382141896, 0.26252269491531866, 0.20614921875537906, 0.24251614212904804, 0.28616406073200606, 0.3215841927926255, 0.15960649467868537, 0.3345583518300329, 0.21353380892362472, 0.2676044822474519, 0.41574256171845214, 0.3213472496655988, 0.3474289350965245, 0.28094723098789953, 0.20758026658125894, 0.3307691144834287, 0.2363110534074273, 0.4100078612789384, 0.3025865709952452, 0.24760102008799634, 0.2352775712102676, 0.3074835799791821, 0.2317531087487883, 0.15785821262332178, 0.33806687381452105, 0.21490611536991477, 0.32371200531321986, 0.2603237857821705, 0.24290709494357832, 0.19115754564583953, 0.1941943518530671, 0.21313331592185236, 0.19064356023472195, 0.527737971065595, 0.2382319403689599, 0.24894221106001446, 0.22437678580611387, 0.2392285288953977, 0.5884940169709203, 0.3942985110577699, 0.2394561942454273, 0.22018875592073672, 0.19888324487025544, 0.21929039715436627, 0.2272152477409236, 0.6241699070880998, 0.9221889268189425, 0.12689168130862438, 0.15336743451992574, 0.17303540289206243, 0.20116093222745546, 0.19990929863511597, 0.1421147804612758, 0.1694519036612706, 0.21355146013657822, 0.4928310132342645, 0.2134533254307388, 0.1496960205625334, 0.41788563625481556, 0.1682306963337742, 0.20731421866532596, 0.1049392372847382, 0.1051179114684404, 0.5611177739082233, 0.19086889504407778, 0.22595933326916207, 0.200978461179119, 0.21095816062868844, 0.1900637808819079, 0.19841867777942057, 0.19024252017227972, 0.17800754969531718, 0.18072025186600527, 0.12666379560630125, 0.1373089791204215, 0.09765569439316313, 0.08546667493689442, 0.08080541052732138, 0.09020828994915886, 0.10762034059557513, 0.09946373738746606, 0.09759787122430719]}, "mutation_prompt": null}
{"id": "c51131f4-3edd-48a3-9834-210c3b2cde34", "solution": "import numpy as np\n\nclass AdaptiveQuantumParticleSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(50, dim * 5)  # Adjusted population size for consistency\n        self.inertia_weight_init = 0.9  # Increased initial inertia for exploration\n        self.inertia_weight_final = 0.3  # Reduced final inertia for exploitation\n        self.cognitive_coeff = 1.5  # Slightly reduced for strategic balance\n        self.social_coeff = 2.0  # Increased for stronger convergence influence\n        self.quantum_coeff = 0.5  # Balanced quantum leap influence\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))  # Reduced initial velocity magnitude\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * (phase ** 2)  # Quadratic inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1, 1, (self.population_size, self.dim))  # Balanced quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "AdaptiveQuantumParticleSwarmOptimizer", "description": "Adaptive Quantum Particle Swarm Optimization with enhanced dynamic exploration-exploitation balance and adaptive inertia for improved convergence.", "configspace": "", "generation": 82, "fitness": 0.19797757367688273, "feedback": "The algorithm AdaptiveQuantumParticleSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.44159103847973846, 0.419285932598256, 0.4559493018697507, 0.47183783215056796, 0.5161242092547995, 0.4971227498902888, 0.4598642987295327, 0.47054269021324024, 0.45179014215248847, 0.029914207728679476, 0.037213203919933435, 0.04179737771104153, 0.02374312998861583, 0.06861153308819212, 0.08330794039873313, 0.01772173410913125, 0.13401005577785474, 0.1058059281277487, 0.10049016497544638, 0.09462140488622661, 0.15037943085471983, 0.09372345490445566, 0.11404953952657182, 0.07821694622487996, 0.08450345386093272, 0.10158942139554705, 0.09201155866885913, 0.09318188454870346, 0.08510292413401499, 0.08727537384061268, 0.07944804293518415, 0.08233231665423468, 0.08691619126481287, 0.07505822887832325, 0.07185957553628464, 0.08015972841582208, 0.9895204911838708, 0.9818352693656588, 0.9900799517333111, 0.9813900891956815, 0.9721417952682212, 0.9782841316430422, 0.9863705977859972, 0.9856640428919722, 0.9820780829144872, 0.22465562329732636, 0.22990775570516075, 0.21644430016880034, 0.224325654599982, 0.23807349507222453, 0.25036048399964594, 0.20031250553902835, 0.2356738046481467, 0.20848116854452114, 0.2530200795708549, 0.19142393263883106, 0.20890494934492498, 0.37342311072085044, 0.22160781834859433, 0.20480341084954234, 0.3097505809060228, 0.16701949872917776, 0.18912927969792193, 0.1166531151410114, 0.09447801445038784, 0.11655675225283468, 0.07360433409924372, 0.09922661055063997, 0.10766115616026017, 0.11387706329604375, 0.11051438493290355, 0.11096091459524227, 0.1114888750751557, 0.1564905042659277, 0.08306811725323149, 0.15298909228086355, 0.11420037237938307, 0.10214467391716864, 0.1381452339316065, 0.11302971262421302, 0.12804247799839308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010108126309175347, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035689811981111985, 0.03374073960110724, 0.06318157064910579, 0.07916789039246874, 0.0008976369611526369, 0.033233063407613894, 0.03253963437124874, 0.10012742247123918, 0.0586069611010811, 0.016503087015710793, 0.012246616557801238, 0.04507224882195715, 0.024107033238564668, 0.038843572786451896, 0.022386962831429047, 0.032110044129705084, 0.02274453157631451, 0.02818917646916108, 0.025676533858622674, 0.08513066429110183, 0.061198440151919, 0.04014858483906303, 0.10158405179782326, 0.09311511985696364, 0.0718298518578998, 0.05392384106952142, 0.07954354096325134, 0.36361550762037786, 0.3956631359517202, 0.3542625283849826, 0.3759547763499127, 0.3495598086659666, 0.35575876352255853, 0.3585517908727709, 0.3242954112670532, 0.33659499266727466, 0.09901082766570579, 0.09627424830227105, 0.07653288103984757, 0.09175214892461403, 0.09557096703206369, 0.07882923132510133, 0.09025019729492345, 0.07227573041245994, 0.09922187116377224, 0.1694060586763937, 0.18472577329749618, 0.1479889950289104, 0.2706069454718071, 0.19447064702182348, 0.16825094548604247, 0.28296863486186874, 0.16938337017307092, 0.1862613845669322, 0.2668393918908518, 0.2952790456726734, 0.2737816757422512, 0.22006054368241812, 0.1881571136154886, 0.22125015450454666, 0.24735626343567552, 0.248308239702415, 0.24740440208992787, 0.18830041981719237, 0.16445743920784206, 0.14541217092716996, 0.1477724474629002, 0.16965776160436674, 0.18817059176836692, 0.2293861341197666, 0.20165090190878465, 0.19389457596805892, 0.1837128400412843, 0.14821620077446462, 0.18997745833423418, 0.19097573657889677, 0.18158944945710764, 0.21316567504214812, 0.17322143269191603, 0.19666627373336676, 0.20891905340813888, 0.17464902729529042, 0.17410224799281515, 0.16641767434869048, 0.18603084966150818, 0.18305878112691343, 0.19104278109878559, 0.20302201612059612, 0.1824871190189491, 0.1789569416138873, 0.5183153570347285, 0.16628289519637696, 0.15274095016525968, 0.5386102493264171, 0.19012415890558398, 0.16301189802300198, 0.13814240341164097, 0.17165461390146697, 0.5169142096310875, 0.30983279237091843, 0.20370907697380014, 0.19053262160830575, 0.32563833474550374, 0.2876044231645529, 0.24387513837698294, 0.1906655620652018, 0.20733739866142675, 0.18271658241359123, 0.18858362514994775, 0.18403056152466868, 0.19287893107403575, 0.19486190954740712, 0.19164125305823754, 0.1898422814257622, 0.1816450888218174, 0.19737337162048785, 0.20294542269389082, 0.07042970542898275, 0.08361715344473208, 0.06685350977821036, 0.0761355336042121, 0.06890798278463095, 0.072405218422257, 0.0869996826388213, 0.08243254909349018, 0.06506204699072182]}, "mutation_prompt": null}
{"id": "12367d44-1564-4d89-b784-771222d2cfca", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Maintain population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.4  # Slightly higher final inertia for stability\n        self.cognitive_coeff = 1.8  # Slightly reduced for balance\n        self.social_coeff = 1.8  # Balanced social coefficient\n        self.quantum_coeff = 0.6  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi / 2)  # Cosine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with dynamic neighborhood learning and enhanced quantum leaps for robust exploration and convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.86809843180453, 0.8656865911426441, 0.8520359754768346, 0.8689424779516427, 0.8833534924019595, 0.8801421218086176, 0.8721560948385834, 0.8634062411407808, 0.8470759917238162, 0.6731760713842743, 0.6984099073015564, 9.999999999998899e-05, 0.7153748986695032, 0.7382878408244324, 0.704009479561104, 0.5904943076564743, 0.6955089531526448, 0.4651001105784881, 0.1382893192137934, 0.14700397866728565, 0.12913293972348638, 0.1759303304669133, 0.17303176482832094, 0.5365713493906714, 0.16645677476221077, 0.1457322522928609, 0.5586144074084555, 0.3642476444045266, 0.138225955628012, 0.12650718919554016, 0.12338912672246294, 0.1337548907142766, 0.13646208448779928, 0.15772718046087408, 0.17574233200011224, 0.1089760639902797, 0.9814142243321458, 0.992311977478297, 0.9834889655451481, 0.9750066404543468, 0.9781706588561505, 0.9750789789320502, 0.988583733314754, 0.9863141471271968, 0.9782154418328087, 0.6065880869571294, 0.5967720386430975, 0.4942958589358364, 0.426691750200218, 0.5168566427423578, 0.4270911099261455, 0.5119784501385705, 0.5421179169945152, 0.6327876731591711, 0.20270133011854563, 0.8401556746546058, 0.22254750946681712, 0.3003245377072742, 0.19211790276791485, 0.19490579599263935, 0.22849995088368447, 0.40518433213993954, 0.39140263433541655, 0.20026783760443456, 0.18350798856932238, 0.2190955350090832, 0.1119177074752512, 0.17937402852203488, 0.12911412062741434, 0.31718776706386764, 0.16015889974530306, 0.19979350355828707, 0.2145706236443129, 0.22560095911706168, 0.2199530543268292, 0.21202861034561304, 0.2263695433373203, 0.18773008744115327, 0.3183954462954178, 0.21064225867144148, 0.23079774984096735, 9.999999999998899e-05, 0.033481396564341015, 9.999999999998899e-05, 0.024729183314617487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016565281902716222, 0.10469164517640106, 0.04534986570119326, 0.06225893865981302, 0.0732222375592606, 0.03382105791684953, 0.0359239804842133, 0.06194958746066259, 0.0453821655842892, 0.11447296859435407, 0.1191794744787672, 0.034320659298624934, 0.20341857903206606, 0.07515691146040704, 0.07623823293753595, 0.07525890200605101, 0.09869738523629368, 0.16830281627970767, 0.07231146258022858, 0.0723203898865975, 0.16126183813471884, 0.15926107511735277, 0.04363855826957408, 0.18988333137116464, 0.1352023143551, 0.11649772579811601, 0.1460226538284869, 0.08335173385367689, 0.6147295648379401, 0.5651061686144145, 0.5157825383736048, 0.513713077675898, 0.5434666760963826, 0.550371676094936, 0.5627308026588336, 0.5654446278449188, 0.5276343978066933, 0.09159643084439795, 0.12814970568640716, 0.08929832856829256, 0.11517643742676431, 0.16343642858358887, 0.13796100842287595, 0.11383376492074004, 0.13107137567848937, 0.09977711382141896, 0.26252269491531866, 0.20614921875537906, 0.24251614212904804, 0.28616406073200606, 0.3215841927926255, 0.15960649467868537, 0.3345583518300329, 0.21353380892362472, 0.2676044822474519, 0.41574256171845214, 0.3213472496655988, 0.3474289350965245, 0.28094723098789953, 0.20758026658125894, 0.3307691144834287, 0.2363110534074273, 0.4100078612789384, 0.3025865709952452, 0.24760102008799634, 0.2352775712102676, 0.3074835799791821, 0.2317531087487883, 0.15785821262332178, 0.33806687381452105, 0.21490611536991477, 0.32371200531321986, 0.2603237857821705, 0.24290709494357832, 0.19115754564583953, 0.1941943518530671, 0.21313331592185236, 0.19064356023472195, 0.527737971065595, 0.2382319403689599, 0.24894221106001446, 0.22437678580611387, 0.2392285288953977, 0.5884940169709203, 0.3942985110577699, 0.2394561942454273, 0.22018875592073672, 0.19888324487025544, 0.21929039715436627, 0.2272152477409236, 0.6241699070880998, 0.9221889268189425, 0.12689168130862438, 0.15336743451992574, 0.17303540289206243, 0.20116093222745546, 0.19990929863511597, 0.1421147804612758, 0.1694519036612706, 0.21355146013657822, 0.4928310132342645, 0.2134533254307388, 0.1496960205625334, 0.41788563625481556, 0.1682306963337742, 0.20731421866532596, 0.1049392372847382, 0.1051179114684404, 0.5611177739082233, 0.19086889504407778, 0.22595933326916207, 0.200978461179119, 0.21095816062868844, 0.1900637808819079, 0.19841867777942057, 0.19024252017227972, 0.17800754969531718, 0.18072025186600527, 0.12666379560630125, 0.1373089791204215, 0.09765569439316313, 0.08546667493689442, 0.08080541052732138, 0.09020828994915886, 0.10762034059557513, 0.09946373738746606, 0.09759787122430719]}, "mutation_prompt": null}
{"id": "1b6bd583-629a-481e-9eea-5b2cf3be4d62", "solution": "import numpy as np\n\nclass HybridQuantumEvolutionarySwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(50, dim * 5)  # Adjust population size\n        self.inertia_weight_init = 0.6\n        self.inertia_weight_final = 0.3  # Reduced inertia weight for agility\n        self.cognitive_coeff = 2.0  # Increased cognitive influence\n        self.social_coeff = 1.5  # Reduced social influence for less crowding\n        self.quantum_coeff = 0.7  # Higher probability for quantum jumps\n        self.mutation_rate = 0.1  # Mutation rate for evolutionary strategy\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * phase  # Linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            if np.random.rand() < self.mutation_rate:  # Apply evolutionary mutation\n                mutation_vector = np.random.normal(0, 1, (self.population_size, self.dim))\n                particles += mutation_vector\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2.5, 2.5, (self.population_size, self.dim))  # Enhanced quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "HybridQuantumEvolutionarySwarmOptimizer", "description": "Hybrid Quantum Evolutionary Swarm Optimization integrates evolutionary mutation strategies and enhanced quantum leaps for superior exploration and convergence.", "configspace": "", "generation": 84, "fitness": 0.22312092955125473, "feedback": "The algorithm HybridQuantumEvolutionarySwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.5292723387196792, 0.4365472650323261, 0.5544475127336742, 0.5462633596914115, 0.4193644084831868, 0.5766866360773659, 0.4932790080436744, 0.4394543392343295, 0.5907029823599601, 0.1149154779647531, 0.01833686765022391, 0.028847292417602866, 0.1647576335635078, 0.06299593898396283, 0.18006885918344673, 0.03601913855016503, 0.08362362185219097, 0.1667984679200223, 0.13361022117001486, 0.10741100038160745, 0.12045101593874175, 0.1146760625086295, 0.10191768059749118, 0.12522895548347956, 0.11587163820934476, 0.08787277698247797, 0.12474644829738424, 0.12782365018034503, 0.0768572483489659, 0.09596228236600868, 0.117407918288854, 0.11308505650107603, 0.12467586202096514, 0.09354729958602914, 0.08199235774357094, 0.09679195168965449, 0.985778769045318, 0.9720273451918746, 0.9804772879020778, 0.95527849955561, 0.9633845478761045, 0.9766977550311143, 0.9776788513204038, 0.9797942935447115, 0.9838009115691144, 0.2999359819817564, 0.23742866022660514, 0.3009858481072517, 0.2670260341525139, 0.2312438795380546, 0.3476106219718753, 0.29648958334986997, 0.21254018595157542, 0.28748993969428116, 0.421127233802695, 0.2065767202610017, 0.29509820300893186, 0.21022819176939989, 0.2595613482512632, 0.193467616205813, 0.35802022512185006, 0.23817318390468167, 0.22481158202350637, 0.2102408630129211, 0.11073315406736473, 0.14027081300141542, 0.09620479723783937, 0.13726759509938058, 0.11093699102106547, 0.1717993138403905, 0.14415939788263643, 0.1479361298573837, 0.12745338425511277, 0.12428871744110626, 0.13957019727092124, 0.13849358210032714, 0.12048477132037005, 0.12342106669853803, 0.1247690319088468, 0.07033873721586603, 0.15638631510266698, 0.008581962372971819, 0.003571905365019168, 9.999999999998899e-05, 0.046077455542432255, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01845246912368037, 0.09247516263084365, 0.08384209419655997, 0.06788940797634746, 0.07517761625996733, 0.028350242517801383, 0.01331505534231714, 0.0857368650777437, 0.08948957575240746, 0.07084451730667829, 0.04927551442869027, 9.999999999998899e-05, 0.03263723041134381, 0.04311066642675199, 9.999999999998899e-05, 0.04964210255760604, 0.06195926706371868, 0.01837322327934887, 0.033239831346812965, 0.1512158158444996, 0.06053227419295326, 0.10113096630975471, 0.09455132680255751, 0.09275798306393501, 0.11845625614640465, 0.04716415123611917, 0.08774148263595638, 0.07417365631687667, 0.4038705833790207, 0.38340539786627825, 0.44231911884041597, 0.4129043143329931, 0.39473173748825363, 0.4603101023552638, 0.4236533579742995, 0.3663085121845493, 0.4434860492951208, 0.11542694339571158, 0.079823101281144, 0.09436091326935914, 0.10532341453124427, 0.11570308907364002, 0.12882663180710574, 0.111183485342504, 0.08581181354569145, 0.10015700955587292, 0.2388362699956844, 0.14756767162190843, 0.1734033035880097, 0.23474843843877768, 0.18577980972087482, 0.2632409220353146, 0.2922996974633524, 0.14740674533733567, 0.1714611099151302, 0.2834062621645831, 0.28475487959110546, 0.31124511052435355, 0.3270772468469558, 0.26891484660018905, 0.26814344088250075, 0.3853517815358797, 0.2747152679417092, 0.21656155667259402, 0.24462862514119188, 0.2153270851929474, 0.24183242623162948, 0.23246765546955828, 0.1972476864311581, 0.20719774430725513, 0.1953333882017989, 0.18094009416504198, 0.2445026616986149, 0.17897646526732824, 0.20124297476784303, 0.17763806489822542, 0.19468100001796707, 0.20527268841548785, 0.20965260961424914, 0.20304531719947416, 0.21224925884716817, 0.20169400091598255, 0.24171017340616285, 0.19550958670967777, 0.23283213846921103, 0.1905504710006488, 0.19663722472545242, 0.19823894777968964, 0.18616413211453842, 0.19630773161557136, 0.18491223823057668, 0.7576211240595935, 0.15682743263442112, 0.15416494870633957, 0.7678205042040196, 0.22066159499988913, 0.16978918765893503, 0.1414788715079972, 0.18106480539060021, 0.7759896887081119, 0.4980583000305677, 0.20662055789669675, 0.1991776764229165, 0.44532070481485464, 0.459312258329134, 0.15419517286952922, 0.18252628724663444, 0.20454166774485527, 0.2049606136952743, 0.1679964272157617, 0.18457311120137687, 0.18910254416913508, 0.18704780395797216, 0.18636890181324128, 0.1823285568377785, 0.18488155600926282, 0.18147641122105185, 0.17166226956880526, 0.09118122538811257, 0.08161536435418892, 0.072492889835017, 0.07936927407089933, 0.06518891812565686, 0.09574431524048665, 0.0736019670902871, 0.07618765732628585, 0.0735930545185256]}, "mutation_prompt": null}
{"id": "057cd4f5-0c88-4ced-9600-8df00a7d0d6c", "solution": "import numpy as np\n\nclass EnhancedQuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(50, int(dim * 6.5))  # Adjusted population size for better diversity\n        self.inertia_weight_init = 0.8\n        self.inertia_weight_final = 0.3  # More dynamic change for better adaptability\n        self.cognitive_coeff = 1.5  # Adjusted for better exploration\n        self.social_coeff = 1.9  # Increased for stronger social influence\n        self.quantum_coeff = 0.7  # Modified for balanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.sin(phase * np.pi / 2)  # Sine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2.5, 2.5, (self.population_size, self.dim))  # Fine-tuned quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n\n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "EnhancedQuantumAdaptiveSwarmOptimizer", "description": "Enhanced Quantum-Adaptive Swarm Optimization with adaptive neighborhood phase and hybrid exploration-exploitation strategy for improved convergence.", "configspace": "", "generation": 85, "fitness": 0.2662698636656228, "feedback": "The algorithm EnhancedQuantumAdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.7048171664814397, 0.7267304000648247, 0.6925858651574321, 0.6946605893194241, 0.7115659091230984, 0.6935575522238533, 0.6882395190985331, 0.7311952299529825, 0.689053289089659, 0.4515735502516267, 0.03115356836678751, 0.49006682363186205, 0.4399451790214135, 0.47955036554219377, 0.05172473086612772, 0.40772888701486176, 0.45084353039131775, 0.4455596413968236, 0.13266222770711045, 0.1529641498067129, 0.12147764644796366, 0.12344133661514278, 0.12153872376921993, 0.2146037145032912, 0.13451997617724043, 0.356740124669472, 0.11075723997280928, 0.1204364422197185, 0.1334160975829991, 0.10826490943759359, 0.11263298813554268, 0.1226488141766755, 0.10257557292245478, 0.10169350445792713, 0.12807619236558876, 0.10741169995160094, 0.9847828103132544, 0.9860454676184094, 0.9819874130933912, 0.9685928752739317, 0.9694729729484124, 0.9761470839334596, 0.9780908168144993, 0.9792709753777814, 0.9687491704286417, 0.3772111850366501, 0.3581624412045348, 0.38625120567274995, 0.3411973536569398, 0.47273395884293146, 0.26227606678929183, 0.34692683105499966, 0.36398861755399403, 0.4336560859170414, 0.6477662566136113, 0.2108657995666574, 0.20301199361891265, 0.21114875524858012, 0.2054970466967272, 0.19508016404466433, 0.2049823445689095, 0.6069730850939968, 0.5412794879742137, 0.14364388969703556, 0.1510415389243428, 0.1571063145085182, 0.09084886295906203, 0.23020782431501108, 0.15015257851014885, 0.15227305623595622, 0.14927203252917098, 0.17073851059485168, 0.1766571602125112, 0.18338070275940854, 0.283895837352404, 0.16295843842178492, 0.19227971808409217, 0.14817276195986473, 0.15181161494005813, 0.11997751559280767, 0.11748391927388258, 9.999999999998899e-05, 9.999999999998899e-05, 0.02779746183252063, 0.0008048361672783333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006930018793192216, 9.999999999998899e-05, 0.03594819397202231, 0.09596865227817342, 0.05608314370524459, 0.038355614884325595, 0.03579990834529667, 0.007511091793081293, 0.061740080585216184, 0.041214900920770736, 0.06464004413805102, 0.02473705747072219, 9.999999999998899e-05, 0.05857191902923109, 0.053934211182473324, 0.07276103253573418, 0.05637166614821476, 0.0684082328098331, 0.05665059295683983, 0.12277375680532876, 0.1628150749012599, 0.03879589829352936, 0.297222257906565, 0.17877656233739803, 0.12466400092698426, 0.131712483198834, 0.06621493310910986, 0.05924553564210655, 0.07065466838128354, 0.4606565910412834, 0.4682010648271082, 0.4276694225821476, 0.456201254116564, 0.4846948027536945, 0.47363073658187826, 0.4680827107998836, 0.49190329471778615, 0.461625209547173, 0.08397985134803598, 0.0849295479883283, 0.12460421062167426, 0.08627523636134626, 0.1021083170779028, 0.12676029634623487, 0.12122513315545314, 0.11627990198871507, 0.12706400003759133, 0.1835521695833926, 0.1874304530672667, 0.1847621181271628, 0.17710661387923132, 0.21580240208734436, 0.293645143418545, 0.2126185674913802, 0.16788462416370442, 0.21353657828160577, 0.291635785711585, 0.2761967082697291, 0.4053704511043419, 0.37488631196973876, 0.3911919906251282, 0.3137086182305955, 0.4733884620262909, 0.43984557624063536, 0.40198929354620005, 0.19267801868855172, 0.17244120764366455, 0.17053456833028446, 0.18381052597514247, 0.2607753150838583, 0.2662544513750833, 0.17529183587449282, 0.24657539238296666, 0.32853183806832154, 0.17888110324768458, 0.17436361282003165, 0.1871725195565448, 0.1887037395754665, 0.19304775689577014, 0.19685950406367325, 0.22726994239276255, 0.1783127558404738, 0.1983089752422733, 0.199081454819089, 0.20396875461029862, 0.2239229728422506, 0.5715229131212559, 0.22996051183453114, 0.23013245860690823, 0.19593175357891546, 0.19860998041014932, 0.20511023047189603, 0.2601851747546652, 0.16803282827511323, 0.15274656616190263, 0.7560483133548236, 0.7868460710611338, 0.1639221276326358, 0.1700695015401309, 0.16081966709045303, 0.7225955260834351, 0.45607658631938575, 0.20744672086739424, 0.19723517321248007, 0.49488779224925716, 0.35532357936575487, 0.15880042238819447, 0.19221361612189214, 0.4993985528385547, 0.5396340911087234, 0.19017690852823343, 0.18928199861611028, 0.20517989501826828, 0.1897950178613821, 0.18561221678559758, 0.17545293941428608, 0.2050422126432846, 0.1971681002915685, 0.18167937361567643, 0.08012785835649561, 0.0684369749668533, 0.08773009081613758, 0.07907821334066956, 0.08875898552700201, 0.07211111138524118, 0.07079004201972317, 0.07607102819893374, 0.08275020010205958]}, "mutation_prompt": null}
{"id": "2c346df4-8aaa-4ed4-9c43-3e7d99b92879", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Maintain population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.4  # Slightly higher final inertia for stability\n        self.cognitive_coeff = 1.8  # Slightly reduced for balance\n        self.social_coeff = 1.8  # Balanced social coefficient\n        self.quantum_coeff = 0.6  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi / 2)  # Cosine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with dynamic neighborhood learning and enhanced quantum leaps for robust exploration and convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.86809843180453, 0.8656865911426441, 0.8520359754768346, 0.8689424779516427, 0.8833534924019595, 0.8801421218086176, 0.8721560948385834, 0.8634062411407808, 0.8470759917238162, 0.6731760713842743, 0.6984099073015564, 9.999999999998899e-05, 0.7153748986695032, 0.7382878408244324, 0.704009479561104, 0.5904943076564743, 0.6955089531526448, 0.4651001105784881, 0.1382893192137934, 0.14700397866728565, 0.12913293972348638, 0.1759303304669133, 0.17303176482832094, 0.5365713493906714, 0.16645677476221077, 0.1457322522928609, 0.5586144074084555, 0.3642476444045266, 0.138225955628012, 0.12650718919554016, 0.12338912672246294, 0.1337548907142766, 0.13646208448779928, 0.15772718046087408, 0.17574233200011224, 0.1089760639902797, 0.9814142243321458, 0.992311977478297, 0.9834889655451481, 0.9750066404543468, 0.9781706588561505, 0.9750789789320502, 0.988583733314754, 0.9863141471271968, 0.9782154418328087, 0.6065880869571294, 0.5967720386430975, 0.4942958589358364, 0.426691750200218, 0.5168566427423578, 0.4270911099261455, 0.5119784501385705, 0.5421179169945152, 0.6327876731591711, 0.20270133011854563, 0.8401556746546058, 0.22254750946681712, 0.3003245377072742, 0.19211790276791485, 0.19490579599263935, 0.22849995088368447, 0.40518433213993954, 0.39140263433541655, 0.20026783760443456, 0.18350798856932238, 0.2190955350090832, 0.1119177074752512, 0.17937402852203488, 0.12911412062741434, 0.31718776706386764, 0.16015889974530306, 0.19979350355828707, 0.2145706236443129, 0.22560095911706168, 0.2199530543268292, 0.21202861034561304, 0.2263695433373203, 0.18773008744115327, 0.3183954462954178, 0.21064225867144148, 0.23079774984096735, 9.999999999998899e-05, 0.033481396564341015, 9.999999999998899e-05, 0.024729183314617487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016565281902716222, 0.10469164517640106, 0.04534986570119326, 0.06225893865981302, 0.0732222375592606, 0.03382105791684953, 0.0359239804842133, 0.06194958746066259, 0.0453821655842892, 0.11447296859435407, 0.1191794744787672, 0.034320659298624934, 0.20341857903206606, 0.07515691146040704, 0.07623823293753595, 0.07525890200605101, 0.09869738523629368, 0.16830281627970767, 0.07231146258022858, 0.0723203898865975, 0.16126183813471884, 0.15926107511735277, 0.04363855826957408, 0.18988333137116464, 0.1352023143551, 0.11649772579811601, 0.1460226538284869, 0.08335173385367689, 0.6147295648379401, 0.5651061686144145, 0.5157825383736048, 0.513713077675898, 0.5434666760963826, 0.550371676094936, 0.5627308026588336, 0.5654446278449188, 0.5276343978066933, 0.09159643084439795, 0.12814970568640716, 0.08929832856829256, 0.11517643742676431, 0.16343642858358887, 0.13796100842287595, 0.11383376492074004, 0.13107137567848937, 0.09977711382141896, 0.26252269491531866, 0.20614921875537906, 0.24251614212904804, 0.28616406073200606, 0.3215841927926255, 0.15960649467868537, 0.3345583518300329, 0.21353380892362472, 0.2676044822474519, 0.41574256171845214, 0.3213472496655988, 0.3474289350965245, 0.28094723098789953, 0.20758026658125894, 0.3307691144834287, 0.2363110534074273, 0.4100078612789384, 0.3025865709952452, 0.24760102008799634, 0.2352775712102676, 0.3074835799791821, 0.2317531087487883, 0.15785821262332178, 0.33806687381452105, 0.21490611536991477, 0.32371200531321986, 0.2603237857821705, 0.24290709494357832, 0.19115754564583953, 0.1941943518530671, 0.21313331592185236, 0.19064356023472195, 0.527737971065595, 0.2382319403689599, 0.24894221106001446, 0.22437678580611387, 0.2392285288953977, 0.5884940169709203, 0.3942985110577699, 0.2394561942454273, 0.22018875592073672, 0.19888324487025544, 0.21929039715436627, 0.2272152477409236, 0.6241699070880998, 0.9221889268189425, 0.12689168130862438, 0.15336743451992574, 0.17303540289206243, 0.20116093222745546, 0.19990929863511597, 0.1421147804612758, 0.1694519036612706, 0.21355146013657822, 0.4928310132342645, 0.2134533254307388, 0.1496960205625334, 0.41788563625481556, 0.1682306963337742, 0.20731421866532596, 0.1049392372847382, 0.1051179114684404, 0.5611177739082233, 0.19086889504407778, 0.22595933326916207, 0.200978461179119, 0.21095816062868844, 0.1900637808819079, 0.19841867777942057, 0.19024252017227972, 0.17800754969531718, 0.18072025186600527, 0.12666379560630125, 0.1373089791204215, 0.09765569439316313, 0.08546667493689442, 0.08080541052732138, 0.09020828994915886, 0.10762034059557513, 0.09946373738746606, 0.09759787122430719]}, "mutation_prompt": null}
{"id": "81724885-c0d4-4790-b89b-bb499ba10ad1", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Maintain population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.4  # Slightly higher final inertia for stability\n        self.cognitive_coeff = 1.8  # Slightly reduced for balance\n        self.social_coeff = 1.8  # Balanced social coefficient\n        self.quantum_coeff = 0.6  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi / 2)  # Cosine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with dynamic neighborhood learning and enhanced quantum leaps for robust exploration and convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.86809843180453, 0.8656865911426441, 0.8520359754768346, 0.8689424779516427, 0.8833534924019595, 0.8801421218086176, 0.8721560948385834, 0.8634062411407808, 0.8470759917238162, 0.6731760713842743, 0.6984099073015564, 9.999999999998899e-05, 0.7153748986695032, 0.7382878408244324, 0.704009479561104, 0.5904943076564743, 0.6955089531526448, 0.4651001105784881, 0.1382893192137934, 0.14700397866728565, 0.12913293972348638, 0.1759303304669133, 0.17303176482832094, 0.5365713493906714, 0.16645677476221077, 0.1457322522928609, 0.5586144074084555, 0.3642476444045266, 0.138225955628012, 0.12650718919554016, 0.12338912672246294, 0.1337548907142766, 0.13646208448779928, 0.15772718046087408, 0.17574233200011224, 0.1089760639902797, 0.9814142243321458, 0.992311977478297, 0.9834889655451481, 0.9750066404543468, 0.9781706588561505, 0.9750789789320502, 0.988583733314754, 0.9863141471271968, 0.9782154418328087, 0.6065880869571294, 0.5967720386430975, 0.4942958589358364, 0.426691750200218, 0.5168566427423578, 0.4270911099261455, 0.5119784501385705, 0.5421179169945152, 0.6327876731591711, 0.20270133011854563, 0.8401556746546058, 0.22254750946681712, 0.3003245377072742, 0.19211790276791485, 0.19490579599263935, 0.22849995088368447, 0.40518433213993954, 0.39140263433541655, 0.20026783760443456, 0.18350798856932238, 0.2190955350090832, 0.1119177074752512, 0.17937402852203488, 0.12911412062741434, 0.31718776706386764, 0.16015889974530306, 0.19979350355828707, 0.2145706236443129, 0.22560095911706168, 0.2199530543268292, 0.21202861034561304, 0.2263695433373203, 0.18773008744115327, 0.3183954462954178, 0.21064225867144148, 0.23079774984096735, 9.999999999998899e-05, 0.033481396564341015, 9.999999999998899e-05, 0.024729183314617487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016565281902716222, 0.10469164517640106, 0.04534986570119326, 0.06225893865981302, 0.0732222375592606, 0.03382105791684953, 0.0359239804842133, 0.06194958746066259, 0.0453821655842892, 0.11447296859435407, 0.1191794744787672, 0.034320659298624934, 0.20341857903206606, 0.07515691146040704, 0.07623823293753595, 0.07525890200605101, 0.09869738523629368, 0.16830281627970767, 0.07231146258022858, 0.0723203898865975, 0.16126183813471884, 0.15926107511735277, 0.04363855826957408, 0.18988333137116464, 0.1352023143551, 0.11649772579811601, 0.1460226538284869, 0.08335173385367689, 0.6147295648379401, 0.5651061686144145, 0.5157825383736048, 0.513713077675898, 0.5434666760963826, 0.550371676094936, 0.5627308026588336, 0.5654446278449188, 0.5276343978066933, 0.09159643084439795, 0.12814970568640716, 0.08929832856829256, 0.11517643742676431, 0.16343642858358887, 0.13796100842287595, 0.11383376492074004, 0.13107137567848937, 0.09977711382141896, 0.26252269491531866, 0.20614921875537906, 0.24251614212904804, 0.28616406073200606, 0.3215841927926255, 0.15960649467868537, 0.3345583518300329, 0.21353380892362472, 0.2676044822474519, 0.41574256171845214, 0.3213472496655988, 0.3474289350965245, 0.28094723098789953, 0.20758026658125894, 0.3307691144834287, 0.2363110534074273, 0.4100078612789384, 0.3025865709952452, 0.24760102008799634, 0.2352775712102676, 0.3074835799791821, 0.2317531087487883, 0.15785821262332178, 0.33806687381452105, 0.21490611536991477, 0.32371200531321986, 0.2603237857821705, 0.24290709494357832, 0.19115754564583953, 0.1941943518530671, 0.21313331592185236, 0.19064356023472195, 0.527737971065595, 0.2382319403689599, 0.24894221106001446, 0.22437678580611387, 0.2392285288953977, 0.5884940169709203, 0.3942985110577699, 0.2394561942454273, 0.22018875592073672, 0.19888324487025544, 0.21929039715436627, 0.2272152477409236, 0.6241699070880998, 0.9221889268189425, 0.12689168130862438, 0.15336743451992574, 0.17303540289206243, 0.20116093222745546, 0.19990929863511597, 0.1421147804612758, 0.1694519036612706, 0.21355146013657822, 0.4928310132342645, 0.2134533254307388, 0.1496960205625334, 0.41788563625481556, 0.1682306963337742, 0.20731421866532596, 0.1049392372847382, 0.1051179114684404, 0.5611177739082233, 0.19086889504407778, 0.22595933326916207, 0.200978461179119, 0.21095816062868844, 0.1900637808819079, 0.19841867777942057, 0.19024252017227972, 0.17800754969531718, 0.18072025186600527, 0.12666379560630125, 0.1373089791204215, 0.09765569439316313, 0.08546667493689442, 0.08080541052732138, 0.09020828994915886, 0.10762034059557513, 0.09946373738746606, 0.09759787122430719]}, "mutation_prompt": null}
{"id": "ebca92f1-5fcc-4b2d-89fc-77af2cf64c51", "solution": "import numpy as np\n\nclass EnhancedQuantumCooperativeSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)\n        self.inertia_weight_init = 0.9  # Increased for initial exploration\n        self.inertia_weight_final = 0.3  # Reduced for final exploitation\n        self.cognitive_coeff = 1.5  # Adjusted for balanced learning\n        self.social_coeff = 2.0  # Enhanced for stronger social learning\n        self.quantum_coeff = 0.5  # Adjusted for quantum frequency\n        self.eval_count = 0\n        self.chaotic_map = self._init_chaotic_map()\n\n    def _init_chaotic_map(self):\n        return np.random.rand(self.population_size)\n\n    def _update_chaotic_map(self):\n        self.chaotic_map = 4 * self.chaotic_map * (1 - self.chaotic_map)  # Logistic map\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            self._update_chaotic_map()\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * phase  # Linear decay\n            adaptive_learning_rate = 0.5 + 0.5 * self.chaotic_map  # Adaptive learning rate using chaotic map\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * adaptive_learning_rate[:, None] * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * adaptive_learning_rate[:, None] * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Adjusted quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n\n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "EnhancedQuantumCooperativeSwarmOptimizer", "description": "Enhanced Quantum-Cooperative Swarm Optimization with chaotic maps for global exploration and adaptive learning rates for improved convergence accuracy.", "configspace": "", "generation": 88, "fitness": 0.2584928088416208, "feedback": "The algorithm EnhancedQuantumCooperativeSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.6818126496383219, 0.6818325149229216, 0.6826209958890457, 0.6952299934579271, 0.7112446207517108, 0.7198682341646027, 0.7005845105681747, 0.6786750787485727, 0.7086448193892229, 0.4285443475299139, 0.03234675185445468, 0.2852802678781159, 0.37593701366531873, 0.42503392903692394, 0.2911965375952509, 0.3667780724139622, 0.026729444848595296, 0.36122913211332475, 0.3667232750341788, 0.46122795809638917, 0.12613949867481, 0.13007984593264899, 0.14957857279160602, 0.11996159285430552, 0.14023504330232195, 0.10765202518384098, 0.12403210341081028, 0.12316029054214594, 0.14760675776922494, 0.08604634117963184, 0.11910480133133827, 0.1251301295711983, 0.14834648946839513, 0.1301337692350899, 0.08292283833184899, 0.10766669938915385, 0.9599705116060298, 0.9847438369102424, 0.9853519220065381, 0.9753824561416063, 0.9849600663665886, 0.970996489965747, 0.9876494617425119, 0.974931848272074, 0.9849921455340855, 0.4917820040274897, 0.4374976082632823, 0.4854642739695212, 0.45508990446564546, 0.45257833227969957, 0.4906626665167698, 0.429811372855721, 0.43322290117776296, 0.41511249846118714, 0.2087063978011009, 0.22356693670048167, 0.2156140145687273, 0.20834516585244933, 0.6515910317511711, 0.25579342598620125, 0.2074605974922198, 0.5873738026797308, 0.22470403486961443, 0.16543014933752342, 0.1181173168802021, 0.10755670194587841, 0.08728336290135708, 0.16207286515586805, 0.1523225417716345, 0.1631058164436181, 0.1462205653914156, 0.13575640911393638, 0.11355813727328679, 0.19258217976885972, 0.1642313185068861, 0.1695860876502706, 0.09069850128153589, 0.10913302757643473, 0.13929848028414238, 0.18248997189566896, 0.16319327904243053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04203985877239169, 9.999999999998899e-05, 0.10546626362250555, 0.006398751516863976, 0.015044216472725025, 0.05953858997183836, 0.03358690155602595, 0.13193525123696304, 0.02882386694738892, 0.022854806831040686, 0.009765788467126058, 0.05881338134562808, 0.04271601257774016, 0.11166043847508278, 0.032687794329148034, 0.02423357959776773, 0.03325784171874546, 0.16591991909235315, 0.1425997018555687, 0.06279397726016067, 0.0674251405009354, 0.06661610377986416, 0.06809129723468854, 0.032893061567259574, 0.03567406838272513, 0.05270143487878154, 0.08223124723061737, 0.03251372335752034, 0.09152244003427568, 0.045405722934691806, 0.1284597864671323, 0.07214380960444611, 0.415872904170849, 0.45530765260328787, 0.46890070370288717, 0.48299374242932547, 0.45501098420622743, 0.4719600718767092, 0.5028092719148981, 0.4753387552042473, 0.4715066819300301, 0.10072559231338474, 0.11913967175176388, 0.1143354155206695, 0.09506369327424913, 0.10846424054562209, 0.09785135454127047, 0.11457278610998833, 0.10097390836979214, 0.08764029727469513, 0.20677128168270542, 0.16835532897746286, 0.23953232641223798, 0.15561797445438663, 0.2595796653436643, 0.16540596517205364, 0.26280642336725835, 0.21042234919038338, 0.21230687629750256, 0.3142029412458728, 0.3240515834594445, 0.2306393704379992, 0.3562752129781558, 0.24737992147173749, 0.189630187286429, 0.3905279938613099, 0.29506439413756935, 0.27134615793481776, 0.3002722308740744, 0.22603486991957966, 0.22978584946767655, 0.2658434657837142, 0.2197392386177427, 0.20417417948155958, 0.18513681750202304, 0.26981333332525137, 0.25434225376503783, 0.20752711148437009, 0.15965281152341648, 0.19747750598143377, 0.21919635368786872, 0.2295985164518134, 0.16763496042539594, 0.22620538852714112, 0.18547218051212444, 0.20600916450763085, 0.1831290667259996, 0.18391971611816227, 0.19808911996892598, 0.18555202206855115, 0.23343031814025228, 0.19905162529820963, 0.18605605463200803, 0.18151090240062273, 0.2187143074599116, 0.7107573523555752, 0.15580565974265537, 0.15427321961608575, 0.777854057776702, 0.19642740479473608, 0.19786949941701515, 0.7363811017367726, 0.16137993974716214, 0.7511701178373009, 0.4283279195071432, 0.20780587581657062, 0.2013829476023129, 0.20171092893993958, 0.650672736633477, 0.14736442312390374, 0.10314437361703188, 0.20590283809332155, 0.1521096749054699, 0.2166005022046693, 0.1942478211356874, 0.18072435736392423, 0.20630741009323905, 0.18876073511115032, 0.18945247085931405, 0.20695804599081735, 0.22657325617340807, 0.19099666258568038, 0.07549879394123804, 0.06917004653025582, 0.08772738435589345, 0.08305536368452704, 0.0758531546101836, 0.08966799173244178, 0.08795247856865429, 0.08149716438417376, 0.07966580842981896]}, "mutation_prompt": null}
{"id": "c9054f96-554a-4675-97d1-3eb49af6e7ce", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Maintain population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.4  # Slightly higher final inertia for stability\n        self.cognitive_coeff = 1.8  # Slightly reduced for balance\n        self.social_coeff = 1.8  # Balanced social coefficient\n        self.quantum_coeff = 0.6  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi / 2)  # Cosine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with dynamic neighborhood learning and enhanced quantum leaps for robust exploration and convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.86809843180453, 0.8656865911426441, 0.8520359754768346, 0.8689424779516427, 0.8833534924019595, 0.8801421218086176, 0.8721560948385834, 0.8634062411407808, 0.8470759917238162, 0.6731760713842743, 0.6984099073015564, 9.999999999998899e-05, 0.7153748986695032, 0.7382878408244324, 0.704009479561104, 0.5904943076564743, 0.6955089531526448, 0.4651001105784881, 0.1382893192137934, 0.14700397866728565, 0.12913293972348638, 0.1759303304669133, 0.17303176482832094, 0.5365713493906714, 0.16645677476221077, 0.1457322522928609, 0.5586144074084555, 0.3642476444045266, 0.138225955628012, 0.12650718919554016, 0.12338912672246294, 0.1337548907142766, 0.13646208448779928, 0.15772718046087408, 0.17574233200011224, 0.1089760639902797, 0.9814142243321458, 0.992311977478297, 0.9834889655451481, 0.9750066404543468, 0.9781706588561505, 0.9750789789320502, 0.988583733314754, 0.9863141471271968, 0.9782154418328087, 0.6065880869571294, 0.5967720386430975, 0.4942958589358364, 0.426691750200218, 0.5168566427423578, 0.4270911099261455, 0.5119784501385705, 0.5421179169945152, 0.6327876731591711, 0.20270133011854563, 0.8401556746546058, 0.22254750946681712, 0.3003245377072742, 0.19211790276791485, 0.19490579599263935, 0.22849995088368447, 0.40518433213993954, 0.39140263433541655, 0.20026783760443456, 0.18350798856932238, 0.2190955350090832, 0.1119177074752512, 0.17937402852203488, 0.12911412062741434, 0.31718776706386764, 0.16015889974530306, 0.19979350355828707, 0.2145706236443129, 0.22560095911706168, 0.2199530543268292, 0.21202861034561304, 0.2263695433373203, 0.18773008744115327, 0.3183954462954178, 0.21064225867144148, 0.23079774984096735, 9.999999999998899e-05, 0.033481396564341015, 9.999999999998899e-05, 0.024729183314617487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016565281902716222, 0.10469164517640106, 0.04534986570119326, 0.06225893865981302, 0.0732222375592606, 0.03382105791684953, 0.0359239804842133, 0.06194958746066259, 0.0453821655842892, 0.11447296859435407, 0.1191794744787672, 0.034320659298624934, 0.20341857903206606, 0.07515691146040704, 0.07623823293753595, 0.07525890200605101, 0.09869738523629368, 0.16830281627970767, 0.07231146258022858, 0.0723203898865975, 0.16126183813471884, 0.15926107511735277, 0.04363855826957408, 0.18988333137116464, 0.1352023143551, 0.11649772579811601, 0.1460226538284869, 0.08335173385367689, 0.6147295648379401, 0.5651061686144145, 0.5157825383736048, 0.513713077675898, 0.5434666760963826, 0.550371676094936, 0.5627308026588336, 0.5654446278449188, 0.5276343978066933, 0.09159643084439795, 0.12814970568640716, 0.08929832856829256, 0.11517643742676431, 0.16343642858358887, 0.13796100842287595, 0.11383376492074004, 0.13107137567848937, 0.09977711382141896, 0.26252269491531866, 0.20614921875537906, 0.24251614212904804, 0.28616406073200606, 0.3215841927926255, 0.15960649467868537, 0.3345583518300329, 0.21353380892362472, 0.2676044822474519, 0.41574256171845214, 0.3213472496655988, 0.3474289350965245, 0.28094723098789953, 0.20758026658125894, 0.3307691144834287, 0.2363110534074273, 0.4100078612789384, 0.3025865709952452, 0.24760102008799634, 0.2352775712102676, 0.3074835799791821, 0.2317531087487883, 0.15785821262332178, 0.33806687381452105, 0.21490611536991477, 0.32371200531321986, 0.2603237857821705, 0.24290709494357832, 0.19115754564583953, 0.1941943518530671, 0.21313331592185236, 0.19064356023472195, 0.527737971065595, 0.2382319403689599, 0.24894221106001446, 0.22437678580611387, 0.2392285288953977, 0.5884940169709203, 0.3942985110577699, 0.2394561942454273, 0.22018875592073672, 0.19888324487025544, 0.21929039715436627, 0.2272152477409236, 0.6241699070880998, 0.9221889268189425, 0.12689168130862438, 0.15336743451992574, 0.17303540289206243, 0.20116093222745546, 0.19990929863511597, 0.1421147804612758, 0.1694519036612706, 0.21355146013657822, 0.4928310132342645, 0.2134533254307388, 0.1496960205625334, 0.41788563625481556, 0.1682306963337742, 0.20731421866532596, 0.1049392372847382, 0.1051179114684404, 0.5611177739082233, 0.19086889504407778, 0.22595933326916207, 0.200978461179119, 0.21095816062868844, 0.1900637808819079, 0.19841867777942057, 0.19024252017227972, 0.17800754969531718, 0.18072025186600527, 0.12666379560630125, 0.1373089791204215, 0.09765569439316313, 0.08546667493689442, 0.08080541052732138, 0.09020828994915886, 0.10762034059557513, 0.09946373738746606, 0.09759787122430719]}, "mutation_prompt": null}
{"id": "ef1e552c-e06b-4fd1-9619-e3eb2c9ffe4e", "solution": "import numpy as np\n\nclass QuantumEnhancedAdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(50, dim * 5)  # Adjusted population for better exploration\n        self.inertia_weight_init = 0.8\n        self.inertia_weight_final = 0.5  # Adjusted final inertia for dynamic adaptation\n        self.cognitive_coeff = 2.0  # Refined balance for cognitive learning\n        self.social_coeff = 2.0  # Enhanced social coefficient for global learning\n        self.quantum_coeff = 0.7  # Refined quantum behavior for diversification\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.sin(phase * np.pi / 2)  # Sine inertia decay for smoother transition\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            # Dual-layer quantum adaptation for enhanced exploration\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift1 = np.random.uniform(-1, 1, (self.population_size, self.dim))\n                quantum_shift2 = np.random.uniform(-3, 3, (self.population_size, self.dim))\n                quantum_particles1 = particles + quantum_shift1\n                quantum_particles2 = particles + quantum_shift2\n                quantum_particles1 = np.clip(quantum_particles1, self.lower_bound, self.upper_bound)\n                quantum_particles2 = np.clip(quantum_particles2, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p1, q_p2 = quantum_particles1[i], quantum_particles2[i]\n                    quantum_score1 = func(q_p1)\n                    quantum_score2 = func(q_p2)\n                    self.eval_count += 2\n                    if quantum_score1 < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p1\n                        personal_best_scores[i] = quantum_score1\n                        if quantum_score1 < global_best_score:\n                            global_best_score = quantum_score1\n                            global_best_position = q_p1\n                    if quantum_score2 < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p2\n                        personal_best_scores[i] = quantum_score2\n                        if quantum_score2 < global_best_score:\n                            global_best_score = quantum_score2\n                            global_best_position = q_p2\n\n        return global_best_position", "name": "QuantumEnhancedAdaptivePSO", "description": "Quantum-Enhanced Adaptive Particle Swarm Optimization with stochastic multi-layer learning and dual layer quantum adaptation for enhanced exploration and convergence.", "configspace": "", "generation": 90, "fitness": 0.1929318088427602, "feedback": "The algorithm QuantumEnhancedAdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.44029458353826945, 0.38615939774654784, 0.4339377905933236, 0.4321426498816573, 0.4860063405393683, 0.4355957168561533, 0.4512347879846472, 0.4512098827565232, 0.4176103230058137, 0.01816016841260515, 0.04725698625630592, 0.07152208447301833, 0.03382853627408422, 0.025598839579956567, 0.059464059842874284, 0.09002340298856848, 0.028416365511104047, 0.08686829493978188, 0.0920236585393639, 0.09768027116974332, 0.08089755176336055, 0.09436069271413727, 0.08328559358901821, 0.07591853064026632, 0.0869656931998124, 0.10344504569815072, 0.10922387733258532, 0.08925434415860911, 0.07772890064500515, 0.07293633162190494, 0.07501660918612307, 0.07166293559606984, 0.06542781347705462, 0.07278548588122269, 0.07869573356926773, 0.09958982877591172, 0.9819355746664995, 0.977137368336125, 0.9810375845549341, 0.9803098994539844, 0.9768398249106022, 0.9662516555215088, 0.9818031019525177, 0.9811431674408443, 0.9681834650959429, 0.20564245776127854, 0.23108098641621777, 0.18706833422776148, 0.2252571406979863, 0.17560536141251015, 0.17260410101753476, 0.18094020202936412, 0.20033755305897627, 0.19064361038577593, 0.21797072492167846, 0.22163666519268077, 0.27073150636405174, 0.2059823961372802, 0.1938185473944446, 0.17577475428215916, 0.18126995352865183, 0.2805105750524437, 0.19070847192920715, 0.10980235695276264, 0.09162480082516122, 0.11214346426930355, 0.07263558978137774, 0.11590724411998798, 0.08153336983991688, 0.08541243892126582, 0.10720894377886203, 0.11874022282514785, 0.10096435636573187, 0.09853688970798813, 0.10524550771934316, 0.13648166682540597, 0.10864935476066162, 0.13918767713162672, 0.13563576009144251, 0.053432372727694744, 0.10318132510215672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008539153010601486, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05004907297419614, 0.04855891569076398, 0.05831282881142108, 0.06339700730076436, 0.0248934111770317, 0.0159953121849008, 0.04264210407184221, 0.06863976469190947, 0.04930030909401051, 0.010476486756045733, 0.0005957173652301195, 0.02310684133075902, 0.039268654442219164, 0.011152398509124417, 0.015400970397861036, 0.025172126094915814, 0.021562517623378463, 0.016858939173403642, 0.09452462517161386, 0.05498500477670454, 0.07051631658568935, 0.061840509040303915, 0.03695462893026491, 0.08506653093019012, 0.04788499053070405, 0.10661179723652836, 0.047977503449684766, 0.3600309024966184, 0.3709506282064975, 0.3366822528038218, 0.375119151655941, 0.3626843230363499, 0.359043293549275, 0.3820008265515751, 0.33726724633826977, 0.36847701308639647, 0.08906032550512732, 0.1154140428804421, 0.09559533768817896, 0.08628059962078982, 0.1025725110429192, 0.09039435109792704, 0.07346588697639489, 0.0855508577990276, 0.09482691914736074, 0.18880769651102092, 0.18293000247547786, 0.15166504322986551, 0.26990906181924224, 0.172335336166354, 0.18434788691551451, 0.17224211916587207, 0.19100172917391867, 0.1867489794372892, 0.25221358417518336, 0.2537454486838868, 0.2635706179808539, 0.2026486127008016, 0.23987133940593441, 0.22142406036210827, 0.25023880771288776, 0.28385740245413904, 0.26766213599306277, 0.16305519159129978, 0.15279917343864557, 0.16493548256220292, 0.14898863663953266, 0.1439426118168694, 0.16485216626899912, 0.18935819303452095, 0.21106238931130084, 0.1925124260637583, 0.18881713704228764, 0.1744418532930576, 0.2176151295704154, 0.17290889213548422, 0.1894163518721147, 0.17457161362516582, 0.18135125284548648, 0.18866443065411187, 0.18773431805260277, 0.1857909683172121, 0.18418499274793232, 0.19030162451329835, 0.1881623876814611, 0.19349344326993378, 0.176143692344354, 0.18056498398769705, 0.17375567208488663, 0.17794764961481013, 0.5370153027299815, 0.16465902489761852, 0.15221099551212314, 0.5572544857387189, 0.49179602693545965, 0.1434130318312422, 0.17497497383137195, 0.2055199233557251, 0.5193724710221257, 0.30542180470593494, 0.20214600356769763, 0.15200999262792014, 0.19497687439598932, 0.23093424213913882, 0.2661189867732744, 0.20456726202647324, 0.26075787679074813, 0.1947782802792778, 0.20412245545295837, 0.17827458157246534, 0.20401788448220615, 0.18293484373282864, 0.1855758088551852, 0.1827465122692301, 0.1806962748127411, 0.1816274535570902, 0.19498344124067435, 0.06292186199017091, 0.06504334043675075, 0.08023003967405873, 0.07750730500249248, 0.07407056082762398, 0.06620942934665286, 0.06801666210976276, 0.0735658997553521, 0.07292792595230657]}, "mutation_prompt": null}
{"id": "12673d49-328e-44a1-a69c-d87910c64fa0", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Maintain population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.4  # Slightly higher final inertia for stability\n        self.cognitive_coeff = 1.8  # Slightly reduced for balance\n        self.social_coeff = 1.8  # Balanced social coefficient\n        self.quantum_coeff = 0.6  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi / 2)  # Cosine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with dynamic neighborhood learning and enhanced quantum leaps for robust exploration and convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.86809843180453, 0.8656865911426441, 0.8520359754768346, 0.8689424779516427, 0.8833534924019595, 0.8801421218086176, 0.8721560948385834, 0.8634062411407808, 0.8470759917238162, 0.6731760713842743, 0.6984099073015564, 9.999999999998899e-05, 0.7153748986695032, 0.7382878408244324, 0.704009479561104, 0.5904943076564743, 0.6955089531526448, 0.4651001105784881, 0.1382893192137934, 0.14700397866728565, 0.12913293972348638, 0.1759303304669133, 0.17303176482832094, 0.5365713493906714, 0.16645677476221077, 0.1457322522928609, 0.5586144074084555, 0.3642476444045266, 0.138225955628012, 0.12650718919554016, 0.12338912672246294, 0.1337548907142766, 0.13646208448779928, 0.15772718046087408, 0.17574233200011224, 0.1089760639902797, 0.9814142243321458, 0.992311977478297, 0.9834889655451481, 0.9750066404543468, 0.9781706588561505, 0.9750789789320502, 0.988583733314754, 0.9863141471271968, 0.9782154418328087, 0.6065880869571294, 0.5967720386430975, 0.4942958589358364, 0.426691750200218, 0.5168566427423578, 0.4270911099261455, 0.5119784501385705, 0.5421179169945152, 0.6327876731591711, 0.20270133011854563, 0.8401556746546058, 0.22254750946681712, 0.3003245377072742, 0.19211790276791485, 0.19490579599263935, 0.22849995088368447, 0.40518433213993954, 0.39140263433541655, 0.20026783760443456, 0.18350798856932238, 0.2190955350090832, 0.1119177074752512, 0.17937402852203488, 0.12911412062741434, 0.31718776706386764, 0.16015889974530306, 0.19979350355828707, 0.2145706236443129, 0.22560095911706168, 0.2199530543268292, 0.21202861034561304, 0.2263695433373203, 0.18773008744115327, 0.3183954462954178, 0.21064225867144148, 0.23079774984096735, 9.999999999998899e-05, 0.033481396564341015, 9.999999999998899e-05, 0.024729183314617487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016565281902716222, 0.10469164517640106, 0.04534986570119326, 0.06225893865981302, 0.0732222375592606, 0.03382105791684953, 0.0359239804842133, 0.06194958746066259, 0.0453821655842892, 0.11447296859435407, 0.1191794744787672, 0.034320659298624934, 0.20341857903206606, 0.07515691146040704, 0.07623823293753595, 0.07525890200605101, 0.09869738523629368, 0.16830281627970767, 0.07231146258022858, 0.0723203898865975, 0.16126183813471884, 0.15926107511735277, 0.04363855826957408, 0.18988333137116464, 0.1352023143551, 0.11649772579811601, 0.1460226538284869, 0.08335173385367689, 0.6147295648379401, 0.5651061686144145, 0.5157825383736048, 0.513713077675898, 0.5434666760963826, 0.550371676094936, 0.5627308026588336, 0.5654446278449188, 0.5276343978066933, 0.09159643084439795, 0.12814970568640716, 0.08929832856829256, 0.11517643742676431, 0.16343642858358887, 0.13796100842287595, 0.11383376492074004, 0.13107137567848937, 0.09977711382141896, 0.26252269491531866, 0.20614921875537906, 0.24251614212904804, 0.28616406073200606, 0.3215841927926255, 0.15960649467868537, 0.3345583518300329, 0.21353380892362472, 0.2676044822474519, 0.41574256171845214, 0.3213472496655988, 0.3474289350965245, 0.28094723098789953, 0.20758026658125894, 0.3307691144834287, 0.2363110534074273, 0.4100078612789384, 0.3025865709952452, 0.24760102008799634, 0.2352775712102676, 0.3074835799791821, 0.2317531087487883, 0.15785821262332178, 0.33806687381452105, 0.21490611536991477, 0.32371200531321986, 0.2603237857821705, 0.24290709494357832, 0.19115754564583953, 0.1941943518530671, 0.21313331592185236, 0.19064356023472195, 0.527737971065595, 0.2382319403689599, 0.24894221106001446, 0.22437678580611387, 0.2392285288953977, 0.5884940169709203, 0.3942985110577699, 0.2394561942454273, 0.22018875592073672, 0.19888324487025544, 0.21929039715436627, 0.2272152477409236, 0.6241699070880998, 0.9221889268189425, 0.12689168130862438, 0.15336743451992574, 0.17303540289206243, 0.20116093222745546, 0.19990929863511597, 0.1421147804612758, 0.1694519036612706, 0.21355146013657822, 0.4928310132342645, 0.2134533254307388, 0.1496960205625334, 0.41788563625481556, 0.1682306963337742, 0.20731421866532596, 0.1049392372847382, 0.1051179114684404, 0.5611177739082233, 0.19086889504407778, 0.22595933326916207, 0.200978461179119, 0.21095816062868844, 0.1900637808819079, 0.19841867777942057, 0.19024252017227972, 0.17800754969531718, 0.18072025186600527, 0.12666379560630125, 0.1373089791204215, 0.09765569439316313, 0.08546667493689442, 0.08080541052732138, 0.09020828994915886, 0.10762034059557513, 0.09946373738746606, 0.09759787122430719]}, "mutation_prompt": null}
{"id": "e43045dc-c55b-44fa-96e2-f1b6b07593ba", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Maintain population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.4  # Slightly higher final inertia for stability\n        self.cognitive_coeff = 1.8  # Slightly reduced for balance\n        self.social_coeff = 1.8  # Balanced social coefficient\n        self.quantum_coeff = 0.6  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi / 2)  # Cosine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with dynamic neighborhood learning and enhanced quantum leaps for robust exploration and convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.86809843180453, 0.8656865911426441, 0.8520359754768346, 0.8689424779516427, 0.8833534924019595, 0.8801421218086176, 0.8721560948385834, 0.8634062411407808, 0.8470759917238162, 0.6731760713842743, 0.6984099073015564, 9.999999999998899e-05, 0.7153748986695032, 0.7382878408244324, 0.704009479561104, 0.5904943076564743, 0.6955089531526448, 0.4651001105784881, 0.1382893192137934, 0.14700397866728565, 0.12913293972348638, 0.1759303304669133, 0.17303176482832094, 0.5365713493906714, 0.16645677476221077, 0.1457322522928609, 0.5586144074084555, 0.3642476444045266, 0.138225955628012, 0.12650718919554016, 0.12338912672246294, 0.1337548907142766, 0.13646208448779928, 0.15772718046087408, 0.17574233200011224, 0.1089760639902797, 0.9814142243321458, 0.992311977478297, 0.9834889655451481, 0.9750066404543468, 0.9781706588561505, 0.9750789789320502, 0.988583733314754, 0.9863141471271968, 0.9782154418328087, 0.6065880869571294, 0.5967720386430975, 0.4942958589358364, 0.426691750200218, 0.5168566427423578, 0.4270911099261455, 0.5119784501385705, 0.5421179169945152, 0.6327876731591711, 0.20270133011854563, 0.8401556746546058, 0.22254750946681712, 0.3003245377072742, 0.19211790276791485, 0.19490579599263935, 0.22849995088368447, 0.40518433213993954, 0.39140263433541655, 0.20026783760443456, 0.18350798856932238, 0.2190955350090832, 0.1119177074752512, 0.17937402852203488, 0.12911412062741434, 0.31718776706386764, 0.16015889974530306, 0.19979350355828707, 0.2145706236443129, 0.22560095911706168, 0.2199530543268292, 0.21202861034561304, 0.2263695433373203, 0.18773008744115327, 0.3183954462954178, 0.21064225867144148, 0.23079774984096735, 9.999999999998899e-05, 0.033481396564341015, 9.999999999998899e-05, 0.024729183314617487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016565281902716222, 0.10469164517640106, 0.04534986570119326, 0.06225893865981302, 0.0732222375592606, 0.03382105791684953, 0.0359239804842133, 0.06194958746066259, 0.0453821655842892, 0.11447296859435407, 0.1191794744787672, 0.034320659298624934, 0.20341857903206606, 0.07515691146040704, 0.07623823293753595, 0.07525890200605101, 0.09869738523629368, 0.16830281627970767, 0.07231146258022858, 0.0723203898865975, 0.16126183813471884, 0.15926107511735277, 0.04363855826957408, 0.18988333137116464, 0.1352023143551, 0.11649772579811601, 0.1460226538284869, 0.08335173385367689, 0.6147295648379401, 0.5651061686144145, 0.5157825383736048, 0.513713077675898, 0.5434666760963826, 0.550371676094936, 0.5627308026588336, 0.5654446278449188, 0.5276343978066933, 0.09159643084439795, 0.12814970568640716, 0.08929832856829256, 0.11517643742676431, 0.16343642858358887, 0.13796100842287595, 0.11383376492074004, 0.13107137567848937, 0.09977711382141896, 0.26252269491531866, 0.20614921875537906, 0.24251614212904804, 0.28616406073200606, 0.3215841927926255, 0.15960649467868537, 0.3345583518300329, 0.21353380892362472, 0.2676044822474519, 0.41574256171845214, 0.3213472496655988, 0.3474289350965245, 0.28094723098789953, 0.20758026658125894, 0.3307691144834287, 0.2363110534074273, 0.4100078612789384, 0.3025865709952452, 0.24760102008799634, 0.2352775712102676, 0.3074835799791821, 0.2317531087487883, 0.15785821262332178, 0.33806687381452105, 0.21490611536991477, 0.32371200531321986, 0.2603237857821705, 0.24290709494357832, 0.19115754564583953, 0.1941943518530671, 0.21313331592185236, 0.19064356023472195, 0.527737971065595, 0.2382319403689599, 0.24894221106001446, 0.22437678580611387, 0.2392285288953977, 0.5884940169709203, 0.3942985110577699, 0.2394561942454273, 0.22018875592073672, 0.19888324487025544, 0.21929039715436627, 0.2272152477409236, 0.6241699070880998, 0.9221889268189425, 0.12689168130862438, 0.15336743451992574, 0.17303540289206243, 0.20116093222745546, 0.19990929863511597, 0.1421147804612758, 0.1694519036612706, 0.21355146013657822, 0.4928310132342645, 0.2134533254307388, 0.1496960205625334, 0.41788563625481556, 0.1682306963337742, 0.20731421866532596, 0.1049392372847382, 0.1051179114684404, 0.5611177739082233, 0.19086889504407778, 0.22595933326916207, 0.200978461179119, 0.21095816062868844, 0.1900637808819079, 0.19841867777942057, 0.19024252017227972, 0.17800754969531718, 0.18072025186600527, 0.12666379560630125, 0.1373089791204215, 0.09765569439316313, 0.08546667493689442, 0.08080541052732138, 0.09020828994915886, 0.10762034059557513, 0.09946373738746606, 0.09759787122430719]}, "mutation_prompt": null}
{"id": "3759fb38-0579-464c-bcd1-e072a39024ef", "solution": "import numpy as np\n\nclass QuantumLeapParticleSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(30, dim * 5)  # Adjusted population for efficiency\n        self.inertia_weight_init = 0.9  # Increased for exploration\n        self.inertia_weight_final = 0.3  # Reduced for exploitation\n        self.cognitive_coeff = 2.0  # Slightly higher to enhance individual learning\n        self.social_coeff = 2.0  # Increased for cooperative behavior\n        self.quantum_leap_prob = 0.7  # Higher chance for quantum leap\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Wider velocity range\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * phase  # Linear inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_leap_prob:\n                quantum_shift = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Slightly reduced quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumLeapParticleSwarmOptimizer", "description": "Quantum-Leap Particle Swarm Optimization with adaptive inertia and stochastic tunneling for enhanced exploration and exploitation.", "configspace": "", "generation": 93, "fitness": 0.22019691469753327, "feedback": "The algorithm QuantumLeapParticleSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.5258697283411129, 0.5744306184129504, 0.5593937777638511, 0.5858815074696248, 0.5872496432485295, 0.6022526837540869, 0.5236656147637272, 0.5737330499967154, 0.5632746887227233, 0.045293012327822235, 0.17296598780572003, 0.2868347246528412, 0.026547173004240143, 0.023437630589326908, 0.22687077287012758, 0.015949823654956008, 0.22816011943303638, 0.2441923878258977, 0.1216254059891444, 0.12353815491189102, 0.09831211076410185, 0.13219902877858536, 0.10858416488978961, 0.10764420201173508, 0.13150353152747118, 0.14674754510054577, 0.10891045251338294, 0.08484867242449778, 0.0989038913875645, 0.11957527960703884, 0.09954370774219568, 0.1032219100108116, 0.1082369401608505, 0.09781683713561795, 0.14342385709669725, 0.08389730399770001, 0.9866013233609242, 0.9897359841367256, 0.9915241838087296, 0.9814697411853421, 0.9839454689806004, 0.9845542868618758, 0.9866910638542336, 0.98872528983308, 0.9863835014723721, 0.2691325407121702, 0.28130196144911046, 0.27213735300158937, 0.24791537741009695, 0.2661501147891606, 0.3019478068257109, 0.25009904523866866, 0.26753117103853796, 0.2590758973827957, 0.2554805764824133, 0.25555466950917893, 0.3970446312597401, 0.206612968271487, 0.19220567480580752, 0.4116510688222128, 0.28725312449675977, 0.2540490720281059, 0.20623723918704184, 0.11172210790489812, 0.128210189132543, 0.10016419539570576, 0.13840491376068298, 0.1382562486472858, 0.12899257932007058, 0.13382058320926093, 0.10356921435143995, 0.1640777264558423, 0.09717623510950812, 0.04156668808331798, 0.13333076124543441, 0.09901563016506332, 0.07921182827926554, 0.10036170213823203, 0.06976101353007502, 0.06620156607071548, 0.13393316275525136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010936974640242791, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015959450065889946, 9.999999999998899e-05, 0.0031655152809806353, 0.07046994265485262, 0.0740692973088255, 0.021554012683298374, 0.11439175289835168, 0.030104857667160867, 0.03521520549463453, 0.0925023254449383, 0.06078764101937428, 0.060068888857944924, 0.03010466578828286, 0.11353293699854672, 0.027532143545124566, 0.1634269393241331, 0.03826158947902658, 0.042072409717419545, 0.045122719375454645, 0.03921217546711431, 0.0516623549804599, 0.06007911495161877, 0.13047365306632497, 0.03234554151828939, 0.08829055247310758, 0.08053606642534872, 0.08210099237331359, 0.0726483618236834, 0.04395538404346844, 0.15372533611374095, 0.41504056058537886, 0.4403713695031076, 0.39584668724928707, 0.4130890384557936, 0.40157977362514796, 0.39788667360774566, 0.39067185938361615, 0.41563106894539004, 0.39628625513629145, 0.10735520093588036, 0.09124292071806472, 0.0775125705982862, 0.07205988124242291, 0.0883564376222652, 0.09081262870204532, 0.07469508327704266, 0.08399199449900185, 0.09410770408390434, 0.2890275703067213, 0.15805319594375888, 0.17374832060280754, 0.19679232899237054, 0.2398193015032516, 0.21948414588332854, 0.17217456241461537, 0.17211201439109902, 0.1823160031379728, 0.2970586001120179, 0.23461847663895607, 0.23236935740036602, 0.21396448813892632, 0.2843890374397672, 0.2562094867014759, 0.24248244482208192, 0.36503566197746284, 0.25257497656377925, 0.19524749597999147, 0.17692432930717528, 0.19467629319762292, 0.20681095381838932, 0.15543355763592537, 0.16512047445348144, 0.2378570619006325, 0.26739387885160937, 0.20744871628207395, 0.16922725238705427, 0.1744381833419668, 0.18284948998411932, 0.20885515132554433, 0.15116221758439952, 0.1789150173186601, 0.21050050880807025, 0.20999250592624819, 0.22089281855536969, 0.18129222836544934, 0.18324832268874336, 0.18991583370332488, 0.18960537943749345, 0.19270032742212317, 0.1967372900547869, 0.19142745225095248, 0.1864375724388857, 0.18395574857908736, 0.6360881751911205, 0.1644360336534212, 0.15226572126209537, 0.6379779519762601, 0.1893001560781895, 0.5803887446360236, 0.17529823495415475, 0.16825373007171296, 0.19904415247016483, 0.37711414428791556, 0.14926694459706724, 0.11074425037348501, 0.2917018783639256, 0.40666323177223085, 0.19433048682742105, 0.2072685830077725, 0.4441404828460622, 0.2911398419235779, 0.18462117485277618, 0.17976002106536704, 0.1950111848376116, 0.18977057122210716, 0.18082373848769162, 0.18220006667504418, 0.1902152832562003, 0.1928480158198691, 0.18071389359032453, 0.0743889164019732, 0.08559491005135, 0.07157275912549343, 0.07083041460386208, 0.07562865996750645, 0.07458087894413434, 0.07498100873708813, 0.08309312994039642, 0.07877374118755176]}, "mutation_prompt": null}
{"id": "85903f3c-957a-4421-ae4d-06901926a3c1", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Maintain population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.4  # Slightly higher final inertia for stability\n        self.cognitive_coeff = 1.8  # Slightly reduced for balance\n        self.social_coeff = 1.8  # Balanced social coefficient\n        self.quantum_coeff = 0.6  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi / 2)  # Cosine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with dynamic neighborhood learning and enhanced quantum leaps for robust exploration and convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.86809843180453, 0.8656865911426441, 0.8520359754768346, 0.8689424779516427, 0.8833534924019595, 0.8801421218086176, 0.8721560948385834, 0.8634062411407808, 0.8470759917238162, 0.6731760713842743, 0.6984099073015564, 9.999999999998899e-05, 0.7153748986695032, 0.7382878408244324, 0.704009479561104, 0.5904943076564743, 0.6955089531526448, 0.4651001105784881, 0.1382893192137934, 0.14700397866728565, 0.12913293972348638, 0.1759303304669133, 0.17303176482832094, 0.5365713493906714, 0.16645677476221077, 0.1457322522928609, 0.5586144074084555, 0.3642476444045266, 0.138225955628012, 0.12650718919554016, 0.12338912672246294, 0.1337548907142766, 0.13646208448779928, 0.15772718046087408, 0.17574233200011224, 0.1089760639902797, 0.9814142243321458, 0.992311977478297, 0.9834889655451481, 0.9750066404543468, 0.9781706588561505, 0.9750789789320502, 0.988583733314754, 0.9863141471271968, 0.9782154418328087, 0.6065880869571294, 0.5967720386430975, 0.4942958589358364, 0.426691750200218, 0.5168566427423578, 0.4270911099261455, 0.5119784501385705, 0.5421179169945152, 0.6327876731591711, 0.20270133011854563, 0.8401556746546058, 0.22254750946681712, 0.3003245377072742, 0.19211790276791485, 0.19490579599263935, 0.22849995088368447, 0.40518433213993954, 0.39140263433541655, 0.20026783760443456, 0.18350798856932238, 0.2190955350090832, 0.1119177074752512, 0.17937402852203488, 0.12911412062741434, 0.31718776706386764, 0.16015889974530306, 0.19979350355828707, 0.2145706236443129, 0.22560095911706168, 0.2199530543268292, 0.21202861034561304, 0.2263695433373203, 0.18773008744115327, 0.3183954462954178, 0.21064225867144148, 0.23079774984096735, 9.999999999998899e-05, 0.033481396564341015, 9.999999999998899e-05, 0.024729183314617487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016565281902716222, 0.10469164517640106, 0.04534986570119326, 0.06225893865981302, 0.0732222375592606, 0.03382105791684953, 0.0359239804842133, 0.06194958746066259, 0.0453821655842892, 0.11447296859435407, 0.1191794744787672, 0.034320659298624934, 0.20341857903206606, 0.07515691146040704, 0.07623823293753595, 0.07525890200605101, 0.09869738523629368, 0.16830281627970767, 0.07231146258022858, 0.0723203898865975, 0.16126183813471884, 0.15926107511735277, 0.04363855826957408, 0.18988333137116464, 0.1352023143551, 0.11649772579811601, 0.1460226538284869, 0.08335173385367689, 0.6147295648379401, 0.5651061686144145, 0.5157825383736048, 0.513713077675898, 0.5434666760963826, 0.550371676094936, 0.5627308026588336, 0.5654446278449188, 0.5276343978066933, 0.09159643084439795, 0.12814970568640716, 0.08929832856829256, 0.11517643742676431, 0.16343642858358887, 0.13796100842287595, 0.11383376492074004, 0.13107137567848937, 0.09977711382141896, 0.26252269491531866, 0.20614921875537906, 0.24251614212904804, 0.28616406073200606, 0.3215841927926255, 0.15960649467868537, 0.3345583518300329, 0.21353380892362472, 0.2676044822474519, 0.41574256171845214, 0.3213472496655988, 0.3474289350965245, 0.28094723098789953, 0.20758026658125894, 0.3307691144834287, 0.2363110534074273, 0.4100078612789384, 0.3025865709952452, 0.24760102008799634, 0.2352775712102676, 0.3074835799791821, 0.2317531087487883, 0.15785821262332178, 0.33806687381452105, 0.21490611536991477, 0.32371200531321986, 0.2603237857821705, 0.24290709494357832, 0.19115754564583953, 0.1941943518530671, 0.21313331592185236, 0.19064356023472195, 0.527737971065595, 0.2382319403689599, 0.24894221106001446, 0.22437678580611387, 0.2392285288953977, 0.5884940169709203, 0.3942985110577699, 0.2394561942454273, 0.22018875592073672, 0.19888324487025544, 0.21929039715436627, 0.2272152477409236, 0.6241699070880998, 0.9221889268189425, 0.12689168130862438, 0.15336743451992574, 0.17303540289206243, 0.20116093222745546, 0.19990929863511597, 0.1421147804612758, 0.1694519036612706, 0.21355146013657822, 0.4928310132342645, 0.2134533254307388, 0.1496960205625334, 0.41788563625481556, 0.1682306963337742, 0.20731421866532596, 0.1049392372847382, 0.1051179114684404, 0.5611177739082233, 0.19086889504407778, 0.22595933326916207, 0.200978461179119, 0.21095816062868844, 0.1900637808819079, 0.19841867777942057, 0.19024252017227972, 0.17800754969531718, 0.18072025186600527, 0.12666379560630125, 0.1373089791204215, 0.09765569439316313, 0.08546667493689442, 0.08080541052732138, 0.09020828994915886, 0.10762034059557513, 0.09946373738746606, 0.09759787122430719]}, "mutation_prompt": null}
{"id": "d33b5ec3-2a70-44af-b3a4-9a12476699b8", "solution": "import numpy as np\n\nclass QuantumLeapSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)\n        self.inertia_weight_init = 0.9  # Increased initial inertia for exploration\n        self.inertia_weight_final = 0.5  # Higher final inertia for precision\n        self.cognitive_coeff = 2.0  # Balanced cognitive coefficient\n        self.social_coeff = 1.5  # Reduced social coefficient for reduced crowding\n        self.quantum_coeff = 0.7  # Enhanced quantum behavior\n        self.scaling_factor = 0.5  # New adaptive velocity scaling factor\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi)  # Simple cosine inertia\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            # Adaptive velocity scaling\n            velocities = velocities * self.scaling_factor\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Adjusted quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumLeapSwarmOptimizer", "description": "Quantum-Leap Swarm Optimizer with Adaptive Velocity Scaling for enhanced exploration and precision.", "configspace": "", "generation": 95, "fitness": 0.21818990563094232, "feedback": "The algorithm QuantumLeapSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.4600195817586873, 0.6947222326729754, 0.3671371646262792, 0.4589649623329658, 0.41138662683658456, 0.40909229591340635, 0.6343376498125962, 0.46045297709690636, 0.40045494252714575, 9.999999999998899e-05, 0.008794146608176567, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08424667401429575, 9.999999999998899e-05, 0.0026255608173619827, 9.999999999998899e-05, 0.11102255019951623, 0.09806295163297618, 0.13954977146373626, 0.11387717772436956, 0.10017035852080802, 0.09371447593973659, 0.12411130210298038, 0.12709762607098785, 0.12954707386635378, 0.14356975533217886, 0.1096328912083141, 0.10068826896143024, 0.09692862288910042, 0.07702289063828516, 0.12304933637935955, 0.09486953506066875, 0.09728545120854848, 0.10251561037051382, 0.9163025066188083, 0.9284983689060511, 0.9171500197060702, 0.9128163111186102, 0.9020195522248511, 0.87246227825789, 0.9539019774408596, 0.8963700567995873, 0.9027656582713834, 0.20429018975785407, 0.22009830275203635, 0.20003514822468482, 0.19167908329888328, 0.19578353984190244, 0.27844259621064626, 0.18423957310718475, 0.2813827629125638, 0.192281702292737, 0.3226358456125564, 0.20378214801982852, 0.2199444687593758, 0.24516182749143234, 0.26194102930466756, 0.21436149706427154, 0.2166466248218576, 0.19667729632646436, 0.2337914986394528, 0.2154826275315087, 0.11868014257328685, 0.13222600559860964, 0.09383294739225534, 0.13204393953527382, 0.1267926815404271, 0.16491230299765702, 0.2694200221626467, 0.12991806574554798, 0.41248217146242416, 0.1281869280032497, 0.13614972078912035, 0.12953133970262987, 0.15693931976344644, 0.13590721182701782, 0.13571978471082402, 0.12270554622600427, 0.12535891085938689, 9.999999999998899e-05, 0.05461996169893135, 9.999999999998899e-05, 0.04349036668562234, 9.999999999998899e-05, 0.00466972754142303, 9.999999999998899e-05, 0.0008163345583805937, 9.999999999998899e-05, 0.1256543470066841, 0.09333721636559766, 0.09678813457052382, 0.08910116546524083, 0.027910818359388023, 0.022652743108446338, 0.16826935113316976, 0.05623270068036035, 0.14507516372669538, 0.042753513046077884, 0.3155106481154033, 9.999999999998899e-05, 0.11055461593304994, 0.12940651700735595, 9.999999999998899e-05, 0.1715414703391187, 0.15713504724102945, 9.999999999998899e-05, 0.09061536431423434, 0.11642430294931272, 0.12473368055982625, 0.062418646172107795, 0.11373924409547875, 0.080721599073867, 0.13410669745469417, 0.06993450187142936, 0.08293348465630312, 0.4189634484856338, 0.4010682407413323, 0.43310981897363876, 0.44351114198898667, 0.340459418323361, 0.4222183494895959, 0.42273886274079864, 0.4729094916403188, 0.3855778580549072, 0.09607322848166111, 0.10870902140233085, 0.13015487464721287, 0.1116664371726902, 0.12288972417354616, 0.10141104281418434, 0.07388961801655336, 0.1011021902737348, 0.081272148444406, 0.21090885147411043, 0.21270692950869252, 0.17516861955001217, 0.1896433681669032, 0.26339181328472483, 0.19867301932241, 0.1796186312675231, 0.15611564821075086, 0.18122786816267622, 0.27930871153270753, 0.4083614592427258, 0.27372139890976166, 0.2431098562548526, 0.33007387029033997, 0.2507238646386455, 0.2288355040440574, 0.2661143347774133, 0.25591430759163003, 0.18153501351086965, 0.2362712861583669, 0.2601878126233935, 0.3328715145811031, 0.23413193320091752, 0.2782793410801784, 0.23031225320749793, 0.22606823976220702, 0.20094517454228367, 0.23815162673563683, 0.20383977468010295, 0.20141094988206332, 0.22935305529079975, 0.22032616349644762, 0.2496336341299853, 0.2550781676006595, 0.24568957459870788, 0.24014482314316743, 0.21003204349948923, 0.18145875135921574, 0.19038914116118355, 0.175778498078916, 0.2557456547184438, 0.19843935711127958, 0.184732500567508, 0.1992610299949017, 0.18087975215611618, 0.45986901282345194, 0.18857876830922327, 0.15075069948426156, 0.4047105138635717, 0.20167578219307603, 0.4745968389716527, 0.14266278471876104, 0.16822290599943535, 0.4458121796178032, 0.3885579069133144, 0.21173958866905707, 0.5929506425942506, 0.1849524935119865, 0.17014863886747134, 0.14814312354359138, 0.36477204622699066, 0.31579388655814733, 0.22184054521228636, 0.18558509796342304, 0.19364180170341683, 0.18600973900461626, 0.2192943398477496, 0.21014530112746055, 0.18531566144304323, 0.21554212033952513, 0.1840870757912879, 0.19465538672037386, 0.10571072491767342, 0.09137242282470215, 0.09544558277002901, 0.10179299140182851, 0.10783485055268027, 0.08271142636940909, 0.08390672135372279, 0.10378476072308207, 0.0948658538640953]}, "mutation_prompt": null}
{"id": "84471e18-cf09-4166-af12-9e1e6e737578", "solution": "import numpy as np\n\nclass EnhancedQuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(50, dim * 8)  # Increased population for better exploration\n        self.inertia_weight_init = 0.8\n        self.inertia_weight_final = 0.3  # Adjusted for more dynamic range\n        self.cognitive_coeff = 2.0  # Increased cognitive effect for personal discovery\n        self.social_coeff = 2.0  # Strengthened social influence\n        self.quantum_coeff = 0.7  # Refined quantum behavior for better balance\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.sin(phase * np.pi / 2)  # Sine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.normal(0, 1.5, (self.population_size, self.dim))  # Progressive quantum exploration\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "EnhancedQuantumAdaptiveSwarmOptimizer", "description": "Enhanced Quantum-Adaptive Swarm Optimization with dynamic strategy adaptation and progressive quantum exploration for improved convergence.", "configspace": "", "generation": 96, "fitness": 0.2311910845108568, "feedback": "The algorithm EnhancedQuantumAdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.6343226898253569, 0.5733132748796118, 0.6106063729139468, 0.6172527353860082, 0.6191927564147459, 0.6524435652669154, 0.6480303245237292, 0.6209619791981705, 0.6195337847761279, 0.02830915314775051, 0.28468922302791, 0.3466478628956833, 9.999999999998899e-05, 0.3115808097419883, 0.032244160643082775, 0.39830846404799714, 0.011711660447573546, 0.23976759204168452, 0.12185058618395472, 0.14720276989096892, 0.1088879805517583, 0.10333006132891498, 0.10433136808040433, 0.09837473651652395, 0.12172511274374953, 0.2678989339060187, 0.13502004945574897, 0.10107126442789593, 0.10006335000417943, 0.09399350421323072, 0.08085696906822581, 0.10316221545976989, 0.10531980278255892, 0.10036309426219281, 0.11692724977988744, 0.10428225865452001, 0.9849977654748744, 0.9824232752354343, 0.9828703164342135, 0.9733620143465441, 0.9810237281262544, 0.9814926679792841, 0.9854259562853875, 0.9816219806294579, 0.981425095103501, 0.2835402336540547, 0.3076642922107241, 0.26783819033356904, 0.2951165717390367, 0.2814913679960247, 0.2792354511593307, 0.2760290961935925, 0.2645376114055361, 0.2715414882930489, 0.305075442283662, 0.21301862508383518, 0.37782854312309044, 0.27795968068088994, 0.2040970371579507, 0.3094503621328456, 0.6182450370374228, 0.2082365073308834, 0.2980935076210234, 0.1410698382667671, 0.08077036286281514, 0.14632040846904126, 0.07962011004609226, 0.15814790169784176, 0.13519054667225316, 0.13794775163145545, 0.12960695915192155, 0.14662261037973, 0.14823364611841428, 0.11410250708928338, 0.14617301224825474, 0.11358867783663174, 0.12149170794634323, 0.14571361084520373, 0.13435732091530772, 0.08255418445057094, 0.1200388427969259, 9.999999999998899e-05, 9.999999999998899e-05, 0.022659156463500363, 0.00017918645699532831, 9.999999999998899e-05, 9.999999999998899e-05, 0.006112137963982245, 0.001913866529192676, 9.999999999998899e-05, 0.0721598724221425, 0.04801434853171327, 0.07470480445595662, 0.06292511922369248, 0.008678680209152523, 0.021087530927263676, 0.10065167026518562, 0.08200394192711224, 0.08377814843326181, 0.10585754636769051, 0.021803156263451084, 0.03491640008872454, 0.1304004881619012, 0.049591938451754136, 0.049294904017929686, 0.06389544075801601, 0.09509977971555816, 0.061125368133404634, 0.03703104239935706, 0.03463607604162877, 0.06485315020992077, 0.09971909924370903, 0.13682540580358493, 0.14810623824526115, 0.14802444335365872, 0.16722477106844413, 0.06669065371926719, 0.4486578441272513, 0.38976797541041874, 0.4292320455875671, 0.4337582210224328, 0.45348875813055844, 0.41342858273862204, 0.44043015821474096, 0.4729494105134828, 0.45129543179079545, 0.09528729588941132, 0.08582950639361386, 0.10377501589361893, 0.11108449323130776, 0.1083029192866446, 0.07926878548360894, 0.12194068660925717, 0.08488943181946473, 0.08492290592143037, 0.1560238484087917, 0.19491778651692437, 0.17206112480855518, 0.1930745340818697, 0.2283807370584402, 0.15150029733231096, 0.1629463076083313, 0.12902238383437048, 0.21065327320777993, 0.2966885779175388, 0.22220495211253422, 0.3391260818504621, 0.30783544534080354, 0.2954362641169792, 0.2934616872801218, 0.32119747867396886, 0.3457598745561028, 0.359731546699287, 0.22138135746861776, 0.1790320755692939, 0.18820703560822094, 0.22355080244135783, 0.18271250417054863, 0.21722291618921152, 0.1838233710510011, 0.20363010786507163, 0.20808721109686934, 0.19519800385792185, 0.19139099406913773, 0.19834479320329634, 0.20962680415935897, 0.19258761452784956, 0.19927647164349538, 0.20208766525892607, 0.18708169318373313, 0.18715346941674793, 0.21339250415693434, 0.29355425888589914, 0.1908070962321028, 0.17769899888724028, 0.1896633629241301, 0.20778516032314398, 0.19586193146780984, 0.18803485295820688, 0.1967023307333886, 0.6568687090523437, 0.164910386619888, 0.15300137603526365, 0.5137441495616333, 0.6637295428442894, 0.1920967445322005, 0.17923995860347075, 0.15708190118782184, 0.2071651586485712, 0.32165546483432683, 0.20674496244867047, 0.16537260121275454, 0.18960026354514092, 0.5154212262118874, 0.1537698590523936, 0.20417085692207082, 0.20556298590910937, 0.20606271582408597, 0.1735725163484131, 0.1812715559684589, 0.18044092452727856, 0.18969483317200853, 0.18606062770104603, 0.20141280500052483, 0.18471733595483664, 0.191332058418881, 0.18907325169819467, 0.07405193600112503, 0.08081219479395152, 0.07185049235659202, 0.07494167078127334, 0.06903656781803069, 0.07699296544675105, 0.07974275423646626, 0.07087507006023896, 0.07363484737863235]}, "mutation_prompt": null}
{"id": "60e40f3c-0c58-4277-863e-777c4a048b74", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Maintain population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.4  # Slightly higher final inertia for stability\n        self.cognitive_coeff = 1.8  # Slightly reduced for balance\n        self.social_coeff = 1.8  # Balanced social coefficient\n        self.quantum_coeff = 0.6  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi / 2)  # Cosine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with dynamic neighborhood learning and enhanced quantum leaps for robust exploration and convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.86809843180453, 0.8656865911426441, 0.8520359754768346, 0.8689424779516427, 0.8833534924019595, 0.8801421218086176, 0.8721560948385834, 0.8634062411407808, 0.8470759917238162, 0.6731760713842743, 0.6984099073015564, 9.999999999998899e-05, 0.7153748986695032, 0.7382878408244324, 0.704009479561104, 0.5904943076564743, 0.6955089531526448, 0.4651001105784881, 0.1382893192137934, 0.14700397866728565, 0.12913293972348638, 0.1759303304669133, 0.17303176482832094, 0.5365713493906714, 0.16645677476221077, 0.1457322522928609, 0.5586144074084555, 0.3642476444045266, 0.138225955628012, 0.12650718919554016, 0.12338912672246294, 0.1337548907142766, 0.13646208448779928, 0.15772718046087408, 0.17574233200011224, 0.1089760639902797, 0.9814142243321458, 0.992311977478297, 0.9834889655451481, 0.9750066404543468, 0.9781706588561505, 0.9750789789320502, 0.988583733314754, 0.9863141471271968, 0.9782154418328087, 0.6065880869571294, 0.5967720386430975, 0.4942958589358364, 0.426691750200218, 0.5168566427423578, 0.4270911099261455, 0.5119784501385705, 0.5421179169945152, 0.6327876731591711, 0.20270133011854563, 0.8401556746546058, 0.22254750946681712, 0.3003245377072742, 0.19211790276791485, 0.19490579599263935, 0.22849995088368447, 0.40518433213993954, 0.39140263433541655, 0.20026783760443456, 0.18350798856932238, 0.2190955350090832, 0.1119177074752512, 0.17937402852203488, 0.12911412062741434, 0.31718776706386764, 0.16015889974530306, 0.19979350355828707, 0.2145706236443129, 0.22560095911706168, 0.2199530543268292, 0.21202861034561304, 0.2263695433373203, 0.18773008744115327, 0.3183954462954178, 0.21064225867144148, 0.23079774984096735, 9.999999999998899e-05, 0.033481396564341015, 9.999999999998899e-05, 0.024729183314617487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016565281902716222, 0.10469164517640106, 0.04534986570119326, 0.06225893865981302, 0.0732222375592606, 0.03382105791684953, 0.0359239804842133, 0.06194958746066259, 0.0453821655842892, 0.11447296859435407, 0.1191794744787672, 0.034320659298624934, 0.20341857903206606, 0.07515691146040704, 0.07623823293753595, 0.07525890200605101, 0.09869738523629368, 0.16830281627970767, 0.07231146258022858, 0.0723203898865975, 0.16126183813471884, 0.15926107511735277, 0.04363855826957408, 0.18988333137116464, 0.1352023143551, 0.11649772579811601, 0.1460226538284869, 0.08335173385367689, 0.6147295648379401, 0.5651061686144145, 0.5157825383736048, 0.513713077675898, 0.5434666760963826, 0.550371676094936, 0.5627308026588336, 0.5654446278449188, 0.5276343978066933, 0.09159643084439795, 0.12814970568640716, 0.08929832856829256, 0.11517643742676431, 0.16343642858358887, 0.13796100842287595, 0.11383376492074004, 0.13107137567848937, 0.09977711382141896, 0.26252269491531866, 0.20614921875537906, 0.24251614212904804, 0.28616406073200606, 0.3215841927926255, 0.15960649467868537, 0.3345583518300329, 0.21353380892362472, 0.2676044822474519, 0.41574256171845214, 0.3213472496655988, 0.3474289350965245, 0.28094723098789953, 0.20758026658125894, 0.3307691144834287, 0.2363110534074273, 0.4100078612789384, 0.3025865709952452, 0.24760102008799634, 0.2352775712102676, 0.3074835799791821, 0.2317531087487883, 0.15785821262332178, 0.33806687381452105, 0.21490611536991477, 0.32371200531321986, 0.2603237857821705, 0.24290709494357832, 0.19115754564583953, 0.1941943518530671, 0.21313331592185236, 0.19064356023472195, 0.527737971065595, 0.2382319403689599, 0.24894221106001446, 0.22437678580611387, 0.2392285288953977, 0.5884940169709203, 0.3942985110577699, 0.2394561942454273, 0.22018875592073672, 0.19888324487025544, 0.21929039715436627, 0.2272152477409236, 0.6241699070880998, 0.9221889268189425, 0.12689168130862438, 0.15336743451992574, 0.17303540289206243, 0.20116093222745546, 0.19990929863511597, 0.1421147804612758, 0.1694519036612706, 0.21355146013657822, 0.4928310132342645, 0.2134533254307388, 0.1496960205625334, 0.41788563625481556, 0.1682306963337742, 0.20731421866532596, 0.1049392372847382, 0.1051179114684404, 0.5611177739082233, 0.19086889504407778, 0.22595933326916207, 0.200978461179119, 0.21095816062868844, 0.1900637808819079, 0.19841867777942057, 0.19024252017227972, 0.17800754969531718, 0.18072025186600527, 0.12666379560630125, 0.1373089791204215, 0.09765569439316313, 0.08546667493689442, 0.08080541052732138, 0.09020828994915886, 0.10762034059557513, 0.09946373738746606, 0.09759787122430719]}, "mutation_prompt": null}
{"id": "97af4daa-fb26-44cd-a0ec-25df0fa4f5a7", "solution": "import numpy as np\n\nclass QuantumEnhancedSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 5)  # Slightly reduced population size for efficiency\n        self.inertia_weight_init = 0.8  # Increased initial inertia for exploration\n        self.inertia_weight_final = 0.3  # Lower final inertia for convergence\n        self.cognitive_coeff = 2.0  # Increased cognitive component for personal exploration\n        self.social_coeff = 1.5  # Reduced social coefficient to balance exploration\n        self.quantum_coeff = 0.7  # Enhanced quantum behavior for exploration\n        self.mutation_rate = 0.1  # Introduced mutation rate for diversity\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))  # Start with zero velocities\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init + (self.inertia_weight_final - self.inertia_weight_init) * (1 - np.exp(-3 * phase))  # Exponential decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            if np.random.rand() < self.mutation_rate:\n                mutation_matrix = np.random.normal(0, 1, (self.population_size, self.dim))\n                particles += mutation_matrix\n                particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-1, 1, (self.population_size, self.dim))  # Adjust quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n\n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumEnhancedSwarmOptimizer", "description": "Quantum-Enhanced Swarm Optimization with adaptive inertia and dynamic mutation for improved exploration-exploitation balance.", "configspace": "", "generation": 98, "fitness": 0.2279996188196425, "feedback": "The algorithm QuantumEnhancedSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.5866091094086344, 0.42396103477945124, 0.5475954219174191, 0.6262366080188224, 0.4389648214560462, 0.5701036269155625, 0.5845017076587278, 0.43268315552606773, 0.5846270217793028, 0.09887239888105137, 0.03319561663798232, 0.09989434178643897, 0.19723208355687494, 0.022835083073058038, 0.17966681275954233, 0.03234631000429167, 0.037402776804662974, 0.08431250163754977, 0.12644669664899788, 0.1112651947130715, 0.1333769654056306, 0.10547189162473625, 0.10520559950097397, 0.11410940531127567, 0.13553458447669253, 0.0971465343598058, 0.15934597098884828, 0.10235414668050069, 0.0901959707094866, 0.08232703116972784, 0.11700659819475878, 0.09071209805597413, 0.1019047705741265, 0.11724165757419092, 0.08820851770344962, 0.13283883371473426, 0.9845332899802707, 0.9903487069921133, 0.9817224026295516, 0.969166480366077, 0.9792548164782828, 0.967602204404267, 0.9845700559028611, 0.9819850610842307, 0.9808154542998486, 0.3542917636974261, 0.2557346056932355, 0.32932794536357435, 0.2737293121610961, 0.24062621878428414, 0.324265223429246, 0.2794223957046884, 0.23698940089008247, 0.3160197513923869, 0.5872741873197858, 0.2061740690237821, 0.2870852674790827, 0.5520777072179085, 0.20946539416308818, 0.1912220347068827, 0.5656625039302032, 0.2339418714757463, 0.2887344154113083, 0.1483817450104632, 0.1261785214293608, 0.14227743945679483, 0.14907768135865684, 0.11682799727351212, 0.08577482055176677, 0.13866796951302496, 0.13310834913907021, 0.14994101691618233, 0.1095376725259899, 0.12058015316105497, 0.16034037267235712, 0.15053227663209146, 0.13609602748422645, 0.1430016387836749, 0.11637308361890586, 0.10847023836806113, 0.1316786913894823, 9.999999999998899e-05, 0.002350927711219586, 9.999999999998899e-05, 0.020219483671503058, 0.00041370685454023004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05857056122177584, 0.08799418790456581, 0.06102087843168125, 0.06765023167195772, 0.05988142121403084, 0.02704857660618598, 0.06178473498204007, 0.08063221737682014, 0.08496611920600627, 0.11223727654490245, 0.01812353315459203, 0.0009605895271793674, 0.028389042810290976, 0.038570948124383, 9.999999999998899e-05, 0.04827614235085165, 0.0640109073915337, 0.0004820945467305382, 0.05678154334301577, 0.11948402730364793, 0.03701937440231484, 0.1286856790168276, 0.08658646868321662, 0.0928803949335748, 0.11331098547858653, 0.06449904527523109, 0.05078737711081449, 0.10500027439265947, 0.41805033671423264, 0.39138181748196177, 0.43407074761581466, 0.4265195630933636, 0.3774896450241575, 0.4176894695561931, 0.4209058943526862, 0.38725356021495516, 0.4261423389022482, 0.10239781264124381, 0.10229721202864261, 0.11734656758018813, 0.10335244600726456, 0.08355311736753723, 0.10247229559649917, 0.12121443666361398, 0.07726345571085536, 0.11499397071765871, 0.2816222073828317, 0.18165475034600032, 0.22609989390930363, 0.21507590446406744, 0.20275081085622415, 0.19400356844210231, 0.3211363187287084, 0.19780853993896852, 0.1756975331316929, 0.32210672063146517, 0.2847144514161595, 0.3151953886679415, 0.28540552466553404, 0.26311568286510856, 0.2784138701562542, 0.2858902200096646, 0.29848938662776336, 0.3307490731426833, 0.20727173157979728, 0.2244925451945533, 0.25388242589506904, 0.1636715955759751, 0.18951936705734906, 0.21494182292112507, 0.22677650708779262, 0.22964755469549114, 0.2327900830594969, 0.22362365187840794, 0.17044796082062297, 0.21254080051948687, 0.18524191496461762, 0.19727255048131098, 0.18383690233254713, 0.2051758999553014, 0.19461169391473143, 0.23166638913919846, 0.22777766809791256, 0.19322929431799662, 0.19239963802587312, 0.1768880262004925, 0.17746571659609167, 0.19706533889114985, 0.18373358788470218, 0.19578177603541425, 0.1922752671751986, 0.7050607832169296, 0.16753987597577724, 0.15356530284757375, 0.7236378128737363, 0.38263188952978866, 0.19579535033821505, 0.14175263843030372, 0.5879278351369912, 0.7258330413142188, 0.3269856091608804, 0.20923140690422015, 0.36408826143014494, 0.20592364124181806, 0.1957882985036754, 0.16072312924099896, 0.1045801638101127, 0.17953869636114395, 0.2057910954830714, 0.20173187640574108, 0.18871445778538365, 0.18755176042558996, 0.18241129630078, 0.19133611401965023, 0.1819352374106853, 0.17439782694478434, 0.19292943738440194, 0.20301805892229885, 0.09561236444480259, 0.08025656880905174, 0.08318494468722382, 0.08042780445193198, 0.0782213443300549, 0.09296256615946008, 0.07684640915884633, 0.07624496442393758, 0.08554767171212929]}, "mutation_prompt": null}
{"id": "6dadd1ce-ddc7-469a-9a61-060ca09037cc", "solution": "import numpy as np\n\nclass QuantumAdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(40, dim * 6)  # Maintain population for diversity\n        self.inertia_weight_init = 0.7\n        self.inertia_weight_final = 0.4  # Slightly higher final inertia for stability\n        self.cognitive_coeff = 1.8  # Slightly reduced for balance\n        self.social_coeff = 1.8  # Balanced social coefficient\n        self.quantum_coeff = 0.6  # Enhanced quantum behavior\n        self.eval_count = 0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        self.eval_count += self.population_size\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        while self.eval_count < self.budget:\n            phase = self.eval_count / self.budget\n            w = self.inertia_weight_init - (self.inertia_weight_init - self.inertia_weight_final) * np.cos(phase * np.pi / 2)  # Cosine inertia decay\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - particles) +\n                          self.social_coeff * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in particles])\n            self.eval_count += self.population_size\n\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[global_best_index]\n                global_best_position = personal_best_positions[global_best_index]\n\n            if np.random.rand() < self.quantum_coeff:\n                quantum_shift = np.random.uniform(-2, 2, (self.population_size, self.dim))  # Larger quantum leaps\n                quantum_particles = particles + quantum_shift\n                quantum_particles = np.clip(quantum_particles, self.lower_bound, self.upper_bound)\n                \n                for i in range(self.population_size):\n                    if self.eval_count >= self.budget:\n                        break\n                    q_p = quantum_particles[i]\n                    quantum_score = func(q_p)\n                    self.eval_count += 1\n                    if quantum_score < personal_best_scores[i]:\n                        personal_best_positions[i] = q_p\n                        personal_best_scores[i] = quantum_score\n                        if quantum_score < global_best_score:\n                            global_best_score = quantum_score\n                            global_best_position = q_p\n\n        return global_best_position", "name": "QuantumAdaptiveSwarmOptimizer", "description": "Quantum-Adaptive Swarm Optimization with dynamic neighborhood learning and enhanced quantum leaps for robust exploration and convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c9ac5cd4-70c0-49a8-9216-dafa783f2d48", "metadata": {"aucs": [0.86809843180453, 0.8656865911426441, 0.8520359754768346, 0.8689424779516427, 0.8833534924019595, 0.8801421218086176, 0.8721560948385834, 0.8634062411407808, 0.8470759917238162, 0.6731760713842743, 0.6984099073015564, 9.999999999998899e-05, 0.7153748986695032, 0.7382878408244324, 0.704009479561104, 0.5904943076564743, 0.6955089531526448, 0.4651001105784881, 0.1382893192137934, 0.14700397866728565, 0.12913293972348638, 0.1759303304669133, 0.17303176482832094, 0.5365713493906714, 0.16645677476221077, 0.1457322522928609, 0.5586144074084555, 0.3642476444045266, 0.138225955628012, 0.12650718919554016, 0.12338912672246294, 0.1337548907142766, 0.13646208448779928, 0.15772718046087408, 0.17574233200011224, 0.1089760639902797, 0.9814142243321458, 0.992311977478297, 0.9834889655451481, 0.9750066404543468, 0.9781706588561505, 0.9750789789320502, 0.988583733314754, 0.9863141471271968, 0.9782154418328087, 0.6065880869571294, 0.5967720386430975, 0.4942958589358364, 0.426691750200218, 0.5168566427423578, 0.4270911099261455, 0.5119784501385705, 0.5421179169945152, 0.6327876731591711, 0.20270133011854563, 0.8401556746546058, 0.22254750946681712, 0.3003245377072742, 0.19211790276791485, 0.19490579599263935, 0.22849995088368447, 0.40518433213993954, 0.39140263433541655, 0.20026783760443456, 0.18350798856932238, 0.2190955350090832, 0.1119177074752512, 0.17937402852203488, 0.12911412062741434, 0.31718776706386764, 0.16015889974530306, 0.19979350355828707, 0.2145706236443129, 0.22560095911706168, 0.2199530543268292, 0.21202861034561304, 0.2263695433373203, 0.18773008744115327, 0.3183954462954178, 0.21064225867144148, 0.23079774984096735, 9.999999999998899e-05, 0.033481396564341015, 9.999999999998899e-05, 0.024729183314617487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016565281902716222, 0.10469164517640106, 0.04534986570119326, 0.06225893865981302, 0.0732222375592606, 0.03382105791684953, 0.0359239804842133, 0.06194958746066259, 0.0453821655842892, 0.11447296859435407, 0.1191794744787672, 0.034320659298624934, 0.20341857903206606, 0.07515691146040704, 0.07623823293753595, 0.07525890200605101, 0.09869738523629368, 0.16830281627970767, 0.07231146258022858, 0.0723203898865975, 0.16126183813471884, 0.15926107511735277, 0.04363855826957408, 0.18988333137116464, 0.1352023143551, 0.11649772579811601, 0.1460226538284869, 0.08335173385367689, 0.6147295648379401, 0.5651061686144145, 0.5157825383736048, 0.513713077675898, 0.5434666760963826, 0.550371676094936, 0.5627308026588336, 0.5654446278449188, 0.5276343978066933, 0.09159643084439795, 0.12814970568640716, 0.08929832856829256, 0.11517643742676431, 0.16343642858358887, 0.13796100842287595, 0.11383376492074004, 0.13107137567848937, 0.09977711382141896, 0.26252269491531866, 0.20614921875537906, 0.24251614212904804, 0.28616406073200606, 0.3215841927926255, 0.15960649467868537, 0.3345583518300329, 0.21353380892362472, 0.2676044822474519, 0.41574256171845214, 0.3213472496655988, 0.3474289350965245, 0.28094723098789953, 0.20758026658125894, 0.3307691144834287, 0.2363110534074273, 0.4100078612789384, 0.3025865709952452, 0.24760102008799634, 0.2352775712102676, 0.3074835799791821, 0.2317531087487883, 0.15785821262332178, 0.33806687381452105, 0.21490611536991477, 0.32371200531321986, 0.2603237857821705, 0.24290709494357832, 0.19115754564583953, 0.1941943518530671, 0.21313331592185236, 0.19064356023472195, 0.527737971065595, 0.2382319403689599, 0.24894221106001446, 0.22437678580611387, 0.2392285288953977, 0.5884940169709203, 0.3942985110577699, 0.2394561942454273, 0.22018875592073672, 0.19888324487025544, 0.21929039715436627, 0.2272152477409236, 0.6241699070880998, 0.9221889268189425, 0.12689168130862438, 0.15336743451992574, 0.17303540289206243, 0.20116093222745546, 0.19990929863511597, 0.1421147804612758, 0.1694519036612706, 0.21355146013657822, 0.4928310132342645, 0.2134533254307388, 0.1496960205625334, 0.41788563625481556, 0.1682306963337742, 0.20731421866532596, 0.1049392372847382, 0.1051179114684404, 0.5611177739082233, 0.19086889504407778, 0.22595933326916207, 0.200978461179119, 0.21095816062868844, 0.1900637808819079, 0.19841867777942057, 0.19024252017227972, 0.17800754969531718, 0.18072025186600527, 0.12666379560630125, 0.1373089791204215, 0.09765569439316313, 0.08546667493689442, 0.08080541052732138, 0.09020828994915886, 0.10762034059557513, 0.09946373738746606, 0.09759787122430719]}, "mutation_prompt": null}
