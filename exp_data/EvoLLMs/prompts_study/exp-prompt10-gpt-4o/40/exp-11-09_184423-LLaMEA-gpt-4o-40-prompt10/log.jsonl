{"id": "baf60491-deac-41f8-b95f-ba3f365c6455", "solution": "import numpy as np\n\nclass AQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 100\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5  # Quantum potential influence factor\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            cognitive_component = self.c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Quantum behavior simulation with dynamic potential adjustment\n            quantum_jump = self.phi * np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n            new_position = self.position + self.velocity + quantum_jump\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "AQPSO", "description": "Adaptive Quantum-influenced Particle Swarm Optimization (AQPSO) using dynamic control of exploration and exploitation based on quantum behavior.", "configspace": "", "generation": 0, "fitness": 0.15939532627811617, "feedback": "The algorithm AQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.27114029245360527, 0.29523233095658763, 0.25683380080741414, 0.26784887161172377, 0.289479098868185, 0.2909413737170973, 0.2908098181558848, 0.28167847843629334, 0.2714583512560732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07856567514286672, 0.0736530170235048, 0.07461770755548436, 0.07510602411693146, 0.09115295921543876, 0.07382083359824743, 0.0771168884286344, 0.07774838533541095, 0.06465873928284671, 0.05503226234186076, 0.05622316274187811, 0.05716254252145103, 0.05417392580939684, 0.05628589470254197, 0.05807714559308319, 0.06829988115457275, 0.0739013716443303, 0.06116120774303124, 0.9792638746225749, 0.9824377227105532, 0.9731839893290084, 0.9644974825381722, 0.9801584723057634, 0.9725665560496441, 0.9816460297990115, 0.9794221726568177, 0.9804248816261676, 0.1495322489201253, 0.14017188147020498, 0.13267049048428958, 0.12805521850720414, 0.1491420522697703, 0.14389407737818205, 0.15154813964704827, 0.1543852142100215, 0.14905987271756915, 0.1764778913499333, 0.1934586902708686, 0.155561747835409, 0.19626971001674287, 0.18900170933299887, 0.18119861995963749, 0.17218725769202226, 0.17319608953908283, 0.22044624909681432, 0.06941799080025612, 0.06255699751918564, 0.05676728066682868, 0.0781154780705754, 0.06437044391691216, 0.08890727972557322, 0.06446488379263082, 0.030731363410749002, 0.07109332684957503, 0.06817447611882999, 0.05457846728256188, 0.09106468213501284, 0.06990500795320354, 0.07886405233361238, 0.07633126582966254, 0.0676977553169108, 0.069368309331721, 0.05804494228426971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020947193554215482, 0.019906712289501916, 0.052699947531832714, 0.06658308134012769, 0.07338992547889933, 0.02360708058484684, 0.03552739105713787, 0.10296638062558028, 0.018588336275815687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003024859892618248, 0.014067859528274718, 0.003885002986421804, 0.01944542693242801, 0.04144798894644719, 0.01761962773922021, 0.041460259398438226, 0.02996518749320387, 0.02555819673244586, 0.26512871629804613, 0.2699311014286524, 0.27311890497200253, 0.2677767933937052, 0.25894828015958093, 0.2725522137220291, 0.2833272028673015, 0.2653184907532097, 0.27687645250528115, 0.07059141725906448, 0.07699232773919906, 0.07964346745108264, 0.06566323057275536, 0.07024562496879916, 0.09328637318662036, 0.07349534808726788, 0.1080667064554447, 0.0795647972514425, 0.15440449333273187, 0.1688333448386915, 0.1524170976168403, 0.13771230675657753, 0.15423096269069192, 0.15376448577741153, 0.14764156023614106, 0.15957906235257924, 0.14451515076712185, 0.20735209590593084, 0.22061456852898742, 0.20835011026659955, 0.20674751712535977, 0.2086829889116516, 0.21669780974034158, 0.24429905452186162, 0.22673644203313137, 0.2008292552677713, 0.1467153562926442, 0.1179461914287474, 0.16016506938959496, 0.1417501128509464, 0.1667906316138298, 0.14371991042406784, 0.13369378641702845, 0.15566225931630595, 0.12359314659047727, 0.2030291476090499, 0.1839848066016221, 0.18470143680319484, 0.1697801019286671, 0.20185431433289946, 0.18011157131961986, 0.16444682374053632, 0.2145018189430391, 0.1756572257712452, 0.17193529314320044, 0.163994891801029, 0.18362589612287017, 0.16951166007904594, 0.17075930469667677, 0.16367695302846097, 0.16247699624459677, 0.1615838340005663, 0.16523870836630927, 0.1805631921430011, 0.3032540859229437, 0.36904907709061296, 0.15860172217117108, 0.17956587276182567, 0.162060638097125, 0.16174541316884028, 0.1547664799004288, 0.23491070578964068, 0.2357633776460507, 0.1678790926601298, 0.20941776587032823, 0.2705153581822777, 0.19401676417738167, 0.2559950961992271, 0.1633115837319823, 0.19594920817987227, 0.2976798109144533, 0.1762149333341636, 0.1765448731060527, 0.1768930954406338, 0.20487581520519915, 0.18649185585112216, 0.1825722773691627, 0.18158735363442724, 0.183854257995274, 0.17761261408405082, 0.06996244542471408, 0.059025242827287716, 0.058464728211464534, 0.07301267050436167, 0.06268370904940823, 0.08205487580468651, 0.07653567138560191, 0.07279855926604795, 0.06243440409842094]}, "mutation_prompt": null}
{"id": "8a384cd3-b129-495d-ac62-276137c71410", "solution": "import numpy as np\n\nclass AQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 100\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5  # Quantum potential influence factor\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            cognitive_component = self.c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Quantum behavior simulation with dynamic potential adjustment\n            quantum_jump = self.phi * np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n            new_position = self.position + self.velocity + quantum_jump\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "AQPSO", "description": "Adaptive Quantum-influenced Particle Swarm Optimization (AQPSO) using dynamic control of exploration and exploitation based on quantum behavior.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baf60491-deac-41f8-b95f-ba3f365c6455", "metadata": {"aucs": [0.27114029245360527, 0.29523233095658763, 0.25683380080741414, 0.26784887161172377, 0.289479098868185, 0.2909413737170973, 0.2908098181558848, 0.28167847843629334, 0.2714583512560732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07856567514286672, 0.0736530170235048, 0.07461770755548436, 0.07510602411693146, 0.09115295921543876, 0.07382083359824743, 0.0771168884286344, 0.07774838533541095, 0.06465873928284671, 0.05503226234186076, 0.05622316274187811, 0.05716254252145103, 0.05417392580939684, 0.05628589470254197, 0.05807714559308319, 0.06829988115457275, 0.0739013716443303, 0.06116120774303124, 0.9792638746225749, 0.9824377227105532, 0.9731839893290084, 0.9644974825381722, 0.9801584723057634, 0.9725665560496441, 0.9816460297990115, 0.9794221726568177, 0.9804248816261676, 0.1495322489201253, 0.14017188147020498, 0.13267049048428958, 0.12805521850720414, 0.1491420522697703, 0.14389407737818205, 0.15154813964704827, 0.1543852142100215, 0.14905987271756915, 0.1764778913499333, 0.1934586902708686, 0.155561747835409, 0.19626971001674287, 0.18900170933299887, 0.18119861995963749, 0.17218725769202226, 0.17319608953908283, 0.22044624909681432, 0.06941799080025612, 0.06255699751918564, 0.05676728066682868, 0.0781154780705754, 0.06437044391691216, 0.08890727972557322, 0.06446488379263082, 0.030731363410749002, 0.07109332684957503, 0.06817447611882999, 0.05457846728256188, 0.09106468213501284, 0.06990500795320354, 0.07886405233361238, 0.07633126582966254, 0.0676977553169108, 0.069368309331721, 0.05804494228426971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020947193554215482, 0.019906712289501916, 0.052699947531832714, 0.06658308134012769, 0.07338992547889933, 0.02360708058484684, 0.03552739105713787, 0.10296638062558028, 0.018588336275815687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003024859892618248, 0.014067859528274718, 0.003885002986421804, 0.01944542693242801, 0.04144798894644719, 0.01761962773922021, 0.041460259398438226, 0.02996518749320387, 0.02555819673244586, 0.26512871629804613, 0.2699311014286524, 0.27311890497200253, 0.2677767933937052, 0.25894828015958093, 0.2725522137220291, 0.2833272028673015, 0.2653184907532097, 0.27687645250528115, 0.07059141725906448, 0.07699232773919906, 0.07964346745108264, 0.06566323057275536, 0.07024562496879916, 0.09328637318662036, 0.07349534808726788, 0.1080667064554447, 0.0795647972514425, 0.15440449333273187, 0.1688333448386915, 0.1524170976168403, 0.13771230675657753, 0.15423096269069192, 0.15376448577741153, 0.14764156023614106, 0.15957906235257924, 0.14451515076712185, 0.20735209590593084, 0.22061456852898742, 0.20835011026659955, 0.20674751712535977, 0.2086829889116516, 0.21669780974034158, 0.24429905452186162, 0.22673644203313137, 0.2008292552677713, 0.1467153562926442, 0.1179461914287474, 0.16016506938959496, 0.1417501128509464, 0.1667906316138298, 0.14371991042406784, 0.13369378641702845, 0.15566225931630595, 0.12359314659047727, 0.2030291476090499, 0.1839848066016221, 0.18470143680319484, 0.1697801019286671, 0.20185431433289946, 0.18011157131961986, 0.16444682374053632, 0.2145018189430391, 0.1756572257712452, 0.17193529314320044, 0.163994891801029, 0.18362589612287017, 0.16951166007904594, 0.17075930469667677, 0.16367695302846097, 0.16247699624459677, 0.1615838340005663, 0.16523870836630927, 0.1805631921430011, 0.3032540859229437, 0.36904907709061296, 0.15860172217117108, 0.17956587276182567, 0.162060638097125, 0.16174541316884028, 0.1547664799004288, 0.23491070578964068, 0.2357633776460507, 0.1678790926601298, 0.20941776587032823, 0.2705153581822777, 0.19401676417738167, 0.2559950961992271, 0.1633115837319823, 0.19594920817987227, 0.2976798109144533, 0.1762149333341636, 0.1765448731060527, 0.1768930954406338, 0.20487581520519915, 0.18649185585112216, 0.1825722773691627, 0.18158735363442724, 0.183854257995274, 0.17761261408405082, 0.06996244542471408, 0.059025242827287716, 0.058464728211464534, 0.07301267050436167, 0.06268370904940823, 0.08205487580468651, 0.07653567138560191, 0.07279855926604795, 0.06243440409842094]}, "mutation_prompt": null}
{"id": "1de34fdb-16d4-4f10-8d70-17fb86e4d28f", "solution": "import numpy as np\n\nclass AQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 100\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5  # Quantum potential influence factor\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            cognitive_component = self.c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Quantum behavior simulation with dynamic potential adjustment\n            quantum_jump = self.phi * np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n            new_position = self.position + self.velocity + quantum_jump\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "AQPSO", "description": "Adaptive Quantum-influenced Particle Swarm Optimization (AQPSO) using dynamic control of exploration and exploitation based on quantum behavior.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baf60491-deac-41f8-b95f-ba3f365c6455", "metadata": {"aucs": [0.27114029245360527, 0.29523233095658763, 0.25683380080741414, 0.26784887161172377, 0.289479098868185, 0.2909413737170973, 0.2908098181558848, 0.28167847843629334, 0.2714583512560732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07856567514286672, 0.0736530170235048, 0.07461770755548436, 0.07510602411693146, 0.09115295921543876, 0.07382083359824743, 0.0771168884286344, 0.07774838533541095, 0.06465873928284671, 0.05503226234186076, 0.05622316274187811, 0.05716254252145103, 0.05417392580939684, 0.05628589470254197, 0.05807714559308319, 0.06829988115457275, 0.0739013716443303, 0.06116120774303124, 0.9792638746225749, 0.9824377227105532, 0.9731839893290084, 0.9644974825381722, 0.9801584723057634, 0.9725665560496441, 0.9816460297990115, 0.9794221726568177, 0.9804248816261676, 0.1495322489201253, 0.14017188147020498, 0.13267049048428958, 0.12805521850720414, 0.1491420522697703, 0.14389407737818205, 0.15154813964704827, 0.1543852142100215, 0.14905987271756915, 0.1764778913499333, 0.1934586902708686, 0.155561747835409, 0.19626971001674287, 0.18900170933299887, 0.18119861995963749, 0.17218725769202226, 0.17319608953908283, 0.22044624909681432, 0.06941799080025612, 0.06255699751918564, 0.05676728066682868, 0.0781154780705754, 0.06437044391691216, 0.08890727972557322, 0.06446488379263082, 0.030731363410749002, 0.07109332684957503, 0.06817447611882999, 0.05457846728256188, 0.09106468213501284, 0.06990500795320354, 0.07886405233361238, 0.07633126582966254, 0.0676977553169108, 0.069368309331721, 0.05804494228426971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020947193554215482, 0.019906712289501916, 0.052699947531832714, 0.06658308134012769, 0.07338992547889933, 0.02360708058484684, 0.03552739105713787, 0.10296638062558028, 0.018588336275815687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003024859892618248, 0.014067859528274718, 0.003885002986421804, 0.01944542693242801, 0.04144798894644719, 0.01761962773922021, 0.041460259398438226, 0.02996518749320387, 0.02555819673244586, 0.26512871629804613, 0.2699311014286524, 0.27311890497200253, 0.2677767933937052, 0.25894828015958093, 0.2725522137220291, 0.2833272028673015, 0.2653184907532097, 0.27687645250528115, 0.07059141725906448, 0.07699232773919906, 0.07964346745108264, 0.06566323057275536, 0.07024562496879916, 0.09328637318662036, 0.07349534808726788, 0.1080667064554447, 0.0795647972514425, 0.15440449333273187, 0.1688333448386915, 0.1524170976168403, 0.13771230675657753, 0.15423096269069192, 0.15376448577741153, 0.14764156023614106, 0.15957906235257924, 0.14451515076712185, 0.20735209590593084, 0.22061456852898742, 0.20835011026659955, 0.20674751712535977, 0.2086829889116516, 0.21669780974034158, 0.24429905452186162, 0.22673644203313137, 0.2008292552677713, 0.1467153562926442, 0.1179461914287474, 0.16016506938959496, 0.1417501128509464, 0.1667906316138298, 0.14371991042406784, 0.13369378641702845, 0.15566225931630595, 0.12359314659047727, 0.2030291476090499, 0.1839848066016221, 0.18470143680319484, 0.1697801019286671, 0.20185431433289946, 0.18011157131961986, 0.16444682374053632, 0.2145018189430391, 0.1756572257712452, 0.17193529314320044, 0.163994891801029, 0.18362589612287017, 0.16951166007904594, 0.17075930469667677, 0.16367695302846097, 0.16247699624459677, 0.1615838340005663, 0.16523870836630927, 0.1805631921430011, 0.3032540859229437, 0.36904907709061296, 0.15860172217117108, 0.17956587276182567, 0.162060638097125, 0.16174541316884028, 0.1547664799004288, 0.23491070578964068, 0.2357633776460507, 0.1678790926601298, 0.20941776587032823, 0.2705153581822777, 0.19401676417738167, 0.2559950961992271, 0.1633115837319823, 0.19594920817987227, 0.2976798109144533, 0.1762149333341636, 0.1765448731060527, 0.1768930954406338, 0.20487581520519915, 0.18649185585112216, 0.1825722773691627, 0.18158735363442724, 0.183854257995274, 0.17761261408405082, 0.06996244542471408, 0.059025242827287716, 0.058464728211464534, 0.07301267050436167, 0.06268370904940823, 0.08205487580468651, 0.07653567138560191, 0.07279855926604795, 0.06243440409842094]}, "mutation_prompt": null}
{"id": "4dd1771e-1644-401d-b8cf-46df938bcea0", "solution": "import numpy as np\n\nclass AQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 100\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5  # Quantum potential influence factor\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            cognitive_component = self.c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Quantum behavior simulation with dynamic potential adjustment\n            quantum_jump = self.phi * np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n            new_position = self.position + self.velocity + quantum_jump\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "AQPSO", "description": "Adaptive Quantum-influenced Particle Swarm Optimization (AQPSO) using dynamic control of exploration and exploitation based on quantum behavior.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baf60491-deac-41f8-b95f-ba3f365c6455", "metadata": {"aucs": [0.27114029245360527, 0.29523233095658763, 0.25683380080741414, 0.26784887161172377, 0.289479098868185, 0.2909413737170973, 0.2908098181558848, 0.28167847843629334, 0.2714583512560732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07856567514286672, 0.0736530170235048, 0.07461770755548436, 0.07510602411693146, 0.09115295921543876, 0.07382083359824743, 0.0771168884286344, 0.07774838533541095, 0.06465873928284671, 0.05503226234186076, 0.05622316274187811, 0.05716254252145103, 0.05417392580939684, 0.05628589470254197, 0.05807714559308319, 0.06829988115457275, 0.0739013716443303, 0.06116120774303124, 0.9792638746225749, 0.9824377227105532, 0.9731839893290084, 0.9644974825381722, 0.9801584723057634, 0.9725665560496441, 0.9816460297990115, 0.9794221726568177, 0.9804248816261676, 0.1495322489201253, 0.14017188147020498, 0.13267049048428958, 0.12805521850720414, 0.1491420522697703, 0.14389407737818205, 0.15154813964704827, 0.1543852142100215, 0.14905987271756915, 0.1764778913499333, 0.1934586902708686, 0.155561747835409, 0.19626971001674287, 0.18900170933299887, 0.18119861995963749, 0.17218725769202226, 0.17319608953908283, 0.22044624909681432, 0.06941799080025612, 0.06255699751918564, 0.05676728066682868, 0.0781154780705754, 0.06437044391691216, 0.08890727972557322, 0.06446488379263082, 0.030731363410749002, 0.07109332684957503, 0.06817447611882999, 0.05457846728256188, 0.09106468213501284, 0.06990500795320354, 0.07886405233361238, 0.07633126582966254, 0.0676977553169108, 0.069368309331721, 0.05804494228426971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020947193554215482, 0.019906712289501916, 0.052699947531832714, 0.06658308134012769, 0.07338992547889933, 0.02360708058484684, 0.03552739105713787, 0.10296638062558028, 0.018588336275815687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003024859892618248, 0.014067859528274718, 0.003885002986421804, 0.01944542693242801, 0.04144798894644719, 0.01761962773922021, 0.041460259398438226, 0.02996518749320387, 0.02555819673244586, 0.26512871629804613, 0.2699311014286524, 0.27311890497200253, 0.2677767933937052, 0.25894828015958093, 0.2725522137220291, 0.2833272028673015, 0.2653184907532097, 0.27687645250528115, 0.07059141725906448, 0.07699232773919906, 0.07964346745108264, 0.06566323057275536, 0.07024562496879916, 0.09328637318662036, 0.07349534808726788, 0.1080667064554447, 0.0795647972514425, 0.15440449333273187, 0.1688333448386915, 0.1524170976168403, 0.13771230675657753, 0.15423096269069192, 0.15376448577741153, 0.14764156023614106, 0.15957906235257924, 0.14451515076712185, 0.20735209590593084, 0.22061456852898742, 0.20835011026659955, 0.20674751712535977, 0.2086829889116516, 0.21669780974034158, 0.24429905452186162, 0.22673644203313137, 0.2008292552677713, 0.1467153562926442, 0.1179461914287474, 0.16016506938959496, 0.1417501128509464, 0.1667906316138298, 0.14371991042406784, 0.13369378641702845, 0.15566225931630595, 0.12359314659047727, 0.2030291476090499, 0.1839848066016221, 0.18470143680319484, 0.1697801019286671, 0.20185431433289946, 0.18011157131961986, 0.16444682374053632, 0.2145018189430391, 0.1756572257712452, 0.17193529314320044, 0.163994891801029, 0.18362589612287017, 0.16951166007904594, 0.17075930469667677, 0.16367695302846097, 0.16247699624459677, 0.1615838340005663, 0.16523870836630927, 0.1805631921430011, 0.3032540859229437, 0.36904907709061296, 0.15860172217117108, 0.17956587276182567, 0.162060638097125, 0.16174541316884028, 0.1547664799004288, 0.23491070578964068, 0.2357633776460507, 0.1678790926601298, 0.20941776587032823, 0.2705153581822777, 0.19401676417738167, 0.2559950961992271, 0.1633115837319823, 0.19594920817987227, 0.2976798109144533, 0.1762149333341636, 0.1765448731060527, 0.1768930954406338, 0.20487581520519915, 0.18649185585112216, 0.1825722773691627, 0.18158735363442724, 0.183854257995274, 0.17761261408405082, 0.06996244542471408, 0.059025242827287716, 0.058464728211464534, 0.07301267050436167, 0.06268370904940823, 0.08205487580468651, 0.07653567138560191, 0.07279855926604795, 0.06243440409842094]}, "mutation_prompt": null}
{"id": "05ea67c7-7f8c-4de0-ba8e-7857c449aa0c", "solution": "import numpy as np\n\nclass AQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 100\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5  # Quantum potential influence factor\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            cognitive_component = self.c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Quantum behavior simulation with dynamic potential adjustment\n            quantum_jump = self.phi * np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n            new_position = self.position + self.velocity + quantum_jump\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "AQPSO", "description": "Adaptive Quantum-influenced Particle Swarm Optimization (AQPSO) using dynamic control of exploration and exploitation based on quantum behavior.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baf60491-deac-41f8-b95f-ba3f365c6455", "metadata": {"aucs": [0.27114029245360527, 0.29523233095658763, 0.25683380080741414, 0.26784887161172377, 0.289479098868185, 0.2909413737170973, 0.2908098181558848, 0.28167847843629334, 0.2714583512560732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07856567514286672, 0.0736530170235048, 0.07461770755548436, 0.07510602411693146, 0.09115295921543876, 0.07382083359824743, 0.0771168884286344, 0.07774838533541095, 0.06465873928284671, 0.05503226234186076, 0.05622316274187811, 0.05716254252145103, 0.05417392580939684, 0.05628589470254197, 0.05807714559308319, 0.06829988115457275, 0.0739013716443303, 0.06116120774303124, 0.9792638746225749, 0.9824377227105532, 0.9731839893290084, 0.9644974825381722, 0.9801584723057634, 0.9725665560496441, 0.9816460297990115, 0.9794221726568177, 0.9804248816261676, 0.1495322489201253, 0.14017188147020498, 0.13267049048428958, 0.12805521850720414, 0.1491420522697703, 0.14389407737818205, 0.15154813964704827, 0.1543852142100215, 0.14905987271756915, 0.1764778913499333, 0.1934586902708686, 0.155561747835409, 0.19626971001674287, 0.18900170933299887, 0.18119861995963749, 0.17218725769202226, 0.17319608953908283, 0.22044624909681432, 0.06941799080025612, 0.06255699751918564, 0.05676728066682868, 0.0781154780705754, 0.06437044391691216, 0.08890727972557322, 0.06446488379263082, 0.030731363410749002, 0.07109332684957503, 0.06817447611882999, 0.05457846728256188, 0.09106468213501284, 0.06990500795320354, 0.07886405233361238, 0.07633126582966254, 0.0676977553169108, 0.069368309331721, 0.05804494228426971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020947193554215482, 0.019906712289501916, 0.052699947531832714, 0.06658308134012769, 0.07338992547889933, 0.02360708058484684, 0.03552739105713787, 0.10296638062558028, 0.018588336275815687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003024859892618248, 0.014067859528274718, 0.003885002986421804, 0.01944542693242801, 0.04144798894644719, 0.01761962773922021, 0.041460259398438226, 0.02996518749320387, 0.02555819673244586, 0.26512871629804613, 0.2699311014286524, 0.27311890497200253, 0.2677767933937052, 0.25894828015958093, 0.2725522137220291, 0.2833272028673015, 0.2653184907532097, 0.27687645250528115, 0.07059141725906448, 0.07699232773919906, 0.07964346745108264, 0.06566323057275536, 0.07024562496879916, 0.09328637318662036, 0.07349534808726788, 0.1080667064554447, 0.0795647972514425, 0.15440449333273187, 0.1688333448386915, 0.1524170976168403, 0.13771230675657753, 0.15423096269069192, 0.15376448577741153, 0.14764156023614106, 0.15957906235257924, 0.14451515076712185, 0.20735209590593084, 0.22061456852898742, 0.20835011026659955, 0.20674751712535977, 0.2086829889116516, 0.21669780974034158, 0.24429905452186162, 0.22673644203313137, 0.2008292552677713, 0.1467153562926442, 0.1179461914287474, 0.16016506938959496, 0.1417501128509464, 0.1667906316138298, 0.14371991042406784, 0.13369378641702845, 0.15566225931630595, 0.12359314659047727, 0.2030291476090499, 0.1839848066016221, 0.18470143680319484, 0.1697801019286671, 0.20185431433289946, 0.18011157131961986, 0.16444682374053632, 0.2145018189430391, 0.1756572257712452, 0.17193529314320044, 0.163994891801029, 0.18362589612287017, 0.16951166007904594, 0.17075930469667677, 0.16367695302846097, 0.16247699624459677, 0.1615838340005663, 0.16523870836630927, 0.1805631921430011, 0.3032540859229437, 0.36904907709061296, 0.15860172217117108, 0.17956587276182567, 0.162060638097125, 0.16174541316884028, 0.1547664799004288, 0.23491070578964068, 0.2357633776460507, 0.1678790926601298, 0.20941776587032823, 0.2705153581822777, 0.19401676417738167, 0.2559950961992271, 0.1633115837319823, 0.19594920817987227, 0.2976798109144533, 0.1762149333341636, 0.1765448731060527, 0.1768930954406338, 0.20487581520519915, 0.18649185585112216, 0.1825722773691627, 0.18158735363442724, 0.183854257995274, 0.17761261408405082, 0.06996244542471408, 0.059025242827287716, 0.058464728211464534, 0.07301267050436167, 0.06268370904940823, 0.08205487580468651, 0.07653567138560191, 0.07279855926604795, 0.06243440409842094]}, "mutation_prompt": null}
{"id": "46979449-d84f-4548-b496-e732a6ed78cc", "solution": "import numpy as np\n\nclass AQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 100\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5  # Quantum potential influence factor\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            cognitive_component = self.c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Quantum behavior simulation with dynamic potential adjustment\n            quantum_jump = self.phi * np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n            new_position = self.position + self.velocity + quantum_jump\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "AQPSO", "description": "Adaptive Quantum-influenced Particle Swarm Optimization (AQPSO) using dynamic control of exploration and exploitation based on quantum behavior.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baf60491-deac-41f8-b95f-ba3f365c6455", "metadata": {"aucs": [0.27114029245360527, 0.29523233095658763, 0.25683380080741414, 0.26784887161172377, 0.289479098868185, 0.2909413737170973, 0.2908098181558848, 0.28167847843629334, 0.2714583512560732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07856567514286672, 0.0736530170235048, 0.07461770755548436, 0.07510602411693146, 0.09115295921543876, 0.07382083359824743, 0.0771168884286344, 0.07774838533541095, 0.06465873928284671, 0.05503226234186076, 0.05622316274187811, 0.05716254252145103, 0.05417392580939684, 0.05628589470254197, 0.05807714559308319, 0.06829988115457275, 0.0739013716443303, 0.06116120774303124, 0.9792638746225749, 0.9824377227105532, 0.9731839893290084, 0.9644974825381722, 0.9801584723057634, 0.9725665560496441, 0.9816460297990115, 0.9794221726568177, 0.9804248816261676, 0.1495322489201253, 0.14017188147020498, 0.13267049048428958, 0.12805521850720414, 0.1491420522697703, 0.14389407737818205, 0.15154813964704827, 0.1543852142100215, 0.14905987271756915, 0.1764778913499333, 0.1934586902708686, 0.155561747835409, 0.19626971001674287, 0.18900170933299887, 0.18119861995963749, 0.17218725769202226, 0.17319608953908283, 0.22044624909681432, 0.06941799080025612, 0.06255699751918564, 0.05676728066682868, 0.0781154780705754, 0.06437044391691216, 0.08890727972557322, 0.06446488379263082, 0.030731363410749002, 0.07109332684957503, 0.06817447611882999, 0.05457846728256188, 0.09106468213501284, 0.06990500795320354, 0.07886405233361238, 0.07633126582966254, 0.0676977553169108, 0.069368309331721, 0.05804494228426971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020947193554215482, 0.019906712289501916, 0.052699947531832714, 0.06658308134012769, 0.07338992547889933, 0.02360708058484684, 0.03552739105713787, 0.10296638062558028, 0.018588336275815687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003024859892618248, 0.014067859528274718, 0.003885002986421804, 0.01944542693242801, 0.04144798894644719, 0.01761962773922021, 0.041460259398438226, 0.02996518749320387, 0.02555819673244586, 0.26512871629804613, 0.2699311014286524, 0.27311890497200253, 0.2677767933937052, 0.25894828015958093, 0.2725522137220291, 0.2833272028673015, 0.2653184907532097, 0.27687645250528115, 0.07059141725906448, 0.07699232773919906, 0.07964346745108264, 0.06566323057275536, 0.07024562496879916, 0.09328637318662036, 0.07349534808726788, 0.1080667064554447, 0.0795647972514425, 0.15440449333273187, 0.1688333448386915, 0.1524170976168403, 0.13771230675657753, 0.15423096269069192, 0.15376448577741153, 0.14764156023614106, 0.15957906235257924, 0.14451515076712185, 0.20735209590593084, 0.22061456852898742, 0.20835011026659955, 0.20674751712535977, 0.2086829889116516, 0.21669780974034158, 0.24429905452186162, 0.22673644203313137, 0.2008292552677713, 0.1467153562926442, 0.1179461914287474, 0.16016506938959496, 0.1417501128509464, 0.1667906316138298, 0.14371991042406784, 0.13369378641702845, 0.15566225931630595, 0.12359314659047727, 0.2030291476090499, 0.1839848066016221, 0.18470143680319484, 0.1697801019286671, 0.20185431433289946, 0.18011157131961986, 0.16444682374053632, 0.2145018189430391, 0.1756572257712452, 0.17193529314320044, 0.163994891801029, 0.18362589612287017, 0.16951166007904594, 0.17075930469667677, 0.16367695302846097, 0.16247699624459677, 0.1615838340005663, 0.16523870836630927, 0.1805631921430011, 0.3032540859229437, 0.36904907709061296, 0.15860172217117108, 0.17956587276182567, 0.162060638097125, 0.16174541316884028, 0.1547664799004288, 0.23491070578964068, 0.2357633776460507, 0.1678790926601298, 0.20941776587032823, 0.2705153581822777, 0.19401676417738167, 0.2559950961992271, 0.1633115837319823, 0.19594920817987227, 0.2976798109144533, 0.1762149333341636, 0.1765448731060527, 0.1768930954406338, 0.20487581520519915, 0.18649185585112216, 0.1825722773691627, 0.18158735363442724, 0.183854257995274, 0.17761261408405082, 0.06996244542471408, 0.059025242827287716, 0.058464728211464534, 0.07301267050436167, 0.06268370904940823, 0.08205487580468651, 0.07653567138560191, 0.07279855926604795, 0.06243440409842094]}, "mutation_prompt": null}
{"id": "9d325e13-9b2e-415d-830b-029e5959c0f2", "solution": "import numpy as np\n\nclass AQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 100\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5  # Quantum potential influence factor\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            cognitive_component = self.c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Quantum behavior simulation with dynamic potential adjustment\n            quantum_jump = self.phi * np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n            new_position = self.position + self.velocity + quantum_jump\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "AQPSO", "description": "Adaptive Quantum-influenced Particle Swarm Optimization (AQPSO) using dynamic control of exploration and exploitation based on quantum behavior.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baf60491-deac-41f8-b95f-ba3f365c6455", "metadata": {"aucs": [0.27114029245360527, 0.29523233095658763, 0.25683380080741414, 0.26784887161172377, 0.289479098868185, 0.2909413737170973, 0.2908098181558848, 0.28167847843629334, 0.2714583512560732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07856567514286672, 0.0736530170235048, 0.07461770755548436, 0.07510602411693146, 0.09115295921543876, 0.07382083359824743, 0.0771168884286344, 0.07774838533541095, 0.06465873928284671, 0.05503226234186076, 0.05622316274187811, 0.05716254252145103, 0.05417392580939684, 0.05628589470254197, 0.05807714559308319, 0.06829988115457275, 0.0739013716443303, 0.06116120774303124, 0.9792638746225749, 0.9824377227105532, 0.9731839893290084, 0.9644974825381722, 0.9801584723057634, 0.9725665560496441, 0.9816460297990115, 0.9794221726568177, 0.9804248816261676, 0.1495322489201253, 0.14017188147020498, 0.13267049048428958, 0.12805521850720414, 0.1491420522697703, 0.14389407737818205, 0.15154813964704827, 0.1543852142100215, 0.14905987271756915, 0.1764778913499333, 0.1934586902708686, 0.155561747835409, 0.19626971001674287, 0.18900170933299887, 0.18119861995963749, 0.17218725769202226, 0.17319608953908283, 0.22044624909681432, 0.06941799080025612, 0.06255699751918564, 0.05676728066682868, 0.0781154780705754, 0.06437044391691216, 0.08890727972557322, 0.06446488379263082, 0.030731363410749002, 0.07109332684957503, 0.06817447611882999, 0.05457846728256188, 0.09106468213501284, 0.06990500795320354, 0.07886405233361238, 0.07633126582966254, 0.0676977553169108, 0.069368309331721, 0.05804494228426971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020947193554215482, 0.019906712289501916, 0.052699947531832714, 0.06658308134012769, 0.07338992547889933, 0.02360708058484684, 0.03552739105713787, 0.10296638062558028, 0.018588336275815687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003024859892618248, 0.014067859528274718, 0.003885002986421804, 0.01944542693242801, 0.04144798894644719, 0.01761962773922021, 0.041460259398438226, 0.02996518749320387, 0.02555819673244586, 0.26512871629804613, 0.2699311014286524, 0.27311890497200253, 0.2677767933937052, 0.25894828015958093, 0.2725522137220291, 0.2833272028673015, 0.2653184907532097, 0.27687645250528115, 0.07059141725906448, 0.07699232773919906, 0.07964346745108264, 0.06566323057275536, 0.07024562496879916, 0.09328637318662036, 0.07349534808726788, 0.1080667064554447, 0.0795647972514425, 0.15440449333273187, 0.1688333448386915, 0.1524170976168403, 0.13771230675657753, 0.15423096269069192, 0.15376448577741153, 0.14764156023614106, 0.15957906235257924, 0.14451515076712185, 0.20735209590593084, 0.22061456852898742, 0.20835011026659955, 0.20674751712535977, 0.2086829889116516, 0.21669780974034158, 0.24429905452186162, 0.22673644203313137, 0.2008292552677713, 0.1467153562926442, 0.1179461914287474, 0.16016506938959496, 0.1417501128509464, 0.1667906316138298, 0.14371991042406784, 0.13369378641702845, 0.15566225931630595, 0.12359314659047727, 0.2030291476090499, 0.1839848066016221, 0.18470143680319484, 0.1697801019286671, 0.20185431433289946, 0.18011157131961986, 0.16444682374053632, 0.2145018189430391, 0.1756572257712452, 0.17193529314320044, 0.163994891801029, 0.18362589612287017, 0.16951166007904594, 0.17075930469667677, 0.16367695302846097, 0.16247699624459677, 0.1615838340005663, 0.16523870836630927, 0.1805631921430011, 0.3032540859229437, 0.36904907709061296, 0.15860172217117108, 0.17956587276182567, 0.162060638097125, 0.16174541316884028, 0.1547664799004288, 0.23491070578964068, 0.2357633776460507, 0.1678790926601298, 0.20941776587032823, 0.2705153581822777, 0.19401676417738167, 0.2559950961992271, 0.1633115837319823, 0.19594920817987227, 0.2976798109144533, 0.1762149333341636, 0.1765448731060527, 0.1768930954406338, 0.20487581520519915, 0.18649185585112216, 0.1825722773691627, 0.18158735363442724, 0.183854257995274, 0.17761261408405082, 0.06996244542471408, 0.059025242827287716, 0.058464728211464534, 0.07301267050436167, 0.06268370904940823, 0.08205487580468651, 0.07653567138560191, 0.07279855926604795, 0.06243440409842094]}, "mutation_prompt": null}
{"id": "5e953e16-9d63-4e9b-87b0-feb4b05d68f1", "solution": "import numpy as np\n\nclass AQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 100\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5  # Quantum potential influence factor\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            cognitive_component = self.c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Quantum behavior simulation with dynamic potential adjustment\n            quantum_jump = self.phi * np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n            new_position = self.position + self.velocity + quantum_jump\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "AQPSO", "description": "Adaptive Quantum-influenced Particle Swarm Optimization (AQPSO) using dynamic control of exploration and exploitation based on quantum behavior.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baf60491-deac-41f8-b95f-ba3f365c6455", "metadata": {"aucs": [0.27114029245360527, 0.29523233095658763, 0.25683380080741414, 0.26784887161172377, 0.289479098868185, 0.2909413737170973, 0.2908098181558848, 0.28167847843629334, 0.2714583512560732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07856567514286672, 0.0736530170235048, 0.07461770755548436, 0.07510602411693146, 0.09115295921543876, 0.07382083359824743, 0.0771168884286344, 0.07774838533541095, 0.06465873928284671, 0.05503226234186076, 0.05622316274187811, 0.05716254252145103, 0.05417392580939684, 0.05628589470254197, 0.05807714559308319, 0.06829988115457275, 0.0739013716443303, 0.06116120774303124, 0.9792638746225749, 0.9824377227105532, 0.9731839893290084, 0.9644974825381722, 0.9801584723057634, 0.9725665560496441, 0.9816460297990115, 0.9794221726568177, 0.9804248816261676, 0.1495322489201253, 0.14017188147020498, 0.13267049048428958, 0.12805521850720414, 0.1491420522697703, 0.14389407737818205, 0.15154813964704827, 0.1543852142100215, 0.14905987271756915, 0.1764778913499333, 0.1934586902708686, 0.155561747835409, 0.19626971001674287, 0.18900170933299887, 0.18119861995963749, 0.17218725769202226, 0.17319608953908283, 0.22044624909681432, 0.06941799080025612, 0.06255699751918564, 0.05676728066682868, 0.0781154780705754, 0.06437044391691216, 0.08890727972557322, 0.06446488379263082, 0.030731363410749002, 0.07109332684957503, 0.06817447611882999, 0.05457846728256188, 0.09106468213501284, 0.06990500795320354, 0.07886405233361238, 0.07633126582966254, 0.0676977553169108, 0.069368309331721, 0.05804494228426971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020947193554215482, 0.019906712289501916, 0.052699947531832714, 0.06658308134012769, 0.07338992547889933, 0.02360708058484684, 0.03552739105713787, 0.10296638062558028, 0.018588336275815687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003024859892618248, 0.014067859528274718, 0.003885002986421804, 0.01944542693242801, 0.04144798894644719, 0.01761962773922021, 0.041460259398438226, 0.02996518749320387, 0.02555819673244586, 0.26512871629804613, 0.2699311014286524, 0.27311890497200253, 0.2677767933937052, 0.25894828015958093, 0.2725522137220291, 0.2833272028673015, 0.2653184907532097, 0.27687645250528115, 0.07059141725906448, 0.07699232773919906, 0.07964346745108264, 0.06566323057275536, 0.07024562496879916, 0.09328637318662036, 0.07349534808726788, 0.1080667064554447, 0.0795647972514425, 0.15440449333273187, 0.1688333448386915, 0.1524170976168403, 0.13771230675657753, 0.15423096269069192, 0.15376448577741153, 0.14764156023614106, 0.15957906235257924, 0.14451515076712185, 0.20735209590593084, 0.22061456852898742, 0.20835011026659955, 0.20674751712535977, 0.2086829889116516, 0.21669780974034158, 0.24429905452186162, 0.22673644203313137, 0.2008292552677713, 0.1467153562926442, 0.1179461914287474, 0.16016506938959496, 0.1417501128509464, 0.1667906316138298, 0.14371991042406784, 0.13369378641702845, 0.15566225931630595, 0.12359314659047727, 0.2030291476090499, 0.1839848066016221, 0.18470143680319484, 0.1697801019286671, 0.20185431433289946, 0.18011157131961986, 0.16444682374053632, 0.2145018189430391, 0.1756572257712452, 0.17193529314320044, 0.163994891801029, 0.18362589612287017, 0.16951166007904594, 0.17075930469667677, 0.16367695302846097, 0.16247699624459677, 0.1615838340005663, 0.16523870836630927, 0.1805631921430011, 0.3032540859229437, 0.36904907709061296, 0.15860172217117108, 0.17956587276182567, 0.162060638097125, 0.16174541316884028, 0.1547664799004288, 0.23491070578964068, 0.2357633776460507, 0.1678790926601298, 0.20941776587032823, 0.2705153581822777, 0.19401676417738167, 0.2559950961992271, 0.1633115837319823, 0.19594920817987227, 0.2976798109144533, 0.1762149333341636, 0.1765448731060527, 0.1768930954406338, 0.20487581520519915, 0.18649185585112216, 0.1825722773691627, 0.18158735363442724, 0.183854257995274, 0.17761261408405082, 0.06996244542471408, 0.059025242827287716, 0.058464728211464534, 0.07301267050436167, 0.06268370904940823, 0.08205487580468651, 0.07653567138560191, 0.07279855926604795, 0.06243440409842094]}, "mutation_prompt": null}
{"id": "f3217828-6c6e-4eed-8a43-fa69bd6e1c35", "solution": "import numpy as np\n\nclass AQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 100\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5  # Quantum potential influence factor\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            cognitive_component = self.c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Quantum behavior simulation with dynamic potential adjustment\n            quantum_jump = self.phi * np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n            new_position = self.position + self.velocity + quantum_jump\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "AQPSO", "description": "Adaptive Quantum-influenced Particle Swarm Optimization (AQPSO) using dynamic control of exploration and exploitation based on quantum behavior.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baf60491-deac-41f8-b95f-ba3f365c6455", "metadata": {"aucs": [0.27114029245360527, 0.29523233095658763, 0.25683380080741414, 0.26784887161172377, 0.289479098868185, 0.2909413737170973, 0.2908098181558848, 0.28167847843629334, 0.2714583512560732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07856567514286672, 0.0736530170235048, 0.07461770755548436, 0.07510602411693146, 0.09115295921543876, 0.07382083359824743, 0.0771168884286344, 0.07774838533541095, 0.06465873928284671, 0.05503226234186076, 0.05622316274187811, 0.05716254252145103, 0.05417392580939684, 0.05628589470254197, 0.05807714559308319, 0.06829988115457275, 0.0739013716443303, 0.06116120774303124, 0.9792638746225749, 0.9824377227105532, 0.9731839893290084, 0.9644974825381722, 0.9801584723057634, 0.9725665560496441, 0.9816460297990115, 0.9794221726568177, 0.9804248816261676, 0.1495322489201253, 0.14017188147020498, 0.13267049048428958, 0.12805521850720414, 0.1491420522697703, 0.14389407737818205, 0.15154813964704827, 0.1543852142100215, 0.14905987271756915, 0.1764778913499333, 0.1934586902708686, 0.155561747835409, 0.19626971001674287, 0.18900170933299887, 0.18119861995963749, 0.17218725769202226, 0.17319608953908283, 0.22044624909681432, 0.06941799080025612, 0.06255699751918564, 0.05676728066682868, 0.0781154780705754, 0.06437044391691216, 0.08890727972557322, 0.06446488379263082, 0.030731363410749002, 0.07109332684957503, 0.06817447611882999, 0.05457846728256188, 0.09106468213501284, 0.06990500795320354, 0.07886405233361238, 0.07633126582966254, 0.0676977553169108, 0.069368309331721, 0.05804494228426971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020947193554215482, 0.019906712289501916, 0.052699947531832714, 0.06658308134012769, 0.07338992547889933, 0.02360708058484684, 0.03552739105713787, 0.10296638062558028, 0.018588336275815687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003024859892618248, 0.014067859528274718, 0.003885002986421804, 0.01944542693242801, 0.04144798894644719, 0.01761962773922021, 0.041460259398438226, 0.02996518749320387, 0.02555819673244586, 0.26512871629804613, 0.2699311014286524, 0.27311890497200253, 0.2677767933937052, 0.25894828015958093, 0.2725522137220291, 0.2833272028673015, 0.2653184907532097, 0.27687645250528115, 0.07059141725906448, 0.07699232773919906, 0.07964346745108264, 0.06566323057275536, 0.07024562496879916, 0.09328637318662036, 0.07349534808726788, 0.1080667064554447, 0.0795647972514425, 0.15440449333273187, 0.1688333448386915, 0.1524170976168403, 0.13771230675657753, 0.15423096269069192, 0.15376448577741153, 0.14764156023614106, 0.15957906235257924, 0.14451515076712185, 0.20735209590593084, 0.22061456852898742, 0.20835011026659955, 0.20674751712535977, 0.2086829889116516, 0.21669780974034158, 0.24429905452186162, 0.22673644203313137, 0.2008292552677713, 0.1467153562926442, 0.1179461914287474, 0.16016506938959496, 0.1417501128509464, 0.1667906316138298, 0.14371991042406784, 0.13369378641702845, 0.15566225931630595, 0.12359314659047727, 0.2030291476090499, 0.1839848066016221, 0.18470143680319484, 0.1697801019286671, 0.20185431433289946, 0.18011157131961986, 0.16444682374053632, 0.2145018189430391, 0.1756572257712452, 0.17193529314320044, 0.163994891801029, 0.18362589612287017, 0.16951166007904594, 0.17075930469667677, 0.16367695302846097, 0.16247699624459677, 0.1615838340005663, 0.16523870836630927, 0.1805631921430011, 0.3032540859229437, 0.36904907709061296, 0.15860172217117108, 0.17956587276182567, 0.162060638097125, 0.16174541316884028, 0.1547664799004288, 0.23491070578964068, 0.2357633776460507, 0.1678790926601298, 0.20941776587032823, 0.2705153581822777, 0.19401676417738167, 0.2559950961992271, 0.1633115837319823, 0.19594920817987227, 0.2976798109144533, 0.1762149333341636, 0.1765448731060527, 0.1768930954406338, 0.20487581520519915, 0.18649185585112216, 0.1825722773691627, 0.18158735363442724, 0.183854257995274, 0.17761261408405082, 0.06996244542471408, 0.059025242827287716, 0.058464728211464534, 0.07301267050436167, 0.06268370904940823, 0.08205487580468651, 0.07653567138560191, 0.07279855926604795, 0.06243440409842094]}, "mutation_prompt": null}
{"id": "353e5696-41a4-4120-93e7-34784953f674", "solution": "import numpy as np\n\nclass AQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 100\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5  # Quantum potential influence factor\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            cognitive_component = self.c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Quantum behavior simulation with dynamic potential adjustment\n            quantum_jump = self.phi * np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n            new_position = self.position + self.velocity + quantum_jump\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "AQPSO", "description": "Adaptive Quantum-influenced Particle Swarm Optimization (AQPSO) using dynamic control of exploration and exploitation based on quantum behavior.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baf60491-deac-41f8-b95f-ba3f365c6455", "metadata": {"aucs": [0.27114029245360527, 0.29523233095658763, 0.25683380080741414, 0.26784887161172377, 0.289479098868185, 0.2909413737170973, 0.2908098181558848, 0.28167847843629334, 0.2714583512560732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07856567514286672, 0.0736530170235048, 0.07461770755548436, 0.07510602411693146, 0.09115295921543876, 0.07382083359824743, 0.0771168884286344, 0.07774838533541095, 0.06465873928284671, 0.05503226234186076, 0.05622316274187811, 0.05716254252145103, 0.05417392580939684, 0.05628589470254197, 0.05807714559308319, 0.06829988115457275, 0.0739013716443303, 0.06116120774303124, 0.9792638746225749, 0.9824377227105532, 0.9731839893290084, 0.9644974825381722, 0.9801584723057634, 0.9725665560496441, 0.9816460297990115, 0.9794221726568177, 0.9804248816261676, 0.1495322489201253, 0.14017188147020498, 0.13267049048428958, 0.12805521850720414, 0.1491420522697703, 0.14389407737818205, 0.15154813964704827, 0.1543852142100215, 0.14905987271756915, 0.1764778913499333, 0.1934586902708686, 0.155561747835409, 0.19626971001674287, 0.18900170933299887, 0.18119861995963749, 0.17218725769202226, 0.17319608953908283, 0.22044624909681432, 0.06941799080025612, 0.06255699751918564, 0.05676728066682868, 0.0781154780705754, 0.06437044391691216, 0.08890727972557322, 0.06446488379263082, 0.030731363410749002, 0.07109332684957503, 0.06817447611882999, 0.05457846728256188, 0.09106468213501284, 0.06990500795320354, 0.07886405233361238, 0.07633126582966254, 0.0676977553169108, 0.069368309331721, 0.05804494228426971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020947193554215482, 0.019906712289501916, 0.052699947531832714, 0.06658308134012769, 0.07338992547889933, 0.02360708058484684, 0.03552739105713787, 0.10296638062558028, 0.018588336275815687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003024859892618248, 0.014067859528274718, 0.003885002986421804, 0.01944542693242801, 0.04144798894644719, 0.01761962773922021, 0.041460259398438226, 0.02996518749320387, 0.02555819673244586, 0.26512871629804613, 0.2699311014286524, 0.27311890497200253, 0.2677767933937052, 0.25894828015958093, 0.2725522137220291, 0.2833272028673015, 0.2653184907532097, 0.27687645250528115, 0.07059141725906448, 0.07699232773919906, 0.07964346745108264, 0.06566323057275536, 0.07024562496879916, 0.09328637318662036, 0.07349534808726788, 0.1080667064554447, 0.0795647972514425, 0.15440449333273187, 0.1688333448386915, 0.1524170976168403, 0.13771230675657753, 0.15423096269069192, 0.15376448577741153, 0.14764156023614106, 0.15957906235257924, 0.14451515076712185, 0.20735209590593084, 0.22061456852898742, 0.20835011026659955, 0.20674751712535977, 0.2086829889116516, 0.21669780974034158, 0.24429905452186162, 0.22673644203313137, 0.2008292552677713, 0.1467153562926442, 0.1179461914287474, 0.16016506938959496, 0.1417501128509464, 0.1667906316138298, 0.14371991042406784, 0.13369378641702845, 0.15566225931630595, 0.12359314659047727, 0.2030291476090499, 0.1839848066016221, 0.18470143680319484, 0.1697801019286671, 0.20185431433289946, 0.18011157131961986, 0.16444682374053632, 0.2145018189430391, 0.1756572257712452, 0.17193529314320044, 0.163994891801029, 0.18362589612287017, 0.16951166007904594, 0.17075930469667677, 0.16367695302846097, 0.16247699624459677, 0.1615838340005663, 0.16523870836630927, 0.1805631921430011, 0.3032540859229437, 0.36904907709061296, 0.15860172217117108, 0.17956587276182567, 0.162060638097125, 0.16174541316884028, 0.1547664799004288, 0.23491070578964068, 0.2357633776460507, 0.1678790926601298, 0.20941776587032823, 0.2705153581822777, 0.19401676417738167, 0.2559950961992271, 0.1633115837319823, 0.19594920817987227, 0.2976798109144533, 0.1762149333341636, 0.1765448731060527, 0.1768930954406338, 0.20487581520519915, 0.18649185585112216, 0.1825722773691627, 0.18158735363442724, 0.183854257995274, 0.17761261408405082, 0.06996244542471408, 0.059025242827287716, 0.058464728211464534, 0.07301267050436167, 0.06268370904940823, 0.08205487580468651, 0.07653567138560191, 0.07279855926604795, 0.06243440409842094]}, "mutation_prompt": null}
{"id": "c743c466-54e9-445f-b9c4-94b17024d018", "solution": "import numpy as np\n\nclass AQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 100\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5  # Quantum potential influence factor\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            cognitive_component = self.c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Quantum behavior simulation with dynamic potential adjustment\n            quantum_jump = self.phi * np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n            new_position = self.position + self.velocity + quantum_jump\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "AQPSO", "description": "Adaptive Quantum-influenced Particle Swarm Optimization (AQPSO) using dynamic control of exploration and exploitation based on quantum behavior.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baf60491-deac-41f8-b95f-ba3f365c6455", "metadata": {"aucs": [0.27114029245360527, 0.29523233095658763, 0.25683380080741414, 0.26784887161172377, 0.289479098868185, 0.2909413737170973, 0.2908098181558848, 0.28167847843629334, 0.2714583512560732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07856567514286672, 0.0736530170235048, 0.07461770755548436, 0.07510602411693146, 0.09115295921543876, 0.07382083359824743, 0.0771168884286344, 0.07774838533541095, 0.06465873928284671, 0.05503226234186076, 0.05622316274187811, 0.05716254252145103, 0.05417392580939684, 0.05628589470254197, 0.05807714559308319, 0.06829988115457275, 0.0739013716443303, 0.06116120774303124, 0.9792638746225749, 0.9824377227105532, 0.9731839893290084, 0.9644974825381722, 0.9801584723057634, 0.9725665560496441, 0.9816460297990115, 0.9794221726568177, 0.9804248816261676, 0.1495322489201253, 0.14017188147020498, 0.13267049048428958, 0.12805521850720414, 0.1491420522697703, 0.14389407737818205, 0.15154813964704827, 0.1543852142100215, 0.14905987271756915, 0.1764778913499333, 0.1934586902708686, 0.155561747835409, 0.19626971001674287, 0.18900170933299887, 0.18119861995963749, 0.17218725769202226, 0.17319608953908283, 0.22044624909681432, 0.06941799080025612, 0.06255699751918564, 0.05676728066682868, 0.0781154780705754, 0.06437044391691216, 0.08890727972557322, 0.06446488379263082, 0.030731363410749002, 0.07109332684957503, 0.06817447611882999, 0.05457846728256188, 0.09106468213501284, 0.06990500795320354, 0.07886405233361238, 0.07633126582966254, 0.0676977553169108, 0.069368309331721, 0.05804494228426971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020947193554215482, 0.019906712289501916, 0.052699947531832714, 0.06658308134012769, 0.07338992547889933, 0.02360708058484684, 0.03552739105713787, 0.10296638062558028, 0.018588336275815687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003024859892618248, 0.014067859528274718, 0.003885002986421804, 0.01944542693242801, 0.04144798894644719, 0.01761962773922021, 0.041460259398438226, 0.02996518749320387, 0.02555819673244586, 0.26512871629804613, 0.2699311014286524, 0.27311890497200253, 0.2677767933937052, 0.25894828015958093, 0.2725522137220291, 0.2833272028673015, 0.2653184907532097, 0.27687645250528115, 0.07059141725906448, 0.07699232773919906, 0.07964346745108264, 0.06566323057275536, 0.07024562496879916, 0.09328637318662036, 0.07349534808726788, 0.1080667064554447, 0.0795647972514425, 0.15440449333273187, 0.1688333448386915, 0.1524170976168403, 0.13771230675657753, 0.15423096269069192, 0.15376448577741153, 0.14764156023614106, 0.15957906235257924, 0.14451515076712185, 0.20735209590593084, 0.22061456852898742, 0.20835011026659955, 0.20674751712535977, 0.2086829889116516, 0.21669780974034158, 0.24429905452186162, 0.22673644203313137, 0.2008292552677713, 0.1467153562926442, 0.1179461914287474, 0.16016506938959496, 0.1417501128509464, 0.1667906316138298, 0.14371991042406784, 0.13369378641702845, 0.15566225931630595, 0.12359314659047727, 0.2030291476090499, 0.1839848066016221, 0.18470143680319484, 0.1697801019286671, 0.20185431433289946, 0.18011157131961986, 0.16444682374053632, 0.2145018189430391, 0.1756572257712452, 0.17193529314320044, 0.163994891801029, 0.18362589612287017, 0.16951166007904594, 0.17075930469667677, 0.16367695302846097, 0.16247699624459677, 0.1615838340005663, 0.16523870836630927, 0.1805631921430011, 0.3032540859229437, 0.36904907709061296, 0.15860172217117108, 0.17956587276182567, 0.162060638097125, 0.16174541316884028, 0.1547664799004288, 0.23491070578964068, 0.2357633776460507, 0.1678790926601298, 0.20941776587032823, 0.2705153581822777, 0.19401676417738167, 0.2559950961992271, 0.1633115837319823, 0.19594920817987227, 0.2976798109144533, 0.1762149333341636, 0.1765448731060527, 0.1768930954406338, 0.20487581520519915, 0.18649185585112216, 0.1825722773691627, 0.18158735363442724, 0.183854257995274, 0.17761261408405082, 0.06996244542471408, 0.059025242827287716, 0.058464728211464534, 0.07301267050436167, 0.06268370904940823, 0.08205487580468651, 0.07653567138560191, 0.07279855926604795, 0.06243440409842094]}, "mutation_prompt": null}
{"id": "9357bdb9-de14-446e-a2e5-3a356cc2e68d", "solution": "import numpy as np\n\nclass ModifiedAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 100\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.99  # New adaptive learning rate decay\n        self.chaos_factor = 0.2  # Chaotic influence factor\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            # Adaptive learning rates\n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Chaos-enhanced exploration\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5)\n            new_position = self.position + self.velocity + chaos_component\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "ModifiedAQPSO", "description": "Modified AQPSO with adaptive learning rates and chaos-enhanced exploration to improve convergence speed.", "configspace": "", "generation": 11, "fitness": 0.19906838827050283, "feedback": "The algorithm ModifiedAQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "baf60491-deac-41f8-b95f-ba3f365c6455", "metadata": {"aucs": [0.391117538794039, 0.4100635256309221, 0.3828227343675863, 0.4067909801719698, 0.4117787561378441, 0.40378195160919694, 0.39109005592560886, 0.39903427533407254, 0.41398897784442923, 0.027717432434690048, 0.00851821859879942, 9.999999999998899e-05, 0.017868266092034735, 0.02391475516088981, 9.999999999998899e-05, 0.017978805284415644, 0.013640162688462243, 0.03664255427265084, 0.10623941448359586, 0.10108473406111285, 0.09069206998813972, 0.10363035010067911, 0.10963218645246176, 0.10160433308949834, 0.097181085087377, 0.09821543205596428, 0.12716262579906756, 0.10059349176489629, 0.08970700588372149, 0.09150914739464966, 0.10363839082077952, 0.0775558356989241, 0.09433000423428262, 0.0947943671839343, 0.09379510685630998, 0.09805840944165234, 0.9790730554474812, 0.9823873922333709, 0.9731154084593356, 0.9639501550686899, 0.9799674912926357, 0.9727831270129842, 0.9816593771901764, 0.9796564274779868, 0.9807639897973827, 0.2553519398838332, 0.25511671507849065, 0.23597992286709868, 0.2347782194451643, 0.24221715441040914, 0.23665602714916245, 0.2216739886106619, 0.24045889408715926, 0.24787215897062265, 0.3229615609320554, 0.17148106405191865, 0.16526244592341188, 0.2860383347538237, 0.19996900232884918, 0.1822231551911191, 0.18990565767897638, 0.30801048465526404, 0.5690196438619339, 0.1540215346672119, 0.13966850137993136, 0.1269762151256053, 0.09761707102756778, 0.12128789993631073, 0.14315291917023076, 0.12555528115926262, 0.11489871909094895, 0.13989894919348134, 0.1212347396771265, 0.1389582928158829, 0.13444088077228022, 0.12747963565605425, 0.13441240842032054, 0.10223853462558163, 0.13762767793191177, 0.13762726429965755, 0.1069922488108983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008806796809468165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05336446748342949, 0.03952209780234739, 0.07719155965338764, 0.04963525846365169, 0.08291205712627048, 0.00990270696025164, 0.12560508094837786, 0.051580509299287036, 0.008942288891664263, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09306605614908836, 0.06232641136156947, 0.08513152069587382, 0.0384866562709838, 0.08409867237342694, 0.047333205497868236, 0.05814611078302456, 0.04464384050845416, 0.06231535052889903, 0.377073951245781, 0.3644753866403404, 0.3746223674308562, 0.39512391892655074, 0.3792371729804941, 0.3752361173909122, 0.39827874259990725, 0.3647792787663099, 0.35737640230672185, 0.07104374170950412, 0.0719394647600704, 0.06267921319505909, 0.1017534967319329, 0.11811663215778423, 0.1068228405843149, 0.08817359408034786, 0.10358261702172045, 0.12273263716468896, 0.14676760581488357, 0.22294467343333135, 0.16360705821401555, 0.19848191537597326, 0.24992572010231728, 0.1920060417959908, 0.18052267321757498, 0.17076232816008652, 0.2167654703185512, 0.2722700524925519, 0.2578587497110849, 0.2461486889274992, 0.2684147362301166, 0.2809528239800049, 0.26138609305439675, 0.2515934304178218, 0.2885799352559192, 0.27255813941357865, 0.1538680985051586, 0.18851071445717793, 0.20262458578201825, 0.18989568028047266, 0.19941321231002884, 0.21733589831354494, 0.20001447650697224, 0.20402615607638286, 0.15106463635060696, 0.19085786275989525, 0.16842584156337348, 0.19781587444425486, 0.18140409834236415, 0.18729406181990904, 0.18599581323497205, 0.1914841029295209, 0.1769729712697523, 0.1884325086128057, 0.20220293239287546, 0.18078172138505, 0.19647840657289073, 0.19609547287390217, 0.22064295130740164, 0.19866168996789313, 0.19999679843691232, 0.18253437067743006, 0.1954727347581282, 0.12779181695317765, 0.46939885869044595, 0.5894217993462786, 0.15665735464503816, 0.1924511629445811, 0.16212852309142622, 0.19327226285836963, 0.16422658488321762, 0.1980092593389341, 0.476494328342171, 0.1681712892317091, 0.12183138107450708, 0.37327584381876755, 0.3769821967192699, 0.32408870182818605, 0.1658822905126084, 0.19560294135686285, 0.3716257753333785, 0.17263075735814015, 0.17888437210666086, 0.18827310874377634, 0.20555056770824998, 0.18513237286612705, 0.19091564553403884, 0.187620638132868, 0.17909274872750736, 0.17887752768919019, 0.07333670177475304, 0.07344459791698077, 0.07651895911959294, 0.08111714617373655, 0.0793728374040551, 0.09472241702703976, 0.07426782097501328, 0.07495161075224532, 0.07034708593677386]}, "mutation_prompt": null}
{"id": "e1f5177a-4ea3-41b0-aa77-e6ec68abaa52", "solution": "import numpy as np\n\nclass ModifiedAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 100\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.99  # New adaptive learning rate decay\n        self.chaos_factor = 0.2  # Chaotic influence factor\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            # Adaptive learning rates\n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Chaos-enhanced exploration\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5)\n            new_position = self.position + self.velocity + chaos_component\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "ModifiedAQPSO", "description": "Modified AQPSO with adaptive learning rates and chaos-enhanced exploration to improve convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9357bdb9-de14-446e-a2e5-3a356cc2e68d", "metadata": {"aucs": [0.391117538794039, 0.4100635256309221, 0.3828227343675863, 0.4067909801719698, 0.4117787561378441, 0.40378195160919694, 0.39109005592560886, 0.39903427533407254, 0.41398897784442923, 0.027717432434690048, 0.00851821859879942, 9.999999999998899e-05, 0.017868266092034735, 0.02391475516088981, 9.999999999998899e-05, 0.017978805284415644, 0.013640162688462243, 0.03664255427265084, 0.10623941448359586, 0.10108473406111285, 0.09069206998813972, 0.10363035010067911, 0.10963218645246176, 0.10160433308949834, 0.097181085087377, 0.09821543205596428, 0.12716262579906756, 0.10059349176489629, 0.08970700588372149, 0.09150914739464966, 0.10363839082077952, 0.0775558356989241, 0.09433000423428262, 0.0947943671839343, 0.09379510685630998, 0.09805840944165234, 0.9790730554474812, 0.9823873922333709, 0.9731154084593356, 0.9639501550686899, 0.9799674912926357, 0.9727831270129842, 0.9816593771901764, 0.9796564274779868, 0.9807639897973827, 0.2553519398838332, 0.25511671507849065, 0.23597992286709868, 0.2347782194451643, 0.24221715441040914, 0.23665602714916245, 0.2216739886106619, 0.24045889408715926, 0.24787215897062265, 0.3229615609320554, 0.17148106405191865, 0.16526244592341188, 0.2860383347538237, 0.19996900232884918, 0.1822231551911191, 0.18990565767897638, 0.30801048465526404, 0.5690196438619339, 0.1540215346672119, 0.13966850137993136, 0.1269762151256053, 0.09761707102756778, 0.12128789993631073, 0.14315291917023076, 0.12555528115926262, 0.11489871909094895, 0.13989894919348134, 0.1212347396771265, 0.1389582928158829, 0.13444088077228022, 0.12747963565605425, 0.13441240842032054, 0.10223853462558163, 0.13762767793191177, 0.13762726429965755, 0.1069922488108983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008806796809468165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05336446748342949, 0.03952209780234739, 0.07719155965338764, 0.04963525846365169, 0.08291205712627048, 0.00990270696025164, 0.12560508094837786, 0.051580509299287036, 0.008942288891664263, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09306605614908836, 0.06232641136156947, 0.08513152069587382, 0.0384866562709838, 0.08409867237342694, 0.047333205497868236, 0.05814611078302456, 0.04464384050845416, 0.06231535052889903, 0.377073951245781, 0.3644753866403404, 0.3746223674308562, 0.39512391892655074, 0.3792371729804941, 0.3752361173909122, 0.39827874259990725, 0.3647792787663099, 0.35737640230672185, 0.07104374170950412, 0.0719394647600704, 0.06267921319505909, 0.1017534967319329, 0.11811663215778423, 0.1068228405843149, 0.08817359408034786, 0.10358261702172045, 0.12273263716468896, 0.14676760581488357, 0.22294467343333135, 0.16360705821401555, 0.19848191537597326, 0.24992572010231728, 0.1920060417959908, 0.18052267321757498, 0.17076232816008652, 0.2167654703185512, 0.2722700524925519, 0.2578587497110849, 0.2461486889274992, 0.2684147362301166, 0.2809528239800049, 0.26138609305439675, 0.2515934304178218, 0.2885799352559192, 0.27255813941357865, 0.1538680985051586, 0.18851071445717793, 0.20262458578201825, 0.18989568028047266, 0.19941321231002884, 0.21733589831354494, 0.20001447650697224, 0.20402615607638286, 0.15106463635060696, 0.19085786275989525, 0.16842584156337348, 0.19781587444425486, 0.18140409834236415, 0.18729406181990904, 0.18599581323497205, 0.1914841029295209, 0.1769729712697523, 0.1884325086128057, 0.20220293239287546, 0.18078172138505, 0.19647840657289073, 0.19609547287390217, 0.22064295130740164, 0.19866168996789313, 0.19999679843691232, 0.18253437067743006, 0.1954727347581282, 0.12779181695317765, 0.46939885869044595, 0.5894217993462786, 0.15665735464503816, 0.1924511629445811, 0.16212852309142622, 0.19327226285836963, 0.16422658488321762, 0.1980092593389341, 0.476494328342171, 0.1681712892317091, 0.12183138107450708, 0.37327584381876755, 0.3769821967192699, 0.32408870182818605, 0.1658822905126084, 0.19560294135686285, 0.3716257753333785, 0.17263075735814015, 0.17888437210666086, 0.18827310874377634, 0.20555056770824998, 0.18513237286612705, 0.19091564553403884, 0.187620638132868, 0.17909274872750736, 0.17887752768919019, 0.07333670177475304, 0.07344459791698077, 0.07651895911959294, 0.08111714617373655, 0.0793728374040551, 0.09472241702703976, 0.07426782097501328, 0.07495161075224532, 0.07034708593677386]}, "mutation_prompt": null}
{"id": "83d0fc2d-592f-46d2-b781-b04dd894f6c7", "solution": "import numpy as np\n\nclass EnhancedAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_swarm_size = 100\n        self.swarm_size = self.initial_swarm_size\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.learning_rate_decay = 0.98  # Adjusted adaptive learning rate decay\n        self.chaos_factor = 0.2  # Chaotic influence factor\n        self.opposition_factor = 0.5  # Opposition factor for better exploration\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n\n            cognitive_component = self.c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n\n            # Chaos-enhanced exploration\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5)\n            new_position = self.position + self.velocity + chaos_component\n\n            # Opposition-based learning\n            opposition_position = 5.0 - new_position\n            opposition_fitness = np.array([func(pos) for pos in opposition_position])\n            evals += self.swarm_size\n\n            improved_mask = opposition_fitness < fitness_values\n            new_position[improved_mask] = opposition_position[improved_mask]\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n            \n            # Dynamic swarm size reduction\n            if evals > self.budget * 0.5:\n                self.swarm_size = int(self.initial_swarm_size * 0.5)\n                self.position = self.position[:self.swarm_size]\n                self.velocity = self.velocity[:self.swarm_size]\n                self.personal_best_position = self.personal_best_position[:self.swarm_size]\n                self.personal_best_value = self.personal_best_value[:self.swarm_size]\n            \n        return self.global_best_position, self.global_best_value", "name": "EnhancedAQPSO", "description": "Enhanced AQPSO with adaptive inertia weight, opposition-based learning, and dynamic swarm size reduction for improved convergence and exploration.", "configspace": "", "generation": 13, "fitness": 0.1779743661291302, "feedback": "The algorithm EnhancedAQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "9357bdb9-de14-446e-a2e5-3a356cc2e68d", "metadata": {"aucs": [0.3616492384812715, 0.3470467759822825, 0.3580289913663972, 0.3477905972158054, 0.3453568452670863, 0.34471279908842645, 0.3342307246878887, 0.3566397516066627, 0.35654636781738125, 0.009179837335469121, 0.01205949354771163, 0.007251338848065059, 0.008061457613483425, 0.004183623862446084, 9.999999999998899e-05, 0.015800090143607837, 0.015394316145698972, 0.027670334958499243, 0.07739239151267707, 0.08307683561633161, 0.08879548541626936, 0.08757337735355541, 0.07957970163060968, 0.07630076393743168, 0.12255575406126995, 0.10494086378796497, 0.1093108083482568, 0.07370343329103801, 0.08119295716468755, 0.08835083605321248, 0.09155744660998266, 0.08353664444075748, 0.07393034389598285, 0.07038958228636916, 0.07812703829694201, 0.07509306108193303, 0.9456049806429967, 0.9633264808049488, 0.9552336457750742, 0.9275131297689583, 0.9467521172325436, 0.9290445924241355, 0.961534974760155, 0.9560462907284134, 0.9469163432168732, 0.20743587647178507, 0.17042044666389644, 0.1965388749382485, 0.1788622025995834, 0.20229780341380232, 0.19945453626417042, 0.22306073851552277, 0.20481387028464293, 0.19917242821780545, 0.16928821825842766, 0.2188536469469996, 0.16578152225261455, 0.20930701130661855, 0.19787408260007933, 0.18184113188812312, 0.17116989189121778, 0.20042745371429327, 0.18140708106504932, 0.11918373253308823, 0.10041904147023473, 0.09987702615993133, 0.0708624944811419, 0.117461526090195, 0.12180643491213416, 0.11262140617653038, 0.0636429023075209, 0.11884378611798818, 0.09524800273599454, 0.12408392233806065, 0.10876737641444856, 0.10249683948163579, 0.08534694152167743, 0.09767772908153871, 0.11056834912172508, 0.10490553574095707, 0.11766110158197751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016079671095079906, 9.999999999998899e-05, 9.999999999998899e-05, 0.001538066702488683, 9.999999999998899e-05, 0.00029817948438681796, 0.03163366031382486, 0.048666015735302603, 0.033514659447642536, 0.03868563527842084, 0.04248766232665746, 0.03528222217027799, 0.047796144931323004, 0.03968089283154308, 0.0399777646600058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06602343977104341, 0.03654348947896757, 0.0567350750566018, 0.02795058340947032, 0.04564499731261762, 0.06571064283536021, 0.05122430836125036, 0.04613958472202884, 0.07131231856194986, 0.3185175713494981, 0.36047789316951395, 0.34400450992787346, 0.33486079728270546, 0.32763068510651316, 0.3171569709368165, 0.35175515537269475, 0.32935045688719455, 0.34403937222805403, 0.056487970481509886, 0.05768838825463862, 0.05931533137462408, 0.08755962875344625, 0.07947466989686269, 0.08957412981451618, 0.08599345104071321, 0.09691110204752951, 0.09016937562224592, 0.19519184632348796, 0.1453095504174009, 0.1459983019477331, 0.14870334963271437, 0.1871344332737268, 0.18983309533303838, 0.14251787992757092, 0.1594953698034398, 0.14829134096570962, 0.24857615644628073, 0.24681225924190142, 0.2304730567368114, 0.23169612993447997, 0.25230784340601853, 0.21000116228719756, 0.22808624703776403, 0.26055548075033486, 0.23998336781030694, 0.17909499591284095, 0.14459892122248053, 0.1685576519484262, 0.1614314929608558, 0.16055768591429675, 0.1869630059668148, 0.20484635679574148, 0.18768021062891183, 0.1335854494932308, 0.18813374746628175, 0.17892174120316162, 0.1859496696042714, 0.1962337786194419, 0.19025140002807028, 0.1852192533040501, 0.201215801694411, 0.18106537647728838, 0.17962948543521684, 0.19090117277212315, 0.21141189185397202, 0.172626837485803, 0.18390118326258775, 0.19841267930299789, 0.18364743710132403, 0.17839182635467365, 0.16992644887042607, 0.18098990731545095, 0.12667397177646667, 0.180028097829372, 0.49035001386599386, 0.30784245980073466, 0.19335563729729044, 0.1604713748180553, 0.1502164480741165, 0.16196796230424138, 0.4669800153275745, 0.36130514927503865, 0.16509391490108571, 0.30985210455849854, 0.2715515612600845, 0.2439915084070693, 0.16098760645995303, 0.16750852452742038, 0.1020780020862112, 0.3437499780595997, 0.19913519226325216, 0.19884670326963128, 0.18736408513836145, 0.16865015777735648, 0.17986340430149084, 0.17598531773826565, 0.18220740589975093, 0.1782646300814551, 0.20842238294652227, 0.06747519030209315, 0.07186220137785626, 0.07774552097323373, 0.06148104790609066, 0.0705531857743199, 0.07724744944910666, 0.08230210907934798, 0.06930881141634204, 0.07267577359736821]}, "mutation_prompt": null}
{"id": "a5c31b3b-7b88-4fb6-9232-553a2e244281", "solution": "import numpy as np\n\nclass EnhancedAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 100\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.99\n        self.chaos_factor = 0.2\n\n        # Chaotic initialization for better exploration\n        self.position += self.chaos_factor * (np.random.rand(self.swarm_size, dim) - 0.5) * 2\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n\n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n\n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n\n            # Opposition-based learning to enhance exploration\n            opposite_positions = -self.position\n            opposite_positions = np.clip(opposite_positions, -5.0, 5.0)\n            opposite_fitness = np.array([func(pos) for pos in opposite_positions])\n            evals += self.swarm_size\n\n            better_opposite_mask = opposite_fitness < fitness_values\n            self.position[better_opposite_mask] = opposite_positions[better_opposite_mask]\n            fitness_values[better_opposite_mask] = opposite_fitness[better_opposite_mask]\n\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5)\n            new_position = self.position + self.velocity + chaos_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAQPSO", "description": "Enhanced AQPSO with adaptive inertia, opposition-based learning, and chaotic initialization for improved convergence.", "configspace": "", "generation": 14, "fitness": 0.16479862878468798, "feedback": "The algorithm EnhancedAQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "9357bdb9-de14-446e-a2e5-3a356cc2e68d", "metadata": {"aucs": [0.3318320196828527, 0.3476304226612569, 0.3486804916582148, 0.3470807919746449, 0.38363717118544527, 0.3642349836912474, 0.3576149874635802, 0.33341968877345696, 0.33773824630923677, 0.016322342628335207, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018003451123131953, 0.012590931420306317, 0.00017470822905019112, 9.999999999998899e-05, 0.0076695530557086, 9.999999999998899e-05, 0.057926159937580324, 0.09080696339175642, 0.08484257546206031, 0.10384240882038376, 0.09566229108785251, 0.09736105162626096, 0.07818715716070379, 0.10577392812373654, 0.08553402719132686, 0.03991525437532506, 0.03768335621482144, 0.05026967282708228, 0.04312159015909911, 0.06233972230291873, 0.07037794961759902, 0.05781596500715391, 0.062311346336259676, 0.053110429585784935, 0.9643612256150623, 0.978888816862972, 0.9757500550507523, 0.9601082138905352, 0.9634252303951727, 0.9631046334572883, 0.9638706302064238, 0.9616017148092705, 0.962452533189621, 0.22821685177716444, 0.20266191170146552, 0.20471148773589598, 0.14415380981049497, 0.15357712645429944, 0.15321309386330673, 0.12085436911493508, 0.2123440156973042, 0.21242630798497364, 0.1820358118347286, 0.19727820749051272, 0.16465063060776552, 0.18116969919333215, 0.1863656755100659, 0.14445467164586012, 0.28108741578934027, 0.13763236688372582, 0.2566852033200421, 0.10574673851129301, 0.11175489334954236, 0.0818100130160323, 0.07966583481683687, 0.07885204225411324, 0.07612987341408883, 0.12596217282447764, 0.10760770071655168, 0.11187448641973752, 0.057340094036087086, 0.061643303696733875, 0.05851225341098465, 0.06838509427588035, 0.03683922979159304, 0.079234864312834, 0.045969901418574266, 0.07170627325948431, 0.07977588151142168, 0.011015763046846039, 9.999999999998899e-05, 0.009896496620630524, 0.007020601345313127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05730148584664707, 0.022711443711482926, 0.05255165733013423, 0.06216939535959931, 0.06081577815018735, 0.03445424166069111, 0.05414360204088675, 0.02946250139533546, 0.021637008065131025, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006387084022291267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03937714430375472, 0.01467837410823325, 0.06643635467542086, 0.026733522344707272, 0.036269349007418517, 0.007362907009755837, 0.04602609286637216, 0.03683823887065141, 0.047754547079495224, 0.32035571887764447, 0.33257563948403013, 0.3349493490659967, 0.32153783389213997, 0.29397535642604034, 0.33554053788858385, 0.34701361436380207, 0.3239477683851282, 0.3177964932941256, 0.08153094101462266, 0.07689972788684951, 0.07718062480834209, 0.07619427471325835, 0.08333444721765626, 0.10665618873152782, 0.0638106820271922, 0.04886018675162629, 0.09079228901350211, 0.1476430521896187, 0.15182949933222867, 0.1565272549636516, 0.14293853831998382, 0.14960430673470515, 0.14420615570187878, 0.13506067001119104, 0.12818437244160086, 0.16171434642928928, 0.21236575624513476, 0.14294716717880307, 0.252396802669977, 0.198330817762281, 0.23265384659510668, 0.2393844371020174, 0.2486523303183611, 0.22485738542179845, 0.1849277068813231, 0.15019872829719572, 0.17708916053377888, 0.162175987329797, 0.14436504087794633, 0.1355130767136994, 0.17514827399221267, 0.1818603095715864, 0.1928722059250163, 0.18675702986790255, 0.15724464488118084, 0.166241173856021, 0.1589481428222269, 0.17401356808663293, 0.15610241897096344, 0.176899197434921, 0.1617605810582683, 0.16375977910655604, 0.1506384741448048, 0.1752359802591993, 0.17827669426103698, 0.1703135763638597, 0.17994777850461652, 0.1877383957636244, 0.17992663861372127, 0.17427965552713798, 0.16608075534998368, 0.17243077456036682, 0.12631780067307685, 0.13859773268022457, 0.1607401630720049, 0.12725816675758794, 0.17853981945187547, 0.16761618604954254, 0.19729002594461287, 0.15709143473509446, 0.36698842749701066, 0.20094928782954935, 0.15906972243423512, 0.15331524881649095, 0.14634128045096062, 0.10955659092560799, 0.20665971627008684, 0.18603149777728922, 0.2320422035123354, 0.2319540683279514, 0.17664429730290176, 0.18034739272711087, 0.1729356160646992, 0.17929940057754723, 0.18703242550640942, 0.18218229234149974, 0.19409648015117975, 0.18995000580852817, 0.18063046249963421, 0.06041576784964031, 0.05420502728141596, 0.06332415280227377, 0.05881060335166821, 0.045127571958971546, 0.06393761824111754, 0.07391029483373057, 0.06312886061805234, 0.06512752869248906]}, "mutation_prompt": null}
{"id": "20645cd5-9729-4acb-a947-58607c60dce1", "solution": "import numpy as np\n\nclass EnhancedAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)  # Dynamic swarm size based on dimensionality\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98  # Adjusted adaptive learning rate decay\n        self.chaos_factor = 0.3  # Increased chaotic influence factor\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            # Adaptive learning rates\n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Enhanced chaos-enhanced exploration\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAQPSO", "description": "Enhanced Adaptive Quantum PSO (EAQPSO) with dynamic swarm size and enhanced chaotic perturbations for accelerated convergence.", "configspace": "", "generation": 15, "fitness": 0.21498436006390073, "feedback": "The algorithm EnhancedAQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "9357bdb9-de14-446e-a2e5-3a356cc2e68d", "metadata": {"aucs": [0.48476440949876975, 0.49423933849945656, 0.4668140976191235, 0.4780021743851621, 0.47481413692590435, 0.4906327606304184, 0.4804147996392747, 0.4876149960622408, 0.47715776977747315, 9.999999999998899e-05, 0.0280856540088551, 9.999999999998899e-05, 0.003296556872817158, 9.999999999998899e-05, 0.07776412346597172, 9.999999999998899e-05, 0.022385133456998108, 9.999999999998899e-05, 0.1453751687136573, 0.13689202690987456, 0.1406873563690968, 0.1203302301767386, 0.08702184457750495, 0.06380780352176463, 0.1404963810426043, 0.12777312242484606, 0.12564536226067535, 0.10806222236507435, 0.0914581740439746, 0.10515355131030957, 0.08722225666937977, 0.10685735418321451, 0.12010385743784757, 0.09878994086275839, 0.10747157837548071, 0.08638444956459623, 0.9846043081064111, 0.9861914313828427, 0.9854197684932415, 0.9728210862312401, 0.9860269223464667, 0.9841285790746144, 0.9862335251044513, 0.984645628205583, 0.982685886470509, 0.3258525446928944, 0.3058375217397663, 0.2852953307830496, 0.3110693832948126, 0.30575734242969743, 0.3209611858644893, 0.2867301333762179, 0.27835186410034995, 0.3051451873429406, 0.20975148427907508, 0.6005496172975041, 0.2089884721861094, 0.18936982376110367, 0.20318760766420674, 0.203871365130881, 0.12662293628221122, 0.22588864447667334, 0.2178045149668515, 0.144846782097532, 0.154106344545066, 0.144389003611318, 0.10528373090391474, 0.11058724771146733, 0.10906591463822546, 0.16102749406269845, 0.13584062505451278, 0.1487012349772069, 0.10804165852203296, 0.16045446395118046, 0.13820924898502884, 0.15945237017305303, 0.16615468778385, 0.15712179481280963, 0.1601229480759927, 0.07699551668568361, 0.11221300219188246, 9.999999999998899e-05, 0.0015316998485657152, 9.999999999998899e-05, 0.03293191034108878, 0.0005357392656974991, 0.01813594537754981, 9.999999999998899e-05, 9.999999999998899e-05, 0.006249468095094746, 0.041773111929747975, 0.05454780448826535, 0.08993069586143865, 0.10805308548227821, 0.09309748504832749, 0.04255244555885762, 0.028345515663102505, 0.12375568536997594, 0.05487385377477949, 0.009337347320557687, 0.008294506214997499, 0.013755256352818268, 0.018946070905760615, 0.031243344504891857, 0.028655605539403717, 0.019826107526183523, 0.016927646951485076, 0.02142041819980478, 0.10337589133380876, 0.02810635281515461, 0.11221229643246533, 0.05222668271509212, 0.04160325348665739, 0.1291809547728009, 0.07130342380988186, 0.0738527259394659, 0.07192433365327866, 0.41716290496021147, 0.4279974966969614, 0.43621533008031277, 0.42647890202096406, 0.410611344448671, 0.3807563369192978, 0.45006820063829944, 0.4098439303794036, 0.4155459057663424, 0.09727690179976745, 0.135587063875658, 0.08078905057171326, 0.11382319148500664, 0.11070945885703132, 0.09437287763947444, 0.12991997039735648, 0.11058859810576871, 0.10360730552573028, 0.18880017682347783, 0.1781681476690996, 0.17964682839929647, 0.26591452582441766, 0.29928088951949805, 0.1856548658836692, 0.163039140428081, 0.17722652076472112, 0.2509319907702684, 0.30451438967446853, 0.3090427025900986, 0.32194016694782135, 0.30940312937290604, 0.31948469416916725, 0.30003751163219194, 0.3100111955096967, 0.3263744492673173, 0.2987559367211574, 0.15626184297273937, 0.2431130046566502, 0.25841914371802555, 0.14774327041146096, 0.209431224328537, 0.24198610348709926, 0.2477227630691804, 0.24906486890020196, 0.1204892262148336, 0.2140856577483904, 0.19293561352162825, 0.1782875065317634, 0.20992088411993948, 0.1990836223553465, 0.18628856684682438, 0.221862774779768, 0.21194452501979832, 0.2137580231278573, 0.19065283166218128, 0.17896206740491538, 0.22074045820062682, 0.19589983817192624, 0.18920786710401083, 0.20244009294464593, 0.19624531604893658, 0.20900611620557896, 0.18344386152518277, 0.12887550456222252, 0.18649129179687585, 0.7110498219572929, 0.16434990519317183, 0.19657407407062633, 0.16590970701736896, 0.13952292186407544, 0.15935170434488521, 0.2053100656982465, 0.6519128754902869, 0.21057248112593274, 0.1588772175875951, 0.6142254044342812, 0.33555762980108883, 0.14234606762775492, 0.16459034564672625, 0.12563814995833522, 0.3827741087683253, 0.18770844419834887, 0.18334175701434074, 0.18898801221672712, 0.1937732923225297, 0.1798313155363347, 0.18454896406552246, 0.1768945068402048, 0.17971791641509394, 0.19428976688929211, 0.08045606255219062, 0.07857085167701627, 0.08941046693484045, 0.08633878411419882, 0.08129471720148429, 0.09364420761576309, 0.1072237431284313, 0.08491319559222943, 0.08183592923075134]}, "mutation_prompt": null}
{"id": "5d21f65a-f0bb-4f7b-8181-d691086f82d4", "solution": "import numpy as np\n\nclass EnhancedAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)  # Dynamic swarm size based on dimensionality\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98  # Adjusted adaptive learning rate decay\n        self.chaos_factor = 0.3  # Increased chaotic influence factor\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            # Adaptive learning rates\n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Enhanced chaos-enhanced exploration\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAQPSO", "description": "Enhanced Adaptive Quantum PSO (EAQPSO) with dynamic swarm size and enhanced chaotic perturbations for accelerated convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20645cd5-9729-4acb-a947-58607c60dce1", "metadata": {"aucs": [0.48476440949876975, 0.49423933849945656, 0.4668140976191235, 0.4780021743851621, 0.47481413692590435, 0.4906327606304184, 0.4804147996392747, 0.4876149960622408, 0.47715776977747315, 9.999999999998899e-05, 0.0280856540088551, 9.999999999998899e-05, 0.003296556872817158, 9.999999999998899e-05, 0.07776412346597172, 9.999999999998899e-05, 0.022385133456998108, 9.999999999998899e-05, 0.1453751687136573, 0.13689202690987456, 0.1406873563690968, 0.1203302301767386, 0.08702184457750495, 0.06380780352176463, 0.1404963810426043, 0.12777312242484606, 0.12564536226067535, 0.10806222236507435, 0.0914581740439746, 0.10515355131030957, 0.08722225666937977, 0.10685735418321451, 0.12010385743784757, 0.09878994086275839, 0.10747157837548071, 0.08638444956459623, 0.9846043081064111, 0.9861914313828427, 0.9854197684932415, 0.9728210862312401, 0.9860269223464667, 0.9841285790746144, 0.9862335251044513, 0.984645628205583, 0.982685886470509, 0.3258525446928944, 0.3058375217397663, 0.2852953307830496, 0.3110693832948126, 0.30575734242969743, 0.3209611858644893, 0.2867301333762179, 0.27835186410034995, 0.3051451873429406, 0.20975148427907508, 0.6005496172975041, 0.2089884721861094, 0.18936982376110367, 0.20318760766420674, 0.203871365130881, 0.12662293628221122, 0.22588864447667334, 0.2178045149668515, 0.144846782097532, 0.154106344545066, 0.144389003611318, 0.10528373090391474, 0.11058724771146733, 0.10906591463822546, 0.16102749406269845, 0.13584062505451278, 0.1487012349772069, 0.10804165852203296, 0.16045446395118046, 0.13820924898502884, 0.15945237017305303, 0.16615468778385, 0.15712179481280963, 0.1601229480759927, 0.07699551668568361, 0.11221300219188246, 9.999999999998899e-05, 0.0015316998485657152, 9.999999999998899e-05, 0.03293191034108878, 0.0005357392656974991, 0.01813594537754981, 9.999999999998899e-05, 9.999999999998899e-05, 0.006249468095094746, 0.041773111929747975, 0.05454780448826535, 0.08993069586143865, 0.10805308548227821, 0.09309748504832749, 0.04255244555885762, 0.028345515663102505, 0.12375568536997594, 0.05487385377477949, 0.009337347320557687, 0.008294506214997499, 0.013755256352818268, 0.018946070905760615, 0.031243344504891857, 0.028655605539403717, 0.019826107526183523, 0.016927646951485076, 0.02142041819980478, 0.10337589133380876, 0.02810635281515461, 0.11221229643246533, 0.05222668271509212, 0.04160325348665739, 0.1291809547728009, 0.07130342380988186, 0.0738527259394659, 0.07192433365327866, 0.41716290496021147, 0.4279974966969614, 0.43621533008031277, 0.42647890202096406, 0.410611344448671, 0.3807563369192978, 0.45006820063829944, 0.4098439303794036, 0.4155459057663424, 0.09727690179976745, 0.135587063875658, 0.08078905057171326, 0.11382319148500664, 0.11070945885703132, 0.09437287763947444, 0.12991997039735648, 0.11058859810576871, 0.10360730552573028, 0.18880017682347783, 0.1781681476690996, 0.17964682839929647, 0.26591452582441766, 0.29928088951949805, 0.1856548658836692, 0.163039140428081, 0.17722652076472112, 0.2509319907702684, 0.30451438967446853, 0.3090427025900986, 0.32194016694782135, 0.30940312937290604, 0.31948469416916725, 0.30003751163219194, 0.3100111955096967, 0.3263744492673173, 0.2987559367211574, 0.15626184297273937, 0.2431130046566502, 0.25841914371802555, 0.14774327041146096, 0.209431224328537, 0.24198610348709926, 0.2477227630691804, 0.24906486890020196, 0.1204892262148336, 0.2140856577483904, 0.19293561352162825, 0.1782875065317634, 0.20992088411993948, 0.1990836223553465, 0.18628856684682438, 0.221862774779768, 0.21194452501979832, 0.2137580231278573, 0.19065283166218128, 0.17896206740491538, 0.22074045820062682, 0.19589983817192624, 0.18920786710401083, 0.20244009294464593, 0.19624531604893658, 0.20900611620557896, 0.18344386152518277, 0.12887550456222252, 0.18649129179687585, 0.7110498219572929, 0.16434990519317183, 0.19657407407062633, 0.16590970701736896, 0.13952292186407544, 0.15935170434488521, 0.2053100656982465, 0.6519128754902869, 0.21057248112593274, 0.1588772175875951, 0.6142254044342812, 0.33555762980108883, 0.14234606762775492, 0.16459034564672625, 0.12563814995833522, 0.3827741087683253, 0.18770844419834887, 0.18334175701434074, 0.18898801221672712, 0.1937732923225297, 0.1798313155363347, 0.18454896406552246, 0.1768945068402048, 0.17971791641509394, 0.19428976688929211, 0.08045606255219062, 0.07857085167701627, 0.08941046693484045, 0.08633878411419882, 0.08129471720148429, 0.09364420761576309, 0.1072237431284313, 0.08491319559222943, 0.08183592923075134]}, "mutation_prompt": null}
{"id": "767befca-7b83-402e-bb98-0d54b59a33ae", "solution": "import numpy as np\n\nclass EnhancedAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40 + (dim * 4)  # Adjusted dynamic swarm size\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.8\n        self.w_min = 0.3\n        self.c1_base = 1.5\n        self.c2_base = 2.5\n        self.learning_rate_decay = 0.95  # Further adjusted adaptive learning rate decay\n        self.chaos_factor = 0.4  # Variable chaotic influence factor\n\n    def __call__(self, func):\n        evals = 0\n        mutation_chance = 0.1  # Introduce mutation chance\n\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n\n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n\n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = inertia_weight * self.velocity + cognitive_component + social_component\n\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(2.0 * np.pi * evals / self.budget)  # Increased variability in chaos\n            new_position = self.position + self.velocity + chaos_component\n\n            # Diversity-preserving mutation\n            mutation_mask = np.random.rand(self.swarm_size, self.dim) < mutation_chance\n            mutation_values = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            new_position = np.where(mutation_mask, mutation_values, new_position)\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAQPSO", "description": "Enhanced Quantum PSO with variable chaotic perturbation and diversity-preserving mutation for faster convergence.", "configspace": "", "generation": 17, "fitness": 0.1714720286099116, "feedback": "The algorithm EnhancedAQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "20645cd5-9729-4acb-a947-58607c60dce1", "metadata": {"aucs": [0.2886143958085916, 0.3046854338851427, 0.2955952941071097, 0.33741832019201645, 0.2976061529053793, 0.2890887127927996, 0.3211418156261352, 0.32656627321248166, 0.3287574848826349, 9.999999999998899e-05, 9.999999999998899e-05, 0.01537895689986557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07497432876893095, 0.09172269807215494, 0.0803335654144608, 0.07368454913375821, 0.08202776586941452, 0.08974796013623398, 0.07255267971305768, 0.06947631957587252, 0.07698838157030585, 0.09042086584610809, 0.06594338857547244, 0.05628754861294272, 0.0892129745230823, 0.06377704412875285, 0.08133033602803119, 0.06396432913673566, 0.0682220656471001, 0.06556593626592344, 0.9884027836155713, 0.9885229226446796, 0.9885457081256849, 0.9825724334390465, 0.9824094701022293, 0.9828310721835949, 0.9845614847448239, 0.9883808547468499, 0.9831696420284659, 0.20470601805182898, 0.1600841583240621, 0.1696975547015116, 0.1641834867084948, 0.14399870672192994, 0.148073771580436, 0.15346006284311953, 0.17718998920451157, 0.18776952584318274, 0.21419288989881802, 0.17176615715179233, 0.1989449537443292, 0.1797928449228089, 0.18640512464558945, 0.20100662412385262, 0.14557602225626542, 0.1424107833793582, 0.2785130328206312, 0.1207485417494385, 0.06701736312901008, 0.09831186634404876, 0.09771005400104604, 0.09417145994265863, 0.07132476791344378, 0.09109797872891234, 0.04087878348575957, 0.11397514282084464, 0.13385549458618284, 0.10858044844737491, 0.09897826023696943, 0.11366597986455795, 0.0548920073650766, 0.10842539301373089, 0.10728766558214808, 0.035047900706883794, 0.09464903409409742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06514613701471206, 0.06398369013809369, 0.04298334294510153, 0.04630554398534659, 0.04193714507129953, 0.04455626443310534, 0.017298175385977665, 0.07309507678621796, 0.0407653526696975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033138712302844264, 0.007045164946837934, 0.04405589341073701, 0.006018090768227569, 0.02312224438443189, 0.019577682843851307, 0.04413306452402743, 0.03892722967135798, 0.04100855618937094, 0.3345564354415743, 0.31859457187397455, 0.31377899698975253, 0.32002801244289447, 0.3177374345898798, 0.2952310105987317, 0.28990313482343244, 0.32390865508205846, 0.3030999411380816, 0.0757411209618345, 0.07589904375380918, 0.10429667072493554, 0.07631363758625609, 0.07530581636389855, 0.07538963062600401, 0.07374376481188971, 0.07354105239587494, 0.08803321298798816, 0.14726295505303388, 0.16444826570726778, 0.14248321440862854, 0.14552531119465661, 0.1703710582370742, 0.1285536017769513, 0.15302494323114335, 0.14806780542541986, 0.12797758548765614, 0.2105199449844718, 0.2219652626941192, 0.23429937448248206, 0.23229214606863857, 0.2290888702021453, 0.22299324448432978, 0.21186396004582686, 0.23587034924244754, 0.22734073024627344, 0.16047517109116594, 0.14712555362184998, 0.16674794928413283, 0.1804975126250109, 0.15504051482517334, 0.18068516781166521, 0.1597608512171087, 0.18105343310224586, 0.16235773411853482, 0.18461641784380423, 0.18319900712024995, 0.18937030517430742, 0.20974637052609657, 0.18788629278185975, 0.19388464432467478, 0.18505128306416185, 0.19410552461887065, 0.19681878813522724, 0.17230670675260495, 0.16976458723289523, 0.17783029147078833, 0.17404645667333007, 0.16854485535467278, 0.17470201998619472, 0.18894853124565836, 0.18219844032941857, 0.1765662159125071, 0.1622464573290685, 0.194946715956676, 0.25865202537666454, 0.35633814628574834, 0.3251556674811972, 0.3730559954977729, 0.13533626665263399, 0.16186828900078287, 0.2889013584547836, 0.34878173826596115, 0.20073474678189485, 0.16576822917787726, 0.19461984131674137, 0.2283466787326771, 0.2621077999167777, 0.20518243842358364, 0.20190380637057537, 0.2870153682908735, 0.1769207684516858, 0.19322455218222934, 0.2130412899856179, 0.18181649606891814, 0.21519216738470381, 0.19279942147323403, 0.20570811419384005, 0.18144297632071094, 0.179260111545395, 0.07339100779728958, 0.0806165665018359, 0.07634683386974539, 0.0720621711700491, 0.07089873966378091, 0.07770761467049125, 0.06118338725518535, 0.06253430772487778, 0.07589952639199093]}, "mutation_prompt": null}
{"id": "12d57771-a891-4ca3-813d-81a317b29eb3", "solution": "import numpy as np\n\nclass EnhancedAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)  # Dynamic swarm size based on dimensionality\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98  # Adjusted adaptive learning rate decay\n        self.chaos_factor = 0.3  # Increased chaotic influence factor\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            # Adaptive learning rates\n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Enhanced chaos-enhanced exploration\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAQPSO", "description": "Enhanced Adaptive Quantum PSO (EAQPSO) with dynamic swarm size and enhanced chaotic perturbations for accelerated convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20645cd5-9729-4acb-a947-58607c60dce1", "metadata": {"aucs": [0.48476440949876975, 0.49423933849945656, 0.4668140976191235, 0.4780021743851621, 0.47481413692590435, 0.4906327606304184, 0.4804147996392747, 0.4876149960622408, 0.47715776977747315, 9.999999999998899e-05, 0.0280856540088551, 9.999999999998899e-05, 0.003296556872817158, 9.999999999998899e-05, 0.07776412346597172, 9.999999999998899e-05, 0.022385133456998108, 9.999999999998899e-05, 0.1453751687136573, 0.13689202690987456, 0.1406873563690968, 0.1203302301767386, 0.08702184457750495, 0.06380780352176463, 0.1404963810426043, 0.12777312242484606, 0.12564536226067535, 0.10806222236507435, 0.0914581740439746, 0.10515355131030957, 0.08722225666937977, 0.10685735418321451, 0.12010385743784757, 0.09878994086275839, 0.10747157837548071, 0.08638444956459623, 0.9846043081064111, 0.9861914313828427, 0.9854197684932415, 0.9728210862312401, 0.9860269223464667, 0.9841285790746144, 0.9862335251044513, 0.984645628205583, 0.982685886470509, 0.3258525446928944, 0.3058375217397663, 0.2852953307830496, 0.3110693832948126, 0.30575734242969743, 0.3209611858644893, 0.2867301333762179, 0.27835186410034995, 0.3051451873429406, 0.20975148427907508, 0.6005496172975041, 0.2089884721861094, 0.18936982376110367, 0.20318760766420674, 0.203871365130881, 0.12662293628221122, 0.22588864447667334, 0.2178045149668515, 0.144846782097532, 0.154106344545066, 0.144389003611318, 0.10528373090391474, 0.11058724771146733, 0.10906591463822546, 0.16102749406269845, 0.13584062505451278, 0.1487012349772069, 0.10804165852203296, 0.16045446395118046, 0.13820924898502884, 0.15945237017305303, 0.16615468778385, 0.15712179481280963, 0.1601229480759927, 0.07699551668568361, 0.11221300219188246, 9.999999999998899e-05, 0.0015316998485657152, 9.999999999998899e-05, 0.03293191034108878, 0.0005357392656974991, 0.01813594537754981, 9.999999999998899e-05, 9.999999999998899e-05, 0.006249468095094746, 0.041773111929747975, 0.05454780448826535, 0.08993069586143865, 0.10805308548227821, 0.09309748504832749, 0.04255244555885762, 0.028345515663102505, 0.12375568536997594, 0.05487385377477949, 0.009337347320557687, 0.008294506214997499, 0.013755256352818268, 0.018946070905760615, 0.031243344504891857, 0.028655605539403717, 0.019826107526183523, 0.016927646951485076, 0.02142041819980478, 0.10337589133380876, 0.02810635281515461, 0.11221229643246533, 0.05222668271509212, 0.04160325348665739, 0.1291809547728009, 0.07130342380988186, 0.0738527259394659, 0.07192433365327866, 0.41716290496021147, 0.4279974966969614, 0.43621533008031277, 0.42647890202096406, 0.410611344448671, 0.3807563369192978, 0.45006820063829944, 0.4098439303794036, 0.4155459057663424, 0.09727690179976745, 0.135587063875658, 0.08078905057171326, 0.11382319148500664, 0.11070945885703132, 0.09437287763947444, 0.12991997039735648, 0.11058859810576871, 0.10360730552573028, 0.18880017682347783, 0.1781681476690996, 0.17964682839929647, 0.26591452582441766, 0.29928088951949805, 0.1856548658836692, 0.163039140428081, 0.17722652076472112, 0.2509319907702684, 0.30451438967446853, 0.3090427025900986, 0.32194016694782135, 0.30940312937290604, 0.31948469416916725, 0.30003751163219194, 0.3100111955096967, 0.3263744492673173, 0.2987559367211574, 0.15626184297273937, 0.2431130046566502, 0.25841914371802555, 0.14774327041146096, 0.209431224328537, 0.24198610348709926, 0.2477227630691804, 0.24906486890020196, 0.1204892262148336, 0.2140856577483904, 0.19293561352162825, 0.1782875065317634, 0.20992088411993948, 0.1990836223553465, 0.18628856684682438, 0.221862774779768, 0.21194452501979832, 0.2137580231278573, 0.19065283166218128, 0.17896206740491538, 0.22074045820062682, 0.19589983817192624, 0.18920786710401083, 0.20244009294464593, 0.19624531604893658, 0.20900611620557896, 0.18344386152518277, 0.12887550456222252, 0.18649129179687585, 0.7110498219572929, 0.16434990519317183, 0.19657407407062633, 0.16590970701736896, 0.13952292186407544, 0.15935170434488521, 0.2053100656982465, 0.6519128754902869, 0.21057248112593274, 0.1588772175875951, 0.6142254044342812, 0.33555762980108883, 0.14234606762775492, 0.16459034564672625, 0.12563814995833522, 0.3827741087683253, 0.18770844419834887, 0.18334175701434074, 0.18898801221672712, 0.1937732923225297, 0.1798313155363347, 0.18454896406552246, 0.1768945068402048, 0.17971791641509394, 0.19428976688929211, 0.08045606255219062, 0.07857085167701627, 0.08941046693484045, 0.08633878411419882, 0.08129471720148429, 0.09364420761576309, 0.1072237431284313, 0.08491319559222943, 0.08183592923075134]}, "mutation_prompt": null}
{"id": "cb700171-7243-46d1-b026-49f8d83cb60e", "solution": "import numpy as np\n\nclass EnhancedAQPSOPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n\n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n\n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n\n            levy_step = np.array([self.levy_flight() for _ in range(self.swarm_size)])\n\n            new_position = self.position + self.velocity + chaos_component + levy_step\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAQPSOPlus", "description": "Enhanced Adaptive Quantum PSO (EAQPSO+) with Levy flight for exploration and adaptive chaotic perturbations for improved convergence.", "configspace": "", "generation": 19, "fitness": 0.14353364470168659, "feedback": "The algorithm EnhancedAQPSOPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "20645cd5-9729-4acb-a947-58607c60dce1", "metadata": {"aucs": [0.22068016894989317, 0.20914655950076466, 0.22707142935152602, 0.25158706303308886, 0.22550485913556517, 0.22080812327034305, 0.23256985721623247, 0.21677370847023736, 0.21775292552684555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05522058870006985, 0.06279624599696121, 0.046990263962025214, 0.07156752785023035, 0.051007037389758314, 0.05967345499197929, 0.07398954245969502, 0.0641898833958261, 0.07175665126711106, 0.05687703837862723, 0.0489586734694516, 0.05057103505089433, 0.04947969867817392, 0.051324414213173575, 0.05693955116154081, 0.07035234324260564, 0.061912859475548254, 0.04827036586385269, 0.9925455544424006, 0.9862302165529784, 0.9831646816674868, 0.9793519778132529, 0.9798589578918591, 0.9847539943848526, 0.9859136052771381, 0.9846096130465068, 0.977306713110745, 0.1027539857452372, 0.11114965450270975, 0.0978088117887872, 0.13216640464127305, 0.1272000483868474, 0.11404617665587014, 0.1122676879532355, 0.12153787345818678, 0.14608682906348625, 0.15666074041353273, 0.16224397348743658, 0.15072529269482604, 0.163708590348438, 0.15842517437527937, 0.15648859015653938, 0.1620992371782668, 0.1621022713657121, 0.16939587510862253, 0.028298863964087984, 0.032875644459824604, 0.03769213197223675, 0.029295319727619784, 0.03570089337608606, 0.02936768781912813, 0.0381641521842796, 0.006836086186524315, 0.03991610657350009, 0.016135703001268653, 0.027985748233994134, 0.0291170628539259, 0.06541331256791405, 0.06442459751509155, 0.044004849881834174, 0.06301632179966632, 0.019604223606021876, 0.03168335786137699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054137993372118554, 0.02681500931193037, 0.03940655334102905, 0.08623473814904592, 0.05851306008698798, 0.016789145362839597, 0.0290848920844472, 0.04704894837926077, 0.0430154084712967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006371147969753799, 0.01148408876924345, 0.0038162149664890954, 0.007848012625299994, 0.010603220398801239, 0.009245149768664862, 0.019706637575386043, 0.03197764138902093, 0.009040249721899762, 0.2436532095030256, 0.22160863341115655, 0.23989991733183835, 0.24476765071694995, 0.2591674958216683, 0.22450300940538437, 0.2342168618886743, 0.21996410303159042, 0.234748994453443, 0.06178595186635483, 0.06411795075999949, 0.0719820388420801, 0.06470734649050369, 0.06484175368928313, 0.06270559704697576, 0.06357237630126478, 0.06005170549952976, 0.06272753000389308, 0.1278128259465986, 0.1412177190418823, 0.16670498537849876, 0.13766266535167793, 0.14234192456950046, 0.12827895721181504, 0.15986928048187232, 0.13889782745084212, 0.14921235977043745, 0.1888882334777775, 0.17510097365623511, 0.20482804040397995, 0.18330084218969267, 0.18116141571396116, 0.19421937590545035, 0.18982944959956893, 0.19634651169331618, 0.18580310819438906, 0.1361153557983551, 0.12206642901970788, 0.12640774056989734, 0.11477191790347718, 0.14040748973756512, 0.12044618270557272, 0.12701306329989415, 0.1370921093166504, 0.11439984281908688, 0.15826104294248322, 0.18912173311846214, 0.16141542920588603, 0.16335809682389502, 0.16031401092826036, 0.1616253186089308, 0.16987539673487806, 0.19740230191808494, 0.181178526186636, 0.16119902852655799, 0.16920861937542775, 0.16114348658600008, 0.15844971804873698, 0.18043944211876273, 0.16176942051247, 0.15548829275820553, 0.16338636893874448, 0.15378286424819165, 0.13828331012645356, 0.1575429460673391, 0.24800367842665627, 0.1867995592782119, 0.1668984573704052, 0.15288754419841621, 0.16534347508723546, 0.17774099391344733, 0.18600175028429156, 0.20684208109185398, 0.15364545287582498, 0.15439312030359964, 0.27565279572020873, 0.1857112888634701, 0.12653026074811458, 0.1935801621011296, 0.25934414720706356, 0.2373655554932388, 0.16858653641619425, 0.17651188973541232, 0.17820615972555642, 0.1788586727559479, 0.19070031949611332, 0.1870929111005225, 0.1771751575246472, 0.19418389168692984, 0.18177086604234827, 0.06312660739423004, 0.0571263767909842, 0.061923799708793914, 0.05693287713612449, 0.07426358192311122, 0.06147974112071408, 0.05939906252127114, 0.0713064330068659, 0.06767336462821949]}, "mutation_prompt": null}
{"id": "e4d87b95-1738-41fd-8652-96355ddf9f93", "solution": "import numpy as np\n\nclass EnhancedAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)  # Dynamic swarm size based on dimensionality\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98  # Adjusted adaptive learning rate decay\n        self.chaos_factor = 0.3  # Increased chaotic influence factor\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            # Adaptive learning rates\n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Enhanced chaos-enhanced exploration\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAQPSO", "description": "Enhanced Adaptive Quantum PSO (EAQPSO) with dynamic swarm size and enhanced chaotic perturbations for accelerated convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20645cd5-9729-4acb-a947-58607c60dce1", "metadata": {"aucs": [0.48476440949876975, 0.49423933849945656, 0.4668140976191235, 0.4780021743851621, 0.47481413692590435, 0.4906327606304184, 0.4804147996392747, 0.4876149960622408, 0.47715776977747315, 9.999999999998899e-05, 0.0280856540088551, 9.999999999998899e-05, 0.003296556872817158, 9.999999999998899e-05, 0.07776412346597172, 9.999999999998899e-05, 0.022385133456998108, 9.999999999998899e-05, 0.1453751687136573, 0.13689202690987456, 0.1406873563690968, 0.1203302301767386, 0.08702184457750495, 0.06380780352176463, 0.1404963810426043, 0.12777312242484606, 0.12564536226067535, 0.10806222236507435, 0.0914581740439746, 0.10515355131030957, 0.08722225666937977, 0.10685735418321451, 0.12010385743784757, 0.09878994086275839, 0.10747157837548071, 0.08638444956459623, 0.9846043081064111, 0.9861914313828427, 0.9854197684932415, 0.9728210862312401, 0.9860269223464667, 0.9841285790746144, 0.9862335251044513, 0.984645628205583, 0.982685886470509, 0.3258525446928944, 0.3058375217397663, 0.2852953307830496, 0.3110693832948126, 0.30575734242969743, 0.3209611858644893, 0.2867301333762179, 0.27835186410034995, 0.3051451873429406, 0.20975148427907508, 0.6005496172975041, 0.2089884721861094, 0.18936982376110367, 0.20318760766420674, 0.203871365130881, 0.12662293628221122, 0.22588864447667334, 0.2178045149668515, 0.144846782097532, 0.154106344545066, 0.144389003611318, 0.10528373090391474, 0.11058724771146733, 0.10906591463822546, 0.16102749406269845, 0.13584062505451278, 0.1487012349772069, 0.10804165852203296, 0.16045446395118046, 0.13820924898502884, 0.15945237017305303, 0.16615468778385, 0.15712179481280963, 0.1601229480759927, 0.07699551668568361, 0.11221300219188246, 9.999999999998899e-05, 0.0015316998485657152, 9.999999999998899e-05, 0.03293191034108878, 0.0005357392656974991, 0.01813594537754981, 9.999999999998899e-05, 9.999999999998899e-05, 0.006249468095094746, 0.041773111929747975, 0.05454780448826535, 0.08993069586143865, 0.10805308548227821, 0.09309748504832749, 0.04255244555885762, 0.028345515663102505, 0.12375568536997594, 0.05487385377477949, 0.009337347320557687, 0.008294506214997499, 0.013755256352818268, 0.018946070905760615, 0.031243344504891857, 0.028655605539403717, 0.019826107526183523, 0.016927646951485076, 0.02142041819980478, 0.10337589133380876, 0.02810635281515461, 0.11221229643246533, 0.05222668271509212, 0.04160325348665739, 0.1291809547728009, 0.07130342380988186, 0.0738527259394659, 0.07192433365327866, 0.41716290496021147, 0.4279974966969614, 0.43621533008031277, 0.42647890202096406, 0.410611344448671, 0.3807563369192978, 0.45006820063829944, 0.4098439303794036, 0.4155459057663424, 0.09727690179976745, 0.135587063875658, 0.08078905057171326, 0.11382319148500664, 0.11070945885703132, 0.09437287763947444, 0.12991997039735648, 0.11058859810576871, 0.10360730552573028, 0.18880017682347783, 0.1781681476690996, 0.17964682839929647, 0.26591452582441766, 0.29928088951949805, 0.1856548658836692, 0.163039140428081, 0.17722652076472112, 0.2509319907702684, 0.30451438967446853, 0.3090427025900986, 0.32194016694782135, 0.30940312937290604, 0.31948469416916725, 0.30003751163219194, 0.3100111955096967, 0.3263744492673173, 0.2987559367211574, 0.15626184297273937, 0.2431130046566502, 0.25841914371802555, 0.14774327041146096, 0.209431224328537, 0.24198610348709926, 0.2477227630691804, 0.24906486890020196, 0.1204892262148336, 0.2140856577483904, 0.19293561352162825, 0.1782875065317634, 0.20992088411993948, 0.1990836223553465, 0.18628856684682438, 0.221862774779768, 0.21194452501979832, 0.2137580231278573, 0.19065283166218128, 0.17896206740491538, 0.22074045820062682, 0.19589983817192624, 0.18920786710401083, 0.20244009294464593, 0.19624531604893658, 0.20900611620557896, 0.18344386152518277, 0.12887550456222252, 0.18649129179687585, 0.7110498219572929, 0.16434990519317183, 0.19657407407062633, 0.16590970701736896, 0.13952292186407544, 0.15935170434488521, 0.2053100656982465, 0.6519128754902869, 0.21057248112593274, 0.1588772175875951, 0.6142254044342812, 0.33555762980108883, 0.14234606762775492, 0.16459034564672625, 0.12563814995833522, 0.3827741087683253, 0.18770844419834887, 0.18334175701434074, 0.18898801221672712, 0.1937732923225297, 0.1798313155363347, 0.18454896406552246, 0.1768945068402048, 0.17971791641509394, 0.19428976688929211, 0.08045606255219062, 0.07857085167701627, 0.08941046693484045, 0.08633878411419882, 0.08129471720148429, 0.09364420761576309, 0.1072237431284313, 0.08491319559222943, 0.08183592923075134]}, "mutation_prompt": null}
{"id": "e889a561-ac64-44df-a93f-150974e6d7a1", "solution": "import numpy as np\n\nclass QEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40 + (dim * 4)  # Adjusted swarm size for faster convergence\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.w_max = 0.8\n        self.w_min = 0.3\n        self.c1 = 2.5  # Increased cognitive component for local exploration\n        self.c2 = 2.5  # Increased social component for global exploration\n        self.chaos_factor = 0.2  # Reduced chaotic influence to stabilize convergence\n        self.reinit_prob = 0.1  # Probability of reinitializing particles\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            cognitive_component = self.c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = inertia_weight * (self.velocity + cognitive_component + social_component)\n\n            # Phase-based velocity adjustment\n            if evals % (self.budget // 3) == 0:\n                self.velocity *= 0.5\n\n            # Stochastic reinitialization\n            reinit_mask = np.random.rand(self.swarm_size) < self.reinit_prob\n            reinit_positions = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            self.position = np.where(reinit_mask[:, None], reinit_positions, self.position)\n\n            # Update position with chaos-enhanced exploration\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5)\n            new_position = self.position + self.velocity + chaos_component\n\n            # Enforce boundaries\n            self.position = np.clip(new_position, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_value", "name": "QEAPSO", "description": "Quantum-inspired Enhanced Adaptive Particle Swarm Optimization (QEAPSO) with phased velocity adjustment and stochastic reinitialization for improved convergence robustness.", "configspace": "", "generation": 21, "fitness": 0.1907544400350222, "feedback": "The algorithm QEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "20645cd5-9729-4acb-a947-58607c60dce1", "metadata": {"aucs": [0.3923759220847707, 0.37477297662972797, 0.39446885055720615, 0.40362301358968966, 0.4193497179397241, 0.43414713570905283, 0.3951229455648365, 0.3966664365947339, 0.38937651280470387, 0.02989761489319276, 0.0007015772626407513, 0.01641128568244643, 0.017977859021225617, 0.0010994201284367788, 0.03227579162590677, 0.005357159377665788, 0.0008818626566815535, 9.999999999998899e-05, 0.09215072411971081, 0.10296091932898377, 0.06380029135409382, 0.09241074562634644, 0.09309479225077633, 0.06509453426902745, 0.09762363381364103, 0.11502209042498035, 0.12354971691958239, 0.07862691445080094, 0.08365099583887492, 0.05779700285278211, 0.09564312108269091, 0.06829201524836082, 0.0778536081531882, 0.099670418484467, 0.08937491802356856, 0.10292045218239143, 0.9836057821085225, 0.9777828451007257, 0.9836738725374127, 0.9673221571240642, 0.9882856482835596, 0.9730950583364133, 0.984715184626833, 0.9886824694563873, 0.983353229234861, 0.24171289947292884, 0.20497645703733391, 0.22439315299164064, 0.2239100848061567, 0.21975921599246184, 0.2239361606601522, 0.21719175876877406, 0.21452482789176408, 0.23377818012788953, 0.2896456802105265, 0.1682485775180932, 0.19259259511309113, 0.1864382778391438, 0.20352236377257682, 0.2035127915715378, 0.1938519482461949, 0.20083775662851566, 0.2470854863412274, 0.08349300549995897, 0.09215074915726906, 0.16316357305940277, 0.08054639584246104, 0.11654793834511967, 0.0949903682058928, 0.14159063118442505, 0.13173887657751315, 0.1432768077639357, 0.1446817739887558, 0.10221568385455959, 0.14220383978662698, 0.1096718702443572, 0.08026029611027063, 0.12304398952041518, 0.13978334600386222, 0.10370325862816976, 0.1156631800911071, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002152228745948559, 0.00726802292178419, 0.0021732663488375215, 9.999999999998899e-05, 0.003750865611265697, 0.09093983598883171, 0.011064666960901248, 0.06940248025308426, 0.10755877273060177, 0.0766213808169468, 0.01448709425328576, 0.07308612116035818, 0.11914681421660667, 0.037056127957690976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03638594170351517, 0.027180818534632833, 0.04925791398030144, 0.026178788139151088, 0.03542615404772009, 0.0224745798571645, 0.08689791646753131, 0.04776494146100918, 0.058889899733359896, 0.3551614932107172, 0.36871167496961854, 0.3551463906212666, 0.3369451730227071, 0.3651353234235083, 0.39281706650349046, 0.3698917505639352, 0.35623194224123356, 0.3667283506508443, 0.08749518852790772, 0.09504935707633899, 0.08889195316870424, 0.08426207803244301, 0.07377915808823143, 0.08651128565980504, 0.08446739573272821, 0.078777544049071, 0.11713733763432865, 0.17126366553799544, 0.1641421299043001, 0.1781904136587531, 0.15821143480552669, 0.251828880021404, 0.1713182185930595, 0.201787700235727, 0.18312054016888923, 0.19613259068444222, 0.2142338566806017, 0.21068456355140674, 0.2638426510081072, 0.24923786714197893, 0.2530314608904357, 0.19055523874381952, 0.24587465546920828, 0.2801212373818759, 0.22505683890814465, 0.17390444161387952, 0.14132611900246994, 0.18721694550233037, 0.16714138395118427, 0.16152733734209213, 0.21360246648593573, 0.1993750038966171, 0.22042576822382276, 0.2042892811001824, 0.22378712865500938, 0.17700490538792624, 0.1754296473296787, 0.18632742742113806, 0.18539280318660056, 0.1823134938831522, 0.20578818607703542, 0.18479069419023098, 0.19203697253802654, 0.19451560912812405, 0.1985582455292516, 0.174200776574432, 0.2141979821289386, 0.18762562838900765, 0.19800676087000024, 0.18546329701880737, 0.18499333718820732, 0.19572101447894108, 0.1626074979802572, 0.4278400930296935, 0.1890656010331606, 0.5538198927126405, 0.19354868490723087, 0.19089564678439996, 0.28124272497202507, 0.16286077056972104, 0.20182358924961563, 0.5310541941713972, 0.20586224533335074, 0.19764118439014833, 0.19936868856512924, 0.28396526420684154, 0.1380087195542008, 0.20888043516112376, 0.20606360851415206, 0.34303916514853083, 0.18193577773728908, 0.18305230111540327, 0.19064597181338472, 0.19606934961068523, 0.17339574673867175, 0.1984349156712356, 0.18864724797666255, 0.1848607676330325, 0.1898149977856871, 0.08909731167386925, 0.07068131162276081, 0.0940834072708503, 0.08146411374464768, 0.07507850630225221, 0.07642222679305577, 0.07434234666107253, 0.07683151102666086, 0.07584551821940255]}, "mutation_prompt": null}
{"id": "13756fd9-e2dc-4f26-956f-29e3a3bcb5b3", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40 + (dim * 4)  # Adjusted swarm size\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.random.uniform(-1.0, 1.0, (self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.8\n        self.w_min = 0.3\n        self.c1_base = 1.5\n        self.c2_base = 2.5\n        self.chaos_factor = 0.2  # Reduced chaotic influence factor\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            # Adaptive learning rates\n            c1 = self.c1_base\n            c2 = self.c2_base\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = inertia_weight * self.velocity + cognitive_component + social_component\n            \n            # Opposition-based learning\n            opposition_position = 5.0 - self.position\n            opposition_fitness_values = np.array([func(pos) for pos in opposition_position])\n            better_opposition_mask = opposition_fitness_values < fitness_values\n            self.position[better_opposition_mask] = opposition_position[better_opposition_mask]\n\n            # Enhanced exploration with chaos component\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5)\n            new_position = self.position + self.velocity + chaos_component\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization (EPSO) with dynamic inertia adjustment and opposition-based learning for improved convergence and exploration.", "configspace": "", "generation": 22, "fitness": 0.1601221838880601, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "20645cd5-9729-4acb-a947-58607c60dce1", "metadata": {"aucs": [0.3096222882150872, 0.2633712987615765, 0.31369457907117326, 0.31509379533305804, 0.2666085136554027, 0.3716910956347286, 0.2960055586685526, 0.3158041871841385, 0.260942432841894, 0.0009680022419686907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024193857687861975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08000846784760418, 0.068859351256357, 0.04794814333568098, 0.05646492584057028, 0.07610072301560178, 0.0606214211781364, 0.05276528101097777, 0.0638103627591563, 0.06634089438275392, 0.06536794223710185, 0.03676760249941602, 0.06995879203040256, 0.04322524098128089, 0.06623096006224949, 0.07412834095213838, 0.06905959943545037, 0.05405513821417185, 0.05530244593128886, 0.9870351621151856, 0.9863203365588982, 0.9873032844132326, 0.9773788557084617, 0.9669834232742511, 0.9674115220939766, 0.9772117034458464, 0.9778973804140624, 0.9727324460756743, 0.15445781281387994, 0.19648167424558838, 0.11974192691194041, 0.1402682174676365, 0.13453522600618306, 0.1391666377994325, 0.1274357150664437, 0.16143008794943203, 0.12697670520897264, 0.1951486306988668, 0.19236550486518422, 0.15459904786940093, 0.1902616742840001, 0.19284284958368625, 0.18549483653218135, 0.15995478996526757, 0.18869520793579764, 0.17492503824287653, 0.07332536014584767, 0.04076238480950434, 0.06959878091186567, 0.06903117965138195, 0.09104418000896553, 0.09856928340496873, 0.07839749313066968, 0.09131427358487054, 0.09245096137963627, 0.10147921344666577, 0.07704655793958537, 0.07438955470350606, 0.07340984694289743, 0.03698619416070592, 0.06613911391964888, 0.10321683450639119, 0.09355550590248318, 0.09957719378564112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0073742174959327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027155696036690435, 0.007953870194290724, 0.04161008193242255, 0.02291988134751277, 0.052724592868957365, 0.032111713804608866, 0.031189431258702993, 0.014141504526323456, 0.029115024699521763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03689198039159658, 0.018866966805665242, 0.016573463390888943, 0.003372085324935492, 0.04414122795061681, 0.06916213088385936, 0.034249903166722495, 0.028804721344751538, 0.044758079239649695, 0.3203041630184206, 0.3228984625295367, 0.2987685538820889, 0.27393523216094695, 0.2884364376487749, 0.2736150886296346, 0.3081277638860942, 0.2780727280658086, 0.29799471988934223, 0.05018950159821178, 0.05767830752299963, 0.04864767771100231, 0.0710723130805907, 0.06785527141034364, 0.06739855034885767, 0.06788570394752291, 0.06105191948516109, 0.05899663092805274, 0.13162082159352062, 0.14470568283529206, 0.14917126725255825, 0.1598854992384029, 0.1872164472765706, 0.1601686169579012, 0.18542178551519262, 0.14417749157880644, 0.16499154800821014, 0.19947082596332144, 0.23129717676982275, 0.19126399883037515, 0.2108440428264734, 0.23360703833588525, 0.2205732900897419, 0.23616612645045032, 0.23831921220545005, 0.21132418234930828, 0.1561966137816182, 0.11633679598619273, 0.1444671344146442, 0.13990867567310183, 0.14323977136595845, 0.13805380856662286, 0.1784576100672699, 0.17939176217993213, 0.12243566054463095, 0.16070187085009346, 0.1509507022741282, 0.1722712479188454, 0.20501005216748514, 0.1628103816426112, 0.1624972051471958, 0.17756968698111253, 0.15458005485932647, 0.15812428534027545, 0.17287241386127772, 0.1652673620666868, 0.1618160170872458, 0.16674833709934644, 0.17735817718913804, 0.16949116243170848, 0.15856595090977776, 0.17179011748059658, 0.15862706157299922, 0.3414676374493055, 0.18380628153594636, 0.16037663004801106, 0.30793910780816236, 0.18744426495759203, 0.17650346943598538, 0.14271717141267304, 0.15465472320149998, 0.35444448409123686, 0.24331453005020942, 0.18705545252051703, 0.19015481686485902, 0.181229652414433, 0.2947471363026303, 0.1314079818898104, 0.20004213254654113, 0.20079985143371526, 0.27864007872407115, 0.1733929039993769, 0.17470615881768226, 0.17986286192591128, 0.18042468902932507, 0.17714172811934314, 0.18166134009023116, 0.19105659726183155, 0.1685718568490805, 0.1731183137472575, 0.06201060874654818, 0.0702679303096162, 0.0664057975229373, 0.06807606609339512, 0.06437509171338429, 0.06787339480736265, 0.06052579032212779, 0.06093039921100385, 0.05644783639492179]}, "mutation_prompt": null}
{"id": "0d91daf9-0551-4e9c-bd41-61638e18ebe8", "solution": "import numpy as np\n\nclass QuantumLevyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40 + (dim * 4)  # Slightly reduced and scaled swarm size\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.w_max = 0.8  # Adjusted inertia weight range\n        self.w_min = 0.3\n        self.c1_base = 1.5  # Tuned cognitive coefficients\n        self.c2_base = 2.5\n        self.chaos_factor = 0.2  # Reduced chaotic influence for stability\n        self.alpha = 0.01  # Scaling factor for Lévy flight\n\n    def levy_flight(self, dim):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=dim)\n        v = np.random.normal(0, 1, size=dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate fitness\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            # Update global best\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            # Update velocities and positions\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            # Dynamic coefficients\n            c1 = self.c1_base * (1 - evals / self.budget)\n            c2 = self.c2_base * (1 + evals / self.budget)\n\n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            # Incorporate Lévy flight for exploration\n            levy_step = np.array([self.levy_flight(self.dim) for _ in range(self.swarm_size)])\n            new_position = self.position + self.velocity + self.alpha * levy_step\n\n            # Enforce boundaries\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "QuantumLevyPSO", "description": "Quantum-inspired PSO with dynamic hyperparameters and Lévy flight for improved exploration and convergence speed.", "configspace": "", "generation": 23, "fitness": 0.16990984771612064, "feedback": "The algorithm QuantumLevyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "20645cd5-9729-4acb-a947-58607c60dce1", "metadata": {"aucs": [0.33712465312980033, 0.3574327352683797, 0.32806739628474213, 0.3145166711275703, 0.36183214514887063, 0.3335553014842225, 0.3703636799817024, 0.33274437790405076, 0.28483569707056566, 0.0037580092951963184, 9.999999999998899e-05, 0.0037902101810936006, 0.01144975258824743, 0.01763695738458615, 9.999999999998899e-05, 9.999999999998899e-05, 0.006935328058210288, 0.036883219991612703, 0.09513758710473552, 0.10985894472765134, 0.06022462645294002, 0.09390228357727626, 0.09637887710129434, 0.08599862445289108, 0.08818761913258999, 0.09882818480578148, 0.0871764602578391, 0.09391979498343295, 0.04485609250070388, 0.07664192161796124, 0.08390280577223641, 0.04317728212061667, 0.0578705025845615, 0.08165531801839021, 0.0483405848832974, 0.07618133366693058, 0.988158733384048, 0.9834332256301196, 0.9884083436358077, 0.9829330228976898, 0.9836089061451734, 0.9825656828113468, 0.9885028802034107, 0.9892779813702525, 0.9835702354975653, 0.1834096161994223, 0.19415761877171311, 0.1617887929562165, 0.1615637633271212, 0.16466895756174904, 0.1434211906576507, 0.13798880781746592, 0.1385048212572163, 0.1976491562349687, 0.17127133574056952, 0.17054681411286687, 0.1589731727373126, 0.23498440048314728, 0.18787621855341863, 0.18613197063099318, 0.06765160401006942, 0.21685392237848888, 0.17452912563050138, 0.06375096727544838, 0.08489945829679268, 0.08168286363061139, 0.07175241412104516, 0.11370377601276327, 0.08917161681041341, 0.14090564965823738, 0.04034727905870328, 0.12038416093468951, 0.1021662689874232, 0.06633735699379062, 0.09297368906028991, 0.09158923782685047, 0.07490575156578194, 0.10947261873308667, 0.09367192858369233, 0.09224454641578328, 0.08708623335849175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00035325521982410013, 0.03703231037731569, 0.03051805932610785, 0.022819644372964465, 0.055829036009567456, 0.050853143017682845, 0.012356473257252754, 0.045243321669900416, 0.05018755416490972, 0.024443934873632833, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027012694717267416, 0.029838577819886303, 0.019581540135247044, 0.002393650290253735, 0.027991163065732905, 0.0038588021136630735, 0.04195817825663162, 0.04962321205626763, 0.05987097511717743, 0.30728508464382087, 0.3430401202396639, 0.3097998127192637, 0.32523642479564907, 0.3483306692087079, 0.29426037237892666, 0.3438237279058267, 0.3134929199838773, 0.27816251535154823, 0.10089222174782175, 0.06348422329240366, 0.08487078101227508, 0.0914339625562347, 0.0691478383280979, 0.0676651713390718, 0.0740286576452478, 0.07556411732392898, 0.10232510695792085, 0.16561370665478825, 0.1580430107242854, 0.14686788479591528, 0.15651838738640123, 0.16103754831653327, 0.20087077016793697, 0.17819177918560059, 0.16019505256425415, 0.15295312880091005, 0.2134847165677004, 0.21796250650000226, 0.27111099291364804, 0.21438024670661848, 0.24651437163775303, 0.14806707268668395, 0.22332394128402366, 0.24430089228360063, 0.2569780926276496, 0.15130229036883613, 0.14520731990753688, 0.17852900232774138, 0.1463226375606539, 0.14032046287678257, 0.15299845919190613, 0.1673090751098496, 0.20293309104386592, 0.1230134203832356, 0.1955182516515056, 0.183210517452998, 0.18909502296429814, 0.18298909682893172, 0.16726689866480504, 0.17504322514027404, 0.1847447352118896, 0.1994174998256708, 0.18019168760463433, 0.16628596216313707, 0.17059797755370032, 0.17311901413933395, 0.1662046009252297, 0.16984232706177538, 0.1736758219982295, 0.17164621967216098, 0.18176902621140734, 0.19176921293720928, 0.1627969198387722, 0.4429367882065629, 0.17605321493867088, 0.4113734745677723, 0.19333939454580817, 0.18866395740199915, 0.14091097714582157, 0.15290862102204206, 0.20121613714279696, 0.28210518942750573, 0.17989704344906876, 0.19185863501024136, 0.17926248408923928, 0.21153836304213214, 0.142798470668982, 0.12092980118992203, 0.29604004599665246, 0.29221921019493335, 0.22170310334581245, 0.1821077519579244, 0.18768730424160596, 0.17918450205412007, 0.1729827218979323, 0.19390385890567174, 0.1997545288600825, 0.19734021580823147, 0.17735675379798121, 0.079638325520485, 0.06553308231222821, 0.06990849669858812, 0.07458527099879575, 0.0674694924998428, 0.060647524380239015, 0.06717214917709258, 0.06680093648204599, 0.07391505137079735]}, "mutation_prompt": null}
{"id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 24, "fitness": 0.21556512727999141, "feedback": "The algorithm HybridAQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "20645cd5-9729-4acb-a947-58607c60dce1", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "18b66151-7773-4b70-86c5-364cfaf681e7", "solution": "import numpy as np\n\nclass EnhancedHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.initial_swarm_size, dim))\n        self.velocity = np.zeros((self.initial_swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.initial_swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.w_max = 0.8\n        self.w_min = 0.3\n        self.c1 = 2.5\n        self.c2 = 2.5\n        self.harmony_memory_consideration_rate = 0.9\n        self.pitch_adjustment_rate = 0.1\n        self.scale_factor = 0.05\n        self.population_shrinkage_factor = 0.9\n\n    def __call__(self, func):\n        evals = 0\n        swarm_size = self.initial_swarm_size\n\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(swarm_size, self.dim)\n            r2 = np.random.rand(swarm_size, self.dim)\n\n            cognitive_component = self.c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = inertia_weight * self.velocity + cognitive_component + social_component\n\n            harmony_decision = np.random.rand(swarm_size, self.dim) < self.harmony_memory_consideration_rate\n            pitch_adjustment = (np.random.rand(swarm_size, self.dim) - 0.5) * self.scale_factor\n            harmony_component = harmony_decision * pitch_adjustment\n            new_position = self.position + self.velocity + harmony_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n            swarm_size = max(5, int(swarm_size * self.population_shrinkage_factor))\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedHarmonyPSO", "description": "Enhanced Harmony Search PSO (EHPSO) merges harmony search elements with adaptive PSO and dynamic population resizing for accelerated convergence.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (67,5) (75,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (67,5) (75,5) ')", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {}, "mutation_prompt": null}
{"id": "cd107884-c4d1-4bd8-a223-b4d952d68492", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "3c2313c6-8dcf-4bda-a850-dfdf1bf0b67e", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "d11e2e18-17ff-4e7f-9c8d-58c794799de8", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "06326e62-c45d-4336-912b-e66d816f7828", "solution": "import numpy as np\n\nclass EnhancedHybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n        self.learning_rate_decay = 0.95\n        self.chaos_factor = 0.1\n        self.levy_beta = 1.5\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) /\n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def differential_mutation(self, idx):\n        indices = [i for i in range(self.swarm_size) if i != idx]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant_vector = self.position[a] + self.mutation_factor * (self.position[b] - self.position[c])\n        cross_points = np.random.rand(self.dim) < self.crossover_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial_vector = np.where(cross_points, mutant_vector, self.position[idx])\n        trial_vector = np.clip(trial_vector, -5.0, 5.0)\n        return trial_vector\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n\n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n\n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            \n            for i in range(self.swarm_size):\n                trial_vector = self.differential_mutation(i)\n                if func(trial_vector) < fitness_values[i]:\n                    self.position[i] = trial_vector\n                else:\n                    self.position[i] = new_position[i]\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedHybridAQPSO", "description": "Enhanced Hybrid AQPSO with adaptive strategy and differential mutation for improved convergence.", "configspace": "", "generation": 29, "fitness": 0.1611773689159686, "feedback": "The algorithm EnhancedHybridAQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.33591043931619147, 0.33814131182876705, 0.36947463233134537, 0.34729039260120753, 0.3665016914117988, 0.352777956892636, 0.32325885646722796, 0.3139458718837925, 0.3296451607276407, 0.01255535570880928, 0.019440619020903993, 0.011841913016513494, 0.027703131036178275, 0.022341292461539375, 0.00910099996636049, 0.021970845666365646, 0.02908012242004665, 0.007737603761163836, 0.07256874386379353, 0.08027955984552992, 0.06958380061235425, 0.07905222987008309, 0.068028935110517, 0.07808436112705153, 0.08183821825382309, 0.10020832835728599, 0.07238220052658051, 0.0655478126596758, 0.049971811987212456, 0.057019029176027525, 0.05750290293728921, 0.05413379277327801, 0.056433237998261054, 0.055380942502163855, 0.060292670466152276, 0.06344193471138626, 0.9659053066834907, 0.9726621414792922, 0.971395210811558, 0.9723748518465056, 0.972186999711004, 0.9732289624067276, 0.970860431201172, 0.9692170980721015, 0.9725458247719064, 0.11893918072158793, 0.12043687834029848, 0.1384292632673063, 0.13425207305462517, 0.11415151518283584, 0.13737900105760348, 0.09230333388962553, 0.09141995350937582, 0.1534214654996111, 0.17731255765510756, 0.17256535707830478, 0.1606803855692397, 0.1831192203316231, 0.18299611169266838, 0.18723584252867398, 0.1649459652326397, 0.23575528354919995, 0.23061869851521966, 0.049278275779382597, 0.045464448087364495, 0.07792656255665065, 0.05614156355080213, 0.08233531529985394, 0.07496030381867147, 0.08247606762436821, 0.10294328136442732, 0.09496264227418105, 0.08476487659753207, 0.06235357906371242, 0.050105518381202474, 0.08340383849459232, 0.055643186958221125, 0.08185428380627513, 0.07665345909868904, 0.07612732578570613, 0.07366373004255511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014846049028368613, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005946736377488993, 9.999999999998899e-05, 9.999999999998899e-05, 0.056872085980524734, 0.05200553925577367, 0.07564057995135476, 0.016962906243006337, 0.07901737770297657, 0.07359723349127056, 0.016828622650717273, 0.08521956112487405, 0.06983061127276691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002242237710371242, 9.999999999998899e-05, 9.999999999998899e-05, 0.0216267000116821, 0.03766217914579806, 0.03938981978318257, 0.04533374404329593, 0.045963185156788655, 0.06106350177193853, 0.03426552159368146, 0.02580265230529566, 0.04298252767920108, 0.29505402421155424, 0.269745468979112, 0.28090248066438206, 0.31545718847251636, 0.30368468135304105, 0.3298567696210829, 0.32576950132125526, 0.2706348221746768, 0.280124148333486, 0.08658541617085014, 0.06268368267066238, 0.07163422721755341, 0.07471764283839111, 0.07307718370694127, 0.08419316295436763, 0.07140358485575926, 0.06645952698274393, 0.07142795975396199, 0.12891810594121234, 0.1386908881885638, 0.16301258265504315, 0.14165686235976804, 0.14772200106284417, 0.1372826621791008, 0.17778400919812065, 0.13519930195699348, 0.1408280902669905, 0.20039274578889577, 0.21066499868092003, 0.22109564631515422, 0.18585833750934577, 0.19969511319464162, 0.18201466050288106, 0.22567046037268024, 0.2332519440275398, 0.24082985868477513, 0.16586039665744234, 0.14543474310376991, 0.15927974717962823, 0.1306082714355431, 0.1661850456166759, 0.13460593911397822, 0.1491796565305431, 0.18529273499632404, 0.12571541908050077, 0.17084218833283593, 0.20816891498835988, 0.1715761323661954, 0.18011865080533285, 0.17870520004709456, 0.16173640655179367, 0.18564993365036875, 0.1662275053581328, 0.1778471083342854, 0.15775445700276725, 0.17485234131599425, 0.16726234865746192, 0.17564220188732493, 0.16386839934877007, 0.1745045027496528, 0.15731049440927725, 0.1529061274971617, 0.1333299238382497, 0.16888272617516653, 0.21299548726179984, 0.25830631491939704, 0.16154859750064277, 0.1800933565705074, 0.1576790253669742, 0.16642405376203473, 0.14695682866801507, 0.23792072757104, 0.2921443793428171, 0.18083459915737599, 0.17381710576192722, 0.22591794430312007, 0.18848373264617724, 0.13499709335340615, 0.19366456171479307, 0.11785504246986789, 0.23027557246246888, 0.18501441128865548, 0.17880386764861556, 0.17878216342302622, 0.18165300047754995, 0.17781929784942163, 0.1792376045123214, 0.1825920585992521, 0.1980394690847206, 0.18832805423746468, 0.06338965706180677, 0.0661770980324865, 0.06200905449077876, 0.06840329721001548, 0.06323665981507565, 0.07193536631585107, 0.05991994553466318, 0.060466637331881845, 0.06151061494930088]}, "mutation_prompt": null}
{"id": "2bab258a-8c70-4738-9b59-3cf5a192c318", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "6a78bc96-806d-406d-b356-427b23b078d2", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "509fd495-9247-4ea3-a7da-273599e536af", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "7d535948-d696-46db-9968-8b77f1055c54", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "4938b435-5cbd-4a04-89dc-84932982a79b", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "9a2950db-ee75-488c-b3ae-089563da0f45", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "7d3e4f09-f0b0-4406-b0de-6f203fe2870b", "solution": "import numpy as np\n\nclass EnhancedAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.initial_swarm_size, dim))\n        self.velocity = np.zeros((self.initial_swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.initial_swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.99\n        self.chaos_factor = 0.15\n        self.levy_beta = 1.5\n        self.dynamic_swarm = True\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def update_swarm_size(self, evals):\n        if self.dynamic_swarm:\n            new_size = max(5, int(self.initial_swarm_size * (1 - evals / self.budget)))\n            if new_size < len(self.position):\n                self.position = self.position[:new_size]\n                self.velocity = self.velocity[:new_size]\n                self.personal_best_position = self.personal_best_position[:new_size]\n                self.personal_best_value = self.personal_best_value[:new_size]\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            self.update_swarm_size(evals)\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += len(self.position)\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(len(self.position), self.dim)\n            r2 = np.random.rand(len(self.position), self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / len(self.position)))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / len(self.position)))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(len(self.position), self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((len(self.position), self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAQPSO", "description": "Enhanced Quantum PSO with Adaptive Learning Rate and Dynamic Swarm Size for faster convergence and robust exploration.", "configspace": "", "generation": 36, "fitness": 0.20891343152109695, "feedback": "The algorithm EnhancedAQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.4489507287486163, 0.45966465249853117, 0.45506402530474066, 0.4315814151476155, 0.4470335387778571, 0.43413849972924845, 0.43406776031082905, 0.45360022936234246, 0.44232401912705877, 0.030788167897691565, 0.048262807992408896, 9.999999999998899e-05, 0.004733892425529462, 0.05273591349244888, 9.999999999998899e-05, 0.029282597327222493, 0.05673816304165158, 9.999999999998899e-05, 0.13853642194601634, 0.14426155847155753, 0.13608956675185058, 0.11588777846735299, 0.11120929777618715, 0.10042646094997543, 0.11560667547133996, 0.12601648873192917, 0.13015239440462645, 0.09314216305382217, 0.10498697734844897, 0.09419242879521739, 0.08321151169008645, 0.10132460548175126, 0.07853125737141986, 0.10471029727930925, 0.10670904493651345, 0.1291902939476708, 0.9838506087494702, 0.9862064150545803, 0.9854970391479659, 0.9736751488609888, 0.9814105010314287, 0.9842309658706044, 0.986331909520962, 0.9857854568681381, 0.9788573954392558, 0.31238066454517044, 0.29483045543966935, 0.2729876329507763, 0.30356770814932676, 0.3048984096763041, 0.2955477191609245, 0.2585645321843201, 0.2986766431157192, 0.294503228879066, 0.16781062744023711, 0.17648541359066516, 0.17129135755392177, 0.265022225791514, 0.2602089349879583, 0.20325521423683146, 0.15768249776439047, 0.22884673965027214, 0.208424425864278, 0.11941283793903534, 0.1628254024334721, 0.1467494129042245, 0.1463739288877154, 0.24648937836275742, 0.11536820648397661, 0.16167016240908683, 0.17250709810649567, 0.16249709684055036, 0.2196210230982254, 0.09739112824838081, 0.1614193826053244, 0.14131702945587354, 0.1383453377897116, 0.12353753847595217, 0.1445828538694075, 0.0847601150955758, 0.15050941548969732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004901785745259568, 9.999999999998899e-05, 9.999999999998899e-05, 0.040280421041954506, 9.999999999998899e-05, 9.999999999998899e-05, 0.07317048661185432, 0.12447116207065412, 0.07058244151798099, 0.10449453053438151, 0.0339129767719516, 0.027101470437343234, 0.007951190004881425, 0.09618500460103618, 0.03797101812518289, 9.999999999998899e-05, 9.999999999998899e-05, 0.007643901762572791, 0.008661884775489459, 0.02209622700231162, 0.0032438960446045106, 0.007076746825397273, 0.004267301963031045, 0.006177840143859581, 0.10003582513703768, 0.027462412128926972, 0.06905751843713548, 0.04026101781723368, 0.09050997499910063, 0.03167687894565041, 0.06750497760395469, 0.07377106810271283, 0.0651919148868847, 0.4108003450113601, 0.4026487162682052, 0.409017300251595, 0.42552061684407905, 0.401026234617773, 0.41393502802083315, 0.4300792476437575, 0.40295728982517043, 0.40600235510358074, 0.08370535500446186, 0.07246891536467626, 0.11608208845211687, 0.11022739702078321, 0.10068849108117106, 0.09991820151249631, 0.10210299816205393, 0.0772421803444242, 0.12418967763837241, 0.2877549588739955, 0.18499485258352955, 0.16567606986769623, 0.18405878112371887, 0.28706726165371854, 0.3182015401060452, 0.2690702153792095, 0.1560906131253671, 0.18320873504010127, 0.3021272489461393, 0.2878651611754742, 0.3036156392360915, 0.26214099427861126, 0.30283543342166963, 0.2926234148352541, 0.27105263067694096, 0.2970272720622178, 0.2445338267042676, 0.19904859564646338, 0.24160924566666853, 0.21180742960463084, 0.19752919003371894, 0.1985147197739714, 0.20145608495781187, 0.17867265831375934, 0.2442500196324796, 0.13041832622530403, 0.20521026245481722, 0.19301873686702953, 0.18504652720014658, 0.26348807520305384, 0.18481144230707602, 0.1971932356656173, 0.19235052056393498, 0.21139501333899957, 0.23249424240770544, 0.19108760327096963, 0.22510663579222945, 0.3146150998786237, 0.19491743141021012, 0.18926501109247407, 0.2066265656942965, 0.18890721540401978, 0.21778803671364855, 0.28453958412851765, 0.20230280031065195, 0.18587693664874472, 0.19245496724877054, 0.1644219305591882, 0.19255831087770325, 0.16496430828434716, 0.1381754471370319, 0.1557846595045398, 0.2033052545238252, 0.5165194977914049, 0.20876620525021394, 0.19967247202031735, 0.38523431193804725, 0.3392860059950097, 0.19257114880254922, 0.16355011144018805, 0.33160520817351213, 0.419159641963054, 0.20566304281288872, 0.18178352507852646, 0.18253082296466716, 0.1767912769482033, 0.19142643737053444, 0.19528873003425062, 0.1804442304199645, 0.1837879845591276, 0.1931488277511354, 0.07530764952481384, 0.0795479586155814, 0.08243714335505137, 0.07509665624695949, 0.08593107421149415, 0.06876022132333459, 0.06930668727502431, 0.08169832134853461, 0.08419607562515852]}, "mutation_prompt": null}
{"id": "92d6f7e0-2e3b-4493-826c-69bab1997b27", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "2f2886d3-816c-48ec-90f1-a61e7052d99a", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "881b014e-4abe-4ed4-a47e-dbb6970d6d0c", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "ab4cb23d-89ee-460b-9be0-222be7ca61d6", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "01f9067e-346f-4fb2-9850-10f9cf71a9d2", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "767ee410-1948-4dd1-a082-9e43e94d4945", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "f0cd6a38-fc3b-4c5d-99b1-06ee3d1b02b6", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "45a072e9-4f14-46dd-8518-f2d88d0f662b", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "fb3d18d5-ee70-4f58-8fa3-e976698a89c4", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "2c75ab37-3436-47c9-b5b5-6f22dc4b1cfb", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "c7ee7561-d793-4c06-ab62-aa951100ef58", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "f2f3f56c-e99b-41ec-ac96-67bc3e30b700", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "582809dd-1268-45e0-ad53-7a5e5b304b35", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "ea5be100-3910-4a6a-aeaf-96e01ffa62d5", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "6cea3463-97ea-4305-a8ca-c7775ce77e4c", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "666ebd4e-45a6-4b3e-a406-c0240109abde", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "30b34196-7539-4ba5-8171-0ada8a031f05", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "8cec7c63-11fa-4355-a9e6-8790c90a291b", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "95279d2b-fd64-4abc-9782-978dfaa5b4b9", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "34537376-beb9-4151-b18d-491df3f842a7", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "dac33b9d-e7a1-47e5-8432-9b93c671cda9", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "62eeb225-765a-443f-8eb7-f055347c5ba5", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "8c8c2bc6-5d5a-481b-bae9-1bffd2685a0d", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "37302f2d-16fb-48de-9901-1e7207188541", "solution": "import numpy as np\n\nclass ImprovedHybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 4)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.w = 0.7\n        self.c1_init = 1.5\n        self.c2_init = 1.5\n        self.c1_end = 2.5\n        self.c2_end = 2.5\n        self.adaptive_levy_rate = 0.95\n        self.levy_beta = 1.5\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def dynamic_leader_selection(self, fitness_values):\n        probabilities = np.exp(-fitness_values / np.sum(fitness_values))\n        idx = np.random.choice(np.arange(self.swarm_size), p=probabilities / probabilities.sum())\n        return idx\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w\n            c1 = self.c1_init + (self.c1_end - self.c1_init) * (evals / self.budget)\n            c2 = self.c2_init + (self.c2_end - self.c2_init) * (evals / self.budget)\n\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            leader_index = self.dynamic_leader_selection(fitness_values)\n            dynamic_leader_position = self.position[leader_index]\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (dynamic_leader_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            new_position = self.position + self.velocity\n            if np.random.rand() < self.adaptive_levy_rate:\n                levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n                new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "ImprovedHybridAQPSO", "description": "Improved Hybrid AQPSO with adaptive parameters and dynamic swarm topology for faster convergence.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities contain NaN').", "error": "ValueError('probabilities contain NaN')", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {}, "mutation_prompt": null}
{"id": "4b041b63-8dab-4c74-b75a-e96cba733335", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "e104447d-467b-432b-a510-94b3260a0071", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "911cf598-0315-45b5-868d-1650404d8d01", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "505031eb-a8b5-4296-b571-e28619f536eb", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "155236cf-37f3-4746-a573-d5f639148739", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "f2831d76-4e5e-415f-ad5a-fba0785d0c96", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "7897ff5d-92d9-4c0e-a08c-c89461131054", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "108e4b70-71c7-4ff5-8eba-433d04f95044", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "47fc542a-5968-46ce-84ca-22f6ff01fa47", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "d67f1c19-949c-4bf4-a250-c2bbe5608333", "solution": "import numpy as np\n\nclass HybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5  # Parameter for Lévy flight\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "HybridAQPSO", "description": "Hybrid Adaptive Quantum PSO (HAQPSO) integrates quantum inspired update with Lévy flights for enhanced exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.45785894950043005, 0.46512600479480193, 0.4608838217068647, 0.464319927060461, 0.44570676163388234, 0.43750698491703965, 0.43796975580414366, 0.44784855076630925, 0.44370285191814773, 0.021455614399057077, 0.035978805837918126, 9.999999999998899e-05, 0.05609102340637051, 0.040783979833170614, 9.999999999998899e-05, 9.999999999998899e-05, 0.03127857479680918, 9.999999999998899e-05, 0.1437235419609202, 0.09734634662986186, 0.12298001532475811, 0.115396538724855, 0.14839842375964418, 0.09087066644103414, 0.11600501385145656, 0.13062228235860207, 0.12502053331467144, 0.10737520717238092, 0.09130897350625822, 0.1099866656152968, 0.11570588234061974, 0.09647894993597383, 0.09574494031014091, 0.11634939021699853, 0.097409362116059, 0.11521364952573054, 0.9809913455384593, 0.9861147702005743, 0.9854342320278104, 0.973054178191255, 0.9856500256898342, 0.9841807562497789, 0.9854466906638245, 0.98458173176318, 0.9794971570101226, 0.29901555241916933, 0.2859146554338957, 0.28753539365671454, 0.2872603832167179, 0.28423112010157614, 0.28524221722293364, 0.29666630964609164, 0.26120565234626214, 0.29352076829000284, 0.1692836071486854, 0.5498883396055694, 0.20819070673727547, 0.21000019132702097, 0.20340258734160777, 0.20900560609395213, 0.13074989272950388, 0.45355529130525696, 0.5896399058539066, 0.12303112126105731, 0.11623483622183017, 0.1472220836949154, 0.10583077180127565, 0.11409348736441893, 0.18353809982768032, 0.15671169926919337, 0.22953091531233194, 0.12955370871717697, 0.157916858408505, 0.09418136316764503, 0.22300952083256698, 0.1357648523704591, 0.14832018391017232, 0.11675681958081696, 0.117123458090723, 0.14394950005614704, 0.178972396106981, 0.02327977812342885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035941460091440947, 9.999999999998899e-05, 0.012201658474998878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0631698787595687, 0.057223596030026025, 0.05616338694787082, 0.08544220541062464, 0.11321674722009867, 0.02661309693408076, 0.027935901526661144, 0.03526474284595971, 0.06314335382139558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01071955178163786, 0.005792183646981863, 0.0014940059825814256, 9.999999999998899e-05, 0.0041980913273979015, 0.001739780598654428, 0.09955959777693191, 0.02280010408804578, 0.12298256048336043, 0.0463504940453755, 0.11521750831395472, 0.11556087494772915, 0.05862661389850532, 0.08878162724475092, 0.06556343908755224, 0.4223526210159416, 0.40763362110726653, 0.41367455903895267, 0.406888745821849, 0.4230464366798423, 0.4137256891438732, 0.4077170340862687, 0.40818708958659855, 0.40835445349008515, 0.09519548739621009, 0.07636538065698806, 0.08786028570156945, 0.10032938821304438, 0.09998489059803928, 0.10216566999163967, 0.10067956126214772, 0.12864019817114003, 0.11388431417146216, 0.16417616168648674, 0.177617495494234, 0.22135218889827624, 0.22758683407657776, 0.17221197670759192, 0.2243783168125072, 0.14895687123908263, 0.23901769937658612, 0.20015243331005028, 0.3051289485064145, 0.30269426993822157, 0.3075836975014926, 0.2818334487000823, 0.2965007285171004, 0.28653098057167303, 0.2921866350294783, 0.3040138939311451, 0.30425319607057977, 0.20047128867617625, 0.19994571689108365, 0.20230155270298344, 0.2362855986662391, 0.20616865818122687, 0.19747267286836256, 0.20983711777807812, 0.21803601449462906, 0.14684460924423182, 0.20291362549250402, 0.21823282043699233, 0.19737502676160323, 0.21672267398125244, 0.20006379689097675, 0.20448490192783353, 0.26231858448034406, 0.2100855995850709, 0.21381583349948663, 0.18534234441346276, 0.19312022216255598, 0.19241421351879473, 0.19121687010439037, 0.2244073637650833, 0.18123632269409795, 0.20770491777443778, 0.20074768803328302, 0.20545795476950857, 0.12631948981107655, 0.18691515565613692, 0.7433269716933429, 0.16195527363554552, 0.19609705974723401, 0.1667227875268933, 0.18964389790855296, 0.1594234927450794, 0.7043589491283461, 0.35911207454549965, 0.20803010500060282, 0.21361615122859, 0.6205403646519088, 0.28066447085490975, 0.15321761501423792, 0.16301658152259713, 0.12650951898917717, 0.3511957578413174, 0.18340889513511827, 0.18191643838153837, 0.19814351798574625, 0.19163181189762535, 0.19531172873114988, 0.19392930948227083, 0.20163642056497566, 0.19420334051178467, 0.19131513592855698, 0.08618550642645673, 0.08053462514752974, 0.08296822486697386, 0.08181951119177688, 0.0784481722860435, 0.07682873500470777, 0.09821711584305848, 0.080484445651681, 0.07504998903205051]}, "mutation_prompt": null}
{"id": "26cffef5-7412-499b-9bd1-7a7549d8a55a", "solution": "import numpy as np\n\nclass EnhancedAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.4\n        self.c2_base = 1.8\n        self.learning_rate_decay = 0.99\n        self.chaos_factor = 0.25\n        self.levy_beta = 1.3\n        self.phase_switch_ratio = 0.5\n\n    def levy_flight(self, size, phase):\n        beta = self.levy_beta if phase == 1 else self.levy_beta / 2.0\n        sigma1 = pow((1.0 + beta) * np.math.gamma((1.0 + beta) / 2.0) / \n                     (np.math.gamma(1.0 + beta) * beta * pow(2.0, ((beta - 1.0) / 2.0))), 1.0 / beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        phase_one_budget = int(self.budget * self.phase_switch_ratio)\n        \n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            \n            c1 = self.c1_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            c2 = self.c2_base * (self.learning_rate_decay ** (evals / self.swarm_size))\n            \n            cognitive_component = c1 * r1 * (self.personal_best_position - self.position)\n            social_component = c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n            \n            current_phase = 1 if evals < phase_one_budget else 2\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim), current_phase)\n            new_position += levy_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAQPSO", "description": "Enhanced Quantum PSO with Dynamic Adaptive Parameters and Multi-Phase Lévy Strategy for Accelerated Convergence.", "configspace": "", "generation": 71, "fitness": 0.19091150740418322, "feedback": "The algorithm EnhancedAQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.36803574242957005, 0.3670791532663109, 0.37267372077471195, 0.37131121724512195, 0.38525005892882314, 0.3899311154653813, 0.37472470054056384, 0.4005804202664639, 0.4420073834393201, 0.008832360650185556, 0.008882660095709927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01216687553337159, 0.014892624715245772, 9.999999999998899e-05, 0.105828248305876, 0.10052509834547285, 0.12082383891141091, 0.10836118311210463, 0.08471704787404855, 0.0696091481130674, 0.08512983271791541, 0.10443500051046173, 0.10379994662601044, 0.08216979820077452, 0.09010971590646821, 0.08026653831081787, 0.08583440997536729, 0.0813171733740008, 0.0935007917651357, 0.08827077088497393, 0.0729853607871539, 0.08913585432009918, 0.9820985065922351, 0.9855134487526316, 0.9873641386801711, 0.9765623466437376, 0.9764171145431864, 0.9747776938831072, 0.9879872297782393, 0.9877660160952277, 0.9814603300929976, 0.2265697677013282, 0.21533995152934116, 0.21564518703105118, 0.24396903501485223, 0.22038369684511194, 0.24194752513606121, 0.2218677666373221, 0.2345992861091113, 0.2227176540306326, 0.29105960021243005, 0.21025508890259936, 0.2766193745973373, 0.20130928798250147, 0.31608570115667245, 0.2011158878259065, 0.24203756186069525, 0.22907815903591788, 0.28121130221700663, 0.08680020965792068, 0.12220789569147705, 0.10602160987410902, 0.08209096461835075, 0.11476702835907693, 0.1076474662863417, 0.1576731934357507, 0.10459441659884072, 0.15523929931111002, 0.13122646363750412, 0.11000343523928036, 0.11462376818539088, 0.1299556253109897, 0.1142861505752224, 0.13615784464427438, 0.12473132296112976, 0.06883925831156612, 0.10383154336777678, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04824868868166865, 0.03523400233122598, 0.10815073066440506, 0.0468201676440172, 0.0924271855445955, 0.019562878851961396, 0.02565668033550572, 0.0454551550839879, 0.05130851198405639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06083387333828383, 0.05614181518624484, 0.07934973037883686, 0.08800571381372169, 0.0904169756143387, 0.012215232740768855, 0.05329883967738425, 0.043723118905135916, 0.05648393565260734, 0.3485322145396639, 0.37573017153549304, 0.373301386893819, 0.3565607095285265, 0.3618721151321591, 0.34417043973246886, 0.35491237255373165, 0.36224875719040606, 0.3451086086390618, 0.08645531844600851, 0.07981988211803437, 0.09076969403426305, 0.07774469913344673, 0.08938595115509784, 0.10312739458343823, 0.08348445998411225, 0.07649447049858626, 0.10536291705147838, 0.18097473611085801, 0.17618733420202604, 0.13409877363283318, 0.15662749023537048, 0.18705790640682485, 0.1793108008290224, 0.19385385058106208, 0.1560042701879789, 0.13879959590873625, 0.2202814858393597, 0.26078421847246114, 0.2695823804505134, 0.2466772648996508, 0.24915530456390012, 0.23101293729639572, 0.27577891539261334, 0.2597242686653627, 0.2615096114039236, 0.17250659357428744, 0.1700664605886686, 0.21240140397086205, 0.1430154688994919, 0.17476782300709803, 0.17528680953293474, 0.19179722439686064, 0.20344525003323422, 0.17484831945796575, 0.1870764153403044, 0.19721067783655832, 0.18683653340054718, 0.19930132250531718, 0.18974494179425982, 0.17548656183097666, 0.1783123255432718, 0.18015650380581139, 0.200496849154994, 0.17743225987893296, 0.18573295243974308, 0.2034175957106762, 0.17212436351841298, 0.20265151773858736, 0.1868034259434529, 0.1799420174257863, 0.1773618482730981, 0.20455833816298763, 0.5213678192321869, 0.18559591920613416, 0.16210356292440264, 0.5422475809554536, 0.19510106571816188, 0.1914909119511523, 0.13752683088768314, 0.16147884686981884, 0.20403142659911933, 0.3925430324982664, 0.20638274810504498, 0.16407032433033186, 0.3097516092327822, 0.3824907090902526, 0.15978379104800078, 0.2057625050917148, 0.19882039485113068, 0.37600597012470593, 0.1782295839009057, 0.18716069506941624, 0.19646321088127683, 0.19025597139531336, 0.17522887566601508, 0.1954942754562401, 0.19003303077775613, 0.16715791245317835, 0.18973692835944855, 0.07574655625939541, 0.07192569891027711, 0.0722697959804236, 0.0736991395073201, 0.07438927816862939, 0.07793797736377128, 0.07960456015201833, 0.07753796774829735, 0.09089739816953313]}, "mutation_prompt": null}
{"id": "210202a2-9234-4cc5-8d66-a383814a1961", "solution": "import numpy as np\n\nclass EnhancedHybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1  # New: Dynamic adjustment factor\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n            \n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedHybridAQPSO", "description": "Enhanced Hybrid AQPSO with dynamic swarm adaptation, adaptive parameter control, and chaotic exploration for improved convergence.", "configspace": "", "generation": 72, "fitness": 0.2322565774206692, "feedback": "The algorithm EnhancedHybridAQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "4eb7e3f0-96e6-462d-9abc-d89d10f0b4a2", "metadata": {"aucs": [0.46506811346920574, 0.46963021330056554, 0.4633956036915955, 0.44628828419644906, 0.4559323714644544, 0.45825215899877114, 0.4491960549211155, 0.4462294452263642, 0.437120970852936, 0.06071306852670222, 0.03752022401736321, 0.024879052399652934, 0.03384061775170211, 0.04429197578317268, 0.03436880878292725, 0.03909621476175906, 0.042124505199361395, 0.06784381088702063, 0.13631462231171865, 0.10768765627348675, 0.1347791767192542, 0.13649824408379863, 0.10937817053699694, 0.09295396519025667, 0.11283507019084116, 0.11406259482564651, 0.1130953061808273, 0.10720161351602386, 0.09521481385378283, 0.08682752036967634, 0.07732140565453594, 0.1047922282073177, 0.08755796238487767, 0.13475891715255384, 0.13153355518893217, 0.09558906957300328, 0.8301630107858192, 0.8978933298114539, 0.874383386266038, 0.8236454336531405, 0.857563772133421, 0.8626130754164784, 0.8984333775975973, 0.8920427795092736, 0.8411839828676672, 0.295334412584738, 0.3139280682165507, 0.24733214617530075, 0.3133554213355436, 0.2958147371045472, 0.3027061444678196, 0.29808173187716125, 0.2907470755129433, 0.28674791807746847, 0.43384449881686205, 0.514865719540031, 0.3406491688879987, 0.26439344622343064, 0.3310943305929289, 0.20453437240674321, 0.5143347363822621, 0.46091632972913565, 0.4431315863232336, 0.1607278479860259, 0.15134041202071458, 0.14434623144480574, 0.13017797932113695, 0.16773673446296233, 0.18341286410480162, 0.18650899758492512, 0.1599805594310697, 0.15464670893123655, 0.2188322879032154, 0.16006511928894362, 0.19556869757616535, 0.16195758454852438, 0.1810930265550995, 0.1604512200620678, 0.23308973099521013, 0.166201192381641, 0.11834983373111518, 0.012617295064397016, 0.02759050490015358, 0.01769484614581629, 0.04324035828419526, 0.0057910929595662575, 9.999999999998899e-05, 0.00744277269644622, 9.999999999998899e-05, 0.0010705580852791163, 0.12730629838792773, 0.17806155790016986, 0.12234664727698297, 0.09928171553967846, 0.08134888546420938, 0.07606620204587944, 0.0819346308746206, 0.09737095823612307, 0.11590203342921557, 0.0014377672063302649, 0.009226999152194715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01652585992368949, 0.003657626822980764, 0.00150585881909715, 0.10890969627708436, 0.06510154891619113, 0.07851683315804625, 0.06808286625975091, 0.13023894460409025, 0.09261194092507108, 0.10987445935438556, 0.10288364248585258, 0.07150564087002731, 0.4092942435155452, 0.414125560596987, 0.43955276207956273, 0.41364812150414987, 0.41015688391702776, 0.41726414435720016, 0.4347203448274527, 0.4105650867412727, 0.4102946854175821, 0.0847497828441044, 0.08955475746416197, 0.07401355417867639, 0.10907268735508091, 0.12899621042441956, 0.12681277478092523, 0.1397765335382266, 0.10941580875765489, 0.10007986558204607, 0.15113531457177687, 0.22443958837997113, 0.23694855300875206, 0.23638000042329865, 0.2595212965779351, 0.20869603956805394, 0.21990889886786302, 0.20332868261664327, 0.13761195187444408, 0.2514992267148064, 0.2789125954763618, 0.2932408622416032, 0.29202975364965644, 0.29157306601891275, 0.3021424272648212, 0.2922082264975897, 0.29903295514910266, 0.29077043257852564, 0.17404022144546782, 0.18021904089087315, 0.19569448740011286, 0.21567970415435822, 0.21809387369396105, 0.2132379865780999, 0.20980910506011252, 0.2522180818632681, 0.21837947672380564, 0.2591898064357385, 0.23424892231293137, 0.20236463837172136, 0.21676811806754526, 0.2264317301433303, 0.2159617622503739, 0.20035220673561116, 0.20584143193244808, 0.20176809051851585, 0.1997614100385533, 0.18951251726976148, 0.20160718506906705, 0.22124408841749021, 0.22220228918253104, 0.19013191798756723, 0.21760496402217078, 0.2629311077501659, 0.17888239265730477, 0.18075488916770666, 0.18298805617534764, 0.18241950084516034, 0.6484435925301096, 0.19667227968442957, 0.6222675773471188, 0.5622049981442485, 0.16754140195788936, 0.6162627575758344, 0.5136195006940292, 0.15329456889165272, 0.47472314511192015, 0.4942056173131325, 0.48934199238861953, 0.527828907175015, 0.38570543676209923, 0.4973429262278538, 0.5482329768618399, 0.18943999470642936, 0.19399794589037045, 0.18365758945537325, 0.17763668704978042, 0.20117199044925682, 0.17824345495503857, 0.17465415254959804, 0.1911140948287603, 0.1899002887406558, 0.09074106894266465, 0.07316749224476138, 0.06715375299466109, 0.08374777913651976, 0.08419909427459005, 0.09722527577820983, 0.07526969354088742, 0.0844723500887854, 0.09796720691376226]}, "mutation_prompt": null}
{"id": "ce09988a-3baa-4c7f-b713-666af31c5b45", "solution": "import numpy as np\n\nclass EnhancedHybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1  # New: Dynamic adjustment factor\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n            \n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedHybridAQPSO", "description": "Enhanced Hybrid AQPSO with dynamic swarm adaptation, adaptive parameter control, and chaotic exploration for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "210202a2-9234-4cc5-8d66-a383814a1961", "metadata": {"aucs": [0.46506811346920574, 0.46963021330056554, 0.4633956036915955, 0.44628828419644906, 0.4559323714644544, 0.45825215899877114, 0.4491960549211155, 0.4462294452263642, 0.437120970852936, 0.06071306852670222, 0.03752022401736321, 0.024879052399652934, 0.03384061775170211, 0.04429197578317268, 0.03436880878292725, 0.03909621476175906, 0.042124505199361395, 0.06784381088702063, 0.13631462231171865, 0.10768765627348675, 0.1347791767192542, 0.13649824408379863, 0.10937817053699694, 0.09295396519025667, 0.11283507019084116, 0.11406259482564651, 0.1130953061808273, 0.10720161351602386, 0.09521481385378283, 0.08682752036967634, 0.07732140565453594, 0.1047922282073177, 0.08755796238487767, 0.13475891715255384, 0.13153355518893217, 0.09558906957300328, 0.8301630107858192, 0.8978933298114539, 0.874383386266038, 0.8236454336531405, 0.857563772133421, 0.8626130754164784, 0.8984333775975973, 0.8920427795092736, 0.8411839828676672, 0.295334412584738, 0.3139280682165507, 0.24733214617530075, 0.3133554213355436, 0.2958147371045472, 0.3027061444678196, 0.29808173187716125, 0.2907470755129433, 0.28674791807746847, 0.43384449881686205, 0.514865719540031, 0.3406491688879987, 0.26439344622343064, 0.3310943305929289, 0.20453437240674321, 0.5143347363822621, 0.46091632972913565, 0.4431315863232336, 0.1607278479860259, 0.15134041202071458, 0.14434623144480574, 0.13017797932113695, 0.16773673446296233, 0.18341286410480162, 0.18650899758492512, 0.1599805594310697, 0.15464670893123655, 0.2188322879032154, 0.16006511928894362, 0.19556869757616535, 0.16195758454852438, 0.1810930265550995, 0.1604512200620678, 0.23308973099521013, 0.166201192381641, 0.11834983373111518, 0.012617295064397016, 0.02759050490015358, 0.01769484614581629, 0.04324035828419526, 0.0057910929595662575, 9.999999999998899e-05, 0.00744277269644622, 9.999999999998899e-05, 0.0010705580852791163, 0.12730629838792773, 0.17806155790016986, 0.12234664727698297, 0.09928171553967846, 0.08134888546420938, 0.07606620204587944, 0.0819346308746206, 0.09737095823612307, 0.11590203342921557, 0.0014377672063302649, 0.009226999152194715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01652585992368949, 0.003657626822980764, 0.00150585881909715, 0.10890969627708436, 0.06510154891619113, 0.07851683315804625, 0.06808286625975091, 0.13023894460409025, 0.09261194092507108, 0.10987445935438556, 0.10288364248585258, 0.07150564087002731, 0.4092942435155452, 0.414125560596987, 0.43955276207956273, 0.41364812150414987, 0.41015688391702776, 0.41726414435720016, 0.4347203448274527, 0.4105650867412727, 0.4102946854175821, 0.0847497828441044, 0.08955475746416197, 0.07401355417867639, 0.10907268735508091, 0.12899621042441956, 0.12681277478092523, 0.1397765335382266, 0.10941580875765489, 0.10007986558204607, 0.15113531457177687, 0.22443958837997113, 0.23694855300875206, 0.23638000042329865, 0.2595212965779351, 0.20869603956805394, 0.21990889886786302, 0.20332868261664327, 0.13761195187444408, 0.2514992267148064, 0.2789125954763618, 0.2932408622416032, 0.29202975364965644, 0.29157306601891275, 0.3021424272648212, 0.2922082264975897, 0.29903295514910266, 0.29077043257852564, 0.17404022144546782, 0.18021904089087315, 0.19569448740011286, 0.21567970415435822, 0.21809387369396105, 0.2132379865780999, 0.20980910506011252, 0.2522180818632681, 0.21837947672380564, 0.2591898064357385, 0.23424892231293137, 0.20236463837172136, 0.21676811806754526, 0.2264317301433303, 0.2159617622503739, 0.20035220673561116, 0.20584143193244808, 0.20176809051851585, 0.1997614100385533, 0.18951251726976148, 0.20160718506906705, 0.22124408841749021, 0.22220228918253104, 0.19013191798756723, 0.21760496402217078, 0.2629311077501659, 0.17888239265730477, 0.18075488916770666, 0.18298805617534764, 0.18241950084516034, 0.6484435925301096, 0.19667227968442957, 0.6222675773471188, 0.5622049981442485, 0.16754140195788936, 0.6162627575758344, 0.5136195006940292, 0.15329456889165272, 0.47472314511192015, 0.4942056173131325, 0.48934199238861953, 0.527828907175015, 0.38570543676209923, 0.4973429262278538, 0.5482329768618399, 0.18943999470642936, 0.19399794589037045, 0.18365758945537325, 0.17763668704978042, 0.20117199044925682, 0.17824345495503857, 0.17465415254959804, 0.1911140948287603, 0.1899002887406558, 0.09074106894266465, 0.07316749224476138, 0.06715375299466109, 0.08374777913651976, 0.08419909427459005, 0.09722527577820983, 0.07526969354088742, 0.0844723500887854, 0.09796720691376226]}, "mutation_prompt": null}
{"id": "89ab5983-f48c-45d5-abc3-997c5f05195f", "solution": "import numpy as np\n\nclass EnhancedHybridAQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.2\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.gradient_boost_factor = 0.3  # New: Stochastic gradient boosting factor\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        gradient_memory = np.zeros((self.swarm_size, self.dim))  # New: Memory for stochastic gradients\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n            \n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            stochastic_gradient = self.gradient_boost_factor * gradient_memory + np.random.normal(0, 0.1, (self.swarm_size, self.dim))\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + stochastic_gradient)\n            \n            gradient_memory = 0.9 * gradient_memory + 0.1 * (self.velocity)  # New: Update gradient memory\n\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedHybridAQPSO", "description": "Enhanced Hybrid AQPSO with stochastic gradient boosting and adaptive inertia for rapid convergence.", "configspace": "", "generation": 74, "fitness": 0.20913506563727757, "feedback": "The algorithm EnhancedHybridAQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "210202a2-9234-4cc5-8d66-a383814a1961", "metadata": {"aucs": [0.37629266793360094, 0.3655685956796364, 0.3707622755165202, 0.36847847045048343, 0.37570401835886, 0.3752191374421443, 0.3688770196652297, 0.36136803668570705, 0.3965741783889435, 0.016015052275499708, 0.020598075855803977, 0.017515415185243133, 0.0011683763575541795, 0.03835345295643677, 9.999999999998899e-05, 0.01555315136871882, 0.04255249277925799, 0.02823129713463368, 0.10768532101508788, 0.10573920960339622, 0.09840560082956595, 0.11111956736277118, 0.11066114363494495, 0.11182043912967188, 0.1091359599816113, 0.10622259979528681, 0.11284768813687607, 0.09550783168904309, 0.09139336810340415, 0.08677032495969939, 0.09064155775160054, 0.09827040740281279, 0.08020210034440411, 0.08552724851633242, 0.10484354763934556, 0.0855916368462527, 0.897358018930031, 0.9248904870133837, 0.906732196146898, 0.8700522535102903, 0.8896231772179234, 0.915832730796381, 0.9167905505660461, 0.9190562541959425, 0.9090304873061492, 0.25605143187834056, 0.24190494970755338, 0.2240288178933817, 0.2533055643500819, 0.24516543505313526, 0.23367222499637652, 0.24282517082006738, 0.25684201367237625, 0.24137805953846603, 0.30888063822535183, 0.3059105771685324, 0.3060240499736048, 0.2452831501019448, 0.22501687484759447, 0.2966905733999523, 0.3007108047575826, 0.29344693842552394, 0.30396206112365587, 0.13825625981227763, 0.15086108813688592, 0.12150065235138141, 0.10834025098434763, 0.1525259883436545, 0.12717032121080973, 0.15747799012437302, 0.14350913720088831, 0.14333444552432661, 0.13904702143801495, 0.12245746570809168, 0.11548935354650292, 0.15926288020833723, 0.15300762867215179, 0.16878076511480644, 0.1511220125571715, 0.1353687446126436, 0.14429686683727594, 0.02967891001386047, 0.0007110805574637169, 0.04646520028836587, 0.035084845255235586, 9.999999999998899e-05, 0.009958498921737502, 0.002310537643046673, 9.999999999998899e-05, 0.00032796229907894325, 0.11103895861555502, 0.16874531078260369, 0.10856553940453273, 0.09234449882382889, 0.12053439269094157, 0.07222578074475405, 0.12467699900516982, 0.10010453094664717, 0.10259864506313277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020058586303866477, 9.999999999998899e-05, 0.08256361911437582, 0.053215151031720254, 0.07116740031457702, 0.08628295292568255, 0.0796508526612939, 0.08279634866753127, 0.08339020380072815, 0.0847608131318166, 0.05731433896421201, 0.36686671042264574, 0.3625242700754334, 0.36374204245541764, 0.3466845122613579, 0.37695876540001294, 0.35114381199521283, 0.36321560727178603, 0.3579377402836854, 0.3774099816377884, 0.08381205971393157, 0.06876661812030271, 0.08966322963918771, 0.10772864408561522, 0.09817581112952556, 0.10757926181365396, 0.10560272180831975, 0.08966350410601553, 0.11042355424090877, 0.16895288964634658, 0.17257256354314054, 0.19218554803753374, 0.1653853809062319, 0.17680515059234891, 0.1958723927332633, 0.1712370197939419, 0.20933149663534412, 0.20246910893701542, 0.2646677745118826, 0.2624812719851115, 0.269059734727201, 0.260789474364422, 0.26323128838710497, 0.27682935137598486, 0.2572631046165853, 0.2576208711216976, 0.25560204968247624, 0.19870415544340503, 0.19434029465692215, 0.16963949637800013, 0.21277291254052788, 0.20488477798603622, 0.20869665962926187, 0.20606222150959785, 0.21068559318482893, 0.20382874588802158, 0.1982051486634765, 0.21379750725135005, 0.2296717576288293, 0.2045814883652466, 0.20558398435494352, 0.20929786008658213, 0.20038917354780195, 0.20621109850315555, 0.21003352512536155, 0.22382850527464038, 0.18498843472439308, 0.19423504710000705, 0.20037952824116678, 0.1894835159934668, 0.17894950501509577, 0.20567136975194467, 0.2041657687240973, 0.18915724081264285, 0.17978461877492846, 0.18184837843633217, 0.18073535871179813, 0.15395374594662314, 0.19000628726644386, 0.521392697993501, 0.49348049823010665, 0.42452019002648644, 0.48579171889644535, 0.4534879275118321, 0.4422174722786434, 0.43323862658769285, 0.4377297476880345, 0.41129165042704363, 0.45502393575943556, 0.16484502910204069, 0.485532899356933, 0.4462490418663344, 0.1717999910238801, 0.19058622395707248, 0.1924158235504082, 0.18380903737450593, 0.17651086188322007, 0.1832151788899712, 0.17917801502856912, 0.18202078012393785, 0.17902034562611568, 0.0854634822561644, 0.08776837739423804, 0.07455121771529227, 0.08033545118101049, 0.08482478787278702, 0.08630734185704625, 0.08590484843952295, 0.08967681551783513, 0.08899154991184277]}, "mutation_prompt": null}
{"id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 75, "fitness": 0.23368155532910928, "feedback": "The algorithm EnhancedAdaptiveSwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "210202a2-9234-4cc5-8d66-a383814a1961", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "a53a713d-85c0-4213-8670-4d06396955e3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "88451512-cc56-4297-8cd7-33342c687758", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "12e63050-b69e-4357-bd4e-63a8189bcb94", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "634957ae-3a85-4437-9e1a-de1d88824b38", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "31394ffb-898a-49aa-b0e5-d269deedc66a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "3ca933f0-aad3-4f86-ba72-eb83cbb5fa7a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "c397ce6e-02ba-48cf-bd29-446cc489c439", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "36ddbcf8-04f3-4447-899b-c157784610ef", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "beac8e58-cdbe-46c9-bcd4-7d366d5dd6ae", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "0759970a-066d-4fbc-9ab5-0412a599dc71", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "1cfc38ec-11c3-4a9c-aac1-8bf78048289f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "ffd3ec24-8144-4cf0-a43a-7570107dfb13", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "97b9dc65-2ae1-46f1-9055-911dc2aff21f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "494c9b6c-dca2-43b5-a88f-f9e395cba69e", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40 + (dim * 4)  # Slightly smaller swarm for efficiency\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.w_max = 0.8\n        self.w_min = 0.3\n        self.c1_base = 1.5\n        self.c2_base = 2.5\n        self.q_factor = 0.1  # Quantum potential factor\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n\n    def quantum_potential(self, size):\n        q_field = np.random.normal(0, self.q_factor, size)\n        return q_field\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component)\n\n            quantum_component = self.quantum_potential((self.swarm_size, self.dim))\n            new_position = self.position + self.velocity + quantum_component\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "QuantumInspiredAdaptiveSwarm", "description": "Quantum-Inspired Adaptive Swarm introduces quantum potential fields and adaptive learning rates for accelerated convergence.", "configspace": "", "generation": 89, "fitness": 0.2170501819449703, "feedback": "The algorithm QuantumInspiredAdaptiveSwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.18.", "error": "", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.4323059284248365, 0.4103947540902213, 0.425442687638212, 0.4466194902670355, 0.4268704514745212, 0.4304516151067975, 0.4257022702491706, 0.40836775323918206, 0.42930947259782337, 0.053676891559993556, 0.07485861947147476, 0.07566084628805037, 9.999999999998899e-05, 9.999999999998899e-05, 0.012679331799327564, 0.0037670982375067608, 0.0298725019924454, 0.0008388979166702448, 0.12760699155324806, 0.09735673848094906, 0.0931909739369714, 0.08161118045922866, 0.10974795656559233, 0.12266194265199681, 0.11359445387429079, 0.12080656068975781, 0.10861048677376461, 0.10070908532940526, 0.10190519118044139, 0.11507442993442019, 0.09556528469820402, 0.07859213922291597, 0.09742786944105575, 0.10207705401851075, 0.11709182064972734, 0.08368712015772561, 0.8202312364314553, 0.8154815821509551, 0.8040686786585082, 0.7745287090559315, 0.7240384659043566, 0.7645885362620259, 0.8059496233586592, 0.85524638594317, 0.8512223716599514, 0.2845243503228808, 0.2796944438476098, 0.263784615613572, 0.3169846469764198, 0.2932919178420371, 0.27721860724771274, 0.3144676544899716, 0.2699367699592241, 0.30579371790363097, 0.32589848356954754, 0.5908215902978622, 0.3484105177683684, 0.33618324507899044, 0.26629917330260955, 0.2652004339050642, 0.16555991923619673, 0.17207762207497634, 0.24677492306784798, 0.2084339812756263, 0.11958912521260501, 0.12874341065768513, 0.13967254713729194, 0.1996208820218709, 0.10624677817271788, 0.15921016779414965, 0.1526149723439858, 0.14640602813286185, 0.18521296687807842, 0.17967644500454716, 0.18950430296606213, 0.18292375467399102, 0.18479287898235786, 0.1809691014478111, 0.1689892982985266, 0.18791479088897822, 0.15110915271665948, 0.05340637780822888, 0.06200366849522343, 0.006169100064662647, 0.031885306245566736, 0.033249167781004285, 0.026167394354109863, 9.999999999998899e-05, 9.999999999998899e-05, 0.022492697438554976, 0.09259553488981487, 0.08767699702054343, 0.13457435114501948, 0.09634093910981778, 0.1351402511354961, 0.10376391469058677, 0.1624031831530086, 0.10198854676317481, 0.09245281448647658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08432736340876013, 0.106251438720527, 0.10208980542487711, 0.0616126659271371, 0.09198867675384481, 0.09497807511283773, 0.10553366880580928, 0.10611524723930144, 0.06916847470254273, 0.39248263442218767, 0.4103242484017301, 0.4055946062137603, 0.3957601959123799, 0.39646774535591867, 0.3852323597302012, 0.3943794919659701, 0.39594315692252224, 0.40656905765536566, 0.09322861997204768, 0.07895792466656637, 0.06776096803332421, 0.12624647055897753, 0.07097724803728356, 0.11711924068679769, 0.12756354885217114, 0.10789535363511227, 0.08730469821989695, 0.17877214343478587, 0.2873938719110448, 0.19984619317475094, 0.18738934478012503, 0.23827691255365913, 0.1726964178868584, 0.23716432787203812, 0.2260884817832315, 0.22743799617930982, 0.2742105370863075, 0.2947173421086291, 0.2872740585505076, 0.279789475931838, 0.2788049049447229, 0.30648964069879203, 0.27975556379467204, 0.28245861232012737, 0.2832261605509294, 0.22548241294310312, 0.22390234798248898, 0.21581782439421393, 0.2328237214559994, 0.21683454299926985, 0.23564922240537511, 0.19480009839973167, 0.2389308618506797, 0.1958439589754324, 0.21334132262942962, 0.21254043324704774, 0.19922638870309117, 0.20402496452416918, 0.21708124988345157, 0.21504429545269588, 0.21648378779066724, 0.22750330246424255, 0.2135212960096522, 0.17989163232730165, 0.2281289769139172, 0.19456580181051275, 0.25003678224414405, 0.2304577340832744, 0.18313180628156966, 0.20352172353588271, 0.18822312236441197, 0.18121376106463272, 0.1662416131885307, 0.1842353256449475, 0.18266181512066448, 0.5550345974286995, 0.5521687258935246, 0.144771452558775, 0.14027309358318796, 0.16477883567355167, 0.5878741749317605, 0.6282896620113269, 0.15398658340900728, 0.495458041416764, 0.16461021939687803, 0.5284349783119656, 0.1471013521682406, 0.40279053431255196, 0.486806424548635, 0.4993104236566086, 0.20651394220682662, 0.17815938478342663, 0.20926591697987929, 0.17872447668633218, 0.17963811405836883, 0.18729381542423362, 0.18095921179118357, 0.1879179860427449, 0.1819585585732455, 0.09188236966582408, 0.08755024787113908, 0.08160804992528137, 0.09793983924162875, 0.0874983793528723, 0.07311819572417666, 0.07283379904298104, 0.09263060019419678, 0.073175274568956]}, "mutation_prompt": null}
{"id": "d2b88854-f3c7-42f0-9537-d0d96f4734d7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "25b4c340-9e06-4013-b967-5612922d34ac", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "c0c2b17d-5301-4724-abe5-98191dcf6bf8", "solution": "import numpy as np\n\nclass EnhancedAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1_base = 2.0\n        self.c2_base = 2.0\n        self.learning_rate_decay = 0.98\n        self.chaos_factor = 0.3  # Increased for enhanced chaos\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.1\n        self.adaptive_c1 = self.c1_base\n        self.adaptive_c2 = self.c2_base\n        self.memory_factor = 0.1  # New: Historical memory factor\n    \n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) / \n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)  # Initialize historical best\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)  # Additional random factor for historical memory\n\n            self.adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            self.adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = self.adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = self.adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)  # Historical exploration\n            \n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n            \n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n            \n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedAdaptiveSwarm", "description": "Enhanced Adaptive Swarm uses directed exploration with historical memory and adaptive chaos for rapid convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.42604913822284485, 0.44623128644487464, 0.4589498940869229, 0.44589077214008943, 0.4535084798384994, 0.4465043190297624, 0.45089938208975744, 0.4471863450289141, 0.4357668465796575, 0.03437217517058, 0.06277115832618818, 0.05107220318887318, 9.999999999998899e-05, 0.05047208541492232, 0.029435737752835256, 0.028354192544586154, 0.010599871487694368, 0.04773727368805669, 0.1372193363277684, 0.08379073081635435, 0.10311267069211794, 0.16251069110168537, 0.09923928590745468, 0.12847078512017018, 0.12048932100690457, 0.16828369327091564, 0.10062448331262808, 0.09555551276181673, 0.10956035923425222, 0.11871872305102515, 0.09820331006492666, 0.09380594798797903, 0.08953095216271101, 0.1116627572300728, 0.11698748889770572, 0.09306580069372061, 0.907869892798753, 0.9435660315856249, 0.9025432087272357, 0.890087956227185, 0.9060960053408692, 0.9154539087594562, 0.9041536900761694, 0.9219880084157427, 0.9292669878281289, 0.2870111111534739, 0.30310403327601454, 0.2751469375808334, 0.304292203340609, 0.29569541090440177, 0.285842901938796, 0.31162094916117034, 0.3047100394612059, 0.2977311123644416, 0.5216972949566369, 0.22402199029008174, 0.3298747031942444, 0.26277719028720437, 0.5391130914689077, 0.2030794463028195, 0.5526970750828661, 0.5546343146791961, 0.5163020858401861, 0.14987062927536443, 0.15389535845637126, 0.15296539858035085, 0.15551447082849046, 0.17447684364582328, 0.16344209672822874, 0.17547560090605807, 0.18211659456910756, 0.1625007704469108, 0.16441751925295411, 0.162234226336067, 0.15529595716480415, 0.18578940135811228, 0.19093813915448676, 0.16338343043165637, 0.18283383728250413, 0.1595858088067933, 0.12249902946201785, 0.04400252629646073, 9.999999999998899e-05, 0.03137248353177169, 0.039015942156085615, 0.0049161844749779915, 9.999999999998899e-05, 0.006246781218306352, 0.0023917153947222713, 9.999999999998899e-05, 0.14388423197232847, 0.19642129534019193, 0.1302558306404772, 0.08249016839342171, 0.08108764482523911, 0.03559806071013749, 0.0608020712199987, 0.07614154029196196, 0.16046424176208962, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031236607601654587, 0.005379417477638371, 9.999999999998899e-05, 0.013805623137400858, 9.999999999998899e-05, 9.999999999998899e-05, 0.007209040125317534, 0.1045961557320848, 0.08454287641660796, 0.07479784020530766, 0.10847765318030977, 0.1127024002949849, 0.08162749513238399, 0.1072974585663784, 0.09136293839445098, 0.0785508424414807, 0.41123153665292234, 0.4396598150814198, 0.4163055207394909, 0.41288054519538275, 0.4076120289939388, 0.39796243728857206, 0.41753308105011233, 0.4060929801166603, 0.42458837474032085, 0.10439808056095645, 0.10536726822294717, 0.0735662954194839, 0.12279895216429249, 0.10401968495730074, 0.13576250537305257, 0.09810436335460349, 0.11627215985480621, 0.10598404387379123, 0.22733417475219997, 0.21295277303498938, 0.26887252456963784, 0.20123755514239638, 0.22066931926001843, 0.25892041668136156, 0.22441817307070955, 0.16278866535205438, 0.22997018405400416, 0.2931991461088892, 0.2914586804163819, 0.30060590574519197, 0.281963488809846, 0.29268495513413495, 0.28999695862126573, 0.2908348735438345, 0.2963576617982754, 0.2859413046278919, 0.20849094630340104, 0.23008838193560155, 0.2183430374202333, 0.2129421119688243, 0.21256742071542, 0.22778692673130718, 0.19860458136066017, 0.2185172956497491, 0.18279733051423241, 0.22355494077760896, 0.22932047825362678, 0.20202796403323942, 0.2186597812621116, 0.22964499362051038, 0.24296274054642386, 0.2425496124790265, 0.21389284078013582, 0.2094171386918019, 0.199119402360468, 0.1900925449177021, 0.18354334251627902, 0.21112154061601263, 0.20643299436893148, 0.20129429608937044, 0.17011809378589315, 0.18855406535675467, 0.21793426132012128, 0.18331972709947308, 0.18520032440273704, 0.18487378585284342, 0.6130420142122526, 0.4416838519982683, 0.19648491694072567, 0.1404460957020659, 0.15150199035037804, 0.6417580085572512, 0.44874981372277545, 0.6066122063257239, 0.39598416796146263, 0.4631397694714273, 0.47333477179609906, 0.5793050626159483, 0.3963768214339679, 0.488825906485974, 0.5184958129819295, 0.18559969139582033, 0.18352157621773346, 0.17771503552863055, 0.19534202456002436, 0.1880054519893194, 0.1853331963964301, 0.18232437824342373, 0.17933580480727052, 0.17722288708826217, 0.08668020633740614, 0.09131571907050018, 0.11038899757317744, 0.09240728522361608, 0.08877059857341862, 0.0843663102499651, 0.08463080426434044, 0.0914480471692728, 0.08723756525280457]}, "mutation_prompt": null}
{"id": "2d40df1b-53bd-4405-a15f-d10d28ae49df", "solution": "import numpy as np\n\nclass DynamicHistoricalQuantumSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.3  # Adjusted for quicker convergence\n        self.c1_base = 2.0\n        self.c2_base = 1.5  # Adjusted for balance\n        self.chaos_factor = 0.25\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.2  # Enhanced for dynamic exploration\n        self.memory_factor = 0.2  # Enhanced historical memory\n        self.quantum_factor = 0.1  # New: Quantum position update\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) /\n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)\n\n            adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)\n\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            # Quantum-inspired update\n            quantum_jump = self.quantum_factor * np.sign(np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                           np.abs(self.position - self.global_best_position)\n            new_position += quantum_jump\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "DynamicHistoricalQuantumSwarm", "description": "Dynamic Historical Quantum Swarm integrates quantum-inspired position updates and adaptive memory to enhance convergence speed.", "configspace": "", "generation": 93, "fitness": 0.23748910816015303, "feedback": "The algorithm DynamicHistoricalQuantumSwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "266e27b2-8099-4e2b-bc77-2ddcc872ee58", "metadata": {"aucs": [0.4462404433449547, 0.43833984707846074, 0.4358955301084988, 0.4616403171860014, 0.45226324317108024, 0.4507495471269515, 0.4465589733591512, 0.4469424795033181, 0.43895033575099307, 0.005549524596405564, 0.04374307025065305, 0.029466124187861764, 0.00020669152098795607, 0.01408814482726628, 0.06315574695902271, 0.06718035369634712, 0.0035214760577436666, 0.013325828876051826, 0.15014744936424995, 0.0955654152319454, 0.13308308106444022, 0.10670980067049618, 0.11291272025289323, 0.11722096569116036, 0.12560832097920216, 0.10954786951321382, 0.11051600121112437, 0.08663890965496157, 0.10575473091010046, 0.09668640093581793, 0.1212139350685385, 0.10010034704956705, 0.1033512759128411, 0.09551612908075224, 0.10483029362555718, 0.10065313831453437, 0.9246313285724989, 0.9571424417123187, 0.9411613885604042, 0.9171074684279801, 0.9112522191434814, 0.9453322799453326, 0.9437449689733285, 0.9476833715539427, 0.9350718216255977, 0.2940028253845315, 0.301313843625737, 0.2790937561275104, 0.3053148662930957, 0.30724681086787153, 0.2960991369546073, 0.2951033346324109, 0.2876769715578754, 0.29001152474916814, 0.5484080495026684, 0.5770562604595522, 0.6437029269131037, 0.6093776998580545, 0.3270965284903611, 0.18910543492988385, 0.49324480500394297, 0.3181060687412871, 0.41638566425894086, 0.1335181424070292, 0.16345545486462865, 0.14805602171192456, 0.14705914377012919, 0.19731197780658283, 0.15831024691639672, 0.15867044684852594, 0.14426523889958187, 0.14698150615743966, 0.216051749922609, 0.10486822459416889, 0.1546150553382487, 0.16549221238016876, 0.1764667570466425, 0.15659636148257505, 0.1762494730897055, 0.11968656004596379, 0.16028966035887915, 0.0021836936942465357, 0.057876364376962974, 0.028275852305409743, 0.036951281832575456, 0.0015507756855166477, 0.05119022210485635, 9.999999999998899e-05, 9.999999999998899e-05, 0.003299142528882304, 0.1267647796512441, 0.14583209377260065, 0.11953247084680041, 0.0765171117385689, 0.08202836819009629, 0.02558996927336754, 0.10867690760128756, 0.12429311516225516, 0.09714182585757858, 9.999999999998899e-05, 0.021297553742263498, 9.999999999998899e-05, 9.999999999998899e-05, 0.003984957673157097, 0.0017937452120339037, 0.00810073668089828, 9.999999999998899e-05, 9.999999999998899e-05, 0.10660276081362441, 0.09873701867884865, 0.07190950748202063, 0.1133359239253563, 0.11775340312537319, 0.10925466890834545, 0.09284924152186103, 0.10844146762238982, 0.07613399464124193, 0.41171076224082825, 0.43903937642906044, 0.4137915546235579, 0.39664152698533306, 0.42963869499172525, 0.41680704267134405, 0.4378839264690908, 0.398749316298437, 0.4044908719832261, 0.09425039277564795, 0.10269253084243335, 0.09672992607913455, 0.10721962953782604, 0.1139544071094517, 0.11679405813252675, 0.10654738488585558, 0.12183305220101215, 0.09088564579210301, 0.16583532753296482, 0.21990181365759331, 0.1720980438973191, 0.25445796675776755, 0.24265479143712365, 0.1866197832908001, 0.2440249501251881, 0.20043138433387708, 0.24471942140375735, 0.3001514121651516, 0.27052045232007005, 0.2994007567432916, 0.2955574139391205, 0.2926311013049816, 0.2764933578106532, 0.22785293948337182, 0.29854532125721756, 0.2880173699231564, 0.22567157830680395, 0.2168724991518418, 0.22956487324674113, 0.23261605474753622, 0.2303781234701595, 0.24782399271455458, 0.20780269167519572, 0.2470904344607372, 0.17128797612445013, 0.27989555913021236, 0.2239521280313539, 0.21363448937687923, 0.2148971669590546, 0.24507082123493373, 0.20148405791115942, 0.22198743788370678, 0.23469471221247473, 0.21798918280587154, 0.19880657739208696, 0.1978844507796138, 0.2662900702339891, 0.2200027169734755, 0.19281602850609714, 0.19614438631940223, 0.18762585029877754, 0.18729338823119712, 0.19350620709414945, 0.1838023126158419, 0.5277476783198223, 0.18448896112280333, 0.6690295260581477, 0.502892816634664, 0.194404339696565, 0.5729530891121306, 0.17336517508742577, 0.6089388294950988, 0.4921001288138821, 0.5502902457539649, 0.44989283751276554, 0.42691519418282786, 0.16531052533860002, 0.330429364028348, 0.45944014034666647, 0.51764739841011, 0.45725092102978593, 0.182666582615285, 0.1786612287391638, 0.1741705952622935, 0.19524036362354213, 0.1726830626175253, 0.17743632764425588, 0.19683439494121535, 0.19437942271413944, 0.19852773537740653, 0.09097118341410637, 0.0906198305268563, 0.08157549541965814, 0.09407389958814383, 0.07850502049518271, 0.09661159866717883, 0.09372283264595427, 0.07791852328697968, 0.09160117146077174]}, "mutation_prompt": null}
{"id": "9d5a770e-e94c-46c6-86b7-90bab1ae71cd", "solution": "import numpy as np\n\nclass DynamicHistoricalQuantumSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.3  # Adjusted for quicker convergence\n        self.c1_base = 2.0\n        self.c2_base = 1.5  # Adjusted for balance\n        self.chaos_factor = 0.25\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.2  # Enhanced for dynamic exploration\n        self.memory_factor = 0.2  # Enhanced historical memory\n        self.quantum_factor = 0.1  # New: Quantum position update\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) /\n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)\n\n            adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)\n\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            # Quantum-inspired update\n            quantum_jump = self.quantum_factor * np.sign(np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                           np.abs(self.position - self.global_best_position)\n            new_position += quantum_jump\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "DynamicHistoricalQuantumSwarm", "description": "Dynamic Historical Quantum Swarm integrates quantum-inspired position updates and adaptive memory to enhance convergence speed.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2d40df1b-53bd-4405-a15f-d10d28ae49df", "metadata": {"aucs": [0.4462404433449547, 0.43833984707846074, 0.4358955301084988, 0.4616403171860014, 0.45226324317108024, 0.4507495471269515, 0.4465589733591512, 0.4469424795033181, 0.43895033575099307, 0.005549524596405564, 0.04374307025065305, 0.029466124187861764, 0.00020669152098795607, 0.01408814482726628, 0.06315574695902271, 0.06718035369634712, 0.0035214760577436666, 0.013325828876051826, 0.15014744936424995, 0.0955654152319454, 0.13308308106444022, 0.10670980067049618, 0.11291272025289323, 0.11722096569116036, 0.12560832097920216, 0.10954786951321382, 0.11051600121112437, 0.08663890965496157, 0.10575473091010046, 0.09668640093581793, 0.1212139350685385, 0.10010034704956705, 0.1033512759128411, 0.09551612908075224, 0.10483029362555718, 0.10065313831453437, 0.9246313285724989, 0.9571424417123187, 0.9411613885604042, 0.9171074684279801, 0.9112522191434814, 0.9453322799453326, 0.9437449689733285, 0.9476833715539427, 0.9350718216255977, 0.2940028253845315, 0.301313843625737, 0.2790937561275104, 0.3053148662930957, 0.30724681086787153, 0.2960991369546073, 0.2951033346324109, 0.2876769715578754, 0.29001152474916814, 0.5484080495026684, 0.5770562604595522, 0.6437029269131037, 0.6093776998580545, 0.3270965284903611, 0.18910543492988385, 0.49324480500394297, 0.3181060687412871, 0.41638566425894086, 0.1335181424070292, 0.16345545486462865, 0.14805602171192456, 0.14705914377012919, 0.19731197780658283, 0.15831024691639672, 0.15867044684852594, 0.14426523889958187, 0.14698150615743966, 0.216051749922609, 0.10486822459416889, 0.1546150553382487, 0.16549221238016876, 0.1764667570466425, 0.15659636148257505, 0.1762494730897055, 0.11968656004596379, 0.16028966035887915, 0.0021836936942465357, 0.057876364376962974, 0.028275852305409743, 0.036951281832575456, 0.0015507756855166477, 0.05119022210485635, 9.999999999998899e-05, 9.999999999998899e-05, 0.003299142528882304, 0.1267647796512441, 0.14583209377260065, 0.11953247084680041, 0.0765171117385689, 0.08202836819009629, 0.02558996927336754, 0.10867690760128756, 0.12429311516225516, 0.09714182585757858, 9.999999999998899e-05, 0.021297553742263498, 9.999999999998899e-05, 9.999999999998899e-05, 0.003984957673157097, 0.0017937452120339037, 0.00810073668089828, 9.999999999998899e-05, 9.999999999998899e-05, 0.10660276081362441, 0.09873701867884865, 0.07190950748202063, 0.1133359239253563, 0.11775340312537319, 0.10925466890834545, 0.09284924152186103, 0.10844146762238982, 0.07613399464124193, 0.41171076224082825, 0.43903937642906044, 0.4137915546235579, 0.39664152698533306, 0.42963869499172525, 0.41680704267134405, 0.4378839264690908, 0.398749316298437, 0.4044908719832261, 0.09425039277564795, 0.10269253084243335, 0.09672992607913455, 0.10721962953782604, 0.1139544071094517, 0.11679405813252675, 0.10654738488585558, 0.12183305220101215, 0.09088564579210301, 0.16583532753296482, 0.21990181365759331, 0.1720980438973191, 0.25445796675776755, 0.24265479143712365, 0.1866197832908001, 0.2440249501251881, 0.20043138433387708, 0.24471942140375735, 0.3001514121651516, 0.27052045232007005, 0.2994007567432916, 0.2955574139391205, 0.2926311013049816, 0.2764933578106532, 0.22785293948337182, 0.29854532125721756, 0.2880173699231564, 0.22567157830680395, 0.2168724991518418, 0.22956487324674113, 0.23261605474753622, 0.2303781234701595, 0.24782399271455458, 0.20780269167519572, 0.2470904344607372, 0.17128797612445013, 0.27989555913021236, 0.2239521280313539, 0.21363448937687923, 0.2148971669590546, 0.24507082123493373, 0.20148405791115942, 0.22198743788370678, 0.23469471221247473, 0.21798918280587154, 0.19880657739208696, 0.1978844507796138, 0.2662900702339891, 0.2200027169734755, 0.19281602850609714, 0.19614438631940223, 0.18762585029877754, 0.18729338823119712, 0.19350620709414945, 0.1838023126158419, 0.5277476783198223, 0.18448896112280333, 0.6690295260581477, 0.502892816634664, 0.194404339696565, 0.5729530891121306, 0.17336517508742577, 0.6089388294950988, 0.4921001288138821, 0.5502902457539649, 0.44989283751276554, 0.42691519418282786, 0.16531052533860002, 0.330429364028348, 0.45944014034666647, 0.51764739841011, 0.45725092102978593, 0.182666582615285, 0.1786612287391638, 0.1741705952622935, 0.19524036362354213, 0.1726830626175253, 0.17743632764425588, 0.19683439494121535, 0.19437942271413944, 0.19852773537740653, 0.09097118341410637, 0.0906198305268563, 0.08157549541965814, 0.09407389958814383, 0.07850502049518271, 0.09661159866717883, 0.09372283264595427, 0.07791852328697968, 0.09160117146077174]}, "mutation_prompt": null}
{"id": "51fb93e3-ca6a-4a3f-9565-5dcbdc6d4427", "solution": "import numpy as np\n\nclass DynamicHistoricalQuantumSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.3  # Adjusted for quicker convergence\n        self.c1_base = 2.0\n        self.c2_base = 1.5  # Adjusted for balance\n        self.chaos_factor = 0.25\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.2  # Enhanced for dynamic exploration\n        self.memory_factor = 0.2  # Enhanced historical memory\n        self.quantum_factor = 0.1  # New: Quantum position update\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) /\n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)\n\n            adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)\n\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            # Quantum-inspired update\n            quantum_jump = self.quantum_factor * np.sign(np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                           np.abs(self.position - self.global_best_position)\n            new_position += quantum_jump\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "DynamicHistoricalQuantumSwarm", "description": "Dynamic Historical Quantum Swarm integrates quantum-inspired position updates and adaptive memory to enhance convergence speed.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2d40df1b-53bd-4405-a15f-d10d28ae49df", "metadata": {"aucs": [0.4462404433449547, 0.43833984707846074, 0.4358955301084988, 0.4616403171860014, 0.45226324317108024, 0.4507495471269515, 0.4465589733591512, 0.4469424795033181, 0.43895033575099307, 0.005549524596405564, 0.04374307025065305, 0.029466124187861764, 0.00020669152098795607, 0.01408814482726628, 0.06315574695902271, 0.06718035369634712, 0.0035214760577436666, 0.013325828876051826, 0.15014744936424995, 0.0955654152319454, 0.13308308106444022, 0.10670980067049618, 0.11291272025289323, 0.11722096569116036, 0.12560832097920216, 0.10954786951321382, 0.11051600121112437, 0.08663890965496157, 0.10575473091010046, 0.09668640093581793, 0.1212139350685385, 0.10010034704956705, 0.1033512759128411, 0.09551612908075224, 0.10483029362555718, 0.10065313831453437, 0.9246313285724989, 0.9571424417123187, 0.9411613885604042, 0.9171074684279801, 0.9112522191434814, 0.9453322799453326, 0.9437449689733285, 0.9476833715539427, 0.9350718216255977, 0.2940028253845315, 0.301313843625737, 0.2790937561275104, 0.3053148662930957, 0.30724681086787153, 0.2960991369546073, 0.2951033346324109, 0.2876769715578754, 0.29001152474916814, 0.5484080495026684, 0.5770562604595522, 0.6437029269131037, 0.6093776998580545, 0.3270965284903611, 0.18910543492988385, 0.49324480500394297, 0.3181060687412871, 0.41638566425894086, 0.1335181424070292, 0.16345545486462865, 0.14805602171192456, 0.14705914377012919, 0.19731197780658283, 0.15831024691639672, 0.15867044684852594, 0.14426523889958187, 0.14698150615743966, 0.216051749922609, 0.10486822459416889, 0.1546150553382487, 0.16549221238016876, 0.1764667570466425, 0.15659636148257505, 0.1762494730897055, 0.11968656004596379, 0.16028966035887915, 0.0021836936942465357, 0.057876364376962974, 0.028275852305409743, 0.036951281832575456, 0.0015507756855166477, 0.05119022210485635, 9.999999999998899e-05, 9.999999999998899e-05, 0.003299142528882304, 0.1267647796512441, 0.14583209377260065, 0.11953247084680041, 0.0765171117385689, 0.08202836819009629, 0.02558996927336754, 0.10867690760128756, 0.12429311516225516, 0.09714182585757858, 9.999999999998899e-05, 0.021297553742263498, 9.999999999998899e-05, 9.999999999998899e-05, 0.003984957673157097, 0.0017937452120339037, 0.00810073668089828, 9.999999999998899e-05, 9.999999999998899e-05, 0.10660276081362441, 0.09873701867884865, 0.07190950748202063, 0.1133359239253563, 0.11775340312537319, 0.10925466890834545, 0.09284924152186103, 0.10844146762238982, 0.07613399464124193, 0.41171076224082825, 0.43903937642906044, 0.4137915546235579, 0.39664152698533306, 0.42963869499172525, 0.41680704267134405, 0.4378839264690908, 0.398749316298437, 0.4044908719832261, 0.09425039277564795, 0.10269253084243335, 0.09672992607913455, 0.10721962953782604, 0.1139544071094517, 0.11679405813252675, 0.10654738488585558, 0.12183305220101215, 0.09088564579210301, 0.16583532753296482, 0.21990181365759331, 0.1720980438973191, 0.25445796675776755, 0.24265479143712365, 0.1866197832908001, 0.2440249501251881, 0.20043138433387708, 0.24471942140375735, 0.3001514121651516, 0.27052045232007005, 0.2994007567432916, 0.2955574139391205, 0.2926311013049816, 0.2764933578106532, 0.22785293948337182, 0.29854532125721756, 0.2880173699231564, 0.22567157830680395, 0.2168724991518418, 0.22956487324674113, 0.23261605474753622, 0.2303781234701595, 0.24782399271455458, 0.20780269167519572, 0.2470904344607372, 0.17128797612445013, 0.27989555913021236, 0.2239521280313539, 0.21363448937687923, 0.2148971669590546, 0.24507082123493373, 0.20148405791115942, 0.22198743788370678, 0.23469471221247473, 0.21798918280587154, 0.19880657739208696, 0.1978844507796138, 0.2662900702339891, 0.2200027169734755, 0.19281602850609714, 0.19614438631940223, 0.18762585029877754, 0.18729338823119712, 0.19350620709414945, 0.1838023126158419, 0.5277476783198223, 0.18448896112280333, 0.6690295260581477, 0.502892816634664, 0.194404339696565, 0.5729530891121306, 0.17336517508742577, 0.6089388294950988, 0.4921001288138821, 0.5502902457539649, 0.44989283751276554, 0.42691519418282786, 0.16531052533860002, 0.330429364028348, 0.45944014034666647, 0.51764739841011, 0.45725092102978593, 0.182666582615285, 0.1786612287391638, 0.1741705952622935, 0.19524036362354213, 0.1726830626175253, 0.17743632764425588, 0.19683439494121535, 0.19437942271413944, 0.19852773537740653, 0.09097118341410637, 0.0906198305268563, 0.08157549541965814, 0.09407389958814383, 0.07850502049518271, 0.09661159866717883, 0.09372283264595427, 0.07791852328697968, 0.09160117146077174]}, "mutation_prompt": null}
{"id": "14b582ed-8bb7-49be-93f7-894f20afce8e", "solution": "import numpy as np\n\nclass DynamicHistoricalQuantumSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.3  # Adjusted for quicker convergence\n        self.c1_base = 2.0\n        self.c2_base = 1.5  # Adjusted for balance\n        self.chaos_factor = 0.25\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.2  # Enhanced for dynamic exploration\n        self.memory_factor = 0.2  # Enhanced historical memory\n        self.quantum_factor = 0.1  # New: Quantum position update\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) /\n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)\n\n            adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)\n\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            # Quantum-inspired update\n            quantum_jump = self.quantum_factor * np.sign(np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                           np.abs(self.position - self.global_best_position)\n            new_position += quantum_jump\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "DynamicHistoricalQuantumSwarm", "description": "Dynamic Historical Quantum Swarm integrates quantum-inspired position updates and adaptive memory to enhance convergence speed.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2d40df1b-53bd-4405-a15f-d10d28ae49df", "metadata": {"aucs": [0.4462404433449547, 0.43833984707846074, 0.4358955301084988, 0.4616403171860014, 0.45226324317108024, 0.4507495471269515, 0.4465589733591512, 0.4469424795033181, 0.43895033575099307, 0.005549524596405564, 0.04374307025065305, 0.029466124187861764, 0.00020669152098795607, 0.01408814482726628, 0.06315574695902271, 0.06718035369634712, 0.0035214760577436666, 0.013325828876051826, 0.15014744936424995, 0.0955654152319454, 0.13308308106444022, 0.10670980067049618, 0.11291272025289323, 0.11722096569116036, 0.12560832097920216, 0.10954786951321382, 0.11051600121112437, 0.08663890965496157, 0.10575473091010046, 0.09668640093581793, 0.1212139350685385, 0.10010034704956705, 0.1033512759128411, 0.09551612908075224, 0.10483029362555718, 0.10065313831453437, 0.9246313285724989, 0.9571424417123187, 0.9411613885604042, 0.9171074684279801, 0.9112522191434814, 0.9453322799453326, 0.9437449689733285, 0.9476833715539427, 0.9350718216255977, 0.2940028253845315, 0.301313843625737, 0.2790937561275104, 0.3053148662930957, 0.30724681086787153, 0.2960991369546073, 0.2951033346324109, 0.2876769715578754, 0.29001152474916814, 0.5484080495026684, 0.5770562604595522, 0.6437029269131037, 0.6093776998580545, 0.3270965284903611, 0.18910543492988385, 0.49324480500394297, 0.3181060687412871, 0.41638566425894086, 0.1335181424070292, 0.16345545486462865, 0.14805602171192456, 0.14705914377012919, 0.19731197780658283, 0.15831024691639672, 0.15867044684852594, 0.14426523889958187, 0.14698150615743966, 0.216051749922609, 0.10486822459416889, 0.1546150553382487, 0.16549221238016876, 0.1764667570466425, 0.15659636148257505, 0.1762494730897055, 0.11968656004596379, 0.16028966035887915, 0.0021836936942465357, 0.057876364376962974, 0.028275852305409743, 0.036951281832575456, 0.0015507756855166477, 0.05119022210485635, 9.999999999998899e-05, 9.999999999998899e-05, 0.003299142528882304, 0.1267647796512441, 0.14583209377260065, 0.11953247084680041, 0.0765171117385689, 0.08202836819009629, 0.02558996927336754, 0.10867690760128756, 0.12429311516225516, 0.09714182585757858, 9.999999999998899e-05, 0.021297553742263498, 9.999999999998899e-05, 9.999999999998899e-05, 0.003984957673157097, 0.0017937452120339037, 0.00810073668089828, 9.999999999998899e-05, 9.999999999998899e-05, 0.10660276081362441, 0.09873701867884865, 0.07190950748202063, 0.1133359239253563, 0.11775340312537319, 0.10925466890834545, 0.09284924152186103, 0.10844146762238982, 0.07613399464124193, 0.41171076224082825, 0.43903937642906044, 0.4137915546235579, 0.39664152698533306, 0.42963869499172525, 0.41680704267134405, 0.4378839264690908, 0.398749316298437, 0.4044908719832261, 0.09425039277564795, 0.10269253084243335, 0.09672992607913455, 0.10721962953782604, 0.1139544071094517, 0.11679405813252675, 0.10654738488585558, 0.12183305220101215, 0.09088564579210301, 0.16583532753296482, 0.21990181365759331, 0.1720980438973191, 0.25445796675776755, 0.24265479143712365, 0.1866197832908001, 0.2440249501251881, 0.20043138433387708, 0.24471942140375735, 0.3001514121651516, 0.27052045232007005, 0.2994007567432916, 0.2955574139391205, 0.2926311013049816, 0.2764933578106532, 0.22785293948337182, 0.29854532125721756, 0.2880173699231564, 0.22567157830680395, 0.2168724991518418, 0.22956487324674113, 0.23261605474753622, 0.2303781234701595, 0.24782399271455458, 0.20780269167519572, 0.2470904344607372, 0.17128797612445013, 0.27989555913021236, 0.2239521280313539, 0.21363448937687923, 0.2148971669590546, 0.24507082123493373, 0.20148405791115942, 0.22198743788370678, 0.23469471221247473, 0.21798918280587154, 0.19880657739208696, 0.1978844507796138, 0.2662900702339891, 0.2200027169734755, 0.19281602850609714, 0.19614438631940223, 0.18762585029877754, 0.18729338823119712, 0.19350620709414945, 0.1838023126158419, 0.5277476783198223, 0.18448896112280333, 0.6690295260581477, 0.502892816634664, 0.194404339696565, 0.5729530891121306, 0.17336517508742577, 0.6089388294950988, 0.4921001288138821, 0.5502902457539649, 0.44989283751276554, 0.42691519418282786, 0.16531052533860002, 0.330429364028348, 0.45944014034666647, 0.51764739841011, 0.45725092102978593, 0.182666582615285, 0.1786612287391638, 0.1741705952622935, 0.19524036362354213, 0.1726830626175253, 0.17743632764425588, 0.19683439494121535, 0.19437942271413944, 0.19852773537740653, 0.09097118341410637, 0.0906198305268563, 0.08157549541965814, 0.09407389958814383, 0.07850502049518271, 0.09661159866717883, 0.09372283264595427, 0.07791852328697968, 0.09160117146077174]}, "mutation_prompt": null}
{"id": "cf1a7810-925a-4e52-81b9-4e98a1016070", "solution": "import numpy as np\n\nclass DynamicHistoricalQuantumSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.3  # Adjusted for quicker convergence\n        self.c1_base = 2.0\n        self.c2_base = 1.5  # Adjusted for balance\n        self.chaos_factor = 0.25\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.2  # Enhanced for dynamic exploration\n        self.memory_factor = 0.2  # Enhanced historical memory\n        self.quantum_factor = 0.1  # New: Quantum position update\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) /\n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)\n\n            adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)\n\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            # Quantum-inspired update\n            quantum_jump = self.quantum_factor * np.sign(np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                           np.abs(self.position - self.global_best_position)\n            new_position += quantum_jump\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "DynamicHistoricalQuantumSwarm", "description": "Dynamic Historical Quantum Swarm integrates quantum-inspired position updates and adaptive memory to enhance convergence speed.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2d40df1b-53bd-4405-a15f-d10d28ae49df", "metadata": {"aucs": [0.4462404433449547, 0.43833984707846074, 0.4358955301084988, 0.4616403171860014, 0.45226324317108024, 0.4507495471269515, 0.4465589733591512, 0.4469424795033181, 0.43895033575099307, 0.005549524596405564, 0.04374307025065305, 0.029466124187861764, 0.00020669152098795607, 0.01408814482726628, 0.06315574695902271, 0.06718035369634712, 0.0035214760577436666, 0.013325828876051826, 0.15014744936424995, 0.0955654152319454, 0.13308308106444022, 0.10670980067049618, 0.11291272025289323, 0.11722096569116036, 0.12560832097920216, 0.10954786951321382, 0.11051600121112437, 0.08663890965496157, 0.10575473091010046, 0.09668640093581793, 0.1212139350685385, 0.10010034704956705, 0.1033512759128411, 0.09551612908075224, 0.10483029362555718, 0.10065313831453437, 0.9246313285724989, 0.9571424417123187, 0.9411613885604042, 0.9171074684279801, 0.9112522191434814, 0.9453322799453326, 0.9437449689733285, 0.9476833715539427, 0.9350718216255977, 0.2940028253845315, 0.301313843625737, 0.2790937561275104, 0.3053148662930957, 0.30724681086787153, 0.2960991369546073, 0.2951033346324109, 0.2876769715578754, 0.29001152474916814, 0.5484080495026684, 0.5770562604595522, 0.6437029269131037, 0.6093776998580545, 0.3270965284903611, 0.18910543492988385, 0.49324480500394297, 0.3181060687412871, 0.41638566425894086, 0.1335181424070292, 0.16345545486462865, 0.14805602171192456, 0.14705914377012919, 0.19731197780658283, 0.15831024691639672, 0.15867044684852594, 0.14426523889958187, 0.14698150615743966, 0.216051749922609, 0.10486822459416889, 0.1546150553382487, 0.16549221238016876, 0.1764667570466425, 0.15659636148257505, 0.1762494730897055, 0.11968656004596379, 0.16028966035887915, 0.0021836936942465357, 0.057876364376962974, 0.028275852305409743, 0.036951281832575456, 0.0015507756855166477, 0.05119022210485635, 9.999999999998899e-05, 9.999999999998899e-05, 0.003299142528882304, 0.1267647796512441, 0.14583209377260065, 0.11953247084680041, 0.0765171117385689, 0.08202836819009629, 0.02558996927336754, 0.10867690760128756, 0.12429311516225516, 0.09714182585757858, 9.999999999998899e-05, 0.021297553742263498, 9.999999999998899e-05, 9.999999999998899e-05, 0.003984957673157097, 0.0017937452120339037, 0.00810073668089828, 9.999999999998899e-05, 9.999999999998899e-05, 0.10660276081362441, 0.09873701867884865, 0.07190950748202063, 0.1133359239253563, 0.11775340312537319, 0.10925466890834545, 0.09284924152186103, 0.10844146762238982, 0.07613399464124193, 0.41171076224082825, 0.43903937642906044, 0.4137915546235579, 0.39664152698533306, 0.42963869499172525, 0.41680704267134405, 0.4378839264690908, 0.398749316298437, 0.4044908719832261, 0.09425039277564795, 0.10269253084243335, 0.09672992607913455, 0.10721962953782604, 0.1139544071094517, 0.11679405813252675, 0.10654738488585558, 0.12183305220101215, 0.09088564579210301, 0.16583532753296482, 0.21990181365759331, 0.1720980438973191, 0.25445796675776755, 0.24265479143712365, 0.1866197832908001, 0.2440249501251881, 0.20043138433387708, 0.24471942140375735, 0.3001514121651516, 0.27052045232007005, 0.2994007567432916, 0.2955574139391205, 0.2926311013049816, 0.2764933578106532, 0.22785293948337182, 0.29854532125721756, 0.2880173699231564, 0.22567157830680395, 0.2168724991518418, 0.22956487324674113, 0.23261605474753622, 0.2303781234701595, 0.24782399271455458, 0.20780269167519572, 0.2470904344607372, 0.17128797612445013, 0.27989555913021236, 0.2239521280313539, 0.21363448937687923, 0.2148971669590546, 0.24507082123493373, 0.20148405791115942, 0.22198743788370678, 0.23469471221247473, 0.21798918280587154, 0.19880657739208696, 0.1978844507796138, 0.2662900702339891, 0.2200027169734755, 0.19281602850609714, 0.19614438631940223, 0.18762585029877754, 0.18729338823119712, 0.19350620709414945, 0.1838023126158419, 0.5277476783198223, 0.18448896112280333, 0.6690295260581477, 0.502892816634664, 0.194404339696565, 0.5729530891121306, 0.17336517508742577, 0.6089388294950988, 0.4921001288138821, 0.5502902457539649, 0.44989283751276554, 0.42691519418282786, 0.16531052533860002, 0.330429364028348, 0.45944014034666647, 0.51764739841011, 0.45725092102978593, 0.182666582615285, 0.1786612287391638, 0.1741705952622935, 0.19524036362354213, 0.1726830626175253, 0.17743632764425588, 0.19683439494121535, 0.19437942271413944, 0.19852773537740653, 0.09097118341410637, 0.0906198305268563, 0.08157549541965814, 0.09407389958814383, 0.07850502049518271, 0.09661159866717883, 0.09372283264595427, 0.07791852328697968, 0.09160117146077174]}, "mutation_prompt": null}
{"id": "203ba116-94cf-4304-b4e8-ae310b4b102b", "solution": "import numpy as np\n\nclass DynamicHistoricalQuantumSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.3  # Adjusted for quicker convergence\n        self.c1_base = 2.0\n        self.c2_base = 1.5  # Adjusted for balance\n        self.chaos_factor = 0.25\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.2  # Enhanced for dynamic exploration\n        self.memory_factor = 0.2  # Enhanced historical memory\n        self.quantum_factor = 0.1  # New: Quantum position update\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) /\n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)\n\n            adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)\n\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            # Quantum-inspired update\n            quantum_jump = self.quantum_factor * np.sign(np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                           np.abs(self.position - self.global_best_position)\n            new_position += quantum_jump\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "DynamicHistoricalQuantumSwarm", "description": "Dynamic Historical Quantum Swarm integrates quantum-inspired position updates and adaptive memory to enhance convergence speed.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2d40df1b-53bd-4405-a15f-d10d28ae49df", "metadata": {"aucs": [0.4462404433449547, 0.43833984707846074, 0.4358955301084988, 0.4616403171860014, 0.45226324317108024, 0.4507495471269515, 0.4465589733591512, 0.4469424795033181, 0.43895033575099307, 0.005549524596405564, 0.04374307025065305, 0.029466124187861764, 0.00020669152098795607, 0.01408814482726628, 0.06315574695902271, 0.06718035369634712, 0.0035214760577436666, 0.013325828876051826, 0.15014744936424995, 0.0955654152319454, 0.13308308106444022, 0.10670980067049618, 0.11291272025289323, 0.11722096569116036, 0.12560832097920216, 0.10954786951321382, 0.11051600121112437, 0.08663890965496157, 0.10575473091010046, 0.09668640093581793, 0.1212139350685385, 0.10010034704956705, 0.1033512759128411, 0.09551612908075224, 0.10483029362555718, 0.10065313831453437, 0.9246313285724989, 0.9571424417123187, 0.9411613885604042, 0.9171074684279801, 0.9112522191434814, 0.9453322799453326, 0.9437449689733285, 0.9476833715539427, 0.9350718216255977, 0.2940028253845315, 0.301313843625737, 0.2790937561275104, 0.3053148662930957, 0.30724681086787153, 0.2960991369546073, 0.2951033346324109, 0.2876769715578754, 0.29001152474916814, 0.5484080495026684, 0.5770562604595522, 0.6437029269131037, 0.6093776998580545, 0.3270965284903611, 0.18910543492988385, 0.49324480500394297, 0.3181060687412871, 0.41638566425894086, 0.1335181424070292, 0.16345545486462865, 0.14805602171192456, 0.14705914377012919, 0.19731197780658283, 0.15831024691639672, 0.15867044684852594, 0.14426523889958187, 0.14698150615743966, 0.216051749922609, 0.10486822459416889, 0.1546150553382487, 0.16549221238016876, 0.1764667570466425, 0.15659636148257505, 0.1762494730897055, 0.11968656004596379, 0.16028966035887915, 0.0021836936942465357, 0.057876364376962974, 0.028275852305409743, 0.036951281832575456, 0.0015507756855166477, 0.05119022210485635, 9.999999999998899e-05, 9.999999999998899e-05, 0.003299142528882304, 0.1267647796512441, 0.14583209377260065, 0.11953247084680041, 0.0765171117385689, 0.08202836819009629, 0.02558996927336754, 0.10867690760128756, 0.12429311516225516, 0.09714182585757858, 9.999999999998899e-05, 0.021297553742263498, 9.999999999998899e-05, 9.999999999998899e-05, 0.003984957673157097, 0.0017937452120339037, 0.00810073668089828, 9.999999999998899e-05, 9.999999999998899e-05, 0.10660276081362441, 0.09873701867884865, 0.07190950748202063, 0.1133359239253563, 0.11775340312537319, 0.10925466890834545, 0.09284924152186103, 0.10844146762238982, 0.07613399464124193, 0.41171076224082825, 0.43903937642906044, 0.4137915546235579, 0.39664152698533306, 0.42963869499172525, 0.41680704267134405, 0.4378839264690908, 0.398749316298437, 0.4044908719832261, 0.09425039277564795, 0.10269253084243335, 0.09672992607913455, 0.10721962953782604, 0.1139544071094517, 0.11679405813252675, 0.10654738488585558, 0.12183305220101215, 0.09088564579210301, 0.16583532753296482, 0.21990181365759331, 0.1720980438973191, 0.25445796675776755, 0.24265479143712365, 0.1866197832908001, 0.2440249501251881, 0.20043138433387708, 0.24471942140375735, 0.3001514121651516, 0.27052045232007005, 0.2994007567432916, 0.2955574139391205, 0.2926311013049816, 0.2764933578106532, 0.22785293948337182, 0.29854532125721756, 0.2880173699231564, 0.22567157830680395, 0.2168724991518418, 0.22956487324674113, 0.23261605474753622, 0.2303781234701595, 0.24782399271455458, 0.20780269167519572, 0.2470904344607372, 0.17128797612445013, 0.27989555913021236, 0.2239521280313539, 0.21363448937687923, 0.2148971669590546, 0.24507082123493373, 0.20148405791115942, 0.22198743788370678, 0.23469471221247473, 0.21798918280587154, 0.19880657739208696, 0.1978844507796138, 0.2662900702339891, 0.2200027169734755, 0.19281602850609714, 0.19614438631940223, 0.18762585029877754, 0.18729338823119712, 0.19350620709414945, 0.1838023126158419, 0.5277476783198223, 0.18448896112280333, 0.6690295260581477, 0.502892816634664, 0.194404339696565, 0.5729530891121306, 0.17336517508742577, 0.6089388294950988, 0.4921001288138821, 0.5502902457539649, 0.44989283751276554, 0.42691519418282786, 0.16531052533860002, 0.330429364028348, 0.45944014034666647, 0.51764739841011, 0.45725092102978593, 0.182666582615285, 0.1786612287391638, 0.1741705952622935, 0.19524036362354213, 0.1726830626175253, 0.17743632764425588, 0.19683439494121535, 0.19437942271413944, 0.19852773537740653, 0.09097118341410637, 0.0906198305268563, 0.08157549541965814, 0.09407389958814383, 0.07850502049518271, 0.09661159866717883, 0.09372283264595427, 0.07791852328697968, 0.09160117146077174]}, "mutation_prompt": null}
{"id": "c804384b-31d0-4838-80fc-634396a42cc3", "solution": "import numpy as np\n\nclass DynamicHistoricalQuantumSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50 + (dim * 5)\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.zeros((self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.phi = 0.5\n        self.w_max = 0.9\n        self.w_min = 0.3  # Adjusted for quicker convergence\n        self.c1_base = 2.0\n        self.c2_base = 1.5  # Adjusted for balance\n        self.chaos_factor = 0.25\n        self.levy_beta = 1.5\n        self.dynamic_swarm_factor = 0.2  # Enhanced for dynamic exploration\n        self.memory_factor = 0.2  # Enhanced historical memory\n        self.quantum_factor = 0.1  # New: Quantum position update\n\n    def levy_flight(self, size):\n        sigma1 = pow((1.0 + self.levy_beta) * np.math.gamma((1.0 + self.levy_beta) / 2.0) /\n                     (np.math.gamma(1.0 + self.levy_beta) * self.levy_beta * pow(2.0, ((self.levy_beta - 1.0) / 2.0))), 1.0 / self.levy_beta)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1.0 / self.levy_beta))\n        return step\n\n    def __call__(self, func):\n        evals = 0\n        historical_best = np.copy(self.global_best_position)\n        historical_best_value = np.inf\n        while evals < self.budget:\n            fitness_values = np.array([func(pos) for pos in self.position])\n            evals += self.swarm_size\n\n            better_mask = fitness_values < self.personal_best_value\n            self.personal_best_value[better_mask] = fitness_values[better_mask]\n            self.personal_best_position[better_mask] = self.position[better_mask]\n\n            min_fitness_idx = np.argmin(fitness_values)\n            if fitness_values[min_fitness_idx] < self.global_best_value:\n                self.global_best_value = fitness_values[min_fitness_idx]\n                self.global_best_position = self.position[min_fitness_idx]\n\n            if self.global_best_value < historical_best_value:\n                historical_best_value = self.global_best_value\n                historical_best = np.copy(self.global_best_position)\n\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (evals / self.budget))\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            r3 = np.random.rand(self.swarm_size, self.dim)\n\n            adaptive_c1 = self.c1_base * (1.0 - evals / self.budget)\n            adaptive_c2 = self.c2_base * (evals / self.budget)\n\n            cognitive_component = adaptive_c1 * r1 * (self.personal_best_position - self.position)\n            social_component = adaptive_c2 * r2 * (self.global_best_position - self.position)\n            memory_component = self.memory_factor * r3 * (historical_best - self.position)\n\n            self.velocity = (inertia_weight * self.velocity + cognitive_component + social_component + memory_component)\n\n            chaos_component = self.chaos_factor * (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                              np.sin(1.5 * np.pi * evals / self.budget)\n            new_position = self.position + self.velocity + chaos_component\n\n            levy_component = 0.01 * self.levy_flight((self.swarm_size, self.dim))\n            new_position += levy_component\n\n            # Quantum-inspired update\n            quantum_jump = self.quantum_factor * np.sign(np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                           np.abs(self.position - self.global_best_position)\n            new_position += quantum_jump\n\n            disturbance = (np.random.rand(self.swarm_size, self.dim) - 0.5) * \\\n                          self.dynamic_swarm_factor * np.sin(evals / (self.budget / 4.0))\n            new_position += disturbance\n\n            new_position = np.clip(new_position, -5.0, 5.0)\n            self.position = new_position\n\n        return self.global_best_position, self.global_best_value", "name": "DynamicHistoricalQuantumSwarm", "description": "Dynamic Historical Quantum Swarm integrates quantum-inspired position updates and adaptive memory to enhance convergence speed.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2d40df1b-53bd-4405-a15f-d10d28ae49df", "metadata": {"aucs": [0.4462404433449547, 0.43833984707846074, 0.4358955301084988, 0.4616403171860014, 0.45226324317108024, 0.4507495471269515, 0.4465589733591512, 0.4469424795033181, 0.43895033575099307, 0.005549524596405564, 0.04374307025065305, 0.029466124187861764, 0.00020669152098795607, 0.01408814482726628, 0.06315574695902271, 0.06718035369634712, 0.0035214760577436666, 0.013325828876051826, 0.15014744936424995, 0.0955654152319454, 0.13308308106444022, 0.10670980067049618, 0.11291272025289323, 0.11722096569116036, 0.12560832097920216, 0.10954786951321382, 0.11051600121112437, 0.08663890965496157, 0.10575473091010046, 0.09668640093581793, 0.1212139350685385, 0.10010034704956705, 0.1033512759128411, 0.09551612908075224, 0.10483029362555718, 0.10065313831453437, 0.9246313285724989, 0.9571424417123187, 0.9411613885604042, 0.9171074684279801, 0.9112522191434814, 0.9453322799453326, 0.9437449689733285, 0.9476833715539427, 0.9350718216255977, 0.2940028253845315, 0.301313843625737, 0.2790937561275104, 0.3053148662930957, 0.30724681086787153, 0.2960991369546073, 0.2951033346324109, 0.2876769715578754, 0.29001152474916814, 0.5484080495026684, 0.5770562604595522, 0.6437029269131037, 0.6093776998580545, 0.3270965284903611, 0.18910543492988385, 0.49324480500394297, 0.3181060687412871, 0.41638566425894086, 0.1335181424070292, 0.16345545486462865, 0.14805602171192456, 0.14705914377012919, 0.19731197780658283, 0.15831024691639672, 0.15867044684852594, 0.14426523889958187, 0.14698150615743966, 0.216051749922609, 0.10486822459416889, 0.1546150553382487, 0.16549221238016876, 0.1764667570466425, 0.15659636148257505, 0.1762494730897055, 0.11968656004596379, 0.16028966035887915, 0.0021836936942465357, 0.057876364376962974, 0.028275852305409743, 0.036951281832575456, 0.0015507756855166477, 0.05119022210485635, 9.999999999998899e-05, 9.999999999998899e-05, 0.003299142528882304, 0.1267647796512441, 0.14583209377260065, 0.11953247084680041, 0.0765171117385689, 0.08202836819009629, 0.02558996927336754, 0.10867690760128756, 0.12429311516225516, 0.09714182585757858, 9.999999999998899e-05, 0.021297553742263498, 9.999999999998899e-05, 9.999999999998899e-05, 0.003984957673157097, 0.0017937452120339037, 0.00810073668089828, 9.999999999998899e-05, 9.999999999998899e-05, 0.10660276081362441, 0.09873701867884865, 0.07190950748202063, 0.1133359239253563, 0.11775340312537319, 0.10925466890834545, 0.09284924152186103, 0.10844146762238982, 0.07613399464124193, 0.41171076224082825, 0.43903937642906044, 0.4137915546235579, 0.39664152698533306, 0.42963869499172525, 0.41680704267134405, 0.4378839264690908, 0.398749316298437, 0.4044908719832261, 0.09425039277564795, 0.10269253084243335, 0.09672992607913455, 0.10721962953782604, 0.1139544071094517, 0.11679405813252675, 0.10654738488585558, 0.12183305220101215, 0.09088564579210301, 0.16583532753296482, 0.21990181365759331, 0.1720980438973191, 0.25445796675776755, 0.24265479143712365, 0.1866197832908001, 0.2440249501251881, 0.20043138433387708, 0.24471942140375735, 0.3001514121651516, 0.27052045232007005, 0.2994007567432916, 0.2955574139391205, 0.2926311013049816, 0.2764933578106532, 0.22785293948337182, 0.29854532125721756, 0.2880173699231564, 0.22567157830680395, 0.2168724991518418, 0.22956487324674113, 0.23261605474753622, 0.2303781234701595, 0.24782399271455458, 0.20780269167519572, 0.2470904344607372, 0.17128797612445013, 0.27989555913021236, 0.2239521280313539, 0.21363448937687923, 0.2148971669590546, 0.24507082123493373, 0.20148405791115942, 0.22198743788370678, 0.23469471221247473, 0.21798918280587154, 0.19880657739208696, 0.1978844507796138, 0.2662900702339891, 0.2200027169734755, 0.19281602850609714, 0.19614438631940223, 0.18762585029877754, 0.18729338823119712, 0.19350620709414945, 0.1838023126158419, 0.5277476783198223, 0.18448896112280333, 0.6690295260581477, 0.502892816634664, 0.194404339696565, 0.5729530891121306, 0.17336517508742577, 0.6089388294950988, 0.4921001288138821, 0.5502902457539649, 0.44989283751276554, 0.42691519418282786, 0.16531052533860002, 0.330429364028348, 0.45944014034666647, 0.51764739841011, 0.45725092102978593, 0.182666582615285, 0.1786612287391638, 0.1741705952622935, 0.19524036362354213, 0.1726830626175253, 0.17743632764425588, 0.19683439494121535, 0.19437942271413944, 0.19852773537740653, 0.09097118341410637, 0.0906198305268563, 0.08157549541965814, 0.09407389958814383, 0.07850502049518271, 0.09661159866717883, 0.09372283264595427, 0.07791852328697968, 0.09160117146077174]}, "mutation_prompt": null}
