{"id": "7c458bd2-4fa1-4d3a-9327-2ed0c688339e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptative mutation factor and crossover rate\n                if np.random.rand() < 0.5:\n                    F = self.mutation_factor + np.random.normal(0, 0.1)\n                else:\n                    F = self.mutation_factor - np.random.normal(0, 0.1)\n\n                CR = self.crossover_rate + np.random.normal(0, 0.1)\n\n                if F < 0: F = 0.1\n                if F > 1: F = 1\n                if CR < 0: CR = 0.1\n                if CR > 1: CR = 1\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Population Size and Mutation Strategy for Robust Black Box Optimization.", "configspace": "", "generation": 0, "fitness": 0.27923611316993263, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6264305634304435, 0.6220769747025341, 0.6182567946406363, 0.6634489428978925, 0.6417576762225272, 0.649537170329038, 0.6577516357285639, 0.625191780309301, 0.6607024885453906, 0.37362197930229946, 0.37351259423893457, 0.4067995985018231, 0.40438737257688917, 0.41583167930596887, 0.36551871137580716, 0.4315455603216012, 0.39174655962919647, 0.41380747479307556, 0.10688568391965947, 0.10534988750508945, 0.09357198510807663, 0.09581734802287645, 0.09913100135298214, 0.08976981852123878, 0.09788372215232233, 0.09373287778753547, 0.11240301524503626, 0.10183048559292818, 0.09196053146840477, 0.09504233529453432, 0.08601969665465004, 0.08740642298642909, 0.07410803732483806, 0.0930938082108963, 0.09469322638014943, 0.08519755954501429, 0.9632426411268571, 0.9494439658663482, 0.9280730916005152, 0.93228868899423, 0.952116248929278, 0.9557822860110922, 0.9128854375352211, 0.9214690760827855, 0.9507582845130318, 0.3251814441330244, 0.30039548714280806, 0.275869560248052, 0.26188833392481514, 0.3104874291464118, 0.28734825475862047, 0.2959821416956584, 0.2877447309074106, 0.2899936927308645, 0.5898502884017901, 0.49043966647992676, 0.5185701794050759, 0.5661733446163831, 0.6066939028642082, 0.6276992400599901, 0.5106084473799584, 0.5795600532868304, 0.47298711964298024, 0.17274983159505553, 0.2000597389063532, 0.2179789808828495, 0.22195685792132147, 0.21673078220176145, 0.17159908874056307, 0.22911189767797946, 0.230994810179189, 0.18377135342607898, 0.3225748022733226, 0.20284821471452896, 0.2526961848484306, 0.1923736441979791, 0.21526534064904124, 0.22385474545391293, 0.20004237004784087, 0.18539641855303524, 0.2010902714727547, 0.13843660573126038, 0.13226545766333508, 0.14036700931292267, 0.18270932421193675, 0.12135659803919119, 0.16877849203858564, 0.13457523524753812, 0.13576013602257608, 0.1493662414596354, 0.2611141661384635, 0.26432077324004366, 0.2722232729934473, 0.25682578482587803, 0.2575868681850041, 0.2390170299490164, 0.3390400554229346, 0.3115367630695991, 0.30286277060444067, 0.022703282936233693, 0.037902582392502104, 0.028598358903326515, 0.07726227289272247, 0.06635736720106233, 0.04031669410851768, 0.032924344630979596, 0.0335639340550421, 0.01693053539236755, 0.14442441287267116, 0.14106076508648435, 0.16152357181473032, 0.19368419389104796, 0.17100997984276234, 0.1798876309395422, 0.17359562388767957, 0.1688428707986115, 0.17153073190362889, 0.4873532093708409, 0.4817905646080419, 0.46553954209065673, 0.5045484051866034, 0.5087635579514667, 0.5120407358094373, 0.5075223596249856, 0.4753118049881757, 0.4739722877242655, 0.09589990561291506, 0.0976533056421176, 0.09720775046951424, 0.08905576092357881, 0.08083605765158286, 0.10509294908684519, 0.06837337910995012, 0.08967407898446889, 0.10919002305353864, 0.19857680390929877, 0.14990893671900662, 0.14528424997455514, 0.288347393672298, 0.13458878529979534, 0.14414560209572014, 0.1874797649704053, 0.13170608460983402, 0.13501784553315443, 0.2771011953071295, 0.2532556664341913, 0.2629373956302796, 0.2601260348143155, 0.2679881750415075, 0.25684450469707076, 0.28859035332989036, 0.29318174361677407, 0.2872124581747937, 0.2128409047912696, 0.22141356475472396, 0.20863294080289507, 0.1885916593703133, 0.19270157364449514, 0.19933722139501286, 0.23088207032307428, 0.2312580960071806, 0.22547696385962046, 0.17927501773261734, 0.1619606201694076, 0.18618629605701276, 0.17925066654574262, 0.17751229920639144, 0.19651444579926214, 0.17961370497253704, 0.1735449274395331, 0.18723532538243692, 0.1701269432148933, 0.17429748478325724, 0.17744368458422521, 0.17737497794670232, 0.17450373113425832, 0.19848808835424703, 0.17193839924410315, 0.1874898557945358, 0.17368696857717192, 0.5171516480675946, 0.5459037056805944, 0.1926121711068618, 0.5385830655894976, 0.534965498404077, 0.21200967375657842, 0.5497137082833796, 0.39901801578098306, 0.3624461245363514, 0.19001787876713738, 0.195715932390644, 0.19040301370020574, 0.41980641494033677, 0.42194999122268695, 0.3525441166293878, 0.2071877598204782, 0.5971221780083771, 0.6326113701060285, 0.18238552127476226, 0.18353978181093766, 0.18880389659027108, 0.18052161420717527, 0.17056872947901558, 0.18212451693719, 0.19670721305585392, 0.16975967751817256, 0.17791355174563672, 0.07383719986165937, 0.08954191797414823, 0.07035488188879735, 0.08673430514439862, 0.0667481870734491, 0.07077559289958157, 0.06776539072617294, 0.06587499872064217, 0.06087098854399742]}, "mutation_prompt": null}
{"id": "fe4930a3-371a-4d3c-9ef4-985e0ba03bbf", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptative mutation factor and crossover rate\n                if np.random.rand() < 0.5:\n                    F = self.mutation_factor + np.random.normal(0, 0.1)\n                else:\n                    F = self.mutation_factor - np.random.normal(0, 0.1)\n\n                CR = self.crossover_rate + np.random.normal(0, 0.1)\n\n                if F < 0: F = 0.1\n                if F > 1: F = 1\n                if CR < 0: CR = 0.1\n                if CR > 1: CR = 1\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Population Size and Mutation Strategy for Robust Black Box Optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c458bd2-4fa1-4d3a-9327-2ed0c688339e", "metadata": {"aucs": [0.6264305634304435, 0.6220769747025341, 0.6182567946406363, 0.6634489428978925, 0.6417576762225272, 0.649537170329038, 0.6577516357285639, 0.625191780309301, 0.6607024885453906, 0.37362197930229946, 0.37351259423893457, 0.4067995985018231, 0.40438737257688917, 0.41583167930596887, 0.36551871137580716, 0.4315455603216012, 0.39174655962919647, 0.41380747479307556, 0.10688568391965947, 0.10534988750508945, 0.09357198510807663, 0.09581734802287645, 0.09913100135298214, 0.08976981852123878, 0.09788372215232233, 0.09373287778753547, 0.11240301524503626, 0.10183048559292818, 0.09196053146840477, 0.09504233529453432, 0.08601969665465004, 0.08740642298642909, 0.07410803732483806, 0.0930938082108963, 0.09469322638014943, 0.08519755954501429, 0.9632426411268571, 0.9494439658663482, 0.9280730916005152, 0.93228868899423, 0.952116248929278, 0.9557822860110922, 0.9128854375352211, 0.9214690760827855, 0.9507582845130318, 0.3251814441330244, 0.30039548714280806, 0.275869560248052, 0.26188833392481514, 0.3104874291464118, 0.28734825475862047, 0.2959821416956584, 0.2877447309074106, 0.2899936927308645, 0.5898502884017901, 0.49043966647992676, 0.5185701794050759, 0.5661733446163831, 0.6066939028642082, 0.6276992400599901, 0.5106084473799584, 0.5795600532868304, 0.47298711964298024, 0.17274983159505553, 0.2000597389063532, 0.2179789808828495, 0.22195685792132147, 0.21673078220176145, 0.17159908874056307, 0.22911189767797946, 0.230994810179189, 0.18377135342607898, 0.3225748022733226, 0.20284821471452896, 0.2526961848484306, 0.1923736441979791, 0.21526534064904124, 0.22385474545391293, 0.20004237004784087, 0.18539641855303524, 0.2010902714727547, 0.13843660573126038, 0.13226545766333508, 0.14036700931292267, 0.18270932421193675, 0.12135659803919119, 0.16877849203858564, 0.13457523524753812, 0.13576013602257608, 0.1493662414596354, 0.2611141661384635, 0.26432077324004366, 0.2722232729934473, 0.25682578482587803, 0.2575868681850041, 0.2390170299490164, 0.3390400554229346, 0.3115367630695991, 0.30286277060444067, 0.022703282936233693, 0.037902582392502104, 0.028598358903326515, 0.07726227289272247, 0.06635736720106233, 0.04031669410851768, 0.032924344630979596, 0.0335639340550421, 0.01693053539236755, 0.14442441287267116, 0.14106076508648435, 0.16152357181473032, 0.19368419389104796, 0.17100997984276234, 0.1798876309395422, 0.17359562388767957, 0.1688428707986115, 0.17153073190362889, 0.4873532093708409, 0.4817905646080419, 0.46553954209065673, 0.5045484051866034, 0.5087635579514667, 0.5120407358094373, 0.5075223596249856, 0.4753118049881757, 0.4739722877242655, 0.09589990561291506, 0.0976533056421176, 0.09720775046951424, 0.08905576092357881, 0.08083605765158286, 0.10509294908684519, 0.06837337910995012, 0.08967407898446889, 0.10919002305353864, 0.19857680390929877, 0.14990893671900662, 0.14528424997455514, 0.288347393672298, 0.13458878529979534, 0.14414560209572014, 0.1874797649704053, 0.13170608460983402, 0.13501784553315443, 0.2771011953071295, 0.2532556664341913, 0.2629373956302796, 0.2601260348143155, 0.2679881750415075, 0.25684450469707076, 0.28859035332989036, 0.29318174361677407, 0.2872124581747937, 0.2128409047912696, 0.22141356475472396, 0.20863294080289507, 0.1885916593703133, 0.19270157364449514, 0.19933722139501286, 0.23088207032307428, 0.2312580960071806, 0.22547696385962046, 0.17927501773261734, 0.1619606201694076, 0.18618629605701276, 0.17925066654574262, 0.17751229920639144, 0.19651444579926214, 0.17961370497253704, 0.1735449274395331, 0.18723532538243692, 0.1701269432148933, 0.17429748478325724, 0.17744368458422521, 0.17737497794670232, 0.17450373113425832, 0.19848808835424703, 0.17193839924410315, 0.1874898557945358, 0.17368696857717192, 0.5171516480675946, 0.5459037056805944, 0.1926121711068618, 0.5385830655894976, 0.534965498404077, 0.21200967375657842, 0.5497137082833796, 0.39901801578098306, 0.3624461245363514, 0.19001787876713738, 0.195715932390644, 0.19040301370020574, 0.41980641494033677, 0.42194999122268695, 0.3525441166293878, 0.2071877598204782, 0.5971221780083771, 0.6326113701060285, 0.18238552127476226, 0.18353978181093766, 0.18880389659027108, 0.18052161420717527, 0.17056872947901558, 0.18212451693719, 0.19670721305585392, 0.16975967751817256, 0.17791355174563672, 0.07383719986165937, 0.08954191797414823, 0.07035488188879735, 0.08673430514439862, 0.0667481870734491, 0.07077559289958157, 0.06776539072617294, 0.06587499872064217, 0.06087098854399742]}, "mutation_prompt": null}
{"id": "7135a63a-220c-4402-bfb0-16fc56d0bc93", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.evaluations = 0\n        self.elitism_rate = 0.1  # Introduced elitism\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        elite_size = max(1, int(self.elitism_rate * self.population_size))\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            sorted_indices = np.argsort(self.fitness)\n            elites = self.population[sorted_indices[:elite_size]]\n\n            for i in range(self.population_size):\n                F = self.mutation_factor + 0.1 * (1 - self.fitness[i] / (best_fitness + 1e-12))\n\n                CR = self.crossover_rate + np.random.normal(0, 0.05)\n\n                if F < 0: F = 0.1\n                if F > 1: F = 1\n                if CR < 0: CR = 0.1\n                if CR > 1: CR = 1\n\n                # Mutation with elitism influence\n                indices = np.random.choice(elite_size, 3, replace=False)\n                a, b, c = elites[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Fitness-based Mutation and Population Management for Accelerated Convergence.", "configspace": "", "generation": 2, "fitness": 0.1361552185375396, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.13.", "error": "", "parent_id": "7c458bd2-4fa1-4d3a-9327-2ed0c688339e", "metadata": {"aucs": [0.24776594166060206, 0.2374187554280457, 0.2908835222950473, 0.2340072214616905, 0.4456644744397601, 0.4093603758102796, 0.37133475467060373, 0.29604406931808536, 0.37934852937459185, 9.999999999998899e-05, 0.009572355358790863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09709757722895773, 0.10385562696221295, 0.08522556948551796, 0.13669961671618935, 0.09381398157906928, 0.08531421573509546, 0.1296480362195943, 0.09960238788761433, 0.11853615492080294, 0.09895453333555448, 0.12447624024978265, 0.09745558462065962, 0.0683332029921705, 0.10445182087065974, 0.08447447041752798, 0.13972599611815018, 0.1042335285108682, 0.08217534287132222, 0.1034984157079043, 0.9557399329884627, 0.12342904767295915, 0.1952354278277605, 0.1813002442973115, 0.4141365390063134, 0.1756381785820177, 0.9676165644522026, 0.9090713588087871, 0.0640658396228242, 0.11395689647410978, 0.02607804638759048, 0.022258059994818336, 0.04643944994871163, 0.047420785521152586, 0.05802321753258566, 0.04075444581592602, 0.0814302822316415, 0.23088697318826557, 0.21600230382468022, 0.13827158680087637, 0.18812352466697824, 0.28426088803460714, 0.19097247269520956, 0.14066525050822876, 0.1686482905637895, 0.17840531206302546, 0.047413389095739666, 0.16681370989778133, 0.0012605103118821237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1437535094403205, 0.06608400019498262, 0.10135822276473061, 0.04306595738012109, 0.09214397258453533, 0.07882257358805422, 0.04642766645480989, 0.06692653931886783, 0.11190593341211552, 0.04523857082487648, 0.06637923688171432, 0.10249212196877211, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054509698696049824, 0.0505311589559837, 0.08987721734490095, 0.06526344439638365, 9.999999999998899e-05, 9.999999999998899e-05, 0.10014231862553313, 0.03899987159795515, 0.03270971296980585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05003017806782195, 0.07312199216174375, 0.09506707523274094, 0.05409799746442501, 0.05147557823151416, 0.007893587484992026, 0.010076748258020074, 9.999999999998899e-05, 0.0033213473603181942, 0.1858451669681519, 0.2585780573201447, 0.3695670506452202, 0.3275744836622685, 0.31409811296012025, 0.28041374270161457, 0.34202778079105656, 0.27457655640427714, 0.25569373629382086, 0.08568035117770356, 0.06041284365360022, 0.06454591282672595, 0.10184502215403768, 0.10347919754443669, 0.08125398333724665, 0.0676678015633142, 0.08093190530970296, 0.044336193987550954, 0.12554596945384433, 0.10084976693145764, 0.14889783883055574, 0.13170280920716015, 0.13972648993838155, 0.13000126334433426, 0.12609764075504803, 0.13988016583930907, 0.1292282746134531, 0.24163052605968582, 0.1669917159957124, 0.2897317049615623, 0.22572179244395252, 0.18526222698882588, 0.14798394001397208, 0.26936250057559485, 0.24246493141711345, 0.18304779002007354, 0.16557251126764916, 0.2546606008277753, 0.10268474225676383, 0.12448898581320211, 0.16891069967290417, 0.14062787434980495, 0.15603202565414576, 0.19662652897315314, 0.14828904267203702, 0.19676616948786063, 0.25782634573726937, 0.17874357628721083, 0.18920357026125756, 0.18161467367467565, 0.1993895908632196, 0.18933603993047132, 0.16743940264054713, 0.19476038958767983, 0.18026123220857715, 0.1528997141897953, 0.17117061635630904, 0.17840234083837403, 0.19084394089244616, 0.20003221004420224, 0.1851940418041208, 0.17444371859650332, 0.19106127922915483, 0.16503293978214173, 0.10360818037754504, 0.12435064625871817, 0.15792164707714984, 0.19101498094720137, 0.14880531603248515, 0.108243060989343, 0.1660875805270109, 0.14121122359221194, 0.22165099182812842, 0.2110136283645625, 0.08445144065887089, 0.1823342203417605, 0.14631399477175633, 0.15608459121245688, 0.19455897259061672, 0.18436300454094345, 0.10711842024187168, 0.19734732928740417, 0.18551464902474568, 0.1770002066497789, 0.1836762708717109, 0.17944380112454095, 0.1826435053946338, 0.1888043697177315, 0.19724207944958838, 0.17743993774190403, 0.05887493160954205, 0.06555626670494408, 0.1196696452235868, 0.07138331557708189, 0.05849891017459252, 0.08720916973006554, 0.09752133923874717, 0.07024157599869962, 0.05915088692085646]}, "mutation_prompt": null}
{"id": "d763c2b0-a186-459b-aa97-bb6fa88bb7fa", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptative mutation factor and crossover rate\n                if np.random.rand() < 0.5:\n                    F = self.mutation_factor + np.random.normal(0, 0.1)\n                else:\n                    F = self.mutation_factor - np.random.normal(0, 0.1)\n\n                CR = self.crossover_rate + np.random.normal(0, 0.1)\n\n                if F < 0: F = 0.1\n                if F > 1: F = 1\n                if CR < 0: CR = 0.1\n                if CR > 1: CR = 1\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Population Size and Mutation Strategy for Robust Black Box Optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c458bd2-4fa1-4d3a-9327-2ed0c688339e", "metadata": {"aucs": [0.6264305634304435, 0.6220769747025341, 0.6182567946406363, 0.6634489428978925, 0.6417576762225272, 0.649537170329038, 0.6577516357285639, 0.625191780309301, 0.6607024885453906, 0.37362197930229946, 0.37351259423893457, 0.4067995985018231, 0.40438737257688917, 0.41583167930596887, 0.36551871137580716, 0.4315455603216012, 0.39174655962919647, 0.41380747479307556, 0.10688568391965947, 0.10534988750508945, 0.09357198510807663, 0.09581734802287645, 0.09913100135298214, 0.08976981852123878, 0.09788372215232233, 0.09373287778753547, 0.11240301524503626, 0.10183048559292818, 0.09196053146840477, 0.09504233529453432, 0.08601969665465004, 0.08740642298642909, 0.07410803732483806, 0.0930938082108963, 0.09469322638014943, 0.08519755954501429, 0.9632426411268571, 0.9494439658663482, 0.9280730916005152, 0.93228868899423, 0.952116248929278, 0.9557822860110922, 0.9128854375352211, 0.9214690760827855, 0.9507582845130318, 0.3251814441330244, 0.30039548714280806, 0.275869560248052, 0.26188833392481514, 0.3104874291464118, 0.28734825475862047, 0.2959821416956584, 0.2877447309074106, 0.2899936927308645, 0.5898502884017901, 0.49043966647992676, 0.5185701794050759, 0.5661733446163831, 0.6066939028642082, 0.6276992400599901, 0.5106084473799584, 0.5795600532868304, 0.47298711964298024, 0.17274983159505553, 0.2000597389063532, 0.2179789808828495, 0.22195685792132147, 0.21673078220176145, 0.17159908874056307, 0.22911189767797946, 0.230994810179189, 0.18377135342607898, 0.3225748022733226, 0.20284821471452896, 0.2526961848484306, 0.1923736441979791, 0.21526534064904124, 0.22385474545391293, 0.20004237004784087, 0.18539641855303524, 0.2010902714727547, 0.13843660573126038, 0.13226545766333508, 0.14036700931292267, 0.18270932421193675, 0.12135659803919119, 0.16877849203858564, 0.13457523524753812, 0.13576013602257608, 0.1493662414596354, 0.2611141661384635, 0.26432077324004366, 0.2722232729934473, 0.25682578482587803, 0.2575868681850041, 0.2390170299490164, 0.3390400554229346, 0.3115367630695991, 0.30286277060444067, 0.022703282936233693, 0.037902582392502104, 0.028598358903326515, 0.07726227289272247, 0.06635736720106233, 0.04031669410851768, 0.032924344630979596, 0.0335639340550421, 0.01693053539236755, 0.14442441287267116, 0.14106076508648435, 0.16152357181473032, 0.19368419389104796, 0.17100997984276234, 0.1798876309395422, 0.17359562388767957, 0.1688428707986115, 0.17153073190362889, 0.4873532093708409, 0.4817905646080419, 0.46553954209065673, 0.5045484051866034, 0.5087635579514667, 0.5120407358094373, 0.5075223596249856, 0.4753118049881757, 0.4739722877242655, 0.09589990561291506, 0.0976533056421176, 0.09720775046951424, 0.08905576092357881, 0.08083605765158286, 0.10509294908684519, 0.06837337910995012, 0.08967407898446889, 0.10919002305353864, 0.19857680390929877, 0.14990893671900662, 0.14528424997455514, 0.288347393672298, 0.13458878529979534, 0.14414560209572014, 0.1874797649704053, 0.13170608460983402, 0.13501784553315443, 0.2771011953071295, 0.2532556664341913, 0.2629373956302796, 0.2601260348143155, 0.2679881750415075, 0.25684450469707076, 0.28859035332989036, 0.29318174361677407, 0.2872124581747937, 0.2128409047912696, 0.22141356475472396, 0.20863294080289507, 0.1885916593703133, 0.19270157364449514, 0.19933722139501286, 0.23088207032307428, 0.2312580960071806, 0.22547696385962046, 0.17927501773261734, 0.1619606201694076, 0.18618629605701276, 0.17925066654574262, 0.17751229920639144, 0.19651444579926214, 0.17961370497253704, 0.1735449274395331, 0.18723532538243692, 0.1701269432148933, 0.17429748478325724, 0.17744368458422521, 0.17737497794670232, 0.17450373113425832, 0.19848808835424703, 0.17193839924410315, 0.1874898557945358, 0.17368696857717192, 0.5171516480675946, 0.5459037056805944, 0.1926121711068618, 0.5385830655894976, 0.534965498404077, 0.21200967375657842, 0.5497137082833796, 0.39901801578098306, 0.3624461245363514, 0.19001787876713738, 0.195715932390644, 0.19040301370020574, 0.41980641494033677, 0.42194999122268695, 0.3525441166293878, 0.2071877598204782, 0.5971221780083771, 0.6326113701060285, 0.18238552127476226, 0.18353978181093766, 0.18880389659027108, 0.18052161420717527, 0.17056872947901558, 0.18212451693719, 0.19670721305585392, 0.16975967751817256, 0.17791355174563672, 0.07383719986165937, 0.08954191797414823, 0.07035488188879735, 0.08673430514439862, 0.0667481870734491, 0.07077559289958157, 0.06776539072617294, 0.06587499872064217, 0.06087098854399742]}, "mutation_prompt": null}
{"id": "3fb182d6-834f-4427-be49-10b30464296c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptative mutation factor and crossover rate\n                if np.random.rand() < 0.5:\n                    F = self.mutation_factor + np.random.normal(0, 0.1)\n                else:\n                    F = self.mutation_factor - np.random.normal(0, 0.1)\n\n                CR = self.crossover_rate + np.random.normal(0, 0.1)\n\n                if F < 0: F = 0.1\n                if F > 1: F = 1\n                if CR < 0: CR = 0.1\n                if CR > 1: CR = 1\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Population Size and Mutation Strategy for Robust Black Box Optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c458bd2-4fa1-4d3a-9327-2ed0c688339e", "metadata": {"aucs": [0.6264305634304435, 0.6220769747025341, 0.6182567946406363, 0.6634489428978925, 0.6417576762225272, 0.649537170329038, 0.6577516357285639, 0.625191780309301, 0.6607024885453906, 0.37362197930229946, 0.37351259423893457, 0.4067995985018231, 0.40438737257688917, 0.41583167930596887, 0.36551871137580716, 0.4315455603216012, 0.39174655962919647, 0.41380747479307556, 0.10688568391965947, 0.10534988750508945, 0.09357198510807663, 0.09581734802287645, 0.09913100135298214, 0.08976981852123878, 0.09788372215232233, 0.09373287778753547, 0.11240301524503626, 0.10183048559292818, 0.09196053146840477, 0.09504233529453432, 0.08601969665465004, 0.08740642298642909, 0.07410803732483806, 0.0930938082108963, 0.09469322638014943, 0.08519755954501429, 0.9632426411268571, 0.9494439658663482, 0.9280730916005152, 0.93228868899423, 0.952116248929278, 0.9557822860110922, 0.9128854375352211, 0.9214690760827855, 0.9507582845130318, 0.3251814441330244, 0.30039548714280806, 0.275869560248052, 0.26188833392481514, 0.3104874291464118, 0.28734825475862047, 0.2959821416956584, 0.2877447309074106, 0.2899936927308645, 0.5898502884017901, 0.49043966647992676, 0.5185701794050759, 0.5661733446163831, 0.6066939028642082, 0.6276992400599901, 0.5106084473799584, 0.5795600532868304, 0.47298711964298024, 0.17274983159505553, 0.2000597389063532, 0.2179789808828495, 0.22195685792132147, 0.21673078220176145, 0.17159908874056307, 0.22911189767797946, 0.230994810179189, 0.18377135342607898, 0.3225748022733226, 0.20284821471452896, 0.2526961848484306, 0.1923736441979791, 0.21526534064904124, 0.22385474545391293, 0.20004237004784087, 0.18539641855303524, 0.2010902714727547, 0.13843660573126038, 0.13226545766333508, 0.14036700931292267, 0.18270932421193675, 0.12135659803919119, 0.16877849203858564, 0.13457523524753812, 0.13576013602257608, 0.1493662414596354, 0.2611141661384635, 0.26432077324004366, 0.2722232729934473, 0.25682578482587803, 0.2575868681850041, 0.2390170299490164, 0.3390400554229346, 0.3115367630695991, 0.30286277060444067, 0.022703282936233693, 0.037902582392502104, 0.028598358903326515, 0.07726227289272247, 0.06635736720106233, 0.04031669410851768, 0.032924344630979596, 0.0335639340550421, 0.01693053539236755, 0.14442441287267116, 0.14106076508648435, 0.16152357181473032, 0.19368419389104796, 0.17100997984276234, 0.1798876309395422, 0.17359562388767957, 0.1688428707986115, 0.17153073190362889, 0.4873532093708409, 0.4817905646080419, 0.46553954209065673, 0.5045484051866034, 0.5087635579514667, 0.5120407358094373, 0.5075223596249856, 0.4753118049881757, 0.4739722877242655, 0.09589990561291506, 0.0976533056421176, 0.09720775046951424, 0.08905576092357881, 0.08083605765158286, 0.10509294908684519, 0.06837337910995012, 0.08967407898446889, 0.10919002305353864, 0.19857680390929877, 0.14990893671900662, 0.14528424997455514, 0.288347393672298, 0.13458878529979534, 0.14414560209572014, 0.1874797649704053, 0.13170608460983402, 0.13501784553315443, 0.2771011953071295, 0.2532556664341913, 0.2629373956302796, 0.2601260348143155, 0.2679881750415075, 0.25684450469707076, 0.28859035332989036, 0.29318174361677407, 0.2872124581747937, 0.2128409047912696, 0.22141356475472396, 0.20863294080289507, 0.1885916593703133, 0.19270157364449514, 0.19933722139501286, 0.23088207032307428, 0.2312580960071806, 0.22547696385962046, 0.17927501773261734, 0.1619606201694076, 0.18618629605701276, 0.17925066654574262, 0.17751229920639144, 0.19651444579926214, 0.17961370497253704, 0.1735449274395331, 0.18723532538243692, 0.1701269432148933, 0.17429748478325724, 0.17744368458422521, 0.17737497794670232, 0.17450373113425832, 0.19848808835424703, 0.17193839924410315, 0.1874898557945358, 0.17368696857717192, 0.5171516480675946, 0.5459037056805944, 0.1926121711068618, 0.5385830655894976, 0.534965498404077, 0.21200967375657842, 0.5497137082833796, 0.39901801578098306, 0.3624461245363514, 0.19001787876713738, 0.195715932390644, 0.19040301370020574, 0.41980641494033677, 0.42194999122268695, 0.3525441166293878, 0.2071877598204782, 0.5971221780083771, 0.6326113701060285, 0.18238552127476226, 0.18353978181093766, 0.18880389659027108, 0.18052161420717527, 0.17056872947901558, 0.18212451693719, 0.19670721305585392, 0.16975967751817256, 0.17791355174563672, 0.07383719986165937, 0.08954191797414823, 0.07035488188879735, 0.08673430514439862, 0.0667481870734491, 0.07077559289958157, 0.06776539072617294, 0.06587499872064217, 0.06087098854399742]}, "mutation_prompt": null}
{"id": "729d1499-f860-4f0c-b73d-f4c8c22ce483", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptative mutation factor and crossover rate\n                if np.random.rand() < 0.5:\n                    F = self.mutation_factor + np.random.normal(0, 0.1)\n                else:\n                    F = self.mutation_factor - np.random.normal(0, 0.1)\n\n                CR = self.crossover_rate + np.random.normal(0, 0.1)\n\n                if F < 0: F = 0.1\n                if F > 1: F = 1\n                if CR < 0: CR = 0.1\n                if CR > 1: CR = 1\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Population Size and Mutation Strategy for Robust Black Box Optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c458bd2-4fa1-4d3a-9327-2ed0c688339e", "metadata": {"aucs": [0.6264305634304435, 0.6220769747025341, 0.6182567946406363, 0.6634489428978925, 0.6417576762225272, 0.649537170329038, 0.6577516357285639, 0.625191780309301, 0.6607024885453906, 0.37362197930229946, 0.37351259423893457, 0.4067995985018231, 0.40438737257688917, 0.41583167930596887, 0.36551871137580716, 0.4315455603216012, 0.39174655962919647, 0.41380747479307556, 0.10688568391965947, 0.10534988750508945, 0.09357198510807663, 0.09581734802287645, 0.09913100135298214, 0.08976981852123878, 0.09788372215232233, 0.09373287778753547, 0.11240301524503626, 0.10183048559292818, 0.09196053146840477, 0.09504233529453432, 0.08601969665465004, 0.08740642298642909, 0.07410803732483806, 0.0930938082108963, 0.09469322638014943, 0.08519755954501429, 0.9632426411268571, 0.9494439658663482, 0.9280730916005152, 0.93228868899423, 0.952116248929278, 0.9557822860110922, 0.9128854375352211, 0.9214690760827855, 0.9507582845130318, 0.3251814441330244, 0.30039548714280806, 0.275869560248052, 0.26188833392481514, 0.3104874291464118, 0.28734825475862047, 0.2959821416956584, 0.2877447309074106, 0.2899936927308645, 0.5898502884017901, 0.49043966647992676, 0.5185701794050759, 0.5661733446163831, 0.6066939028642082, 0.6276992400599901, 0.5106084473799584, 0.5795600532868304, 0.47298711964298024, 0.17274983159505553, 0.2000597389063532, 0.2179789808828495, 0.22195685792132147, 0.21673078220176145, 0.17159908874056307, 0.22911189767797946, 0.230994810179189, 0.18377135342607898, 0.3225748022733226, 0.20284821471452896, 0.2526961848484306, 0.1923736441979791, 0.21526534064904124, 0.22385474545391293, 0.20004237004784087, 0.18539641855303524, 0.2010902714727547, 0.13843660573126038, 0.13226545766333508, 0.14036700931292267, 0.18270932421193675, 0.12135659803919119, 0.16877849203858564, 0.13457523524753812, 0.13576013602257608, 0.1493662414596354, 0.2611141661384635, 0.26432077324004366, 0.2722232729934473, 0.25682578482587803, 0.2575868681850041, 0.2390170299490164, 0.3390400554229346, 0.3115367630695991, 0.30286277060444067, 0.022703282936233693, 0.037902582392502104, 0.028598358903326515, 0.07726227289272247, 0.06635736720106233, 0.04031669410851768, 0.032924344630979596, 0.0335639340550421, 0.01693053539236755, 0.14442441287267116, 0.14106076508648435, 0.16152357181473032, 0.19368419389104796, 0.17100997984276234, 0.1798876309395422, 0.17359562388767957, 0.1688428707986115, 0.17153073190362889, 0.4873532093708409, 0.4817905646080419, 0.46553954209065673, 0.5045484051866034, 0.5087635579514667, 0.5120407358094373, 0.5075223596249856, 0.4753118049881757, 0.4739722877242655, 0.09589990561291506, 0.0976533056421176, 0.09720775046951424, 0.08905576092357881, 0.08083605765158286, 0.10509294908684519, 0.06837337910995012, 0.08967407898446889, 0.10919002305353864, 0.19857680390929877, 0.14990893671900662, 0.14528424997455514, 0.288347393672298, 0.13458878529979534, 0.14414560209572014, 0.1874797649704053, 0.13170608460983402, 0.13501784553315443, 0.2771011953071295, 0.2532556664341913, 0.2629373956302796, 0.2601260348143155, 0.2679881750415075, 0.25684450469707076, 0.28859035332989036, 0.29318174361677407, 0.2872124581747937, 0.2128409047912696, 0.22141356475472396, 0.20863294080289507, 0.1885916593703133, 0.19270157364449514, 0.19933722139501286, 0.23088207032307428, 0.2312580960071806, 0.22547696385962046, 0.17927501773261734, 0.1619606201694076, 0.18618629605701276, 0.17925066654574262, 0.17751229920639144, 0.19651444579926214, 0.17961370497253704, 0.1735449274395331, 0.18723532538243692, 0.1701269432148933, 0.17429748478325724, 0.17744368458422521, 0.17737497794670232, 0.17450373113425832, 0.19848808835424703, 0.17193839924410315, 0.1874898557945358, 0.17368696857717192, 0.5171516480675946, 0.5459037056805944, 0.1926121711068618, 0.5385830655894976, 0.534965498404077, 0.21200967375657842, 0.5497137082833796, 0.39901801578098306, 0.3624461245363514, 0.19001787876713738, 0.195715932390644, 0.19040301370020574, 0.41980641494033677, 0.42194999122268695, 0.3525441166293878, 0.2071877598204782, 0.5971221780083771, 0.6326113701060285, 0.18238552127476226, 0.18353978181093766, 0.18880389659027108, 0.18052161420717527, 0.17056872947901558, 0.18212451693719, 0.19670721305585392, 0.16975967751817256, 0.17791355174563672, 0.07383719986165937, 0.08954191797414823, 0.07035488188879735, 0.08673430514439862, 0.0667481870734491, 0.07077559289958157, 0.06776539072617294, 0.06587499872064217, 0.06087098854399742]}, "mutation_prompt": null}
{"id": "225fbec8-b84c-4225-94d6-b881fd10dac2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptative mutation factor and crossover rate\n                if np.random.rand() < 0.5:\n                    F = self.mutation_factor + np.random.normal(0, 0.1)\n                else:\n                    F = self.mutation_factor - np.random.normal(0, 0.1)\n\n                CR = self.crossover_rate + np.random.normal(0, 0.1)\n\n                if F < 0: F = 0.1\n                if F > 1: F = 1\n                if CR < 0: CR = 0.1\n                if CR > 1: CR = 1\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Population Size and Mutation Strategy for Robust Black Box Optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c458bd2-4fa1-4d3a-9327-2ed0c688339e", "metadata": {"aucs": [0.6264305634304435, 0.6220769747025341, 0.6182567946406363, 0.6634489428978925, 0.6417576762225272, 0.649537170329038, 0.6577516357285639, 0.625191780309301, 0.6607024885453906, 0.37362197930229946, 0.37351259423893457, 0.4067995985018231, 0.40438737257688917, 0.41583167930596887, 0.36551871137580716, 0.4315455603216012, 0.39174655962919647, 0.41380747479307556, 0.10688568391965947, 0.10534988750508945, 0.09357198510807663, 0.09581734802287645, 0.09913100135298214, 0.08976981852123878, 0.09788372215232233, 0.09373287778753547, 0.11240301524503626, 0.10183048559292818, 0.09196053146840477, 0.09504233529453432, 0.08601969665465004, 0.08740642298642909, 0.07410803732483806, 0.0930938082108963, 0.09469322638014943, 0.08519755954501429, 0.9632426411268571, 0.9494439658663482, 0.9280730916005152, 0.93228868899423, 0.952116248929278, 0.9557822860110922, 0.9128854375352211, 0.9214690760827855, 0.9507582845130318, 0.3251814441330244, 0.30039548714280806, 0.275869560248052, 0.26188833392481514, 0.3104874291464118, 0.28734825475862047, 0.2959821416956584, 0.2877447309074106, 0.2899936927308645, 0.5898502884017901, 0.49043966647992676, 0.5185701794050759, 0.5661733446163831, 0.6066939028642082, 0.6276992400599901, 0.5106084473799584, 0.5795600532868304, 0.47298711964298024, 0.17274983159505553, 0.2000597389063532, 0.2179789808828495, 0.22195685792132147, 0.21673078220176145, 0.17159908874056307, 0.22911189767797946, 0.230994810179189, 0.18377135342607898, 0.3225748022733226, 0.20284821471452896, 0.2526961848484306, 0.1923736441979791, 0.21526534064904124, 0.22385474545391293, 0.20004237004784087, 0.18539641855303524, 0.2010902714727547, 0.13843660573126038, 0.13226545766333508, 0.14036700931292267, 0.18270932421193675, 0.12135659803919119, 0.16877849203858564, 0.13457523524753812, 0.13576013602257608, 0.1493662414596354, 0.2611141661384635, 0.26432077324004366, 0.2722232729934473, 0.25682578482587803, 0.2575868681850041, 0.2390170299490164, 0.3390400554229346, 0.3115367630695991, 0.30286277060444067, 0.022703282936233693, 0.037902582392502104, 0.028598358903326515, 0.07726227289272247, 0.06635736720106233, 0.04031669410851768, 0.032924344630979596, 0.0335639340550421, 0.01693053539236755, 0.14442441287267116, 0.14106076508648435, 0.16152357181473032, 0.19368419389104796, 0.17100997984276234, 0.1798876309395422, 0.17359562388767957, 0.1688428707986115, 0.17153073190362889, 0.4873532093708409, 0.4817905646080419, 0.46553954209065673, 0.5045484051866034, 0.5087635579514667, 0.5120407358094373, 0.5075223596249856, 0.4753118049881757, 0.4739722877242655, 0.09589990561291506, 0.0976533056421176, 0.09720775046951424, 0.08905576092357881, 0.08083605765158286, 0.10509294908684519, 0.06837337910995012, 0.08967407898446889, 0.10919002305353864, 0.19857680390929877, 0.14990893671900662, 0.14528424997455514, 0.288347393672298, 0.13458878529979534, 0.14414560209572014, 0.1874797649704053, 0.13170608460983402, 0.13501784553315443, 0.2771011953071295, 0.2532556664341913, 0.2629373956302796, 0.2601260348143155, 0.2679881750415075, 0.25684450469707076, 0.28859035332989036, 0.29318174361677407, 0.2872124581747937, 0.2128409047912696, 0.22141356475472396, 0.20863294080289507, 0.1885916593703133, 0.19270157364449514, 0.19933722139501286, 0.23088207032307428, 0.2312580960071806, 0.22547696385962046, 0.17927501773261734, 0.1619606201694076, 0.18618629605701276, 0.17925066654574262, 0.17751229920639144, 0.19651444579926214, 0.17961370497253704, 0.1735449274395331, 0.18723532538243692, 0.1701269432148933, 0.17429748478325724, 0.17744368458422521, 0.17737497794670232, 0.17450373113425832, 0.19848808835424703, 0.17193839924410315, 0.1874898557945358, 0.17368696857717192, 0.5171516480675946, 0.5459037056805944, 0.1926121711068618, 0.5385830655894976, 0.534965498404077, 0.21200967375657842, 0.5497137082833796, 0.39901801578098306, 0.3624461245363514, 0.19001787876713738, 0.195715932390644, 0.19040301370020574, 0.41980641494033677, 0.42194999122268695, 0.3525441166293878, 0.2071877598204782, 0.5971221780083771, 0.6326113701060285, 0.18238552127476226, 0.18353978181093766, 0.18880389659027108, 0.18052161420717527, 0.17056872947901558, 0.18212451693719, 0.19670721305585392, 0.16975967751817256, 0.17791355174563672, 0.07383719986165937, 0.08954191797414823, 0.07035488188879735, 0.08673430514439862, 0.0667481870734491, 0.07077559289958157, 0.06776539072617294, 0.06587499872064217, 0.06087098854399742]}, "mutation_prompt": null}
{"id": "df7e7c0d-49af-44f0-be5d-9cc2864f55be", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptative mutation factor and crossover rate\n                if np.random.rand() < 0.5:\n                    F = self.mutation_factor + np.random.normal(0, 0.1)\n                else:\n                    F = self.mutation_factor - np.random.normal(0, 0.1)\n\n                CR = self.crossover_rate + np.random.normal(0, 0.1)\n\n                if F < 0: F = 0.1\n                if F > 1: F = 1\n                if CR < 0: CR = 0.1\n                if CR > 1: CR = 1\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Population Size and Mutation Strategy for Robust Black Box Optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c458bd2-4fa1-4d3a-9327-2ed0c688339e", "metadata": {"aucs": [0.6264305634304435, 0.6220769747025341, 0.6182567946406363, 0.6634489428978925, 0.6417576762225272, 0.649537170329038, 0.6577516357285639, 0.625191780309301, 0.6607024885453906, 0.37362197930229946, 0.37351259423893457, 0.4067995985018231, 0.40438737257688917, 0.41583167930596887, 0.36551871137580716, 0.4315455603216012, 0.39174655962919647, 0.41380747479307556, 0.10688568391965947, 0.10534988750508945, 0.09357198510807663, 0.09581734802287645, 0.09913100135298214, 0.08976981852123878, 0.09788372215232233, 0.09373287778753547, 0.11240301524503626, 0.10183048559292818, 0.09196053146840477, 0.09504233529453432, 0.08601969665465004, 0.08740642298642909, 0.07410803732483806, 0.0930938082108963, 0.09469322638014943, 0.08519755954501429, 0.9632426411268571, 0.9494439658663482, 0.9280730916005152, 0.93228868899423, 0.952116248929278, 0.9557822860110922, 0.9128854375352211, 0.9214690760827855, 0.9507582845130318, 0.3251814441330244, 0.30039548714280806, 0.275869560248052, 0.26188833392481514, 0.3104874291464118, 0.28734825475862047, 0.2959821416956584, 0.2877447309074106, 0.2899936927308645, 0.5898502884017901, 0.49043966647992676, 0.5185701794050759, 0.5661733446163831, 0.6066939028642082, 0.6276992400599901, 0.5106084473799584, 0.5795600532868304, 0.47298711964298024, 0.17274983159505553, 0.2000597389063532, 0.2179789808828495, 0.22195685792132147, 0.21673078220176145, 0.17159908874056307, 0.22911189767797946, 0.230994810179189, 0.18377135342607898, 0.3225748022733226, 0.20284821471452896, 0.2526961848484306, 0.1923736441979791, 0.21526534064904124, 0.22385474545391293, 0.20004237004784087, 0.18539641855303524, 0.2010902714727547, 0.13843660573126038, 0.13226545766333508, 0.14036700931292267, 0.18270932421193675, 0.12135659803919119, 0.16877849203858564, 0.13457523524753812, 0.13576013602257608, 0.1493662414596354, 0.2611141661384635, 0.26432077324004366, 0.2722232729934473, 0.25682578482587803, 0.2575868681850041, 0.2390170299490164, 0.3390400554229346, 0.3115367630695991, 0.30286277060444067, 0.022703282936233693, 0.037902582392502104, 0.028598358903326515, 0.07726227289272247, 0.06635736720106233, 0.04031669410851768, 0.032924344630979596, 0.0335639340550421, 0.01693053539236755, 0.14442441287267116, 0.14106076508648435, 0.16152357181473032, 0.19368419389104796, 0.17100997984276234, 0.1798876309395422, 0.17359562388767957, 0.1688428707986115, 0.17153073190362889, 0.4873532093708409, 0.4817905646080419, 0.46553954209065673, 0.5045484051866034, 0.5087635579514667, 0.5120407358094373, 0.5075223596249856, 0.4753118049881757, 0.4739722877242655, 0.09589990561291506, 0.0976533056421176, 0.09720775046951424, 0.08905576092357881, 0.08083605765158286, 0.10509294908684519, 0.06837337910995012, 0.08967407898446889, 0.10919002305353864, 0.19857680390929877, 0.14990893671900662, 0.14528424997455514, 0.288347393672298, 0.13458878529979534, 0.14414560209572014, 0.1874797649704053, 0.13170608460983402, 0.13501784553315443, 0.2771011953071295, 0.2532556664341913, 0.2629373956302796, 0.2601260348143155, 0.2679881750415075, 0.25684450469707076, 0.28859035332989036, 0.29318174361677407, 0.2872124581747937, 0.2128409047912696, 0.22141356475472396, 0.20863294080289507, 0.1885916593703133, 0.19270157364449514, 0.19933722139501286, 0.23088207032307428, 0.2312580960071806, 0.22547696385962046, 0.17927501773261734, 0.1619606201694076, 0.18618629605701276, 0.17925066654574262, 0.17751229920639144, 0.19651444579926214, 0.17961370497253704, 0.1735449274395331, 0.18723532538243692, 0.1701269432148933, 0.17429748478325724, 0.17744368458422521, 0.17737497794670232, 0.17450373113425832, 0.19848808835424703, 0.17193839924410315, 0.1874898557945358, 0.17368696857717192, 0.5171516480675946, 0.5459037056805944, 0.1926121711068618, 0.5385830655894976, 0.534965498404077, 0.21200967375657842, 0.5497137082833796, 0.39901801578098306, 0.3624461245363514, 0.19001787876713738, 0.195715932390644, 0.19040301370020574, 0.41980641494033677, 0.42194999122268695, 0.3525441166293878, 0.2071877598204782, 0.5971221780083771, 0.6326113701060285, 0.18238552127476226, 0.18353978181093766, 0.18880389659027108, 0.18052161420717527, 0.17056872947901558, 0.18212451693719, 0.19670721305585392, 0.16975967751817256, 0.17791355174563672, 0.07383719986165937, 0.08954191797414823, 0.07035488188879735, 0.08673430514439862, 0.0667481870734491, 0.07077559289958157, 0.06776539072617294, 0.06587499872064217, 0.06087098854399742]}, "mutation_prompt": null}
{"id": "5374bd20-f418-4b1e-9cad-dbdc4ededd8f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.evaluations = 0\n        self.strategy_switch_frequency = 50  # New parameter for hybrid strategy\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        generation = 0  # Track the number of generations\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptative mutation factor and crossover rate with decay\n                F = self.mutation_factor * (0.9 ** (generation // self.strategy_switch_frequency))\n                CR = self.crossover_rate * (0.9 ** (generation // self.strategy_switch_frequency))\n\n                if F < 0.1: F = 0.1\n                if CR < 0.1: CR = 0.1\n\n                # Hybrid Mutation Strategy\n                if generation % (2 * self.strategy_switch_frequency) < self.strategy_switch_frequency:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                    a, b, c = self.population[indices]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.population_size, 5, replace=False)\n                    a, b, c, d, e = self.population[indices]\n                    mutant = np.clip(a + F * (b - c + d - e), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n            generation += 1\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Strategic Hybrid Mutation and Dynamic Parameter Tuning for Faster Convergence.", "configspace": "", "generation": 8, "fitness": 0.232884328085767, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "7c458bd2-4fa1-4d3a-9327-2ed0c688339e", "metadata": {"aucs": [0.6121331211798027, 0.5773623488634578, 0.5893702254881759, 0.62742633029289, 0.6501645570220977, 0.6448776256711146, 0.6550639594611368, 0.6126312595236425, 0.6098609319989743, 0.4089382369809519, 0.40338723340199256, 0.3983032826441141, 0.34843123573703216, 0.3803969416697207, 0.40227774008408734, 0.39917622303086486, 0.3903079230099783, 0.36919554667577537, 0.10322645264739749, 0.10055548362000732, 0.10389999843029785, 0.10033025909171067, 0.10916977536519645, 0.11238768190429582, 0.12012964973166651, 0.10432364049149512, 0.11051300770203631, 0.08881878072530636, 0.08777654784627487, 0.09270258493570982, 0.09528630512465075, 0.07989457425272817, 0.09523602064571146, 0.08941037601603208, 0.09223169191648772, 0.0886988098815189, 0.9806164642140757, 0.9131818418276485, 0.9674545387139455, 0.9574454447453314, 0.9162789564746359, 0.937231638163827, 0.9708179656152067, 0.9572804101259852, 0.9689147118055341, 0.2474001321453403, 0.24891761267270962, 0.2584351436467479, 0.24018485953874225, 0.2706465346414677, 0.2736949531763252, 0.2689212009386297, 0.26803169668096494, 0.2880593749420839, 0.29602159460747757, 0.3981415148764924, 0.2879089333837037, 0.44205011337022504, 0.40204190711465804, 0.36110682082464063, 0.39609069933515617, 0.4148813429232051, 0.42100225095591226, 0.1383761016475642, 0.1338771268084461, 0.15137680842962253, 0.14366826063672866, 0.15367135959606837, 0.16493962594560585, 0.13944359231628223, 0.12890482192275454, 0.12157382884874512, 0.2196371434546741, 0.12070748536808862, 0.16887833076812186, 0.12782155154983488, 0.12442483253578207, 0.13864489016201265, 0.10491634840219854, 0.1605428531649068, 0.14907557792521908, 0.04869268594126441, 0.03237118809166262, 0.052628029870029236, 0.037152520248884824, 0.059844400518130114, 0.03507528086074996, 0.032135661604913324, 0.05389544041569594, 0.04796996214050975, 0.16447253229750947, 0.15579595932729318, 0.1638318547023826, 0.14794384280255268, 0.13134837085582218, 0.11981046069982226, 0.17316206570418202, 0.21772294395688674, 0.19985966667983068, 0.0018981582117781892, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012505539427957957, 0.012973591898925219, 0.00043403530289454206, 0.11293041128130155, 0.10678407795241562, 0.11206540919530417, 0.12186541644079929, 0.11450678246834545, 0.12452814934614709, 0.11169696673179219, 0.12124799548132703, 0.13147619739792737, 0.4205481643227652, 0.4198163830273346, 0.4295588310796069, 0.4304824429315758, 0.42777211578772834, 0.44705512913599743, 0.4129780609294066, 0.4530537505417064, 0.442134706678628, 0.07641986638117215, 0.08526892055188529, 0.09807949926709314, 0.08436633933759186, 0.07573271141133997, 0.09267435560793513, 0.08561880111274645, 0.07210372397047216, 0.08499826442802783, 0.16799710812358737, 0.17302141451976039, 0.15487575442812063, 0.17045848255157292, 0.12193592525031294, 0.12857848872551836, 0.15281597861599894, 0.13076233628714506, 0.14783675891775439, 0.2688080634665505, 0.243777750778571, 0.2564831390712523, 0.22023308874661673, 0.22831548918703637, 0.24504679246652927, 0.2694201953343347, 0.28183013928976475, 0.28491304181598875, 0.19303471973061503, 0.17464689742109607, 0.1913125167025278, 0.16592775110811175, 0.17082447769686038, 0.18799784485610282, 0.1894450892223326, 0.19154500883062997, 0.19505623930493066, 0.18996915365687672, 0.1782631004969384, 0.17477534818091767, 0.18601476048298393, 0.17587263607113912, 0.1826660243017053, 0.19149023797324305, 0.16940631448384247, 0.17532490837872772, 0.18166013159853323, 0.17772442746667472, 0.18130845413503005, 0.1782675157565241, 0.17355605790061512, 0.18267987566094834, 0.17257276544595257, 0.1780630531591605, 0.1810501512157211, 0.1630641434338318, 0.4192542159812437, 0.6134605222197592, 0.1785440424262097, 0.17686602403979013, 0.1802710030857022, 0.14594586382843755, 0.20886084501698632, 0.1436611123369388, 0.1561538155203792, 0.19094379859357546, 0.1754362262979845, 0.18745603305036262, 0.1909504432181619, 0.1842695143893136, 0.2031021198733982, 0.379543441898471, 0.20536581139962606, 0.18227325076420264, 0.1750465273350068, 0.20220339461419934, 0.18017873564172626, 0.1672841590033155, 0.1819553628287388, 0.18393149724920355, 0.18923353842363744, 0.18559703242694559, 0.07446722231441183, 0.06931647327856316, 0.059068764914947725, 0.0795444177803627, 0.07332459360631927, 0.0682051069820947, 0.07045896182666478, 0.06460371985359181, 0.06068449789069852]}, "mutation_prompt": null}
{"id": "e4d05949-60d8-4f13-ab43-357c9c36fb1a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        def opposition_based_learning():\n            return self.lower_bound + self.upper_bound - self.population\n\n        while self.evaluations < self.budget:\n            opposition_population = opposition_based_learning()\n            for i in range(self.population_size):\n                if np.random.rand() < 0.5:\n                    self.fitness[i] = func(opposition_population[i])\n                    self.evaluations += 1\n                    if self.fitness[i] < best_fitness:\n                        best_fitness = self.fitness[i]\n                        best_solution = opposition_population[i]\n                if self.evaluations >= self.budget:\n                    break\n\n                # Adaptative mutation factor and crossover rate\n                F = self.mutation_factor * (1 + np.random.normal(0, 0.1))\n                CR = self.crossover_rate * (1 + np.random.normal(0, 0.1))\n\n                if F < 0.1: F = 0.1\n                if F > 1.0: F = 1.0\n                if CR < 0.1: CR = 0.1\n                if CR > 1.0: CR = 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Scaling and Opposition-based Learning for Accelerated Convergence.", "configspace": "", "generation": 9, "fitness": 0.1292808158192327, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "7c458bd2-4fa1-4d3a-9327-2ed0c688339e", "metadata": {"aucs": [0.1803597856567778, 0.16326808025072315, 0.2057136373661861, 0.2050733558262957, 0.18200673699669856, 0.1875260873314466, 0.15441984014596422, 0.18342158049835422, 0.18786985286540991, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0408105786656654, 0.03171531148036133, 0.046826667150594914, 0.044512265455596944, 0.03916577959604839, 0.048870115770180966, 0.034188526064789726, 0.04495308300569556, 0.04099239306907532, 0.029576500351425228, 0.049303516631878486, 0.03992730747727624, 0.027362563227725123, 0.033731495611888596, 0.03309498752726414, 0.02832953396599336, 0.03170258148043015, 0.043081094488236715, 0.9766394477782023, 0.9602694130903098, 0.9169394180342557, 0.8954387553507966, 0.874911253454033, 0.9700714771416017, 0.9603190654014099, 0.8614922415733718, 0.9672647117394052, 0.06762090525202491, 0.06596514330217929, 0.04718787537810187, 0.10298831864175895, 0.04756905612502704, 0.06224417438011309, 0.07210192719235697, 0.08619359521398817, 0.06174369106207345, 0.15672302931984705, 0.1982072009958067, 0.1901640650883818, 0.10562935967272313, 0.1087909873690347, 0.10638777211464645, 0.12949070276862185, 0.1029549228065132, 0.09822286116570089, 0.041434156026924795, 0.03612553573094124, 0.03820554226598338, 9.999999999998899e-05, 0.0030710901342981822, 0.004175573165918434, 0.012165258956819858, 0.0037102976033446255, 9.999999999998899e-05, 0.10564106004402107, 0.09920697866196682, 0.10203831843968458, 0.13139111677186466, 0.11347924835071732, 0.11929574078144212, 0.11468668128570536, 0.09608757287660175, 0.1149103213029482, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04624911591053538, 0.031006705634180398, 0.04277853059435077, 0.05813022814573232, 0.061700852061338574, 0.030902204901379626, 0.04555163949317409, 0.04822871439309706, 0.048002945404226005, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01899763569924906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015183726247837148, 9.999999999998899e-05, 0.21204534231333505, 0.19555931577293773, 0.18584309776879804, 0.18796182068142187, 0.1601813234102205, 0.19586527208977356, 0.18992187606451227, 0.1984874499098701, 0.22166502509761232, 0.05704933437838533, 0.048469398951823894, 0.04964324894238947, 0.044375031667510334, 0.03324895042885512, 0.0458636905009665, 0.036168873847558514, 0.04050391634943784, 0.060448134438317314, 0.14335161059565982, 0.1409755991388011, 0.13219788806886767, 0.14087699558223687, 0.1429350577761459, 0.1420477430157271, 0.13172504691150244, 0.11953626292430031, 0.15276375253612628, 0.15883377941444143, 0.16071318418264968, 0.1613932299901244, 0.16491155831645987, 0.15956318951322324, 0.17742813704195637, 0.16074416723277485, 0.17377774300845283, 0.15454675557556052, 0.09780909452341036, 0.09745795990614603, 0.12142455825638931, 0.11823106981343445, 0.1246289573148962, 0.1228007011455351, 0.1560995123026514, 0.11358480552693018, 0.09721296608204355, 0.16601222587353692, 0.1656433538416282, 0.18692485369327994, 0.18847787859222198, 0.17242729147345126, 0.17491238755384675, 0.1736533548701965, 0.17541201968501186, 0.17783315288704982, 0.13034289588162973, 0.13162595187369608, 0.12618778668636954, 0.14219931327588542, 0.14296439881763667, 0.14795164393208182, 0.14111937604808045, 0.12434483462754287, 0.14629085351145354, 0.14109603554871342, 0.15905871170443875, 0.19784893012723603, 0.14677794637060926, 0.15200247729531202, 0.17601097506653984, 0.13757552064111556, 0.15649299909318581, 0.151193397913298, 0.14291574768547466, 0.14193846960580703, 0.16538719639041155, 0.16890151370179862, 0.16252812122228355, 0.15300523669878707, 0.17344055869779162, 0.16298772173805298, 0.14936625398043202, 0.17427412392423225, 0.18502935428223544, 0.18030645459825223, 0.1949944285018269, 0.16817109483422377, 0.17707207625074373, 0.1877397471515706, 0.17811586852751649, 0.18382528970126655, 0.07287103199266254, 0.052889926069050075, 0.09940303955888741, 0.06384964076277533, 0.06531740933570251, 0.06857270223704603, 0.06487209699009877, 0.06300576922728174, 0.05699628146133495]}, "mutation_prompt": null}
{"id": "ebb274c5-f3de-4d37-bf5c-e052795818d8", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptative mutation factor and crossover rate\n                if np.random.rand() < 0.5:\n                    F = self.mutation_factor + np.random.normal(0, 0.1)\n                else:\n                    F = self.mutation_factor - np.random.normal(0, 0.1)\n\n                CR = self.crossover_rate + np.random.normal(0, 0.1)\n\n                if F < 0: F = 0.1\n                if F > 1: F = 1\n                if CR < 0: CR = 0.1\n                if CR > 1: CR = 1\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Population Size and Mutation Strategy for Robust Black Box Optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c458bd2-4fa1-4d3a-9327-2ed0c688339e", "metadata": {"aucs": [0.6264305634304435, 0.6220769747025341, 0.6182567946406363, 0.6634489428978925, 0.6417576762225272, 0.649537170329038, 0.6577516357285639, 0.625191780309301, 0.6607024885453906, 0.37362197930229946, 0.37351259423893457, 0.4067995985018231, 0.40438737257688917, 0.41583167930596887, 0.36551871137580716, 0.4315455603216012, 0.39174655962919647, 0.41380747479307556, 0.10688568391965947, 0.10534988750508945, 0.09357198510807663, 0.09581734802287645, 0.09913100135298214, 0.08976981852123878, 0.09788372215232233, 0.09373287778753547, 0.11240301524503626, 0.10183048559292818, 0.09196053146840477, 0.09504233529453432, 0.08601969665465004, 0.08740642298642909, 0.07410803732483806, 0.0930938082108963, 0.09469322638014943, 0.08519755954501429, 0.9632426411268571, 0.9494439658663482, 0.9280730916005152, 0.93228868899423, 0.952116248929278, 0.9557822860110922, 0.9128854375352211, 0.9214690760827855, 0.9507582845130318, 0.3251814441330244, 0.30039548714280806, 0.275869560248052, 0.26188833392481514, 0.3104874291464118, 0.28734825475862047, 0.2959821416956584, 0.2877447309074106, 0.2899936927308645, 0.5898502884017901, 0.49043966647992676, 0.5185701794050759, 0.5661733446163831, 0.6066939028642082, 0.6276992400599901, 0.5106084473799584, 0.5795600532868304, 0.47298711964298024, 0.17274983159505553, 0.2000597389063532, 0.2179789808828495, 0.22195685792132147, 0.21673078220176145, 0.17159908874056307, 0.22911189767797946, 0.230994810179189, 0.18377135342607898, 0.3225748022733226, 0.20284821471452896, 0.2526961848484306, 0.1923736441979791, 0.21526534064904124, 0.22385474545391293, 0.20004237004784087, 0.18539641855303524, 0.2010902714727547, 0.13843660573126038, 0.13226545766333508, 0.14036700931292267, 0.18270932421193675, 0.12135659803919119, 0.16877849203858564, 0.13457523524753812, 0.13576013602257608, 0.1493662414596354, 0.2611141661384635, 0.26432077324004366, 0.2722232729934473, 0.25682578482587803, 0.2575868681850041, 0.2390170299490164, 0.3390400554229346, 0.3115367630695991, 0.30286277060444067, 0.022703282936233693, 0.037902582392502104, 0.028598358903326515, 0.07726227289272247, 0.06635736720106233, 0.04031669410851768, 0.032924344630979596, 0.0335639340550421, 0.01693053539236755, 0.14442441287267116, 0.14106076508648435, 0.16152357181473032, 0.19368419389104796, 0.17100997984276234, 0.1798876309395422, 0.17359562388767957, 0.1688428707986115, 0.17153073190362889, 0.4873532093708409, 0.4817905646080419, 0.46553954209065673, 0.5045484051866034, 0.5087635579514667, 0.5120407358094373, 0.5075223596249856, 0.4753118049881757, 0.4739722877242655, 0.09589990561291506, 0.0976533056421176, 0.09720775046951424, 0.08905576092357881, 0.08083605765158286, 0.10509294908684519, 0.06837337910995012, 0.08967407898446889, 0.10919002305353864, 0.19857680390929877, 0.14990893671900662, 0.14528424997455514, 0.288347393672298, 0.13458878529979534, 0.14414560209572014, 0.1874797649704053, 0.13170608460983402, 0.13501784553315443, 0.2771011953071295, 0.2532556664341913, 0.2629373956302796, 0.2601260348143155, 0.2679881750415075, 0.25684450469707076, 0.28859035332989036, 0.29318174361677407, 0.2872124581747937, 0.2128409047912696, 0.22141356475472396, 0.20863294080289507, 0.1885916593703133, 0.19270157364449514, 0.19933722139501286, 0.23088207032307428, 0.2312580960071806, 0.22547696385962046, 0.17927501773261734, 0.1619606201694076, 0.18618629605701276, 0.17925066654574262, 0.17751229920639144, 0.19651444579926214, 0.17961370497253704, 0.1735449274395331, 0.18723532538243692, 0.1701269432148933, 0.17429748478325724, 0.17744368458422521, 0.17737497794670232, 0.17450373113425832, 0.19848808835424703, 0.17193839924410315, 0.1874898557945358, 0.17368696857717192, 0.5171516480675946, 0.5459037056805944, 0.1926121711068618, 0.5385830655894976, 0.534965498404077, 0.21200967375657842, 0.5497137082833796, 0.39901801578098306, 0.3624461245363514, 0.19001787876713738, 0.195715932390644, 0.19040301370020574, 0.41980641494033677, 0.42194999122268695, 0.3525441166293878, 0.2071877598204782, 0.5971221780083771, 0.6326113701060285, 0.18238552127476226, 0.18353978181093766, 0.18880389659027108, 0.18052161420717527, 0.17056872947901558, 0.18212451693719, 0.19670721305585392, 0.16975967751817256, 0.17791355174563672, 0.07383719986165937, 0.08954191797414823, 0.07035488188879735, 0.08673430514439862, 0.0667481870734491, 0.07077559289958157, 0.06776539072617294, 0.06587499872064217, 0.06087098854399742]}, "mutation_prompt": null}
{"id": "1db2930a-ea7e-4f6c-a55e-862f1e625efe", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptative mutation factor and crossover rate\n                if np.random.rand() < 0.5:\n                    F = self.mutation_factor + np.random.normal(0, 0.1)\n                else:\n                    F = self.mutation_factor - np.random.normal(0, 0.1)\n\n                CR = self.crossover_rate + np.random.normal(0, 0.1)\n\n                if F < 0: F = 0.1\n                if F > 1: F = 1\n                if CR < 0: CR = 0.1\n                if CR > 1: CR = 1\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Population Size and Mutation Strategy for Robust Black Box Optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c458bd2-4fa1-4d3a-9327-2ed0c688339e", "metadata": {"aucs": [0.6264305634304435, 0.6220769747025341, 0.6182567946406363, 0.6634489428978925, 0.6417576762225272, 0.649537170329038, 0.6577516357285639, 0.625191780309301, 0.6607024885453906, 0.37362197930229946, 0.37351259423893457, 0.4067995985018231, 0.40438737257688917, 0.41583167930596887, 0.36551871137580716, 0.4315455603216012, 0.39174655962919647, 0.41380747479307556, 0.10688568391965947, 0.10534988750508945, 0.09357198510807663, 0.09581734802287645, 0.09913100135298214, 0.08976981852123878, 0.09788372215232233, 0.09373287778753547, 0.11240301524503626, 0.10183048559292818, 0.09196053146840477, 0.09504233529453432, 0.08601969665465004, 0.08740642298642909, 0.07410803732483806, 0.0930938082108963, 0.09469322638014943, 0.08519755954501429, 0.9632426411268571, 0.9494439658663482, 0.9280730916005152, 0.93228868899423, 0.952116248929278, 0.9557822860110922, 0.9128854375352211, 0.9214690760827855, 0.9507582845130318, 0.3251814441330244, 0.30039548714280806, 0.275869560248052, 0.26188833392481514, 0.3104874291464118, 0.28734825475862047, 0.2959821416956584, 0.2877447309074106, 0.2899936927308645, 0.5898502884017901, 0.49043966647992676, 0.5185701794050759, 0.5661733446163831, 0.6066939028642082, 0.6276992400599901, 0.5106084473799584, 0.5795600532868304, 0.47298711964298024, 0.17274983159505553, 0.2000597389063532, 0.2179789808828495, 0.22195685792132147, 0.21673078220176145, 0.17159908874056307, 0.22911189767797946, 0.230994810179189, 0.18377135342607898, 0.3225748022733226, 0.20284821471452896, 0.2526961848484306, 0.1923736441979791, 0.21526534064904124, 0.22385474545391293, 0.20004237004784087, 0.18539641855303524, 0.2010902714727547, 0.13843660573126038, 0.13226545766333508, 0.14036700931292267, 0.18270932421193675, 0.12135659803919119, 0.16877849203858564, 0.13457523524753812, 0.13576013602257608, 0.1493662414596354, 0.2611141661384635, 0.26432077324004366, 0.2722232729934473, 0.25682578482587803, 0.2575868681850041, 0.2390170299490164, 0.3390400554229346, 0.3115367630695991, 0.30286277060444067, 0.022703282936233693, 0.037902582392502104, 0.028598358903326515, 0.07726227289272247, 0.06635736720106233, 0.04031669410851768, 0.032924344630979596, 0.0335639340550421, 0.01693053539236755, 0.14442441287267116, 0.14106076508648435, 0.16152357181473032, 0.19368419389104796, 0.17100997984276234, 0.1798876309395422, 0.17359562388767957, 0.1688428707986115, 0.17153073190362889, 0.4873532093708409, 0.4817905646080419, 0.46553954209065673, 0.5045484051866034, 0.5087635579514667, 0.5120407358094373, 0.5075223596249856, 0.4753118049881757, 0.4739722877242655, 0.09589990561291506, 0.0976533056421176, 0.09720775046951424, 0.08905576092357881, 0.08083605765158286, 0.10509294908684519, 0.06837337910995012, 0.08967407898446889, 0.10919002305353864, 0.19857680390929877, 0.14990893671900662, 0.14528424997455514, 0.288347393672298, 0.13458878529979534, 0.14414560209572014, 0.1874797649704053, 0.13170608460983402, 0.13501784553315443, 0.2771011953071295, 0.2532556664341913, 0.2629373956302796, 0.2601260348143155, 0.2679881750415075, 0.25684450469707076, 0.28859035332989036, 0.29318174361677407, 0.2872124581747937, 0.2128409047912696, 0.22141356475472396, 0.20863294080289507, 0.1885916593703133, 0.19270157364449514, 0.19933722139501286, 0.23088207032307428, 0.2312580960071806, 0.22547696385962046, 0.17927501773261734, 0.1619606201694076, 0.18618629605701276, 0.17925066654574262, 0.17751229920639144, 0.19651444579926214, 0.17961370497253704, 0.1735449274395331, 0.18723532538243692, 0.1701269432148933, 0.17429748478325724, 0.17744368458422521, 0.17737497794670232, 0.17450373113425832, 0.19848808835424703, 0.17193839924410315, 0.1874898557945358, 0.17368696857717192, 0.5171516480675946, 0.5459037056805944, 0.1926121711068618, 0.5385830655894976, 0.534965498404077, 0.21200967375657842, 0.5497137082833796, 0.39901801578098306, 0.3624461245363514, 0.19001787876713738, 0.195715932390644, 0.19040301370020574, 0.41980641494033677, 0.42194999122268695, 0.3525441166293878, 0.2071877598204782, 0.5971221780083771, 0.6326113701060285, 0.18238552127476226, 0.18353978181093766, 0.18880389659027108, 0.18052161420717527, 0.17056872947901558, 0.18212451693719, 0.19670721305585392, 0.16975967751817256, 0.17791355174563672, 0.07383719986165937, 0.08954191797414823, 0.07035488188879735, 0.08673430514439862, 0.0667481870734491, 0.07077559289958157, 0.06776539072617294, 0.06587499872064217, 0.06087098854399742]}, "mutation_prompt": null}
{"id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim  # Reduced population size to accelerate convergence\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Randomly vary between 0.5 and 1.0\n                CR = 0.8 + np.random.rand() * 0.2  # Randomly vary between 0.8 and 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Adjustment for Accelerated Convergence.", "configspace": "", "generation": 12, "fitness": 0.34231643243251253, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.23.", "error": "", "parent_id": "7c458bd2-4fa1-4d3a-9327-2ed0c688339e", "metadata": {"aucs": [0.7194062276690331, 0.7472969122726141, 0.7583840241483886, 0.7577748655528187, 0.7527151589933888, 0.7445112508909242, 0.75552835848185, 0.7394927827345997, 0.7515536608705771, 0.5785914059282911, 0.5732651601699209, 0.5754020462942245, 0.5584244493563656, 0.5811804085399863, 0.5382512029893047, 0.5382617737560592, 0.5716898795783265, 0.5756592204762383, 0.09454272160365906, 0.11421174206176932, 0.11193268872590711, 0.11528934291876525, 0.11024886639755038, 0.11152549285604785, 0.10643954644934961, 0.10564762328648869, 0.10328258802512824, 0.10689075993673836, 0.09855368634351458, 0.10436658652713082, 0.1010692754053143, 0.10546595442943785, 0.09348174610891691, 0.10226973191635025, 0.0852784066686274, 0.09102038952402125, 0.9621091101783923, 0.9708891020994203, 0.9317302152216946, 0.9724420584471793, 0.9518272963219256, 0.9697136325137446, 0.9627443630796504, 0.9494079866609617, 0.9371009681011362, 0.38860751937231575, 0.3885545261266863, 0.3841028832472715, 0.42229669509738976, 0.3523945014274097, 0.39190184584764287, 0.37672617757881677, 0.3977292091777115, 0.3973341338815778, 0.6601290867609735, 0.6201964451340756, 0.6421811355932132, 0.6674910848654323, 0.6803570929412377, 0.6733856128869112, 0.7323547766069369, 0.6340319395010784, 0.6639306004316007, 0.3334842610327148, 0.3183033379989889, 0.3730423205735126, 0.29197722936255865, 0.32221612210010575, 0.3643036049206322, 0.12379288721027171, 0.35977696363597633, 0.28827425725956013, 0.33363453459253645, 0.3410781792918387, 0.4037040106189379, 0.2843108640343094, 0.35489935938805894, 0.29406916007740236, 0.33899530509687437, 0.2633518221661837, 0.3188860733380624, 0.29040430920808635, 0.31010801949755973, 0.2599053568962192, 0.30126746531787485, 0.3005503628946864, 0.25970626174000155, 0.2716835268688047, 0.27880393767217915, 0.2887864268516448, 0.43487960599354825, 0.4212585550380308, 0.4057270025473153, 0.4350637364863158, 0.4018764009382182, 0.40775861835636795, 0.43306920097246726, 0.49016162651485407, 0.42498619406914073, 0.13506483955211457, 0.08019473068523075, 0.11178473632168606, 0.111757878197, 0.17703370128541684, 0.17339714051134614, 0.13047862021521361, 0.0998754331055397, 0.17777836775946054, 0.23743338027945393, 0.25254938459242937, 0.25355702914599565, 0.2466029452426538, 0.27853639862580015, 0.2572483734549884, 0.24110291187138277, 0.24015841377624936, 0.23527147209324406, 0.6020177601737893, 0.5835787393323875, 0.6024840399428522, 0.606828431576522, 0.6436612814458654, 0.6203812159645221, 0.6217111779560596, 0.6075294985503086, 0.6472281880436621, 0.08182342950229626, 0.08651457417914477, 0.11410151162216475, 0.09035623269374249, 0.09758603130153876, 0.09293536820756143, 0.0865936424632251, 0.08800182687214986, 0.0938592237818675, 0.1385974843041724, 0.1377775320879191, 0.1729848729943635, 0.21479993731424707, 0.13017109378920433, 0.19552188272387172, 0.16088779173526835, 0.1739365701076624, 0.26770179986711506, 0.3371267123010334, 0.3587260315020029, 0.33372606541854344, 0.31544669691369254, 0.3111792341674605, 0.3260820843332949, 0.3412957311968322, 0.3526979144504335, 0.3766897915138878, 0.2506979323930696, 0.24268159495856512, 0.22881950636953174, 0.2571737837304271, 0.223420736374758, 0.24914798422146578, 0.2700136533687213, 0.26119400481731914, 0.269151041236105, 0.19062264291630682, 0.1934282878278113, 0.1822081857384764, 0.18406981089013852, 0.1673415520620456, 0.18660386498188009, 0.18500432530284627, 0.19123509167956176, 0.1693487658468923, 0.18084720033715118, 0.19732791329002597, 0.1801114955321209, 0.1805223197037703, 0.18542925939837496, 0.19474363522386273, 0.18286308122490857, 0.19259203219292675, 0.18380847484868268, 0.5074550064420775, 0.7047983267019193, 0.1509499417551602, 0.7141290705119843, 0.18014288790280442, 0.5378552034597719, 0.17675199862299373, 0.5323031017611709, 0.569289799920734, 0.5627990628913287, 0.20483925310713402, 0.6547447158800644, 0.6277236614337054, 0.18738545461853295, 0.1718459315523232, 0.7822899187513976, 0.20560571298721186, 0.1916772283717234, 0.19672153491162714, 0.17878258346154108, 0.18841285251585516, 0.17567489938085468, 0.17965992707721323, 0.2005526458273832, 0.18769668553034602, 0.18065877175601597, 0.195824414417747, 0.07449804948074357, 0.07832471923876305, 0.08112098563220294, 0.07444200434138382, 0.07286602467048875, 0.06740733420155087, 0.07089483989194412, 0.07330282866015858, 0.08347385668937368]}, "mutation_prompt": null}
{"id": "e3492c13-a601-45f2-9e28-1d7a28633db7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim  # Reduced population size to accelerate convergence\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Randomly vary between 0.5 and 1.0\n                CR = 0.8 + np.random.rand() * 0.2  # Randomly vary between 0.8 and 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Adjustment for Accelerated Convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.7194062276690331, 0.7472969122726141, 0.7583840241483886, 0.7577748655528187, 0.7527151589933888, 0.7445112508909242, 0.75552835848185, 0.7394927827345997, 0.7515536608705771, 0.5785914059282911, 0.5732651601699209, 0.5754020462942245, 0.5584244493563656, 0.5811804085399863, 0.5382512029893047, 0.5382617737560592, 0.5716898795783265, 0.5756592204762383, 0.09454272160365906, 0.11421174206176932, 0.11193268872590711, 0.11528934291876525, 0.11024886639755038, 0.11152549285604785, 0.10643954644934961, 0.10564762328648869, 0.10328258802512824, 0.10689075993673836, 0.09855368634351458, 0.10436658652713082, 0.1010692754053143, 0.10546595442943785, 0.09348174610891691, 0.10226973191635025, 0.0852784066686274, 0.09102038952402125, 0.9621091101783923, 0.9708891020994203, 0.9317302152216946, 0.9724420584471793, 0.9518272963219256, 0.9697136325137446, 0.9627443630796504, 0.9494079866609617, 0.9371009681011362, 0.38860751937231575, 0.3885545261266863, 0.3841028832472715, 0.42229669509738976, 0.3523945014274097, 0.39190184584764287, 0.37672617757881677, 0.3977292091777115, 0.3973341338815778, 0.6601290867609735, 0.6201964451340756, 0.6421811355932132, 0.6674910848654323, 0.6803570929412377, 0.6733856128869112, 0.7323547766069369, 0.6340319395010784, 0.6639306004316007, 0.3334842610327148, 0.3183033379989889, 0.3730423205735126, 0.29197722936255865, 0.32221612210010575, 0.3643036049206322, 0.12379288721027171, 0.35977696363597633, 0.28827425725956013, 0.33363453459253645, 0.3410781792918387, 0.4037040106189379, 0.2843108640343094, 0.35489935938805894, 0.29406916007740236, 0.33899530509687437, 0.2633518221661837, 0.3188860733380624, 0.29040430920808635, 0.31010801949755973, 0.2599053568962192, 0.30126746531787485, 0.3005503628946864, 0.25970626174000155, 0.2716835268688047, 0.27880393767217915, 0.2887864268516448, 0.43487960599354825, 0.4212585550380308, 0.4057270025473153, 0.4350637364863158, 0.4018764009382182, 0.40775861835636795, 0.43306920097246726, 0.49016162651485407, 0.42498619406914073, 0.13506483955211457, 0.08019473068523075, 0.11178473632168606, 0.111757878197, 0.17703370128541684, 0.17339714051134614, 0.13047862021521361, 0.0998754331055397, 0.17777836775946054, 0.23743338027945393, 0.25254938459242937, 0.25355702914599565, 0.2466029452426538, 0.27853639862580015, 0.2572483734549884, 0.24110291187138277, 0.24015841377624936, 0.23527147209324406, 0.6020177601737893, 0.5835787393323875, 0.6024840399428522, 0.606828431576522, 0.6436612814458654, 0.6203812159645221, 0.6217111779560596, 0.6075294985503086, 0.6472281880436621, 0.08182342950229626, 0.08651457417914477, 0.11410151162216475, 0.09035623269374249, 0.09758603130153876, 0.09293536820756143, 0.0865936424632251, 0.08800182687214986, 0.0938592237818675, 0.1385974843041724, 0.1377775320879191, 0.1729848729943635, 0.21479993731424707, 0.13017109378920433, 0.19552188272387172, 0.16088779173526835, 0.1739365701076624, 0.26770179986711506, 0.3371267123010334, 0.3587260315020029, 0.33372606541854344, 0.31544669691369254, 0.3111792341674605, 0.3260820843332949, 0.3412957311968322, 0.3526979144504335, 0.3766897915138878, 0.2506979323930696, 0.24268159495856512, 0.22881950636953174, 0.2571737837304271, 0.223420736374758, 0.24914798422146578, 0.2700136533687213, 0.26119400481731914, 0.269151041236105, 0.19062264291630682, 0.1934282878278113, 0.1822081857384764, 0.18406981089013852, 0.1673415520620456, 0.18660386498188009, 0.18500432530284627, 0.19123509167956176, 0.1693487658468923, 0.18084720033715118, 0.19732791329002597, 0.1801114955321209, 0.1805223197037703, 0.18542925939837496, 0.19474363522386273, 0.18286308122490857, 0.19259203219292675, 0.18380847484868268, 0.5074550064420775, 0.7047983267019193, 0.1509499417551602, 0.7141290705119843, 0.18014288790280442, 0.5378552034597719, 0.17675199862299373, 0.5323031017611709, 0.569289799920734, 0.5627990628913287, 0.20483925310713402, 0.6547447158800644, 0.6277236614337054, 0.18738545461853295, 0.1718459315523232, 0.7822899187513976, 0.20560571298721186, 0.1916772283717234, 0.19672153491162714, 0.17878258346154108, 0.18841285251585516, 0.17567489938085468, 0.17965992707721323, 0.2005526458273832, 0.18769668553034602, 0.18065877175601597, 0.195824414417747, 0.07449804948074357, 0.07832471923876305, 0.08112098563220294, 0.07444200434138382, 0.07286602467048875, 0.06740733420155087, 0.07089483989194412, 0.07330282866015858, 0.08347385668937368]}, "mutation_prompt": null}
{"id": "266e0695-8b9e-4be9-97d5-96896dcb576d", "solution": "import numpy as np\n\nclass ModifiedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim  # Slightly increased population size for better exploration\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Fitness-based adjustment of mutation factor\n                F = 0.4 + 0.6 * (self.fitness[i] - best_fitness) / (np.max(self.fitness) - best_fitness + 1e-9)\n                CR = 0.9  # Fixed crossover rate for stability\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "ModifiedAdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Modified Population Dynamics and Fitness-Based Selection Pressure.", "configspace": "", "generation": 14, "fitness": 0.34136455902087404, "feedback": "The algorithm ModifiedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.7450806359376639, 0.7410405714458259, 0.7352203747649584, 0.7509276971145136, 0.7762455215023083, 0.7730849644441561, 0.7603475600657191, 0.7347229192136314, 0.7372602548550518, 0.5978470245618484, 0.5622838167291784, 0.5572770518807442, 0.5756314485599578, 0.5696970090279199, 0.569532341139148, 0.5945042656400157, 0.5466313752614493, 0.5686981374038148, 0.10074766380242439, 0.0995910176463376, 0.10484578589621829, 0.10213215386701247, 0.0971058062981951, 0.09384714354499901, 0.11415597967228552, 0.10013666925437514, 0.10413652927462302, 0.09328385444063947, 0.09280776921595857, 0.10332364413608408, 0.11067508584684183, 0.10922433841973433, 0.09257666252577201, 0.09642109709388513, 0.10231699923923931, 0.10519042775626042, 0.9803489941881683, 0.9178911352595448, 0.9286541292706074, 0.9560241533127519, 0.9025914281731621, 0.9750338870786993, 0.9491151664541609, 0.9491539682261726, 0.9036999276305616, 0.4130728794513504, 0.3913353689161643, 0.36517756718723915, 0.39959805837450757, 0.41659676531531276, 0.40790813020822625, 0.3908239680340051, 0.39845505420763194, 0.4218957981270248, 0.5886190373890021, 0.7355726381634476, 0.759498563103931, 0.7408141412659288, 0.7550231264809095, 0.6808620019881806, 0.7064241067804946, 0.7442044906357395, 0.7539486869365785, 0.3327237074776018, 0.3501922868170977, 0.25404385148743835, 0.26982379885536345, 0.39195456128108486, 0.24544136047810128, 0.31564241575404184, 0.3181786255156054, 0.33669614500473544, 0.30106976316541223, 0.20979003632337223, 0.33340162556147457, 0.37384338978245, 0.3376181359143723, 0.33789480641612046, 0.370378723183596, 0.22338193030814302, 0.3069288745309313, 0.28724691894368226, 0.3262661427759169, 0.2815414512691785, 0.3607500294258452, 0.32035962346795266, 0.3168097081413196, 0.3288882854710359, 0.2998727350999416, 0.30641823777537147, 0.4802171405124206, 0.43878047125380804, 0.477382062589202, 0.47620289530521676, 0.4185940462939687, 0.4729708579380494, 0.4349986264645902, 0.47312441355391033, 0.4848124125239972, 0.14528698124138173, 0.17535790658824957, 0.08819374482168063, 0.17033725060681804, 0.1714032478242521, 0.18198003764482862, 0.10697069362397671, 0.15728996297723952, 0.10614036376195612, 0.20373948371374306, 0.2154362681112928, 0.2052890930426432, 0.21536624082882394, 0.20515717736069028, 0.2121604070448977, 0.2164254200867769, 0.20836448073312341, 0.2065551320681549, 0.6209398675409831, 0.6055090475411637, 0.5903657904258555, 0.6018690118627044, 0.5891327385652416, 0.6054645413953883, 0.5747175742203393, 0.5811716254355384, 0.5916791549696896, 0.11503641155896982, 0.09411597275618966, 0.08755358846079286, 0.09333966987591924, 0.0816407540591747, 0.08473071621431372, 0.08976983817007567, 0.08521596474172344, 0.07758999887400586, 0.13598251282449403, 0.15625740750841433, 0.13195933059765708, 0.19509125486786238, 0.18502541005122963, 0.13717193301468, 0.13239920089274315, 0.16927979494271528, 0.13867672785611562, 0.29352956879309966, 0.3007905594805983, 0.30263361390288424, 0.29829426756556976, 0.317189624843915, 0.3036575320747401, 0.33231044123743414, 0.3279939787646933, 0.35243130952560786, 0.23279336816666074, 0.23213425993672843, 0.245784329204775, 0.22505027572777903, 0.22251447723429452, 0.25811371402766814, 0.284640471961611, 0.2543005097488955, 0.27207532960105607, 0.18519334173812207, 0.1943448480065394, 0.20741741541902148, 0.19056116000067203, 0.1797628071071593, 0.20411447221676948, 0.19131572858599288, 0.1746111462013037, 0.1749896635523568, 0.1845563338483418, 0.1727954354356125, 0.18814304859598996, 0.18697394390256117, 0.1759779496953332, 0.18411471484051822, 0.18029601496726877, 0.18492657912411536, 0.17855741962456517, 0.18726543207688928, 0.5132774991404776, 0.15864405190766062, 0.712974043486807, 0.6090299001575601, 0.6614905724527836, 0.5009319053060235, 0.3879848369344733, 0.17804862632000695, 0.6063076961320732, 0.1966519709675223, 0.5390314775345969, 0.18784661832059912, 0.2997704738397172, 0.5726290394366758, 0.20982783465631405, 0.2003735437453935, 0.6772787685968467, 0.1860337383070556, 0.19499662011852348, 0.17838726992271114, 0.17790258036179207, 0.18192897957582677, 0.18197875042510803, 0.18219387128769227, 0.22272325780668423, 0.19069276310819794, 0.07046427921362663, 0.07429223584775113, 0.07154788844980542, 0.06932200542347178, 0.0759105906008345, 0.0781568064239, 0.06841011705523836, 0.08433272465936115, 0.06294172664337583]}, "mutation_prompt": null}
{"id": "7a4ecc63-5495-4855-97b0-f9bcea8915e2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim  # Reduced population size to accelerate convergence\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Randomly vary between 0.5 and 1.0\n                CR = 0.8 + np.random.rand() * 0.2  # Randomly vary between 0.8 and 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Adjustment for Accelerated Convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.7194062276690331, 0.7472969122726141, 0.7583840241483886, 0.7577748655528187, 0.7527151589933888, 0.7445112508909242, 0.75552835848185, 0.7394927827345997, 0.7515536608705771, 0.5785914059282911, 0.5732651601699209, 0.5754020462942245, 0.5584244493563656, 0.5811804085399863, 0.5382512029893047, 0.5382617737560592, 0.5716898795783265, 0.5756592204762383, 0.09454272160365906, 0.11421174206176932, 0.11193268872590711, 0.11528934291876525, 0.11024886639755038, 0.11152549285604785, 0.10643954644934961, 0.10564762328648869, 0.10328258802512824, 0.10689075993673836, 0.09855368634351458, 0.10436658652713082, 0.1010692754053143, 0.10546595442943785, 0.09348174610891691, 0.10226973191635025, 0.0852784066686274, 0.09102038952402125, 0.9621091101783923, 0.9708891020994203, 0.9317302152216946, 0.9724420584471793, 0.9518272963219256, 0.9697136325137446, 0.9627443630796504, 0.9494079866609617, 0.9371009681011362, 0.38860751937231575, 0.3885545261266863, 0.3841028832472715, 0.42229669509738976, 0.3523945014274097, 0.39190184584764287, 0.37672617757881677, 0.3977292091777115, 0.3973341338815778, 0.6601290867609735, 0.6201964451340756, 0.6421811355932132, 0.6674910848654323, 0.6803570929412377, 0.6733856128869112, 0.7323547766069369, 0.6340319395010784, 0.6639306004316007, 0.3334842610327148, 0.3183033379989889, 0.3730423205735126, 0.29197722936255865, 0.32221612210010575, 0.3643036049206322, 0.12379288721027171, 0.35977696363597633, 0.28827425725956013, 0.33363453459253645, 0.3410781792918387, 0.4037040106189379, 0.2843108640343094, 0.35489935938805894, 0.29406916007740236, 0.33899530509687437, 0.2633518221661837, 0.3188860733380624, 0.29040430920808635, 0.31010801949755973, 0.2599053568962192, 0.30126746531787485, 0.3005503628946864, 0.25970626174000155, 0.2716835268688047, 0.27880393767217915, 0.2887864268516448, 0.43487960599354825, 0.4212585550380308, 0.4057270025473153, 0.4350637364863158, 0.4018764009382182, 0.40775861835636795, 0.43306920097246726, 0.49016162651485407, 0.42498619406914073, 0.13506483955211457, 0.08019473068523075, 0.11178473632168606, 0.111757878197, 0.17703370128541684, 0.17339714051134614, 0.13047862021521361, 0.0998754331055397, 0.17777836775946054, 0.23743338027945393, 0.25254938459242937, 0.25355702914599565, 0.2466029452426538, 0.27853639862580015, 0.2572483734549884, 0.24110291187138277, 0.24015841377624936, 0.23527147209324406, 0.6020177601737893, 0.5835787393323875, 0.6024840399428522, 0.606828431576522, 0.6436612814458654, 0.6203812159645221, 0.6217111779560596, 0.6075294985503086, 0.6472281880436621, 0.08182342950229626, 0.08651457417914477, 0.11410151162216475, 0.09035623269374249, 0.09758603130153876, 0.09293536820756143, 0.0865936424632251, 0.08800182687214986, 0.0938592237818675, 0.1385974843041724, 0.1377775320879191, 0.1729848729943635, 0.21479993731424707, 0.13017109378920433, 0.19552188272387172, 0.16088779173526835, 0.1739365701076624, 0.26770179986711506, 0.3371267123010334, 0.3587260315020029, 0.33372606541854344, 0.31544669691369254, 0.3111792341674605, 0.3260820843332949, 0.3412957311968322, 0.3526979144504335, 0.3766897915138878, 0.2506979323930696, 0.24268159495856512, 0.22881950636953174, 0.2571737837304271, 0.223420736374758, 0.24914798422146578, 0.2700136533687213, 0.26119400481731914, 0.269151041236105, 0.19062264291630682, 0.1934282878278113, 0.1822081857384764, 0.18406981089013852, 0.1673415520620456, 0.18660386498188009, 0.18500432530284627, 0.19123509167956176, 0.1693487658468923, 0.18084720033715118, 0.19732791329002597, 0.1801114955321209, 0.1805223197037703, 0.18542925939837496, 0.19474363522386273, 0.18286308122490857, 0.19259203219292675, 0.18380847484868268, 0.5074550064420775, 0.7047983267019193, 0.1509499417551602, 0.7141290705119843, 0.18014288790280442, 0.5378552034597719, 0.17675199862299373, 0.5323031017611709, 0.569289799920734, 0.5627990628913287, 0.20483925310713402, 0.6547447158800644, 0.6277236614337054, 0.18738545461853295, 0.1718459315523232, 0.7822899187513976, 0.20560571298721186, 0.1916772283717234, 0.19672153491162714, 0.17878258346154108, 0.18841285251585516, 0.17567489938085468, 0.17965992707721323, 0.2005526458273832, 0.18769668553034602, 0.18065877175601597, 0.195824414417747, 0.07449804948074357, 0.07832471923876305, 0.08112098563220294, 0.07444200434138382, 0.07286602467048875, 0.06740733420155087, 0.07089483989194412, 0.07330282866015858, 0.08347385668937368]}, "mutation_prompt": null}
{"id": "9591ed7f-1f98-4b49-a6fb-1edd63c7c22d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        initial_pop = np.copy(self.population)\n        twin_population = np.copy(self.population)  # Twin population for diversity\n\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6  # Slightly broadened range for F\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly broadened range for CR\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                if np.random.rand() < 0.1:  # Occasionally use twin population\n                    twin_index = np.random.randint(self.population_size)\n                    trial = np.clip(trial + 0.1 * (twin_population[twin_index] - trial), self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n\n            # Update twin population occasionally to maintain diversity\n            if self.evaluations % (self.budget // 10) == 0:\n                twin_population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Twin Population Dynamics to Enhance Convergence Speed and Robustness.", "configspace": "", "generation": 16, "fitness": 0.33319098712108103, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.7565668810779799, 0.7422788950733883, 0.739207648115409, 0.7728045639850476, 0.7553074447991893, 0.7827837845509684, 0.7616358117357274, 0.7694518830297983, 0.7807726202419825, 0.5800656895579954, 0.5947058852372877, 0.6133873289219043, 0.5664211159742055, 0.5795300322084926, 0.5650257717060707, 0.6002847888341623, 0.5573201205466844, 0.5886712294780513, 0.13062700073988576, 0.12890504450270268, 0.11644429132162981, 0.11782955642113324, 0.10049359239655986, 0.11300382257449093, 0.1233251721398505, 0.13851082527959602, 0.11235690491207573, 0.10595792380495495, 0.1280845137872022, 0.09194221978315786, 0.0981829877949858, 0.11249810523088144, 0.09426951646673276, 0.11181536319081986, 0.09861680849013699, 0.12464617977905867, 0.9620126711392366, 0.9487668330874375, 0.8892976043357792, 0.9428360155714341, 0.9592721680389645, 0.9425713505771111, 0.9816592277886179, 0.9450909373374511, 0.9347292517629749, 0.43155875078268413, 0.3993644122656579, 0.41987545837680273, 0.3616134372972003, 0.3804002199652965, 0.3972897099869439, 0.42749561925696156, 0.4262175963826097, 0.43964160569855926, 0.7304874492294708, 0.6496045875751311, 0.7047849373217332, 0.7323295115710742, 0.7147343759968877, 0.7149723587362597, 0.6550871805544222, 0.6803808039388919, 0.6240266738850531, 0.27833829177408187, 0.2909459946909878, 0.26253670274410024, 0.25643466212399346, 0.28894285063176384, 0.2530597550057365, 0.24938394831399646, 0.25372386501936695, 0.30932660442951776, 0.36494215803984553, 0.28098447823612227, 0.2025562609477345, 0.28774990778905274, 0.29736303916963347, 0.2673508187471869, 0.32150774651645575, 0.23488797616630241, 0.21821103524263585, 0.230330343083194, 0.2206283645105691, 0.2279505401653119, 0.2186267523454144, 0.19977143226319172, 0.16871190591439955, 0.19743531432353711, 0.2197700319982151, 0.1944882503614449, 0.2958553574399506, 0.34990105345564937, 0.3333268651522656, 0.3398916719459424, 0.27654329179437187, 0.3424359798809028, 0.3892879172635698, 0.38756940381838123, 0.37849374816686887, 0.06980908900347982, 0.10891817112807645, 0.03365869812829081, 0.08511287393914302, 0.1293555350452532, 0.09750559256577707, 0.08526850859720703, 0.08722878881161689, 0.06176308934153696, 0.22990403458801112, 0.21405776259462184, 0.20555865697998799, 0.2059804016930129, 0.23789858689591192, 0.22577289127393518, 0.22902139599708793, 0.22006454363273797, 0.2263119312832239, 0.5964561760360114, 0.5910196337897236, 0.5735068258971376, 0.6111848429233302, 0.6075232093378979, 0.5938519576263437, 0.624125476047271, 0.6187723989741976, 0.6201038183039342, 0.0991700944448799, 0.09168574803401175, 0.08900017089751655, 0.09391639591411327, 0.0972713102441648, 0.09777633521013995, 0.0929502492312062, 0.09307185752727876, 0.08580054871212728, 0.16472857411617692, 0.14728447614960083, 0.14128286287681713, 0.1381409890778339, 0.15466325939181602, 0.1466032650163226, 0.1802551155968929, 0.13785506613776377, 0.18860074067269672, 0.3443417868955533, 0.3453576737952846, 0.3367084395730805, 0.3346326904284035, 0.34397439657316753, 0.3540059496755631, 0.3742078347118456, 0.3704796378979297, 0.3906696974817693, 0.26738940666834576, 0.25872259616568494, 0.23844891421254655, 0.2612574056150474, 0.24302597289915262, 0.24853279221368685, 0.26310750435063257, 0.2946246298354772, 0.2569276439104651, 0.1902708746521724, 0.17669519507611586, 0.16821151850766003, 0.18223458468566045, 0.1996135267949578, 0.20119150020450083, 0.18429999724664747, 0.188599808700735, 0.19910627334028785, 0.18954771245351876, 0.18903779693284295, 0.18368508012362095, 0.18144382703346196, 0.19711844669731382, 0.18000470274817326, 0.17910939220055133, 0.20006559112283862, 0.26906616384401394, 0.638965852215817, 0.5404134716130008, 0.734676897726074, 0.6757529762078192, 0.1785758344974332, 0.6159168967329856, 0.737010716743953, 0.4522921980938366, 0.6075130397092798, 0.1649584443953367, 0.2031805509396596, 0.19515301009541608, 0.5607074052177481, 0.19625835140450776, 0.5773697437536952, 0.2089808437469004, 0.20478403458938865, 0.20505623099992998, 0.18016935940203216, 0.19087864359214401, 0.18237891525175265, 0.19208090492303231, 0.2089240591443845, 0.18881274833599793, 0.17852780724669937, 0.18511878400302606, 0.18829776255352815, 0.07618841543021304, 0.08607984999655305, 0.08478168564205768, 0.08676072781281241, 0.07844276593930466, 0.07242873617328915, 0.08445161492117426, 0.07819610617748463, 0.07456252634786265]}, "mutation_prompt": null}
{"id": "41d9a740-44db-4c3a-8473-113f915db252", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5\n                CR = 0.8 + np.random.rand() * 0.2\n\n                # Mutation with integrated random walk component\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                random_walk = np.random.normal(0, 0.1, self.dim)\n                mutant = np.clip(a + F * (b - c) + random_walk, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Integrated Random Walk Mutation for Enhanced Exploration and Exploitation Balance.", "configspace": "", "generation": 17, "fitness": 0.21906369879457693, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.43401919549795775, 0.4108597604028903, 0.44464252661972214, 0.439861498269957, 0.4303433146753972, 0.46121170212937346, 0.4461986581381342, 0.44794583174230973, 0.4234804911558543, 0.056506810953152464, 0.058690344180580944, 0.04815663482558308, 0.05445814663557014, 0.06360379066296773, 0.07546554739579225, 0.04750010581721087, 0.0658028023472107, 0.08740063397645792, 0.11506153160004773, 0.1024662545111178, 0.10601050726348205, 0.11149351356361281, 0.09341069878840791, 0.11117608645311661, 0.09555401734611646, 0.10886499249687587, 0.09925770079172125, 0.10151478548802406, 0.08933684680160736, 0.11225071019643817, 0.0873852610088044, 0.08081272044718357, 0.08611530385020105, 0.10321960937935126, 0.09287824195843364, 0.09034632441839208, 0.9035451964853908, 0.9060624036455966, 0.9351895604990921, 0.9688892445556909, 0.9449503405144998, 0.9444653697995902, 0.9241421820037794, 0.9281057013526017, 0.9608358534108202, 0.2647656372112791, 0.25762354742507876, 0.2633734176413929, 0.2532731220383879, 0.25908821298496454, 0.2672880284265057, 0.27012309203600704, 0.26701969153910443, 0.2726363217813781, 0.3139967415381203, 0.3199794071386104, 0.3145094946244812, 0.34543364509773966, 0.3088289420656225, 0.3531745027858375, 0.585072556480219, 0.582642353751131, 0.4463694542449863, 0.1539733974273655, 0.1569125307580025, 0.1570580726581442, 0.14103564800034551, 0.13919708595733915, 0.14451760468233188, 0.1551852174448044, 0.15082366333764352, 0.1757578362299792, 0.17324481166079764, 0.15982715162480943, 0.16465309078472123, 0.1551954834525191, 0.1335886371392646, 0.15364995904211787, 0.15454795246561026, 0.14787897331167155, 0.15604860067684445, 0.014816040147045517, 0.01421282858907491, 0.043161244671247934, 0.022557347979346165, 0.016530792550287887, 0.020206023610583768, 0.012466187179827837, 0.015548757971258209, 0.00627710138155313, 0.10894102706757347, 0.1247336158350516, 0.08726266163942287, 0.08301902139163009, 0.09548685454400963, 0.12168568714364736, 0.10060814949034924, 0.10885637284490168, 0.11468645697924762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09956535783300968, 0.09668086304403589, 0.09991488612156008, 0.09653808318891877, 0.09300660389492355, 0.09755005784104454, 0.0932498966811045, 0.11113942238292873, 0.09220089770807705, 0.39718191764092736, 0.3911740797401564, 0.41590120910580775, 0.4071214914487912, 0.39789435533538475, 0.40492185018793636, 0.3954357314875555, 0.4019937717412907, 0.3851756290083357, 0.1037151751313431, 0.15446173619508718, 0.09064840076096536, 0.0956285405329036, 0.1099328100364324, 0.09042280576978123, 0.0931293492647004, 0.08392890358945204, 0.09017455952630404, 0.23667912944750047, 0.18187042928378883, 0.2229344400496006, 0.13633392652651455, 0.2066002805676993, 0.13170636968196192, 0.17389646970728978, 0.16068399890041074, 0.16543415667473205, 0.26893700703391676, 0.2700878016144279, 0.2671048419963632, 0.2662564620807042, 0.26039477590462434, 0.26447278747476444, 0.27000537456077167, 0.2757922386578918, 0.2816650965374906, 0.20136063477176247, 0.21302072763313784, 0.22003218608727404, 0.20307947421686323, 0.19904331711265977, 0.21161371296759024, 0.20799489906828295, 0.20811220847424416, 0.21319580385905434, 0.17532144569132813, 0.20564097890262134, 0.18616029259862021, 0.17524924228504246, 0.18427273979716896, 0.17853272074303528, 0.190169687994455, 0.19312755635774725, 0.18819977643827346, 0.18231786009989726, 0.17307440393289109, 0.18459813014351711, 0.17566426307372074, 0.18209514044155672, 0.17169516846786048, 0.18795197400528352, 0.18223146380724398, 0.17718468630833883, 0.5508533191054582, 0.48171890407242157, 0.18381704430568813, 0.5456053230755429, 0.3951416609563799, 0.1790655890909547, 0.177593684022066, 0.19554151292008914, 0.5180650809182852, 0.45235431608633436, 0.20186517939812343, 0.39990204749499625, 0.1595766658540202, 0.28749272313976726, 0.15706878754860776, 0.20820336094068503, 0.20383431567042232, 0.5353684692784095, 0.19223872932676656, 0.18459766881765338, 0.18364739641472083, 0.18041693183982865, 0.1786433946425321, 0.189030021064315, 0.1933513510069388, 0.1935930049820649, 0.18303325751065547, 0.08666265542818241, 0.07727115730876011, 0.07469458958028918, 0.07655735024683963, 0.06623472492271776, 0.07507294818167065, 0.07783267353368195, 0.07367482151083182, 0.06791500171590592]}, "mutation_prompt": null}
{"id": "d10f57c0-939f-43d0-bb93-e4703729ddcf", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim  # Reduced population size to accelerate convergence\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Randomly vary between 0.5 and 1.0\n                CR = 0.8 + np.random.rand() * 0.2  # Randomly vary between 0.8 and 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Adjustment for Accelerated Convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.7194062276690331, 0.7472969122726141, 0.7583840241483886, 0.7577748655528187, 0.7527151589933888, 0.7445112508909242, 0.75552835848185, 0.7394927827345997, 0.7515536608705771, 0.5785914059282911, 0.5732651601699209, 0.5754020462942245, 0.5584244493563656, 0.5811804085399863, 0.5382512029893047, 0.5382617737560592, 0.5716898795783265, 0.5756592204762383, 0.09454272160365906, 0.11421174206176932, 0.11193268872590711, 0.11528934291876525, 0.11024886639755038, 0.11152549285604785, 0.10643954644934961, 0.10564762328648869, 0.10328258802512824, 0.10689075993673836, 0.09855368634351458, 0.10436658652713082, 0.1010692754053143, 0.10546595442943785, 0.09348174610891691, 0.10226973191635025, 0.0852784066686274, 0.09102038952402125, 0.9621091101783923, 0.9708891020994203, 0.9317302152216946, 0.9724420584471793, 0.9518272963219256, 0.9697136325137446, 0.9627443630796504, 0.9494079866609617, 0.9371009681011362, 0.38860751937231575, 0.3885545261266863, 0.3841028832472715, 0.42229669509738976, 0.3523945014274097, 0.39190184584764287, 0.37672617757881677, 0.3977292091777115, 0.3973341338815778, 0.6601290867609735, 0.6201964451340756, 0.6421811355932132, 0.6674910848654323, 0.6803570929412377, 0.6733856128869112, 0.7323547766069369, 0.6340319395010784, 0.6639306004316007, 0.3334842610327148, 0.3183033379989889, 0.3730423205735126, 0.29197722936255865, 0.32221612210010575, 0.3643036049206322, 0.12379288721027171, 0.35977696363597633, 0.28827425725956013, 0.33363453459253645, 0.3410781792918387, 0.4037040106189379, 0.2843108640343094, 0.35489935938805894, 0.29406916007740236, 0.33899530509687437, 0.2633518221661837, 0.3188860733380624, 0.29040430920808635, 0.31010801949755973, 0.2599053568962192, 0.30126746531787485, 0.3005503628946864, 0.25970626174000155, 0.2716835268688047, 0.27880393767217915, 0.2887864268516448, 0.43487960599354825, 0.4212585550380308, 0.4057270025473153, 0.4350637364863158, 0.4018764009382182, 0.40775861835636795, 0.43306920097246726, 0.49016162651485407, 0.42498619406914073, 0.13506483955211457, 0.08019473068523075, 0.11178473632168606, 0.111757878197, 0.17703370128541684, 0.17339714051134614, 0.13047862021521361, 0.0998754331055397, 0.17777836775946054, 0.23743338027945393, 0.25254938459242937, 0.25355702914599565, 0.2466029452426538, 0.27853639862580015, 0.2572483734549884, 0.24110291187138277, 0.24015841377624936, 0.23527147209324406, 0.6020177601737893, 0.5835787393323875, 0.6024840399428522, 0.606828431576522, 0.6436612814458654, 0.6203812159645221, 0.6217111779560596, 0.6075294985503086, 0.6472281880436621, 0.08182342950229626, 0.08651457417914477, 0.11410151162216475, 0.09035623269374249, 0.09758603130153876, 0.09293536820756143, 0.0865936424632251, 0.08800182687214986, 0.0938592237818675, 0.1385974843041724, 0.1377775320879191, 0.1729848729943635, 0.21479993731424707, 0.13017109378920433, 0.19552188272387172, 0.16088779173526835, 0.1739365701076624, 0.26770179986711506, 0.3371267123010334, 0.3587260315020029, 0.33372606541854344, 0.31544669691369254, 0.3111792341674605, 0.3260820843332949, 0.3412957311968322, 0.3526979144504335, 0.3766897915138878, 0.2506979323930696, 0.24268159495856512, 0.22881950636953174, 0.2571737837304271, 0.223420736374758, 0.24914798422146578, 0.2700136533687213, 0.26119400481731914, 0.269151041236105, 0.19062264291630682, 0.1934282878278113, 0.1822081857384764, 0.18406981089013852, 0.1673415520620456, 0.18660386498188009, 0.18500432530284627, 0.19123509167956176, 0.1693487658468923, 0.18084720033715118, 0.19732791329002597, 0.1801114955321209, 0.1805223197037703, 0.18542925939837496, 0.19474363522386273, 0.18286308122490857, 0.19259203219292675, 0.18380847484868268, 0.5074550064420775, 0.7047983267019193, 0.1509499417551602, 0.7141290705119843, 0.18014288790280442, 0.5378552034597719, 0.17675199862299373, 0.5323031017611709, 0.569289799920734, 0.5627990628913287, 0.20483925310713402, 0.6547447158800644, 0.6277236614337054, 0.18738545461853295, 0.1718459315523232, 0.7822899187513976, 0.20560571298721186, 0.1916772283717234, 0.19672153491162714, 0.17878258346154108, 0.18841285251585516, 0.17567489938085468, 0.17965992707721323, 0.2005526458273832, 0.18769668553034602, 0.18065877175601597, 0.195824414417747, 0.07449804948074357, 0.07832471923876305, 0.08112098563220294, 0.07444200434138382, 0.07286602467048875, 0.06740733420155087, 0.07089483989194412, 0.07330282866015858, 0.08347385668937368]}, "mutation_prompt": null}
{"id": "e8972dbe-eea1-420a-a54b-52808da3d91f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim  # Reduced population size to accelerate convergence\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Randomly vary between 0.5 and 1.0\n                CR = 0.8 + np.random.rand() * 0.2  # Randomly vary between 0.8 and 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Adjustment for Accelerated Convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.7194062276690331, 0.7472969122726141, 0.7583840241483886, 0.7577748655528187, 0.7527151589933888, 0.7445112508909242, 0.75552835848185, 0.7394927827345997, 0.7515536608705771, 0.5785914059282911, 0.5732651601699209, 0.5754020462942245, 0.5584244493563656, 0.5811804085399863, 0.5382512029893047, 0.5382617737560592, 0.5716898795783265, 0.5756592204762383, 0.09454272160365906, 0.11421174206176932, 0.11193268872590711, 0.11528934291876525, 0.11024886639755038, 0.11152549285604785, 0.10643954644934961, 0.10564762328648869, 0.10328258802512824, 0.10689075993673836, 0.09855368634351458, 0.10436658652713082, 0.1010692754053143, 0.10546595442943785, 0.09348174610891691, 0.10226973191635025, 0.0852784066686274, 0.09102038952402125, 0.9621091101783923, 0.9708891020994203, 0.9317302152216946, 0.9724420584471793, 0.9518272963219256, 0.9697136325137446, 0.9627443630796504, 0.9494079866609617, 0.9371009681011362, 0.38860751937231575, 0.3885545261266863, 0.3841028832472715, 0.42229669509738976, 0.3523945014274097, 0.39190184584764287, 0.37672617757881677, 0.3977292091777115, 0.3973341338815778, 0.6601290867609735, 0.6201964451340756, 0.6421811355932132, 0.6674910848654323, 0.6803570929412377, 0.6733856128869112, 0.7323547766069369, 0.6340319395010784, 0.6639306004316007, 0.3334842610327148, 0.3183033379989889, 0.3730423205735126, 0.29197722936255865, 0.32221612210010575, 0.3643036049206322, 0.12379288721027171, 0.35977696363597633, 0.28827425725956013, 0.33363453459253645, 0.3410781792918387, 0.4037040106189379, 0.2843108640343094, 0.35489935938805894, 0.29406916007740236, 0.33899530509687437, 0.2633518221661837, 0.3188860733380624, 0.29040430920808635, 0.31010801949755973, 0.2599053568962192, 0.30126746531787485, 0.3005503628946864, 0.25970626174000155, 0.2716835268688047, 0.27880393767217915, 0.2887864268516448, 0.43487960599354825, 0.4212585550380308, 0.4057270025473153, 0.4350637364863158, 0.4018764009382182, 0.40775861835636795, 0.43306920097246726, 0.49016162651485407, 0.42498619406914073, 0.13506483955211457, 0.08019473068523075, 0.11178473632168606, 0.111757878197, 0.17703370128541684, 0.17339714051134614, 0.13047862021521361, 0.0998754331055397, 0.17777836775946054, 0.23743338027945393, 0.25254938459242937, 0.25355702914599565, 0.2466029452426538, 0.27853639862580015, 0.2572483734549884, 0.24110291187138277, 0.24015841377624936, 0.23527147209324406, 0.6020177601737893, 0.5835787393323875, 0.6024840399428522, 0.606828431576522, 0.6436612814458654, 0.6203812159645221, 0.6217111779560596, 0.6075294985503086, 0.6472281880436621, 0.08182342950229626, 0.08651457417914477, 0.11410151162216475, 0.09035623269374249, 0.09758603130153876, 0.09293536820756143, 0.0865936424632251, 0.08800182687214986, 0.0938592237818675, 0.1385974843041724, 0.1377775320879191, 0.1729848729943635, 0.21479993731424707, 0.13017109378920433, 0.19552188272387172, 0.16088779173526835, 0.1739365701076624, 0.26770179986711506, 0.3371267123010334, 0.3587260315020029, 0.33372606541854344, 0.31544669691369254, 0.3111792341674605, 0.3260820843332949, 0.3412957311968322, 0.3526979144504335, 0.3766897915138878, 0.2506979323930696, 0.24268159495856512, 0.22881950636953174, 0.2571737837304271, 0.223420736374758, 0.24914798422146578, 0.2700136533687213, 0.26119400481731914, 0.269151041236105, 0.19062264291630682, 0.1934282878278113, 0.1822081857384764, 0.18406981089013852, 0.1673415520620456, 0.18660386498188009, 0.18500432530284627, 0.19123509167956176, 0.1693487658468923, 0.18084720033715118, 0.19732791329002597, 0.1801114955321209, 0.1805223197037703, 0.18542925939837496, 0.19474363522386273, 0.18286308122490857, 0.19259203219292675, 0.18380847484868268, 0.5074550064420775, 0.7047983267019193, 0.1509499417551602, 0.7141290705119843, 0.18014288790280442, 0.5378552034597719, 0.17675199862299373, 0.5323031017611709, 0.569289799920734, 0.5627990628913287, 0.20483925310713402, 0.6547447158800644, 0.6277236614337054, 0.18738545461853295, 0.1718459315523232, 0.7822899187513976, 0.20560571298721186, 0.1916772283717234, 0.19672153491162714, 0.17878258346154108, 0.18841285251585516, 0.17567489938085468, 0.17965992707721323, 0.2005526458273832, 0.18769668553034602, 0.18065877175601597, 0.195824414417747, 0.07449804948074357, 0.07832471923876305, 0.08112098563220294, 0.07444200434138382, 0.07286602467048875, 0.06740733420155087, 0.07089483989194412, 0.07330282866015858, 0.08347385668937368]}, "mutation_prompt": null}
{"id": "2c8bb20c-8589-4652-a733-d73ec00cd908", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim  # Reduced population size to accelerate convergence\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Randomly vary between 0.5 and 1.0\n                CR = 0.8 + np.random.rand() * 0.2  # Randomly vary between 0.8 and 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Adjustment for Accelerated Convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.7194062276690331, 0.7472969122726141, 0.7583840241483886, 0.7577748655528187, 0.7527151589933888, 0.7445112508909242, 0.75552835848185, 0.7394927827345997, 0.7515536608705771, 0.5785914059282911, 0.5732651601699209, 0.5754020462942245, 0.5584244493563656, 0.5811804085399863, 0.5382512029893047, 0.5382617737560592, 0.5716898795783265, 0.5756592204762383, 0.09454272160365906, 0.11421174206176932, 0.11193268872590711, 0.11528934291876525, 0.11024886639755038, 0.11152549285604785, 0.10643954644934961, 0.10564762328648869, 0.10328258802512824, 0.10689075993673836, 0.09855368634351458, 0.10436658652713082, 0.1010692754053143, 0.10546595442943785, 0.09348174610891691, 0.10226973191635025, 0.0852784066686274, 0.09102038952402125, 0.9621091101783923, 0.9708891020994203, 0.9317302152216946, 0.9724420584471793, 0.9518272963219256, 0.9697136325137446, 0.9627443630796504, 0.9494079866609617, 0.9371009681011362, 0.38860751937231575, 0.3885545261266863, 0.3841028832472715, 0.42229669509738976, 0.3523945014274097, 0.39190184584764287, 0.37672617757881677, 0.3977292091777115, 0.3973341338815778, 0.6601290867609735, 0.6201964451340756, 0.6421811355932132, 0.6674910848654323, 0.6803570929412377, 0.6733856128869112, 0.7323547766069369, 0.6340319395010784, 0.6639306004316007, 0.3334842610327148, 0.3183033379989889, 0.3730423205735126, 0.29197722936255865, 0.32221612210010575, 0.3643036049206322, 0.12379288721027171, 0.35977696363597633, 0.28827425725956013, 0.33363453459253645, 0.3410781792918387, 0.4037040106189379, 0.2843108640343094, 0.35489935938805894, 0.29406916007740236, 0.33899530509687437, 0.2633518221661837, 0.3188860733380624, 0.29040430920808635, 0.31010801949755973, 0.2599053568962192, 0.30126746531787485, 0.3005503628946864, 0.25970626174000155, 0.2716835268688047, 0.27880393767217915, 0.2887864268516448, 0.43487960599354825, 0.4212585550380308, 0.4057270025473153, 0.4350637364863158, 0.4018764009382182, 0.40775861835636795, 0.43306920097246726, 0.49016162651485407, 0.42498619406914073, 0.13506483955211457, 0.08019473068523075, 0.11178473632168606, 0.111757878197, 0.17703370128541684, 0.17339714051134614, 0.13047862021521361, 0.0998754331055397, 0.17777836775946054, 0.23743338027945393, 0.25254938459242937, 0.25355702914599565, 0.2466029452426538, 0.27853639862580015, 0.2572483734549884, 0.24110291187138277, 0.24015841377624936, 0.23527147209324406, 0.6020177601737893, 0.5835787393323875, 0.6024840399428522, 0.606828431576522, 0.6436612814458654, 0.6203812159645221, 0.6217111779560596, 0.6075294985503086, 0.6472281880436621, 0.08182342950229626, 0.08651457417914477, 0.11410151162216475, 0.09035623269374249, 0.09758603130153876, 0.09293536820756143, 0.0865936424632251, 0.08800182687214986, 0.0938592237818675, 0.1385974843041724, 0.1377775320879191, 0.1729848729943635, 0.21479993731424707, 0.13017109378920433, 0.19552188272387172, 0.16088779173526835, 0.1739365701076624, 0.26770179986711506, 0.3371267123010334, 0.3587260315020029, 0.33372606541854344, 0.31544669691369254, 0.3111792341674605, 0.3260820843332949, 0.3412957311968322, 0.3526979144504335, 0.3766897915138878, 0.2506979323930696, 0.24268159495856512, 0.22881950636953174, 0.2571737837304271, 0.223420736374758, 0.24914798422146578, 0.2700136533687213, 0.26119400481731914, 0.269151041236105, 0.19062264291630682, 0.1934282878278113, 0.1822081857384764, 0.18406981089013852, 0.1673415520620456, 0.18660386498188009, 0.18500432530284627, 0.19123509167956176, 0.1693487658468923, 0.18084720033715118, 0.19732791329002597, 0.1801114955321209, 0.1805223197037703, 0.18542925939837496, 0.19474363522386273, 0.18286308122490857, 0.19259203219292675, 0.18380847484868268, 0.5074550064420775, 0.7047983267019193, 0.1509499417551602, 0.7141290705119843, 0.18014288790280442, 0.5378552034597719, 0.17675199862299373, 0.5323031017611709, 0.569289799920734, 0.5627990628913287, 0.20483925310713402, 0.6547447158800644, 0.6277236614337054, 0.18738545461853295, 0.1718459315523232, 0.7822899187513976, 0.20560571298721186, 0.1916772283717234, 0.19672153491162714, 0.17878258346154108, 0.18841285251585516, 0.17567489938085468, 0.17965992707721323, 0.2005526458273832, 0.18769668553034602, 0.18065877175601597, 0.195824414417747, 0.07449804948074357, 0.07832471923876305, 0.08112098563220294, 0.07444200434138382, 0.07286602467048875, 0.06740733420155087, 0.07089483989194412, 0.07330282866015858, 0.08347385668937368]}, "mutation_prompt": null}
{"id": "8d5d2fa0-97a1-4f1e-b96e-18b164028c25", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim  # Reduced population size to accelerate convergence\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Randomly vary between 0.5 and 1.0\n                CR = 0.8 + np.random.rand() * 0.2  # Randomly vary between 0.8 and 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Adjustment for Accelerated Convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.7194062276690331, 0.7472969122726141, 0.7583840241483886, 0.7577748655528187, 0.7527151589933888, 0.7445112508909242, 0.75552835848185, 0.7394927827345997, 0.7515536608705771, 0.5785914059282911, 0.5732651601699209, 0.5754020462942245, 0.5584244493563656, 0.5811804085399863, 0.5382512029893047, 0.5382617737560592, 0.5716898795783265, 0.5756592204762383, 0.09454272160365906, 0.11421174206176932, 0.11193268872590711, 0.11528934291876525, 0.11024886639755038, 0.11152549285604785, 0.10643954644934961, 0.10564762328648869, 0.10328258802512824, 0.10689075993673836, 0.09855368634351458, 0.10436658652713082, 0.1010692754053143, 0.10546595442943785, 0.09348174610891691, 0.10226973191635025, 0.0852784066686274, 0.09102038952402125, 0.9621091101783923, 0.9708891020994203, 0.9317302152216946, 0.9724420584471793, 0.9518272963219256, 0.9697136325137446, 0.9627443630796504, 0.9494079866609617, 0.9371009681011362, 0.38860751937231575, 0.3885545261266863, 0.3841028832472715, 0.42229669509738976, 0.3523945014274097, 0.39190184584764287, 0.37672617757881677, 0.3977292091777115, 0.3973341338815778, 0.6601290867609735, 0.6201964451340756, 0.6421811355932132, 0.6674910848654323, 0.6803570929412377, 0.6733856128869112, 0.7323547766069369, 0.6340319395010784, 0.6639306004316007, 0.3334842610327148, 0.3183033379989889, 0.3730423205735126, 0.29197722936255865, 0.32221612210010575, 0.3643036049206322, 0.12379288721027171, 0.35977696363597633, 0.28827425725956013, 0.33363453459253645, 0.3410781792918387, 0.4037040106189379, 0.2843108640343094, 0.35489935938805894, 0.29406916007740236, 0.33899530509687437, 0.2633518221661837, 0.3188860733380624, 0.29040430920808635, 0.31010801949755973, 0.2599053568962192, 0.30126746531787485, 0.3005503628946864, 0.25970626174000155, 0.2716835268688047, 0.27880393767217915, 0.2887864268516448, 0.43487960599354825, 0.4212585550380308, 0.4057270025473153, 0.4350637364863158, 0.4018764009382182, 0.40775861835636795, 0.43306920097246726, 0.49016162651485407, 0.42498619406914073, 0.13506483955211457, 0.08019473068523075, 0.11178473632168606, 0.111757878197, 0.17703370128541684, 0.17339714051134614, 0.13047862021521361, 0.0998754331055397, 0.17777836775946054, 0.23743338027945393, 0.25254938459242937, 0.25355702914599565, 0.2466029452426538, 0.27853639862580015, 0.2572483734549884, 0.24110291187138277, 0.24015841377624936, 0.23527147209324406, 0.6020177601737893, 0.5835787393323875, 0.6024840399428522, 0.606828431576522, 0.6436612814458654, 0.6203812159645221, 0.6217111779560596, 0.6075294985503086, 0.6472281880436621, 0.08182342950229626, 0.08651457417914477, 0.11410151162216475, 0.09035623269374249, 0.09758603130153876, 0.09293536820756143, 0.0865936424632251, 0.08800182687214986, 0.0938592237818675, 0.1385974843041724, 0.1377775320879191, 0.1729848729943635, 0.21479993731424707, 0.13017109378920433, 0.19552188272387172, 0.16088779173526835, 0.1739365701076624, 0.26770179986711506, 0.3371267123010334, 0.3587260315020029, 0.33372606541854344, 0.31544669691369254, 0.3111792341674605, 0.3260820843332949, 0.3412957311968322, 0.3526979144504335, 0.3766897915138878, 0.2506979323930696, 0.24268159495856512, 0.22881950636953174, 0.2571737837304271, 0.223420736374758, 0.24914798422146578, 0.2700136533687213, 0.26119400481731914, 0.269151041236105, 0.19062264291630682, 0.1934282878278113, 0.1822081857384764, 0.18406981089013852, 0.1673415520620456, 0.18660386498188009, 0.18500432530284627, 0.19123509167956176, 0.1693487658468923, 0.18084720033715118, 0.19732791329002597, 0.1801114955321209, 0.1805223197037703, 0.18542925939837496, 0.19474363522386273, 0.18286308122490857, 0.19259203219292675, 0.18380847484868268, 0.5074550064420775, 0.7047983267019193, 0.1509499417551602, 0.7141290705119843, 0.18014288790280442, 0.5378552034597719, 0.17675199862299373, 0.5323031017611709, 0.569289799920734, 0.5627990628913287, 0.20483925310713402, 0.6547447158800644, 0.6277236614337054, 0.18738545461853295, 0.1718459315523232, 0.7822899187513976, 0.20560571298721186, 0.1916772283717234, 0.19672153491162714, 0.17878258346154108, 0.18841285251585516, 0.17567489938085468, 0.17965992707721323, 0.2005526458273832, 0.18769668553034602, 0.18065877175601597, 0.195824414417747, 0.07449804948074357, 0.07832471923876305, 0.08112098563220294, 0.07444200434138382, 0.07286602467048875, 0.06740733420155087, 0.07089483989194412, 0.07330282866015858, 0.08347385668937368]}, "mutation_prompt": null}
{"id": "90d6694c-ea28-41a6-b056-21ec4559f44d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim  # Reduced population size to accelerate convergence\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Randomly vary between 0.5 and 1.0\n                CR = 0.8 + np.random.rand() * 0.2  # Randomly vary between 0.8 and 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Adjustment for Accelerated Convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.7194062276690331, 0.7472969122726141, 0.7583840241483886, 0.7577748655528187, 0.7527151589933888, 0.7445112508909242, 0.75552835848185, 0.7394927827345997, 0.7515536608705771, 0.5785914059282911, 0.5732651601699209, 0.5754020462942245, 0.5584244493563656, 0.5811804085399863, 0.5382512029893047, 0.5382617737560592, 0.5716898795783265, 0.5756592204762383, 0.09454272160365906, 0.11421174206176932, 0.11193268872590711, 0.11528934291876525, 0.11024886639755038, 0.11152549285604785, 0.10643954644934961, 0.10564762328648869, 0.10328258802512824, 0.10689075993673836, 0.09855368634351458, 0.10436658652713082, 0.1010692754053143, 0.10546595442943785, 0.09348174610891691, 0.10226973191635025, 0.0852784066686274, 0.09102038952402125, 0.9621091101783923, 0.9708891020994203, 0.9317302152216946, 0.9724420584471793, 0.9518272963219256, 0.9697136325137446, 0.9627443630796504, 0.9494079866609617, 0.9371009681011362, 0.38860751937231575, 0.3885545261266863, 0.3841028832472715, 0.42229669509738976, 0.3523945014274097, 0.39190184584764287, 0.37672617757881677, 0.3977292091777115, 0.3973341338815778, 0.6601290867609735, 0.6201964451340756, 0.6421811355932132, 0.6674910848654323, 0.6803570929412377, 0.6733856128869112, 0.7323547766069369, 0.6340319395010784, 0.6639306004316007, 0.3334842610327148, 0.3183033379989889, 0.3730423205735126, 0.29197722936255865, 0.32221612210010575, 0.3643036049206322, 0.12379288721027171, 0.35977696363597633, 0.28827425725956013, 0.33363453459253645, 0.3410781792918387, 0.4037040106189379, 0.2843108640343094, 0.35489935938805894, 0.29406916007740236, 0.33899530509687437, 0.2633518221661837, 0.3188860733380624, 0.29040430920808635, 0.31010801949755973, 0.2599053568962192, 0.30126746531787485, 0.3005503628946864, 0.25970626174000155, 0.2716835268688047, 0.27880393767217915, 0.2887864268516448, 0.43487960599354825, 0.4212585550380308, 0.4057270025473153, 0.4350637364863158, 0.4018764009382182, 0.40775861835636795, 0.43306920097246726, 0.49016162651485407, 0.42498619406914073, 0.13506483955211457, 0.08019473068523075, 0.11178473632168606, 0.111757878197, 0.17703370128541684, 0.17339714051134614, 0.13047862021521361, 0.0998754331055397, 0.17777836775946054, 0.23743338027945393, 0.25254938459242937, 0.25355702914599565, 0.2466029452426538, 0.27853639862580015, 0.2572483734549884, 0.24110291187138277, 0.24015841377624936, 0.23527147209324406, 0.6020177601737893, 0.5835787393323875, 0.6024840399428522, 0.606828431576522, 0.6436612814458654, 0.6203812159645221, 0.6217111779560596, 0.6075294985503086, 0.6472281880436621, 0.08182342950229626, 0.08651457417914477, 0.11410151162216475, 0.09035623269374249, 0.09758603130153876, 0.09293536820756143, 0.0865936424632251, 0.08800182687214986, 0.0938592237818675, 0.1385974843041724, 0.1377775320879191, 0.1729848729943635, 0.21479993731424707, 0.13017109378920433, 0.19552188272387172, 0.16088779173526835, 0.1739365701076624, 0.26770179986711506, 0.3371267123010334, 0.3587260315020029, 0.33372606541854344, 0.31544669691369254, 0.3111792341674605, 0.3260820843332949, 0.3412957311968322, 0.3526979144504335, 0.3766897915138878, 0.2506979323930696, 0.24268159495856512, 0.22881950636953174, 0.2571737837304271, 0.223420736374758, 0.24914798422146578, 0.2700136533687213, 0.26119400481731914, 0.269151041236105, 0.19062264291630682, 0.1934282878278113, 0.1822081857384764, 0.18406981089013852, 0.1673415520620456, 0.18660386498188009, 0.18500432530284627, 0.19123509167956176, 0.1693487658468923, 0.18084720033715118, 0.19732791329002597, 0.1801114955321209, 0.1805223197037703, 0.18542925939837496, 0.19474363522386273, 0.18286308122490857, 0.19259203219292675, 0.18380847484868268, 0.5074550064420775, 0.7047983267019193, 0.1509499417551602, 0.7141290705119843, 0.18014288790280442, 0.5378552034597719, 0.17675199862299373, 0.5323031017611709, 0.569289799920734, 0.5627990628913287, 0.20483925310713402, 0.6547447158800644, 0.6277236614337054, 0.18738545461853295, 0.1718459315523232, 0.7822899187513976, 0.20560571298721186, 0.1916772283717234, 0.19672153491162714, 0.17878258346154108, 0.18841285251585516, 0.17567489938085468, 0.17965992707721323, 0.2005526458273832, 0.18769668553034602, 0.18065877175601597, 0.195824414417747, 0.07449804948074357, 0.07832471923876305, 0.08112098563220294, 0.07444200434138382, 0.07286602467048875, 0.06740733420155087, 0.07089483989194412, 0.07330282866015858, 0.08347385668937368]}, "mutation_prompt": null}
{"id": "9409d2cd-0a48-4a2c-978a-4864ffeab1f2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim  # Reduced population size to accelerate convergence\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Randomly vary between 0.5 and 1.0\n                CR = 0.8 + np.random.rand() * 0.2  # Randomly vary between 0.8 and 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Adjustment for Accelerated Convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.7194062276690331, 0.7472969122726141, 0.7583840241483886, 0.7577748655528187, 0.7527151589933888, 0.7445112508909242, 0.75552835848185, 0.7394927827345997, 0.7515536608705771, 0.5785914059282911, 0.5732651601699209, 0.5754020462942245, 0.5584244493563656, 0.5811804085399863, 0.5382512029893047, 0.5382617737560592, 0.5716898795783265, 0.5756592204762383, 0.09454272160365906, 0.11421174206176932, 0.11193268872590711, 0.11528934291876525, 0.11024886639755038, 0.11152549285604785, 0.10643954644934961, 0.10564762328648869, 0.10328258802512824, 0.10689075993673836, 0.09855368634351458, 0.10436658652713082, 0.1010692754053143, 0.10546595442943785, 0.09348174610891691, 0.10226973191635025, 0.0852784066686274, 0.09102038952402125, 0.9621091101783923, 0.9708891020994203, 0.9317302152216946, 0.9724420584471793, 0.9518272963219256, 0.9697136325137446, 0.9627443630796504, 0.9494079866609617, 0.9371009681011362, 0.38860751937231575, 0.3885545261266863, 0.3841028832472715, 0.42229669509738976, 0.3523945014274097, 0.39190184584764287, 0.37672617757881677, 0.3977292091777115, 0.3973341338815778, 0.6601290867609735, 0.6201964451340756, 0.6421811355932132, 0.6674910848654323, 0.6803570929412377, 0.6733856128869112, 0.7323547766069369, 0.6340319395010784, 0.6639306004316007, 0.3334842610327148, 0.3183033379989889, 0.3730423205735126, 0.29197722936255865, 0.32221612210010575, 0.3643036049206322, 0.12379288721027171, 0.35977696363597633, 0.28827425725956013, 0.33363453459253645, 0.3410781792918387, 0.4037040106189379, 0.2843108640343094, 0.35489935938805894, 0.29406916007740236, 0.33899530509687437, 0.2633518221661837, 0.3188860733380624, 0.29040430920808635, 0.31010801949755973, 0.2599053568962192, 0.30126746531787485, 0.3005503628946864, 0.25970626174000155, 0.2716835268688047, 0.27880393767217915, 0.2887864268516448, 0.43487960599354825, 0.4212585550380308, 0.4057270025473153, 0.4350637364863158, 0.4018764009382182, 0.40775861835636795, 0.43306920097246726, 0.49016162651485407, 0.42498619406914073, 0.13506483955211457, 0.08019473068523075, 0.11178473632168606, 0.111757878197, 0.17703370128541684, 0.17339714051134614, 0.13047862021521361, 0.0998754331055397, 0.17777836775946054, 0.23743338027945393, 0.25254938459242937, 0.25355702914599565, 0.2466029452426538, 0.27853639862580015, 0.2572483734549884, 0.24110291187138277, 0.24015841377624936, 0.23527147209324406, 0.6020177601737893, 0.5835787393323875, 0.6024840399428522, 0.606828431576522, 0.6436612814458654, 0.6203812159645221, 0.6217111779560596, 0.6075294985503086, 0.6472281880436621, 0.08182342950229626, 0.08651457417914477, 0.11410151162216475, 0.09035623269374249, 0.09758603130153876, 0.09293536820756143, 0.0865936424632251, 0.08800182687214986, 0.0938592237818675, 0.1385974843041724, 0.1377775320879191, 0.1729848729943635, 0.21479993731424707, 0.13017109378920433, 0.19552188272387172, 0.16088779173526835, 0.1739365701076624, 0.26770179986711506, 0.3371267123010334, 0.3587260315020029, 0.33372606541854344, 0.31544669691369254, 0.3111792341674605, 0.3260820843332949, 0.3412957311968322, 0.3526979144504335, 0.3766897915138878, 0.2506979323930696, 0.24268159495856512, 0.22881950636953174, 0.2571737837304271, 0.223420736374758, 0.24914798422146578, 0.2700136533687213, 0.26119400481731914, 0.269151041236105, 0.19062264291630682, 0.1934282878278113, 0.1822081857384764, 0.18406981089013852, 0.1673415520620456, 0.18660386498188009, 0.18500432530284627, 0.19123509167956176, 0.1693487658468923, 0.18084720033715118, 0.19732791329002597, 0.1801114955321209, 0.1805223197037703, 0.18542925939837496, 0.19474363522386273, 0.18286308122490857, 0.19259203219292675, 0.18380847484868268, 0.5074550064420775, 0.7047983267019193, 0.1509499417551602, 0.7141290705119843, 0.18014288790280442, 0.5378552034597719, 0.17675199862299373, 0.5323031017611709, 0.569289799920734, 0.5627990628913287, 0.20483925310713402, 0.6547447158800644, 0.6277236614337054, 0.18738545461853295, 0.1718459315523232, 0.7822899187513976, 0.20560571298721186, 0.1916772283717234, 0.19672153491162714, 0.17878258346154108, 0.18841285251585516, 0.17567489938085468, 0.17965992707721323, 0.2005526458273832, 0.18769668553034602, 0.18065877175601597, 0.195824414417747, 0.07449804948074357, 0.07832471923876305, 0.08112098563220294, 0.07444200434138382, 0.07286602467048875, 0.06740733420155087, 0.07089483989194412, 0.07330282866015858, 0.08347385668937368]}, "mutation_prompt": null}
{"id": "d1ea6f48-b68e-46e2-8e47-6c7da4a57b9d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim  # Reduced population size to accelerate convergence\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Randomly vary between 0.5 and 1.0\n                CR = 0.8 + np.random.rand() * 0.2  # Randomly vary between 0.8 and 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Adjustment for Accelerated Convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.7194062276690331, 0.7472969122726141, 0.7583840241483886, 0.7577748655528187, 0.7527151589933888, 0.7445112508909242, 0.75552835848185, 0.7394927827345997, 0.7515536608705771, 0.5785914059282911, 0.5732651601699209, 0.5754020462942245, 0.5584244493563656, 0.5811804085399863, 0.5382512029893047, 0.5382617737560592, 0.5716898795783265, 0.5756592204762383, 0.09454272160365906, 0.11421174206176932, 0.11193268872590711, 0.11528934291876525, 0.11024886639755038, 0.11152549285604785, 0.10643954644934961, 0.10564762328648869, 0.10328258802512824, 0.10689075993673836, 0.09855368634351458, 0.10436658652713082, 0.1010692754053143, 0.10546595442943785, 0.09348174610891691, 0.10226973191635025, 0.0852784066686274, 0.09102038952402125, 0.9621091101783923, 0.9708891020994203, 0.9317302152216946, 0.9724420584471793, 0.9518272963219256, 0.9697136325137446, 0.9627443630796504, 0.9494079866609617, 0.9371009681011362, 0.38860751937231575, 0.3885545261266863, 0.3841028832472715, 0.42229669509738976, 0.3523945014274097, 0.39190184584764287, 0.37672617757881677, 0.3977292091777115, 0.3973341338815778, 0.6601290867609735, 0.6201964451340756, 0.6421811355932132, 0.6674910848654323, 0.6803570929412377, 0.6733856128869112, 0.7323547766069369, 0.6340319395010784, 0.6639306004316007, 0.3334842610327148, 0.3183033379989889, 0.3730423205735126, 0.29197722936255865, 0.32221612210010575, 0.3643036049206322, 0.12379288721027171, 0.35977696363597633, 0.28827425725956013, 0.33363453459253645, 0.3410781792918387, 0.4037040106189379, 0.2843108640343094, 0.35489935938805894, 0.29406916007740236, 0.33899530509687437, 0.2633518221661837, 0.3188860733380624, 0.29040430920808635, 0.31010801949755973, 0.2599053568962192, 0.30126746531787485, 0.3005503628946864, 0.25970626174000155, 0.2716835268688047, 0.27880393767217915, 0.2887864268516448, 0.43487960599354825, 0.4212585550380308, 0.4057270025473153, 0.4350637364863158, 0.4018764009382182, 0.40775861835636795, 0.43306920097246726, 0.49016162651485407, 0.42498619406914073, 0.13506483955211457, 0.08019473068523075, 0.11178473632168606, 0.111757878197, 0.17703370128541684, 0.17339714051134614, 0.13047862021521361, 0.0998754331055397, 0.17777836775946054, 0.23743338027945393, 0.25254938459242937, 0.25355702914599565, 0.2466029452426538, 0.27853639862580015, 0.2572483734549884, 0.24110291187138277, 0.24015841377624936, 0.23527147209324406, 0.6020177601737893, 0.5835787393323875, 0.6024840399428522, 0.606828431576522, 0.6436612814458654, 0.6203812159645221, 0.6217111779560596, 0.6075294985503086, 0.6472281880436621, 0.08182342950229626, 0.08651457417914477, 0.11410151162216475, 0.09035623269374249, 0.09758603130153876, 0.09293536820756143, 0.0865936424632251, 0.08800182687214986, 0.0938592237818675, 0.1385974843041724, 0.1377775320879191, 0.1729848729943635, 0.21479993731424707, 0.13017109378920433, 0.19552188272387172, 0.16088779173526835, 0.1739365701076624, 0.26770179986711506, 0.3371267123010334, 0.3587260315020029, 0.33372606541854344, 0.31544669691369254, 0.3111792341674605, 0.3260820843332949, 0.3412957311968322, 0.3526979144504335, 0.3766897915138878, 0.2506979323930696, 0.24268159495856512, 0.22881950636953174, 0.2571737837304271, 0.223420736374758, 0.24914798422146578, 0.2700136533687213, 0.26119400481731914, 0.269151041236105, 0.19062264291630682, 0.1934282878278113, 0.1822081857384764, 0.18406981089013852, 0.1673415520620456, 0.18660386498188009, 0.18500432530284627, 0.19123509167956176, 0.1693487658468923, 0.18084720033715118, 0.19732791329002597, 0.1801114955321209, 0.1805223197037703, 0.18542925939837496, 0.19474363522386273, 0.18286308122490857, 0.19259203219292675, 0.18380847484868268, 0.5074550064420775, 0.7047983267019193, 0.1509499417551602, 0.7141290705119843, 0.18014288790280442, 0.5378552034597719, 0.17675199862299373, 0.5323031017611709, 0.569289799920734, 0.5627990628913287, 0.20483925310713402, 0.6547447158800644, 0.6277236614337054, 0.18738545461853295, 0.1718459315523232, 0.7822899187513976, 0.20560571298721186, 0.1916772283717234, 0.19672153491162714, 0.17878258346154108, 0.18841285251585516, 0.17567489938085468, 0.17965992707721323, 0.2005526458273832, 0.18769668553034602, 0.18065877175601597, 0.195824414417747, 0.07449804948074357, 0.07832471923876305, 0.08112098563220294, 0.07444200434138382, 0.07286602467048875, 0.06740733420155087, 0.07089483989194412, 0.07330282866015858, 0.08347385668937368]}, "mutation_prompt": null}
{"id": "cff419e1-e552-40d3-80ca-b321ab03ecf6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim  # Reduced population size to accelerate convergence\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Randomly vary between 0.5 and 1.0\n                CR = 0.8 + np.random.rand() * 0.2  # Randomly vary between 0.8 and 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Adjustment for Accelerated Convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.7194062276690331, 0.7472969122726141, 0.7583840241483886, 0.7577748655528187, 0.7527151589933888, 0.7445112508909242, 0.75552835848185, 0.7394927827345997, 0.7515536608705771, 0.5785914059282911, 0.5732651601699209, 0.5754020462942245, 0.5584244493563656, 0.5811804085399863, 0.5382512029893047, 0.5382617737560592, 0.5716898795783265, 0.5756592204762383, 0.09454272160365906, 0.11421174206176932, 0.11193268872590711, 0.11528934291876525, 0.11024886639755038, 0.11152549285604785, 0.10643954644934961, 0.10564762328648869, 0.10328258802512824, 0.10689075993673836, 0.09855368634351458, 0.10436658652713082, 0.1010692754053143, 0.10546595442943785, 0.09348174610891691, 0.10226973191635025, 0.0852784066686274, 0.09102038952402125, 0.9621091101783923, 0.9708891020994203, 0.9317302152216946, 0.9724420584471793, 0.9518272963219256, 0.9697136325137446, 0.9627443630796504, 0.9494079866609617, 0.9371009681011362, 0.38860751937231575, 0.3885545261266863, 0.3841028832472715, 0.42229669509738976, 0.3523945014274097, 0.39190184584764287, 0.37672617757881677, 0.3977292091777115, 0.3973341338815778, 0.6601290867609735, 0.6201964451340756, 0.6421811355932132, 0.6674910848654323, 0.6803570929412377, 0.6733856128869112, 0.7323547766069369, 0.6340319395010784, 0.6639306004316007, 0.3334842610327148, 0.3183033379989889, 0.3730423205735126, 0.29197722936255865, 0.32221612210010575, 0.3643036049206322, 0.12379288721027171, 0.35977696363597633, 0.28827425725956013, 0.33363453459253645, 0.3410781792918387, 0.4037040106189379, 0.2843108640343094, 0.35489935938805894, 0.29406916007740236, 0.33899530509687437, 0.2633518221661837, 0.3188860733380624, 0.29040430920808635, 0.31010801949755973, 0.2599053568962192, 0.30126746531787485, 0.3005503628946864, 0.25970626174000155, 0.2716835268688047, 0.27880393767217915, 0.2887864268516448, 0.43487960599354825, 0.4212585550380308, 0.4057270025473153, 0.4350637364863158, 0.4018764009382182, 0.40775861835636795, 0.43306920097246726, 0.49016162651485407, 0.42498619406914073, 0.13506483955211457, 0.08019473068523075, 0.11178473632168606, 0.111757878197, 0.17703370128541684, 0.17339714051134614, 0.13047862021521361, 0.0998754331055397, 0.17777836775946054, 0.23743338027945393, 0.25254938459242937, 0.25355702914599565, 0.2466029452426538, 0.27853639862580015, 0.2572483734549884, 0.24110291187138277, 0.24015841377624936, 0.23527147209324406, 0.6020177601737893, 0.5835787393323875, 0.6024840399428522, 0.606828431576522, 0.6436612814458654, 0.6203812159645221, 0.6217111779560596, 0.6075294985503086, 0.6472281880436621, 0.08182342950229626, 0.08651457417914477, 0.11410151162216475, 0.09035623269374249, 0.09758603130153876, 0.09293536820756143, 0.0865936424632251, 0.08800182687214986, 0.0938592237818675, 0.1385974843041724, 0.1377775320879191, 0.1729848729943635, 0.21479993731424707, 0.13017109378920433, 0.19552188272387172, 0.16088779173526835, 0.1739365701076624, 0.26770179986711506, 0.3371267123010334, 0.3587260315020029, 0.33372606541854344, 0.31544669691369254, 0.3111792341674605, 0.3260820843332949, 0.3412957311968322, 0.3526979144504335, 0.3766897915138878, 0.2506979323930696, 0.24268159495856512, 0.22881950636953174, 0.2571737837304271, 0.223420736374758, 0.24914798422146578, 0.2700136533687213, 0.26119400481731914, 0.269151041236105, 0.19062264291630682, 0.1934282878278113, 0.1822081857384764, 0.18406981089013852, 0.1673415520620456, 0.18660386498188009, 0.18500432530284627, 0.19123509167956176, 0.1693487658468923, 0.18084720033715118, 0.19732791329002597, 0.1801114955321209, 0.1805223197037703, 0.18542925939837496, 0.19474363522386273, 0.18286308122490857, 0.19259203219292675, 0.18380847484868268, 0.5074550064420775, 0.7047983267019193, 0.1509499417551602, 0.7141290705119843, 0.18014288790280442, 0.5378552034597719, 0.17675199862299373, 0.5323031017611709, 0.569289799920734, 0.5627990628913287, 0.20483925310713402, 0.6547447158800644, 0.6277236614337054, 0.18738545461853295, 0.1718459315523232, 0.7822899187513976, 0.20560571298721186, 0.1916772283717234, 0.19672153491162714, 0.17878258346154108, 0.18841285251585516, 0.17567489938085468, 0.17965992707721323, 0.2005526458273832, 0.18769668553034602, 0.18065877175601597, 0.195824414417747, 0.07449804948074357, 0.07832471923876305, 0.08112098563220294, 0.07444200434138382, 0.07286602467048875, 0.06740733420155087, 0.07089483989194412, 0.07330282866015858, 0.08347385668937368]}, "mutation_prompt": null}
{"id": "2e2d1cd6-d486-4a15-bfc8-8a7230b5ce8b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim  # Reduced population size to accelerate convergence\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Randomly vary between 0.5 and 1.0\n                CR = 0.8 + np.random.rand() * 0.2  # Randomly vary between 0.8 and 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Adjustment for Accelerated Convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.7194062276690331, 0.7472969122726141, 0.7583840241483886, 0.7577748655528187, 0.7527151589933888, 0.7445112508909242, 0.75552835848185, 0.7394927827345997, 0.7515536608705771, 0.5785914059282911, 0.5732651601699209, 0.5754020462942245, 0.5584244493563656, 0.5811804085399863, 0.5382512029893047, 0.5382617737560592, 0.5716898795783265, 0.5756592204762383, 0.09454272160365906, 0.11421174206176932, 0.11193268872590711, 0.11528934291876525, 0.11024886639755038, 0.11152549285604785, 0.10643954644934961, 0.10564762328648869, 0.10328258802512824, 0.10689075993673836, 0.09855368634351458, 0.10436658652713082, 0.1010692754053143, 0.10546595442943785, 0.09348174610891691, 0.10226973191635025, 0.0852784066686274, 0.09102038952402125, 0.9621091101783923, 0.9708891020994203, 0.9317302152216946, 0.9724420584471793, 0.9518272963219256, 0.9697136325137446, 0.9627443630796504, 0.9494079866609617, 0.9371009681011362, 0.38860751937231575, 0.3885545261266863, 0.3841028832472715, 0.42229669509738976, 0.3523945014274097, 0.39190184584764287, 0.37672617757881677, 0.3977292091777115, 0.3973341338815778, 0.6601290867609735, 0.6201964451340756, 0.6421811355932132, 0.6674910848654323, 0.6803570929412377, 0.6733856128869112, 0.7323547766069369, 0.6340319395010784, 0.6639306004316007, 0.3334842610327148, 0.3183033379989889, 0.3730423205735126, 0.29197722936255865, 0.32221612210010575, 0.3643036049206322, 0.12379288721027171, 0.35977696363597633, 0.28827425725956013, 0.33363453459253645, 0.3410781792918387, 0.4037040106189379, 0.2843108640343094, 0.35489935938805894, 0.29406916007740236, 0.33899530509687437, 0.2633518221661837, 0.3188860733380624, 0.29040430920808635, 0.31010801949755973, 0.2599053568962192, 0.30126746531787485, 0.3005503628946864, 0.25970626174000155, 0.2716835268688047, 0.27880393767217915, 0.2887864268516448, 0.43487960599354825, 0.4212585550380308, 0.4057270025473153, 0.4350637364863158, 0.4018764009382182, 0.40775861835636795, 0.43306920097246726, 0.49016162651485407, 0.42498619406914073, 0.13506483955211457, 0.08019473068523075, 0.11178473632168606, 0.111757878197, 0.17703370128541684, 0.17339714051134614, 0.13047862021521361, 0.0998754331055397, 0.17777836775946054, 0.23743338027945393, 0.25254938459242937, 0.25355702914599565, 0.2466029452426538, 0.27853639862580015, 0.2572483734549884, 0.24110291187138277, 0.24015841377624936, 0.23527147209324406, 0.6020177601737893, 0.5835787393323875, 0.6024840399428522, 0.606828431576522, 0.6436612814458654, 0.6203812159645221, 0.6217111779560596, 0.6075294985503086, 0.6472281880436621, 0.08182342950229626, 0.08651457417914477, 0.11410151162216475, 0.09035623269374249, 0.09758603130153876, 0.09293536820756143, 0.0865936424632251, 0.08800182687214986, 0.0938592237818675, 0.1385974843041724, 0.1377775320879191, 0.1729848729943635, 0.21479993731424707, 0.13017109378920433, 0.19552188272387172, 0.16088779173526835, 0.1739365701076624, 0.26770179986711506, 0.3371267123010334, 0.3587260315020029, 0.33372606541854344, 0.31544669691369254, 0.3111792341674605, 0.3260820843332949, 0.3412957311968322, 0.3526979144504335, 0.3766897915138878, 0.2506979323930696, 0.24268159495856512, 0.22881950636953174, 0.2571737837304271, 0.223420736374758, 0.24914798422146578, 0.2700136533687213, 0.26119400481731914, 0.269151041236105, 0.19062264291630682, 0.1934282878278113, 0.1822081857384764, 0.18406981089013852, 0.1673415520620456, 0.18660386498188009, 0.18500432530284627, 0.19123509167956176, 0.1693487658468923, 0.18084720033715118, 0.19732791329002597, 0.1801114955321209, 0.1805223197037703, 0.18542925939837496, 0.19474363522386273, 0.18286308122490857, 0.19259203219292675, 0.18380847484868268, 0.5074550064420775, 0.7047983267019193, 0.1509499417551602, 0.7141290705119843, 0.18014288790280442, 0.5378552034597719, 0.17675199862299373, 0.5323031017611709, 0.569289799920734, 0.5627990628913287, 0.20483925310713402, 0.6547447158800644, 0.6277236614337054, 0.18738545461853295, 0.1718459315523232, 0.7822899187513976, 0.20560571298721186, 0.1916772283717234, 0.19672153491162714, 0.17878258346154108, 0.18841285251585516, 0.17567489938085468, 0.17965992707721323, 0.2005526458273832, 0.18769668553034602, 0.18065877175601597, 0.195824414417747, 0.07449804948074357, 0.07832471923876305, 0.08112098563220294, 0.07444200434138382, 0.07286602467048875, 0.06740733420155087, 0.07089483989194412, 0.07330282866015858, 0.08347385668937368]}, "mutation_prompt": null}
{"id": "aa2a2c9f-3371-4956-a910-a2be25d45af3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim  # Reduced population size to accelerate convergence\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Randomly vary between 0.5 and 1.0\n                CR = 0.8 + np.random.rand() * 0.2  # Randomly vary between 0.8 and 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Adjustment for Accelerated Convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.7194062276690331, 0.7472969122726141, 0.7583840241483886, 0.7577748655528187, 0.7527151589933888, 0.7445112508909242, 0.75552835848185, 0.7394927827345997, 0.7515536608705771, 0.5785914059282911, 0.5732651601699209, 0.5754020462942245, 0.5584244493563656, 0.5811804085399863, 0.5382512029893047, 0.5382617737560592, 0.5716898795783265, 0.5756592204762383, 0.09454272160365906, 0.11421174206176932, 0.11193268872590711, 0.11528934291876525, 0.11024886639755038, 0.11152549285604785, 0.10643954644934961, 0.10564762328648869, 0.10328258802512824, 0.10689075993673836, 0.09855368634351458, 0.10436658652713082, 0.1010692754053143, 0.10546595442943785, 0.09348174610891691, 0.10226973191635025, 0.0852784066686274, 0.09102038952402125, 0.9621091101783923, 0.9708891020994203, 0.9317302152216946, 0.9724420584471793, 0.9518272963219256, 0.9697136325137446, 0.9627443630796504, 0.9494079866609617, 0.9371009681011362, 0.38860751937231575, 0.3885545261266863, 0.3841028832472715, 0.42229669509738976, 0.3523945014274097, 0.39190184584764287, 0.37672617757881677, 0.3977292091777115, 0.3973341338815778, 0.6601290867609735, 0.6201964451340756, 0.6421811355932132, 0.6674910848654323, 0.6803570929412377, 0.6733856128869112, 0.7323547766069369, 0.6340319395010784, 0.6639306004316007, 0.3334842610327148, 0.3183033379989889, 0.3730423205735126, 0.29197722936255865, 0.32221612210010575, 0.3643036049206322, 0.12379288721027171, 0.35977696363597633, 0.28827425725956013, 0.33363453459253645, 0.3410781792918387, 0.4037040106189379, 0.2843108640343094, 0.35489935938805894, 0.29406916007740236, 0.33899530509687437, 0.2633518221661837, 0.3188860733380624, 0.29040430920808635, 0.31010801949755973, 0.2599053568962192, 0.30126746531787485, 0.3005503628946864, 0.25970626174000155, 0.2716835268688047, 0.27880393767217915, 0.2887864268516448, 0.43487960599354825, 0.4212585550380308, 0.4057270025473153, 0.4350637364863158, 0.4018764009382182, 0.40775861835636795, 0.43306920097246726, 0.49016162651485407, 0.42498619406914073, 0.13506483955211457, 0.08019473068523075, 0.11178473632168606, 0.111757878197, 0.17703370128541684, 0.17339714051134614, 0.13047862021521361, 0.0998754331055397, 0.17777836775946054, 0.23743338027945393, 0.25254938459242937, 0.25355702914599565, 0.2466029452426538, 0.27853639862580015, 0.2572483734549884, 0.24110291187138277, 0.24015841377624936, 0.23527147209324406, 0.6020177601737893, 0.5835787393323875, 0.6024840399428522, 0.606828431576522, 0.6436612814458654, 0.6203812159645221, 0.6217111779560596, 0.6075294985503086, 0.6472281880436621, 0.08182342950229626, 0.08651457417914477, 0.11410151162216475, 0.09035623269374249, 0.09758603130153876, 0.09293536820756143, 0.0865936424632251, 0.08800182687214986, 0.0938592237818675, 0.1385974843041724, 0.1377775320879191, 0.1729848729943635, 0.21479993731424707, 0.13017109378920433, 0.19552188272387172, 0.16088779173526835, 0.1739365701076624, 0.26770179986711506, 0.3371267123010334, 0.3587260315020029, 0.33372606541854344, 0.31544669691369254, 0.3111792341674605, 0.3260820843332949, 0.3412957311968322, 0.3526979144504335, 0.3766897915138878, 0.2506979323930696, 0.24268159495856512, 0.22881950636953174, 0.2571737837304271, 0.223420736374758, 0.24914798422146578, 0.2700136533687213, 0.26119400481731914, 0.269151041236105, 0.19062264291630682, 0.1934282878278113, 0.1822081857384764, 0.18406981089013852, 0.1673415520620456, 0.18660386498188009, 0.18500432530284627, 0.19123509167956176, 0.1693487658468923, 0.18084720033715118, 0.19732791329002597, 0.1801114955321209, 0.1805223197037703, 0.18542925939837496, 0.19474363522386273, 0.18286308122490857, 0.19259203219292675, 0.18380847484868268, 0.5074550064420775, 0.7047983267019193, 0.1509499417551602, 0.7141290705119843, 0.18014288790280442, 0.5378552034597719, 0.17675199862299373, 0.5323031017611709, 0.569289799920734, 0.5627990628913287, 0.20483925310713402, 0.6547447158800644, 0.6277236614337054, 0.18738545461853295, 0.1718459315523232, 0.7822899187513976, 0.20560571298721186, 0.1916772283717234, 0.19672153491162714, 0.17878258346154108, 0.18841285251585516, 0.17567489938085468, 0.17965992707721323, 0.2005526458273832, 0.18769668553034602, 0.18065877175601597, 0.195824414417747, 0.07449804948074357, 0.07832471923876305, 0.08112098563220294, 0.07444200434138382, 0.07286602467048875, 0.06740733420155087, 0.07089483989194412, 0.07330282866015858, 0.08347385668937368]}, "mutation_prompt": null}
{"id": "4f7ff114-6dfd-4173-954d-8f9d0d4d76c6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim  # Reduced population size to accelerate convergence\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Randomly vary between 0.5 and 1.0\n                CR = 0.8 + np.random.rand() * 0.2  # Randomly vary between 0.8 and 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Adjustment for Accelerated Convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.7194062276690331, 0.7472969122726141, 0.7583840241483886, 0.7577748655528187, 0.7527151589933888, 0.7445112508909242, 0.75552835848185, 0.7394927827345997, 0.7515536608705771, 0.5785914059282911, 0.5732651601699209, 0.5754020462942245, 0.5584244493563656, 0.5811804085399863, 0.5382512029893047, 0.5382617737560592, 0.5716898795783265, 0.5756592204762383, 0.09454272160365906, 0.11421174206176932, 0.11193268872590711, 0.11528934291876525, 0.11024886639755038, 0.11152549285604785, 0.10643954644934961, 0.10564762328648869, 0.10328258802512824, 0.10689075993673836, 0.09855368634351458, 0.10436658652713082, 0.1010692754053143, 0.10546595442943785, 0.09348174610891691, 0.10226973191635025, 0.0852784066686274, 0.09102038952402125, 0.9621091101783923, 0.9708891020994203, 0.9317302152216946, 0.9724420584471793, 0.9518272963219256, 0.9697136325137446, 0.9627443630796504, 0.9494079866609617, 0.9371009681011362, 0.38860751937231575, 0.3885545261266863, 0.3841028832472715, 0.42229669509738976, 0.3523945014274097, 0.39190184584764287, 0.37672617757881677, 0.3977292091777115, 0.3973341338815778, 0.6601290867609735, 0.6201964451340756, 0.6421811355932132, 0.6674910848654323, 0.6803570929412377, 0.6733856128869112, 0.7323547766069369, 0.6340319395010784, 0.6639306004316007, 0.3334842610327148, 0.3183033379989889, 0.3730423205735126, 0.29197722936255865, 0.32221612210010575, 0.3643036049206322, 0.12379288721027171, 0.35977696363597633, 0.28827425725956013, 0.33363453459253645, 0.3410781792918387, 0.4037040106189379, 0.2843108640343094, 0.35489935938805894, 0.29406916007740236, 0.33899530509687437, 0.2633518221661837, 0.3188860733380624, 0.29040430920808635, 0.31010801949755973, 0.2599053568962192, 0.30126746531787485, 0.3005503628946864, 0.25970626174000155, 0.2716835268688047, 0.27880393767217915, 0.2887864268516448, 0.43487960599354825, 0.4212585550380308, 0.4057270025473153, 0.4350637364863158, 0.4018764009382182, 0.40775861835636795, 0.43306920097246726, 0.49016162651485407, 0.42498619406914073, 0.13506483955211457, 0.08019473068523075, 0.11178473632168606, 0.111757878197, 0.17703370128541684, 0.17339714051134614, 0.13047862021521361, 0.0998754331055397, 0.17777836775946054, 0.23743338027945393, 0.25254938459242937, 0.25355702914599565, 0.2466029452426538, 0.27853639862580015, 0.2572483734549884, 0.24110291187138277, 0.24015841377624936, 0.23527147209324406, 0.6020177601737893, 0.5835787393323875, 0.6024840399428522, 0.606828431576522, 0.6436612814458654, 0.6203812159645221, 0.6217111779560596, 0.6075294985503086, 0.6472281880436621, 0.08182342950229626, 0.08651457417914477, 0.11410151162216475, 0.09035623269374249, 0.09758603130153876, 0.09293536820756143, 0.0865936424632251, 0.08800182687214986, 0.0938592237818675, 0.1385974843041724, 0.1377775320879191, 0.1729848729943635, 0.21479993731424707, 0.13017109378920433, 0.19552188272387172, 0.16088779173526835, 0.1739365701076624, 0.26770179986711506, 0.3371267123010334, 0.3587260315020029, 0.33372606541854344, 0.31544669691369254, 0.3111792341674605, 0.3260820843332949, 0.3412957311968322, 0.3526979144504335, 0.3766897915138878, 0.2506979323930696, 0.24268159495856512, 0.22881950636953174, 0.2571737837304271, 0.223420736374758, 0.24914798422146578, 0.2700136533687213, 0.26119400481731914, 0.269151041236105, 0.19062264291630682, 0.1934282878278113, 0.1822081857384764, 0.18406981089013852, 0.1673415520620456, 0.18660386498188009, 0.18500432530284627, 0.19123509167956176, 0.1693487658468923, 0.18084720033715118, 0.19732791329002597, 0.1801114955321209, 0.1805223197037703, 0.18542925939837496, 0.19474363522386273, 0.18286308122490857, 0.19259203219292675, 0.18380847484868268, 0.5074550064420775, 0.7047983267019193, 0.1509499417551602, 0.7141290705119843, 0.18014288790280442, 0.5378552034597719, 0.17675199862299373, 0.5323031017611709, 0.569289799920734, 0.5627990628913287, 0.20483925310713402, 0.6547447158800644, 0.6277236614337054, 0.18738545461853295, 0.1718459315523232, 0.7822899187513976, 0.20560571298721186, 0.1916772283717234, 0.19672153491162714, 0.17878258346154108, 0.18841285251585516, 0.17567489938085468, 0.17965992707721323, 0.2005526458273832, 0.18769668553034602, 0.18065877175601597, 0.195824414417747, 0.07449804948074357, 0.07832471923876305, 0.08112098563220294, 0.07444200434138382, 0.07286602467048875, 0.06740733420155087, 0.07089483989194412, 0.07330282866015858, 0.08347385668937368]}, "mutation_prompt": null}
{"id": "f5b7af9e-6132-4015-9d3f-4c6bf0b6f0db", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate with local search consideration\n                F = 0.4 + np.random.rand() * 0.6  # Randomly vary between 0.4 and 1.0\n                CR = 0.7 + np.random.rand() * 0.3  # Randomly vary between 0.7 and 1.0\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 5, replace=False)\n                a, b, c, d, e = self.population[indices]\n                mutant = np.clip(a + F * (b - c) + F * (d - e), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                    \n                # Local search in nearby explored areas\n                if np.random.rand() < 0.1:\n                    local_trial = np.copy(best_solution + np.random.normal(0, 0.1, self.dim))\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    self.evaluations += 1\n                    if local_fitness < best_fitness:\n                        best_fitness = local_fitness\n                        best_solution = local_trial\n\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Dynamically Adaptive Mutation and Crossover in Differential Evolution for Enhanced Convergence with Selective Local Search.", "configspace": "", "generation": 29, "fitness": 0.2478907585041217, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.5944814163916283, 0.5838190008767938, 0.5769808372904964, 0.6215926079368723, 0.6543613075995542, 0.6029648511166237, 0.6108346248704758, 0.6203622763178791, 0.6194400921236742, 0.32825059162865244, 0.348145884799116, 0.31109184313800864, 0.30672864079691686, 0.28755766842905983, 0.3272898288222412, 0.34004548381799415, 0.3013727814004358, 0.3660152825188928, 0.10802691450904545, 0.13485180256220697, 0.11467695316830673, 0.10638716992615516, 0.10259257437363101, 0.12156029019460823, 0.0972346386733961, 0.11240543659237046, 0.14169110207703728, 0.09067194277680368, 0.08562030669912568, 0.0962051847737434, 0.08698073712641197, 0.09433074798708463, 0.08956175971213831, 0.09187879462604198, 0.10569320512632208, 0.10137713176645724, 0.9651475796919594, 0.9623305177774828, 0.9472718911576972, 0.9664085032649524, 0.9331150969812844, 0.9546349196445395, 0.9415052488876401, 0.9146244799757884, 0.964153585694122, 0.27841854812584665, 0.29927502109059523, 0.29172311032404685, 0.2628040213040237, 0.26444047550485417, 0.2905894652993499, 0.29761970506724156, 0.28322606161547315, 0.3010742774621835, 0.2856897590439673, 0.30487142463284345, 0.3997529314025523, 0.4043361099288151, 0.4204900989041277, 0.5461662285618136, 0.2715908751194811, 0.5020652633581772, 0.44497528415580045, 0.1563739155699494, 0.15252769804552646, 0.16511284154991757, 0.1652699930982302, 0.15459973606070265, 0.16992988750006355, 0.17780832622469156, 0.15897998401209856, 0.16082906701146926, 0.19024877303363708, 0.13050174502992617, 0.13677226508464524, 0.16692133949715793, 0.17062720821669286, 0.16711127420212446, 0.17114513127364006, 0.17542456091353942, 0.17740322165502365, 0.05712468197167231, 0.07479559630392796, 0.06268464813610775, 0.10893797864648835, 0.07407405201490669, 0.0537160608199827, 0.05668101890252042, 0.06574756448625396, 0.060570942718798704, 0.15648327099215076, 0.19338382880380045, 0.15133084344778558, 0.19494165782438722, 0.14657512919074867, 0.17978426521570345, 0.21859536783383415, 0.19802059463039068, 0.18263760590134592, 0.016333402211413328, 0.0037891598759928202, 0.003841366819595682, 0.009046626341757458, 0.015331059779608913, 0.0034050825405582685, 0.018992087230603083, 0.0032644830047691142, 0.0036068811708197535, 0.12646429969794137, 0.10589394327601787, 0.1063005033273392, 0.12657136971194738, 0.1329264899135555, 0.13586005916456034, 0.1380929706962586, 0.1421561063909299, 0.13292241908168545, 0.45076830792618616, 0.44957632698352445, 0.44922252385887773, 0.4420731311509162, 0.452816773611149, 0.48567506700299745, 0.4536065606138382, 0.4396808796666283, 0.44257738252160084, 0.13289348301880888, 0.10272776140305728, 0.11847872896435985, 0.09656874308431762, 0.08124752168633675, 0.10886386643190238, 0.09170124667825008, 0.10229963924728158, 0.08260188193323736, 0.15372205667926753, 0.18604255987275875, 0.15617752716202304, 0.21878567150250106, 0.26323112120539194, 0.16856176518444266, 0.19809667088184602, 0.18367046034628298, 0.1628359056053903, 0.2713234452652009, 0.2642068642030645, 0.24733813386779813, 0.23292408171897805, 0.23892059747384797, 0.25582577833128795, 0.26126954154983073, 0.2752997672760892, 0.25757121142320616, 0.20689996275891298, 0.18231707106042017, 0.1841762091387238, 0.2297365245240366, 0.1842145639119721, 0.17997809764111972, 0.20982457149140132, 0.20567303084071475, 0.1937046495385839, 0.1867543271580876, 0.19704420252556443, 0.17324644955844648, 0.18784285188870453, 0.19760816441522988, 0.1884154306379232, 0.18270006856538623, 0.17328868240149187, 0.17123226604789543, 0.21377129951204465, 0.2910303289577031, 0.19870916556747031, 0.2322181077018417, 0.19996026501583286, 0.18656374089878514, 0.18263509100709951, 0.1982604092884166, 0.18580350383018918, 0.5789519099215005, 0.17964480282419304, 0.15311745659143072, 0.18016066807503517, 0.47740814873842297, 0.20562009981594143, 0.40249429082204924, 0.19743863236790682, 0.6124323024638358, 0.3649984093055356, 0.30363820445591994, 0.4265717135339312, 0.29288043203165903, 0.2109305163979175, 0.2001744410253723, 0.20311526445943018, 0.20867714187091546, 0.33179435178061434, 0.17868738695473296, 0.1883550610421697, 0.17600446481784515, 0.18471195216602954, 0.19177088732782954, 0.1864992005496413, 0.18447693585764902, 0.1921944082454683, 0.19337404655760881, 0.06651116152906089, 0.07637035577146689, 0.06591874328653025, 0.07032011033766794, 0.07094485738117251, 0.07364216143368907, 0.08628708971364107, 0.07117018220078841, 0.06447144144115358]}, "mutation_prompt": null}
{"id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)  # Adjusted population size for better balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.4 + np.random.rand() * 0.6  # Slightly wider range for mutation factor\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly wider range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Adaptation of Population Size and Strategy Parameters for Faster Convergence.", "configspace": "", "generation": 30, "fitness": 0.49135234481013196, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.28.", "error": "", "parent_id": "29111a03-9c6a-4bf2-9c45-6ead98473b82", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.8069932187240714, 0.8371948667662111, 0.8231735516780528, 0.8209119030637503, 0.8173843421410818, 0.8338276250472865, 0.8099788817011171, 0.8340259871900396, 0.8134170016075076, 0.4948008435252803, 0.5767705430428288, 0.4254266517118577, 0.468395428725089, 0.319383553176, 0.2772551026034935, 0.35698947665407743, 0.49738897643457247, 0.16111278757965342, 0.15615068435859558, 0.503708969793849, 0.1456913463158539, 0.14955914520861846, 0.3673145491559078, 0.15982546432727918, 0.13883765773047685, 0.5757548940151063, 0.1463380342395838, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6810068727022558, 0.05934394405914978, 0.7179997682272512, 0.7354814872274553, 0.716292243943319, 0.7132611563987608, 0.7111283780724406, 0.704904275544586, 0.7177589154434928, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.627554783036852, 0.27399698654661964, 0.5206995142850372, 0.5727854413856195, 0.6756973879512581, 0.6925079160443874, 0.4723521179676664, 0.5850633841043863, 0.6154828273566841, 0.5690845364602599, 0.12832991251384884, 0.6118946034540426, 0.5121362218209906, 0.5559754325552505, 0.5757465909070679, 0.6783811708343214, 0.5827115150760229, 0.5454862049012421, 0.5618172574275822, 0.6151486071614898, 0.6296700230952061, 0.6462336269443079, 0.6241583259430664, 0.38301420584250323, 0.6050469956053536, 0.6493838263434213, 0.6192330129107413, 0.7273623630897976, 0.6883200509096319, 0.6681981436775317, 0.6627508901468212, 0.6977155961004035, 0.29864170327591577, 0.7245155548987849, 0.7349831532658158, 0.72953907628799, 0.13356675514597804, 0.1321724269019131, 0.26965963867679943, 0.47723341874348213, 0.293537001735632, 0.3254512047273245, 0.3448463845190113, 0.37418798957666344, 0.17005093526303972, 0.4808874756404665, 0.5588362725018154, 0.43035545176505985, 0.5090317791282585, 0.5279271044541041, 0.5249340459427856, 0.5008530828524571, 0.49618664994556605, 0.48957601402191453, 0.8214457554992385, 0.8380561981189937, 0.7814220776854066, 0.8221519703459405, 0.8263550591088619, 0.8393017919097352, 0.8432022229348806, 0.8248131481285176, 0.8218044624143938, 0.12257250634623107, 0.13578192098798758, 0.09562600909104513, 0.10532749500524774, 0.0991437354268021, 0.1105988816501755, 0.11416732163926258, 0.10534428499982096, 0.1458890188955283, 0.1292960008969698, 0.2014320842174887, 0.17112222346757477, 0.19604190347202122, 0.14077551033381241, 0.14054291162998156, 0.2056426008564839, 0.14893288395922133, 0.23193357571422246, 0.560535494298988, 0.522385795530115, 0.5556934322924963, 0.6096552983974788, 0.5982098499380657, 0.5689362823105812, 0.6585072738570534, 0.6961020997739704, 0.6020058608745014, 0.4005571907593608, 0.47679012644093766, 0.3855663983616421, 0.43106572248179387, 0.48918781456604266, 0.3903430152609002, 0.4959898678114609, 0.45242839097866816, 0.4742405653489784, 0.19116773361569972, 0.19536872743490907, 0.19638968162627912, 0.21116323699309336, 0.20673914866223808, 0.19080002624338732, 0.18219146018485466, 0.22363877372787178, 0.20179100434757458, 0.21904046532518062, 0.23072523557730285, 0.44438233317345677, 0.6593772302675259, 0.6050809213346907, 0.5642090651552212, 0.21847771595106225, 0.23757529611313521, 0.47421247505317765, 0.1631596118970019, 0.1680336795145536, 0.16394198845556363, 0.8493877223455077, 0.8444076257982225, 0.8712688776418539, 0.8172917066652723, 0.1683430905561374, 0.19491639821000062, 0.16784789516957022, 0.16837823279418862, 0.8558058217754425, 0.16098637505556346, 0.8351031638532167, 0.20616676276273893, 0.20978397441718188, 0.20867522274069494, 0.11619572606582351, 0.1835995787777771, 0.19025025389598527, 0.17967687509252517, 0.1836003360633507, 0.17429144668925767, 0.1751093122229751, 0.19097637924898203, 0.1820322095791258, 0.18134204723399638, 0.0883550506324704, 0.07814260939356577, 0.08477674287786285, 0.08729605968454235, 0.08379149247862339, 0.08225706585958392, 0.07427014298962253, 0.07844732203967741, 0.08683774369467523]}, "mutation_prompt": null}
{"id": "50ec47a8-5077-477e-a8da-d8f07dacb3fe", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5 * self.dim, 30)  # Increased population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        subpop_size = self.population_size // 2  # Divide population into subpopulations\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive mutation factor and crossover rate based on generation\n                F = 0.5 + np.random.rand() * 0.5\n                CR = 0.6 + 0.4 * (1 - self.evaluations / self.budget)  # Dynamic crossover rate\n\n                # Mutation using subpopulation strategy\n                if i < subpop_size:\n                    indices = np.random.choice([x for x in range(subpop_size) if x != i], 3, replace=False)\n                else:\n                    indices = np.random.choice([x for x in range(subpop_size, self.population_size) if x != i], 3, replace=False)\n\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedDifferentialEvolution", "description": "Improved Differential Evolution with Adaptive Learning Rates and Subpopulation Strategies for Enhanced Convergence.", "configspace": "", "generation": 31, "fitness": 0.39312844819649295, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.8476033757875514, 0.837318864241984, 0.838030567297436, 0.8461643466259108, 0.8188527876458735, 0.8415740894079728, 0.8404079214117487, 0.8400306818329408, 0.7986668235928696, 0.7174197901256052, 0.7382735339587323, 0.6768927728756664, 0.7393725469707667, 0.7126572122700541, 0.7273557643168673, 0.6708703157361198, 0.6214771353656663, 0.7027624040097163, 0.14612590886325993, 0.3760341457819628, 0.3049477728279738, 0.33067083416264, 0.3656214118405745, 0.4292289570620669, 0.1772042103404028, 0.22229262114534198, 0.16988495658372282, 0.23610733494881475, 0.21012318363279103, 0.14380611075166905, 0.14431674606332123, 0.12402149368847681, 0.13689485131787515, 0.10924993364344393, 0.14394430762750798, 0.14922059947391386, 0.8985628556721261, 0.9579765117553709, 0.9645968727594775, 0.8975363348227791, 0.9695320586315848, 0.892668066059775, 0.9591810282476473, 0.9576887846041965, 0.9553529212400043, 0.5657310061601137, 0.5558150214283774, 0.5569464571767828, 0.5595656808139139, 0.5748580796788427, 0.5646242693262534, 0.6084001737007895, 0.5827781282866047, 0.08663927554091821, 0.8226079824740292, 0.3515886398184165, 0.6940291811489501, 0.8285566919575108, 0.6483302817154932, 0.7930491040181075, 0.8406966812702263, 0.793715607829791, 0.8369749901914969, 0.6111529659755239, 0.5112347803000397, 0.31631136235321644, 0.19409959790932252, 0.3047944762415101, 0.2231840561004017, 0.25026457673620284, 0.17424353616560206, 0.4828292206858634, 0.12879300302721475, 0.2312277044977732, 0.27858924789168427, 0.20630150883961684, 0.2812388298878876, 0.2715241268436617, 0.3713063574057538, 0.30011848416709086, 0.25911796840662826, 0.2133578984771286, 0.3089108624092193, 0.18131337277625792, 0.26266196302559186, 0.16541084266755623, 0.30783462302009634, 0.17078508453954933, 0.4105906179614838, 0.09148509604281063, 0.46556878255012857, 0.2266171017670603, 0.6026917844712482, 0.22231589908098548, 0.19218280443395996, 0.3588277937590074, 0.505795824175929, 0.3445585915915953, 0.49006256739229803, 0.23558448400351728, 0.11609034073673119, 0.14738847720567483, 0.26921675669716827, 0.12689232930943473, 0.32084638984177416, 0.18818783721741916, 0.23019309439139757, 0.20926438071261366, 0.29217388739907524, 0.3039174576486613, 0.24824131839071384, 0.3443471884514113, 0.36085537712695737, 0.33142488034459583, 0.2352722556199146, 0.3145063862202323, 0.2926972935262758, 0.712872886442873, 0.7475427806704162, 0.6962560795814052, 0.5846040491180122, 0.7122434103203321, 0.7116768002063503, 0.6415530125268671, 0.6227014157569664, 0.7166441630514331, 0.095903455320407, 0.09399280444525226, 0.11059618453354358, 0.10000965090854241, 0.10000351508861383, 0.49261728180519937, 0.12214071295410811, 0.08779100941757612, 0.10841805782955927, 0.21648304991851608, 0.5729311787885847, 0.16199386723624853, 0.2023007679979063, 0.23148807025672424, 0.18479962729997612, 0.3936083656931998, 0.199126714231054, 0.1496199045759593, 0.3974524985260729, 0.3895403895230303, 0.4069476210826809, 0.40555631463166064, 0.46201504301690055, 0.41701267454500424, 0.5213186112521448, 0.4877016313779695, 0.4672690892475939, 0.2912685535512024, 0.31968652762286187, 0.290798384120864, 0.31381657988083267, 0.33228687364415477, 0.32640720944720847, 0.33261649309506525, 0.3635263667796318, 0.3713451056482472, 0.1979275773372391, 0.1895473864094659, 0.18582059214310076, 0.18992175056833216, 0.2027025680956216, 0.19822970453391042, 0.1983315183739386, 0.19322492782086276, 0.18827787583615574, 0.23097803510792758, 0.23091815070600086, 0.28931799644134315, 0.7111905761102215, 0.23580242440905663, 0.2161028766198022, 0.3172278260561183, 0.194573630242187, 0.39606983322053524, 0.17203518486304803, 0.20327891500571982, 0.8337731494388427, 0.8752201722842687, 0.7848743236716191, 0.811240084988166, 0.16505525286796585, 0.810543467656182, 0.1732579491397419, 0.8192378819908137, 0.2066267604179679, 0.7054921418577087, 0.6844392203382119, 0.20497452399421012, 0.20701516238375484, 0.1922309876544961, 0.20118135090391054, 0.19950842590754247, 0.19817804405252515, 0.18104127264589398, 0.19660116190988897, 0.17226771556577036, 0.19694172616330297, 0.19454087017677069, 0.20375449373597243, 0.17953620214740562, 0.20929717973888196, 0.07785230601430526, 0.08564175333116786, 0.07358154278301376, 0.1011761386520722, 0.07927914905885702, 0.0812316680681312, 0.10111809407241779, 0.07795580601068142, 0.0852822499713769]}, "mutation_prompt": null}
{"id": "70acc9e7-6106-4e51-900d-3d0665fc0a4b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)  # Base population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        adapt_interval = self.budget // 10  # Adaptation interval\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            if self.evaluations % adapt_interval == 0 and self.evaluations > 0:\n                # Dynamic adjustment of population size\n                success_rate = np.mean(self.fitness < best_fitness)\n                if success_rate < 0.2:\n                    self.population_size = min(int(self.population_size * 1.2), self.budget - self.evaluations)\n                elif success_rate > 0.4:\n                    self.population_size = max(int(self.population_size * 0.8), 20)\n\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Slightly wider range for mutation factor\n                CR = 0.6 + np.random.rand() * 0.4  # Slightly wider range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Population Size and Adaptive Scaling for Improved Convergence Speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 21 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 21 is out of bounds for axis 0 with size 20')", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {}, "mutation_prompt": null}
{"id": "8a6ce9cb-f543-4ba9-b267-6ab84c1b747d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)  # Adjusted population size for better balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.4 + np.random.rand() * 0.6  # Slightly wider range for mutation factor\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly wider range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Adaptation of Population Size and Strategy Parameters for Faster Convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.8069932187240714, 0.8371948667662111, 0.8231735516780528, 0.8209119030637503, 0.8173843421410818, 0.8338276250472865, 0.8099788817011171, 0.8340259871900396, 0.8134170016075076, 0.4948008435252803, 0.5767705430428288, 0.4254266517118577, 0.468395428725089, 0.319383553176, 0.2772551026034935, 0.35698947665407743, 0.49738897643457247, 0.16111278757965342, 0.15615068435859558, 0.503708969793849, 0.1456913463158539, 0.14955914520861846, 0.3673145491559078, 0.15982546432727918, 0.13883765773047685, 0.5757548940151063, 0.1463380342395838, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6810068727022558, 0.05934394405914978, 0.7179997682272512, 0.7354814872274553, 0.716292243943319, 0.7132611563987608, 0.7111283780724406, 0.704904275544586, 0.7177589154434928, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.627554783036852, 0.27399698654661964, 0.5206995142850372, 0.5727854413856195, 0.6756973879512581, 0.6925079160443874, 0.4723521179676664, 0.5850633841043863, 0.6154828273566841, 0.5690845364602599, 0.12832991251384884, 0.6118946034540426, 0.5121362218209906, 0.5559754325552505, 0.5757465909070679, 0.6783811708343214, 0.5827115150760229, 0.5454862049012421, 0.5618172574275822, 0.6151486071614898, 0.6296700230952061, 0.6462336269443079, 0.6241583259430664, 0.38301420584250323, 0.6050469956053536, 0.6493838263434213, 0.6192330129107413, 0.7273623630897976, 0.6883200509096319, 0.6681981436775317, 0.6627508901468212, 0.6977155961004035, 0.29864170327591577, 0.7245155548987849, 0.7349831532658158, 0.72953907628799, 0.13356675514597804, 0.1321724269019131, 0.26965963867679943, 0.47723341874348213, 0.293537001735632, 0.3254512047273245, 0.3448463845190113, 0.37418798957666344, 0.17005093526303972, 0.4808874756404665, 0.5588362725018154, 0.43035545176505985, 0.5090317791282585, 0.5279271044541041, 0.5249340459427856, 0.5008530828524571, 0.49618664994556605, 0.48957601402191453, 0.8214457554992385, 0.8380561981189937, 0.7814220776854066, 0.8221519703459405, 0.8263550591088619, 0.8393017919097352, 0.8432022229348806, 0.8248131481285176, 0.8218044624143938, 0.12257250634623107, 0.13578192098798758, 0.09562600909104513, 0.10532749500524774, 0.0991437354268021, 0.1105988816501755, 0.11416732163926258, 0.10534428499982096, 0.1458890188955283, 0.1292960008969698, 0.2014320842174887, 0.17112222346757477, 0.19604190347202122, 0.14077551033381241, 0.14054291162998156, 0.2056426008564839, 0.14893288395922133, 0.23193357571422246, 0.560535494298988, 0.522385795530115, 0.5556934322924963, 0.6096552983974788, 0.5982098499380657, 0.5689362823105812, 0.6585072738570534, 0.6961020997739704, 0.6020058608745014, 0.4005571907593608, 0.47679012644093766, 0.3855663983616421, 0.43106572248179387, 0.48918781456604266, 0.3903430152609002, 0.4959898678114609, 0.45242839097866816, 0.4742405653489784, 0.19116773361569972, 0.19536872743490907, 0.19638968162627912, 0.21116323699309336, 0.20673914866223808, 0.19080002624338732, 0.18219146018485466, 0.22363877372787178, 0.20179100434757458, 0.21904046532518062, 0.23072523557730285, 0.44438233317345677, 0.6593772302675259, 0.6050809213346907, 0.5642090651552212, 0.21847771595106225, 0.23757529611313521, 0.47421247505317765, 0.1631596118970019, 0.1680336795145536, 0.16394198845556363, 0.8493877223455077, 0.8444076257982225, 0.8712688776418539, 0.8172917066652723, 0.1683430905561374, 0.19491639821000062, 0.16784789516957022, 0.16837823279418862, 0.8558058217754425, 0.16098637505556346, 0.8351031638532167, 0.20616676276273893, 0.20978397441718188, 0.20867522274069494, 0.11619572606582351, 0.1835995787777771, 0.19025025389598527, 0.17967687509252517, 0.1836003360633507, 0.17429144668925767, 0.1751093122229751, 0.19097637924898203, 0.1820322095791258, 0.18134204723399638, 0.0883550506324704, 0.07814260939356577, 0.08477674287786285, 0.08729605968454235, 0.08379149247862339, 0.08225706585958392, 0.07427014298962253, 0.07844732203967741, 0.08683774369467523]}, "mutation_prompt": null}
{"id": "6589b0e8-4be4-4808-9484-9c12c813f320", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = max(4 * self.dim, 20)  # Adjusted initial population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, self.dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.initial_population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            new_population = []\n            new_fitness = []\n\n            for i in range(self.initial_population_size):\n                # Dynamic adaptation of mutation factor and reduced crossover rate range for tighter control\n                F = 0.5 + np.random.rand() * 0.5  # Focused range for mutation factor\n                CR = 0.6 + np.random.rand() * 0.2  # Reduced range for crossover rate\n\n                # Mutation with additional diversity enhancement\n                indices = np.random.choice([x for x in range(self.initial_population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c) + 0.001 * np.random.randn(self.dim), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    new_population.append(trial)\n                    new_fitness.append(trial_fitness)\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                else:\n                    new_population.append(self.population[i])\n                    new_fitness.append(self.fitness[i])\n\n                if self.evaluations >= self.budget:\n                    break\n\n            # Update population and fitness\n            self.population = np.array(new_population)\n            self.fitness = np.array(new_fitness)\n\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Diversity Maintenance and Dynamic Selection Pressure for Improved Convergence Speed.", "configspace": "", "generation": 34, "fitness": 0.3617805189878397, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.24.", "error": "", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.798642165795191, 0.8325560465082571, 0.8271890489006479, 0.8172685457043591, 0.8299706380477955, 0.8320464691871975, 0.8064356866774574, 0.8092928553316784, 0.8039403636516198, 0.47716110550059976, 0.48034746710299914, 0.4579578119471064, 0.48168143490815596, 0.4711746095093041, 0.46831081531723917, 0.4568913272721393, 0.4728450849378756, 0.46233022292260595, 0.41106538306550733, 0.3778596665414017, 0.3764026979338464, 0.41250561586122125, 0.4094695535102457, 0.3346349725976352, 0.3715092542130234, 0.4120222454582888, 0.40497840308478705, 0.3968681277528002, 0.33111788770991823, 0.3499349739181813, 0.34065223041428694, 0.34599734882254907, 0.32374731088221165, 0.16169368787396454, 0.295450076443437, 0.32851696127095564, 0.9560911260719677, 0.9623049247157383, 0.9778478306522422, 0.9778001831923441, 0.977643164013764, 0.9780443910274051, 0.9796393938724217, 0.9787269737947961, 0.9856947621120712, 0.5387559543879874, 0.5145040963233454, 0.496095900639682, 0.505497035533555, 0.4866306988927974, 0.48026736618711185, 0.5079616841231244, 0.5155562621657698, 0.5148933517449834, 0.6451183296518895, 0.7331741645253065, 0.7034621621148889, 0.7388112636424314, 0.7416393027000745, 0.7469605607169774, 0.7258357329598248, 0.7729363352515883, 0.813016037660857, 0.31783660777708167, 0.30374147870693147, 0.40218933770962617, 0.2707583698492546, 0.3502441826995206, 0.25763330208729285, 0.30190304947383295, 0.29724340758626355, 0.39030308435213024, 0.3217177492476855, 0.32614275241545365, 0.24976523551375907, 0.287327023277123, 0.21829009234491636, 0.266062683572026, 0.3128261050218861, 0.3061763691852116, 0.24394266615136828, 0.09555599133747672, 0.1564101442514113, 0.1253280532201173, 0.12080401299967358, 0.15743006716778873, 0.12593296621886818, 0.15456202026073007, 0.1280737003372342, 0.15508665740608596, 0.2667913216093699, 0.24734039402344088, 0.21702318093245898, 0.15895222093421557, 0.1984513620483802, 0.2074618739179277, 0.21168359767201195, 0.24900348803529448, 0.2611143383582315, 0.03704497286718633, 0.05037718423779192, 0.05322077755953747, 0.0761226640736763, 0.14033101345388077, 0.08506080616194689, 0.11594042360496937, 0.13164966139684953, 0.08967250925902048, 0.19265771667571452, 0.19292861402704042, 0.19922632398317142, 0.2136907516698744, 0.2130263904075146, 0.22506632859389697, 0.19572723120661895, 0.2013497634300223, 0.2006058749749694, 0.5520820100286765, 0.5519254604275488, 0.5699602723216387, 0.5837361158435173, 0.5652597784501054, 0.5623851862407193, 0.5597522191363372, 0.5834839255615861, 0.6197357041227196, 0.09485703996255235, 0.11866285501779716, 0.09614930721705184, 0.09916461113896535, 0.1035106038152076, 0.10587953155233643, 0.10632073415448762, 0.10153928389022326, 0.10283092043033248, 0.148062462187026, 0.16424080931521745, 0.16523485433385032, 0.16804753590416988, 0.1528744840057168, 0.3125871442949234, 0.17891963438586722, 0.13422837589689374, 0.15865743902112606, 0.39908999729568473, 0.37450574896540545, 0.3744745769096708, 0.3876978922411435, 0.4056953826909465, 0.362063098186551, 0.41489003508557376, 0.4106754326656935, 0.4331869567239941, 0.3062999557250323, 0.2707076737515356, 0.2580986398056778, 0.2839151616236034, 0.2642619574581223, 0.2786698180603243, 0.3185739258307786, 0.3235559088588117, 0.3028377986926921, 0.17777772905092737, 0.21222319981513782, 0.19422973903718577, 0.22914835840907188, 0.20177508103160613, 0.18773967615767662, 0.2211255196998252, 0.1877718012873989, 0.1949610677803748, 0.3923859796935679, 0.3423317918781581, 0.3052703075813371, 0.46543919333050776, 0.33343026654378094, 0.2428378398958656, 0.21899795824964563, 0.28706458057861217, 0.23228175776491766, 0.7837759186333536, 0.6927290937580095, 0.8139730669027871, 0.7834805280164765, 0.19265587698654152, 0.7226892543250021, 0.18550158661538974, 0.5893152322367219, 0.17487491149701906, 0.6708396196653389, 0.20643774354895172, 0.6190064468907226, 0.6410676906708741, 0.19715668468508618, 0.1999013213091959, 0.20791993624990257, 0.2069828336225914, 0.21152777769967024, 0.18022102542713014, 0.18323559039928472, 0.19223305480614727, 0.1890103202270379, 0.17549692243838488, 0.19221340993589864, 0.1825109271809252, 0.18505093485927915, 0.17327331653310574, 0.09136150388257958, 0.0877754277104088, 0.08154942025968481, 0.08665397367156513, 0.08636578466330225, 0.07592448365632465, 0.07057633664777274, 0.08080046565674825, 0.07423859255352505]}, "mutation_prompt": null}
{"id": "4d31a78d-2fba-4d8c-b089-7762fd8dc50a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)  # Adjusted population size for better balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.4 + np.random.rand() * 0.6  # Slightly wider range for mutation factor\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly wider range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Adaptation of Population Size and Strategy Parameters for Faster Convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.8069932187240714, 0.8371948667662111, 0.8231735516780528, 0.8209119030637503, 0.8173843421410818, 0.8338276250472865, 0.8099788817011171, 0.8340259871900396, 0.8134170016075076, 0.4948008435252803, 0.5767705430428288, 0.4254266517118577, 0.468395428725089, 0.319383553176, 0.2772551026034935, 0.35698947665407743, 0.49738897643457247, 0.16111278757965342, 0.15615068435859558, 0.503708969793849, 0.1456913463158539, 0.14955914520861846, 0.3673145491559078, 0.15982546432727918, 0.13883765773047685, 0.5757548940151063, 0.1463380342395838, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6810068727022558, 0.05934394405914978, 0.7179997682272512, 0.7354814872274553, 0.716292243943319, 0.7132611563987608, 0.7111283780724406, 0.704904275544586, 0.7177589154434928, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.627554783036852, 0.27399698654661964, 0.5206995142850372, 0.5727854413856195, 0.6756973879512581, 0.6925079160443874, 0.4723521179676664, 0.5850633841043863, 0.6154828273566841, 0.5690845364602599, 0.12832991251384884, 0.6118946034540426, 0.5121362218209906, 0.5559754325552505, 0.5757465909070679, 0.6783811708343214, 0.5827115150760229, 0.5454862049012421, 0.5618172574275822, 0.6151486071614898, 0.6296700230952061, 0.6462336269443079, 0.6241583259430664, 0.38301420584250323, 0.6050469956053536, 0.6493838263434213, 0.6192330129107413, 0.7273623630897976, 0.6883200509096319, 0.6681981436775317, 0.6627508901468212, 0.6977155961004035, 0.29864170327591577, 0.7245155548987849, 0.7349831532658158, 0.72953907628799, 0.13356675514597804, 0.1321724269019131, 0.26965963867679943, 0.47723341874348213, 0.293537001735632, 0.3254512047273245, 0.3448463845190113, 0.37418798957666344, 0.17005093526303972, 0.4808874756404665, 0.5588362725018154, 0.43035545176505985, 0.5090317791282585, 0.5279271044541041, 0.5249340459427856, 0.5008530828524571, 0.49618664994556605, 0.48957601402191453, 0.8214457554992385, 0.8380561981189937, 0.7814220776854066, 0.8221519703459405, 0.8263550591088619, 0.8393017919097352, 0.8432022229348806, 0.8248131481285176, 0.8218044624143938, 0.12257250634623107, 0.13578192098798758, 0.09562600909104513, 0.10532749500524774, 0.0991437354268021, 0.1105988816501755, 0.11416732163926258, 0.10534428499982096, 0.1458890188955283, 0.1292960008969698, 0.2014320842174887, 0.17112222346757477, 0.19604190347202122, 0.14077551033381241, 0.14054291162998156, 0.2056426008564839, 0.14893288395922133, 0.23193357571422246, 0.560535494298988, 0.522385795530115, 0.5556934322924963, 0.6096552983974788, 0.5982098499380657, 0.5689362823105812, 0.6585072738570534, 0.6961020997739704, 0.6020058608745014, 0.4005571907593608, 0.47679012644093766, 0.3855663983616421, 0.43106572248179387, 0.48918781456604266, 0.3903430152609002, 0.4959898678114609, 0.45242839097866816, 0.4742405653489784, 0.19116773361569972, 0.19536872743490907, 0.19638968162627912, 0.21116323699309336, 0.20673914866223808, 0.19080002624338732, 0.18219146018485466, 0.22363877372787178, 0.20179100434757458, 0.21904046532518062, 0.23072523557730285, 0.44438233317345677, 0.6593772302675259, 0.6050809213346907, 0.5642090651552212, 0.21847771595106225, 0.23757529611313521, 0.47421247505317765, 0.1631596118970019, 0.1680336795145536, 0.16394198845556363, 0.8493877223455077, 0.8444076257982225, 0.8712688776418539, 0.8172917066652723, 0.1683430905561374, 0.19491639821000062, 0.16784789516957022, 0.16837823279418862, 0.8558058217754425, 0.16098637505556346, 0.8351031638532167, 0.20616676276273893, 0.20978397441718188, 0.20867522274069494, 0.11619572606582351, 0.1835995787777771, 0.19025025389598527, 0.17967687509252517, 0.1836003360633507, 0.17429144668925767, 0.1751093122229751, 0.19097637924898203, 0.1820322095791258, 0.18134204723399638, 0.0883550506324704, 0.07814260939356577, 0.08477674287786285, 0.08729605968454235, 0.08379149247862339, 0.08225706585958392, 0.07427014298962253, 0.07844732203967741, 0.08683774369467523]}, "mutation_prompt": null}
{"id": "a8cb95b6-3b00-4a57-a5ad-4d48991705e5", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        stagnation_counter = 0\n        stagnation_limit = 10\n        \n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                F = 0.5 + np.random.rand() * 0.5\n                CR = 0.6 + np.random.rand() * 0.4\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                if np.random.rand() < 0.1:  # Introduce turbulence mechanism\n                    perturbation = 0.1 * np.random.uniform(-1, 1, self.dim)\n                    trial = np.clip(trial + perturbation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                        stagnation_counter = 0\n                else:\n                    stagnation_counter += 1\n                \n                if stagnation_counter >= stagnation_limit:\n                    self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n                    stagnation_counter = 0\n\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Turbulence and Adaptive Population Management for Improved Convergence Speed.", "configspace": "", "generation": 36, "fitness": 0.09423373878499802, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.09.", "error": "", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.165740305103514, 0.15903972213729634, 0.17483942882223058, 0.17967922808146486, 0.17240683228961173, 0.15931867916575826, 0.15436472918068322, 0.13218593846523452, 0.1598644648320635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04546648642853601, 0.04541265241086079, 0.04067001835750084, 0.0331707834849152, 0.03661255598434088, 0.05203418953125294, 0.03349546077093013, 0.048023373580471374, 0.04356166420477914, 0.03356012437826705, 0.03491823088384571, 0.022534680329652446, 0.02302507300949541, 0.032458602215083565, 0.02465544906128181, 0.0232710813308471, 0.016773932946439363, 0.03543031925672169, 0.13898852126946926, 0.2061900850910079, 0.833455741098086, 0.12736314185870545, 0.12564524020308776, 0.6017771784875545, 0.14953580342151784, 0.14267796106395358, 0.17233464396484233, 0.08850178460311386, 0.059894297733277146, 0.053496167022541674, 0.10337567568884531, 0.05199840101509057, 0.06343367226609387, 0.0700878098872727, 0.06503622336895154, 0.06738065000605342, 0.1599889962640385, 0.1295393916631058, 0.11342599092947636, 0.1189648506379577, 0.10829121937226993, 0.15321503348512122, 0.1403136477646172, 0.12077171162948197, 0.16721216259440097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007041163100300785, 0.011096843355056119, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033796070280525115, 0.012780049034070151, 0.04079541109292861, 0.0021640715056364668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011352615693362877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029817139145619564, 0.03906250505987541, 0.04543782582123601, 0.04358854743572993, 0.0513035976743067, 0.05431681728887561, 0.046382751082879814, 0.04913238812238141, 0.023163568616991315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21278330996661687, 0.251500416988061, 0.18429927263183932, 0.17694661048921445, 0.18198420025260875, 0.167445707875858, 0.1937190815622215, 0.18701259567079564, 0.19369461864344728, 0.04830774904593493, 0.031691891367065406, 0.04245876756543854, 0.03632452420101395, 0.03398951742548795, 0.04327175591024057, 0.06569539438377381, 0.05026546766109463, 0.03770577093523353, 0.14250004056498145, 0.1481911737262771, 0.13278323449340224, 0.12335596450787689, 0.14321038148954646, 0.1362877924403083, 0.12432551494744493, 0.12802753527720345, 0.14063771751168663, 0.15004005928330677, 0.15947325872117257, 0.16170196377085744, 0.15473567385779152, 0.16557772794402192, 0.21099945014714794, 0.18368965700672668, 0.17398857053829908, 0.1643266607888243, 0.09776503155991434, 0.09998673227556243, 0.09858244438093677, 0.11683821825678553, 0.10419262340745661, 0.09524420234907593, 0.09736451485965825, 0.11057945659423729, 0.09615139970187159, 0.1473509049519287, 0.18258216523115645, 0.17202277481435335, 0.14132648780464985, 0.14026239632017767, 0.1417967303634854, 0.16831155602491077, 0.1619137407046839, 0.16243609556314187, 0.1497815145076472, 0.12605190606235395, 0.14252611597945375, 0.13464212147700927, 0.14502650094260283, 0.1511426930490144, 0.1309762965571184, 0.1569201720376916, 0.12003433336487723, 0.15956516406327903, 0.18678197555064457, 0.1683989494553142, 0.13582203882176458, 0.16506167386906312, 0.13215236339366987, 0.16501316360766827, 0.15161216156811985, 0.14899657760097018, 0.23833242263301924, 0.16513375955847753, 0.16206730481770903, 0.13906099572187436, 0.15145403019968562, 0.12727772961028638, 0.1681669469766064, 0.14175998693402925, 0.1635749285792506, 0.17883914676083346, 0.1736288002210553, 0.17401259453405238, 0.1942184746926996, 0.19716625732798354, 0.17803090966135893, 0.18275393840569887, 0.18497510500222836, 0.1969524780998949, 0.04770090361268153, 0.047580260061881874, 0.05462813600119465, 0.05986345293040518, 0.04410797002360656, 0.050472994459477505, 0.06533613127797422, 0.04041342242450041, 0.047891360675723416]}, "mutation_prompt": null}
{"id": "030b05e5-ef66-430d-8d45-133df5ee445f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)  # Adjusted population size for better balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.4 + np.random.rand() * 0.6  # Slightly wider range for mutation factor\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly wider range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Adaptation of Population Size and Strategy Parameters for Faster Convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.8069932187240714, 0.8371948667662111, 0.8231735516780528, 0.8209119030637503, 0.8173843421410818, 0.8338276250472865, 0.8099788817011171, 0.8340259871900396, 0.8134170016075076, 0.4948008435252803, 0.5767705430428288, 0.4254266517118577, 0.468395428725089, 0.319383553176, 0.2772551026034935, 0.35698947665407743, 0.49738897643457247, 0.16111278757965342, 0.15615068435859558, 0.503708969793849, 0.1456913463158539, 0.14955914520861846, 0.3673145491559078, 0.15982546432727918, 0.13883765773047685, 0.5757548940151063, 0.1463380342395838, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6810068727022558, 0.05934394405914978, 0.7179997682272512, 0.7354814872274553, 0.716292243943319, 0.7132611563987608, 0.7111283780724406, 0.704904275544586, 0.7177589154434928, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.627554783036852, 0.27399698654661964, 0.5206995142850372, 0.5727854413856195, 0.6756973879512581, 0.6925079160443874, 0.4723521179676664, 0.5850633841043863, 0.6154828273566841, 0.5690845364602599, 0.12832991251384884, 0.6118946034540426, 0.5121362218209906, 0.5559754325552505, 0.5757465909070679, 0.6783811708343214, 0.5827115150760229, 0.5454862049012421, 0.5618172574275822, 0.6151486071614898, 0.6296700230952061, 0.6462336269443079, 0.6241583259430664, 0.38301420584250323, 0.6050469956053536, 0.6493838263434213, 0.6192330129107413, 0.7273623630897976, 0.6883200509096319, 0.6681981436775317, 0.6627508901468212, 0.6977155961004035, 0.29864170327591577, 0.7245155548987849, 0.7349831532658158, 0.72953907628799, 0.13356675514597804, 0.1321724269019131, 0.26965963867679943, 0.47723341874348213, 0.293537001735632, 0.3254512047273245, 0.3448463845190113, 0.37418798957666344, 0.17005093526303972, 0.4808874756404665, 0.5588362725018154, 0.43035545176505985, 0.5090317791282585, 0.5279271044541041, 0.5249340459427856, 0.5008530828524571, 0.49618664994556605, 0.48957601402191453, 0.8214457554992385, 0.8380561981189937, 0.7814220776854066, 0.8221519703459405, 0.8263550591088619, 0.8393017919097352, 0.8432022229348806, 0.8248131481285176, 0.8218044624143938, 0.12257250634623107, 0.13578192098798758, 0.09562600909104513, 0.10532749500524774, 0.0991437354268021, 0.1105988816501755, 0.11416732163926258, 0.10534428499982096, 0.1458890188955283, 0.1292960008969698, 0.2014320842174887, 0.17112222346757477, 0.19604190347202122, 0.14077551033381241, 0.14054291162998156, 0.2056426008564839, 0.14893288395922133, 0.23193357571422246, 0.560535494298988, 0.522385795530115, 0.5556934322924963, 0.6096552983974788, 0.5982098499380657, 0.5689362823105812, 0.6585072738570534, 0.6961020997739704, 0.6020058608745014, 0.4005571907593608, 0.47679012644093766, 0.3855663983616421, 0.43106572248179387, 0.48918781456604266, 0.3903430152609002, 0.4959898678114609, 0.45242839097866816, 0.4742405653489784, 0.19116773361569972, 0.19536872743490907, 0.19638968162627912, 0.21116323699309336, 0.20673914866223808, 0.19080002624338732, 0.18219146018485466, 0.22363877372787178, 0.20179100434757458, 0.21904046532518062, 0.23072523557730285, 0.44438233317345677, 0.6593772302675259, 0.6050809213346907, 0.5642090651552212, 0.21847771595106225, 0.23757529611313521, 0.47421247505317765, 0.1631596118970019, 0.1680336795145536, 0.16394198845556363, 0.8493877223455077, 0.8444076257982225, 0.8712688776418539, 0.8172917066652723, 0.1683430905561374, 0.19491639821000062, 0.16784789516957022, 0.16837823279418862, 0.8558058217754425, 0.16098637505556346, 0.8351031638532167, 0.20616676276273893, 0.20978397441718188, 0.20867522274069494, 0.11619572606582351, 0.1835995787777771, 0.19025025389598527, 0.17967687509252517, 0.1836003360633507, 0.17429144668925767, 0.1751093122229751, 0.19097637924898203, 0.1820322095791258, 0.18134204723399638, 0.0883550506324704, 0.07814260939356577, 0.08477674287786285, 0.08729605968454235, 0.08379149247862339, 0.08225706585958392, 0.07427014298962253, 0.07844732203967741, 0.08683774369467523]}, "mutation_prompt": null}
{"id": "aae72e5c-fde5-4a9b-bd37-fdd65497d68e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)  # Adjusted population size for better balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.4 + np.random.rand() * 0.6  # Slightly wider range for mutation factor\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly wider range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Adaptation of Population Size and Strategy Parameters for Faster Convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.8069932187240714, 0.8371948667662111, 0.8231735516780528, 0.8209119030637503, 0.8173843421410818, 0.8338276250472865, 0.8099788817011171, 0.8340259871900396, 0.8134170016075076, 0.4948008435252803, 0.5767705430428288, 0.4254266517118577, 0.468395428725089, 0.319383553176, 0.2772551026034935, 0.35698947665407743, 0.49738897643457247, 0.16111278757965342, 0.15615068435859558, 0.503708969793849, 0.1456913463158539, 0.14955914520861846, 0.3673145491559078, 0.15982546432727918, 0.13883765773047685, 0.5757548940151063, 0.1463380342395838, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6810068727022558, 0.05934394405914978, 0.7179997682272512, 0.7354814872274553, 0.716292243943319, 0.7132611563987608, 0.7111283780724406, 0.704904275544586, 0.7177589154434928, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.627554783036852, 0.27399698654661964, 0.5206995142850372, 0.5727854413856195, 0.6756973879512581, 0.6925079160443874, 0.4723521179676664, 0.5850633841043863, 0.6154828273566841, 0.5690845364602599, 0.12832991251384884, 0.6118946034540426, 0.5121362218209906, 0.5559754325552505, 0.5757465909070679, 0.6783811708343214, 0.5827115150760229, 0.5454862049012421, 0.5618172574275822, 0.6151486071614898, 0.6296700230952061, 0.6462336269443079, 0.6241583259430664, 0.38301420584250323, 0.6050469956053536, 0.6493838263434213, 0.6192330129107413, 0.7273623630897976, 0.6883200509096319, 0.6681981436775317, 0.6627508901468212, 0.6977155961004035, 0.29864170327591577, 0.7245155548987849, 0.7349831532658158, 0.72953907628799, 0.13356675514597804, 0.1321724269019131, 0.26965963867679943, 0.47723341874348213, 0.293537001735632, 0.3254512047273245, 0.3448463845190113, 0.37418798957666344, 0.17005093526303972, 0.4808874756404665, 0.5588362725018154, 0.43035545176505985, 0.5090317791282585, 0.5279271044541041, 0.5249340459427856, 0.5008530828524571, 0.49618664994556605, 0.48957601402191453, 0.8214457554992385, 0.8380561981189937, 0.7814220776854066, 0.8221519703459405, 0.8263550591088619, 0.8393017919097352, 0.8432022229348806, 0.8248131481285176, 0.8218044624143938, 0.12257250634623107, 0.13578192098798758, 0.09562600909104513, 0.10532749500524774, 0.0991437354268021, 0.1105988816501755, 0.11416732163926258, 0.10534428499982096, 0.1458890188955283, 0.1292960008969698, 0.2014320842174887, 0.17112222346757477, 0.19604190347202122, 0.14077551033381241, 0.14054291162998156, 0.2056426008564839, 0.14893288395922133, 0.23193357571422246, 0.560535494298988, 0.522385795530115, 0.5556934322924963, 0.6096552983974788, 0.5982098499380657, 0.5689362823105812, 0.6585072738570534, 0.6961020997739704, 0.6020058608745014, 0.4005571907593608, 0.47679012644093766, 0.3855663983616421, 0.43106572248179387, 0.48918781456604266, 0.3903430152609002, 0.4959898678114609, 0.45242839097866816, 0.4742405653489784, 0.19116773361569972, 0.19536872743490907, 0.19638968162627912, 0.21116323699309336, 0.20673914866223808, 0.19080002624338732, 0.18219146018485466, 0.22363877372787178, 0.20179100434757458, 0.21904046532518062, 0.23072523557730285, 0.44438233317345677, 0.6593772302675259, 0.6050809213346907, 0.5642090651552212, 0.21847771595106225, 0.23757529611313521, 0.47421247505317765, 0.1631596118970019, 0.1680336795145536, 0.16394198845556363, 0.8493877223455077, 0.8444076257982225, 0.8712688776418539, 0.8172917066652723, 0.1683430905561374, 0.19491639821000062, 0.16784789516957022, 0.16837823279418862, 0.8558058217754425, 0.16098637505556346, 0.8351031638532167, 0.20616676276273893, 0.20978397441718188, 0.20867522274069494, 0.11619572606582351, 0.1835995787777771, 0.19025025389598527, 0.17967687509252517, 0.1836003360633507, 0.17429144668925767, 0.1751093122229751, 0.19097637924898203, 0.1820322095791258, 0.18134204723399638, 0.0883550506324704, 0.07814260939356577, 0.08477674287786285, 0.08729605968454235, 0.08379149247862339, 0.08225706585958392, 0.07427014298962253, 0.07844732203967741, 0.08683774369467523]}, "mutation_prompt": null}
{"id": "ae222b33-1556-4997-8fb6-e431c08d49be", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)  # Adjusted population size for better balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.4 + np.random.rand() * 0.6  # Slightly wider range for mutation factor\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly wider range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Adaptation of Population Size and Strategy Parameters for Faster Convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.8069932187240714, 0.8371948667662111, 0.8231735516780528, 0.8209119030637503, 0.8173843421410818, 0.8338276250472865, 0.8099788817011171, 0.8340259871900396, 0.8134170016075076, 0.4948008435252803, 0.5767705430428288, 0.4254266517118577, 0.468395428725089, 0.319383553176, 0.2772551026034935, 0.35698947665407743, 0.49738897643457247, 0.16111278757965342, 0.15615068435859558, 0.503708969793849, 0.1456913463158539, 0.14955914520861846, 0.3673145491559078, 0.15982546432727918, 0.13883765773047685, 0.5757548940151063, 0.1463380342395838, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6810068727022558, 0.05934394405914978, 0.7179997682272512, 0.7354814872274553, 0.716292243943319, 0.7132611563987608, 0.7111283780724406, 0.704904275544586, 0.7177589154434928, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.627554783036852, 0.27399698654661964, 0.5206995142850372, 0.5727854413856195, 0.6756973879512581, 0.6925079160443874, 0.4723521179676664, 0.5850633841043863, 0.6154828273566841, 0.5690845364602599, 0.12832991251384884, 0.6118946034540426, 0.5121362218209906, 0.5559754325552505, 0.5757465909070679, 0.6783811708343214, 0.5827115150760229, 0.5454862049012421, 0.5618172574275822, 0.6151486071614898, 0.6296700230952061, 0.6462336269443079, 0.6241583259430664, 0.38301420584250323, 0.6050469956053536, 0.6493838263434213, 0.6192330129107413, 0.7273623630897976, 0.6883200509096319, 0.6681981436775317, 0.6627508901468212, 0.6977155961004035, 0.29864170327591577, 0.7245155548987849, 0.7349831532658158, 0.72953907628799, 0.13356675514597804, 0.1321724269019131, 0.26965963867679943, 0.47723341874348213, 0.293537001735632, 0.3254512047273245, 0.3448463845190113, 0.37418798957666344, 0.17005093526303972, 0.4808874756404665, 0.5588362725018154, 0.43035545176505985, 0.5090317791282585, 0.5279271044541041, 0.5249340459427856, 0.5008530828524571, 0.49618664994556605, 0.48957601402191453, 0.8214457554992385, 0.8380561981189937, 0.7814220776854066, 0.8221519703459405, 0.8263550591088619, 0.8393017919097352, 0.8432022229348806, 0.8248131481285176, 0.8218044624143938, 0.12257250634623107, 0.13578192098798758, 0.09562600909104513, 0.10532749500524774, 0.0991437354268021, 0.1105988816501755, 0.11416732163926258, 0.10534428499982096, 0.1458890188955283, 0.1292960008969698, 0.2014320842174887, 0.17112222346757477, 0.19604190347202122, 0.14077551033381241, 0.14054291162998156, 0.2056426008564839, 0.14893288395922133, 0.23193357571422246, 0.560535494298988, 0.522385795530115, 0.5556934322924963, 0.6096552983974788, 0.5982098499380657, 0.5689362823105812, 0.6585072738570534, 0.6961020997739704, 0.6020058608745014, 0.4005571907593608, 0.47679012644093766, 0.3855663983616421, 0.43106572248179387, 0.48918781456604266, 0.3903430152609002, 0.4959898678114609, 0.45242839097866816, 0.4742405653489784, 0.19116773361569972, 0.19536872743490907, 0.19638968162627912, 0.21116323699309336, 0.20673914866223808, 0.19080002624338732, 0.18219146018485466, 0.22363877372787178, 0.20179100434757458, 0.21904046532518062, 0.23072523557730285, 0.44438233317345677, 0.6593772302675259, 0.6050809213346907, 0.5642090651552212, 0.21847771595106225, 0.23757529611313521, 0.47421247505317765, 0.1631596118970019, 0.1680336795145536, 0.16394198845556363, 0.8493877223455077, 0.8444076257982225, 0.8712688776418539, 0.8172917066652723, 0.1683430905561374, 0.19491639821000062, 0.16784789516957022, 0.16837823279418862, 0.8558058217754425, 0.16098637505556346, 0.8351031638532167, 0.20616676276273893, 0.20978397441718188, 0.20867522274069494, 0.11619572606582351, 0.1835995787777771, 0.19025025389598527, 0.17967687509252517, 0.1836003360633507, 0.17429144668925767, 0.1751093122229751, 0.19097637924898203, 0.1820322095791258, 0.18134204723399638, 0.0883550506324704, 0.07814260939356577, 0.08477674287786285, 0.08729605968454235, 0.08379149247862339, 0.08225706585958392, 0.07427014298962253, 0.07844732203967741, 0.08683774369467523]}, "mutation_prompt": null}
{"id": "3f77a46b-79a6-4b1c-bde8-9029b4a7b341", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)  # Adjusted population size for better balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.4 + np.random.rand() * 0.6  # Slightly wider range for mutation factor\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly wider range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Adaptation of Population Size and Strategy Parameters for Faster Convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.8069932187240714, 0.8371948667662111, 0.8231735516780528, 0.8209119030637503, 0.8173843421410818, 0.8338276250472865, 0.8099788817011171, 0.8340259871900396, 0.8134170016075076, 0.4948008435252803, 0.5767705430428288, 0.4254266517118577, 0.468395428725089, 0.319383553176, 0.2772551026034935, 0.35698947665407743, 0.49738897643457247, 0.16111278757965342, 0.15615068435859558, 0.503708969793849, 0.1456913463158539, 0.14955914520861846, 0.3673145491559078, 0.15982546432727918, 0.13883765773047685, 0.5757548940151063, 0.1463380342395838, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6810068727022558, 0.05934394405914978, 0.7179997682272512, 0.7354814872274553, 0.716292243943319, 0.7132611563987608, 0.7111283780724406, 0.704904275544586, 0.7177589154434928, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.627554783036852, 0.27399698654661964, 0.5206995142850372, 0.5727854413856195, 0.6756973879512581, 0.6925079160443874, 0.4723521179676664, 0.5850633841043863, 0.6154828273566841, 0.5690845364602599, 0.12832991251384884, 0.6118946034540426, 0.5121362218209906, 0.5559754325552505, 0.5757465909070679, 0.6783811708343214, 0.5827115150760229, 0.5454862049012421, 0.5618172574275822, 0.6151486071614898, 0.6296700230952061, 0.6462336269443079, 0.6241583259430664, 0.38301420584250323, 0.6050469956053536, 0.6493838263434213, 0.6192330129107413, 0.7273623630897976, 0.6883200509096319, 0.6681981436775317, 0.6627508901468212, 0.6977155961004035, 0.29864170327591577, 0.7245155548987849, 0.7349831532658158, 0.72953907628799, 0.13356675514597804, 0.1321724269019131, 0.26965963867679943, 0.47723341874348213, 0.293537001735632, 0.3254512047273245, 0.3448463845190113, 0.37418798957666344, 0.17005093526303972, 0.4808874756404665, 0.5588362725018154, 0.43035545176505985, 0.5090317791282585, 0.5279271044541041, 0.5249340459427856, 0.5008530828524571, 0.49618664994556605, 0.48957601402191453, 0.8214457554992385, 0.8380561981189937, 0.7814220776854066, 0.8221519703459405, 0.8263550591088619, 0.8393017919097352, 0.8432022229348806, 0.8248131481285176, 0.8218044624143938, 0.12257250634623107, 0.13578192098798758, 0.09562600909104513, 0.10532749500524774, 0.0991437354268021, 0.1105988816501755, 0.11416732163926258, 0.10534428499982096, 0.1458890188955283, 0.1292960008969698, 0.2014320842174887, 0.17112222346757477, 0.19604190347202122, 0.14077551033381241, 0.14054291162998156, 0.2056426008564839, 0.14893288395922133, 0.23193357571422246, 0.560535494298988, 0.522385795530115, 0.5556934322924963, 0.6096552983974788, 0.5982098499380657, 0.5689362823105812, 0.6585072738570534, 0.6961020997739704, 0.6020058608745014, 0.4005571907593608, 0.47679012644093766, 0.3855663983616421, 0.43106572248179387, 0.48918781456604266, 0.3903430152609002, 0.4959898678114609, 0.45242839097866816, 0.4742405653489784, 0.19116773361569972, 0.19536872743490907, 0.19638968162627912, 0.21116323699309336, 0.20673914866223808, 0.19080002624338732, 0.18219146018485466, 0.22363877372787178, 0.20179100434757458, 0.21904046532518062, 0.23072523557730285, 0.44438233317345677, 0.6593772302675259, 0.6050809213346907, 0.5642090651552212, 0.21847771595106225, 0.23757529611313521, 0.47421247505317765, 0.1631596118970019, 0.1680336795145536, 0.16394198845556363, 0.8493877223455077, 0.8444076257982225, 0.8712688776418539, 0.8172917066652723, 0.1683430905561374, 0.19491639821000062, 0.16784789516957022, 0.16837823279418862, 0.8558058217754425, 0.16098637505556346, 0.8351031638532167, 0.20616676276273893, 0.20978397441718188, 0.20867522274069494, 0.11619572606582351, 0.1835995787777771, 0.19025025389598527, 0.17967687509252517, 0.1836003360633507, 0.17429144668925767, 0.1751093122229751, 0.19097637924898203, 0.1820322095791258, 0.18134204723399638, 0.0883550506324704, 0.07814260939356577, 0.08477674287786285, 0.08729605968454235, 0.08379149247862339, 0.08225706585958392, 0.07427014298962253, 0.07844732203967741, 0.08683774369467523]}, "mutation_prompt": null}
{"id": "4be747e6-4770-4d96-9b31-d6b0f9bc103a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = max(4 * self.dim, 20)\n        self.population_size = self.initial_population_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        def local_search(solution, fitness):\n            step_size = 0.1  # Small step size for local exploration\n            for _ in range(5):  # Perform a few local exploration steps\n                candidate = np.clip(solution + np.random.uniform(-step_size, step_size, self.dim), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                self.evaluations += 1\n                if candidate_fitness < fitness:\n                    solution, fitness = candidate, candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        return candidate, candidate_fitness\n                if self.evaluations >= self.budget:\n                    break\n            return solution, fitness\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Slightly narrowed range for mutation factor\n                CR = 0.8 + np.random.rand() * 0.2  # Slightly narrowed range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n\n                # Local search on the trial solution\n                if self.evaluations < self.budget:\n                    self.population[i], self.fitness[i] = local_search(self.population[i], self.fitness[i])\n\n                if self.evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of population size\n            if self.evaluations / self.budget > 0.5:  # Reduce population size after half the budget is used\n                self.population_size = max(self.initial_population_size // 2, 5)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Local Search and Dynamic Population Resizing for Improved Convergence Speed.", "configspace": "", "generation": 41, "fitness": 0.27947028986009526, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.6469165258507094, 0.6363936048533574, 0.6307914209139649, 0.6244966512120289, 0.6809716814218211, 0.6772732213309977, 0.6535132789640863, 0.6771708294573269, 0.6143340421284279, 0.36584752291224, 0.29070671946369764, 0.2686306910064069, 0.27142052296250796, 0.31539609378659594, 0.22116471354070188, 0.2924729091034852, 0.29289247686471376, 0.2509107348711105, 0.12481114356292311, 0.10873926190550953, 0.08990622640736456, 0.09379638886506891, 0.11673660083670001, 0.12781793294081834, 0.12429510475710082, 0.11478567168969389, 0.10875203168446168, 0.1145732848744514, 0.0981673427030022, 0.10560863360662076, 0.10605353923777616, 0.10089966625904967, 0.10158601605675321, 0.08230540042069734, 0.09935831066772194, 0.09897673137105523, 0.9019185594287462, 0.7691656922787591, 0.7972649867342513, 0.8480645429636453, 0.7698635512086243, 0.8285260435317217, 0.9577569684580749, 0.8563624200185611, 0.8547806880661611, 0.31664663383956737, 0.28336837792044145, 0.3060266067492551, 0.31124459625336554, 0.3054133688646836, 0.29389689381547746, 0.31945972959277247, 0.30003301452763975, 0.2808536427782524, 0.4499567228901681, 0.49965373947888536, 0.6811720086734862, 0.45948357227458025, 0.5285422741364332, 0.5245656898708122, 0.5073814861937628, 0.5404581844376353, 0.5416180593557502, 0.2690198739077253, 0.22923988821668895, 0.17482637231310294, 0.20203625304200057, 0.26226168771522884, 0.266453375447832, 0.18272737307488884, 0.21104463705496368, 0.22647438544963938, 0.2299710603340056, 0.13165746098021047, 0.20851926831541578, 0.177840966926349, 0.3241173422547645, 0.19167385668563852, 0.19615889916925822, 0.18858094067815578, 0.17682796767006237, 0.13496384817833207, 0.15900857666600565, 0.1356954860699865, 0.14204568221052993, 0.13556801949542263, 0.11902200578608313, 0.15302604767350148, 0.11218570038526465, 0.08958841994106115, 0.22589436038840172, 0.20200862976902167, 0.25319031919745416, 0.22160148348168673, 0.21491739360365858, 0.2451859882810078, 0.3217540573349319, 0.2650116864524855, 0.29490659454728374, 0.029790291989295836, 0.04925138000119855, 0.04617457848247686, 0.044164914753789475, 0.04652731174447877, 0.03783737759221528, 0.06037690842233501, 0.06854526129436034, 0.05329032299176595, 0.15881258632099948, 0.17720736758850997, 0.1817549136377714, 0.17956465770608376, 0.1698148026505667, 0.1543389439156606, 0.16472298810774133, 0.1558706214914729, 0.18171202712268508, 0.46690340801533403, 0.5082299703664223, 0.48407028896564996, 0.5013341782243853, 0.47446223459020387, 0.4685571106797475, 0.44420795554155057, 0.4778912808244037, 0.5141454384057544, 0.07700018852696155, 0.09854090047918507, 0.09719644464644495, 0.10038386443476432, 0.10945877678892191, 0.10438431054329234, 0.08872314037067952, 0.1007178066361053, 0.088427051075469, 0.1907228167065499, 0.17988400579972952, 0.25018102160527456, 0.2559250063047387, 0.2281017922388595, 0.2267625632634661, 0.19416205675446896, 0.18426624219774768, 0.17023541879144466, 0.23639370018945005, 0.25954874398780126, 0.2328793344721668, 0.22160337073232506, 0.23126322039493175, 0.22193329552585206, 0.20134355589191855, 0.2650610368954551, 0.2377699183379648, 0.1973244059607755, 0.18680177990682056, 0.1716642996480403, 0.16471775048239035, 0.20255710679910977, 0.16729896558480173, 0.18763971737878893, 0.23102103990962664, 0.18410053883082966, 0.18593081697583225, 0.18043736950493316, 0.1885874445503103, 0.2213087057548464, 0.20699487429277463, 0.18308114063719405, 0.18554454517466779, 0.19470049028897762, 0.1855260581701077, 0.18051354230458605, 0.1885959307951276, 0.17924260434341655, 0.1958457103924064, 0.19525838542088403, 0.183127863908507, 0.18271080716238608, 0.18977344534434004, 0.21392535652626676, 0.5097389303422941, 0.16755215494873588, 0.5757577806217398, 0.6113378754377692, 0.5943607910872563, 0.5942393384296336, 0.6000549453487726, 0.6209855869923555, 0.1673521749675474, 0.6257423576485541, 0.634548542977624, 0.14523901967465458, 0.6002119997352193, 0.6305811285147473, 0.5706811203954305, 0.19140369980557503, 0.6450896333589387, 0.5946658753145155, 0.1792480592648028, 0.19411047189576502, 0.21449734310334956, 0.2081047704354302, 0.19617535738816072, 0.19896065760153825, 0.1762836924292187, 0.18910458012654496, 0.19138706993492627, 0.06947840647501702, 0.06353637564038017, 0.07486339752332694, 0.06277309350695837, 0.054736950909191395, 0.07384718861292716, 0.07454665275333483, 0.06920720362181632, 0.07156209035843097]}, "mutation_prompt": null}
{"id": "42e6b1e1-8a53-42e6-bed3-9cae5ae81459", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = max(4 * self.dim, 20)\n        self.population_size = self.initial_population_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.fitness_threshold = 1e-8  # Adaptive fitness threshold\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.5 + np.random.rand() * 0.5  # Adjusted range for mutation factor\n                CR = 0.6 + np.random.rand() * 0.4  # Adjusted range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                        # Adaptive reduction of population size\n                        if np.abs(best_fitness) < self.fitness_threshold:\n                            self.population_size = max(self.initial_population_size // 2, 4)\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "A Modified Adaptive Differential Evolution with Dynamic Population Size and Adaptive Fitness Threshold for Enhanced Convergence.", "configspace": "", "generation": 42, "fitness": 0.46474707727467407, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.26.", "error": "", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.8784425911995467, 0.8812328303523183, 0.893237863120305, 0.8901272198633917, 0.8694296123542952, 0.8860553286864123, 0.882948746569276, 0.8933083708066896, 0.8874053216287053, 0.8126281177964839, 0.7732956328613163, 0.7811379463864507, 0.7898005123848453, 0.7911855027897546, 0.8067821037204737, 0.7796169798565354, 0.8166059439372538, 0.7943376934408111, 0.4398388784037326, 0.16205452758108319, 0.610232357860727, 0.33519120151930093, 0.5475110035731987, 0.49048448393197386, 0.3663468426950437, 0.5385001973621837, 0.15687909003149436, 0.41043072134888947, 0.3994681427079436, 0.4366227809358677, 0.49238048780495214, 0.438483597304657, 0.3763784428069381, 0.44530815690114933, 0.5740916119242714, 0.4610254990383217, 0.9635596242814073, 0.9653658981279851, 0.9755769692203915, 0.9669717840845234, 0.972845361954823, 0.9769039786298822, 0.9852125826869347, 0.9519666166723026, 0.9741273367119425, 0.6285852215880716, 0.6606787382657691, 0.6978100276028046, 0.6703381710876736, 0.6787084696381689, 0.6902585505950781, 0.6749023286471492, 0.6726899928965803, 0.6512918537311105, 0.8321177873753819, 0.8163298673605496, 0.7841343578913264, 0.8038683580004713, 0.8342412246123336, 0.777722281077245, 0.8104675385866147, 0.8062331122023116, 0.787767167603815, 0.46964042591237143, 0.4983468861861634, 0.48787549691634824, 0.5585293388776682, 0.4911802288589804, 0.5396628462577804, 0.41899371234646876, 0.5038276105292261, 0.461658225728904, 0.4801892433904983, 0.5205007120089032, 0.5753394933457285, 0.5267950275561939, 0.6009936463930698, 0.6171580977257162, 0.5557188729310052, 0.4744351936920572, 0.3722817798594782, 0.5019072496290828, 0.4594348307892918, 0.4320545808589804, 0.5160016570458257, 0.4677088800989464, 0.46618439936750633, 0.5269515286300376, 0.5525539459111488, 0.5121931989376246, 0.5323813131827972, 0.5585554417368082, 0.6053867864096965, 0.5743214310947782, 0.5614604320503964, 0.5744028427870358, 0.6320208881465235, 0.636674358612364, 0.6156581137431258, 0.10553049095155509, 0.13173591852876265, 0.24286359259462975, 0.29135323392863754, 0.4294750671014361, 0.2085352392739781, 0.14832306507822435, 0.2886519218919621, 0.08536007662843115, 0.3866687422261771, 0.3931291294700302, 0.42322904705846165, 0.39133711569725504, 0.4144388256625591, 0.4534114308368914, 0.4374525404938835, 0.4302117138850059, 0.4078831090734355, 0.7002418347106287, 0.7704008573723731, 0.7880821439960476, 0.7295866056105846, 0.7651557183145052, 0.7618232286114431, 0.76895643533676, 0.761727200574893, 0.7609021697723333, 0.1063427973241653, 0.12381048931727379, 0.13020861572198517, 0.10411245259576696, 0.11632207818445806, 0.09988653589816054, 0.11743566914022396, 0.09673013809228725, 0.10115682352580402, 0.21399330671156425, 0.1984540761847544, 0.253823976757533, 0.1345286422715951, 0.1490038711900723, 0.22135409219668867, 0.22770688443594211, 0.28480702513706035, 0.2116186577903023, 0.43423715217790637, 0.5092184178448951, 0.4547222133771326, 0.44722345606060865, 0.4786153237508466, 0.48430023173592873, 0.5524087294314702, 0.5828588928126135, 0.5027759398198937, 0.3124733230056871, 0.38154902835560556, 0.343535281918663, 0.31526267414889675, 0.3645892583090006, 0.3147909869911879, 0.3680998296468322, 0.35316603952303316, 0.4157076044546849, 0.1772332284567505, 0.18289540977051588, 0.2030141128019285, 0.21675067212506915, 0.19032933835836918, 0.194558646856564, 0.17766507794521424, 0.19638693739610646, 0.20913351163356353, 0.5352556590893958, 0.20399943474632898, 0.4970484861538059, 0.22818455208151822, 0.459400119805769, 0.4252235821896212, 0.19869486147050452, 0.3814906388656458, 0.22686394626677386, 0.15791928103798059, 0.1543920318367622, 0.1682106624444354, 0.1908629769162269, 0.8243135741550881, 0.8612636432525256, 0.1613849410459055, 0.18045064754626616, 0.17945952262137888, 0.7758470068284322, 0.20808732287371645, 0.7463118515989973, 0.202104680902782, 0.20752895849008024, 0.20777488992561688, 0.15449455205454177, 0.19500106622709268, 0.8204726164155003, 0.19954423380160635, 0.18273580114153698, 0.18632886347020794, 0.21107486651698604, 0.19309958085252565, 0.1770484687604572, 0.18335488529588484, 0.1954475492583897, 0.1813691715604352, 0.07954810964409409, 0.07630832389972908, 0.06845311755145356, 0.08765147225333891, 0.08360609099886918, 0.07505803944371514, 0.07306791273465862, 0.08673304264147341, 0.08317348862829244]}, "mutation_prompt": null}
{"id": "2756f50b-9681-4863-a98b-62a226c08f10", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)  # Adjusted population size for better balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.4 + np.random.rand() * 0.6  # Slightly wider range for mutation factor\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly wider range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Adaptation of Population Size and Strategy Parameters for Faster Convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.8069932187240714, 0.8371948667662111, 0.8231735516780528, 0.8209119030637503, 0.8173843421410818, 0.8338276250472865, 0.8099788817011171, 0.8340259871900396, 0.8134170016075076, 0.4948008435252803, 0.5767705430428288, 0.4254266517118577, 0.468395428725089, 0.319383553176, 0.2772551026034935, 0.35698947665407743, 0.49738897643457247, 0.16111278757965342, 0.15615068435859558, 0.503708969793849, 0.1456913463158539, 0.14955914520861846, 0.3673145491559078, 0.15982546432727918, 0.13883765773047685, 0.5757548940151063, 0.1463380342395838, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6810068727022558, 0.05934394405914978, 0.7179997682272512, 0.7354814872274553, 0.716292243943319, 0.7132611563987608, 0.7111283780724406, 0.704904275544586, 0.7177589154434928, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.627554783036852, 0.27399698654661964, 0.5206995142850372, 0.5727854413856195, 0.6756973879512581, 0.6925079160443874, 0.4723521179676664, 0.5850633841043863, 0.6154828273566841, 0.5690845364602599, 0.12832991251384884, 0.6118946034540426, 0.5121362218209906, 0.5559754325552505, 0.5757465909070679, 0.6783811708343214, 0.5827115150760229, 0.5454862049012421, 0.5618172574275822, 0.6151486071614898, 0.6296700230952061, 0.6462336269443079, 0.6241583259430664, 0.38301420584250323, 0.6050469956053536, 0.6493838263434213, 0.6192330129107413, 0.7273623630897976, 0.6883200509096319, 0.6681981436775317, 0.6627508901468212, 0.6977155961004035, 0.29864170327591577, 0.7245155548987849, 0.7349831532658158, 0.72953907628799, 0.13356675514597804, 0.1321724269019131, 0.26965963867679943, 0.47723341874348213, 0.293537001735632, 0.3254512047273245, 0.3448463845190113, 0.37418798957666344, 0.17005093526303972, 0.4808874756404665, 0.5588362725018154, 0.43035545176505985, 0.5090317791282585, 0.5279271044541041, 0.5249340459427856, 0.5008530828524571, 0.49618664994556605, 0.48957601402191453, 0.8214457554992385, 0.8380561981189937, 0.7814220776854066, 0.8221519703459405, 0.8263550591088619, 0.8393017919097352, 0.8432022229348806, 0.8248131481285176, 0.8218044624143938, 0.12257250634623107, 0.13578192098798758, 0.09562600909104513, 0.10532749500524774, 0.0991437354268021, 0.1105988816501755, 0.11416732163926258, 0.10534428499982096, 0.1458890188955283, 0.1292960008969698, 0.2014320842174887, 0.17112222346757477, 0.19604190347202122, 0.14077551033381241, 0.14054291162998156, 0.2056426008564839, 0.14893288395922133, 0.23193357571422246, 0.560535494298988, 0.522385795530115, 0.5556934322924963, 0.6096552983974788, 0.5982098499380657, 0.5689362823105812, 0.6585072738570534, 0.6961020997739704, 0.6020058608745014, 0.4005571907593608, 0.47679012644093766, 0.3855663983616421, 0.43106572248179387, 0.48918781456604266, 0.3903430152609002, 0.4959898678114609, 0.45242839097866816, 0.4742405653489784, 0.19116773361569972, 0.19536872743490907, 0.19638968162627912, 0.21116323699309336, 0.20673914866223808, 0.19080002624338732, 0.18219146018485466, 0.22363877372787178, 0.20179100434757458, 0.21904046532518062, 0.23072523557730285, 0.44438233317345677, 0.6593772302675259, 0.6050809213346907, 0.5642090651552212, 0.21847771595106225, 0.23757529611313521, 0.47421247505317765, 0.1631596118970019, 0.1680336795145536, 0.16394198845556363, 0.8493877223455077, 0.8444076257982225, 0.8712688776418539, 0.8172917066652723, 0.1683430905561374, 0.19491639821000062, 0.16784789516957022, 0.16837823279418862, 0.8558058217754425, 0.16098637505556346, 0.8351031638532167, 0.20616676276273893, 0.20978397441718188, 0.20867522274069494, 0.11619572606582351, 0.1835995787777771, 0.19025025389598527, 0.17967687509252517, 0.1836003360633507, 0.17429144668925767, 0.1751093122229751, 0.19097637924898203, 0.1820322095791258, 0.18134204723399638, 0.0883550506324704, 0.07814260939356577, 0.08477674287786285, 0.08729605968454235, 0.08379149247862339, 0.08225706585958392, 0.07427014298962253, 0.07844732203967741, 0.08683774369467523]}, "mutation_prompt": null}
{"id": "ad303905-1241-418d-a50b-859f75454f40", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)  # Adjusted population size for better balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.4 + np.random.rand() * 0.6  # Slightly wider range for mutation factor\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly wider range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Adaptation of Population Size and Strategy Parameters for Faster Convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.8069932187240714, 0.8371948667662111, 0.8231735516780528, 0.8209119030637503, 0.8173843421410818, 0.8338276250472865, 0.8099788817011171, 0.8340259871900396, 0.8134170016075076, 0.4948008435252803, 0.5767705430428288, 0.4254266517118577, 0.468395428725089, 0.319383553176, 0.2772551026034935, 0.35698947665407743, 0.49738897643457247, 0.16111278757965342, 0.15615068435859558, 0.503708969793849, 0.1456913463158539, 0.14955914520861846, 0.3673145491559078, 0.15982546432727918, 0.13883765773047685, 0.5757548940151063, 0.1463380342395838, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6810068727022558, 0.05934394405914978, 0.7179997682272512, 0.7354814872274553, 0.716292243943319, 0.7132611563987608, 0.7111283780724406, 0.704904275544586, 0.7177589154434928, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.627554783036852, 0.27399698654661964, 0.5206995142850372, 0.5727854413856195, 0.6756973879512581, 0.6925079160443874, 0.4723521179676664, 0.5850633841043863, 0.6154828273566841, 0.5690845364602599, 0.12832991251384884, 0.6118946034540426, 0.5121362218209906, 0.5559754325552505, 0.5757465909070679, 0.6783811708343214, 0.5827115150760229, 0.5454862049012421, 0.5618172574275822, 0.6151486071614898, 0.6296700230952061, 0.6462336269443079, 0.6241583259430664, 0.38301420584250323, 0.6050469956053536, 0.6493838263434213, 0.6192330129107413, 0.7273623630897976, 0.6883200509096319, 0.6681981436775317, 0.6627508901468212, 0.6977155961004035, 0.29864170327591577, 0.7245155548987849, 0.7349831532658158, 0.72953907628799, 0.13356675514597804, 0.1321724269019131, 0.26965963867679943, 0.47723341874348213, 0.293537001735632, 0.3254512047273245, 0.3448463845190113, 0.37418798957666344, 0.17005093526303972, 0.4808874756404665, 0.5588362725018154, 0.43035545176505985, 0.5090317791282585, 0.5279271044541041, 0.5249340459427856, 0.5008530828524571, 0.49618664994556605, 0.48957601402191453, 0.8214457554992385, 0.8380561981189937, 0.7814220776854066, 0.8221519703459405, 0.8263550591088619, 0.8393017919097352, 0.8432022229348806, 0.8248131481285176, 0.8218044624143938, 0.12257250634623107, 0.13578192098798758, 0.09562600909104513, 0.10532749500524774, 0.0991437354268021, 0.1105988816501755, 0.11416732163926258, 0.10534428499982096, 0.1458890188955283, 0.1292960008969698, 0.2014320842174887, 0.17112222346757477, 0.19604190347202122, 0.14077551033381241, 0.14054291162998156, 0.2056426008564839, 0.14893288395922133, 0.23193357571422246, 0.560535494298988, 0.522385795530115, 0.5556934322924963, 0.6096552983974788, 0.5982098499380657, 0.5689362823105812, 0.6585072738570534, 0.6961020997739704, 0.6020058608745014, 0.4005571907593608, 0.47679012644093766, 0.3855663983616421, 0.43106572248179387, 0.48918781456604266, 0.3903430152609002, 0.4959898678114609, 0.45242839097866816, 0.4742405653489784, 0.19116773361569972, 0.19536872743490907, 0.19638968162627912, 0.21116323699309336, 0.20673914866223808, 0.19080002624338732, 0.18219146018485466, 0.22363877372787178, 0.20179100434757458, 0.21904046532518062, 0.23072523557730285, 0.44438233317345677, 0.6593772302675259, 0.6050809213346907, 0.5642090651552212, 0.21847771595106225, 0.23757529611313521, 0.47421247505317765, 0.1631596118970019, 0.1680336795145536, 0.16394198845556363, 0.8493877223455077, 0.8444076257982225, 0.8712688776418539, 0.8172917066652723, 0.1683430905561374, 0.19491639821000062, 0.16784789516957022, 0.16837823279418862, 0.8558058217754425, 0.16098637505556346, 0.8351031638532167, 0.20616676276273893, 0.20978397441718188, 0.20867522274069494, 0.11619572606582351, 0.1835995787777771, 0.19025025389598527, 0.17967687509252517, 0.1836003360633507, 0.17429144668925767, 0.1751093122229751, 0.19097637924898203, 0.1820322095791258, 0.18134204723399638, 0.0883550506324704, 0.07814260939356577, 0.08477674287786285, 0.08729605968454235, 0.08379149247862339, 0.08225706585958392, 0.07427014298962253, 0.07844732203967741, 0.08683774369467523]}, "mutation_prompt": null}
{"id": "bbab0bd0-ca75-44db-a1e5-33c547000a1a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)  # Adjusted population size for better balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.4 + np.random.rand() * 0.6  # Slightly wider range for mutation factor\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly wider range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Adaptation of Population Size and Strategy Parameters for Faster Convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.8069932187240714, 0.8371948667662111, 0.8231735516780528, 0.8209119030637503, 0.8173843421410818, 0.8338276250472865, 0.8099788817011171, 0.8340259871900396, 0.8134170016075076, 0.4948008435252803, 0.5767705430428288, 0.4254266517118577, 0.468395428725089, 0.319383553176, 0.2772551026034935, 0.35698947665407743, 0.49738897643457247, 0.16111278757965342, 0.15615068435859558, 0.503708969793849, 0.1456913463158539, 0.14955914520861846, 0.3673145491559078, 0.15982546432727918, 0.13883765773047685, 0.5757548940151063, 0.1463380342395838, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6810068727022558, 0.05934394405914978, 0.7179997682272512, 0.7354814872274553, 0.716292243943319, 0.7132611563987608, 0.7111283780724406, 0.704904275544586, 0.7177589154434928, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.627554783036852, 0.27399698654661964, 0.5206995142850372, 0.5727854413856195, 0.6756973879512581, 0.6925079160443874, 0.4723521179676664, 0.5850633841043863, 0.6154828273566841, 0.5690845364602599, 0.12832991251384884, 0.6118946034540426, 0.5121362218209906, 0.5559754325552505, 0.5757465909070679, 0.6783811708343214, 0.5827115150760229, 0.5454862049012421, 0.5618172574275822, 0.6151486071614898, 0.6296700230952061, 0.6462336269443079, 0.6241583259430664, 0.38301420584250323, 0.6050469956053536, 0.6493838263434213, 0.6192330129107413, 0.7273623630897976, 0.6883200509096319, 0.6681981436775317, 0.6627508901468212, 0.6977155961004035, 0.29864170327591577, 0.7245155548987849, 0.7349831532658158, 0.72953907628799, 0.13356675514597804, 0.1321724269019131, 0.26965963867679943, 0.47723341874348213, 0.293537001735632, 0.3254512047273245, 0.3448463845190113, 0.37418798957666344, 0.17005093526303972, 0.4808874756404665, 0.5588362725018154, 0.43035545176505985, 0.5090317791282585, 0.5279271044541041, 0.5249340459427856, 0.5008530828524571, 0.49618664994556605, 0.48957601402191453, 0.8214457554992385, 0.8380561981189937, 0.7814220776854066, 0.8221519703459405, 0.8263550591088619, 0.8393017919097352, 0.8432022229348806, 0.8248131481285176, 0.8218044624143938, 0.12257250634623107, 0.13578192098798758, 0.09562600909104513, 0.10532749500524774, 0.0991437354268021, 0.1105988816501755, 0.11416732163926258, 0.10534428499982096, 0.1458890188955283, 0.1292960008969698, 0.2014320842174887, 0.17112222346757477, 0.19604190347202122, 0.14077551033381241, 0.14054291162998156, 0.2056426008564839, 0.14893288395922133, 0.23193357571422246, 0.560535494298988, 0.522385795530115, 0.5556934322924963, 0.6096552983974788, 0.5982098499380657, 0.5689362823105812, 0.6585072738570534, 0.6961020997739704, 0.6020058608745014, 0.4005571907593608, 0.47679012644093766, 0.3855663983616421, 0.43106572248179387, 0.48918781456604266, 0.3903430152609002, 0.4959898678114609, 0.45242839097866816, 0.4742405653489784, 0.19116773361569972, 0.19536872743490907, 0.19638968162627912, 0.21116323699309336, 0.20673914866223808, 0.19080002624338732, 0.18219146018485466, 0.22363877372787178, 0.20179100434757458, 0.21904046532518062, 0.23072523557730285, 0.44438233317345677, 0.6593772302675259, 0.6050809213346907, 0.5642090651552212, 0.21847771595106225, 0.23757529611313521, 0.47421247505317765, 0.1631596118970019, 0.1680336795145536, 0.16394198845556363, 0.8493877223455077, 0.8444076257982225, 0.8712688776418539, 0.8172917066652723, 0.1683430905561374, 0.19491639821000062, 0.16784789516957022, 0.16837823279418862, 0.8558058217754425, 0.16098637505556346, 0.8351031638532167, 0.20616676276273893, 0.20978397441718188, 0.20867522274069494, 0.11619572606582351, 0.1835995787777771, 0.19025025389598527, 0.17967687509252517, 0.1836003360633507, 0.17429144668925767, 0.1751093122229751, 0.19097637924898203, 0.1820322095791258, 0.18134204723399638, 0.0883550506324704, 0.07814260939356577, 0.08477674287786285, 0.08729605968454235, 0.08379149247862339, 0.08225706585958392, 0.07427014298962253, 0.07844732203967741, 0.08683774369467523]}, "mutation_prompt": null}
{"id": "0106caac-9e72-483a-9b38-f21c474beb0b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)  # Adjusted population size for better balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.elite_archive = []  # Archive for storing elite solutions\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.4 + np.random.rand() * 0.6  # Slightly wider range for mutation factor\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly wider range for crossover rate\n\n                # Mutation with elite archive consideration\n                if self.elite_archive and np.random.rand() < 0.1:\n                    random_elite = self.elite_archive[np.random.randint(len(self.elite_archive))]\n                    indices = np.random.choice([x for x in range(self.population_size) if x != i], 2, replace=False)\n                    a, b = self.population[indices]\n                    mutant = np.clip(random_elite + F * (a - b), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                    a, b, c = self.population[indices]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                        if trial_fitness < best_fitness:\n                            self.elite_archive.append(trial)  # Update the elite archive\n                if self.evaluations >= self.budget:\n                    break\n\n            # Restart strategy to escape local optima\n            if self.evaluations < self.budget and self.evaluations % (self.budget // 10) == 0:\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n                self.fitness = np.full(self.population_size, np.inf)\n\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Elite Archive and Restart Strategy for Enhanced Convergence.", "configspace": "", "generation": 46, "fitness": 0.22515324998020422, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.5422572812828662, 0.4705425194156182, 0.4942249013459975, 0.5184403503609629, 0.5162890453296498, 0.5442592411701974, 0.4697173787169836, 0.49445778354937076, 0.5305472312528798, 0.2161543761916993, 0.21036717395394022, 0.20718867991697631, 0.20527068604759313, 0.1914724525834386, 0.2140417355432127, 0.2166360740314235, 0.22055270653254688, 0.21324745862427996, 0.09790941976376122, 0.09010092183006169, 0.10189848972598081, 0.09801082933005145, 0.10051949653815495, 0.1075944486867948, 0.11866398464844974, 0.11279554156578908, 0.10271739926909906, 0.09541624794812487, 0.09242593687894152, 0.09612395246640826, 0.091074882305888, 0.09805986187473537, 0.0979545421314224, 0.08409244910265334, 0.0985740030754656, 0.09781854250655064, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.19089161975162106, 0.2102939302275637, 0.1731019621352773, 0.19762643338614605, 0.19789249137075704, 0.1786009612627475, 0.2056669628883656, 0.19350968565761706, 0.22512852226956015, 0.28158921124436076, 0.2991029886691877, 0.28635296627548623, 0.31207227247766245, 0.28890116409028566, 0.8552986384165603, 0.2803002139592682, 0.3381018167368519, 0.341350782742197, 0.16642660579840307, 0.14217520398789962, 0.14691310702841964, 0.17414920324330052, 0.17870536413246174, 0.15377431720080914, 0.17052168620838803, 0.1654376819200526, 0.14276298809391774, 0.13875566187607968, 0.16026468162804663, 0.1452512081817534, 0.14852300441197985, 0.14160010569061343, 0.15116793176530008, 0.1684894402256164, 0.1390993650499226, 0.14252960518208224, 0.043437733154440994, 0.02753238130685698, 9.999999999998899e-05, 0.07823293037339263, 0.01733591764752551, 0.03406115771864493, 0.020503093336645906, 0.06127971221655282, 0.05813076331816647, 0.15018800874904137, 0.15845482951360523, 0.19897386290184893, 0.11561857737412229, 0.16608572457743254, 0.11207705603552653, 0.22163063005575512, 0.20625831204674394, 0.175405695412018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011321071941363114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10936289048499515, 0.10187622627375181, 0.11195669434425548, 0.10197994958657308, 0.11039264610964306, 0.11962708943315159, 0.11098103989587671, 0.13115112602729828, 0.10621595598356559, 0.4110247934367328, 0.44595255561229963, 0.43357723493759537, 0.4227988331860192, 0.42744483176732606, 0.4352870764098621, 0.4676585683667015, 0.4300952784512442, 0.44546920457029504, 0.08146176358701163, 0.09788600666071035, 0.08604296085222574, 0.08483966606191973, 0.09455619351081745, 0.08156074830876137, 0.11138232968731332, 0.07856504239758688, 0.08345889833294551, 0.131751794079372, 0.13977939786192306, 0.13839411926317513, 0.1629637263025232, 0.13647083550320072, 0.1379368503405063, 0.13655520227312934, 0.13495743898959733, 0.1365928356388778, 0.27022554232752005, 0.25264478233351617, 0.24885754219189804, 0.24430567297111827, 0.26705845100026193, 0.24001202848834013, 0.2606701464424417, 0.2857413466166807, 0.25448629429820724, 0.18563047289304158, 0.22472968618149047, 0.16660914697940565, 0.19029346047673212, 0.19817346167487904, 0.17858224292556768, 0.21286951028675205, 0.20309635664251546, 0.1843304903994053, 0.1968434535511535, 0.1831393060625871, 0.21830743532010866, 0.19133196694845145, 0.17521193056118445, 0.2052570701703933, 0.18231709570067745, 0.18457349657941835, 0.18237049077873502, 0.19115984596648317, 0.18764795543565937, 0.18990171482794926, 0.19022057256122338, 0.18307564675886379, 0.18850879714208513, 0.1927994838145728, 0.1793884408388272, 0.17740632414176416, 0.49137399539994286, 0.21390799402236216, 0.3077102413493017, 0.17227789664161497, 0.3931001212753299, 0.36522650339014817, 0.3898744793059017, 0.19992421444364095, 0.18011770242805247, 0.40034669539873313, 0.3118105567809425, 0.3787861204831493, 0.1877248086073574, 0.21661253167866268, 0.24141092276956644, 0.22604383307445008, 0.21747370656486686, 0.31002408414393534, 0.1816133419348881, 0.19045047344333266, 0.18928933823561733, 0.18838673544931928, 0.17223459072479508, 0.1949892452447588, 0.18350537971038328, 0.18776984340303615, 0.1980085603354852, 0.07431646725274077, 0.07275644974716511, 0.06949715597946504, 0.06933247068945658, 0.08214776298072335, 0.06723360595189865, 0.07479700984944304, 0.0738897957068877, 0.07054948736778222]}, "mutation_prompt": null}
{"id": "43b297e8-66ac-47d1-ace8-0cdb123901b5", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        stagnation_counter = 0\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Self-adaptive mutation factor and crossover rate\n                F = np.clip(0.5 + np.random.randn() * 0.3, 0.1, 0.9)\n                CR = np.clip(0.5 + np.random.randn() * 0.2, 0.1, 0.9)\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                        stagnation_counter = 0\n                else:\n                    stagnation_counter += 1\n\n                # Population dynamics adjustment\n                if stagnation_counter > self.population_size:\n                    additional_population = np.random.uniform(self.lower_bound, self.upper_bound, (self.dim,))\n                    additional_fitness = func(additional_population)\n                    self.evaluations += 1\n                    if additional_fitness < best_fitness:\n                        best_fitness = additional_fitness\n                        best_solution = additional_population\n                    stagnation_counter = 0\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Self-Adaptive Differential Mutation and Reduced Stagnation via Adjusted Population Dynamics for Faster Convergence.", "configspace": "", "generation": 47, "fitness": 0.3888933021907259, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.29.", "error": "", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.912690450000791, 0.9152734554111539, 0.9115670577356393, 0.9101921764653702, 0.9160611728008662, 0.916841570074513, 0.9102012473800024, 0.9085590657521594, 0.909349836550178, 0.8432006292189465, 0.8428877793354254, 0.812709866995961, 0.8346648961366867, 0.8446885335767863, 0.8431701411657876, 0.8408397514311095, 0.8574641298789052, 0.8526035791861146, 0.18082388606770639, 0.7735021082747571, 0.16059022794458977, 0.7547083019131668, 0.7843511025654806, 0.8216936429597883, 0.745379467108358, 0.797855084382971, 0.7459087503747769, 0.15881894535135865, 0.7161114745404091, 0.18122685451073517, 0.1818839116882497, 0.1804505824068241, 0.18207285946864982, 0.7435505806274245, 0.17815519594225426, 0.1312342846754747, 0.9793057444505625, 0.9792085543675243, 0.9602204307433427, 0.9692648014987031, 0.9629446098160177, 0.9670930371028008, 0.9675960557472562, 0.9591415823012795, 0.9669511051523062, 0.33829324044234077, 0.532012251229562, 0.4156160836533872, 0.6370663609542568, 0.6345128393376197, 0.6910556493503492, 0.3693857512571208, 0.3891339395966136, 0.5244466630423131, 0.7154481375221098, 0.503995750145333, 0.7059456219209654, 0.7696830595584466, 0.6284994772140962, 0.7467042441438718, 0.8473027317806626, 0.22985839244571593, 0.768270908357054, 0.39268266779018146, 0.13008137965800892, 0.1873965746695454, 0.1913482392100786, 0.20233120191039466, 0.20277655126987792, 0.2257700727946269, 0.29220892953724054, 0.22083780287666543, 0.1911264596207608, 0.4017423394820746, 0.16181526638798838, 0.14860899544971218, 0.15569795574323397, 0.18047509659044592, 0.2076705550747402, 0.19945565548577204, 0.17082273654807745, 0.000270615647056327, 0.023841136492884663, 0.12774539633112458, 0.0469457238414791, 0.11466390177539032, 0.08124606969826798, 0.025619270491266777, 0.04384880066338681, 0.06974263545105497, 0.20693459898973499, 0.10295137402409416, 0.19468716622391868, 0.1388256380343692, 0.06515990051124299, 0.14017464356544973, 0.18948582682790382, 0.3440960410089602, 0.32294593303755537, 0.09711284166528245, 0.18727221376748904, 0.2558352492505803, 0.07906054080704217, 0.07776744958405812, 0.08055339992259392, 0.10925857695198915, 0.1052809626624921, 0.13981563916139217, 0.22002149555130202, 0.2169802178911353, 0.20292963956254828, 0.30027873872627053, 0.29055475112827156, 0.2793404003403279, 0.17406166249009658, 0.12542150733420843, 0.1879212557365748, 0.6428893358307068, 0.5947594967846348, 0.6532704505843574, 0.6142347053029675, 0.6874266878176274, 0.6123272641332617, 0.5637007902945714, 0.562961677772637, 0.5739045795198165, 0.11391899474694767, 0.1243121519560535, 0.11316922654365047, 0.11697801385598272, 0.20593914371845612, 0.14627498156287422, 0.1420539730664463, 0.1174683506306412, 0.13918128045716094, 0.24534291123221297, 0.15839595903260562, 0.1524302124071737, 0.20173068633658464, 0.18187772286469472, 0.15056309943025536, 0.16164412440914422, 0.177623817187179, 0.1752152806624221, 0.510020418716334, 0.43884869890844125, 0.3502192853524252, 0.5098840863259648, 0.4519441800706009, 0.4644028315488321, 0.5034993724664585, 0.6197611409886135, 0.5483046543671303, 0.3132566291231329, 0.3596409399614561, 0.3010518374061909, 0.2222596966515349, 0.32513800342359944, 0.30646548419813935, 0.38001871163501255, 0.37009008034083757, 0.40275501513639334, 0.20789471327373865, 0.21578548804465558, 0.21930893572241683, 0.19252255068646673, 0.22527354277752376, 0.20059177464016142, 0.21168083010834216, 0.22855464816727222, 0.19564899305421124, 0.2479606429280118, 0.2356887813064562, 0.7126608446465538, 0.6589918856871068, 0.6628489094416541, 0.5632057348167325, 0.24178246443824813, 0.24653139570275961, 0.632201046970201, 0.8600976683178035, 0.18116127115641945, 0.20603835845421314, 0.8172302556213642, 0.1932943848930091, 0.16877940132747937, 0.1542112190451056, 0.16981034355997104, 0.696345411549156, 0.20624391868298175, 0.2871726290580199, 0.2034446503818924, 0.7023051784907192, 0.2079960445098683, 0.26900572961557345, 0.6743679919475696, 0.6152212534564955, 0.5521193880117853, 0.19139080547725207, 0.1832194112169362, 0.19436570112411622, 0.17710974152778103, 0.1882204214683486, 0.1856019707193134, 0.17587419401067728, 0.176796412498469, 0.18785491717750258, 0.08068741516060962, 0.08151628396108734, 0.08378608895278372, 0.0869826606370514, 0.08506902702922126, 0.08796895295342544, 0.08632800313264344, 0.0886158028614149, 0.0966918797548526]}, "mutation_prompt": null}
{"id": "2310c686-db36-4856-9bab-0b14ccdcddfa", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)  # Adjusted population size for better balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.4 + np.random.rand() * 0.6  # Slightly wider range for mutation factor\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly wider range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Adaptation of Population Size and Strategy Parameters for Faster Convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.8069932187240714, 0.8371948667662111, 0.8231735516780528, 0.8209119030637503, 0.8173843421410818, 0.8338276250472865, 0.8099788817011171, 0.8340259871900396, 0.8134170016075076, 0.4948008435252803, 0.5767705430428288, 0.4254266517118577, 0.468395428725089, 0.319383553176, 0.2772551026034935, 0.35698947665407743, 0.49738897643457247, 0.16111278757965342, 0.15615068435859558, 0.503708969793849, 0.1456913463158539, 0.14955914520861846, 0.3673145491559078, 0.15982546432727918, 0.13883765773047685, 0.5757548940151063, 0.1463380342395838, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6810068727022558, 0.05934394405914978, 0.7179997682272512, 0.7354814872274553, 0.716292243943319, 0.7132611563987608, 0.7111283780724406, 0.704904275544586, 0.7177589154434928, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.627554783036852, 0.27399698654661964, 0.5206995142850372, 0.5727854413856195, 0.6756973879512581, 0.6925079160443874, 0.4723521179676664, 0.5850633841043863, 0.6154828273566841, 0.5690845364602599, 0.12832991251384884, 0.6118946034540426, 0.5121362218209906, 0.5559754325552505, 0.5757465909070679, 0.6783811708343214, 0.5827115150760229, 0.5454862049012421, 0.5618172574275822, 0.6151486071614898, 0.6296700230952061, 0.6462336269443079, 0.6241583259430664, 0.38301420584250323, 0.6050469956053536, 0.6493838263434213, 0.6192330129107413, 0.7273623630897976, 0.6883200509096319, 0.6681981436775317, 0.6627508901468212, 0.6977155961004035, 0.29864170327591577, 0.7245155548987849, 0.7349831532658158, 0.72953907628799, 0.13356675514597804, 0.1321724269019131, 0.26965963867679943, 0.47723341874348213, 0.293537001735632, 0.3254512047273245, 0.3448463845190113, 0.37418798957666344, 0.17005093526303972, 0.4808874756404665, 0.5588362725018154, 0.43035545176505985, 0.5090317791282585, 0.5279271044541041, 0.5249340459427856, 0.5008530828524571, 0.49618664994556605, 0.48957601402191453, 0.8214457554992385, 0.8380561981189937, 0.7814220776854066, 0.8221519703459405, 0.8263550591088619, 0.8393017919097352, 0.8432022229348806, 0.8248131481285176, 0.8218044624143938, 0.12257250634623107, 0.13578192098798758, 0.09562600909104513, 0.10532749500524774, 0.0991437354268021, 0.1105988816501755, 0.11416732163926258, 0.10534428499982096, 0.1458890188955283, 0.1292960008969698, 0.2014320842174887, 0.17112222346757477, 0.19604190347202122, 0.14077551033381241, 0.14054291162998156, 0.2056426008564839, 0.14893288395922133, 0.23193357571422246, 0.560535494298988, 0.522385795530115, 0.5556934322924963, 0.6096552983974788, 0.5982098499380657, 0.5689362823105812, 0.6585072738570534, 0.6961020997739704, 0.6020058608745014, 0.4005571907593608, 0.47679012644093766, 0.3855663983616421, 0.43106572248179387, 0.48918781456604266, 0.3903430152609002, 0.4959898678114609, 0.45242839097866816, 0.4742405653489784, 0.19116773361569972, 0.19536872743490907, 0.19638968162627912, 0.21116323699309336, 0.20673914866223808, 0.19080002624338732, 0.18219146018485466, 0.22363877372787178, 0.20179100434757458, 0.21904046532518062, 0.23072523557730285, 0.44438233317345677, 0.6593772302675259, 0.6050809213346907, 0.5642090651552212, 0.21847771595106225, 0.23757529611313521, 0.47421247505317765, 0.1631596118970019, 0.1680336795145536, 0.16394198845556363, 0.8493877223455077, 0.8444076257982225, 0.8712688776418539, 0.8172917066652723, 0.1683430905561374, 0.19491639821000062, 0.16784789516957022, 0.16837823279418862, 0.8558058217754425, 0.16098637505556346, 0.8351031638532167, 0.20616676276273893, 0.20978397441718188, 0.20867522274069494, 0.11619572606582351, 0.1835995787777771, 0.19025025389598527, 0.17967687509252517, 0.1836003360633507, 0.17429144668925767, 0.1751093122229751, 0.19097637924898203, 0.1820322095791258, 0.18134204723399638, 0.0883550506324704, 0.07814260939356577, 0.08477674287786285, 0.08729605968454235, 0.08379149247862339, 0.08225706585958392, 0.07427014298962253, 0.07844732203967741, 0.08683774369467523]}, "mutation_prompt": null}
{"id": "cac004d0-84f5-492e-a58d-2bb82933c2e4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.diversity_threshold = 0.1 * (self.upper_bound - self.lower_bound)\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                F = 0.5 + np.random.rand() * 0.4  # Adjusted range for mutation factor\n                CR = 0.6 + np.random.rand() * 0.4  # Adjusted range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 5, replace=False)\n                base = self.population[indices[0]]\n                diff1 = self.population[indices[1]] - self.population[indices[2]]\n                diff2 = self.population[indices[3]] - self.population[indices[4]]\n                mutant = np.clip(base + F * (diff1 + diff2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n\n                # Diversity preservation mechanism\n                if np.std(self.population) < self.diversity_threshold:\n                    self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n                    self.fitness = np.full(self.population_size, np.inf)\n                    for j in range(self.population_size):\n                        self.fitness[j] = func(self.population[j])\n                        self.evaluations += 1\n                        if self.fitness[j] < best_fitness:\n                            best_fitness = self.fitness[j]\n                            best_solution = self.population[j]\n\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Diversity-Preserving Mechanism to Improve Global Exploration and Convergence.", "configspace": "", "generation": 49, "fitness": 0.3150226750522063, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.8056426005610159, 0.7731256801180093, 0.8076285098002466, 0.8404639416701548, 0.797179446029492, 0.8226018372012045, 0.8178162762165895, 0.8057384254533075, 0.8100999381361076, 0.6601013804118191, 0.6740391813876309, 0.6676970520329113, 0.6826005030211321, 0.6699787111689419, 0.7004372048772598, 0.6868635487115202, 0.7029711879228991, 0.6720589559387249, 0.11103663611955306, 0.11985931215582735, 0.11987445793426232, 0.11790395352878968, 0.12015491956585334, 0.11385461565810273, 0.11703447711568338, 0.12217815386025521, 0.11899709999379937, 0.09425707340708267, 0.07382830169971166, 0.09152850718888639, 0.117458461541732, 0.11792863925611019, 0.10262745329964107, 0.10831288062329802, 0.1067817369780587, 0.11271974893764858, 0.9696359969450654, 0.9722069136541946, 0.9903743810291963, 0.9758753951688085, 0.9689097817842511, 0.9657458703163052, 0.976202274236125, 0.974235077473456, 0.9902275819743965, 0.42626111529929067, 0.44146562564702396, 0.4590106899435278, 0.4155948770093767, 0.4627719865190999, 0.40741068415107384, 0.4870446485682669, 0.4921199244701103, 0.4069020738245315, 0.5762638569490035, 0.568845595774327, 0.6126115908308847, 0.6402145458361954, 0.7306282006434004, 0.6841912064135119, 0.6080273570404248, 0.7596020555320918, 0.6162398196502387, 0.24994743075328762, 0.25232996196168733, 0.2729886480281458, 0.2910291858096353, 0.3222811236942025, 0.25976501658083173, 0.35496963104102874, 0.3420138257886778, 0.3185658255854732, 0.18240779785387806, 0.2149460077346147, 0.11770548742796405, 0.0858110837790651, 0.04198783246550519, 0.07053443835622475, 0.07496495969475814, 0.06613279488565116, 0.05585015184303921, 0.1719981140624599, 0.15802510705756045, 0.15795399656114806, 0.16652839996533453, 0.20308769703400809, 0.20951232942096343, 0.2089367259374193, 0.17288077124318968, 0.1561779966522967, 0.3476490160428263, 0.3034171055561593, 0.27120316012756396, 0.2757197510709787, 0.3366569378758554, 0.34241492058057865, 0.3600644959810406, 0.34917310794258094, 0.3520827590895699, 0.03246759805692323, 0.04123242001004401, 0.04697083822216774, 0.07572185804658038, 0.08211731601111438, 0.07276114653614696, 0.05889943416772059, 0.03551201882214117, 0.043452276544827306, 0.19344596739134656, 0.20477479529285558, 0.21483047871326166, 0.20606635146464236, 0.22100290869462202, 0.21260813691849767, 0.1881700404209382, 0.19676838057716006, 0.21406290986205245, 0.5518872429258688, 0.5781080020961726, 0.6326169847481645, 0.6335482187534187, 0.6072107858102279, 0.5653602109256216, 0.5690558583838732, 0.6470296391962193, 0.5582110905889022, 0.11167416749529036, 0.09656383186893869, 0.09879173951313569, 0.0894488273796904, 0.08267268219582768, 0.08808896715302394, 0.07708358231184298, 0.08610518703537329, 0.10080418171754446, 0.17214784278072826, 0.1521470989481366, 0.15937942751723333, 0.17093488427528025, 0.17517693468067064, 0.1333388270453788, 0.14356931593431832, 0.1472529607584987, 0.16449645901337806, 0.31743450386949235, 0.3077306339809288, 0.3252265206773529, 0.3030485637334607, 0.32318310507336834, 0.3267517722103913, 0.37454639579493154, 0.3236454012521176, 0.32049726327659767, 0.2439345439122319, 0.26470834923381825, 0.23736722224059026, 0.2164771578271676, 0.22108051294671116, 0.21124373134568963, 0.2620618400155189, 0.25763156631074435, 0.25417329118247545, 0.19904324437413745, 0.18970611755317435, 0.17473540314958214, 0.1645569386916792, 0.18903731584278283, 0.19387892583434962, 0.16839581287226646, 0.19210857101098122, 0.18353696099726247, 0.17714858490332042, 0.17960134051317234, 0.19486667054636697, 0.17715542554482977, 0.1819607367097852, 0.19277795968626954, 0.1850174435294255, 0.17740375935245034, 0.19544259580510148, 0.23165489939121753, 0.5798034471612004, 0.24861801916188886, 0.7369218583055699, 0.6663426477912545, 0.181166305653494, 0.14588535755528242, 0.18242715066592474, 0.17828887316901532, 0.16196476234994917, 0.20010994169634033, 0.20293358218670987, 0.1216441747742365, 0.19807704809818238, 0.19108032789596752, 0.2079758798068767, 0.20633110801400445, 0.659668461544879, 0.18475643698652944, 0.204835044619613, 0.17470677094349574, 0.18088053682872152, 0.18178931529977327, 0.17576426963809333, 0.19265563468474378, 0.1807228144856886, 0.19817245465908062, 0.06905352131999609, 0.07217446863176558, 0.0661874421459403, 0.0806324315848691, 0.06592775012733931, 0.07480095103310214, 0.07363292428429946, 0.06923270222842426, 0.07767895625412513]}, "mutation_prompt": null}
{"id": "ca96b3fb-b939-432e-a870-1286cdd69316", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)  # Adjusted population size for better balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.4 + np.random.rand() * 0.6  # Slightly wider range for mutation factor\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly wider range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Adaptation of Population Size and Strategy Parameters for Faster Convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.8069932187240714, 0.8371948667662111, 0.8231735516780528, 0.8209119030637503, 0.8173843421410818, 0.8338276250472865, 0.8099788817011171, 0.8340259871900396, 0.8134170016075076, 0.4948008435252803, 0.5767705430428288, 0.4254266517118577, 0.468395428725089, 0.319383553176, 0.2772551026034935, 0.35698947665407743, 0.49738897643457247, 0.16111278757965342, 0.15615068435859558, 0.503708969793849, 0.1456913463158539, 0.14955914520861846, 0.3673145491559078, 0.15982546432727918, 0.13883765773047685, 0.5757548940151063, 0.1463380342395838, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6810068727022558, 0.05934394405914978, 0.7179997682272512, 0.7354814872274553, 0.716292243943319, 0.7132611563987608, 0.7111283780724406, 0.704904275544586, 0.7177589154434928, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.627554783036852, 0.27399698654661964, 0.5206995142850372, 0.5727854413856195, 0.6756973879512581, 0.6925079160443874, 0.4723521179676664, 0.5850633841043863, 0.6154828273566841, 0.5690845364602599, 0.12832991251384884, 0.6118946034540426, 0.5121362218209906, 0.5559754325552505, 0.5757465909070679, 0.6783811708343214, 0.5827115150760229, 0.5454862049012421, 0.5618172574275822, 0.6151486071614898, 0.6296700230952061, 0.6462336269443079, 0.6241583259430664, 0.38301420584250323, 0.6050469956053536, 0.6493838263434213, 0.6192330129107413, 0.7273623630897976, 0.6883200509096319, 0.6681981436775317, 0.6627508901468212, 0.6977155961004035, 0.29864170327591577, 0.7245155548987849, 0.7349831532658158, 0.72953907628799, 0.13356675514597804, 0.1321724269019131, 0.26965963867679943, 0.47723341874348213, 0.293537001735632, 0.3254512047273245, 0.3448463845190113, 0.37418798957666344, 0.17005093526303972, 0.4808874756404665, 0.5588362725018154, 0.43035545176505985, 0.5090317791282585, 0.5279271044541041, 0.5249340459427856, 0.5008530828524571, 0.49618664994556605, 0.48957601402191453, 0.8214457554992385, 0.8380561981189937, 0.7814220776854066, 0.8221519703459405, 0.8263550591088619, 0.8393017919097352, 0.8432022229348806, 0.8248131481285176, 0.8218044624143938, 0.12257250634623107, 0.13578192098798758, 0.09562600909104513, 0.10532749500524774, 0.0991437354268021, 0.1105988816501755, 0.11416732163926258, 0.10534428499982096, 0.1458890188955283, 0.1292960008969698, 0.2014320842174887, 0.17112222346757477, 0.19604190347202122, 0.14077551033381241, 0.14054291162998156, 0.2056426008564839, 0.14893288395922133, 0.23193357571422246, 0.560535494298988, 0.522385795530115, 0.5556934322924963, 0.6096552983974788, 0.5982098499380657, 0.5689362823105812, 0.6585072738570534, 0.6961020997739704, 0.6020058608745014, 0.4005571907593608, 0.47679012644093766, 0.3855663983616421, 0.43106572248179387, 0.48918781456604266, 0.3903430152609002, 0.4959898678114609, 0.45242839097866816, 0.4742405653489784, 0.19116773361569972, 0.19536872743490907, 0.19638968162627912, 0.21116323699309336, 0.20673914866223808, 0.19080002624338732, 0.18219146018485466, 0.22363877372787178, 0.20179100434757458, 0.21904046532518062, 0.23072523557730285, 0.44438233317345677, 0.6593772302675259, 0.6050809213346907, 0.5642090651552212, 0.21847771595106225, 0.23757529611313521, 0.47421247505317765, 0.1631596118970019, 0.1680336795145536, 0.16394198845556363, 0.8493877223455077, 0.8444076257982225, 0.8712688776418539, 0.8172917066652723, 0.1683430905561374, 0.19491639821000062, 0.16784789516957022, 0.16837823279418862, 0.8558058217754425, 0.16098637505556346, 0.8351031638532167, 0.20616676276273893, 0.20978397441718188, 0.20867522274069494, 0.11619572606582351, 0.1835995787777771, 0.19025025389598527, 0.17967687509252517, 0.1836003360633507, 0.17429144668925767, 0.1751093122229751, 0.19097637924898203, 0.1820322095791258, 0.18134204723399638, 0.0883550506324704, 0.07814260939356577, 0.08477674287786285, 0.08729605968454235, 0.08379149247862339, 0.08225706585958392, 0.07427014298962253, 0.07844732203967741, 0.08683774369467523]}, "mutation_prompt": null}
{"id": "eeb68b66-eec0-457c-98a5-83bd2a105f4d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)  # Adjusted population size for better balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Dynamic adaptation of mutation factor and crossover rate\n                F = 0.4 + np.random.rand() * 0.6  # Slightly wider range for mutation factor\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly wider range for crossover rate\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True  # Ensure at least one crossover point\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Adaptation of Population Size and Strategy Parameters for Faster Convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.8069932187240714, 0.8371948667662111, 0.8231735516780528, 0.8209119030637503, 0.8173843421410818, 0.8338276250472865, 0.8099788817011171, 0.8340259871900396, 0.8134170016075076, 0.4948008435252803, 0.5767705430428288, 0.4254266517118577, 0.468395428725089, 0.319383553176, 0.2772551026034935, 0.35698947665407743, 0.49738897643457247, 0.16111278757965342, 0.15615068435859558, 0.503708969793849, 0.1456913463158539, 0.14955914520861846, 0.3673145491559078, 0.15982546432727918, 0.13883765773047685, 0.5757548940151063, 0.1463380342395838, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6810068727022558, 0.05934394405914978, 0.7179997682272512, 0.7354814872274553, 0.716292243943319, 0.7132611563987608, 0.7111283780724406, 0.704904275544586, 0.7177589154434928, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.627554783036852, 0.27399698654661964, 0.5206995142850372, 0.5727854413856195, 0.6756973879512581, 0.6925079160443874, 0.4723521179676664, 0.5850633841043863, 0.6154828273566841, 0.5690845364602599, 0.12832991251384884, 0.6118946034540426, 0.5121362218209906, 0.5559754325552505, 0.5757465909070679, 0.6783811708343214, 0.5827115150760229, 0.5454862049012421, 0.5618172574275822, 0.6151486071614898, 0.6296700230952061, 0.6462336269443079, 0.6241583259430664, 0.38301420584250323, 0.6050469956053536, 0.6493838263434213, 0.6192330129107413, 0.7273623630897976, 0.6883200509096319, 0.6681981436775317, 0.6627508901468212, 0.6977155961004035, 0.29864170327591577, 0.7245155548987849, 0.7349831532658158, 0.72953907628799, 0.13356675514597804, 0.1321724269019131, 0.26965963867679943, 0.47723341874348213, 0.293537001735632, 0.3254512047273245, 0.3448463845190113, 0.37418798957666344, 0.17005093526303972, 0.4808874756404665, 0.5588362725018154, 0.43035545176505985, 0.5090317791282585, 0.5279271044541041, 0.5249340459427856, 0.5008530828524571, 0.49618664994556605, 0.48957601402191453, 0.8214457554992385, 0.8380561981189937, 0.7814220776854066, 0.8221519703459405, 0.8263550591088619, 0.8393017919097352, 0.8432022229348806, 0.8248131481285176, 0.8218044624143938, 0.12257250634623107, 0.13578192098798758, 0.09562600909104513, 0.10532749500524774, 0.0991437354268021, 0.1105988816501755, 0.11416732163926258, 0.10534428499982096, 0.1458890188955283, 0.1292960008969698, 0.2014320842174887, 0.17112222346757477, 0.19604190347202122, 0.14077551033381241, 0.14054291162998156, 0.2056426008564839, 0.14893288395922133, 0.23193357571422246, 0.560535494298988, 0.522385795530115, 0.5556934322924963, 0.6096552983974788, 0.5982098499380657, 0.5689362823105812, 0.6585072738570534, 0.6961020997739704, 0.6020058608745014, 0.4005571907593608, 0.47679012644093766, 0.3855663983616421, 0.43106572248179387, 0.48918781456604266, 0.3903430152609002, 0.4959898678114609, 0.45242839097866816, 0.4742405653489784, 0.19116773361569972, 0.19536872743490907, 0.19638968162627912, 0.21116323699309336, 0.20673914866223808, 0.19080002624338732, 0.18219146018485466, 0.22363877372787178, 0.20179100434757458, 0.21904046532518062, 0.23072523557730285, 0.44438233317345677, 0.6593772302675259, 0.6050809213346907, 0.5642090651552212, 0.21847771595106225, 0.23757529611313521, 0.47421247505317765, 0.1631596118970019, 0.1680336795145536, 0.16394198845556363, 0.8493877223455077, 0.8444076257982225, 0.8712688776418539, 0.8172917066652723, 0.1683430905561374, 0.19491639821000062, 0.16784789516957022, 0.16837823279418862, 0.8558058217754425, 0.16098637505556346, 0.8351031638532167, 0.20616676276273893, 0.20978397441718188, 0.20867522274069494, 0.11619572606582351, 0.1835995787777771, 0.19025025389598527, 0.17967687509252517, 0.1836003360633507, 0.17429144668925767, 0.1751093122229751, 0.19097637924898203, 0.1820322095791258, 0.18134204723399638, 0.0883550506324704, 0.07814260939356577, 0.08477674287786285, 0.08729605968454235, 0.08379149247862339, 0.08225706585958392, 0.07427014298962253, 0.07844732203967741, 0.08683774369467523]}, "mutation_prompt": null}
{"id": "5ad3570c-6813-44bd-bac3-8915e99dfb1a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, self.dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        stagnation_counter = 0\n\n        # Initial fitness evaluation\n        for i in range(self.initial_population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population.shape[0]):\n                if stagnation_counter > 10:  # Adjust population size based on stagnation\n                    self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, self.dim))\n                    stagnation_counter = 0\n                    # Update fitness for the new population\n                    for j in range(self.population.shape[0]):\n                        self.fitness[j] = func(self.population[j])\n                        self.evaluations += 1\n                        if self.fitness[j] < best_fitness:\n                            best_fitness = self.fitness[j]\n                            best_solution = self.population[j]\n                    if self.evaluations >= self.budget:\n                        break\n\n                # Dynamic mutation factor for exploration-exploitation balance\n                F = 0.5 + np.random.rand() * 0.5\n                CR = 0.6 + np.random.rand() * 0.4\n\n                # Mutation\n                indices = np.random.choice([x for x in range(self.population.shape[0]) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                        stagnation_counter = 0\n                else:\n                    stagnation_counter += 1\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Population and Exploration-Exploitation Balance for Improved Convergence.", "configspace": "", "generation": 52, "fitness": 0.0963361710622953, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.17943775146025331, 0.18295179707382037, 0.1798777561677316, 0.20148942899270283, 0.1619204795859569, 0.16775516343562846, 0.16735652396255118, 0.16290412075667393, 0.1997017870142911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050421868082379806, 0.03725161166104085, 0.041416723916269826, 0.04037125654702611, 0.03748924826757871, 0.04653880902648311, 0.051429030117324914, 0.04427121733805395, 0.03584672079762008, 0.029165444625021464, 0.029254435630239994, 0.03225368384452054, 0.026160055108756963, 0.03394171863930728, 0.0332368358931302, 0.021769532496308197, 0.03253333998627472, 0.02848273571178872, 0.12620520125559198, 0.21601189963405343, 0.1922481969737425, 0.17575595022558477, 0.6322045135350274, 0.1447021055937988, 0.1522260747952079, 0.40834740778556966, 0.1464298040090969, 0.11248566527952553, 0.08830756489665381, 0.0590114755024278, 0.07833495159881076, 0.06541238223350243, 0.0674685172531263, 0.06367327883976537, 0.07364379264482235, 0.0884383150327458, 0.1287796640654466, 0.14466681089033973, 0.10581882499946749, 0.10499866307972339, 0.12346632941786351, 0.11894225085251087, 0.11195885004981188, 0.13827508976822211, 0.12705534673254681, 0.052838232158810894, 0.005084474211051182, 0.004994943949077069, 0.008273608868058724, 0.028335657543470782, 0.0023093718472635416, 9.999999999998899e-05, 0.022595893789219224, 0.00040867797916288584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007462158454728862, 0.005948291180851495, 0.004316230845425206, 9.999999999998899e-05, 0.018151179511443294, 0.02394667402548889, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07008228726520993, 0.0499930101006707, 0.06659043760724614, 0.052123915758175654, 0.04383399939636312, 0.05278707028517726, 0.031911314279963854, 0.05321059724605148, 0.042057968442057114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032197986457190853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1909577818285184, 0.21280760223732198, 0.18062110927942032, 0.22158726206752744, 0.1899316685819853, 0.21370646074428845, 0.22795355768781123, 0.2009762681133107, 0.19220694691046203, 0.04435332910677703, 0.04755954927892381, 0.043070814327100915, 0.04774060038274497, 0.0457440571382125, 0.04502874141686919, 0.03984568959539192, 0.04098759081850645, 0.037935384633561275, 0.12869301935600197, 0.15591781192436338, 0.1538924985155834, 0.12280773054784533, 0.1303885252717809, 0.1418296016530165, 0.15597420749885083, 0.1465249058822543, 0.13247376556389967, 0.14785109740124047, 0.16585442137035766, 0.17768178652814237, 0.18890306198311224, 0.16032262337796732, 0.16922741464703284, 0.16068243859448716, 0.1757259475545414, 0.16793272601336195, 0.11003166980267365, 0.10836678870540994, 0.12072684182876436, 0.10986305135590502, 0.1171750699565347, 0.10459931973498204, 0.15031688973898705, 0.14327023020788943, 0.1315396250971126, 0.14337051358898045, 0.16557395287709642, 0.153598946081274, 0.1451237567102278, 0.15280408933137968, 0.16610511178990128, 0.15402498433320466, 0.14518012498453714, 0.14413387003587208, 0.13631909086870342, 0.1528911612835704, 0.14121976278741843, 0.1494828404071874, 0.14909427988244572, 0.14124930967354443, 0.14022327580239557, 0.1414859639352366, 0.14656137301617822, 0.14774552028038146, 0.18303867969894605, 0.13420124089595797, 0.17366739937901654, 0.15902760609829003, 0.15982810896529265, 0.16423893325693206, 0.22154089194145343, 0.1484954575593056, 0.19335997466709798, 0.16568451683068075, 0.16080503067116647, 0.12459285096211004, 0.18704266504984812, 0.12845459489599365, 0.1246983439617757, 0.1210579159209354, 0.24212668943576487, 0.17795471511641903, 0.1927069479644583, 0.18067050860917966, 0.17495234998591236, 0.21692815544691857, 0.18391989803667652, 0.2076318482818892, 0.1801557141318081, 0.18230126219993414, 0.04646724140323455, 0.04576858504067294, 0.06504664600796017, 0.05548830922875603, 0.05929115007271213, 0.05536719086384634, 0.051657216925605876, 0.05077710031848326, 0.06731800122597764]}, "mutation_prompt": null}
{"id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 53, "fitness": 0.49706707760157304, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.28.", "error": "", "parent_id": "301f0843-03b5-4964-b6f3-59cd1d308d66", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "874b5a88-4275-40d2-a44b-8a3a954f4eda", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "0c1ea82d-53da-4b0a-b20a-eb0d27e8aaeb", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "f547dd9b-e12f-4843-a255-edc365f4b25c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "ba7f8c25-d881-4612-9798-6af87c705eca", "solution": "# Description: Enhanced Adaptive Differential Evolution with Dynamic Population Control and Adaptive Parameter Tuning for Faster Convergence.\n# Code: \nimport numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.92  # Increased shrinkage for faster convergence\n        self.adaptive_cr = 0.5  # Adaptive crossover rate starting point\n        self.adaptive_f = 0.6   # Adaptive scaling factor starting point\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                # Adaptive parameter tuning\n                F = self.adaptive_f + np.random.rand() * 0.2\n                CR = self.adaptive_cr + np.random.rand() * 0.2\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                    # Adjust adaptive parameters based on improvements\n                    self.adaptive_f = 0.9 * self.adaptive_f + 0.1 * F\n                    self.adaptive_cr = 0.9 * self.adaptive_cr + 0.1 * CR\n\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Population Control and Adaptive Parameter Tuning for Faster Convergence.", "configspace": "", "generation": 57, "fitness": 0.1429016414100961, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.18.", "error": "", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.3436216286637921, 0.1702733978888018, 0.24253645151671877, 0.25494808569127503, 0.26599449524542174, 0.3051209038058941, 0.2535222593023395, 0.22755924458383114, 0.22320454431277525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024000098322282226, 9.999999999998899e-05, 0.002707998482613716, 0.003117000019716931, 0.0013641879844024096, 0.06614803015171855, 0.06731352742512264, 0.05090654484856527, 0.05645835661300502, 0.08359316899242475, 0.07424619460346826, 0.06212854335734863, 0.05825464040085171, 0.07277052347878854, 0.038093453946391076, 0.06948732061625074, 0.06198384641674515, 0.06598147545194044, 0.06698365268746476, 0.053807485814547196, 0.04717888766670508, 0.04805976486687047, 0.06158158560010507, 0.9929872140818876, 0.9544560988696351, 0.9675170626654064, 0.9786972466903716, 0.9807720178745503, 0.9690173122734913, 0.9803447510233867, 0.09878692623438656, 0.9670779298869046, 0.10173260046136623, 0.11243744246310994, 0.09428370286804988, 0.09893589660834623, 0.10535260052227513, 0.1279822924757944, 0.1047348998992007, 0.1452269539335177, 0.13026801676600486, 0.18179347723919959, 0.2038008923657011, 0.16579369562784263, 0.1795831755604429, 0.19977940217212486, 0.18209411559903477, 0.20946542520444633, 0.12773356438385786, 0.1582219242997147, 0.06373071157230226, 0.0453118355732377, 0.05167107493920686, 0.05062070748616321, 0.04499466640681671, 0.13594400686137054, 0.02871979375778211, 0.029460344488402512, 0.011950155655989891, 0.009885866311259317, 0.02243270838486444, 0.009774444999063214, 0.009818698852031793, 0.046719642646436244, 0.08939986971656066, 0.09593554425254369, 0.03926545788034086, 0.09100671018316464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047611457953038006, 9.999999999998899e-05, 0.0006388816911445661, 0.08381914052085959, 0.10798993862973871, 0.03974109050486074, 0.05044053000320803, 0.07482159870783545, 0.10393703435144275, 0.07205267933894788, 0.09317198091408352, 0.17148946086279937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04074780254320953, 0.004821359829021321, 0.011899575159263986, 0.040290649312856974, 0.0357544884296489, 0.016309547125375468, 0.029578624851424706, 9.999999999998899e-05, 0.03436820605929514, 0.21278207774356783, 0.2900166968575292, 0.28773031708905805, 0.22439206168858783, 0.2098645163173225, 0.24330239146898525, 0.234356694213117, 0.2528300559445795, 0.21251187436641317, 0.05730405736383781, 0.06968230825061894, 0.05751516573143112, 0.06795807898505879, 0.05513225787274567, 0.046321279787373215, 0.0644245817981478, 0.053585662909389264, 0.05966150102869938, 0.13199519197531862, 0.1418872425887343, 0.1302046932440356, 0.17367353106147532, 0.11105520184561479, 0.11894309582663298, 0.1075239319878154, 0.16855848251733985, 0.11137702056437193, 0.17222306031083845, 0.19515251107127285, 0.21407547567847585, 0.18555957366388443, 0.18508175229073764, 0.17608163156191092, 0.2082716614436, 0.21339718566487365, 0.23538012788342844, 0.14683712083412026, 0.13844943641422502, 0.13163115588430863, 0.1436120632056641, 0.1307990955316476, 0.1635465499507327, 0.11573806752675286, 0.12551562138647765, 0.14529307293840066, 0.19617818016583255, 0.1453317072018433, 0.17426433513149564, 0.2033864065966613, 0.15371698855019644, 0.162329327677612, 0.1590570222015647, 0.16266112624616058, 0.18977095935615862, 0.1302073405197408, 0.1565801940250725, 0.16610129291673148, 0.18057925021100307, 0.15982452497341915, 0.16267631159800988, 0.16425228112706192, 0.17321759168323192, 0.15839110438450643, 0.1589292850742402, 0.23730269172085539, 0.1641019412743353, 0.16020849705615747, 0.17449886829213268, 0.17318432296380748, 0.12459480486396957, 0.1265750558709724, 0.17658213623306895, 0.16280907967767166, 0.15950140529588885, 0.14922084879159214, 0.15688904026975925, 0.19737077754259325, 0.19429709801869555, 0.13054128349808158, 0.11690256599034432, 0.1449816252482664, 0.15775922877397008, 0.18272403586219899, 0.16688216462139693, 0.1918453132011506, 0.20821351851474978, 0.165865461777424, 0.17442689179130633, 0.1630412067063649, 0.20343322485779514, 0.0621222560720871, 0.053906720691122234, 0.05854870899709963, 0.06210742959213167, 0.06333442820840396, 0.055550539065027826, 0.062300901896107486, 0.04790761631290519, 0.07838226755781075]}, "mutation_prompt": null}
{"id": "08c9fb99-88f5-4a1a-8d25-f7df421cc003", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "4ff2eae5-4c9e-499d-9fd9-ed8b4e0fab8c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "1c138704-6086-412f-85ac-492ebccb0bea", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "fe445f05-2297-4c5d-838a-c8c3e04ed60e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "68f0e41d-af01-4cd3-8b67-933662a5f7ea", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "e17d866f-ed39-423c-9b58-aca05cb07242", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "e9cfe49d-7c3a-49ff-a2eb-4f7ec8bb78d0", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "ecfa701f-0dae-49d0-9961-54292195571b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "31302157-ae7e-4027-87aa-94b23eca785a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "5d820ad9-c2d8-4baa-b8e7-189c2da70a5d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "b88978ba-dcb6-4628-90c3-e5f2e8722b48", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Adaptive mutation rate influenced by budget usage\n            F = 0.5 + (0.5 * (self.budget - self.evaluations) / self.budget)\n            CR = 0.8 + (0.2 * (self.evaluations / self.budget))\n\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with Adaptive Mutation and Crossover for Improved Convergence.", "configspace": "", "generation": 68, "fitness": 0.41363304276740404, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.8081169823409001, 0.8036292091415526, 0.8053071048870256, 0.8330571034794145, 0.8197193707379928, 0.8319309203245019, 0.8441286375374686, 0.8209021247539852, 0.8204774441515054, 0.7232335449336005, 0.7229796371195722, 0.7088542860915904, 0.6962740146508324, 0.7043664947698921, 0.7038545497862013, 0.01841739709909218, 0.7205534884689977, 0.710147076906844, 0.5121007993134354, 0.1539782202544291, 0.14960176034266137, 0.155354310005266, 0.12062775563842043, 0.16649153370647074, 0.4592591922236685, 0.14224915636223445, 0.12832204718691032, 0.1378578023180027, 0.13441942065085077, 0.3304048433611093, 0.42901727078714524, 0.46657779022877954, 0.263282885417223, 0.13787919267501025, 0.1462694315893588, 0.1230356221329455, 0.9803680978891953, 0.9560930411917431, 0.966071029511011, 0.9871025497593947, 0.9772670473374878, 0.983531933818662, 0.979626178994321, 0.9779578714709847, 0.9755964571004667, 0.6216057729376383, 0.5891504343514024, 0.5669126495478047, 0.5932235178588672, 0.5915028390069381, 0.6064670875073088, 0.6122689792293444, 0.6160459222014845, 0.5959701072179369, 0.693178070133837, 0.6539340595506673, 0.6686779185045297, 0.7153002450488053, 0.7171698124445349, 0.6907800592590855, 0.6969027650733696, 0.6875027448493418, 0.6939259030709393, 0.5474892972277534, 0.5545714738258656, 0.5371963124918295, 0.4358193155646425, 0.5308300085836266, 0.5645852986450719, 0.5152730259984535, 0.531917562459171, 0.5364708217237915, 0.5150046016866618, 0.12143046675345537, 0.016597879369100177, 0.5017991037204012, 0.5532028540096565, 0.49511038668201257, 0.45013606014895646, 0.5138259243671071, 0.4814304259335578, 0.46233043282302033, 0.4743948499087063, 0.40980568317335186, 0.46074364955509106, 0.4011644773978007, 0.4592097793941118, 0.5189306754408468, 0.331341509857353, 0.37679446782027093, 0.510386016862, 0.5402556767228086, 0.33144376644319573, 0.5653600381146691, 0.558840810846209, 0.5422726084266869, 0.5220140752672056, 0.5594933159227069, 0.5912204657990225, 0.08602039584438226, 0.13139519625288, 0.10554358873727965, 0.3792920166220535, 0.3320934640428682, 0.26088129532457593, 0.11404879471335094, 0.2181300139831449, 0.06422788394779311, 0.3797382883714716, 0.34876880336927774, 0.3179278917799653, 0.4312075645862983, 9.999999999998899e-05, 0.38887606411521347, 0.32095891859542025, 0.37365671791136756, 0.4417688928031185, 0.7255009044393507, 0.7090277899242601, 0.7284332029071117, 0.7385128532858729, 0.7163680227265283, 0.7176187106138983, 0.7085234322713202, 0.710264210391764, 0.7204467743961491, 0.09476050098325683, 0.11238522110229265, 0.11679096412793499, 0.10439516987978803, 0.09107378683089207, 0.11750174190712714, 0.09240467490419346, 0.10248954986009062, 0.13560409539980012, 0.15811524690547063, 0.19331813253196717, 0.11726500197366185, 0.15099896279972036, 0.546296314535363, 0.15906875775378193, 0.1652104017745487, 0.2164932593546146, 0.15136982398839227, 0.4572263716021029, 0.4218182471963664, 0.3986586895237384, 0.4343672873375236, 0.4580825947049949, 0.44621484473646233, 0.4997585050758998, 0.5328374585792395, 0.49000129764997724, 0.36720991973475936, 0.3637889656510068, 0.31931606270595625, 0.2779539957506577, 0.33327921009678707, 0.30312879317555785, 0.303676828800191, 0.412238613980381, 0.39130784922432704, 0.1930895134597166, 0.1888209692231302, 0.19036772493726595, 0.16769339566021468, 0.1912438545198235, 0.18462952598834004, 0.17915662809515975, 0.17702499234909397, 0.21894079396621557, 0.5560985755075153, 0.22755899791266543, 0.2140794087434389, 0.392482782113999, 0.4953725192535625, 0.20034737701443917, 0.3888048304116567, 0.18038797796253325, 0.20037672617113056, 0.16655215586532335, 0.16468810603185724, 0.15291825461476005, 0.7900800706684451, 0.6805620360879825, 0.7520673047490628, 0.19784675653800754, 0.19022923399701508, 0.1622149790333488, 0.7271097034995425, 0.20499064137027367, 0.1671430164503257, 0.19867796891674627, 0.7041369901120953, 0.12307267560138335, 0.7760468365985415, 0.16634774305022815, 0.2036221777506091, 0.19919511260575973, 0.16510098599306444, 0.18997182345352426, 0.18216522750072095, 0.1758847757107007, 0.17671859108427102, 0.19393426584771722, 0.20467910068861261, 0.18791229441714996, 0.07870500525635415, 0.07343232848183057, 0.08061890982172149, 0.08549215976138169, 0.07765536394251193, 0.07946248406664125, 0.0958108825101135, 0.07435099754752805, 0.07762021554052667]}, "mutation_prompt": null}
{"id": "3e84bb90-5a84-4600-8509-4cd065f8eef3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "3ef0c54f-50a5-4941-9254-91ab8c5f8c8b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "eaee4ade-1867-4094-84ed-a239ae27e93a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95\n        self.f = 0.5  # Base mutation factor\n        self.cr = 0.9  # Base crossover rate\n        self.adaptive_f = 0.1  # Adaptive factor for dynamic F and CR\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = self.f + self.adaptive_f * (np.random.rand() - 0.5)\n                CR = self.cr + self.adaptive_f * (np.random.rand() - 0.5)\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n\n            # Introduce diversity by reinitializing some individuals\n            if self.evaluations > self.budget // 2 and np.random.rand() < 0.1:\n                reinit_indices = np.random.choice(self.population_size, size=max(1, self.population_size // 10), replace=False)\n                self.population[reinit_indices] = np.random.uniform(self.lower_bound, self.upper_bound, (len(reinit_indices), self.dim))\n                for idx in reinit_indices:\n                    self.fitness[idx] = func(self.population[idx])\n                    self.evaluations += 1\n                    if self.fitness[idx] < best_fitness:\n                        best_fitness = self.fitness[idx]\n                        best_solution = self.population[idx]\n                    if self.evaluations >= self.budget:\n                        break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Adaptive Control Parameters and Population Diversification for Improved Convergence Speed.", "configspace": "", "generation": 71, "fitness": 0.3567306373802079, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9272446019201875, 0.8902387810879611, 0.9186888577437619, 0.68151076957973, 0.9261348567576759, 0.9268068935475647, 0.9300926069330515, 0.9322543243816558, 0.917134002673805, 0.8749271431285371, 0.8622346924167774, 0.8609118693998451, 0.1980732222806869, 0.8727665639956863, 0.8877331667659047, 0.124733352171429, 0.864247820643596, 0.8747655573572408, 0.1692470324715829, 0.7593186107714796, 0.25270448273748747, 0.5905575332781133, 0.2147917467478031, 0.16023789268906052, 0.1488264750892455, 0.1632289786195854, 0.18098000163862893, 0.13879468073346302, 0.16844613814069276, 0.13925348991045083, 0.11705849045265482, 0.11618414434648783, 0.1357740386697811, 0.14487186519985185, 0.1321907391955952, 0.11485875154017444, 0.9384581917393935, 0.9732760208156777, 0.9436512902696064, 0.9282323032299244, 0.9176321167352519, 0.9124752533429413, 0.864013748669999, 0.9110877280168586, 0.9178887029761831, 0.31414041197422216, 0.1346592537112743, 0.3054652134400436, 0.22683228247259435, 0.33146669215126545, 0.5743586594315924, 0.29265023729962436, 0.16748500404682398, 0.11923210220751101, 0.8957303820413515, 0.9194699062896475, 0.9351671316547324, 0.37643977153273167, 0.27661938072414294, 0.21396853679257888, 0.15265317070679452, 0.9283629565414468, 0.9153096606836278, 0.2058669135532457, 0.13593329579332236, 0.21926517404106605, 0.1350025877380393, 0.195026777183404, 0.33667518580420097, 0.1468453537143054, 0.16113623942642985, 0.1848844080704818, 0.1965304103790605, 0.01658430233070174, 0.13313382585381206, 0.1847133578370187, 0.1568281987834369, 0.1531432244395322, 0.25950791555022534, 0.3309551774970839, 0.16424106190482102, 0.21204405830409, 0.0042812080677744335, 0.1283555659420712, 0.16852502822838977, 9.999999999998899e-05, 0.04837342165463265, 0.06852811737940934, 0.07438479877308568, 0.08553798711829697, 0.13163281678446603, 0.38760785850386414, 0.08156153149518464, 0.09606944134190487, 0.27662401781383106, 0.12290669464841886, 0.24801503885021103, 0.21363260864250588, 0.16171749676087444, 0.08302881076534452, 0.1482267835746106, 0.07820557036233933, 0.08733519426595249, 0.3709882957286079, 0.10295890318862799, 0.1118794700822131, 0.2048683306643574, 0.17186644986693678, 0.29679880079351884, 0.39966753950682354, 0.11886520735943118, 0.4952480857538596, 0.3733008437266283, 0.22285395150459208, 0.3755184650067709, 0.11150473010312711, 0.3038511409572777, 0.6578098195790003, 0.9049816255879872, 0.6237137039517906, 0.6325788977653151, 0.5353811927788535, 0.5671783034879531, 0.44210706255908416, 0.5695086465364714, 0.5949537969292897, 0.12943447429236854, 0.11743440226872426, 0.22546764280607523, 0.17709833710345246, 0.1552385686337877, 0.11391774283927547, 0.13676315493039404, 0.1131362393084091, 0.12044153563791116, 0.1690922729885982, 0.16418500410943104, 0.1895864705877467, 0.17497849842801638, 0.2462742252935367, 0.17763229135724012, 0.19867371992742122, 0.17317765750406866, 0.7126045491912123, 0.8151104327370395, 0.7718388885380485, 0.6250998508693322, 0.7730650721026138, 0.7488339570239619, 0.7627633533002506, 0.5480586094513419, 0.8106141104640244, 0.43467909617944167, 0.3067227425619662, 0.3054978370728, 0.20319063294222517, 0.334384313578063, 0.235677852369661, 0.5704035459967259, 0.699201641535766, 0.32149726773715726, 0.5553933527483985, 0.23473602839965269, 0.22010803891437924, 0.20258245240940342, 0.1933576238625827, 0.2052362000028607, 0.22918602598546323, 0.26872446047136556, 0.21603006828221272, 0.22426876268904195, 0.7740553589195236, 0.21573642924027558, 0.25120187214041867, 0.22170706242700944, 0.31272908536343114, 0.21990647077985948, 0.23721149914482054, 0.7515143944125117, 0.2189238280577268, 0.1533054243745713, 0.1862785597729104, 0.12189365161189247, 0.1986539885623858, 0.19883864557013242, 0.9086888979467388, 0.8777465069943267, 0.15486284766052927, 0.1624330039844959, 0.45783146686065435, 0.21177870134625532, 0.6506317314738187, 0.21115102693245202, 0.20999884927293366, 0.6833719783972503, 0.16556093623602974, 0.208569514570499, 0.12748796372327398, 0.1802832036297839, 0.20078465480528063, 0.18070279023421332, 0.18944834490854523, 0.20999234319120041, 0.17995956527552426, 0.1745226334615303, 0.22180743365257316, 0.1902033546529206, 0.10002355561814402, 0.08144435878778022, 0.08977083990181267, 0.08990835048422718, 0.08835284797351595, 0.08072436971223051, 0.09567454820649401, 0.08502924714083204, 0.09581552416706673]}, "mutation_prompt": null}
{"id": "2e79ffb2-709c-4c5e-b915-1e62f2aeb043", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "7f75883b-f8dc-47c3-a867-80d84af26aec", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "56a1e50a-8922-473a-88c7-bd16a197b472", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "2304fe59-c6ee-4357-85f6-4f6bd9c34b22", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "bbbf78ed-a75d-4635-909a-b6bcdfb7dce1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "a002bc48-c556-4ac1-bd52-5c07eef8e32a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "af6935d4-c512-4f88-898d-f489837c4e04", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "ede2989e-731a-4ee5-a628-ef3f8f8c16be", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "42858e5c-4f61-4a8f-8a51-e9bfba4ae1c0", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "e68f50c6-cae4-42f9-a273-554dceedcb42", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "552acb9a-f7c6-4c9a-8d0f-be2cd8ec3e8d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "f4381983-a348-4f73-af82-f4a1cfebbfd7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "5b682b4c-73f8-4160-9c55-6e26e9225bb9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "776d4cbc-af40-40fe-8ec8-be2d90d361df", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "0e5db09b-ec07-4e22-a6f5-603670101750", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "6d0e83a5-0aa8-4922-b8df-7b540a4e2114", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "3847b25e-5047-4ce9-8ae7-6c7e99a74224", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "8c5a7f28-525f-43b2-96b3-79c0f880b0ab", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.9  # Adjust dynamic shrinkage rate\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.5 + np.random.normal(0, 0.1)  # Adjust mutation factor dynamically\n                F = np.clip(F, 0.3, 0.9)  # Ensure F stays within bounds\n                CR = 0.8 + np.random.normal(0, 0.05)  # Adjust crossover rate dynamically\n                CR = np.clip(CR, 0.5, 1.0)  # Ensure CR stays within bounds\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Adaptive Mutation and Crossover Rates for Improved Convergence.", "configspace": "", "generation": 89, "fitness": 0.39770543213610443, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9328054006757874, 0.9211009011459531, 0.9285245632627019, 0.9304982846726501, 0.9231158490098194, 0.9313668054670315, 0.9283394449060417, 0.9192349788293912, 0.9054120355551027, 0.8641975676937159, 0.8778024795473204, 0.8483601597418932, 0.8609996120168352, 0.8569299606122277, 0.8699619110697029, 0.8810790437925025, 0.8737189444593574, 0.14339670516035863, 0.15668907418843014, 0.7277278950149694, 0.7142868954403667, 0.18376979214657585, 0.6079414349836157, 0.17094470999765077, 0.6710972014408582, 0.6665338607507663, 0.7310814814000783, 0.14879283947655764, 0.6479933041171593, 0.18047484827746507, 0.13239344462912683, 0.14911682164236828, 0.16750639567635628, 0.15310589646234185, 0.11476476235569755, 0.17073380353369516, 0.967184406257226, 0.9776304078134375, 0.957584056739083, 0.9466890482907412, 0.9524835020928385, 0.9585573905821194, 0.9799105018366725, 0.9586617637939326, 0.9514021629211611, 0.32119872852625864, 0.45869436433546773, 0.602449322989328, 0.4991265962100683, 0.5973583531078814, 0.43380419999108955, 0.3973027469819238, 0.144157559776664, 0.23858037705848556, 0.8884270983170576, 0.8765659898890716, 0.23288802438002298, 0.8972987419804708, 0.9131985418212836, 0.37976154274727547, 0.8781024651910276, 0.9025101969953729, 0.8436334216833075, 0.1308714889643765, 0.1730544308440325, 0.1890127853605028, 0.16388561451296169, 0.13273190540830715, 0.1787250363384173, 0.1339873119020123, 0.1765267742692357, 0.17357009989289907, 0.1925711745733636, 0.24390072007999775, 0.13370136527955034, 0.1728726183507442, 0.15254018030016592, 0.14542690711231865, 0.22675183630845563, 0.19551022694792997, 0.17078478888138293, 0.11760338048182095, 0.09519538208127976, 0.11038967069074279, 0.12151850951603049, 0.1708567837524977, 0.21045109961214148, 0.02273166495729506, 0.11452385087985384, 0.38605121309806345, 0.36451534323040413, 0.14553821033059644, 0.20386909651886853, 0.1256842260441544, 0.23578796287437354, 0.17475280818063588, 0.4931046250181911, 0.5081320133478693, 0.2215353520194675, 0.10084353841996652, 0.1683458982359085, 0.07835376634173696, 0.09162560782682361, 0.14087374493525862, 0.41815748169300204, 0.22734693491734348, 0.20234025692522972, 0.27068844588925234, 0.3386695847812885, 0.36388730683918336, 0.4288920411812397, 0.31241278937634775, 0.31496483326580793, 0.2622756801279529, 0.3958774427947107, 0.3340192174823564, 0.13018560508010635, 0.6706074189853586, 0.7350001497766182, 0.6149865516650235, 0.6720859831542348, 0.6562848833895629, 0.716827361722953, 0.7660035741010275, 0.6075122418744985, 0.6841939787593831, 0.11781885234488532, 0.14225138016942018, 0.1315199306308683, 0.15067475254087825, 0.1302306494222858, 0.1403682888495681, 0.12726823647981966, 0.15992368497228804, 0.10709714578296703, 0.19665063486033474, 0.21085827459197704, 0.16221140597187056, 0.25139907389593086, 0.5690655700680638, 0.15889201459550006, 0.17140646039847363, 0.1651023236252166, 0.18994366467614232, 0.6834244977628091, 0.6883058595783451, 0.6636361297565998, 0.5390802719667258, 0.3727937386535698, 0.6852948690522525, 0.5878620657640109, 0.5415956121906038, 0.7592901282588981, 0.5173078624219036, 0.40308347244987386, 0.4988514171565722, 0.4279925663099473, 0.45907043142219617, 0.2334390077909172, 0.6023505481180664, 0.6434746868026002, 0.4911167903942547, 0.18956423861060734, 0.21344693256767133, 0.2220882467320151, 0.22734129379898305, 0.21670669469919035, 0.23057972659391335, 0.21247392251832087, 0.23538997003127438, 0.20309519286026445, 0.21948291833614486, 0.21846408848652044, 0.21100998467552823, 0.2464713464342202, 0.23787340788806743, 0.2452445862995657, 0.7225673833012316, 0.24206845336926686, 0.7705996937594956, 0.8089635847548096, 0.9055253142146698, 0.17303110809595268, 0.1766340773093501, 0.1844891111660909, 0.8615607311811446, 0.8410821913242243, 0.16942316322534934, 0.17519456837368375, 0.1553022184632309, 0.2101081689538562, 0.3995586948755988, 0.21091669984912143, 0.2061474304285712, 0.4269872783779812, 0.10519277013019712, 0.2112900419092456, 0.4674976821754425, 0.18308442118159984, 0.18657112959126698, 0.1816937046410897, 0.18664751369361887, 0.17531040775839535, 0.18262972283197032, 0.18803923556194446, 0.18253894695824868, 0.17965670615989326, 0.09527972390497674, 0.08327808658044866, 0.0710914593569647, 0.09184211838550671, 0.09077325519137758, 0.09458897135021849, 0.08297844781019215, 0.0734035933281646, 0.08205128265037942]}, "mutation_prompt": null}
{"id": "3caadf98-d131-49a4-83ec-9539a72c510c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "9460fab8-091e-4c08-8645-349512ba0e30", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "21a139b4-3002-4fd7-88c8-96940ecb4eee", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "8fbd9760-0342-42e7-a4b7-c99c73420683", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "61fe3303-543a-4714-a242-b16f7d3da87e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "a1adeccd-b3b9-4b42-8800-2277faa81251", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6\n                CR = 0.7 + np.random.rand() * 0.3\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.9020523429432382, 0.8894722567988032, 0.9039391611853467, 0.9043909047878808, 0.8978466526810063, 0.9028687343578258, 0.8933269678955491, 0.8901950620254339, 0.9036638783234285, 0.801292891560204, 0.8379280566651597, 0.8252390680935602, 0.8194975348802517, 0.8171995311775953, 0.8352667183328474, 0.8117720702175818, 0.8330591223498978, 0.8159595451048831, 0.4646624538096321, 0.6160635613388681, 0.391017458189562, 0.4311373760909436, 0.42806205453993196, 0.4613304850972757, 0.45504061002682394, 0.4863267681751203, 0.16308610580767435, 0.15624512372810095, 0.1454417190582471, 0.5591817630995746, 0.1494881965064646, 0.27454205827405553, 0.5520168511809094, 0.14131953197577496, 0.5667869729282919, 0.36012115177441306, 0.9631969108466372, 0.9646709481827623, 0.9699725137934397, 0.935222873130138, 0.972358702918019, 0.9806956677987577, 0.9689531030446703, 0.9729837614829084, 0.9675726575787312, 0.6896457336074294, 0.059343944057272946, 0.7025349322298868, 0.7061832917440753, 0.701724870732852, 0.7067047742229398, 0.7070606110641258, 0.6988993356525375, 0.7123211706480626, 0.8821794011256595, 0.8398474252902757, 0.8600845783575551, 0.8597670487385825, 0.8461520018046512, 0.8776112946564549, 0.8422316087323694, 0.8746595683599805, 0.8964882233635714, 0.5825517942343404, 0.39830762787868634, 0.44288531626424954, 0.5665126276577406, 0.6241126515830109, 0.6920273581882492, 0.5033194202662141, 0.620664972795386, 0.5594313682346113, 0.4724589349166557, 0.12840608959443855, 0.592553325429827, 0.5197866473940771, 0.41633929667059233, 0.5703126665936552, 0.674839796928877, 0.549292604034479, 0.5751445625734354, 0.6150901767483468, 0.6332970778088391, 0.6446801960017419, 0.6693283050243062, 0.5554471764824376, 0.6170176951262887, 0.5114119173332903, 0.6099627192238153, 0.6493963672017395, 0.6641846766101883, 0.6913483511411791, 0.7374685856903469, 0.6515351036959517, 0.7044630027496266, 0.14020442826089075, 0.7480281434872181, 0.7553073322981051, 0.7292476546730818, 0.13039977965801208, 0.13487827125698437, 0.23588069441060244, 0.31527629518012246, 0.37343693213963247, 0.31364960921278584, 0.2630867331448903, 0.3540318215423326, 0.23066782707972677, 0.5337882044941545, 0.5303006676221521, 0.3960939364249849, 0.5509576846697222, 0.51520483402053, 0.5642977749413989, 0.4210998091122615, 0.40537105698062936, 0.4928381759421706, 0.83204122027293, 0.8428442242485725, 0.8278962017024397, 0.8206328394744158, 0.825482373027639, 0.8369695324917164, 0.8053873145050212, 0.8145708765603766, 0.687788360783774, 0.12291687307008758, 0.1199150256520688, 0.0971501400923529, 0.09032521929380033, 0.0992263953581678, 0.12242944349209395, 0.44717061464950514, 0.10829259273498848, 0.2906580281987464, 0.1292960008969698, 0.21441058905935684, 0.17112222348436368, 0.1961070959225868, 0.4361010960183477, 0.16943397431786578, 0.20382558598096334, 0.2092381015849064, 0.17403488710895032, 0.6755886263693252, 0.6032664342244325, 0.5843528882323117, 0.5721436944776621, 0.5384143191918123, 0.5830383399053709, 0.633715157307896, 0.6765524763178863, 0.5853356744934538, 0.4505847705066395, 0.4658978757549461, 0.3901630704832937, 0.4386431834366499, 0.5074773936185213, 0.3940410920727647, 0.44527523294576676, 0.5018476563030585, 0.4417972757669075, 0.19254194170138517, 0.2022464610402419, 0.17637267542208357, 0.2113460134856867, 0.22988461701765528, 0.19047304692295075, 0.1935331426575876, 0.18750949073422474, 0.20177200100745463, 0.21941999993595007, 0.6500890423879908, 0.23213348975798853, 0.7069781762042404, 0.19384452067883162, 0.5133817796334281, 0.4988448186439842, 0.23562607306027417, 0.5644013819750606, 0.16315961189698514, 0.16803367951456294, 0.16394198845124064, 0.8493877223455077, 0.8443537253827145, 0.8712688776418539, 0.8218421571329418, 0.16834309054556618, 0.1949164126781291, 0.1678478951687422, 0.16837823279428954, 0.8558058217754425, 0.16098637542397587, 0.8358549058041403, 0.20616683070359754, 0.20978397441570718, 0.2086752227407056, 0.11619572606580464, 0.18945583534393795, 0.19025025389598527, 0.187497389657315, 0.18469885806080766, 0.16729251180589777, 0.18539160183423853, 0.1836165155319166, 0.18466017581915983, 0.1779242658202136, 0.08577319112265636, 0.08206999308316476, 0.08241026871206647, 0.07309963812079856, 0.08665030737839574, 0.08360638210766824, 0.07784121687629231, 0.07976675217560436, 0.08220691767751398]}, "mutation_prompt": null}
{"id": "d6973448-6c89-406d-98fb-f90cc56c6ffd", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.93  # Slightly faster shrinkage\n        self.elitism_rate = 0.05  # New parameter for elitism\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            elitism_count = int(self.elitism_rate * self.population_size)\n            elite_indices = np.argsort(self.fitness)[:elitism_count]\n            elite_population = self.population[elite_indices]\n\n            for i in range(self.population_size):\n                F = 0.5 + np.random.rand() * 0.5  # Increased lower bound for F\n                CR = 0.8 + np.random.rand() * 0.2  # Increased lower bound for CR\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n\n            # Integrating elitism: replace part of the population with best solutions\n            self.population[:elitism_count] = elite_population\n\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Strategic Mutation and Crossover for Accelerated Convergence.", "configspace": "", "generation": 96, "fitness": 0.5101880851475209, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.51 with standard deviation 0.30.", "error": "", "parent_id": "dfd4135d-698a-4cfc-8c4a-8539a7a3800a", "metadata": {"aucs": [0.8990602126066599, 0.8954179805075154, 0.8847315135151286, 0.8983881101090201, 0.8799073655523929, 0.8963878323999499, 0.8987205770312898, 0.8893213031624508, 0.8968300020371808, 0.8369972178392066, 0.8154729871995101, 0.8020866412990336, 0.8179417433664747, 0.8276722832119718, 0.8152548870653306, 0.8402789189383764, 0.8285046883710876, 0.8208729474954372, 0.15111075381993921, 0.14376128845143776, 0.1727670827482971, 0.6019161772149108, 0.1638014188998692, 0.5681421737783925, 0.5992546155396709, 0.6048656353041877, 0.6089364388689611, 0.17578613208921146, 0.09328193361158232, 0.11111970081925515, 0.46438066561513813, 0.1685947073829508, 0.5568112393432565, 0.14428942287492608, 0.16511090587219257, 0.16016761805582014, 0.9715469134598343, 0.9647299174293992, 0.9793666449048279, 0.9634150120893439, 0.9570873301043363, 0.9818687088396186, 0.9792946557258072, 0.9657492623422123, 0.9739016730472015, 0.6903241160397237, 0.7318705224410103, 0.7397852243976224, 0.7677750811286728, 0.7216205344528883, 0.7071195242293493, 0.7584390756345754, 0.7478628335237234, 0.732968940264701, 0.9119684605906376, 0.8527677562518915, 0.8630441101516517, 0.8840895797284081, 0.8605336986601475, 0.869980031867223, 0.867460637542081, 0.8245861583215777, 0.8848228501372982, 0.5809180869078776, 0.6254860211987404, 0.7578257978908607, 0.7081071186343513, 0.5918721455874836, 0.6968464686901761, 0.12808505643341683, 0.6317417158881471, 0.6405519220799737, 0.7432701316423993, 0.010131844966782544, 0.6958436167681166, 0.5807762488312995, 0.5737058020110687, 0.7055004196522601, 0.5910750221615839, 0.5656437511720207, 0.1318196633671752, 0.6264994191847293, 0.5219399033943575, 0.5871964057829427, 0.6056152406992221, 0.66838340339146, 0.6872386708457543, 0.550947233617367, 0.7181226946369059, 0.4467841249795462, 0.7970634197571379, 0.3460711071383521, 0.7733717863355992, 0.3766168941015752, 0.44286805733484647, 0.7595343333111348, 0.774711480521066, 0.7601068161240061, 0.7264992087882594, 0.12162001804110079, 0.16487912908180535, 0.05203032552795872, 0.5600351449603219, 0.6168104240318537, 0.5074318470816087, 0.31802018257136955, 0.2622719855931971, 0.30215838172409526, 0.5000563859125273, 0.4326140507272923, 0.613329898409948, 0.6227811798259917, 0.6120818259380136, 0.606050207636334, 0.37064658592805255, 0.521166323302106, 0.4918726341647274, 0.7536903286930426, 0.8214811713215292, 0.7386197806916011, 0.8630393790764399, 0.826569176246534, 0.8237108848613022, 0.7750484832881316, 0.8372202914563001, 0.8403601502730556, 0.1408690697033146, 0.097285542196753, 0.11877367342641787, 0.12059407615839468, 0.11424105689136799, 0.1278454578568553, 0.10934449206712415, 0.12006564425396393, 0.14238702204053844, 0.13456393229040708, 0.18172199321145444, 0.2850674414576472, 0.7264449224043711, 0.16669254324350036, 0.320927900398287, 0.19223194326408188, 0.1371599970003341, 0.1311670522562126, 0.5623167957419508, 0.574120370383179, 0.6572901225557609, 0.5522532846393433, 0.6358965269813766, 0.6067544982513116, 0.49747676896258686, 0.6583914045630546, 0.6403957553469178, 0.430645825680823, 0.5074570357643209, 0.5094773710994407, 0.46472160289930864, 0.47645898828765687, 0.44963373206685275, 0.6275151062397262, 0.5240260087158534, 0.5104858488972279, 0.17397078116782105, 0.1687190031544562, 0.18126600676027949, 0.15582661028834632, 0.19322853965938858, 0.16774135065925622, 0.18571766994837446, 0.17904390692067262, 0.1785832627363214, 0.1926474290004263, 0.24588962235508105, 0.21383079100762703, 0.6884932307119281, 0.775876421368177, 0.7166390485791743, 0.7448428637199335, 0.7862201178435584, 0.1961069354853987, 0.17734054269059107, 0.8610997878639944, 0.1563202405623535, 0.19490023552543734, 0.8750761134531406, 0.1982972630321269, 0.9109419631899642, 0.9218395694153672, 0.8047849718362108, 0.16841481454557017, 0.16880179887455182, 0.12596580921475542, 0.2058502218191306, 0.16657972523802778, 0.1554518522046585, 0.19788769594588584, 0.8408620115615876, 0.885314101788512, 0.17547241258262802, 0.2276695195025824, 0.16990568371475856, 0.16460571070057428, 0.18589780798776123, 0.2094387146510437, 0.19108699688026476, 0.18684059387291774, 0.18594207601225332, 0.085493290899474, 0.07523026015796186, 0.08256871826160728, 0.0860079282496512, 0.0729108271606469, 0.105853588583672, 0.08201455605128194, 0.08687258387004715, 0.07745041990156465]}, "mutation_prompt": null}
{"id": "5f415b19-9650-42b2-b5a4-6079a3c7d3c0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.93  # Slightly faster shrinkage\n        self.elitism_rate = 0.05  # New parameter for elitism\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            elitism_count = int(self.elitism_rate * self.population_size)\n            elite_indices = np.argsort(self.fitness)[:elitism_count]\n            elite_population = self.population[elite_indices]\n\n            for i in range(self.population_size):\n                F = 0.5 + np.random.rand() * 0.5  # Increased lower bound for F\n                CR = 0.8 + np.random.rand() * 0.2  # Increased lower bound for CR\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n\n            # Integrating elitism: replace part of the population with best solutions\n            self.population[:elitism_count] = elite_population\n\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Strategic Mutation and Crossover for Accelerated Convergence.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d6973448-6c89-406d-98fb-f90cc56c6ffd", "metadata": {"aucs": [0.8990602126066599, 0.8954179805075154, 0.8847315135151286, 0.8983881101090201, 0.8799073655523929, 0.8963878323999499, 0.8987205770312898, 0.8893213031624508, 0.8968300020371808, 0.8369972178392066, 0.8154729871995101, 0.8020866412990336, 0.8179417433664747, 0.8276722832119718, 0.8152548870653306, 0.8402789189383764, 0.8285046883710876, 0.8208729474954372, 0.15111075381993921, 0.14376128845143776, 0.1727670827482971, 0.6019161772149108, 0.1638014188998692, 0.5681421737783925, 0.5992546155396709, 0.6048656353041877, 0.6089364388689611, 0.17578613208921146, 0.09328193361158232, 0.11111970081925515, 0.46438066561513813, 0.1685947073829508, 0.5568112393432565, 0.14428942287492608, 0.16511090587219257, 0.16016761805582014, 0.9715469134598343, 0.9647299174293992, 0.9793666449048279, 0.9634150120893439, 0.9570873301043363, 0.9818687088396186, 0.9792946557258072, 0.9657492623422123, 0.9739016730472015, 0.6903241160397237, 0.7318705224410103, 0.7397852243976224, 0.7677750811286728, 0.7216205344528883, 0.7071195242293493, 0.7584390756345754, 0.7478628335237234, 0.732968940264701, 0.9119684605906376, 0.8527677562518915, 0.8630441101516517, 0.8840895797284081, 0.8605336986601475, 0.869980031867223, 0.867460637542081, 0.8245861583215777, 0.8848228501372982, 0.5809180869078776, 0.6254860211987404, 0.7578257978908607, 0.7081071186343513, 0.5918721455874836, 0.6968464686901761, 0.12808505643341683, 0.6317417158881471, 0.6405519220799737, 0.7432701316423993, 0.010131844966782544, 0.6958436167681166, 0.5807762488312995, 0.5737058020110687, 0.7055004196522601, 0.5910750221615839, 0.5656437511720207, 0.1318196633671752, 0.6264994191847293, 0.5219399033943575, 0.5871964057829427, 0.6056152406992221, 0.66838340339146, 0.6872386708457543, 0.550947233617367, 0.7181226946369059, 0.4467841249795462, 0.7970634197571379, 0.3460711071383521, 0.7733717863355992, 0.3766168941015752, 0.44286805733484647, 0.7595343333111348, 0.774711480521066, 0.7601068161240061, 0.7264992087882594, 0.12162001804110079, 0.16487912908180535, 0.05203032552795872, 0.5600351449603219, 0.6168104240318537, 0.5074318470816087, 0.31802018257136955, 0.2622719855931971, 0.30215838172409526, 0.5000563859125273, 0.4326140507272923, 0.613329898409948, 0.6227811798259917, 0.6120818259380136, 0.606050207636334, 0.37064658592805255, 0.521166323302106, 0.4918726341647274, 0.7536903286930426, 0.8214811713215292, 0.7386197806916011, 0.8630393790764399, 0.826569176246534, 0.8237108848613022, 0.7750484832881316, 0.8372202914563001, 0.8403601502730556, 0.1408690697033146, 0.097285542196753, 0.11877367342641787, 0.12059407615839468, 0.11424105689136799, 0.1278454578568553, 0.10934449206712415, 0.12006564425396393, 0.14238702204053844, 0.13456393229040708, 0.18172199321145444, 0.2850674414576472, 0.7264449224043711, 0.16669254324350036, 0.320927900398287, 0.19223194326408188, 0.1371599970003341, 0.1311670522562126, 0.5623167957419508, 0.574120370383179, 0.6572901225557609, 0.5522532846393433, 0.6358965269813766, 0.6067544982513116, 0.49747676896258686, 0.6583914045630546, 0.6403957553469178, 0.430645825680823, 0.5074570357643209, 0.5094773710994407, 0.46472160289930864, 0.47645898828765687, 0.44963373206685275, 0.6275151062397262, 0.5240260087158534, 0.5104858488972279, 0.17397078116782105, 0.1687190031544562, 0.18126600676027949, 0.15582661028834632, 0.19322853965938858, 0.16774135065925622, 0.18571766994837446, 0.17904390692067262, 0.1785832627363214, 0.1926474290004263, 0.24588962235508105, 0.21383079100762703, 0.6884932307119281, 0.775876421368177, 0.7166390485791743, 0.7448428637199335, 0.7862201178435584, 0.1961069354853987, 0.17734054269059107, 0.8610997878639944, 0.1563202405623535, 0.19490023552543734, 0.8750761134531406, 0.1982972630321269, 0.9109419631899642, 0.9218395694153672, 0.8047849718362108, 0.16841481454557017, 0.16880179887455182, 0.12596580921475542, 0.2058502218191306, 0.16657972523802778, 0.1554518522046585, 0.19788769594588584, 0.8408620115615876, 0.885314101788512, 0.17547241258262802, 0.2276695195025824, 0.16990568371475856, 0.16460571070057428, 0.18589780798776123, 0.2094387146510437, 0.19108699688026476, 0.18684059387291774, 0.18594207601225332, 0.085493290899474, 0.07523026015796186, 0.08256871826160728, 0.0860079282496512, 0.0729108271606469, 0.105853588583672, 0.08201455605128194, 0.08687258387004715, 0.07745041990156465]}, "mutation_prompt": null}
{"id": "ca4f1356-4ce7-4d45-adf1-d731310bd731", "solution": "import numpy as np\n\nclass EnhancedMixedStrategyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.95  # Further increase in shrinkage rate\n        self.elitism_rate = 0.10  # Increased elitism rate for stronger focus on best solutions\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 4)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            elitism_count = int(self.elitism_rate * self.population_size)\n            elite_indices = np.argsort(self.fitness)[:elitism_count]\n            elite_population = self.population[elite_indices]\n\n            for i in range(self.population_size):\n                F = 0.4 + np.random.rand() * 0.6  # Adjusted F range for adaptive mutation\n                CR = 0.7 + np.random.rand() * 0.3  # Slightly reduced CR lower bound\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                if self.evaluations >= self.budget:\n                    break\n\n            # Integrating dynamic elitism: replace part of the population with best solutions\n            self.population[:elitism_count] = elite_population\n\n        return best_solution", "name": "EnhancedMixedStrategyDifferentialEvolution", "description": "Enhanced Mixed Strategy Differential Evolution with Dynamic Elitism and Adaptive Mutation for Improved Convergence.", "configspace": "", "generation": 98, "fitness": 0.46353944926213414, "feedback": "The algorithm EnhancedMixedStrategyDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.29.", "error": "", "parent_id": "d6973448-6c89-406d-98fb-f90cc56c6ffd", "metadata": {"aucs": [0.8987363391639894, 0.9090713599736198, 0.906972823171444, 0.9253575499521258, 0.8905046393026665, 0.9053198515965781, 0.9074032065532427, 0.9030434741639332, 0.9168826960233771, 0.8448222206263055, 0.844522448159424, 0.8440649700490748, 0.8269981552846337, 0.8492031227734257, 0.8494904837288015, 0.8474985253106264, 0.8279861497239672, 0.8448566612361141, 0.7005628419074524, 0.6780447839891601, 0.5693438943873302, 0.17349070399091893, 0.1560206953778701, 0.18222983682296168, 0.6967881572794786, 0.752489715201337, 0.7271002670965387, 0.17077638108628967, 0.6195702904194011, 0.1508641210174173, 0.12926976393185363, 0.1678524875546733, 0.15261156159307354, 0.15268741673383557, 0.14270931118266073, 0.14744596681799826, 0.9522191700428324, 0.9622113013013684, 0.9745579846165434, 0.964058458269535, 0.958172183867531, 0.9748312038502028, 0.968289587902566, 0.9647074898526777, 0.9689875598486191, 0.7302075892279707, 0.6851842396143166, 0.7594292620162885, 0.7255752326734739, 0.7708587755152252, 0.7677687645853757, 0.7385566307742474, 0.7231847671335411, 0.7525997998726934, 0.21276702403817693, 0.8762682016815017, 0.8870701116330101, 0.30740230804359037, 0.2727900667320883, 0.9045752084473156, 0.39863618222786845, 0.9264945361153806, 0.8926225650465264, 0.49458292601768705, 0.6401390570787555, 0.566771969210274, 0.39485052165692247, 0.6151330789442355, 0.5173958951769397, 0.6454719224571408, 0.5487076954171914, 0.47626214077842877, 0.3128137733309263, 0.016418658038519274, 0.4091397021301798, 0.6415335585969463, 0.6840086341199472, 0.6256364184628445, 0.13178132439401835, 0.64940019013964, 0.6331031257582707, 0.36931082659534387, 0.48116022600730834, 0.1747795770740289, 0.4506346417592909, 0.42999338301759316, 0.2857031431312085, 0.3818678373820402, 0.21034862888372186, 0.5692847740112033, 0.3455795416854155, 0.7472690552529575, 0.5298478263734964, 0.3459499301871305, 0.6240027690065565, 0.12434212364614394, 0.2763389749794575, 0.7003528474458464, 0.7795219380521878, 0.16904896005289083, 0.23898807643037412, 0.10073509269291225, 0.2849672956183129, 0.24844862682999724, 0.46303102255509854, 0.1257385913508886, 0.2299104107380655, 0.14524612708705265, 0.42860348391299996, 0.4818484697496431, 0.40758384908654055, 0.5581968386108851, 0.4689435641407519, 0.502926521439824, 0.28521577424304245, 0.31972696918024834, 0.5468566106594406, 0.8599603031331107, 0.7058234191424564, 0.7776091543951114, 0.6895351684259541, 0.767637075166696, 0.7496579930509439, 0.7118788369726833, 0.7409861047652232, 0.7461955128336643, 0.15545514779441327, 0.12667076985344938, 0.10357801418398171, 0.13933334138802966, 0.09571555960491462, 0.10146204897550337, 0.13680090125850197, 0.14972005138199307, 0.09957642095589558, 0.18151044851650555, 0.3136658635665681, 0.4376513186735679, 0.21774986401700602, 0.22788227938872518, 0.25970680230171805, 0.6246132413084606, 0.17975412666698853, 0.12110882270012824, 0.5054480109238436, 0.6400908560087366, 0.6664644220228702, 0.5494571070699104, 0.6083807049156849, 0.522918456277677, 0.6677745588742117, 0.5746090902753256, 0.7394419085784136, 0.3953201830263421, 0.5162259715113312, 0.3857227446691618, 0.4374965727714868, 0.5126721907917118, 0.4960664481381739, 0.21141547133304261, 0.5066114132051929, 0.3738095383717429, 0.19631705391357746, 0.1935222797112126, 0.16734701144324549, 0.20930785672445384, 0.1885969212171994, 0.18368716420773712, 0.1855181785908968, 0.22667123874393047, 0.19090453398386742, 0.19368424436477782, 0.8134734287594716, 0.2010475193241068, 0.6960912012456135, 0.6821867237830936, 0.2391340665296633, 0.2414449777204567, 0.3525279395330394, 0.23983764843691446, 0.20595523026706053, 0.1747399930283967, 0.15307894663960342, 0.8850744920777881, 0.8741691634663084, 0.19807456673762125, 0.5577782972649441, 0.2062475431080053, 0.9034539583109215, 0.16908191734976552, 0.20764928341470446, 0.8954681027665355, 0.20919093589592375, 0.20573817387477888, 0.15447677024233453, 0.20813186939288475, 0.21301698460904406, 0.12765136094578433, 0.16070702385518576, 0.18550892587841095, 0.19642971275989962, 0.16828929353989608, 0.18550301560630256, 0.20009234035656842, 0.15916953769100328, 0.21825572809609595, 0.17666063640054108, 0.0766342112013394, 0.0771205531344007, 0.07670802135199006, 0.09227139960692787, 0.09344520381061006, 0.062264013841870525, 0.07666819282501036, 0.08803307668977234, 0.08124433846961132]}, "mutation_prompt": null}
{"id": "7c5ec900-b7cb-4efb-952e-436fa4629e5c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(4 * self.dim, 20)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n        self.dynamic_shrinkage_rate = 0.92  # Slightly faster shrinkage\n        self.elitism_rate = 0.07  # Increased elitism rate for robust solutions\n        self.learning_rate = 0.1  # New parameter for adaptive mutation and crossover\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n\n        # Initial fitness evaluation\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < best_fitness:\n                best_fitness = self.fitness[i]\n                best_solution = self.population[i]\n\n        F_memory = np.full(self.population_size, 0.5)\n        CR_memory = np.full(self.population_size, 0.9)\n\n        while self.evaluations < self.budget:\n            # Dynamically resize population\n            if self.evaluations % (self.budget // (self.population_size // 5)) == 0:\n                self.population_size = int(self.population_size * self.dynamic_shrinkage_rate)\n                self.fitness = self.fitness[:self.population_size]\n                self.population = self.population[:self.population_size]\n\n            elitism_count = int(self.elitism_rate * self.population_size)\n            elite_indices = np.argsort(self.fitness)[:elitism_count]\n            elite_population = self.population[elite_indices]\n\n            for i in range(self.population_size):\n                F = F_memory[i] + self.learning_rate * np.random.uniform(-0.1, 0.1)\n                CR = CR_memory[i] + self.learning_rate * np.random.uniform(-0.1, 0.1)\n                F = np.clip(F, 0.4, 0.9)\n                CR = np.clip(CR, 0.7, 1.0)\n\n                indices = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(self.dim)] = True\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n                    F_memory[i] = F\n                    CR_memory[i] = CR\n                if self.evaluations >= self.budget:\n                    break\n\n            # Integrating elitism: replace part of the population with best solutions\n            self.population[:elitism_count] = elite_population\n\n        return best_solution", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Adaptive Mutation and Crossover via Learning Mechanism for Improved Convergence.", "configspace": "", "generation": 99, "fitness": 0.31541629445787445, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "d6973448-6c89-406d-98fb-f90cc56c6ffd", "metadata": {"aucs": [0.933452822299765, 0.9167217745748995, 0.9069230278692981, 0.932259768914949, 0.940271750605006, 0.9370321988899246, 0.9395793633241346, 0.9253708208128952, 0.6440108502089925, 0.8778494079004489, 9.999999999998899e-05, 0.8451334509064075, 0.049915231640690005, 0.049008517173632415, 0.05786098923163696, 0.8811016475968516, 0.8611977619993589, 0.7478270513632412, 0.16073946052132104, 0.14503355475587942, 0.15613212043039515, 0.17399547002937577, 0.4644940205475617, 0.1565013579529253, 0.17377437113286454, 0.212537687039264, 0.1507654600283308, 0.1120770577548339, 0.11669296422882613, 0.10765190078785458, 0.15385002595240926, 0.12043474327452564, 0.14173032135382113, 0.15045325138989263, 0.15505562658634864, 0.13590261572937123, 0.2547319187563145, 0.981227109282094, 0.9416475651990353, 0.9107479498499083, 0.9519166201821748, 0.918511385513335, 0.9277604737571605, 0.9522752114415873, 0.9727399283349478, 0.140919388042687, 0.2725366095122994, 0.16081399983889355, 0.23045647996725815, 0.3499139156124723, 0.48664411396272456, 0.21213733092729448, 0.17793742278914393, 0.17619377425038096, 0.3791344706080878, 0.22303875347421287, 0.2498015487215114, 0.9144802970968738, 0.21317417369164116, 0.38386679242826904, 0.9075691587636511, 0.3578378604915726, 0.3827303358239581, 0.1608546485950807, 0.13340521226464575, 0.26185723543963346, 0.13350665694702035, 0.1375960153488397, 0.35795774331254104, 0.1925125126302839, 0.13519939070295972, 0.16443659917229037, 0.13911484007943398, 0.022407797880728553, 0.12911556231955512, 0.0057695994400918105, 0.15066856842244092, 0.1559231042038144, 0.21314115897765573, 0.17393951006914066, 0.22610586450191017, 0.15774213782222724, 0.15908709245446373, 0.015715367906929845, 0.2282657445693418, 0.08803291068613894, 9.999999999998899e-05, 0.0422231711561708, 0.0540477871396422, 0.08995954425014385, 0.29666045097049265, 0.1584973738778115, 0.12433712568625799, 0.0751791868031465, 0.28461024412665803, 0.0430778521538101, 0.25567671474661646, 0.15493384183211423, 0.19898748271062217, 0.21888961090108028, 0.41195929196880265, 0.053028848585850885, 0.12803306577855134, 0.12353278854966998, 0.5130250953398974, 0.18435050291554522, 0.14772447588516902, 0.21941140766347877, 0.25723217031390666, 0.36304486493895494, 0.2415772333827001, 0.25705768689767683, 0.248864968361166, 0.18926562092655608, 0.25143735288031555, 0.2792456087626508, 0.327198854668882, 0.5509111030674871, 0.6248548407134834, 0.5657678225964787, 0.4857121065707789, 0.6215621275041765, 0.59359185496709, 0.6314436905788461, 0.5377774308606214, 0.5677560777329833, 0.07679874623090277, 0.10257688399503173, 0.14450512923126968, 0.1065178907382659, 0.10536658824474032, 0.14298963183273738, 0.14625542841006567, 0.11881940929657209, 0.10992514078387683, 0.2641070752010336, 0.18424779381692857, 0.25379597899260664, 0.2672186463910323, 0.2235208380453345, 0.1556713142466355, 0.1655835913864896, 0.1817058172594549, 0.14101945321387033, 0.582546888589488, 0.39130455899368677, 0.4996954858696393, 0.5179407318098976, 0.4087773282389934, 0.7551683628765953, 0.8319040111121869, 0.7495313240303193, 0.5336254478025013, 0.36869854004973646, 0.44005740065751753, 0.3892227123446388, 0.42947700266706834, 0.3859720849901629, 0.4191708552270429, 0.45008197509849235, 0.5761916572602643, 0.3599321421961398, 0.19498830716261684, 0.1987825528331193, 0.17698748517275942, 0.1974586063583994, 0.20292929529756054, 0.18800795540589532, 0.18751623055161937, 0.20475180224441147, 0.2266599205632609, 0.23547515178618617, 0.19657270579446717, 0.20962282033562218, 0.19911228790061275, 0.22193390554235803, 0.20013048386430132, 0.5477261933444658, 0.7094847879620356, 0.21896253405148935, 0.1675639949975123, 0.19981513334491896, 0.18797279204433326, 0.373733422277424, 0.18473346603715346, 0.1780464517773015, 0.9411094237170221, 0.16799381608204111, 0.17775340689532093, 0.22547171012799005, 0.5641202707457196, 0.15577647352634993, 0.21143768123019246, 0.1678178624673241, 0.208655719994278, 0.16651567561793312, 0.2100213874189868, 0.2787704772419982, 0.1714825414192117, 0.18202832291075444, 0.18795049424765697, 0.18539544145897935, 0.21039256310038867, 0.18689265225477858, 0.17145346043783616, 0.1789178450559541, 0.17935892723283064, 0.09602455962094769, 0.0823498199159789, 0.10659127657808354, 0.08022369682662067, 0.1020712468627889, 0.10748650306001195, 0.07622301950599608, 0.08697088719589008, 0.09468470072909274]}, "mutation_prompt": null}
