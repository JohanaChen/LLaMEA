{"id": "77edf3bd-85af-4802-bdd4-9c7c624bb734", "solution": "import numpy as np\n\nclass AdaptiveLévyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.8\n        return self.population[a] + F * (self.population[b] - self.population[c])\n\n    def crossover(self, target, mutant):\n        CR = 0.9\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Apply Lévy flight adaptation occasionally\n                if np.random.rand() < 0.1:\n                    trial += 0.01 * self.levy_flight()\n\n                self.select(i, trial)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveLévyDifferentialEvolution", "description": "This algorithm combines Differential Evolution with Adaptive Lévy Flight to explore and exploit the search space efficiently, leveraging random walks and adaptive step sizes to enhance diversity and convergence.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 59, in __call__\n  File \"<string>\", line 40, in select\nNameError: name 'func' is not defined\n.", "error": "NameError(\"name 'func' is not defined\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 59, in __call__\n  File \"<string>\", line 40, in select\nNameError: name 'func' is not defined\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "b56abc41-826c-4852-9578-4cfe0d8ea2be", "solution": "import numpy as np\n\nclass AdaptiveLévyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.8\n        return self.population[a] + F * (self.population[b] - self.population[c])\n\n    def crossover(self, target, mutant):\n        CR = 0.9\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Apply Lévy flight adaptation occasionally\n                if np.random.rand() < 0.1:\n                    trial += 0.01 * self.levy_flight()\n\n                self.select(i, trial)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveLévyDifferentialEvolution", "description": "This algorithm combines Differential Evolution with Adaptive Lévy Flight to explore and exploit the search space efficiently, leveraging random walks and adaptive step sizes to enhance diversity and convergence.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "77edf3bd-85af-4802-bdd4-9c7c624bb734", "metadata": {}, "mutation_prompt": null}
{"id": "9eef3ae5-3d32-428e-a6bb-ab37f2199130", "solution": "import numpy as np\n\nclass AdaptiveLévyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.8\n        return self.population[a] + F * (self.population[b] - self.population[c])\n\n    def crossover(self, target, mutant):\n        CR = 0.9\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Apply Lévy flight adaptation occasionally\n                if np.random.rand() < 0.1:\n                    trial += 0.01 * self.levy_flight()\n\n                self.select(i, trial)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveLévyDifferentialEvolution", "description": "This algorithm combines Differential Evolution with Adaptive Lévy Flight to explore and exploit the search space efficiently, leveraging random walks and adaptive step sizes to enhance diversity and convergence.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "77edf3bd-85af-4802-bdd4-9c7c624bb734", "metadata": {}, "mutation_prompt": null}
{"id": "c30a1ca8-4ca6-4eb7-a2ed-208c7c64c5dd", "solution": "import numpy as np\n\nclass AdaptiveLévyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.8\n        return self.population[a] + F * (self.population[b] - self.population[c])\n\n    def crossover(self, target, mutant):\n        CR = 0.9\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Apply Lévy flight adaptation occasionally\n                if np.random.rand() < 0.1:\n                    trial += 0.01 * self.levy_flight()\n\n                self.select(i, trial)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveLévyDifferentialEvolution", "description": "This algorithm combines Differential Evolution with Adaptive Lévy Flight to explore and exploit the search space efficiently, leveraging random walks and adaptive step sizes to enhance diversity and convergence.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "77edf3bd-85af-4802-bdd4-9c7c624bb734", "metadata": {}, "mutation_prompt": null}
{"id": "fb266d10-afab-4785-839d-f66d24e5e960", "solution": "import numpy as np\n\nclass AdaptiveLévyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.8 + 0.2 * np.random.rand()  # Dynamic scaling factor\n        return self.population[a] + F * (self.population[b] - self.population[c])\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Refined application of Lévy flight adaptation\n                if np.random.rand() < 0.15:  # Slightly increased application probability\n                    trial += 0.005 * self.levy_flight()  # Reduced step size for precision\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveLévyDifferentialEvolution", "description": "This adjusted algorithm enhances convergence speed by introducing dynamic scaling factors and adaptive crossover probabilities, while refining Lévy flight application to improve search efficacy.", "configspace": "", "generation": 4, "fitness": 0.2134845090720002, "feedback": "The algorithm AdaptiveLévyDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "77edf3bd-85af-4802-bdd4-9c7c624bb734", "metadata": {"aucs": [0.5886132650026701, 0.5530412008411545, 0.5692162251433388, 0.6312080055738765, 0.6126976484588023, 0.5839535586257105, 0.6175689209712507, 0.6002184753967424, 0.5898695417964704, 0.31977802708921377, 0.3147924049924128, 0.313179873628465, 0.2837828933493364, 0.3229814489538778, 0.29836305315512013, 0.31684127734046796, 0.314720729114484, 0.32869311642629173, 0.1798847680966814, 0.1933671118883915, 0.15504458391363218, 0.1893905080038104, 0.17977296712511193, 0.19611554459578717, 0.16637527910759542, 0.18186896664670626, 0.15514392371538865, 0.13852185479644374, 0.14543484934996853, 0.16923371864872783, 0.1327389590200011, 0.15758445927849152, 0.14860205916554425, 0.13324049448423647, 0.14118298687167574, 0.1365662858765272, 0.9845519298175546, 0.9651062938756233, 0.9557418300729167, 0.9361578075663731, 0.9675032748562743, 0.9893257317388847, 0.9745807849108746, 0.9440629367195105, 0.9662614186894427, 0.18766347128794136, 0.19421705669651979, 0.21159185229852406, 0.19506254456142602, 0.21896196238529153, 0.20295918048341133, 0.20909068331948044, 0.20591537754786282, 0.2339439273312689, 0.22060097548548552, 0.22673026727974488, 0.2475767622155457, 0.22589708320305824, 0.23890831120737832, 0.24738270594395084, 0.23359993466395945, 0.21589087857516165, 0.2427110545836808, 0.13061892609278347, 0.13253480761844605, 0.11364912441905017, 0.11619650665345782, 0.129730104014105, 0.11775577662722558, 0.14145059642316138, 0.1258106410694163, 0.12756469020989958, 0.10527284662146197, 0.10217134546959916, 0.14308659560020986, 0.128257173045755, 0.1147786698378973, 0.12406983598487498, 0.09467125031786805, 0.10081426716671271, 0.10887984715732013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08693153095403017, 0.06440356828669269, 0.10478858174935923, 0.10263409461495265, 0.03879579804162092, 0.10272645525440371, 0.08714327047824977, 0.0705261882090521, 0.13504845267907117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07060922206686826, 0.0488460746235061, 0.07199520341837673, 0.10277173919800042, 0.06740960814012997, 0.08434788505247948, 0.07904465523188864, 0.06956454191972772, 0.07206524690228666, 0.3917142493997884, 0.3883647316285356, 0.3986729932701544, 0.4107010795596939, 0.38471147313203924, 0.3825347970673375, 0.4208515705400051, 0.42198105286415544, 0.3954911609092072, 0.08794787856534536, 0.10065280215496919, 0.10078917262480513, 0.07660328168154684, 0.0852286400824871, 0.0780306167756889, 0.0737325949251848, 0.07282771545986111, 0.08294868754502527, 0.1489635237557464, 0.17348053931283702, 0.16966022009531678, 0.13777419250773004, 0.16049877410307745, 0.1491510514784623, 0.15463032638576313, 0.12980840540490102, 0.13987718700776586, 0.22430936563651027, 0.25603670641595777, 0.25750469722273295, 0.2277980737024956, 0.21804805384919723, 0.2108680767034139, 0.2553379154149579, 0.26220812293569584, 0.25957456263839784, 0.16235759491296198, 0.17214153095623064, 0.18758463675916937, 0.1549506931163267, 0.1500787883554351, 0.16070521362367896, 0.1691753288944695, 0.17083995745624747, 0.20686032097593554, 0.18961842820630626, 0.1878406352058255, 0.18188524644598203, 0.19396872147690636, 0.17116816089169773, 0.17608367130943658, 0.17101387911587485, 0.1647718399078485, 0.19288825217299876, 0.1964169967740893, 0.19488427175087975, 0.17714477208426738, 0.18380469754649398, 0.18510937212867762, 0.2018177091725133, 0.18965493890236118, 0.18407272995141866, 0.1895556933351591, 0.15544381949979558, 0.14603287715285973, 0.16537453959154025, 0.2724274557764629, 0.17405675629730866, 0.16114038031019573, 0.1891260284535783, 0.14696658200576918, 0.1573293978792628, 0.19873696877154334, 0.19243962237440781, 0.18052535705421147, 0.1641352099214055, 0.17876910217441766, 0.14766661792623947, 0.19977641846749195, 0.4613186990718562, 0.35984326295445823, 0.20011203669192468, 0.18929955446742142, 0.19263643359588045, 0.18735102629158285, 0.1987576079097717, 0.19527514809646573, 0.19298886214083777, 0.1971324998015127, 0.19736397994783672, 0.06733774917086688, 0.06972437014426014, 0.06925971461817482, 0.08334727414066079, 0.06956998367488854, 0.06923547392213802, 0.06974030788840391, 0.07209951606099041, 0.06425480620814328]}, "mutation_prompt": null}
{"id": "c16c341e-6a74-49a7-be13-b5a59b9a66ce", "solution": "import numpy as np\n\nclass AdaptiveLévyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.8 + 0.2 * np.random.rand()  # Dynamic scaling factor\n        return self.population[a] + F * (self.population[b] - self.population[c])\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Refined application of Lévy flight adaptation\n                if np.random.rand() < 0.15:  # Slightly increased application probability\n                    trial += 0.005 * self.levy_flight()  # Reduced step size for precision\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveLévyDifferentialEvolution", "description": "This adjusted algorithm enhances convergence speed by introducing dynamic scaling factors and adaptive crossover probabilities, while refining Lévy flight application to improve search efficacy.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb266d10-afab-4785-839d-f66d24e5e960", "metadata": {"aucs": [0.5886132650026701, 0.5530412008411545, 0.5692162251433388, 0.6312080055738765, 0.6126976484588023, 0.5839535586257105, 0.6175689209712507, 0.6002184753967424, 0.5898695417964704, 0.31977802708921377, 0.3147924049924128, 0.313179873628465, 0.2837828933493364, 0.3229814489538778, 0.29836305315512013, 0.31684127734046796, 0.314720729114484, 0.32869311642629173, 0.1798847680966814, 0.1933671118883915, 0.15504458391363218, 0.1893905080038104, 0.17977296712511193, 0.19611554459578717, 0.16637527910759542, 0.18186896664670626, 0.15514392371538865, 0.13852185479644374, 0.14543484934996853, 0.16923371864872783, 0.1327389590200011, 0.15758445927849152, 0.14860205916554425, 0.13324049448423647, 0.14118298687167574, 0.1365662858765272, 0.9845519298175546, 0.9651062938756233, 0.9557418300729167, 0.9361578075663731, 0.9675032748562743, 0.9893257317388847, 0.9745807849108746, 0.9440629367195105, 0.9662614186894427, 0.18766347128794136, 0.19421705669651979, 0.21159185229852406, 0.19506254456142602, 0.21896196238529153, 0.20295918048341133, 0.20909068331948044, 0.20591537754786282, 0.2339439273312689, 0.22060097548548552, 0.22673026727974488, 0.2475767622155457, 0.22589708320305824, 0.23890831120737832, 0.24738270594395084, 0.23359993466395945, 0.21589087857516165, 0.2427110545836808, 0.13061892609278347, 0.13253480761844605, 0.11364912441905017, 0.11619650665345782, 0.129730104014105, 0.11775577662722558, 0.14145059642316138, 0.1258106410694163, 0.12756469020989958, 0.10527284662146197, 0.10217134546959916, 0.14308659560020986, 0.128257173045755, 0.1147786698378973, 0.12406983598487498, 0.09467125031786805, 0.10081426716671271, 0.10887984715732013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08693153095403017, 0.06440356828669269, 0.10478858174935923, 0.10263409461495265, 0.03879579804162092, 0.10272645525440371, 0.08714327047824977, 0.0705261882090521, 0.13504845267907117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07060922206686826, 0.0488460746235061, 0.07199520341837673, 0.10277173919800042, 0.06740960814012997, 0.08434788505247948, 0.07904465523188864, 0.06956454191972772, 0.07206524690228666, 0.3917142493997884, 0.3883647316285356, 0.3986729932701544, 0.4107010795596939, 0.38471147313203924, 0.3825347970673375, 0.4208515705400051, 0.42198105286415544, 0.3954911609092072, 0.08794787856534536, 0.10065280215496919, 0.10078917262480513, 0.07660328168154684, 0.0852286400824871, 0.0780306167756889, 0.0737325949251848, 0.07282771545986111, 0.08294868754502527, 0.1489635237557464, 0.17348053931283702, 0.16966022009531678, 0.13777419250773004, 0.16049877410307745, 0.1491510514784623, 0.15463032638576313, 0.12980840540490102, 0.13987718700776586, 0.22430936563651027, 0.25603670641595777, 0.25750469722273295, 0.2277980737024956, 0.21804805384919723, 0.2108680767034139, 0.2553379154149579, 0.26220812293569584, 0.25957456263839784, 0.16235759491296198, 0.17214153095623064, 0.18758463675916937, 0.1549506931163267, 0.1500787883554351, 0.16070521362367896, 0.1691753288944695, 0.17083995745624747, 0.20686032097593554, 0.18961842820630626, 0.1878406352058255, 0.18188524644598203, 0.19396872147690636, 0.17116816089169773, 0.17608367130943658, 0.17101387911587485, 0.1647718399078485, 0.19288825217299876, 0.1964169967740893, 0.19488427175087975, 0.17714477208426738, 0.18380469754649398, 0.18510937212867762, 0.2018177091725133, 0.18965493890236118, 0.18407272995141866, 0.1895556933351591, 0.15544381949979558, 0.14603287715285973, 0.16537453959154025, 0.2724274557764629, 0.17405675629730866, 0.16114038031019573, 0.1891260284535783, 0.14696658200576918, 0.1573293978792628, 0.19873696877154334, 0.19243962237440781, 0.18052535705421147, 0.1641352099214055, 0.17876910217441766, 0.14766661792623947, 0.19977641846749195, 0.4613186990718562, 0.35984326295445823, 0.20011203669192468, 0.18929955446742142, 0.19263643359588045, 0.18735102629158285, 0.1987576079097717, 0.19527514809646573, 0.19298886214083777, 0.1971324998015127, 0.19736397994783672, 0.06733774917086688, 0.06972437014426014, 0.06925971461817482, 0.08334727414066079, 0.06956998367488854, 0.06923547392213802, 0.06974030788840391, 0.07209951606099041, 0.06425480620814328]}, "mutation_prompt": null}
{"id": "a3c263f7-8d72-417a-a1c1-dfa671f65b16", "solution": "import numpy as np\n\nclass AdaptiveLévyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.8 + 0.2 * np.random.rand()  # Dynamic scaling factor\n        return self.population[a] + F * (self.population[b] - self.population[c])\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Refined application of Lévy flight adaptation\n                if np.random.rand() < 0.15:  # Slightly increased application probability\n                    trial += 0.005 * self.levy_flight()  # Reduced step size for precision\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveLévyDifferentialEvolution", "description": "This adjusted algorithm enhances convergence speed by introducing dynamic scaling factors and adaptive crossover probabilities, while refining Lévy flight application to improve search efficacy.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb266d10-afab-4785-839d-f66d24e5e960", "metadata": {"aucs": [0.5886132650026701, 0.5530412008411545, 0.5692162251433388, 0.6312080055738765, 0.6126976484588023, 0.5839535586257105, 0.6175689209712507, 0.6002184753967424, 0.5898695417964704, 0.31977802708921377, 0.3147924049924128, 0.313179873628465, 0.2837828933493364, 0.3229814489538778, 0.29836305315512013, 0.31684127734046796, 0.314720729114484, 0.32869311642629173, 0.1798847680966814, 0.1933671118883915, 0.15504458391363218, 0.1893905080038104, 0.17977296712511193, 0.19611554459578717, 0.16637527910759542, 0.18186896664670626, 0.15514392371538865, 0.13852185479644374, 0.14543484934996853, 0.16923371864872783, 0.1327389590200011, 0.15758445927849152, 0.14860205916554425, 0.13324049448423647, 0.14118298687167574, 0.1365662858765272, 0.9845519298175546, 0.9651062938756233, 0.9557418300729167, 0.9361578075663731, 0.9675032748562743, 0.9893257317388847, 0.9745807849108746, 0.9440629367195105, 0.9662614186894427, 0.18766347128794136, 0.19421705669651979, 0.21159185229852406, 0.19506254456142602, 0.21896196238529153, 0.20295918048341133, 0.20909068331948044, 0.20591537754786282, 0.2339439273312689, 0.22060097548548552, 0.22673026727974488, 0.2475767622155457, 0.22589708320305824, 0.23890831120737832, 0.24738270594395084, 0.23359993466395945, 0.21589087857516165, 0.2427110545836808, 0.13061892609278347, 0.13253480761844605, 0.11364912441905017, 0.11619650665345782, 0.129730104014105, 0.11775577662722558, 0.14145059642316138, 0.1258106410694163, 0.12756469020989958, 0.10527284662146197, 0.10217134546959916, 0.14308659560020986, 0.128257173045755, 0.1147786698378973, 0.12406983598487498, 0.09467125031786805, 0.10081426716671271, 0.10887984715732013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08693153095403017, 0.06440356828669269, 0.10478858174935923, 0.10263409461495265, 0.03879579804162092, 0.10272645525440371, 0.08714327047824977, 0.0705261882090521, 0.13504845267907117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07060922206686826, 0.0488460746235061, 0.07199520341837673, 0.10277173919800042, 0.06740960814012997, 0.08434788505247948, 0.07904465523188864, 0.06956454191972772, 0.07206524690228666, 0.3917142493997884, 0.3883647316285356, 0.3986729932701544, 0.4107010795596939, 0.38471147313203924, 0.3825347970673375, 0.4208515705400051, 0.42198105286415544, 0.3954911609092072, 0.08794787856534536, 0.10065280215496919, 0.10078917262480513, 0.07660328168154684, 0.0852286400824871, 0.0780306167756889, 0.0737325949251848, 0.07282771545986111, 0.08294868754502527, 0.1489635237557464, 0.17348053931283702, 0.16966022009531678, 0.13777419250773004, 0.16049877410307745, 0.1491510514784623, 0.15463032638576313, 0.12980840540490102, 0.13987718700776586, 0.22430936563651027, 0.25603670641595777, 0.25750469722273295, 0.2277980737024956, 0.21804805384919723, 0.2108680767034139, 0.2553379154149579, 0.26220812293569584, 0.25957456263839784, 0.16235759491296198, 0.17214153095623064, 0.18758463675916937, 0.1549506931163267, 0.1500787883554351, 0.16070521362367896, 0.1691753288944695, 0.17083995745624747, 0.20686032097593554, 0.18961842820630626, 0.1878406352058255, 0.18188524644598203, 0.19396872147690636, 0.17116816089169773, 0.17608367130943658, 0.17101387911587485, 0.1647718399078485, 0.19288825217299876, 0.1964169967740893, 0.19488427175087975, 0.17714477208426738, 0.18380469754649398, 0.18510937212867762, 0.2018177091725133, 0.18965493890236118, 0.18407272995141866, 0.1895556933351591, 0.15544381949979558, 0.14603287715285973, 0.16537453959154025, 0.2724274557764629, 0.17405675629730866, 0.16114038031019573, 0.1891260284535783, 0.14696658200576918, 0.1573293978792628, 0.19873696877154334, 0.19243962237440781, 0.18052535705421147, 0.1641352099214055, 0.17876910217441766, 0.14766661792623947, 0.19977641846749195, 0.4613186990718562, 0.35984326295445823, 0.20011203669192468, 0.18929955446742142, 0.19263643359588045, 0.18735102629158285, 0.1987576079097717, 0.19527514809646573, 0.19298886214083777, 0.1971324998015127, 0.19736397994783672, 0.06733774917086688, 0.06972437014426014, 0.06925971461817482, 0.08334727414066079, 0.06956998367488854, 0.06923547392213802, 0.06974030788840391, 0.07209951606099041, 0.06425480620814328]}, "mutation_prompt": null}
{"id": "84ced9c9-9bee-4f9a-a444-9737a65f1710", "solution": "import numpy as np\n\nclass AdaptiveLévyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.8 + 0.2 * np.random.rand()  # Dynamic scaling factor\n        return self.population[a] + F * (self.population[b] - self.population[c])\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Refined application of Lévy flight adaptation\n                if np.random.rand() < 0.15:  # Slightly increased application probability\n                    trial += 0.005 * self.levy_flight()  # Reduced step size for precision\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveLévyDifferentialEvolution", "description": "This adjusted algorithm enhances convergence speed by introducing dynamic scaling factors and adaptive crossover probabilities, while refining Lévy flight application to improve search efficacy.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb266d10-afab-4785-839d-f66d24e5e960", "metadata": {"aucs": [0.5886132650026701, 0.5530412008411545, 0.5692162251433388, 0.6312080055738765, 0.6126976484588023, 0.5839535586257105, 0.6175689209712507, 0.6002184753967424, 0.5898695417964704, 0.31977802708921377, 0.3147924049924128, 0.313179873628465, 0.2837828933493364, 0.3229814489538778, 0.29836305315512013, 0.31684127734046796, 0.314720729114484, 0.32869311642629173, 0.1798847680966814, 0.1933671118883915, 0.15504458391363218, 0.1893905080038104, 0.17977296712511193, 0.19611554459578717, 0.16637527910759542, 0.18186896664670626, 0.15514392371538865, 0.13852185479644374, 0.14543484934996853, 0.16923371864872783, 0.1327389590200011, 0.15758445927849152, 0.14860205916554425, 0.13324049448423647, 0.14118298687167574, 0.1365662858765272, 0.9845519298175546, 0.9651062938756233, 0.9557418300729167, 0.9361578075663731, 0.9675032748562743, 0.9893257317388847, 0.9745807849108746, 0.9440629367195105, 0.9662614186894427, 0.18766347128794136, 0.19421705669651979, 0.21159185229852406, 0.19506254456142602, 0.21896196238529153, 0.20295918048341133, 0.20909068331948044, 0.20591537754786282, 0.2339439273312689, 0.22060097548548552, 0.22673026727974488, 0.2475767622155457, 0.22589708320305824, 0.23890831120737832, 0.24738270594395084, 0.23359993466395945, 0.21589087857516165, 0.2427110545836808, 0.13061892609278347, 0.13253480761844605, 0.11364912441905017, 0.11619650665345782, 0.129730104014105, 0.11775577662722558, 0.14145059642316138, 0.1258106410694163, 0.12756469020989958, 0.10527284662146197, 0.10217134546959916, 0.14308659560020986, 0.128257173045755, 0.1147786698378973, 0.12406983598487498, 0.09467125031786805, 0.10081426716671271, 0.10887984715732013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08693153095403017, 0.06440356828669269, 0.10478858174935923, 0.10263409461495265, 0.03879579804162092, 0.10272645525440371, 0.08714327047824977, 0.0705261882090521, 0.13504845267907117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07060922206686826, 0.0488460746235061, 0.07199520341837673, 0.10277173919800042, 0.06740960814012997, 0.08434788505247948, 0.07904465523188864, 0.06956454191972772, 0.07206524690228666, 0.3917142493997884, 0.3883647316285356, 0.3986729932701544, 0.4107010795596939, 0.38471147313203924, 0.3825347970673375, 0.4208515705400051, 0.42198105286415544, 0.3954911609092072, 0.08794787856534536, 0.10065280215496919, 0.10078917262480513, 0.07660328168154684, 0.0852286400824871, 0.0780306167756889, 0.0737325949251848, 0.07282771545986111, 0.08294868754502527, 0.1489635237557464, 0.17348053931283702, 0.16966022009531678, 0.13777419250773004, 0.16049877410307745, 0.1491510514784623, 0.15463032638576313, 0.12980840540490102, 0.13987718700776586, 0.22430936563651027, 0.25603670641595777, 0.25750469722273295, 0.2277980737024956, 0.21804805384919723, 0.2108680767034139, 0.2553379154149579, 0.26220812293569584, 0.25957456263839784, 0.16235759491296198, 0.17214153095623064, 0.18758463675916937, 0.1549506931163267, 0.1500787883554351, 0.16070521362367896, 0.1691753288944695, 0.17083995745624747, 0.20686032097593554, 0.18961842820630626, 0.1878406352058255, 0.18188524644598203, 0.19396872147690636, 0.17116816089169773, 0.17608367130943658, 0.17101387911587485, 0.1647718399078485, 0.19288825217299876, 0.1964169967740893, 0.19488427175087975, 0.17714477208426738, 0.18380469754649398, 0.18510937212867762, 0.2018177091725133, 0.18965493890236118, 0.18407272995141866, 0.1895556933351591, 0.15544381949979558, 0.14603287715285973, 0.16537453959154025, 0.2724274557764629, 0.17405675629730866, 0.16114038031019573, 0.1891260284535783, 0.14696658200576918, 0.1573293978792628, 0.19873696877154334, 0.19243962237440781, 0.18052535705421147, 0.1641352099214055, 0.17876910217441766, 0.14766661792623947, 0.19977641846749195, 0.4613186990718562, 0.35984326295445823, 0.20011203669192468, 0.18929955446742142, 0.19263643359588045, 0.18735102629158285, 0.1987576079097717, 0.19527514809646573, 0.19298886214083777, 0.1971324998015127, 0.19736397994783672, 0.06733774917086688, 0.06972437014426014, 0.06925971461817482, 0.08334727414066079, 0.06956998367488854, 0.06923547392213802, 0.06974030788840391, 0.07209951606099041, 0.06425480620814328]}, "mutation_prompt": null}
{"id": "b327d761-7c3b-45b9-bece-9739d0a4d882", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)  # Ensure minimum population size for small dimensions\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.8 + 0.3 * np.random.rand()  # Slightly more dynamic scaling factor\n        return self.population[a] + F * (self.population[b] - self.population[c])\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / self.budget)  # Adjusted adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Refined application of Lévy flight adaptation\n                if np.random.rand() < 0.2:  # Slightly increased application probability\n                    trial += 0.007 * self.levy_flight()  # Slightly larger step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolution", "description": "A refined adaptive algorithm enhancing exploration and exploitation balance with dynamic Lévy flight and population diversity mechanisms.", "configspace": "", "generation": 8, "fitness": 0.30000039648645516, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": "fb266d10-afab-4785-839d-f66d24e5e960", "metadata": {"aucs": [0.804355479077755, 0.7893436705109986, 0.8061595104683732, 0.8102964966700135, 0.8258265172677761, 0.8276602446735204, 0.8197710094608265, 0.8105564273472139, 0.8199320854406962, 0.6412031089117812, 0.6682081885669178, 0.67927760855729, 0.6496025852415863, 0.6546175556006921, 0.6889439787157636, 0.6613648695712879, 0.6713696962915386, 0.678822145965558, 0.5120136099763489, 0.4853724200335573, 0.5215053747503812, 0.47890470404439467, 0.5357336628532232, 0.5167398493839489, 0.5022814010336837, 0.4507174413817776, 0.5191579071246484, 0.37834868106819375, 0.16598015046965342, 0.45429243243318773, 0.35034869092650134, 0.39122325221116705, 0.16103659992674435, 0.15777003018315972, 0.41531497892280833, 0.36551056017682937, 0.9646848626517673, 0.9760710386217221, 0.9634862578672955, 0.960063940224253, 0.9544569197065856, 0.9852922008840693, 0.9819123245380171, 0.9856113373531449, 0.9496260329060614, 0.3762661469872859, 0.38016548998700317, 0.36369228851377644, 0.38581107978643325, 0.41410701600370126, 0.38237473688924184, 0.33703347514812676, 0.3810277778758605, 0.3718402505075432, 0.3133188785478238, 0.6586982821493526, 0.29578232984612596, 0.6130842480257124, 0.304905280952981, 0.6410639868404349, 0.38350930399916283, 0.2999078006399407, 0.28883742301162574, 0.1719232050052829, 0.17810367121909, 0.20574507467010494, 0.1873259686391212, 0.1746833322150162, 0.1857598610346124, 0.17637090508122288, 0.1830954893427421, 0.19230190576060158, 0.19151954559629902, 0.12662365926903696, 0.11560743911895877, 0.17582198491521084, 0.18027587923104382, 0.15367536874315213, 0.1694289752252951, 0.17802593967563085, 0.15326055535770045, 9.999999999998899e-05, 0.0032881215200275538, 0.010230049444904576, 0.03169955285954862, 0.013562570875723767, 0.013452466212743652, 0.0001525197429533831, 0.002988814727051814, 9.999999999998899e-05, 0.1168230680884963, 0.08757534606102058, 0.10082537633042232, 0.07818364631790575, 0.10851636625562566, 0.13192368887121997, 0.16159135533172064, 0.15623881021868025, 0.10642103161607519, 0.006580708966680282, 0.023872597124951045, 0.008630915820200591, 0.003668174225894827, 0.004139655836556622, 0.012308659173872916, 0.07123129490891655, 0.03219533642980621, 0.014840954102046222, 0.10602493155468218, 0.1249959536219225, 0.12850578075742103, 0.13937028668045515, 0.14528540132446122, 0.1485622478319243, 0.13472147803029022, 0.10657253652456433, 0.12528035619193056, 0.49192361730340095, 0.49264971658976675, 0.48545913879274927, 0.4570706197929292, 0.4817562940182083, 0.489179645963129, 0.46129645302244093, 0.4830035358507716, 0.506992775927642, 0.08747020439150188, 0.09487729312877402, 0.09583429237327401, 0.09151071348408857, 0.08942496115832033, 0.10237321541675959, 0.0991805217029259, 0.1117812854889556, 0.09877976277190259, 0.17462170942485677, 0.16637961223247277, 0.15746726344063278, 0.21127565515203894, 0.19631448319491707, 0.19518788282212918, 0.18450217604517882, 0.18580719147182323, 0.1464602817796793, 0.2980254284747672, 0.28773383454170853, 0.2987219550990048, 0.2631667547337756, 0.27887760399004413, 0.2962355929323728, 0.36498963888175706, 0.36663154570485, 0.3191219710873584, 0.2018451284791144, 0.22222885142594273, 0.2167533747123791, 0.2018149544939567, 0.19147990202203924, 0.17574200207185076, 0.2094292424858306, 0.22506966773503745, 0.24718283354991977, 0.19273064930195183, 0.1802161752168837, 0.18023798347972897, 0.17125587616781546, 0.1860070291786825, 0.1871341469445783, 0.17972825042731966, 0.20004781901604662, 0.20283648932347087, 0.24111693733951112, 0.21726635104408676, 0.24136517380692635, 0.27607343592034184, 0.23031244728870848, 0.25385983772840837, 0.2593842840256627, 0.22636809225827648, 0.3290350254279275, 0.19545868059065574, 0.19427151269103882, 0.17162152828143484, 0.180205871889355, 0.7338669376915239, 0.6284058715068694, 0.1651216878466354, 0.2584349234755008, 0.1795846579914352, 0.15416346051985141, 0.1669230836551846, 0.19635520847388677, 0.19517832089365916, 0.19032004537421965, 0.20492539634830453, 0.2085789146551703, 0.5769976442912097, 0.1507575323070408, 0.1874169010941359, 0.1911515540093155, 0.20460979588171324, 0.19615855544259853, 0.19199062996035565, 0.1958658813083698, 0.19307012875701435, 0.18879188053093254, 0.19887756725165773, 0.07232533259616303, 0.07875082008883982, 0.08457669135826495, 0.08583176128837144, 0.07922623189838518, 0.07385664262972091, 0.07339654928927974, 0.07257456351483593, 0.07963383724641138]}, "mutation_prompt": null}
{"id": "c868b3f8-d726-443e-afe2-073b033bf54c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)  # Ensure minimum population size for small dimensions\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.8 + 0.3 * np.random.rand()  # Slightly more dynamic scaling factor\n        return self.population[a] + F * (self.population[b] - self.population[c])\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / self.budget)  # Adjusted adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Refined application of Lévy flight adaptation\n                if np.random.rand() < 0.2:  # Slightly increased application probability\n                    trial += 0.007 * self.levy_flight()  # Slightly larger step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolution", "description": "A refined adaptive algorithm enhancing exploration and exploitation balance with dynamic Lévy flight and population diversity mechanisms.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b327d761-7c3b-45b9-bece-9739d0a4d882", "metadata": {"aucs": [0.804355479077755, 0.7893436705109986, 0.8061595104683732, 0.8102964966700135, 0.8258265172677761, 0.8276602446735204, 0.8197710094608265, 0.8105564273472139, 0.8199320854406962, 0.6412031089117812, 0.6682081885669178, 0.67927760855729, 0.6496025852415863, 0.6546175556006921, 0.6889439787157636, 0.6613648695712879, 0.6713696962915386, 0.678822145965558, 0.5120136099763489, 0.4853724200335573, 0.5215053747503812, 0.47890470404439467, 0.5357336628532232, 0.5167398493839489, 0.5022814010336837, 0.4507174413817776, 0.5191579071246484, 0.37834868106819375, 0.16598015046965342, 0.45429243243318773, 0.35034869092650134, 0.39122325221116705, 0.16103659992674435, 0.15777003018315972, 0.41531497892280833, 0.36551056017682937, 0.9646848626517673, 0.9760710386217221, 0.9634862578672955, 0.960063940224253, 0.9544569197065856, 0.9852922008840693, 0.9819123245380171, 0.9856113373531449, 0.9496260329060614, 0.3762661469872859, 0.38016548998700317, 0.36369228851377644, 0.38581107978643325, 0.41410701600370126, 0.38237473688924184, 0.33703347514812676, 0.3810277778758605, 0.3718402505075432, 0.3133188785478238, 0.6586982821493526, 0.29578232984612596, 0.6130842480257124, 0.304905280952981, 0.6410639868404349, 0.38350930399916283, 0.2999078006399407, 0.28883742301162574, 0.1719232050052829, 0.17810367121909, 0.20574507467010494, 0.1873259686391212, 0.1746833322150162, 0.1857598610346124, 0.17637090508122288, 0.1830954893427421, 0.19230190576060158, 0.19151954559629902, 0.12662365926903696, 0.11560743911895877, 0.17582198491521084, 0.18027587923104382, 0.15367536874315213, 0.1694289752252951, 0.17802593967563085, 0.15326055535770045, 9.999999999998899e-05, 0.0032881215200275538, 0.010230049444904576, 0.03169955285954862, 0.013562570875723767, 0.013452466212743652, 0.0001525197429533831, 0.002988814727051814, 9.999999999998899e-05, 0.1168230680884963, 0.08757534606102058, 0.10082537633042232, 0.07818364631790575, 0.10851636625562566, 0.13192368887121997, 0.16159135533172064, 0.15623881021868025, 0.10642103161607519, 0.006580708966680282, 0.023872597124951045, 0.008630915820200591, 0.003668174225894827, 0.004139655836556622, 0.012308659173872916, 0.07123129490891655, 0.03219533642980621, 0.014840954102046222, 0.10602493155468218, 0.1249959536219225, 0.12850578075742103, 0.13937028668045515, 0.14528540132446122, 0.1485622478319243, 0.13472147803029022, 0.10657253652456433, 0.12528035619193056, 0.49192361730340095, 0.49264971658976675, 0.48545913879274927, 0.4570706197929292, 0.4817562940182083, 0.489179645963129, 0.46129645302244093, 0.4830035358507716, 0.506992775927642, 0.08747020439150188, 0.09487729312877402, 0.09583429237327401, 0.09151071348408857, 0.08942496115832033, 0.10237321541675959, 0.0991805217029259, 0.1117812854889556, 0.09877976277190259, 0.17462170942485677, 0.16637961223247277, 0.15746726344063278, 0.21127565515203894, 0.19631448319491707, 0.19518788282212918, 0.18450217604517882, 0.18580719147182323, 0.1464602817796793, 0.2980254284747672, 0.28773383454170853, 0.2987219550990048, 0.2631667547337756, 0.27887760399004413, 0.2962355929323728, 0.36498963888175706, 0.36663154570485, 0.3191219710873584, 0.2018451284791144, 0.22222885142594273, 0.2167533747123791, 0.2018149544939567, 0.19147990202203924, 0.17574200207185076, 0.2094292424858306, 0.22506966773503745, 0.24718283354991977, 0.19273064930195183, 0.1802161752168837, 0.18023798347972897, 0.17125587616781546, 0.1860070291786825, 0.1871341469445783, 0.17972825042731966, 0.20004781901604662, 0.20283648932347087, 0.24111693733951112, 0.21726635104408676, 0.24136517380692635, 0.27607343592034184, 0.23031244728870848, 0.25385983772840837, 0.2593842840256627, 0.22636809225827648, 0.3290350254279275, 0.19545868059065574, 0.19427151269103882, 0.17162152828143484, 0.180205871889355, 0.7338669376915239, 0.6284058715068694, 0.1651216878466354, 0.2584349234755008, 0.1795846579914352, 0.15416346051985141, 0.1669230836551846, 0.19635520847388677, 0.19517832089365916, 0.19032004537421965, 0.20492539634830453, 0.2085789146551703, 0.5769976442912097, 0.1507575323070408, 0.1874169010941359, 0.1911515540093155, 0.20460979588171324, 0.19615855544259853, 0.19199062996035565, 0.1958658813083698, 0.19307012875701435, 0.18879188053093254, 0.19887756725165773, 0.07232533259616303, 0.07875082008883982, 0.08457669135826495, 0.08583176128837144, 0.07922623189838518, 0.07385664262972091, 0.07339654928927974, 0.07257456351483593, 0.07963383724641138]}, "mutation_prompt": null}
{"id": "e8dbb6a4-96cc-44cb-8823-99ea3bbf8603", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.7 + 0.4 * np.random.rand()  # More dynamic scaling factor for better exploration\n        return self.population[a] + F * (self.population[b] - self.population[c])\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / self.budget)  # Slightly higher adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.25:  # Increased probability for applying Lévy flight\n                    trial += 0.005 * self.levy_flight()  # Adjusted step size for balance\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolution", "description": "Enhanced adaptive algorithm further optimized by integrating dynamic mutation rates, adaptive scaling factors, and strategic Lévy flight usage to accelerate convergence.", "configspace": "", "generation": 10, "fitness": 0.32965099943826615, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "b327d761-7c3b-45b9-bece-9739d0a4d882", "metadata": {"aucs": [0.8160157778927184, 0.8046632542225951, 0.8164359684246618, 0.840530664056347, 0.839732965117889, 0.8233648156915241, 0.8357047270027541, 0.8318496816284443, 0.842620372931525, 0.6952697766704368, 0.6917391063911277, 0.6705289689403734, 0.6758060424766992, 0.6901311459254665, 0.6755323766329326, 0.6553397440746238, 0.6898353307959069, 0.6712692015175601, 0.4910258096643163, 0.5235417821979591, 0.4550326932664198, 0.5015807280120295, 0.3917787686086792, 0.46442205054404084, 0.4932462715491366, 0.16041484337751577, 0.5765702691886735, 0.45870994328034953, 0.5047361190011552, 0.4445711832207281, 0.36566084782794894, 0.4403032855318977, 0.49649080236253007, 0.4398585864523107, 0.3941836639383426, 0.07187295658052495, 0.9471742600641446, 0.9632242137059451, 0.9728325577407386, 0.9562550707970273, 0.9797325412696696, 0.9577421764736083, 0.961369066626686, 0.9672005380927847, 0.9668426037329397, 0.38089142873075066, 0.4356579270185321, 0.40818236014695675, 0.41536716287961695, 0.3994152448327172, 0.3851180207730355, 0.3983067235688944, 0.37944991733551514, 0.3684887985431986, 0.7009093785001025, 0.6575056583064436, 0.5989441605479351, 0.6021268415714092, 0.6193524524459433, 0.6752200571279086, 0.6704647618791846, 0.611768239187005, 0.5076378033528202, 0.1970093515492629, 0.1654301759230482, 0.18700678799748027, 0.19584215507341673, 0.20457415948975421, 0.17155196792671612, 0.16697867659821786, 0.18151246558438594, 0.16939763776103878, 0.11996274395646322, 0.12494244596770476, 0.2925873887539102, 0.1857860892322617, 0.17964767639718826, 0.19159206290808262, 0.21204246793596593, 0.1698185100049241, 0.21176151495662288, 0.05085248142176024, 0.07193696982805509, 0.07412677449429428, 0.04973854060403993, 0.012078617549286519, 0.035555899617675135, 0.04089447387175038, 0.035222087159738846, 0.014892091898733084, 0.24641398971947615, 0.0964179681014875, 0.12341168685330062, 0.17663401943780843, 0.15478102339315614, 0.13546832879667803, 0.17270377215366095, 0.1911934719723718, 0.20502153666086598, 0.0035321803281259667, 0.010926358825212756, 0.052108400898724705, 0.010014493985683326, 0.009659981652289984, 0.004062189958456974, 0.023863456678501982, 0.03372296296999899, 0.03065127335003448, 0.1553253119899839, 0.14317914422812916, 0.17105107518912555, 0.14044925725551805, 0.15889290700952374, 0.1756151506478465, 0.14875268868068436, 0.16200188210624178, 0.14974100875906438, 0.4864428441762796, 0.514305730656517, 0.514123215771227, 0.49674836266828115, 0.5057778073080075, 0.516447814914603, 0.5295601071829783, 0.48057508766386103, 0.49744454472294397, 0.09861290459393035, 0.10403475184841515, 0.1051066306057632, 0.10959429236371399, 0.10113907816886003, 0.09111987592595194, 0.10231667912478026, 0.10084118852518154, 0.0877861338965602, 0.15998470356053862, 0.14335883116884174, 0.4290191182100169, 0.16231370975881687, 0.18682257704404404, 0.1538863849599844, 0.16883676367209788, 0.17116048386561156, 0.16472027854688986, 0.30989119092836837, 0.28480673141652635, 0.29699960456552343, 0.29524245014391814, 0.32828283067025266, 0.34224716787474085, 0.365443285551446, 0.365335936549968, 0.331668237009932, 0.22440348567437118, 0.20353021276064565, 0.19914163322660683, 0.19230217435130526, 0.2042164096611102, 0.20552468670929902, 0.24974358175341327, 0.24459645350386194, 0.21306779831743117, 0.17285949992505445, 0.19319622953490623, 0.19030423886809533, 0.21214434531643267, 0.19068056236032116, 0.20823536948869237, 0.2080320397829314, 0.20102850670579853, 0.19887945776825977, 0.3678677829792161, 0.24807317742704282, 0.2383919999332791, 0.21278999032110268, 0.2437358966012253, 0.3143314587788525, 0.23802818815884552, 0.24477786850955385, 0.233102343483371, 0.47861326653244596, 0.16370507911459264, 0.14727540588005084, 0.7918820573764922, 0.181001078282379, 0.7035530626751083, 0.15828275464998498, 0.24288331527210083, 0.7953379654793069, 0.4827414931245443, 0.20266455856336196, 0.20543799119337636, 0.16617326601011828, 0.424344759212517, 0.44850586429693395, 0.12648884703740093, 0.21144362442171616, 0.687787266279557, 0.18818046091917018, 0.2077043892560818, 0.21502462356990804, 0.2146211787107386, 0.1940838417646129, 0.20911223040597238, 0.18576900831830867, 0.205052630214693, 0.19037552076955877, 0.07621158753591262, 0.07150993599371813, 0.08066285195660694, 0.07630288187635759, 0.08151090119876736, 0.08521374842748186, 0.07857696007825621, 0.07667706500106375, 0.06903345343650014]}, "mutation_prompt": null}
{"id": "c5c58311-6361-468a-8d46-85358f0db71c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.7 + 0.4 * np.random.rand()  # More dynamic scaling factor for better exploration\n        return self.population[a] + F * (self.population[b] - self.population[c])\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / self.budget)  # Slightly higher adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.25:  # Increased probability for applying Lévy flight\n                    trial += 0.005 * self.levy_flight()  # Adjusted step size for balance\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolution", "description": "Enhanced adaptive algorithm further optimized by integrating dynamic mutation rates, adaptive scaling factors, and strategic Lévy flight usage to accelerate convergence.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8dbb6a4-96cc-44cb-8823-99ea3bbf8603", "metadata": {"aucs": [0.8160157778927184, 0.8046632542225951, 0.8164359684246618, 0.840530664056347, 0.839732965117889, 0.8233648156915241, 0.8357047270027541, 0.8318496816284443, 0.842620372931525, 0.6952697766704368, 0.6917391063911277, 0.6705289689403734, 0.6758060424766992, 0.6901311459254665, 0.6755323766329326, 0.6553397440746238, 0.6898353307959069, 0.6712692015175601, 0.4910258096643163, 0.5235417821979591, 0.4550326932664198, 0.5015807280120295, 0.3917787686086792, 0.46442205054404084, 0.4932462715491366, 0.16041484337751577, 0.5765702691886735, 0.45870994328034953, 0.5047361190011552, 0.4445711832207281, 0.36566084782794894, 0.4403032855318977, 0.49649080236253007, 0.4398585864523107, 0.3941836639383426, 0.07187295658052495, 0.9471742600641446, 0.9632242137059451, 0.9728325577407386, 0.9562550707970273, 0.9797325412696696, 0.9577421764736083, 0.961369066626686, 0.9672005380927847, 0.9668426037329397, 0.38089142873075066, 0.4356579270185321, 0.40818236014695675, 0.41536716287961695, 0.3994152448327172, 0.3851180207730355, 0.3983067235688944, 0.37944991733551514, 0.3684887985431986, 0.7009093785001025, 0.6575056583064436, 0.5989441605479351, 0.6021268415714092, 0.6193524524459433, 0.6752200571279086, 0.6704647618791846, 0.611768239187005, 0.5076378033528202, 0.1970093515492629, 0.1654301759230482, 0.18700678799748027, 0.19584215507341673, 0.20457415948975421, 0.17155196792671612, 0.16697867659821786, 0.18151246558438594, 0.16939763776103878, 0.11996274395646322, 0.12494244596770476, 0.2925873887539102, 0.1857860892322617, 0.17964767639718826, 0.19159206290808262, 0.21204246793596593, 0.1698185100049241, 0.21176151495662288, 0.05085248142176024, 0.07193696982805509, 0.07412677449429428, 0.04973854060403993, 0.012078617549286519, 0.035555899617675135, 0.04089447387175038, 0.035222087159738846, 0.014892091898733084, 0.24641398971947615, 0.0964179681014875, 0.12341168685330062, 0.17663401943780843, 0.15478102339315614, 0.13546832879667803, 0.17270377215366095, 0.1911934719723718, 0.20502153666086598, 0.0035321803281259667, 0.010926358825212756, 0.052108400898724705, 0.010014493985683326, 0.009659981652289984, 0.004062189958456974, 0.023863456678501982, 0.03372296296999899, 0.03065127335003448, 0.1553253119899839, 0.14317914422812916, 0.17105107518912555, 0.14044925725551805, 0.15889290700952374, 0.1756151506478465, 0.14875268868068436, 0.16200188210624178, 0.14974100875906438, 0.4864428441762796, 0.514305730656517, 0.514123215771227, 0.49674836266828115, 0.5057778073080075, 0.516447814914603, 0.5295601071829783, 0.48057508766386103, 0.49744454472294397, 0.09861290459393035, 0.10403475184841515, 0.1051066306057632, 0.10959429236371399, 0.10113907816886003, 0.09111987592595194, 0.10231667912478026, 0.10084118852518154, 0.0877861338965602, 0.15998470356053862, 0.14335883116884174, 0.4290191182100169, 0.16231370975881687, 0.18682257704404404, 0.1538863849599844, 0.16883676367209788, 0.17116048386561156, 0.16472027854688986, 0.30989119092836837, 0.28480673141652635, 0.29699960456552343, 0.29524245014391814, 0.32828283067025266, 0.34224716787474085, 0.365443285551446, 0.365335936549968, 0.331668237009932, 0.22440348567437118, 0.20353021276064565, 0.19914163322660683, 0.19230217435130526, 0.2042164096611102, 0.20552468670929902, 0.24974358175341327, 0.24459645350386194, 0.21306779831743117, 0.17285949992505445, 0.19319622953490623, 0.19030423886809533, 0.21214434531643267, 0.19068056236032116, 0.20823536948869237, 0.2080320397829314, 0.20102850670579853, 0.19887945776825977, 0.3678677829792161, 0.24807317742704282, 0.2383919999332791, 0.21278999032110268, 0.2437358966012253, 0.3143314587788525, 0.23802818815884552, 0.24477786850955385, 0.233102343483371, 0.47861326653244596, 0.16370507911459264, 0.14727540588005084, 0.7918820573764922, 0.181001078282379, 0.7035530626751083, 0.15828275464998498, 0.24288331527210083, 0.7953379654793069, 0.4827414931245443, 0.20266455856336196, 0.20543799119337636, 0.16617326601011828, 0.424344759212517, 0.44850586429693395, 0.12648884703740093, 0.21144362442171616, 0.687787266279557, 0.18818046091917018, 0.2077043892560818, 0.21502462356990804, 0.2146211787107386, 0.1940838417646129, 0.20911223040597238, 0.18576900831830867, 0.205052630214693, 0.19037552076955877, 0.07621158753591262, 0.07150993599371813, 0.08066285195660694, 0.07630288187635759, 0.08151090119876736, 0.08521374842748186, 0.07857696007825621, 0.07667706500106375, 0.06903345343650014]}, "mutation_prompt": null}
{"id": "dabc9789-c506-4445-90bc-6aa3fd8eeadc", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(5 * dim, 25)  # Slightly increased to enhance diversity\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.6 + 0.5 * np.random.rand()  # Adjusted dynamic scaling factor for improved balance\n        return self.population[a] + F * (self.population[b] - self.population[c])\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / self.budget)  # Fine-tuned adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.3:  # Increased probability for applying Lévy flight\n                    trial += 0.01 * self.levy_flight()  # Optimized step size for better exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolution", "description": "Enhanced adaptive algorithm with improved dynamic mutation strategy, adjusted Lévy flight, and adaptive population size for accelerated convergence.", "configspace": "", "generation": 12, "fitness": 0.28984849680546226, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "e8dbb6a4-96cc-44cb-8823-99ea3bbf8603", "metadata": {"aucs": [0.8012300425519899, 0.7881646070424742, 0.8019839195412107, 0.8215357648370879, 0.7989090842745542, 0.8113130349975302, 0.8029535840324556, 0.7974615813509003, 0.7980317332415285, 0.6271603948944191, 0.6350742516414014, 0.6065502705240771, 0.6094192433567822, 0.6252281695531388, 0.6154200804151473, 0.6319926526621923, 0.5995841685984595, 0.6449297629132158, 0.3538661548770682, 0.3597939590955409, 0.3840595410406581, 0.34951925811743656, 0.32718224156128795, 0.3808479533248009, 0.3534629753363573, 0.3827500144903938, 0.3512431232880341, 0.30257942717572717, 0.3064002306398862, 0.3504031000016129, 0.31111526743017814, 0.2897150898960952, 0.3070707218534974, 0.3033051136000726, 0.16052173673069625, 0.29889365493339526, 0.9855499053237089, 0.9251370007207109, 0.9794649851403003, 0.968250553911417, 0.9721647088820754, 0.9705000699066277, 0.9784352298479513, 0.930948168141695, 0.9408056446485464, 0.3990469547356572, 0.3931352807018019, 0.3808779510812468, 0.3242001768504489, 0.35165613753153724, 0.4059854207391477, 0.36187280379239084, 0.37063399797959007, 0.3607473804240795, 0.6454016260426126, 0.32626977199731755, 0.3226914061305023, 0.2967592667842137, 0.3284200164586326, 0.3358215175390592, 0.3066215753277687, 0.2861184207127926, 0.27585081029254865, 0.1852001015775543, 0.15852254322546944, 0.16945129529715663, 0.15654752617809353, 0.16564220812710995, 0.1784078025752771, 0.17866865469355142, 0.1644064480866536, 0.17970792508454592, 0.15869051418503555, 0.11549350095675559, 0.22795589223769908, 0.17320824998819095, 0.16425472859359846, 0.1482419508982915, 0.17617219570158682, 0.18902678116997296, 0.19778262815301095, 0.025064035036110544, 0.0019866711838451012, 0.007155749886872065, 0.027349535934668934, 0.0011198167934136638, 0.032716564862175446, 0.0038090972461435335, 0.0016274939184193205, 0.007525842699122598, 0.09251897375482876, 0.11167579401363892, 0.11004041473928405, 0.11896389097889937, 0.09417945836394082, 0.11700274228776597, 0.11185711521712349, 0.1209148899135033, 0.11953223458299489, 0.02758321583768808, 0.003924928794507787, 0.011897694539397707, 0.014471585288924005, 0.007099803971915897, 0.005058442280695075, 0.02286705154651314, 0.011779155047370482, 0.0223464495767548, 0.12064193335515971, 0.12786342141781404, 0.12976123481768242, 0.13354698586810032, 0.15604133530328268, 0.15521787911544727, 0.1230199941603578, 0.13055984944453214, 0.12143014883758063, 0.5086338075919195, 0.49598675261118785, 0.47761872933526306, 0.48908238063358545, 0.4842437305996321, 0.4893313613093323, 0.4783685006778251, 0.47997667700938507, 0.49964707589571233, 0.10242905268675462, 0.11365852899431683, 0.09814707722831206, 0.10815369530623153, 0.12260677693741273, 0.08752845907860096, 0.10200828380413385, 0.1094365385844771, 0.1134288753252708, 0.21088318501990166, 0.14957706970076012, 0.1520110893897496, 0.14112824360592513, 0.19222087872938087, 0.15093123057134272, 0.17240877199572147, 0.18856192304331532, 0.15713011263740684, 0.29956462495723934, 0.31664149526327645, 0.30054025073127655, 0.29044556507123653, 0.28045987833858244, 0.3272818704360554, 0.3528217962311234, 0.3504437191237665, 0.34399945428787915, 0.22263140753446065, 0.2188584695911332, 0.19750789575130545, 0.22244682030776353, 0.19279551052446864, 0.2021735956607087, 0.2483377073259544, 0.23198413529059436, 0.24296095608929036, 0.19031658449642552, 0.1955792754928224, 0.1770037417539776, 0.18505228299851828, 0.19225692158196528, 0.21380124330687222, 0.18321355579561882, 0.18840153934600634, 0.1947789163583964, 0.3522540230520024, 0.2326491063770838, 0.29151063939925614, 0.2055396002620168, 0.22830329255380544, 0.22218993305527823, 0.22318505015990675, 0.2555762412944692, 0.2363207356995185, 0.20674440741707245, 0.7836870425545139, 0.1673810824825157, 0.2832107246274058, 0.19811048635332285, 0.3420974483540963, 0.1609027105772538, 0.24591174190418608, 0.18490583437334285, 0.164119834683626, 0.20144218126850022, 0.20045661403783743, 0.32802774714709426, 0.2316461793163349, 0.15890707152405592, 0.2108124270704257, 0.5433034935003642, 0.500417248566391, 0.2041747089828091, 0.19966375247317547, 0.20268371789295758, 0.18746797037594232, 0.18734466795445992, 0.19939644953745916, 0.19129077374950343, 0.20413230785039282, 0.18870583951397446, 0.08128511262482807, 0.08665927761134229, 0.07991237337374257, 0.07191138973329747, 0.08712935856922921, 0.0810202560484442, 0.07420841489176766, 0.0747051431582928, 0.07796180726525836]}, "mutation_prompt": null}
{"id": "713be889-a0cd-43ac-9d38-4ee9c7cb7006", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.5 * np.random.rand()  # Enhanced dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.6 + 0.3 * np.random.rand()  # Alternative strategy with different scaling\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        if np.random.rand() < 0.5:\n            return mutant1\n        else:\n            return mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / self.budget)  # Slightly higher adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.3:  # Slightly increased probability for applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size for better influence\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV2", "description": "Augmented adaptive algorithm with diversified mutation strategies and dynamic population interactions to enhance convergence speed.", "configspace": "", "generation": 13, "fitness": 0.3623594118017986, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.27.", "error": "", "parent_id": "e8dbb6a4-96cc-44cb-8823-99ea3bbf8603", "metadata": {"aucs": [0.876577139599018, 0.8572343308240312, 0.8613016619044441, 0.8770768895723442, 0.8559909443648568, 0.871208046892318, 0.8557572429535052, 0.8689443508131343, 0.8761065243466533, 0.7499367649214301, 0.7461939201716689, 0.7395083671760901, 0.7012327463661622, 0.7352253695484849, 0.768833754408057, 0.741133239393867, 0.7550929774628609, 0.7470065237780183, 0.493494681758893, 0.5048810921443048, 0.41338929656147927, 0.49238307010205196, 0.17323572439100354, 0.5508025624682389, 0.1661972097898522, 0.5246832531096954, 0.5015876047743253, 0.4055361266633848, 0.48788901035167376, 0.38255373127762127, 0.3881979962506422, 0.16700350446811085, 0.3413417245698459, 0.4851001238556283, 0.47594553213250834, 0.15891244202324506, 0.9666046126160261, 0.9737919113228736, 0.95732189879302, 0.9464038384821957, 0.9774693638168221, 0.9550732326964883, 0.9489081603707299, 0.9351547316203561, 0.9675886581807411, 0.5189992389178522, 0.5143076577985872, 0.5204512270397117, 0.5267989136519524, 0.47361414734322616, 0.5635653578599533, 0.4844863057244766, 0.49134132016127674, 0.5179445639908384, 0.8159142961212721, 0.7926912970169993, 0.7522280865138672, 0.8318327237928826, 0.7820640363629581, 0.619367804246717, 0.8880034734952098, 0.8385515129555182, 0.8185818798981458, 0.25585269865139104, 0.22737842016924592, 0.19901185856517145, 0.20785366186644338, 0.19998870940300117, 0.1798281557100021, 0.19235625342132512, 0.22540481099125398, 0.21831009919101385, 0.11581830426624051, 0.20137674709495657, 0.2018490287888588, 0.19291515658661806, 0.2410911860232634, 0.2118229527896598, 0.27976147004656937, 0.1671172887991541, 0.23446506860413097, 0.11957262384106648, 0.10189548538140103, 0.10754173425678493, 0.12280185091569984, 0.12617118065238064, 0.11061569791993953, 0.08312302517491121, 0.05172317841494989, 0.07012910328966104, 0.18610584835317623, 0.1959719553637599, 0.20828572050080263, 0.21626764820478628, 0.23437649390583115, 0.20330403971224664, 0.3540010591141505, 0.21536306921696746, 0.3062800364653545, 0.04626494007827131, 0.045336873109331655, 0.044034696325712885, 0.013116157150918517, 0.04835855839619729, 0.061710315504775126, 0.060751845675827476, 0.11929677423349949, 0.04320733297412516, 0.17690529772593744, 0.19138285657031673, 0.19289357932535856, 0.21541897141830268, 0.21886987169517613, 0.20631632765896457, 0.20835802680758764, 0.17035014906869073, 0.18159618835672642, 0.5339825982818047, 0.5498011460259467, 0.5469238839289805, 0.5419702151947874, 0.5497235485674045, 0.5465745366077486, 0.532367535944756, 0.54294220634111, 0.5795519632677496, 0.1249535131313565, 0.10429774538288439, 0.11117398918864696, 0.11284840445464395, 0.1023631805030012, 0.11538997001470541, 0.10623150235379986, 0.10878400685867273, 0.11068725851827876, 0.14549316082855335, 0.1508895814607506, 0.15710834131329354, 0.14686551119907076, 0.15172000242237937, 0.15969447478331256, 0.1410559415601651, 0.16171473066021003, 0.13694258569064877, 0.36914428676520183, 0.3572807772850263, 0.3673445476711319, 0.3652951174321455, 0.39765798064147306, 0.37676818590394856, 0.4218461489827563, 0.4501857852961363, 0.4061084544087722, 0.24867329994701626, 0.2509718237335873, 0.28559510805244526, 0.2702833585742678, 0.22245069107817528, 0.2726402957969738, 0.321319734656628, 0.30691604103735104, 0.2865572013055433, 0.23076568000295639, 0.19986140926140528, 0.1901331891784135, 0.21696305971060625, 0.1845031129508088, 0.18619411217079573, 0.2149202007876645, 0.18919286992799056, 0.20380383226687704, 0.31639166550401765, 0.44967048967131507, 0.29204590051121726, 0.3053026619855258, 0.23400375359423142, 0.24157730741222017, 0.21304036071653265, 0.3805078587434214, 0.3053149333653846, 0.1852302129499792, 0.1810391420297628, 0.8577234641977034, 0.16926579289378585, 0.19225895280900118, 0.1601573928949649, 0.18568691700920847, 0.18365620577583108, 0.7915382888411391, 0.5644978887177765, 0.72917496447781, 0.7044483041822713, 0.7119494133162786, 0.15965759053561046, 0.7250603169074619, 0.21149967869828412, 0.1546103900267306, 0.127150620313764, 0.191236786871278, 0.18466171095630002, 0.17873311785439705, 0.2155218388795367, 0.18736369717094503, 0.19823974273256506, 0.19673842160628352, 0.1939434624497447, 0.1873383361097768, 0.08200115653443318, 0.08279023593543156, 0.08611485940510433, 0.09338099643605258, 0.08941935834393022, 0.07615701900033167, 0.08414177024421865, 0.07828646594227862, 0.07921954961585109]}, "mutation_prompt": null}
{"id": "a5210795-f080-45b0-a69d-e8e914f70eab", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.5 * np.random.rand()  # Enhanced dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.6 + 0.3 * np.random.rand()  # Alternative strategy with different scaling\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        if np.random.rand() < 0.5:\n            return mutant1\n        else:\n            return mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / self.budget)  # Slightly higher adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.3:  # Slightly increased probability for applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size for better influence\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV2", "description": "Augmented adaptive algorithm with diversified mutation strategies and dynamic population interactions to enhance convergence speed.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "713be889-a0cd-43ac-9d38-4ee9c7cb7006", "metadata": {"aucs": [0.876577139599018, 0.8572343308240312, 0.8613016619044441, 0.8770768895723442, 0.8559909443648568, 0.871208046892318, 0.8557572429535052, 0.8689443508131343, 0.8761065243466533, 0.7499367649214301, 0.7461939201716689, 0.7395083671760901, 0.7012327463661622, 0.7352253695484849, 0.768833754408057, 0.741133239393867, 0.7550929774628609, 0.7470065237780183, 0.493494681758893, 0.5048810921443048, 0.41338929656147927, 0.49238307010205196, 0.17323572439100354, 0.5508025624682389, 0.1661972097898522, 0.5246832531096954, 0.5015876047743253, 0.4055361266633848, 0.48788901035167376, 0.38255373127762127, 0.3881979962506422, 0.16700350446811085, 0.3413417245698459, 0.4851001238556283, 0.47594553213250834, 0.15891244202324506, 0.9666046126160261, 0.9737919113228736, 0.95732189879302, 0.9464038384821957, 0.9774693638168221, 0.9550732326964883, 0.9489081603707299, 0.9351547316203561, 0.9675886581807411, 0.5189992389178522, 0.5143076577985872, 0.5204512270397117, 0.5267989136519524, 0.47361414734322616, 0.5635653578599533, 0.4844863057244766, 0.49134132016127674, 0.5179445639908384, 0.8159142961212721, 0.7926912970169993, 0.7522280865138672, 0.8318327237928826, 0.7820640363629581, 0.619367804246717, 0.8880034734952098, 0.8385515129555182, 0.8185818798981458, 0.25585269865139104, 0.22737842016924592, 0.19901185856517145, 0.20785366186644338, 0.19998870940300117, 0.1798281557100021, 0.19235625342132512, 0.22540481099125398, 0.21831009919101385, 0.11581830426624051, 0.20137674709495657, 0.2018490287888588, 0.19291515658661806, 0.2410911860232634, 0.2118229527896598, 0.27976147004656937, 0.1671172887991541, 0.23446506860413097, 0.11957262384106648, 0.10189548538140103, 0.10754173425678493, 0.12280185091569984, 0.12617118065238064, 0.11061569791993953, 0.08312302517491121, 0.05172317841494989, 0.07012910328966104, 0.18610584835317623, 0.1959719553637599, 0.20828572050080263, 0.21626764820478628, 0.23437649390583115, 0.20330403971224664, 0.3540010591141505, 0.21536306921696746, 0.3062800364653545, 0.04626494007827131, 0.045336873109331655, 0.044034696325712885, 0.013116157150918517, 0.04835855839619729, 0.061710315504775126, 0.060751845675827476, 0.11929677423349949, 0.04320733297412516, 0.17690529772593744, 0.19138285657031673, 0.19289357932535856, 0.21541897141830268, 0.21886987169517613, 0.20631632765896457, 0.20835802680758764, 0.17035014906869073, 0.18159618835672642, 0.5339825982818047, 0.5498011460259467, 0.5469238839289805, 0.5419702151947874, 0.5497235485674045, 0.5465745366077486, 0.532367535944756, 0.54294220634111, 0.5795519632677496, 0.1249535131313565, 0.10429774538288439, 0.11117398918864696, 0.11284840445464395, 0.1023631805030012, 0.11538997001470541, 0.10623150235379986, 0.10878400685867273, 0.11068725851827876, 0.14549316082855335, 0.1508895814607506, 0.15710834131329354, 0.14686551119907076, 0.15172000242237937, 0.15969447478331256, 0.1410559415601651, 0.16171473066021003, 0.13694258569064877, 0.36914428676520183, 0.3572807772850263, 0.3673445476711319, 0.3652951174321455, 0.39765798064147306, 0.37676818590394856, 0.4218461489827563, 0.4501857852961363, 0.4061084544087722, 0.24867329994701626, 0.2509718237335873, 0.28559510805244526, 0.2702833585742678, 0.22245069107817528, 0.2726402957969738, 0.321319734656628, 0.30691604103735104, 0.2865572013055433, 0.23076568000295639, 0.19986140926140528, 0.1901331891784135, 0.21696305971060625, 0.1845031129508088, 0.18619411217079573, 0.2149202007876645, 0.18919286992799056, 0.20380383226687704, 0.31639166550401765, 0.44967048967131507, 0.29204590051121726, 0.3053026619855258, 0.23400375359423142, 0.24157730741222017, 0.21304036071653265, 0.3805078587434214, 0.3053149333653846, 0.1852302129499792, 0.1810391420297628, 0.8577234641977034, 0.16926579289378585, 0.19225895280900118, 0.1601573928949649, 0.18568691700920847, 0.18365620577583108, 0.7915382888411391, 0.5644978887177765, 0.72917496447781, 0.7044483041822713, 0.7119494133162786, 0.15965759053561046, 0.7250603169074619, 0.21149967869828412, 0.1546103900267306, 0.127150620313764, 0.191236786871278, 0.18466171095630002, 0.17873311785439705, 0.2155218388795367, 0.18736369717094503, 0.19823974273256506, 0.19673842160628352, 0.1939434624497447, 0.1873383361097768, 0.08200115653443318, 0.08279023593543156, 0.08611485940510433, 0.09338099643605258, 0.08941935834393022, 0.07615701900033167, 0.08414177024421865, 0.07828646594227862, 0.07921954961585109]}, "mutation_prompt": null}
{"id": "941e9422-c304-4f2c-b884-3255e34ebc26", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(5 * dim, 25)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.4 + 0.6 * np.random.rand()  # Enhanced dynamic scaling factor with broader range\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.5 + 0.4 * np.random.rand()  # Alternative strategy with distinct scaling\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        if np.random.rand() < 0.6:  # Increased probability for strategy selection based on evaluation\n            return mutant1\n        else:\n            return mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / self.budget) + 0.05  # Adjusted adaptive crossover probability for early exploration\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Enhanced probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Optimized step size for better influence\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Enhanced population dynamics and adaptive parameter control for improved convergence efficiency.", "configspace": "", "generation": 15, "fitness": 0.35262689891614873, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.26.", "error": "", "parent_id": "713be889-a0cd-43ac-9d38-4ee9c7cb7006", "metadata": {"aucs": [0.84815517798776, 0.8553398279114658, 0.8528165600059492, 0.843008868762174, 0.8445969278765659, 0.8574255705807774, 0.8589475712960597, 0.8508174908449302, 0.8478719098159812, 0.7004452955174834, 0.6968704966718733, 0.6847929420772361, 0.7072124377355646, 0.6975730055754706, 0.7073901437868162, 0.7065381792467825, 0.6962747319021249, 0.7127188498095123, 0.3506469814768741, 0.3255748544106153, 0.47483561679885766, 0.4197456514538288, 0.3404016544796419, 0.4092153086699928, 0.38742310922100553, 0.431016062660993, 0.3427523312677865, 0.3161848412857704, 0.34605642244981893, 0.3480156593872079, 0.34478295104672607, 0.3301051782241533, 0.3611293041346083, 0.15343708225418118, 0.3166140850053917, 0.3538420170441715, 0.9349952869437944, 0.984773564839438, 0.941412049844974, 0.9339797721688138, 0.9504113468992635, 0.9634621834497341, 0.9395508335385073, 0.9404849726248447, 0.9505575294297327, 0.4864133547185986, 0.5102356727491604, 0.44354949062118254, 0.4883659422339619, 0.4708073553816474, 0.4881077924197287, 0.4383225852509326, 0.491493270448076, 0.46790693394949934, 0.7962965203315057, 0.744569578571944, 0.807909162364889, 0.7998337905440356, 0.784909380263753, 0.7884687209800845, 0.7966767735727347, 0.8415770792413053, 0.7341423765245141, 0.21704946182621165, 0.19707097878055624, 0.22926678415862523, 0.1917232693310893, 0.24374283114476025, 0.2197245850114029, 0.1901422561644983, 0.18582543049720546, 0.2789481407635349, 0.14007152426481984, 0.13687610575977527, 0.1988631550701745, 0.2150841790177509, 0.26819637761437254, 0.18783777544043345, 0.20896344676987721, 0.19054890498438715, 0.22393181278645558, 0.17780476034760428, 0.053292115419867, 0.1252559241301977, 0.07809527524563675, 0.08381150154966177, 0.04732413037243588, 0.1087404957503113, 0.10179780991269693, 0.1055533946819398, 0.17365470982442544, 0.2402630796426911, 0.20992173233688305, 0.17956713635042965, 0.16672805924884215, 0.21538736153509142, 0.23102654334437533, 0.22095573836858706, 0.2584600493519823, 0.0322637621684827, 0.047214230804184854, 0.0538025473441166, 0.06957803284221631, 0.054088215111770865, 0.039796993409706216, 0.05215295351536975, 0.08547682747737706, 0.0907399998717634, 0.19699349225770169, 0.16390782201575038, 0.16819047716639812, 0.18293083776472818, 0.20099316912030118, 0.21475025844490436, 0.1807626910501593, 0.17696915278900305, 0.1575790496857411, 0.5260284797784642, 0.5504495899583075, 0.5380374732293076, 0.5245378174093778, 0.5470417258144924, 0.5536969976841357, 0.5370560491703109, 0.5289820416332587, 0.5415983076093402, 0.11295927321082888, 0.11833225884219467, 0.1199099476593829, 0.11926924044658316, 0.10234082970802305, 0.11855819597602257, 0.12360146941883321, 0.08913033614220489, 0.12182436671328434, 0.14764557226316866, 0.1418311422407711, 0.1829753860979767, 0.14143350907687546, 0.15555282688526573, 0.17513717578390864, 0.15831900883039363, 0.136745536356222, 0.1488234726059554, 0.34831166499559807, 0.38764947721301346, 0.36816003984033363, 0.3497049817209936, 0.3635277586707315, 0.353368696838256, 0.37465492102973563, 0.4134446106966585, 0.42412047957646615, 0.2150834916267893, 0.22434912740913115, 0.27557819319656374, 0.24452164060403558, 0.25715960056114096, 0.24734763820746097, 0.28721767830400435, 0.2693664235936454, 0.25738467131144693, 0.1912830674231979, 0.19957630408621918, 0.189283117571307, 0.20426741786001168, 0.19032425764671124, 0.20681073291056418, 0.19889562651752057, 0.19891466438717886, 0.18905353414955806, 0.5169212549932077, 0.2803446879755699, 0.24332428970387443, 0.505053810202361, 0.20293371386219639, 0.23269373783218938, 0.2634062174913101, 0.24152885844629512, 0.3031807784794033, 0.1689922016978559, 0.8755234039120979, 0.15236829185488587, 0.794435036414061, 0.1839303873991628, 0.7876290092047694, 0.5954100339902948, 0.6792450645684242, 0.7262680800128707, 0.2067615592761618, 0.2018880793638278, 0.18309158949342785, 0.1995580332859147, 0.19863301946741163, 0.20308292368337766, 0.2121856386334383, 0.20931834149400286, 0.7254130032912216, 0.1854453710651952, 0.18766054760599404, 0.18525111653905135, 0.20230406152848934, 0.19486606286703512, 0.1940019495144153, 0.18307484301243804, 0.19304708783614155, 0.19398508087773414, 0.08347115223639834, 0.09005374247090259, 0.08980699894293442, 0.08185832061594867, 0.10021988377418078, 0.07289114915922512, 0.08188781127801958, 0.08456264908760025, 0.06923767473156528]}, "mutation_prompt": null}
{"id": "e18e386e-6922-4350-be6d-4539b480f675", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(5 * dim, 25)  # Slightly increased population size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n                if self.eval_count >= self.budget:\n                    return\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.4 + 0.4 * np.random.rand()  # Broader range for scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.5 + 0.4 * np.random.rand()  # Consistent diversity in alternative strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        if np.random.rand() < 0.55:\n            return mutant1\n        else:\n            return mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / self.budget) + 0.05  # Adjusted adaptive crossover range\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        if self.eval_count < self.budget:\n            trial_fitness = func(trial)\n            self.eval_count += 1\n            if trial_fitness < self.fitness[target_idx]:\n                self.population[target_idx] = trial\n                self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Refined probability for Lévy flight application\n                    trial += 0.005 * self.levy_flight()  # Adjusted step size for incremental improvement\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Slightly increased adaptive crossover and mutation diversity with refined population evaluation to enhance convergence efficiency.", "configspace": "", "generation": 16, "fitness": 0.3531559422571032, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.26.", "error": "", "parent_id": "713be889-a0cd-43ac-9d38-4ee9c7cb7006", "metadata": {"aucs": [0.8681030491900678, 0.8641443771916958, 0.872595331089547, 0.8689934858257093, 0.8730365158045278, 0.87337327308373, 0.8639116130616663, 0.8662394318524753, 0.8758069409409699, 0.7334904862903922, 0.71145862520345, 0.7114970205045704, 0.743108150212372, 0.6915605618088118, 0.7231205149551434, 0.6904339871223382, 0.7198167667406463, 0.7354343244973167, 0.3874064843773455, 0.5046189999800332, 0.47609044119649857, 0.3808753229537095, 0.375142423593014, 0.45350775048107794, 0.4335705006747863, 0.4280145199218185, 0.401225402251026, 0.3515512604598332, 0.1560527669599916, 0.3185684271216197, 0.1639057012135774, 0.3374183886813513, 0.15864838507749357, 0.39271181276640976, 0.2900135992788, 0.4770110857168486, 0.9442653714723179, 0.9397546957186151, 0.9340603306285791, 0.9443019277829949, 0.9384407459872122, 0.9422395137851316, 0.9592429513901335, 0.9673902951565908, 0.9691378139557335, 0.5077732846720144, 0.5242926564719617, 0.5203540294482165, 0.5113380874600588, 0.477169573013692, 0.47735733759523125, 0.4967076656642012, 0.5090236341063601, 0.48538322392310773, 0.6825551031120813, 0.8211913863463136, 0.8688897550557015, 0.8343708588727523, 0.8476154401001087, 0.8287670377795743, 0.7809931538174157, 0.7897872533779149, 0.7019499280537732, 0.20638890436205493, 0.21315616138414883, 0.1906645913061611, 0.2185210993165878, 0.2079205652967826, 0.208566604343438, 0.24430164990391112, 0.2007313303564564, 0.2326490941225252, 0.22013574951504056, 0.21952982434496027, 0.19867419041973444, 0.17603963271846956, 0.2221235866602418, 0.24079652236104365, 0.22997494598865498, 0.22057206610483426, 0.22606079447724814, 0.08794864805283831, 0.0949081616599271, 0.11821570435280648, 0.15468007895359603, 0.1504933061506767, 0.09441083598394362, 0.15560700135535532, 0.15150857442009602, 0.10460851198578203, 0.10743710429421749, 0.18504481651700566, 0.22733820874223432, 0.18022728531008192, 0.21805361324707873, 0.16830169261015182, 0.2700304696105795, 0.27385950421146976, 0.25066239328071416, 0.04460075767984528, 0.07267350779871906, 0.060574690281593235, 0.0375562819371873, 0.06705429606710533, 0.09546882507390742, 0.05731207543044037, 0.06666637778434836, 0.05094775707233823, 0.17959990688386174, 0.20026569767813873, 0.20649732297072532, 0.1912673359396161, 0.21812376415263912, 0.20360362305076474, 0.18372977137151292, 0.17973552990464325, 0.1887234358630584, 0.5465814194557709, 0.5434511665841861, 0.5495590145259978, 0.5477413572927246, 0.5557461338737468, 0.5695060158110626, 0.5686794160462304, 0.577588445703831, 0.5495414797017635, 0.11960067738752111, 0.10481786084641864, 0.13318455827302678, 0.14550803821459612, 0.114090261521823, 0.10330540233126972, 0.10668619644878441, 0.09989271300076685, 0.10690536206868562, 0.1393972929608226, 0.16423908293868295, 0.22439651808116823, 0.14899844773721616, 0.15799873396320052, 0.13724671606660144, 0.1255137244987945, 0.13915574272653297, 0.1705357406277057, 0.3727798022065172, 0.35852919857829024, 0.34693998689862315, 0.3641515292956662, 0.4295778774623418, 0.41086059012866294, 0.4498721548218182, 0.4450012966313921, 0.45321847331734033, 0.2850436984062883, 0.25490025643396275, 0.2750017301784162, 0.27714940385449083, 0.26012498704471854, 0.25545655660569166, 0.3120092535657979, 0.3055327117703125, 0.2861416127050982, 0.21375516444030496, 0.19893667199392207, 0.19990000209265124, 0.1901564811791263, 0.19461584406533816, 0.1898706837884072, 0.2035155437400762, 0.19579466882507035, 0.1979441346455899, 0.21355917503499589, 0.23450681301681686, 0.3558314974663733, 0.25832926528196254, 0.4166120298308589, 0.2489641455758561, 0.24335481768618683, 0.26254137192993654, 0.2335887867493437, 0.17067530416825627, 0.797610636737487, 0.15227785974091512, 0.1789366024628123, 0.17853112759433365, 0.19483524643936845, 0.18872279711148177, 0.17938603176893464, 0.7635877146571685, 0.8177225893713339, 0.20691264732301173, 0.4118198323116694, 0.2092065205263095, 0.20078990166614585, 0.20418048663765354, 0.2113337930496919, 0.20822306410986202, 0.5201482531683658, 0.20464478071916914, 0.17630875642708832, 0.22162093801595018, 0.18421281632388642, 0.18046696096944792, 0.18549428758914144, 0.18036127500294297, 0.17976495012833782, 0.1846056315916127, 0.0929644747275854, 0.08239833138658892, 0.09106479253494104, 0.0889168671747802, 0.0864715344367103, 0.08542519013649674, 0.08330988667689687, 0.08624014564263494, 0.09722079977835452]}, "mutation_prompt": null}
{"id": "8ec79acd-6173-4e67-b676-af915e122512", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.5 * np.random.rand()  # Enhanced dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.6 + 0.3 * np.random.rand()  # Alternative strategy with different scaling\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        if np.random.rand() < 0.5:\n            return mutant1\n        else:\n            return mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / self.budget)  # Slightly higher adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.3:  # Slightly increased probability for applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size for better influence\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV2", "description": "Augmented adaptive algorithm with diversified mutation strategies and dynamic population interactions to enhance convergence speed.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "713be889-a0cd-43ac-9d38-4ee9c7cb7006", "metadata": {"aucs": [0.876577139599018, 0.8572343308240312, 0.8613016619044441, 0.8770768895723442, 0.8559909443648568, 0.871208046892318, 0.8557572429535052, 0.8689443508131343, 0.8761065243466533, 0.7499367649214301, 0.7461939201716689, 0.7395083671760901, 0.7012327463661622, 0.7352253695484849, 0.768833754408057, 0.741133239393867, 0.7550929774628609, 0.7470065237780183, 0.493494681758893, 0.5048810921443048, 0.41338929656147927, 0.49238307010205196, 0.17323572439100354, 0.5508025624682389, 0.1661972097898522, 0.5246832531096954, 0.5015876047743253, 0.4055361266633848, 0.48788901035167376, 0.38255373127762127, 0.3881979962506422, 0.16700350446811085, 0.3413417245698459, 0.4851001238556283, 0.47594553213250834, 0.15891244202324506, 0.9666046126160261, 0.9737919113228736, 0.95732189879302, 0.9464038384821957, 0.9774693638168221, 0.9550732326964883, 0.9489081603707299, 0.9351547316203561, 0.9675886581807411, 0.5189992389178522, 0.5143076577985872, 0.5204512270397117, 0.5267989136519524, 0.47361414734322616, 0.5635653578599533, 0.4844863057244766, 0.49134132016127674, 0.5179445639908384, 0.8159142961212721, 0.7926912970169993, 0.7522280865138672, 0.8318327237928826, 0.7820640363629581, 0.619367804246717, 0.8880034734952098, 0.8385515129555182, 0.8185818798981458, 0.25585269865139104, 0.22737842016924592, 0.19901185856517145, 0.20785366186644338, 0.19998870940300117, 0.1798281557100021, 0.19235625342132512, 0.22540481099125398, 0.21831009919101385, 0.11581830426624051, 0.20137674709495657, 0.2018490287888588, 0.19291515658661806, 0.2410911860232634, 0.2118229527896598, 0.27976147004656937, 0.1671172887991541, 0.23446506860413097, 0.11957262384106648, 0.10189548538140103, 0.10754173425678493, 0.12280185091569984, 0.12617118065238064, 0.11061569791993953, 0.08312302517491121, 0.05172317841494989, 0.07012910328966104, 0.18610584835317623, 0.1959719553637599, 0.20828572050080263, 0.21626764820478628, 0.23437649390583115, 0.20330403971224664, 0.3540010591141505, 0.21536306921696746, 0.3062800364653545, 0.04626494007827131, 0.045336873109331655, 0.044034696325712885, 0.013116157150918517, 0.04835855839619729, 0.061710315504775126, 0.060751845675827476, 0.11929677423349949, 0.04320733297412516, 0.17690529772593744, 0.19138285657031673, 0.19289357932535856, 0.21541897141830268, 0.21886987169517613, 0.20631632765896457, 0.20835802680758764, 0.17035014906869073, 0.18159618835672642, 0.5339825982818047, 0.5498011460259467, 0.5469238839289805, 0.5419702151947874, 0.5497235485674045, 0.5465745366077486, 0.532367535944756, 0.54294220634111, 0.5795519632677496, 0.1249535131313565, 0.10429774538288439, 0.11117398918864696, 0.11284840445464395, 0.1023631805030012, 0.11538997001470541, 0.10623150235379986, 0.10878400685867273, 0.11068725851827876, 0.14549316082855335, 0.1508895814607506, 0.15710834131329354, 0.14686551119907076, 0.15172000242237937, 0.15969447478331256, 0.1410559415601651, 0.16171473066021003, 0.13694258569064877, 0.36914428676520183, 0.3572807772850263, 0.3673445476711319, 0.3652951174321455, 0.39765798064147306, 0.37676818590394856, 0.4218461489827563, 0.4501857852961363, 0.4061084544087722, 0.24867329994701626, 0.2509718237335873, 0.28559510805244526, 0.2702833585742678, 0.22245069107817528, 0.2726402957969738, 0.321319734656628, 0.30691604103735104, 0.2865572013055433, 0.23076568000295639, 0.19986140926140528, 0.1901331891784135, 0.21696305971060625, 0.1845031129508088, 0.18619411217079573, 0.2149202007876645, 0.18919286992799056, 0.20380383226687704, 0.31639166550401765, 0.44967048967131507, 0.29204590051121726, 0.3053026619855258, 0.23400375359423142, 0.24157730741222017, 0.21304036071653265, 0.3805078587434214, 0.3053149333653846, 0.1852302129499792, 0.1810391420297628, 0.8577234641977034, 0.16926579289378585, 0.19225895280900118, 0.1601573928949649, 0.18568691700920847, 0.18365620577583108, 0.7915382888411391, 0.5644978887177765, 0.72917496447781, 0.7044483041822713, 0.7119494133162786, 0.15965759053561046, 0.7250603169074619, 0.21149967869828412, 0.1546103900267306, 0.127150620313764, 0.191236786871278, 0.18466171095630002, 0.17873311785439705, 0.2155218388795367, 0.18736369717094503, 0.19823974273256506, 0.19673842160628352, 0.1939434624497447, 0.1873383361097768, 0.08200115653443318, 0.08279023593543156, 0.08611485940510433, 0.09338099643605258, 0.08941935834393022, 0.07615701900033167, 0.08414177024421865, 0.07828646594227862, 0.07921954961585109]}, "mutation_prompt": null}
{"id": "c7946b53-61cf-4164-a048-6442df81d322", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(5 * dim, 25)  # Increased population size for better diversity\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.4):  # Modified beta for Lévy flight for improved step diversity\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.4 + 0.5 * np.random.rand()  # Adjusted dynamic scaling factor for balance\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.5 + 0.4 * np.random.rand()  # Slightly adjusted strategy for enhanced variability\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        if np.random.rand() < 0.6:  # Adjusted probability for mutation strategy choice\n            return mutant1\n        else:\n            return mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / self.budget)  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for greater impact\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Enhanced Differential Evolution with adaptive Lévy flights and dynamic crossover for improved exploration and exploitation balance.", "configspace": "", "generation": 18, "fitness": 0.339089116079708, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "713be889-a0cd-43ac-9d38-4ee9c7cb7006", "metadata": {"aucs": [0.854580237441541, 0.8370131979287492, 0.8613823333226113, 0.8627080229582648, 0.8560290514806257, 0.8602381622627491, 0.8624732416022336, 0.8573586640606838, 0.8647442338834537, 0.7188423052471089, 0.7241008848710553, 0.6852761955737197, 0.7064989543328521, 0.6849606186479993, 0.7160655638689024, 0.707890913001141, 0.7150348907195825, 0.703288436795471, 0.3348274461553581, 0.4441869506761673, 0.35153933163622075, 0.3987957308914504, 0.4446598783904402, 0.5022402901683385, 0.4011784027011823, 0.44671623093537904, 0.4024037526592612, 0.3225216335134129, 0.285441599267539, 0.15603436932635928, 0.15540225603325342, 0.11628741932808029, 0.1560187800492313, 0.16150800916431474, 0.17267094391845095, 0.30768191466256334, 0.9635052750840106, 0.9459912501515507, 0.9492076548417416, 0.9594543011825277, 0.9584328315039491, 0.9596944216349198, 0.9506224734214637, 0.9696690263076233, 0.9504935081328156, 0.4688815447720742, 0.48866494272634786, 0.44937026173138606, 0.44633667648448594, 0.5107038631294424, 0.4948824304050775, 0.4784577001001876, 0.43473945270574377, 0.4559113983020099, 0.7841368141385303, 0.7760288299953481, 0.5506768380017648, 0.41904443954041426, 0.7499902839250248, 0.764434347123526, 0.7197686321384076, 0.8131713701980205, 0.7626488246115537, 0.18955082369205434, 0.1851769651761338, 0.18946268661777366, 0.19650142545891292, 0.20336538723949626, 0.21218757416417677, 0.1892572222759592, 0.24225680266215122, 0.18531564079795326, 0.1782813115660039, 0.23295404458570135, 0.22460291183906667, 0.16646843784472987, 0.20304469341265685, 0.1727073413570459, 0.2559280327949893, 0.24901404619004297, 0.1866652064016071, 0.05306860237732913, 0.08905349206656887, 0.026884501679345307, 0.07642021116109388, 0.05805016472016922, 0.05814292756621853, 0.05093658881738106, 0.06076783155091503, 0.036807845695818964, 0.1422646814648224, 0.126730006775847, 0.18915852196809824, 0.15345733377514714, 0.1639953074382322, 0.11043026648569465, 0.16280957268409368, 0.21753106481783346, 0.17388261505618863, 0.010907370919764459, 0.02658462883127033, 0.04038165041640096, 0.03466721698634723, 0.019620087708235756, 0.0402515407965961, 0.017155711870357804, 0.02474978100229186, 0.017958287224077885, 0.14288346392950702, 0.19121034424576666, 0.15457498164768735, 0.1943728505499418, 0.1818835896726989, 0.19017110175789775, 0.16248474678935598, 0.1677868239349969, 0.173169933766662, 0.5409638058171774, 0.5266790481730077, 0.521695668468364, 0.5437675828797095, 0.5586590798240793, 0.5151964040879526, 0.522382331738444, 0.5397807063702269, 0.5401888579440575, 0.13360224199469162, 0.14062468433140873, 0.1169304132279152, 0.10205958038238927, 0.12587640750273354, 0.11997823367645966, 0.11020919399602302, 0.1317936556423116, 0.12409280385047383, 0.16365160387586042, 0.13991163179718968, 0.14772147881688158, 0.17910404798434232, 0.15924084315575293, 0.14552187038264475, 0.18101251064506518, 0.1641243974114055, 0.1601008061921977, 0.35813750408432043, 0.34338407340918753, 0.40120543669186404, 0.3634709347959034, 0.35846950782345866, 0.344258529541828, 0.42920879084413477, 0.39244841165964073, 0.4258254682652981, 0.2727602603915693, 0.25259591433805995, 0.2694909200673673, 0.25611954475787035, 0.23752615581426506, 0.2426371335449502, 0.2846144667322891, 0.2647452848475277, 0.2579605377508173, 0.2296163433728956, 0.21488560689070124, 0.18114019808781134, 0.19192762758231852, 0.18938688577661456, 0.1900441188244475, 0.20372945454974312, 0.18375424789973605, 0.20223221690390458, 0.21082601111734955, 0.22044233419658343, 0.21052664242920482, 0.26055217328226976, 0.24801998444355944, 0.22237483944587944, 0.23699157354206868, 0.27394158819160186, 0.253312219849563, 0.8304951284534277, 0.8262432510559536, 0.6842204392664684, 0.17680955474403348, 0.1750859557832649, 0.5652147830797569, 0.6094208067963818, 0.18126375384693383, 0.815173741252531, 0.1652239032594598, 0.166578271763139, 0.7134145369369111, 0.20318512257882526, 0.2103884937267504, 0.20230068624794795, 0.15940047175058203, 0.20767332791626858, 0.6451484137042234, 0.1825566652498113, 0.20390134179716357, 0.18724578381119183, 0.1894310306710968, 0.18865905870989996, 0.17857097793892085, 0.2017441202587138, 0.19008193956115382, 0.19277342529229846, 0.08153892999209433, 0.09117497925253737, 0.07204014841621598, 0.0799702030605074, 0.09347921528259395, 0.07102410052558317, 0.08121662908408156, 0.08466419807832737, 0.08503641016371055]}, "mutation_prompt": null}
{"id": "f414adf0-9140-4349-9ef4-6c11c28cbb67", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.5 * np.random.rand()  # Enhanced dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.6 + 0.3 * np.random.rand()  # Alternative strategy with different scaling\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        if np.random.rand() < 0.5:\n            return mutant1\n        else:\n            return mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / self.budget)  # Slightly higher adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.3:  # Slightly increased probability for applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size for better influence\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV2", "description": "Augmented adaptive algorithm with diversified mutation strategies and dynamic population interactions to enhance convergence speed.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "713be889-a0cd-43ac-9d38-4ee9c7cb7006", "metadata": {"aucs": [0.876577139599018, 0.8572343308240312, 0.8613016619044441, 0.8770768895723442, 0.8559909443648568, 0.871208046892318, 0.8557572429535052, 0.8689443508131343, 0.8761065243466533, 0.7499367649214301, 0.7461939201716689, 0.7395083671760901, 0.7012327463661622, 0.7352253695484849, 0.768833754408057, 0.741133239393867, 0.7550929774628609, 0.7470065237780183, 0.493494681758893, 0.5048810921443048, 0.41338929656147927, 0.49238307010205196, 0.17323572439100354, 0.5508025624682389, 0.1661972097898522, 0.5246832531096954, 0.5015876047743253, 0.4055361266633848, 0.48788901035167376, 0.38255373127762127, 0.3881979962506422, 0.16700350446811085, 0.3413417245698459, 0.4851001238556283, 0.47594553213250834, 0.15891244202324506, 0.9666046126160261, 0.9737919113228736, 0.95732189879302, 0.9464038384821957, 0.9774693638168221, 0.9550732326964883, 0.9489081603707299, 0.9351547316203561, 0.9675886581807411, 0.5189992389178522, 0.5143076577985872, 0.5204512270397117, 0.5267989136519524, 0.47361414734322616, 0.5635653578599533, 0.4844863057244766, 0.49134132016127674, 0.5179445639908384, 0.8159142961212721, 0.7926912970169993, 0.7522280865138672, 0.8318327237928826, 0.7820640363629581, 0.619367804246717, 0.8880034734952098, 0.8385515129555182, 0.8185818798981458, 0.25585269865139104, 0.22737842016924592, 0.19901185856517145, 0.20785366186644338, 0.19998870940300117, 0.1798281557100021, 0.19235625342132512, 0.22540481099125398, 0.21831009919101385, 0.11581830426624051, 0.20137674709495657, 0.2018490287888588, 0.19291515658661806, 0.2410911860232634, 0.2118229527896598, 0.27976147004656937, 0.1671172887991541, 0.23446506860413097, 0.11957262384106648, 0.10189548538140103, 0.10754173425678493, 0.12280185091569984, 0.12617118065238064, 0.11061569791993953, 0.08312302517491121, 0.05172317841494989, 0.07012910328966104, 0.18610584835317623, 0.1959719553637599, 0.20828572050080263, 0.21626764820478628, 0.23437649390583115, 0.20330403971224664, 0.3540010591141505, 0.21536306921696746, 0.3062800364653545, 0.04626494007827131, 0.045336873109331655, 0.044034696325712885, 0.013116157150918517, 0.04835855839619729, 0.061710315504775126, 0.060751845675827476, 0.11929677423349949, 0.04320733297412516, 0.17690529772593744, 0.19138285657031673, 0.19289357932535856, 0.21541897141830268, 0.21886987169517613, 0.20631632765896457, 0.20835802680758764, 0.17035014906869073, 0.18159618835672642, 0.5339825982818047, 0.5498011460259467, 0.5469238839289805, 0.5419702151947874, 0.5497235485674045, 0.5465745366077486, 0.532367535944756, 0.54294220634111, 0.5795519632677496, 0.1249535131313565, 0.10429774538288439, 0.11117398918864696, 0.11284840445464395, 0.1023631805030012, 0.11538997001470541, 0.10623150235379986, 0.10878400685867273, 0.11068725851827876, 0.14549316082855335, 0.1508895814607506, 0.15710834131329354, 0.14686551119907076, 0.15172000242237937, 0.15969447478331256, 0.1410559415601651, 0.16171473066021003, 0.13694258569064877, 0.36914428676520183, 0.3572807772850263, 0.3673445476711319, 0.3652951174321455, 0.39765798064147306, 0.37676818590394856, 0.4218461489827563, 0.4501857852961363, 0.4061084544087722, 0.24867329994701626, 0.2509718237335873, 0.28559510805244526, 0.2702833585742678, 0.22245069107817528, 0.2726402957969738, 0.321319734656628, 0.30691604103735104, 0.2865572013055433, 0.23076568000295639, 0.19986140926140528, 0.1901331891784135, 0.21696305971060625, 0.1845031129508088, 0.18619411217079573, 0.2149202007876645, 0.18919286992799056, 0.20380383226687704, 0.31639166550401765, 0.44967048967131507, 0.29204590051121726, 0.3053026619855258, 0.23400375359423142, 0.24157730741222017, 0.21304036071653265, 0.3805078587434214, 0.3053149333653846, 0.1852302129499792, 0.1810391420297628, 0.8577234641977034, 0.16926579289378585, 0.19225895280900118, 0.1601573928949649, 0.18568691700920847, 0.18365620577583108, 0.7915382888411391, 0.5644978887177765, 0.72917496447781, 0.7044483041822713, 0.7119494133162786, 0.15965759053561046, 0.7250603169074619, 0.21149967869828412, 0.1546103900267306, 0.127150620313764, 0.191236786871278, 0.18466171095630002, 0.17873311785439705, 0.2155218388795367, 0.18736369717094503, 0.19823974273256506, 0.19673842160628352, 0.1939434624497447, 0.1873383361097768, 0.08200115653443318, 0.08279023593543156, 0.08611485940510433, 0.09338099643605258, 0.08941935834393022, 0.07615701900033167, 0.08414177024421865, 0.07828646594227862, 0.07921954961585109]}, "mutation_prompt": null}
{"id": "0312b1b3-8278-44a9-9931-784ecb95df67", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n        \n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.6 + 0.4 * np.random.rand()  # Slightly more dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.5 + 0.3 * np.random.rand()  # Adjusted strategy scaling\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        if np.random.rand() < 0.55:  # Adjusted selection probability\n            return mutant1\n        else:\n            return mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / self.budget)  # Slightly adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.28:  # Slightly adjusted probability for Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly tuned step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Enhanced diversity and convergence through adaptive selection pressure and dynamic parameter adjustment.", "configspace": "", "generation": 20, "fitness": 0.3610045381064779, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.27.", "error": "", "parent_id": "713be889-a0cd-43ac-9d38-4ee9c7cb7006", "metadata": {"aucs": [0.8740796583700542, 0.8739504233752292, 0.8676232877449839, 0.8838370271562757, 0.874959138634813, 0.8725190856236473, 0.871923898380347, 0.8646745940592501, 0.8747484619028918, 0.7579840757893759, 0.7524304653301537, 0.747380755227944, 0.76211886168121, 0.7511485702304054, 0.7384580986057445, 0.7739088173198334, 0.7471186372013348, 0.7746700194060598, 0.5206702102296357, 0.49870357593896775, 0.5809244720494874, 0.520662549023938, 0.5206057078615471, 0.46500566487833217, 0.5233527082350998, 0.557673031313337, 0.562757146370531, 0.4877331108052658, 0.4394855357411114, 0.1509674633491359, 0.602578014677519, 0.5107220270784405, 0.4341722653292619, 0.16656726386382692, 0.5373448225117811, 0.4369186291648338, 0.9534206056512311, 0.9649392135744292, 0.9545610531736065, 0.9762956739350498, 0.9797543262573022, 0.9844354596296626, 0.96371225024164, 0.9368339626450721, 0.9702913108093526, 0.5616248704760434, 0.4724847573248864, 0.5498312960259062, 0.5431066604820037, 0.5445775957524782, 0.5293698889635691, 0.49875272853684205, 0.482620111813449, 0.4893924636125827, 0.7671284928855938, 0.7628821177034403, 0.7504740455075857, 0.7813980236202248, 0.7957043302928573, 0.7980194745580946, 0.7221241234547582, 0.6856408880666411, 0.7861304363965014, 0.2215261424626881, 0.22809801477740455, 0.20994528543989377, 0.1914659344161317, 0.1960152924965456, 0.2313107797498608, 0.19334127222780462, 0.18292941744367341, 0.1904689536080727, 0.11893816299956339, 0.21067685493855826, 0.1175899415366235, 0.20950961379434552, 0.1920460054547699, 0.22603178373210242, 0.23750136122808696, 0.2137728510039062, 0.21615000921229144, 0.08701532593796713, 0.04665176787954983, 0.05974812468006985, 0.0744233196695464, 0.04475973533961364, 0.010867151702728006, 0.06792894952687856, 0.10284370415890154, 0.1162929391009857, 0.20343279860780517, 0.13784270478447436, 0.15938621810753573, 0.14172669104827107, 0.18236777693218087, 0.0765639419841736, 0.2014236894761795, 0.204033115706037, 0.24066060096434272, 0.04034873609985368, 0.02793493719002016, 0.05044944147810326, 0.05028286789625458, 0.04530591035928888, 0.012742474821850758, 0.026495236813407375, 0.08564160609641891, 0.057908696912176705, 0.16579744250633865, 0.16324918035373226, 0.18215132127739775, 0.20395221578095757, 0.19889521363258933, 0.204775301471118, 0.1632489102038579, 0.1644624597072457, 0.16652270095664934, 0.5124705858784644, 0.5584784315108224, 0.534296898652385, 0.5423712670266561, 0.5470712370662787, 0.5478260496652002, 0.537028974591989, 0.5187174348006347, 0.5599586881210512, 0.09477150421391523, 0.11523644767328534, 0.13180876806975284, 0.10548388506577899, 0.09101855618831944, 0.10170711911796115, 0.09428139333134111, 0.10856279368668109, 0.10748788178287338, 0.14683508579351323, 0.16777519246641837, 0.16293937979138062, 0.16002261909445803, 0.17535227659309183, 0.13434246658914395, 0.20706951853113853, 0.15427664927990103, 0.1495239850036012, 0.3550783022678533, 0.3696445350542593, 0.3467464989470279, 0.36889368824960356, 0.3786432031528195, 0.35816975931730355, 0.4209774453825025, 0.42173343742690284, 0.41304721792391963, 0.2760144515845204, 0.2615469297083337, 0.23134979217041907, 0.2693673331048404, 0.274351534726617, 0.26896331780658844, 0.30622293190010497, 0.2903104275283409, 0.27202253297675005, 0.19997820329164617, 0.2032742839718339, 0.2051211310865183, 0.2120803240344581, 0.17783305662849413, 0.1890499843690976, 0.19556401014634384, 0.20454835450671283, 0.2054034612203307, 0.22556831582341752, 0.6001197197061865, 0.2592176091111533, 0.3048568424869712, 0.2770959459368635, 0.22752041063265582, 0.20524232944891896, 0.43923449488701427, 0.3053225508983767, 0.8301836828988691, 0.2032416035441441, 0.17634261922290861, 0.8352153683828718, 0.17321629384564496, 0.1569971509624456, 0.14400430185180335, 0.3371572864891389, 0.17985030794528734, 0.7094722742328174, 0.560462316747754, 0.5037790809556775, 0.6893327317032691, 0.20904007082870268, 0.15153304712419813, 0.21395851781464403, 0.21206067052699296, 0.20789605094198993, 0.19382424376248764, 0.19758775987673727, 0.20717841941196935, 0.19344562888538808, 0.19115147815433575, 0.20897652622043006, 0.1992301555995134, 0.1863371130841619, 0.19020237117269267, 0.07618643169884853, 0.0894201024872362, 0.09187229757169002, 0.09433024215335628, 0.0874515840974962, 0.08408921259272228, 0.09180630173288207, 0.0835723109523615, 0.08841009698479452]}, "mutation_prompt": null}
{"id": "6b1f93de-218b-4f07-a3bf-abf74aacdcd6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.5 * np.random.rand()  # Enhanced dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.6 + 0.3 * np.random.rand()  # Alternative strategy with different scaling\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        if np.random.rand() < 0.5:\n            return mutant1\n        else:\n            return mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / self.budget)  # Slightly higher adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.3:  # Slightly increased probability for applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size for better influence\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV2", "description": "Augmented adaptive algorithm with diversified mutation strategies and dynamic population interactions to enhance convergence speed.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "713be889-a0cd-43ac-9d38-4ee9c7cb7006", "metadata": {"aucs": [0.876577139599018, 0.8572343308240312, 0.8613016619044441, 0.8770768895723442, 0.8559909443648568, 0.871208046892318, 0.8557572429535052, 0.8689443508131343, 0.8761065243466533, 0.7499367649214301, 0.7461939201716689, 0.7395083671760901, 0.7012327463661622, 0.7352253695484849, 0.768833754408057, 0.741133239393867, 0.7550929774628609, 0.7470065237780183, 0.493494681758893, 0.5048810921443048, 0.41338929656147927, 0.49238307010205196, 0.17323572439100354, 0.5508025624682389, 0.1661972097898522, 0.5246832531096954, 0.5015876047743253, 0.4055361266633848, 0.48788901035167376, 0.38255373127762127, 0.3881979962506422, 0.16700350446811085, 0.3413417245698459, 0.4851001238556283, 0.47594553213250834, 0.15891244202324506, 0.9666046126160261, 0.9737919113228736, 0.95732189879302, 0.9464038384821957, 0.9774693638168221, 0.9550732326964883, 0.9489081603707299, 0.9351547316203561, 0.9675886581807411, 0.5189992389178522, 0.5143076577985872, 0.5204512270397117, 0.5267989136519524, 0.47361414734322616, 0.5635653578599533, 0.4844863057244766, 0.49134132016127674, 0.5179445639908384, 0.8159142961212721, 0.7926912970169993, 0.7522280865138672, 0.8318327237928826, 0.7820640363629581, 0.619367804246717, 0.8880034734952098, 0.8385515129555182, 0.8185818798981458, 0.25585269865139104, 0.22737842016924592, 0.19901185856517145, 0.20785366186644338, 0.19998870940300117, 0.1798281557100021, 0.19235625342132512, 0.22540481099125398, 0.21831009919101385, 0.11581830426624051, 0.20137674709495657, 0.2018490287888588, 0.19291515658661806, 0.2410911860232634, 0.2118229527896598, 0.27976147004656937, 0.1671172887991541, 0.23446506860413097, 0.11957262384106648, 0.10189548538140103, 0.10754173425678493, 0.12280185091569984, 0.12617118065238064, 0.11061569791993953, 0.08312302517491121, 0.05172317841494989, 0.07012910328966104, 0.18610584835317623, 0.1959719553637599, 0.20828572050080263, 0.21626764820478628, 0.23437649390583115, 0.20330403971224664, 0.3540010591141505, 0.21536306921696746, 0.3062800364653545, 0.04626494007827131, 0.045336873109331655, 0.044034696325712885, 0.013116157150918517, 0.04835855839619729, 0.061710315504775126, 0.060751845675827476, 0.11929677423349949, 0.04320733297412516, 0.17690529772593744, 0.19138285657031673, 0.19289357932535856, 0.21541897141830268, 0.21886987169517613, 0.20631632765896457, 0.20835802680758764, 0.17035014906869073, 0.18159618835672642, 0.5339825982818047, 0.5498011460259467, 0.5469238839289805, 0.5419702151947874, 0.5497235485674045, 0.5465745366077486, 0.532367535944756, 0.54294220634111, 0.5795519632677496, 0.1249535131313565, 0.10429774538288439, 0.11117398918864696, 0.11284840445464395, 0.1023631805030012, 0.11538997001470541, 0.10623150235379986, 0.10878400685867273, 0.11068725851827876, 0.14549316082855335, 0.1508895814607506, 0.15710834131329354, 0.14686551119907076, 0.15172000242237937, 0.15969447478331256, 0.1410559415601651, 0.16171473066021003, 0.13694258569064877, 0.36914428676520183, 0.3572807772850263, 0.3673445476711319, 0.3652951174321455, 0.39765798064147306, 0.37676818590394856, 0.4218461489827563, 0.4501857852961363, 0.4061084544087722, 0.24867329994701626, 0.2509718237335873, 0.28559510805244526, 0.2702833585742678, 0.22245069107817528, 0.2726402957969738, 0.321319734656628, 0.30691604103735104, 0.2865572013055433, 0.23076568000295639, 0.19986140926140528, 0.1901331891784135, 0.21696305971060625, 0.1845031129508088, 0.18619411217079573, 0.2149202007876645, 0.18919286992799056, 0.20380383226687704, 0.31639166550401765, 0.44967048967131507, 0.29204590051121726, 0.3053026619855258, 0.23400375359423142, 0.24157730741222017, 0.21304036071653265, 0.3805078587434214, 0.3053149333653846, 0.1852302129499792, 0.1810391420297628, 0.8577234641977034, 0.16926579289378585, 0.19225895280900118, 0.1601573928949649, 0.18568691700920847, 0.18365620577583108, 0.7915382888411391, 0.5644978887177765, 0.72917496447781, 0.7044483041822713, 0.7119494133162786, 0.15965759053561046, 0.7250603169074619, 0.21149967869828412, 0.1546103900267306, 0.127150620313764, 0.191236786871278, 0.18466171095630002, 0.17873311785439705, 0.2155218388795367, 0.18736369717094503, 0.19823974273256506, 0.19673842160628352, 0.1939434624497447, 0.1873383361097768, 0.08200115653443318, 0.08279023593543156, 0.08611485940510433, 0.09338099643605258, 0.08941935834393022, 0.07615701900033167, 0.08414177024421865, 0.07828646594227862, 0.07921954961585109]}, "mutation_prompt": null}
{"id": "c044b82a-41e5-43a5-a803-9eb0bc4c4a55", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n        self.rejuvenation_interval = self.budget // 5  # Periodic rejuvenation every 20% of the budget\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.6 + 0.4 * np.random.rand()  # Slightly higher dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.7 + 0.2 * np.random.rand()  # Alternative strategy with adjusted scaling\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        return mutant1 if np.random.rand() < 0.6 else mutant2  # Increased preference for mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.95 * (1 - self.eval_count / self.budget)  # Higher adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def rejuvenate_population(self):\n        rejuvenation_factor = 0.1\n        for i in range(self.population_size):\n            if np.random.rand() < rejuvenation_factor:\n                self.population[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                self.fitness[i] = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            if self.eval_count % self.rejuvenation_interval == 0:\n                self.rejuvenate_population()\n                self.evaluate_population(func)\n\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Further increased probability for applying Lévy flight\n                    trial += 0.005 * self.levy_flight()  # Slightly adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "A refined adaptive strategy employing a more aggressive crossover and mutation approach with periodic population rejuvenation for enhanced convergence.", "configspace": "", "generation": 22, "fitness": 0.35864059612850696, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.26.", "error": "", "parent_id": "713be889-a0cd-43ac-9d38-4ee9c7cb7006", "metadata": {"aucs": [0.8402400143087351, 0.8557174607815037, 0.8383980271171038, 0.8650994601478458, 0.8496652274278808, 0.8522925453344607, 0.8533735134345335, 0.8565337966227895, 0.8523137903313234, 0.68663454034956, 0.7180174240680679, 0.700135992717992, 0.7129208324359528, 0.6928856332713116, 0.7274604969124374, 0.6887903280876482, 0.7305725168696974, 0.712732061615388, 0.411890643814257, 0.44284657484068435, 0.4520666000863608, 0.5215642405405754, 0.4746616698935018, 0.49411988396396844, 0.38195093241607947, 0.39340795947133333, 0.43727390615107176, 0.29874748682325214, 0.1453457141429464, 0.38165812621946904, 0.37648128727106633, 0.39786045261288294, 0.3730867861327979, 0.3133257582047838, 0.30562648504392365, 0.1584422563624578, 0.9166349028049964, 0.9557612989198179, 0.9494026914371725, 0.9569049241786679, 0.9475851662071909, 0.9603022133426152, 0.9622951957963914, 0.9518345955185437, 0.9318795160168012, 0.478697058279715, 0.49590309497227203, 0.47355799440742374, 0.4749541331410756, 0.5002198353172883, 0.49136056954676066, 0.49496248237122886, 0.5339625796029025, 0.5077944482443015, 0.787106421358382, 0.7492134489671959, 0.8181512387979748, 0.8026655000908625, 0.7145708916604356, 0.8064348046181622, 0.8402739825100869, 0.7840721600877477, 0.8007660278187924, 0.23074036866506475, 0.20582608667156344, 0.20634819478439193, 0.22787190690291237, 0.19973205996782484, 0.2228277474052719, 0.18970482557912682, 0.23259617026726764, 0.20650195743710054, 0.12057992548495855, 0.21743205361894546, 0.24949426197934932, 0.1968576357966031, 0.21119550010846255, 0.28919641759093073, 0.3429672307760848, 0.2403460132978691, 0.20843520204943045, 0.15295962529616314, 0.09249005869675364, 0.12099871609405877, 0.08217838825363633, 0.10362336752764256, 0.10285093270097401, 0.13386193225334064, 0.08285599003202826, 0.16099908495430482, 0.20419992079392557, 0.2399541923854952, 0.24565203346645081, 0.2043197369792472, 0.19729439981995545, 0.26163010084081284, 0.2295696174497026, 0.25860385246774653, 0.21775617074902198, 0.037303044514346184, 0.06242684878417093, 0.08912182128906099, 0.05143406129752437, 0.03727953195430089, 0.05052163079456329, 0.036649516689915784, 0.07432511264521269, 0.07100993820334, 0.1817576454405767, 0.18033840839267723, 0.18594061540612372, 0.19868859441104625, 0.19921613965015483, 0.2171062612493586, 0.18497731059379552, 0.1972784301717907, 0.17102670962075206, 0.5268681173244674, 0.5851026843442317, 0.5375382564972235, 0.5264662453947615, 0.5304624324282448, 0.5219406422846982, 0.5237182092444082, 0.5630389682947241, 0.5566386312557853, 0.10632190760195315, 0.1177045885029061, 0.10444223468940439, 0.1156448255536705, 0.10601609412645319, 0.1103831453502937, 0.12198426682968477, 0.0962561289730609, 0.10404629061601045, 0.2208944949784022, 0.1664622609859121, 0.16032752410296547, 0.15429106774828938, 0.15250833974249967, 0.21515733555468863, 0.19611419083987336, 0.1662542626820841, 0.20114498920125912, 0.31392777780140746, 0.36419158087050196, 0.3632658915739515, 0.37566749778140607, 0.38200532381442676, 0.3692572368302858, 0.41578112724883454, 0.42185715007015123, 0.39603951281727456, 0.28177388521773683, 0.24946465766331583, 0.2215059769906731, 0.29313339644257363, 0.27106110626941304, 0.21841441712555376, 0.2906974211479306, 0.2774374222036783, 0.2972026303041878, 0.18269684072176517, 0.18299994810172193, 0.22555397603827665, 0.18494532512685835, 0.18448217193899707, 0.2029914893534216, 0.1947174271075549, 0.21714888212271155, 0.20032134491307196, 0.22800067058286433, 0.27003781468275356, 0.21533631203331438, 0.2478756535714579, 0.32217444815174634, 0.3481334670852485, 0.4077629599602467, 0.49765451016626516, 0.39106786658296633, 0.8315895087243466, 0.16571363802926353, 0.16950365634450704, 0.17729763064870363, 0.1962289076326882, 0.8108663870566157, 0.2001621296803372, 0.8834782677510564, 0.7599536936122773, 0.6568849984579355, 0.16877051823093203, 0.1677973145568732, 0.68882803217626, 0.1653756171485622, 0.20565551216808642, 0.2112756719658705, 0.12604729426417582, 0.1269988800592068, 0.19933579444661786, 0.2512213055484235, 0.18386769702663563, 0.20251107786894385, 0.19287993598291797, 0.19309016042830274, 0.19313475614168463, 0.1855554870183138, 0.1888301016537175, 0.08495476233450483, 0.06947165860654148, 0.09494859327419158, 0.0848268189072664, 0.07719886499734252, 0.09224976834857157, 0.08669950325900622, 0.08628799202346493, 0.09430266972728274]}, "mutation_prompt": null}
{"id": "2400dce9-205c-40c2-a93c-448c5afd03d6", "solution": "import numpy as np\n\nclass EnhancedDynamicLévyMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.init_population_size = max(4 * dim, 20)\n        self.population_size = self.init_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.5 * np.random.rand()  # Enhanced dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.6 + 0.3 * np.random.rand()  # Alternative strategy with different scaling\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        if np.random.rand() < 0.55:\n            return mutant1\n        else:\n            return mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / self.budget)  # Adjusted adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n        else:\n            # Simulated annealing-like probability to accept worse solutions\n            if np.random.rand() < 0.1 * (1 - self.eval_count / self.budget):\n                self.population[target_idx] = trial\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            if self.eval_count % (self.budget // 10) == 0:  # Dynamic adjustment of population size\n                self.population_size = max(self.init_population_size, self.population_size - 2)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:\n                    trial += 0.005 * self.levy_flight()\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedDynamicLévyMutationDE", "description": "Enhanced Dynamic Lévy-Mutation Adaptive Differential Evolution with Improved Selection Mechanism and Adaptive Population Sizing to Boost Convergence Speed.", "configspace": "", "generation": 23, "fitness": 0.13788483942617122, "feedback": "The algorithm EnhancedDynamicLévyMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "713be889-a0cd-43ac-9d38-4ee9c7cb7006", "metadata": {"aucs": [0.22820163128199755, 0.18168562240085073, 0.19113404984208515, 0.24090492319977663, 0.35521251256028996, 0.350710205624723, 0.30780997870989457, 0.30693036299672793, 0.2847866835077687, 9.999999999998899e-05, 9.999999999998899e-05, 0.0398838607889036, 9.999999999998899e-05, 0.009610737711202688, 0.07096764128045685, 9.999999999998899e-05, 9.999999999998899e-05, 0.02788487476743373, 0.05838339773990864, 0.0672428009174535, 0.04192635018708957, 0.06173239347927573, 0.05940780885690233, 0.06212292826982935, 0.06577053619565099, 0.06555795456573488, 0.060459306976282656, 0.02516068009490302, 0.0655702514770019, 0.03346802250008818, 0.059996761488034234, 0.04805521310959482, 0.05306305743045325, 0.02814150483107658, 0.04371038389378279, 0.040249997390054304, 0.9874677062963644, 0.9538598696846002, 0.9867356742524264, 0.9653817152703145, 0.960685374329142, 0.9821528582755407, 0.9603383056459109, 0.9796087296329345, 0.9724581253334305, 0.08591911627683024, 0.08383036283009626, 0.12605714830067716, 0.10369897605250844, 0.11437416158129121, 0.09304574858335513, 0.12740113862626945, 0.0885619026537664, 0.09775889747840172, 0.13780326951846034, 0.10559339635000853, 0.1304197987465372, 0.1305950468123137, 0.13880388729549964, 0.1653239796141508, 0.18942444114370072, 0.1744127180963262, 0.1362637349543584, 9.999999999998899e-05, 9.999999999998899e-05, 0.031840274766359866, 9.999999999998899e-05, 0.05416142090358045, 0.05657379406102614, 0.027061036000628924, 0.01763237227406611, 9.999999999998899e-05, 0.005247885230331706, 0.010908571329806716, 0.005293230486960954, 9.999999999998899e-05, 0.04077415152727193, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018960212373864138, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026075840043576992, 0.035272989105481045, 0.08785362900578564, 0.042790762050790576, 0.06532924503413307, 0.07761188421390142, 0.04645121804874475, 0.023493563677614793, 0.02544196023535128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010707502726687856, 0.009455252546182957, 9.999999999998899e-05, 9.999999999998899e-05, 0.029458919648634452, 0.013134780498185283, 9.999999999998899e-05, 0.029008323471552133, 0.020637389143612572, 0.2100214393072597, 0.2821126415449934, 0.20861610844078893, 0.26414687646341595, 0.35270240040685075, 0.2258231637970156, 0.19521522569459793, 0.23694736033904562, 0.2005366718307977, 0.054626478606974005, 0.073316340941731, 0.07511872949273257, 0.07155137187152083, 0.04494040367143315, 0.059630212092517065, 0.05040370973509345, 0.03958792421198598, 0.06799499587322333, 0.1600516319555958, 0.15490902721121458, 0.16578576038896664, 0.15693376080467825, 0.13747851266460853, 0.16874689535872167, 0.1301459317485798, 0.12971523960545184, 0.13603646230935973, 0.17079438633275146, 0.16527870591078497, 0.17312722053180496, 0.16484200512895708, 0.17688326694430867, 0.16920743390246085, 0.20371430348139996, 0.17377774300845283, 0.16588541174998972, 0.11808215796145594, 0.103786725464584, 0.10768439636579263, 0.11682592435036199, 0.10848330141193185, 0.11714934861179194, 0.1383554359984488, 0.17182584048587957, 0.1037396033856961, 0.1822908626541846, 0.13108633469170128, 0.15086587078214286, 0.16029166079147872, 0.1323839577376026, 0.14940092469160227, 0.1555720701137081, 0.12043886424471273, 0.15229193503280025, 0.15352015726185242, 0.14321386834689043, 0.16773023462684555, 0.14602225754323372, 0.16123736199109717, 0.1412641321511866, 0.15776026946401567, 0.14740483031795115, 0.15279030958174333, 0.1924848885266952, 0.1568439222136565, 0.16301038030672665, 0.17167363821542891, 0.13060544286140685, 0.19358130827687248, 0.12837902072562135, 0.15287048617523302, 0.1480427281187523, 0.16212695156994628, 0.15037434172906905, 0.16629216695335258, 0.13142058230475995, 0.13260337635364594, 0.12827783465948628, 0.20692018076560303, 0.17128058281495173, 0.1672869497196301, 0.1797978292045811, 0.19973235117009736, 0.19883717527727918, 0.17666492246011567, 0.22857403120232478, 0.20533945604516624, 0.17797348934156776, 0.18089144075918773, 0.1965841628919076, 0.06163116678281877, 0.05366943583866468, 0.045740472689303036, 0.05347515867696295, 0.05418529024342189, 0.05368776072998549, 0.04891118928790328, 0.05313662737673608, 0.05052040183928819]}, "mutation_prompt": null}
{"id": "e8e0af1e-becc-4a9e-ae4c-3c13a8f6f74c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.4 * np.random.rand()  # Enhanced dynamic scaling factor range\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.7 + 0.2 * np.random.rand()  # Narrowed strategy with higher scaling\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        return mutant1 if np.random.rand() < 0.6 else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / self.budget) + 0.05  # Adapted crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def random_walk(self, individual):\n        return individual + np.random.uniform(-0.02, 0.02, size=self.dim)  # Small random perturbations\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying additional strategies\n                    trial += 0.005 * self.levy_flight() + self.random_walk(trial)  # Combined influence\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Enhanced exploration and exploitation through adaptive parameter tuning and random walk integration.", "configspace": "", "generation": 24, "fitness": 0.2947507405577773, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "713be889-a0cd-43ac-9d38-4ee9c7cb7006", "metadata": {"aucs": [0.8212452676281878, 0.8225549594280879, 0.8125971540272944, 0.8348039500887539, 0.8001496717262413, 0.8202349449250746, 0.8063777503778955, 0.83158844587922, 0.8125381108352216, 0.695456236829834, 0.6963049361230372, 0.7126531664014576, 0.6874434553603175, 0.6981490003164219, 0.660023843350575, 0.6933848258754512, 0.7100008301949796, 0.6964147175029641, 0.3113416858232184, 0.33459757230874776, 0.2683159622552782, 0.3985277501204125, 0.3547848806955509, 0.30200760176775576, 0.3146078456705772, 0.43448303805798194, 0.33872946609434595, 0.25119558248822627, 0.25719133976110975, 0.1512069674745964, 0.22467987999773564, 0.1465009313574539, 0.25094340783720914, 0.14973268873099244, 0.14470419176099059, 0.13660958223152864, 0.9893010288269668, 0.9929410978053673, 0.07490171639013066, 0.9914740870174509, 0.9723974384832805, 0.9949176924105807, 0.9911927325364811, 0.8796567923308717, 0.9917673260124915, 0.4220578574629248, 0.34706819802344624, 0.39900396784965575, 0.3818692835744829, 0.37486835312268496, 0.3165129042138036, 0.39456231664383945, 0.3129102321792995, 0.2619860324585631, 0.6306055966907199, 0.3436504317871628, 0.31110995302607525, 0.7331303288058559, 0.6818228891025755, 0.3427455409029043, 0.5988812342126812, 0.6010587480409412, 0.5320816920406931, 0.16784145577123122, 0.24013139281729434, 0.22285862181585314, 0.15122812894911497, 0.1603976256675027, 0.19255530756519257, 0.18300704107391308, 0.19436737144925864, 0.17330011402014933, 0.212093531616513, 0.0535955060622586, 0.11767784728745811, 0.2037363522814627, 0.167700730124819, 0.1738809666874247, 0.1952669487287093, 0.19195580603820595, 0.16057567939763007, 0.005509834198459074, 0.04473008411274382, 0.007892464582492154, 0.04024967230661891, 0.0005001705229333853, 0.016122888144463277, 0.0400599466322652, 0.007991868683112857, 0.014342226954098258, 0.11989601597041677, 0.11116243551155691, 0.10783166961873936, 0.1324964592234379, 0.20299893154843773, 0.09776514220464427, 0.1796067702525972, 0.176144818393159, 0.08855211035778798, 0.01970014402565834, 0.0001500454218892333, 0.017735942106554492, 0.002188117518713617, 0.006089121114824958, 9.999999999998899e-05, 9.999999999998899e-05, 0.020599626820597905, 0.09317219935831123, 0.13421932739118747, 0.1113898248267684, 0.1661418592442102, 0.1763736124955516, 0.1731704678081014, 0.16659619871072973, 0.1462667319907589, 0.13476182836754325, 0.13785443557001964, 0.5101274827382642, 0.4689357026847416, 0.5112921747229067, 0.5228230051700997, 0.49308660858352615, 0.498953659040022, 0.4931479432089727, 0.5348401592746674, 0.49246471561920135, 0.09738363053158794, 0.10393074601549668, 0.09200675541850267, 0.09256123751918022, 0.10241730966119034, 0.09000917885205184, 0.09677456717586896, 0.09218562732777302, 0.09277509853818755, 0.12956285173998316, 0.15793171012766638, 0.13924965239126308, 0.13808865996550845, 0.13467027974140966, 0.17097599820004528, 0.16222188487980405, 0.13135977089764095, 0.16944192588240947, 0.33269955114579153, 0.308353741379505, 0.31793882094466486, 0.3310107629746789, 0.33544417432910056, 0.31265014726065055, 0.3473535662247671, 0.3487397607436876, 0.31890470405804494, 0.24632170235468343, 0.2200288669895415, 0.20322724118287339, 0.2128344459603001, 0.22060947504941208, 0.23483099679452157, 0.255673187903943, 0.2623402502958998, 0.24429013557470247, 0.18658905282607952, 0.1942772928101696, 0.1803353856056974, 0.17861275262605536, 0.15816374353553386, 0.16532824699120718, 0.19335320402350775, 0.18570434616466014, 0.23656936873344636, 0.20188607452961316, 0.19818497494821097, 0.21084116554313825, 0.21428724832605772, 0.23701563084691146, 0.22718406060394902, 0.20177163356904115, 0.19912864215034065, 0.21227766355460553, 0.7149409087846055, 0.16447645595956673, 0.28924093213510893, 0.11857134539985403, 0.2937660498859552, 0.7691882744572338, 0.291818966396984, 0.6751912704315075, 0.18316508006389975, 0.1632027203750862, 0.2074634710727601, 0.356792380028199, 0.19258905694119544, 0.1800373518470011, 0.23832310780565746, 0.20957277940460295, 0.15640793907595474, 0.5365693875707922, 0.18970800225801743, 0.17572160190735597, 0.180774454947907, 0.1718937110477764, 0.1773942953473825, 0.18223731312466251, 0.16775431470768631, 0.17404286843896766, 0.18785760619178005, 0.07636809815733392, 0.06888398445910027, 0.06494871340412922, 0.0681319364041898, 0.07503375187302386, 0.07445314010170279, 0.07976137054564392, 0.07700707342017943, 0.0696993594440879]}, "mutation_prompt": null}
{"id": "9cb88aba-23a4-447a-a3ba-a84d1b0eec0b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(5 * dim, 25)  # Increased population size for better exploration\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.4 + 0.6 * np.random.rand()  # Broadened dynamic scaling factor range\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.5 + 0.4 * np.random.rand()  # Adjusted alternative strategy scaling\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        g, h, i = np.random.choice(indices, 3, replace=False)\n        F3 = 0.45 + 0.55 * np.random.rand()  # Added third mutation strategy\n        mutant3 = np.mean(self.population[[g, h, i]], axis=0) + F3 * (self.population[g] - self.population[h])\n\n        strategy_choice = np.random.rand()\n        if strategy_choice < 0.33:\n            return mutant1\n        elif strategy_choice < 0.66:\n            return mutant2\n        else:\n            return mutant3\n\n    def crossover(self, target, mutant):\n        CR = 0.8 * (1 - (self.eval_count / self.budget)**0.5)  # Enhanced adaptation through nonlinear scaling\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Increased probability for applying Lévy flight\n                    trial += 0.008 * self.levy_flight()  # Further adjusted step size for influence\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Adaptive Lévy Differential Evolution with enhanced mutation diversity and dynamic convergence acceleration.", "configspace": "", "generation": 25, "fitness": 0.31491175956306755, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "713be889-a0cd-43ac-9d38-4ee9c7cb7006", "metadata": {"aucs": [0.8588423706062258, 0.8624631801017764, 0.8633723162900769, 0.8780242594547062, 0.8733100668606391, 0.8694500768089806, 0.8715420845078662, 0.8679102766953004, 0.8661619839526377, 0.699984818542899, 0.7084441393503969, 0.6833899048179076, 0.6828536222956623, 0.7027851554469453, 0.6797153848478217, 0.7182522845506827, 0.6713359471955536, 0.6764436001546796, 0.5583419851699942, 0.5559639670970744, 0.499380534460401, 0.560774375692379, 0.5230140634889446, 0.46573743615400365, 0.4626724531128946, 0.570364766903432, 0.4590234173567256, 0.41550659512382226, 0.37354515145785894, 0.35937936042954133, 0.4045588187047571, 0.4044673408917705, 0.3694542110549286, 0.33971429750695314, 0.39487143533435887, 0.40245341383599653, 0.9504951161981886, 0.9644843850074589, 0.9455767948771073, 0.9623271799621311, 0.9669614134933175, 0.9432530330242015, 0.94195932304963, 0.9564883526806581, 0.9556522732898912, 0.4027213604539235, 0.36454210264372156, 0.3882165860801734, 0.42107278639386436, 0.4084824590380467, 0.42040938311830545, 0.31828482690533655, 0.31368796339209715, 0.33182405714929364, 0.8428963848497089, 0.3353655280875283, 0.336024104699023, 0.3097275952354678, 0.3312049652128266, 0.21210260845159523, 0.29943974452062894, 0.6592667023691325, 0.2982857980628477, 0.2404913611814462, 0.19920909184380453, 0.21336362551536225, 0.20757229433949564, 0.17465117740379532, 0.18820407814233386, 0.1970625083133104, 0.23659882742902305, 0.159560817847882, 0.15909803459128857, 0.15785178796017285, 0.18937251134522426, 0.145820459643217, 0.14864785427373917, 0.14083661204676334, 0.19479227689159262, 0.15902085168290891, 0.15255735838009454, 0.015918072504538028, 9.999999999998899e-05, 9.999999999998899e-05, 0.006060710578258077, 9.999999999998899e-05, 0.026685488079455588, 9.999999999998899e-05, 0.002759752520497427, 9.999999999998899e-05, 0.09381030747950714, 0.12831849391606498, 0.12496205153838413, 0.04771361144445163, 0.12843270307623678, 0.03890638232364618, 0.08844034545881785, 0.09605347483926585, 0.10051117228039674, 0.023273477008481702, 0.03933874638353285, 0.04889849068855623, 0.04003019825439336, 0.024009264246580453, 0.04800736741862199, 0.030879257077184974, 0.03311357427423267, 0.06040671342176651, 0.1357594729696432, 0.11287211967399946, 0.12629903780750196, 0.13785155616579392, 0.1658774352295581, 0.14758961225707157, 0.1635692522172847, 0.1344205840448871, 0.12184514143698066, 0.494579249286876, 0.4807992022650365, 0.4908535764799363, 0.5075463894946424, 0.5134914132525601, 0.5305002655153264, 0.507742020984148, 0.5139259951023603, 0.5137140146338716, 0.13423776481243166, 0.1343282322412972, 0.11249429678962664, 0.12254062410580224, 0.12213650782008723, 0.1103725330329185, 0.12526954291555192, 0.13423506300026344, 0.11115488105783611, 0.1676208592655597, 0.1414004929458299, 0.16486875051559613, 0.15806635681309222, 0.19120471892267665, 0.15760166308905443, 0.1704926690467422, 0.1569919515986825, 0.1739629931794383, 0.3257310642124186, 0.32989966811745053, 0.32157548353090315, 0.3493560412517873, 0.28596699895529654, 0.31195324082293396, 0.3875346897133204, 0.3467990288268308, 0.33267249935531695, 0.2701336407503798, 0.2522417570998786, 0.23893764026153586, 0.20918330742792746, 0.24977511262846508, 0.20653586032197913, 0.2296053667875323, 0.25992202979949, 0.24872294777890624, 0.18923123857337187, 0.20012140248068666, 0.19554286439200863, 0.20004628997925267, 0.19051836318404558, 0.21381778535603457, 0.22630116047213555, 0.20535164517533666, 0.22097247491140481, 0.26024800629096656, 0.3502580262134195, 0.2981307777754457, 0.25808687727239044, 0.3093424612350282, 0.28646716493357316, 0.22869109761762474, 0.34717783533570346, 0.2571960143314769, 0.19649266522059627, 0.39399645207861533, 0.18182046203322177, 0.7447980267057777, 0.27452298846822465, 0.3524937946452299, 0.27910127072766877, 0.17240498651048297, 0.38020016474140494, 0.1791400815947376, 0.19930033947156023, 0.19765254012201217, 0.22946051268802703, 0.23129371308559243, 0.1907834677329412, 0.2994468616675433, 0.4003176073252248, 0.2843149024659367, 0.19621870934971852, 0.20069774131692686, 0.18988116957779388, 0.20546488210238878, 0.20451314042844315, 0.1874239843058486, 0.19773510469837008, 0.19996079685955337, 0.19419571776498556, 0.08808350824306055, 0.09859361253486454, 0.09775766996270163, 0.0876585351106498, 0.09223046325910966, 0.09180229960448394, 0.08622021886273001, 0.0914708168694518, 0.09522764619747104]}, "mutation_prompt": null}
{"id": "159ac8e3-94ec-475a-bf98-796828b757b4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 26, "fitness": 0.399023432586528, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "713be889-a0cd-43ac-9d38-4ee9c7cb7006", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "6d80ebc7-4544-4e2a-8a2a-247f3a6fdb6f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(5 * dim, 25)  # Increased population size for enhanced diversity\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.6 + 0.2 * np.random.rand()  # Adjusted dynamic scaling factor for stability\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.5 + 0.3 * np.random.rand()  # Adjusted different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.6 else mutant1  # Increased bias towards more diverse strategies\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.2 * self.budget))  # More adaptive and aggressive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Increased probability for applying Lévy flight\n                    trial += 0.005 * self.levy_flight()  # Adjusted step size for more controlled exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Implements enhanced diversity control and adaptive parameter tuning for improved convergence in differential evolution.", "configspace": "", "generation": 27, "fitness": 0.364277048991747, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV4 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.27.", "error": "", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8709242072967012, 0.847555892144733, 0.8697558232163134, 0.8922224265420547, 0.8715311040177924, 0.8813088891300067, 0.8608971561083428, 0.8705433653605943, 0.8690816057797797, 0.7309636859662088, 0.7210229575931947, 0.6978573302850425, 0.7266513121302245, 0.7212833297033756, 0.7118347219679164, 0.7336546067140228, 0.7410597364931605, 0.7073173534318716, 0.4892712682294904, 0.5122489238864434, 0.15901665512633412, 0.43709065950157355, 0.4523953595233594, 0.39570056575475476, 0.3350869320333786, 0.35407108900225115, 0.4507419212882936, 0.1660711783524268, 0.45787448647506157, 0.15252460939919965, 0.1498031847410115, 0.15298364352585248, 0.16893227128237032, 0.15961895994747777, 0.1530164674577198, 0.2844048077735716, 0.9691139425408929, 0.9896108320121154, 0.944992172307446, 0.9404026001629365, 0.9828017063354405, 0.9696857389769103, 0.9767640681856119, 0.9283076046277583, 0.9855111759291728, 0.5613132609665739, 0.5345922161421583, 0.4911457136847931, 0.5645396902606726, 0.5290119176373342, 0.5060585927860208, 0.507288934615806, 0.5311809499136588, 0.5290109757196249, 0.8234994743819302, 0.8446989171446334, 0.815839438087382, 0.7312690083137968, 0.86556650329239, 0.8324307058601139, 0.8256361240800192, 0.8381137043424152, 0.7983274953108634, 0.25445258776363977, 0.23335953502212647, 0.29228267142118247, 0.13066465963273532, 0.28188735040461443, 0.23173235769336764, 0.25079992334283185, 0.2044472732736251, 0.23779623328835564, 0.2260778221893307, 0.22112242221394973, 0.25435465897144993, 0.2512320927281144, 0.23315950594292245, 0.23290423856328268, 0.2569525198206315, 0.2318881331925874, 0.2374442916626034, 0.15799487126580247, 0.08505864522686302, 0.14987249971047445, 0.15523850876287582, 0.1163877955082715, 0.1406698724756259, 0.0864060072631393, 0.14363557779409397, 0.1626841759911627, 0.2031650629080073, 0.25455912380938306, 0.23749868380859673, 0.19254590481291567, 0.260978975707005, 0.22461993120000256, 0.3260685654759341, 0.26975662706094017, 0.26567008445749474, 0.02361877620008035, 0.056462482865704766, 0.10918624036591296, 0.09835701746522041, 0.07737377400178902, 0.10004833366684962, 0.06982024602304171, 0.04384913872845608, 0.09078596864572097, 0.20831559463381089, 0.1922859057490861, 0.17399809164345081, 0.21795386774024406, 0.22435336241074189, 0.23761869854322126, 0.21841177058228345, 0.21331599829534575, 0.18211684812240048, 0.5548206646755254, 0.5514278398644288, 0.5596981050173879, 0.61960770343759, 0.5315215935463925, 0.5614008381945438, 0.5411937510110558, 0.6004428923320501, 0.5630801799730487, 0.16180120695954592, 0.11802668590553245, 0.11927092703376097, 0.10223872735227468, 0.10405953090448894, 0.10320008903840405, 0.10447746566540139, 0.09020957525969675, 0.10681243156682485, 0.1994473964131639, 0.15759570497122055, 0.14991240330519473, 0.1737749321784915, 0.15773783378726858, 0.17490806660328695, 0.14591779875334143, 0.22452215587034785, 0.14249826939581767, 0.40063163674691793, 0.39991136751741196, 0.36823586002158637, 0.4243466725668392, 0.4253584547108308, 0.3786111297968021, 0.46442881019342064, 0.47341809210195307, 0.450518834227959, 0.25311292581800393, 0.2507145267957649, 0.280272877799411, 0.2632563414597159, 0.270550989189988, 0.30112735186668294, 0.3121519650954703, 0.29680217907717643, 0.3282822809161353, 0.19242687216113796, 0.1956324582879163, 0.2018507436478748, 0.19734263788309858, 0.19663436644433385, 0.19367004313537906, 0.20256167011053372, 0.1821582965791506, 0.19674386609891736, 0.35373310638455835, 0.21945936839291313, 0.2425005123430516, 0.2652054004894321, 0.6379070492848384, 0.24300828591258672, 0.2285734782053902, 0.2540895007444677, 0.23969534118567049, 0.8624188296266935, 0.19073890911662406, 0.18552928175175343, 0.17883556696506198, 0.1767474990224307, 0.8745029560435601, 0.17363242259107214, 0.18049708191052904, 0.8531166974071144, 0.16793375260549348, 0.16702792018890977, 0.20956828804525407, 0.5317831021652191, 0.8207133867714193, 0.21029698979611544, 0.11191465071687612, 0.21205292697973632, 0.866298383180284, 0.18202940332006368, 0.19577107159887763, 0.18197488765356973, 0.19449707065381494, 0.2125266161620536, 0.20703390287426282, 0.1891389309458429, 0.1873982520350963, 0.17751526033507903, 0.08423793529961876, 0.0892218892208233, 0.08740926552445383, 0.08579274847396612, 0.08822908906046656, 0.08308838906740856, 0.08041208106103581, 0.09150229534682308, 0.08165152964086864]}, "mutation_prompt": null}
{"id": "8a87cc12-b7d8-453a-8396-bcc7bf04d28d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "03c57a73-b7ec-4776-83d3-e575d836ecbc", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "d523eff3-42b6-4307-b344-8a9b217cfa46", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "ea22ef1c-ecf2-4d48-a75e-813b75be4d62", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "c21d5c89-0a6d-49c7-96ca-dd67a88c958b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "605a5879-b3df-4ec3-9bf1-ad2123ff15a7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "7f4e81d5-24c2-4145-b841-55ce67694bd4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "d64b04b8-1976-4afa-b1f1-ab1a3a06fc53", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "40410cf0-f4c7-40fa-b53e-a3e3a544e790", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "9fce7f70-3bc9-44c4-93ab-1c646e847559", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "55b6fd9e-a68a-4eac-a38c-b7fac4346ba8", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "c0cccf77-885c-4ad2-97d5-3c57446b1216", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "69f53270-01fb-48d8-b7d3-c319bb2dcc07", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "aa540860-7e37-44df-a645-415ee5a66919", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "a2f9431b-c9fd-4bb7-a612-40c9413c0ab4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "8561bbc9-4e02-4d41-94c4-224f2fb23458", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "8a5fc14b-b9e1-4b84-95ea-2726e883aba3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "15a3e282-ff7e-4ffd-a4e2-7ba33465a309", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "755c8e62-bf76-4fe0-b7f9-f9aaedfeb4f6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "6edd28fc-8bdd-47ec-8144-9fe89e99a41b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "3f8e2ba8-ed6c-475a-a4bb-76bdb9f0c83a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "90eaea1b-2c2f-4730-bc3a-02a5a3ec0a19", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "edd0d22a-ce9b-4971-be7e-01fa80e9bb70", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "89f4b90f-c207-4bd1-81c2-3fbea83c93b7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "692efdbe-ae3a-40f7-a9bd-7dbcfe747f52", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "f522cec3-ad81-4c08-839e-b4692357a05c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()  # Slightly adjusted dynamic scaling factor\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()  # Different dynamic strategy\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # More adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability for applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size for exploration\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV3", "description": "Introduces adaptive learning rate and fitness-based mutation selection to enhance the convergence of differential evolution.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.8980288279658348, 0.9064488414745775, 0.9108900268672702, 0.9141083757375028, 0.9194509505541065, 0.9173519115809945, 0.9073700003117617, 0.9241783140078722, 0.9148898949535125, 0.804383383325175, 0.8063073589339875, 0.7890794721225887, 0.7908161381713436, 0.8069498327215943, 0.8159319021435611, 0.7943274850186739, 0.8201968790945013, 0.8130688573429259, 0.6323889330334727, 0.5232056873373152, 0.5218494711570391, 0.5369569019341751, 0.6422812682435568, 0.6605599307076631, 0.5602189953111499, 0.5998922451032072, 0.5563376746191822, 0.14796394339545094, 0.13998893715401572, 0.16957592232407626, 0.6642410860848387, 0.15915818037733465, 0.16847314201110475, 0.15194131854837123, 0.47988966967250657, 0.1728747520183832, 0.9562146569460943, 0.9450909687072935, 0.9693910555413867, 0.9642164255720483, 0.9801446623342516, 0.969843435243543, 0.9777092342317371, 0.9772337687001611, 0.9780292755083541, 0.5972438659420469, 0.6765090717797969, 0.6379364850075763, 0.6692728985921843, 0.7234998015425986, 0.6869689687937335, 0.6475459704425031, 0.6361646026863602, 0.6091036803953551, 0.8621123110475539, 0.8752734459598354, 0.807165282806243, 0.8296545361073895, 0.21326915859690576, 0.8877631330769232, 0.8586262827822365, 0.8727655411026476, 0.8781968319715641, 0.23499830989628867, 0.24941218276084587, 0.19891026840050985, 0.23941664320564182, 0.24214848295527158, 0.27786848911067763, 0.3338821987551114, 0.22777966692347296, 0.23217111833618198, 0.19869809864581134, 0.28753826688952044, 0.22621742733816674, 0.2971767960119014, 0.20403982409078603, 0.27964288990231845, 0.2728942903908379, 0.22425609396353208, 0.29653787967735623, 0.0878182276409023, 0.22459322372249613, 0.1895768764179171, 0.16658903901785416, 0.061141508492955854, 0.04198386268924992, 0.09858804906105545, 0.1401751786647697, 0.16615658347122153, 0.2512047842632299, 0.28787154545097415, 0.2071907310226464, 0.09207995689293025, 0.23684728411854494, 0.24083269741116875, 0.3315708024002625, 0.25689176620607435, 0.2750160335706332, 0.04478570612858712, 0.11974084602665103, 0.08704768066351953, 0.08483014125966071, 0.08722547419805526, 0.13393304806814688, 0.09899427142581374, 0.13565045816279453, 0.13945219253318542, 0.24152322487559663, 0.20276636276859905, 0.23279695919193044, 0.2627890544792002, 0.2739354850355502, 0.2616919386448199, 0.22623622373512076, 0.18624375603414867, 0.23318724355197729, 0.6111687623658586, 0.588496330111607, 0.5999652867616765, 0.5763331639948537, 0.6112361848668126, 0.6364151614724839, 0.6259492392976471, 0.6203740372755733, 0.6341609993577138, 0.1105623962129133, 0.11155557904534197, 0.10574556694841342, 0.1141892142224562, 0.11728760573577235, 0.1220369626141925, 0.12341791389396262, 0.10856240951033092, 0.13587639167487853, 0.1959491487000179, 0.23362152072981568, 0.15878898016204346, 0.2420293200021183, 0.18733916123504935, 0.15160606295430856, 0.1626884049404702, 0.15127331890301865, 0.17522267680040726, 0.4090062670796638, 0.4347160567486691, 0.46309656192783755, 0.4111669669970236, 0.4473834284134678, 0.4290790909445015, 0.5204812395719565, 0.4873322012765351, 0.5104060241057758, 0.2889573325106115, 0.31521104166457226, 0.3270531514282502, 0.31711904315628936, 0.2109935282666756, 0.30019887865437755, 0.3714231297625613, 0.3702784244200802, 0.30539655680271294, 0.20758809961125668, 0.2275423126620858, 0.20717535108816665, 0.2094001495128459, 0.2259421144864201, 0.2007663667023658, 0.22732584736163353, 0.20754471387052376, 0.239925412643201, 0.5879354383582718, 0.303741789009048, 0.6480533396440848, 0.3201107566937966, 0.7182776359028673, 0.23993374313328397, 0.5825369229623124, 0.2347927943285435, 0.6985323974131727, 0.1878443131046712, 0.18555352631817967, 0.19536172007564623, 0.18876785353107128, 0.9116778315002638, 0.9035426990067202, 0.8432765006185371, 0.1615052463175669, 0.7895471357049518, 0.21104086649815013, 0.21104089080439659, 0.815869741160876, 0.16422441586471237, 0.16815426339651096, 0.19868835924093742, 0.21159726041246107, 0.16780682025924543, 0.15544601442497064, 0.2134402236003201, 0.18738984136942405, 0.2083737287303199, 0.18395173812044874, 0.1851055279436732, 0.18831905822812545, 0.20866474891046827, 0.18870916269535365, 0.19753599975275848, 0.09148393702135948, 0.09007817163810738, 0.0894327722516105, 0.07758912513366234, 0.09221650229056555, 0.0934148554441383, 0.085936723876325, 0.08047281412137797, 0.07665613308553498]}, "mutation_prompt": null}
{"id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 54, "fitness": 0.4103756178027719, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV4 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.29.", "error": "", "parent_id": "159ac8e3-94ec-475a-bf98-796828b757b4", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "cc22f2d0-e42d-4012-ae19-9b02b23c065a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "81c6b1ab-e593-48e2-871a-67e847869215", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "e0cc7a64-dacb-462b-8261-74fc6073631c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "f3557b89-c31d-49fd-9933-a140184daab1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "bb367f9c-7d58-4cbe-9a21-f0bb657640c2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "2d346961-dbf5-47ff-bc86-36db78379663", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "20bf92e2-1fed-4059-8c02-b7cc2e67e602", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "6fd2032f-7888-48fd-b414-93b45beb4c52", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "3b86d5c9-7327-4f40-a733-61391c550ba2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "3326ee91-f65c-4175-9e7e-2d9987258183", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(5 * dim, 25)  # Increased population size for diversity\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.4 * np.random.rand()  # Adjusted mutation factor range\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.3 + 0.5 * np.random.rand()  # Adjusted mutation factor range\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        if np.random.rand() < 0.5:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.6 else mutant1  # Dynamic selection pressure\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Slightly adjusted probability of applying Lévy flight\n                    trial += 0.005 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV5", "description": "Enhances the exploration-exploitation balance by integrating adaptive mutation rates and dynamic selection pressures for accelerated convergence.", "configspace": "", "generation": 64, "fitness": 0.3724243446497642, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.27.", "error": "", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.8943832453487118, 0.8849694490336213, 0.8922779917318108, 0.8852668562247736, 0.883953784254111, 0.8888622594246225, 0.8971741059080506, 0.8879003568069462, 0.8933016919038569, 0.7525766222301031, 0.7678074454662196, 0.7715463304451599, 0.7731366555665998, 0.7585431324908207, 0.7609357465561011, 0.769625584540626, 0.7573821764350125, 0.765689569001391, 0.6092757761533509, 0.4408088578291085, 0.5047172756446789, 0.5055195190809855, 0.5782855158315008, 0.5493617512584861, 0.576460126694873, 0.5356328901134875, 0.5196692872180682, 0.1665620855574158, 0.5003914332380779, 0.16419574362608458, 0.11063183522459386, 0.16243210214902282, 0.16132475821621062, 0.43154869139008023, 0.5407528722963052, 0.4418053210674068, 0.9649395206474808, 0.9667784835555238, 0.9646439080288018, 0.9629854930738838, 0.9545514920887568, 0.9691546915624616, 0.9778046907930033, 0.9372869866738756, 0.9729479681836279, 0.5262827322687866, 0.5501520107132969, 0.5305286092800275, 0.5657576108425242, 0.5897959660281737, 0.5642990538523238, 0.5100982787910515, 0.5358367777415666, 0.577931576862242, 0.8093214911048859, 0.8480549868516101, 0.7490552428283901, 0.79896587342281, 0.8446492203906042, 0.8317293999225385, 0.8594727693663043, 0.7987920035877459, 0.8017277899912049, 0.21084398611702404, 0.20768992462737934, 0.21697903866467683, 0.2418662388834767, 0.2018789331993477, 0.1930122800177575, 0.25120527002053683, 0.21679671823943458, 0.31317510432547246, 0.2137081386517372, 0.22446909228320777, 0.23040391381646064, 0.21273069305933112, 0.19846899625912717, 0.25859282153851826, 0.20164726611534434, 0.21912384500662507, 0.24734942234541157, 0.10014001675390194, 0.11332656833744537, 0.142536230930278, 0.055934529174362035, 0.10448692793615333, 0.08544173492470997, 0.11358798841197149, 0.11207808321191337, 0.13906818565817936, 0.2170852197618387, 0.15800644967429767, 0.1765965216781471, 0.22917140995229013, 0.18166073946704997, 0.0634876055064536, 0.22492448357169148, 0.19116845741524724, 0.308234609388218, 0.07144995384067365, 0.067876489162088, 0.04339118500930994, 0.08595559695410626, 0.1290106742523932, 0.05652117955364522, 0.05710481687020419, 0.044040320491040785, 0.08277529496387337, 0.19314055589469414, 0.17313434563358643, 0.1952827718541228, 0.2313297458931758, 0.2422919319095167, 0.23194423771592787, 0.22966609612698996, 0.1935719208147315, 0.1740169482382533, 0.5574432008291619, 0.6112899284240059, 0.5668018288045134, 0.5615485157908136, 0.5530702696883865, 0.576137208697364, 0.5953380184966038, 0.5619627991945249, 0.5717150633710855, 0.11568333805748299, 0.13538029553619157, 0.12542268753605235, 0.1114301367606817, 0.10206275413298549, 0.13700058491689726, 0.11601397993628304, 0.11518604753119566, 0.11109128931273149, 0.16776336722610563, 0.147471591122744, 0.18328504217784736, 0.1639739305972736, 0.16751810063846262, 0.1841158606135318, 0.15588026662221766, 0.16761596530053335, 0.15025126655919974, 0.43726057652055383, 0.40837396241257273, 0.3888232673137898, 0.41407078465590197, 0.39781717736747213, 0.41245983910673445, 0.4592770869172904, 0.48268546799626544, 0.49441417469036875, 0.3046229880387651, 0.312822749526371, 0.2714973960879177, 0.22507166176878268, 0.29231607329965914, 0.30495267554618477, 0.3588298288713918, 0.3413362158664588, 0.29796064680783985, 0.19620530730728414, 0.1982406286798507, 0.21392582359472934, 0.22723680769666932, 0.20589828406456911, 0.1884809392542336, 0.21922263753040172, 0.21592714864972562, 0.21711805938616346, 0.2537234863029908, 0.5889415648709149, 0.6476560098843991, 0.35587220936976405, 0.2533992486570663, 0.20797160944246418, 0.26697179072182997, 0.6219211846826191, 0.20137723247647077, 0.8784839623572064, 0.16801281842725935, 0.1821838111063674, 0.17220383358855684, 0.17703834221039072, 0.19688776498938998, 0.20814837331015823, 0.16851822227940305, 0.8577182219394701, 0.38502773000873924, 0.20589549458051326, 0.6909831920648632, 0.20793074597429406, 0.20155933555909222, 0.3635709214945011, 0.21225903956278513, 0.12813332801757382, 0.2108927355276854, 0.21243014019416961, 0.18362659198875042, 0.20461811288558385, 0.20745421604345338, 0.2161890395713586, 0.18824167598054675, 0.1926844798659717, 0.2174193469480461, 0.21105180707651472, 0.08115876713654668, 0.09087046617414907, 0.08843203782810993, 0.08613753991886497, 0.08353093802714717, 0.08877040730014363, 0.08204142538189518, 0.08332448843338602, 0.08545822283971305]}, "mutation_prompt": null}
{"id": "001da595-cba9-43e1-88cd-cf7f4e167dcb", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "388e2824-6d06-403d-a51e-51c665f8763a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "43bba859-0303-4b50-a32a-a6e0a9500708", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "a059be56-3792-4fa2-9701-a9fcfde908b4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "afa146e6-0c77-4ba5-b50d-d270bb7147b2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n            if self.eval_count >= self.budget:\n                break\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.95 * (1 - self.eval_count / (1.1 * self.budget))  # Further adaptive adjustment\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def adaptive_population_resize(self):\n        self.population_size = max(4 * self.dim, int(np.log(self.eval_count + 1) * 20))\n        self.population = np.resize(self.population, (self.population_size, self.dim))\n        self.fitness = np.resize(self.fitness, self.population_size)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            self.adaptive_population_resize()\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Adjusted probability of applying Lévy flight\n                    trial += 0.005 * self.levy_flight()  # Slightly reduced step size\n                \n                self.select(i, trial, func)\n                if self.eval_count >= self.budget:\n                    break\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV5", "description": "Integrates adaptive population resizing and dynamic crossover rate adjustments to enhance convergence speed.", "configspace": "", "generation": 69, "fitness": 0.1918302436793503, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.44901991892550963, 0.4632406436252833, 0.4122611546559922, 0.45804960151343144, 0.47176518427537506, 0.4780361081320178, 0.47500879898038517, 0.4685883874428054, 0.46141097873474446, 0.1476388040944948, 0.17464095186609918, 0.13429961396435774, 0.12884912304417917, 0.14941935530603334, 0.1471735869037749, 0.16347809532955782, 0.14287791414955842, 0.1449159094657212, 0.10475579115326306, 0.11563364359993722, 0.10441918275964035, 0.11888801597735221, 0.10293963024572295, 0.10724485717137144, 0.11070094797084007, 0.11658011702060345, 0.11527078980882066, 0.1000029052773882, 0.09685995549612803, 0.10023453004022287, 0.09861316998070269, 0.09390601918433461, 0.10366433045034851, 0.10391089848563684, 0.09124432594828136, 0.0950631075751307, 0.9029937360042655, 0.9538489934313947, 0.9414435620792195, 0.9437855581848392, 0.9283519012491045, 0.861171147253974, 0.8624812757820414, 0.9324556968625504, 0.8478786208495338, 0.17409029400729192, 0.1670833201686608, 0.1655979768474679, 0.1938047435679544, 0.18056077555853334, 0.17484711222538185, 0.17512095010009054, 0.17598655156141008, 0.20395190775339878, 0.2217216060049193, 0.21458302793345452, 0.22038585223699636, 0.2403111172481166, 0.22246523536477003, 0.20775110918320294, 0.2299850985379811, 0.22988688478519148, 0.24178986825185123, 0.12148733715253235, 0.12864750767900934, 0.1181256094975015, 0.13194981679337292, 0.12694556248980282, 0.12315130958889453, 0.12571499000961506, 0.11752125565912142, 0.11806987077952324, 0.0634472212283752, 0.04838059436352127, 0.11897027066873034, 0.11782568044309649, 0.11086526439725009, 0.11396604845615677, 0.11257448452324992, 0.13739243379224486, 0.1241292999887792, 0.012235991201882235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006835865210510494, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08593167169048499, 0.10948638990976667, 0.08666241189249069, 0.07937537664222816, 0.07624182049629435, 0.06874689394533673, 0.12782096248743313, 0.08866397094453637, 0.11172424927879643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07357030092585082, 0.0596426096723639, 0.06089539352268891, 0.08375024296879652, 0.07191421831017486, 0.06776625817402204, 0.06748280227259296, 0.06370489493526732, 0.08137486729828636, 0.3813315772154401, 0.36557118186251447, 0.39829923812000945, 0.3759674338319484, 0.3949884195888964, 0.3625085255704362, 0.397579930740977, 0.3654897512648593, 0.38941827339681767, 0.07879011768071265, 0.11467770439896718, 0.0839541843398538, 0.09625093074182045, 0.0923726514796872, 0.09108328378052177, 0.10038996285340274, 0.09620766958873916, 0.08249649423094674, 0.12491643743875724, 0.1555054028795213, 0.12057383537832844, 0.14086216269566665, 0.146896283510901, 0.1558738689292608, 0.13993023788348669, 0.14255790750758246, 0.142465615943844, 0.23003466444959408, 0.2281140623342237, 0.23797689859974958, 0.23058901026776968, 0.22327323348205408, 0.22928611013859213, 0.2439222266648441, 0.247881239460779, 0.23990460853896078, 0.17504177797793996, 0.19466388249805755, 0.16199701381452591, 0.15864704624009607, 0.1590325571582465, 0.16701106962855372, 0.1678879414586083, 0.19670763600728824, 0.16177421704411665, 0.18186675510454775, 0.19281749074225785, 0.19915541244004487, 0.18917013992047993, 0.18188683614143075, 0.19257320823071244, 0.18879725421070048, 0.17683897876682875, 0.18024860107384377, 0.1851041543576849, 0.18918589320518453, 0.1853793781434392, 0.18418011859258754, 0.1908061289617734, 0.1817652272138418, 0.22199492679402955, 0.1766843165586941, 0.19408511417839613, 0.17994412917189673, 0.17524526163132437, 0.35280781393015526, 0.2044437985194666, 0.16919390893947783, 0.29758149497198516, 0.14843843040426696, 0.17773816801592335, 0.20944221044617917, 0.24884633831485592, 0.23872255520270225, 0.19076279205600188, 0.17827396149205688, 0.20145605247579934, 0.22542397730402874, 0.2085978976230939, 0.20366653094501563, 0.20473065877094354, 0.1827443627370552, 0.18192946552177225, 0.19795665894104608, 0.19633897684772095, 0.18070851950652234, 0.18637923776826215, 0.1830766966970585, 0.1788772195938706, 0.19059017109187526, 0.07382542333905495, 0.07021651519024341, 0.07217585130217319, 0.07122329319179643, 0.075370708020983, 0.06838899866118942, 0.07884611728824242, 0.07187849694123183, 0.07286598644024833]}, "mutation_prompt": null}
{"id": "aa42e9e5-6ffc-4c59-acf0-f2527d243868", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "164851d5-e53c-4e1d-9148-6fb172ec08b7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "a9180f04-c6cb-4c27-9ede-4289e1fdcff1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        dynamic_CR = 0.8 + 0.2 * (1 - self.eval_count / self.budget)  # Dynamic CR adjustment\n        CR = np.random.normal(dynamic_CR, 0.1)  # Introduce stochastic variation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def adapt_population_size(self):\n        if self.eval_count < 0.3 * self.budget:\n            self.population_size = int(self.population_size * 1.1)  # Increase population size\n        elif self.eval_count > 0.7 * self.budget:\n            self.population_size = max(int(self.population_size * 0.9), 20)  # Decrease population size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            self.adapt_population_size()\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Modify probability of applying Lévy flight slightly\n                    trial += 0.005 * self.levy_flight()  # Fine-tuned step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV5", "description": "Integrates dynamic population resizing and adaptive crossover strategies to enhance convergence efficiency.", "configspace": "", "generation": 72, "fitness": 0.09481307095617536, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.09.", "error": "", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.1604577376908326, 0.21005165407412574, 0.16605610815541072, 0.1774219669977689, 0.16002694483302582, 0.16065478297328428, 0.2185756328727435, 0.1775874179778255, 0.1824183149157751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04283347962542561, 0.050126189737686566, 0.04121470678185413, 0.03678632320483899, 0.03601782246387697, 0.03670356218382853, 0.03972248880801765, 0.04073158334332316, 0.029482446654384487, 0.02807218649012233, 0.058883784202729106, 0.030088211367668927, 0.037470454124024055, 0.018316123341889923, 0.022970095777041566, 0.027063707143599625, 0.02694359540157021, 0.032817727142674835, 0.14907220300814084, 0.17761478598025182, 0.1860032616225712, 0.162017493296035, 0.1524602400467171, 0.4321941953330979, 0.2544704373318828, 0.29378546710343145, 0.7978908233369993, 0.05717661726555434, 0.048690176353662906, 0.07841597320399085, 0.08318036893815317, 0.05784891586862673, 0.04742555704235052, 0.062031452227250705, 0.07197807964433034, 0.05822511310464673, 0.11871606148945735, 0.14580725609488887, 0.1060821503775724, 0.10762234748632615, 0.12056616641542661, 0.12287250104459146, 0.10654697257818879, 0.10598208920020713, 0.11906780851045184, 9.999999999998899e-05, 0.015715269643527208, 0.0028505108484306874, 9.999999999998899e-05, 0.016152639767951005, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017635775793189978, 0.00014932023488745116, 0.0012073859768712003, 0.04722297395021269, 0.03643007724411962, 0.002414398654714045, 9.999999999998899e-05, 0.03324170244935498, 0.0013515772706436113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050042982069537945, 0.031994003173055896, 0.03058155512330718, 0.03401676377192686, 0.03583018639482183, 0.028835830156170195, 0.021203322023758298, 0.035691237827113365, 0.032640933320988164, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00537928043115532, 9.999999999998899e-05, 9.999999999998899e-05, 0.02485990327338783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018872962577732855, 9.999999999998899e-05, 0.17399522575999404, 0.19512215665788812, 0.20307211603579955, 0.18882606350137754, 0.1815774377200836, 0.17904789761313333, 0.18314201388350515, 0.17702735633768374, 0.20629538604960085, 0.053078262339227744, 0.04633775619667757, 0.058546381404165015, 0.043465645776509465, 0.037505970255203414, 0.035530801418601876, 0.048624596311092505, 0.0403786266333509, 0.054220399374025896, 0.13914170574018847, 0.17227086803065372, 0.13577209330959028, 0.13796057309950338, 0.14893980686766195, 0.12644777471311464, 0.1360608946725681, 0.12798114746455413, 0.1426457173958372, 0.15875816952312294, 0.1649337272577699, 0.16011363110504973, 0.16609058567031665, 0.15573562030329735, 0.16710458166803166, 0.16053354091141137, 0.17377774300845283, 0.15392340562900442, 0.11804630148156736, 0.12542552178363398, 0.09073724623347312, 0.1111710548534044, 0.10800383063725971, 0.11297188319365836, 0.10971102481945816, 0.1061338107556885, 0.10515598684973959, 0.15480460858053013, 0.14216590728109535, 0.15672003805753343, 0.1478706487784357, 0.17359855506211774, 0.16871166065199117, 0.16805695300514611, 0.1606189088433535, 0.14468214824814662, 0.143573050816596, 0.14884327718592705, 0.13630414409002933, 0.14399976397824155, 0.14301895873340653, 0.1370929775173887, 0.11570671151866974, 0.1419516683848664, 0.125472736308463, 0.1318672945885322, 0.14379249083076207, 0.14750487798181233, 0.18671554103745003, 0.14624651518536325, 0.24605667861311153, 0.1757672089751795, 0.17618409399449264, 0.1932075024176424, 0.14554818765384425, 0.14448526212074686, 0.14380334394183847, 0.16845706393037307, 0.1393007664653152, 0.19585317146057646, 0.18031158708700135, 0.1116807120751604, 0.16536427651747077, 0.18598946942816097, 0.18749270886063774, 0.1822589749590401, 0.17417327151582285, 0.17430042399750434, 0.19540738834511817, 0.18423584455912967, 0.18149153914528993, 0.18123314977931138, 0.05544999538618067, 0.05934411210852364, 0.0422726636583175, 0.04381350309545118, 0.04603801274966479, 0.041542764104194996, 0.06995473556752818, 0.03987192544605056, 0.05095614185161634]}, "mutation_prompt": null}
{"id": "065952fd-123b-4847-8cef-c1d640d07488", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "2f78ca03-41aa-4c6d-91c4-b4910ba7552c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(5 * dim, 25)  # Adjusted population size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.6 + 0.4 * np.random.rand()  # Adjusted F1 for increased diversity\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.5 + 0.5 * np.random.rand()  # Adjusted F2 for increased diversity\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.1 * self.budget))  # Further adjusted CR\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.5:  # Further increased probability of applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV5", "description": "Integrates diversity control with adaptive mutation and crossover strategies to enhance convergence acceleration.", "configspace": "", "generation": 74, "fitness": 0.3251748138336314, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.8265285962026523, 0.8305542923906686, 0.8220749474784689, 0.845199355726723, 0.8504325714520247, 0.853988105922698, 0.8302894448374025, 0.8200659783949912, 0.8410217391660464, 0.6110883275204408, 0.5949323176824941, 0.6317637170648703, 0.6375833353800449, 0.6040796246939368, 0.6407302120497163, 0.6296735930202035, 0.6304649548671802, 0.6349972423326568, 0.3851121479818367, 0.3615834134345862, 0.35439321722893613, 0.33855776143446625, 0.3650172149985266, 0.36615698937381647, 0.3477235591106528, 0.4832946311258868, 0.39257431328478065, 0.2629723136119062, 0.16984599249855858, 0.3064440759852186, 0.3024573113028396, 0.27906105798755676, 0.2864515093750952, 0.3224380739724997, 0.2830779079777862, 0.1488264034958845, 0.9834091621771968, 0.9761103270296322, 0.9492432784514877, 0.9668178187311263, 0.9622292094799891, 0.9674574666493271, 0.9617378244699402, 0.9811205549463295, 0.9617647221549682, 0.4445409141062311, 0.4189096752547642, 0.4207196645636585, 0.4205856173427255, 0.4318529713791235, 0.4401557592495067, 0.43782660075536517, 0.41270056924058374, 0.4276768005629039, 0.65331557945637, 0.513272946636157, 0.6031330692574992, 0.6537082317507967, 0.5795830546308917, 0.7816434289815706, 0.6864905475265504, 0.697333972407649, 0.629557849350952, 0.19055141445764523, 0.1914243517424341, 0.17010312093084412, 0.2404785942771136, 0.19575485294213324, 0.2171305497048862, 0.19470535021918967, 0.21172933481336753, 0.209965257195452, 0.11588612301574719, 0.1276879551675134, 0.181247314616379, 0.17281401218964643, 0.20494395399084808, 0.16892979520763873, 0.22320212889334412, 0.19928195148700256, 0.20392766184237143, 0.07291527064834047, 0.021104444635222763, 0.02034606956579066, 0.04140513327419271, 0.05316780115352793, 0.031113411356560983, 0.08935324653564403, 0.005343351283340403, 0.058774586481112556, 0.1239474237196373, 0.1367329654882693, 0.1423801373072774, 0.1356659082781272, 0.11025776863429637, 0.11161819525212868, 0.19146217613350613, 0.14369273642256886, 0.1918450096333819, 0.01399370925045551, 0.05947230846384233, 0.027440987425544905, 0.02142955269788449, 0.012706524768826277, 0.019914101990198052, 0.04855989449342213, 0.03969486339048112, 0.014873579078705346, 0.13792791606664156, 0.15736300396335023, 0.14185363903449155, 0.17569399603418, 0.1886524600315005, 0.18457678287839263, 0.14762577462530246, 0.14774504290446255, 0.16407924453906964, 0.5122693182652169, 0.5078873350298582, 0.50668960055239, 0.5157239338874029, 0.5190911660573296, 0.5278791444216024, 0.5013760765834039, 0.5161284843569136, 0.5301265728805054, 0.11366166811725509, 0.11703838198083483, 0.12049966074816743, 0.10802445450990583, 0.10113484097623748, 0.1015565444802049, 0.10560328029829436, 0.10602014992935549, 0.10167695667419974, 0.2510333162290742, 0.16248887532503065, 0.15295375631545216, 0.13915050934082174, 0.15966556150657363, 0.14889238433378071, 0.17040009831637004, 0.1703530116650549, 0.14820653005885664, 0.3108683767701962, 0.331062737417, 0.3091620645059734, 0.3480878699813562, 0.35120988918350415, 0.2954721929671442, 0.3834453885013791, 0.37630976398137195, 0.35502222120794347, 0.25909425724069235, 0.2499081249430687, 0.24646379047473999, 0.23801411952721951, 0.24989464398335648, 0.2599319652847506, 0.2875005453224373, 0.26630066157572196, 0.2635698071731205, 0.2036111375786246, 0.19041966983620684, 0.20965134059489676, 0.21698044481957546, 0.1780984946548031, 0.19968048702297392, 0.21189884521167812, 0.20066029767148486, 0.2170532126939112, 0.2066623996434691, 0.2416582166506922, 0.6035017529895685, 0.1988150271781306, 0.3657605447367901, 0.2933795310344487, 0.21351057547536823, 0.21245245086318787, 0.24167642553135305, 0.17568961457968524, 0.20469806754765574, 0.14750067631951191, 0.8264286040193093, 0.16461688834316524, 0.7795172514178641, 0.6468272776616126, 0.5197058996325855, 0.8251048189194599, 0.5874117095365994, 0.44983167756980325, 0.30819441635071254, 0.1653332791629749, 0.16274759424005147, 0.16078603476745867, 0.2129584307991621, 0.21350332410365436, 0.21062156827644274, 0.1809204426663874, 0.19416618564040744, 0.19815360456513886, 0.18664735473776806, 0.2108315093550963, 0.1919474297444439, 0.19107355200071452, 0.18308399373891948, 0.20033978595802215, 0.08183719688709856, 0.09436710120409353, 0.08400557414694776, 0.08224267073604608, 0.08798875336639866, 0.08738710627372237, 0.07954071551545017, 0.08259332581341328, 0.09798885835779525]}, "mutation_prompt": null}
{"id": "52abd610-e0c0-4e4b-beff-9690c4d683e8", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "82428643-514f-4ba2-80b3-4e3832160943", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(4 * dim, 20)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + 0.3 * np.random.rand()\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + 0.4 * np.random.rand()\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.4:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.006 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV4", "description": "Enhances adaptive strategies by incorporating dynamic mutation scaling and fitness-based perturbation for improved convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9008768202934444, 0.9096494915271043, 0.912298562602735, 0.9103970907938213, 0.9144517476837316, 0.9131391229111396, 0.9184583739832829, 0.9129912436339103, 0.9037601132580826, 0.8158688584433421, 0.7945028748599007, 0.7930505342729197, 0.8099574989800813, 0.8156944336313274, 0.7983790882179316, 0.7929285097927654, 0.8175459003287083, 0.7952390514325887, 0.6480499634250712, 0.4669528967476011, 0.5697468129213663, 0.6603045504068263, 0.546465873421369, 0.6471630360350413, 0.17546910970702012, 0.17651220544476143, 0.6506294429557771, 0.17011673877537736, 0.11438699388867957, 0.1673020940828297, 0.17960677147368753, 0.16253675159203596, 0.1676492398488426, 0.5368389183658946, 0.165992102184352, 0.14949467754333678, 0.9637294517513356, 0.9475633825435427, 0.953382468239968, 0.9680006155169363, 0.9563408565104238, 0.9591752654058998, 0.9509154203287922, 0.955384516146965, 0.964167058652768, 0.6055380612322969, 0.654485473647275, 0.6593732074843502, 0.6797297417494996, 0.6760402720030119, 0.7096190392824806, 0.6621960573271024, 0.6661748303306015, 0.6043227165912255, 0.8936822605051813, 0.22471224501530263, 0.8840600044146236, 0.2810568533089415, 0.9071171493324299, 0.9189898934066958, 0.8822912282860291, 0.8671072858994153, 0.8961096509304521, 0.3267723278443344, 0.23276161243772409, 0.26072354936220576, 0.26451395893949115, 0.2618451693683387, 0.41322273599856474, 0.23361299913200462, 0.25430626202464457, 0.2814164351844186, 0.2654337170943589, 0.17898283046148933, 0.21714629105020433, 0.200036088210228, 0.29791986557653427, 0.36137025762532693, 0.35198958865432495, 0.31324574585549014, 0.24559146411867505, 0.14980933842566302, 0.07043526866667749, 0.2322790533061977, 0.07204229305656995, 0.17239398926817084, 0.20569812487143235, 0.14642299801021652, 0.16275935429854904, 0.17246193288362266, 0.3298139892270814, 0.31321873366812814, 0.12775853386729918, 0.07830425607926261, 0.37275301167249153, 0.2773561046221973, 0.3605619672979814, 0.23492609433599032, 0.34718236157856774, 0.11149717595723618, 0.08795287480976766, 0.22743912197028626, 0.10282921140095236, 0.0815543561432418, 0.1783682426668094, 0.11247364197368082, 0.13580894574691116, 0.15906522128013745, 0.2229955042159465, 0.2623339459069298, 0.24982566038076515, 0.26801872659843373, 0.2716257366896946, 0.2876757525363799, 0.27799312434936696, 0.2590521849190801, 0.2422180181532705, 0.6608477543641642, 0.6200817776677761, 0.6253938109370991, 0.5795033611581463, 0.6099521062930953, 0.5917938722067614, 0.663403691246549, 0.6092379183744838, 0.6261260185918429, 0.11027416710476823, 0.13947857573810818, 0.11764150115022054, 0.1078843029070804, 0.1332010076791741, 0.1260406602330849, 0.11650837713430051, 0.14968790712281388, 0.14137163866877744, 0.1470849094914114, 0.16705548970612594, 0.20468583359523818, 0.17954876060916558, 0.14637596417498566, 0.1716936638218216, 0.17266938764499407, 0.26885837007951063, 0.1388587206318722, 0.4346397845695221, 0.4891642575662075, 0.4140720283594017, 0.4570186522464542, 0.4448956625860887, 0.4549008108079804, 0.5333764527010411, 0.5649480590913201, 0.5242729297438398, 0.32841115857383985, 0.3412699319422112, 0.20803431013902085, 0.30464504578779483, 0.3432284595638181, 0.2965423579819919, 0.35634584870807184, 0.3531052740984475, 0.3937917757679382, 0.1959264601964088, 0.2123313560931135, 0.2118889390900487, 0.22278360423949073, 0.19989662679960774, 0.2029092189569156, 0.22262424070989661, 0.21378244798835488, 0.21887160696377783, 0.23497522409771843, 0.23430144894679772, 0.6038202558309096, 0.39758754500891424, 0.639151740029786, 0.7354045826671978, 0.6324089364791732, 0.21079780971748419, 0.6706863899881212, 0.16445812082554234, 0.18773456486996654, 0.15364298095295525, 0.9136085065394323, 0.1973950467328306, 0.8834786269808687, 0.2033169612993454, 0.16644913197949895, 0.9369065284122547, 0.8110245902649164, 0.20954353916376012, 0.16961245110519052, 0.8684890320136439, 0.8693884709851324, 0.8877948503610199, 0.21300012891145959, 0.8547559587065483, 0.10492586682910932, 0.18637727736354703, 0.19622288004869137, 0.18471223621727517, 0.19486523820608792, 0.1940151346773924, 0.20118891048640275, 0.20188888303363162, 0.1927496111784207, 0.20980621490257167, 0.09469149977970814, 0.08828726024271649, 0.08677093078692943, 0.09347050159202286, 0.09530555913794614, 0.12081056889478059, 0.09233840286438866, 0.09370407734559971, 0.08886386825147019]}, "mutation_prompt": null}
{"id": "cee4ffe0-88c3-44be-a212-5d9f49ad494c", "solution": "# Description: Introduces dynamic population resizing and adaptive step sizes in mutation to enhance convergence speed.\n# Code: \nimport numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4 * dim, 20)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.4 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.9 * (1 - self.eval_count / (1.1 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.5), 4 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.3:  # Fine-tuned probability of applying Lévy flight\n                    trial += 0.005 * self.levy_flight()  # Slightly reduced step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV5", "description": "Introduces dynamic population resizing and adaptive step sizes in mutation to enhance convergence speed.", "configspace": "", "generation": 77, "fitness": 0.41479995336142456, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.29.", "error": "", "parent_id": "405e2e8e-1fd3-495b-803b-b53d303983f0", "metadata": {"aucs": [0.9142013972163193, 0.9225752902593785, 0.9189408419555086, 0.9121244375558144, 0.9076711449211805, 0.914109043883547, 0.9132702003863966, 0.9211844158934199, 0.918346145526407, 0.8333559424430128, 0.8468788524177169, 0.8149467954132348, 0.8298056075408377, 0.8019941477954886, 0.8173423889463766, 0.8243214140780687, 0.8468487885373748, 0.8216808563203597, 0.5569661158286808, 0.1797139504142069, 0.6144672247733038, 0.17937129639546145, 0.6544728762861868, 0.17839529203698257, 0.5290950167090744, 0.16944760950388227, 0.17872083554674678, 0.576177623814121, 0.5037570178010744, 0.1753432632226748, 0.1691159643446687, 0.17356552489303845, 0.15091392041001195, 0.14782091951516452, 0.16353114450762674, 0.5302744502281895, 0.950763549903385, 0.9529293461618988, 0.9809505852308714, 0.9623001625670856, 0.9572574685671464, 0.9786965868315333, 0.963919758854463, 0.9630293429493078, 0.9704589927985903, 0.7016124477966847, 0.7298744563310049, 0.7214517557329831, 0.7573511428083293, 0.7470927908968189, 0.7659168454828157, 0.6845335268545168, 0.7170313033266613, 0.6843351801179435, 0.8747507317902243, 0.9133654716536674, 0.8271354190886129, 0.19386175048488097, 0.8959161474437568, 0.8923214898730951, 0.8996219181707785, 0.8734725402112107, 0.2349767204156763, 0.2120938773729556, 0.2854956626558881, 0.2512399105132821, 0.2446459130601767, 0.2877013770957323, 0.13332269056164636, 0.27637174980754187, 0.2564276598160725, 0.29967987727065837, 0.3073748040314752, 0.1676048043714311, 0.2091830003321995, 0.21767262529259757, 0.3034760044280108, 0.22906988926147898, 0.2945869689930606, 0.22857085935319654, 0.290716316789159, 0.24524782288957891, 0.21275280934455398, 0.1290733112074668, 0.21457119908220323, 0.22790322127977802, 0.05890989623939602, 0.23500366548527707, 0.06003260505065189, 0.23520165564709095, 0.13597940560444444, 0.37569592127896156, 0.29351762013934235, 0.3108204858366824, 0.30772056252106694, 0.19625185678790336, 0.38785959161179484, 0.3540822022890575, 0.33411613557984987, 0.14183928907060583, 0.11836891645931502, 0.06263728265580126, 0.1264490314707818, 0.11160789653603442, 0.13071962204955, 0.1805653544951472, 0.17084672308573023, 0.24660666806023024, 0.29304015471945233, 0.31162083977975175, 0.24923069729117664, 0.3120171958874902, 0.2899852575251264, 0.2863641211492285, 0.27054118191059917, 0.28376190294826553, 0.2486354255312121, 0.644543986188436, 0.6617643964288698, 0.6431478506165155, 0.651943716005246, 0.641454571818233, 0.6689724760025599, 0.6687001248914486, 0.655109002658757, 0.6668416144343954, 0.15507273453652504, 0.12101003556670309, 0.10956146499762887, 0.18039910889055066, 0.11132396707102776, 0.1167405574228535, 0.11031573770345093, 0.12150271747011887, 0.14276592976910374, 0.18572706966446972, 0.1598489341115994, 0.3112543164068464, 0.19804401636761537, 0.13660407747846837, 0.21995611358448441, 0.4750136865489024, 0.1488874069722157, 0.15061128295357995, 0.513209149585329, 0.45126662547277197, 0.45130642315751224, 0.5169760405706612, 0.4796742473254426, 0.520246585946113, 0.5823496382429463, 0.5601227379167419, 0.5689526412025602, 0.34892606387375313, 0.33427933427081746, 0.34397576216951187, 0.33718001918847673, 0.3246250164389295, 0.3308345748729734, 0.39483741787685633, 0.38206895132450025, 0.3100998837676562, 0.21416188941872472, 0.2059161956920127, 0.2119531465304345, 0.20983837658964943, 0.20622536467896202, 0.19903370574088342, 0.2062482069072996, 0.20691229141592948, 0.1977103415927257, 0.7531886973812381, 0.7679866521169638, 0.6622309906633946, 0.6439915306884723, 0.43496834079367686, 0.2242361601777677, 0.21577688759292735, 0.5598166333758758, 0.6652483573257431, 0.9373882093896053, 0.1709960824513762, 0.18586116204523073, 0.18746787905792495, 0.20049382538699234, 0.16857543199914304, 0.8794904346220779, 0.17693238784943588, 0.9394771573146681, 0.16461047904980808, 0.20966718805148676, 0.8997830349571108, 0.12756442868617957, 0.8524982898764406, 0.8780842580152275, 0.2133726049445358, 0.21120571680892575, 0.15638108536148498, 0.1951502507263072, 0.18662867026349717, 0.19680845086468468, 0.18520984190041656, 0.18150047798885938, 0.1959193862189491, 0.19326473877485284, 0.18095307174720532, 0.1914364068219323, 0.08425131914847894, 0.08304976579006784, 0.08378903126924475, 0.08987317216032409, 0.09165238530873754, 0.0927155847058333, 0.08311213637083237, 0.09069698707127793, 0.08695010544906656]}, "mutation_prompt": null}
{"id": "c91a443e-6aba-4cce-b53f-aa35e1fbff77", "solution": "# Description: Enhances exploratory potential and dynamically adjusts crossover rates to improve convergence.\n# Code:\nimport numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV6:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4 * dim, 20)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c, d = np.random.choice(indices, 4, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        F2 = 0.4 + (0.4 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[a] - self.population[b])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], self.fitness[d])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 * (1 - self.eval_count / (1.05 * self.budget))  # Adjusted CR for better adaptation\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.5:  # Earlier resizing for more exploration\n            self.population_size = max(int(self.initial_population_size * 0.5), 4 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.35:  # Increased probability of applying Lévy flight\n                    trial += 0.007 * self.levy_flight()  # Slightly increased step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV6", "description": "Enhances exploratory potential and dynamically adjusts crossover rates to improve convergence.", "configspace": "", "generation": 78, "fitness": 0.413758494613626, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV6 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.29.", "error": "", "parent_id": "cee4ffe0-88c3-44be-a212-5d9f49ad494c", "metadata": {"aucs": [0.9065711963463001, 0.9144024949333295, 0.9138591865587442, 0.9049062533014132, 0.8956509000607826, 0.9185000903266496, 0.9098004109668755, 0.925004540988346, 0.9162791640542207, 0.8058703250102462, 0.8377057586652433, 0.8184395310502632, 0.8157049731368777, 0.8408360334933536, 0.8425268189869441, 0.8198129037386541, 0.8262287813819231, 0.8247470065714567, 0.6492586927535635, 0.17899210871489557, 0.6396995929487055, 0.6304078248179098, 0.6758175163618773, 0.151879186312867, 0.573572369345464, 0.6264002200484073, 0.6445866316253213, 0.17226008925308722, 0.1505950204648432, 0.13873114938470776, 0.15191058784243783, 0.5291244520399196, 0.17343682425450513, 0.17180453972547438, 0.5021898880224592, 0.6032618064590584, 0.9625113860330202, 0.9697471625210351, 0.9588791772132741, 0.9713451090329523, 0.9684837112529802, 0.9783787450192385, 0.9608830250320397, 0.963224544108166, 0.9661291931883768, 0.7001517555953072, 0.7012570603399043, 0.6732784379414678, 0.6780177267431455, 0.7287352717484046, 0.7729663851946085, 0.5762617550088224, 0.63674656391034, 0.6738374423261878, 0.900955816743449, 0.8738319326410977, 0.8623096238751198, 0.9058795528778585, 0.8538672650316217, 0.9045260491954359, 0.23689350109795382, 0.8819722442842866, 0.9127859050155545, 0.5135181331066283, 0.23191107603312222, 0.22097623216983975, 0.27575935018948083, 0.13480737174875757, 0.22389513180832665, 0.23702027187732677, 0.20977742784318454, 0.283599467436741, 0.24330602255085843, 0.14038389200529877, 0.2063437561052972, 0.2535480579895397, 0.27883141567375636, 0.22645284760806783, 0.2202228910909445, 0.3037607394716906, 0.2640867564194149, 0.24737101035131315, 0.08698139321406195, 0.24118281919507323, 0.16023948719191827, 0.1909655120942928, 0.07995982663568502, 0.21277179166356375, 0.13335985722924293, 0.16540918666053672, 0.202137660218495, 0.1834671008328984, 0.2088835007278943, 0.07020093758727197, 0.21698521410706906, 0.2894810302846348, 0.27864687601004157, 0.2545643783106305, 0.3465719563382047, 0.13163514972630397, 0.12204187692683155, 0.08979930857341734, 0.08178745468673565, 0.11241206107884516, 0.09692738130030087, 0.14930909576927076, 0.12932771051013658, 0.1472618652255896, 0.23449249510471726, 0.2149700729928361, 0.24420094614449261, 0.26488412443977827, 0.2851880998434936, 0.2573214136728169, 0.21096748950492616, 0.2135614144947695, 0.24806591609787398, 0.6290123592576102, 0.6229035330299381, 0.6583331431644897, 0.621392877711594, 0.6386203387825101, 0.5891357275819922, 0.6217181330708748, 0.6051384336503884, 0.5928785032240015, 0.14970744466339325, 0.12975753988003003, 0.10507074833996954, 0.12694642416485735, 0.11148300707275083, 0.11711052838314284, 0.13206000905489979, 0.1339958388654633, 0.13984873711038837, 0.18504341283604153, 0.17578806416868697, 0.15884770733249476, 0.16074059352552073, 0.18717640335472507, 0.15884106090904115, 0.18272912316440393, 0.17818112789845197, 0.14037824721434622, 0.4559739026740365, 0.5085580767574976, 0.41394389492274564, 0.4505197268497525, 0.4577526003858884, 0.479027905317875, 0.5777253045366961, 0.5399994667398922, 0.5352291901951662, 0.2837158270829009, 0.3174377794521842, 0.28307672558711394, 0.34395868692974507, 0.30522636628474686, 0.2981308636551937, 0.3560192544133738, 0.344684528909592, 0.31409668821859815, 0.23049749316442214, 0.2137583246230278, 0.19151483622372356, 0.1977076179466386, 0.2183039926161151, 0.2241820595812588, 0.2114636689560634, 0.2126503330351417, 0.20730071598849353, 0.22802664411790008, 0.3272658040418228, 0.24774968260734387, 0.5834195761402057, 0.24460636116151868, 0.7293318262530468, 0.2153538154944744, 0.23922299410339232, 0.5465248750554847, 0.15446737984296144, 0.8522846395259043, 0.17115977326989618, 0.8252104758449262, 0.19941688455813789, 0.8944125270358838, 0.1523109492595649, 0.8485266407839978, 0.8634637109395366, 0.8610174535107263, 0.16994973253156243, 0.7543237840518083, 0.8975441640925526, 0.5219988977971932, 0.20655702853465896, 0.15415497341242512, 0.8864759420256937, 0.2117883182435294, 0.19054278811861258, 0.1852022703820383, 0.18499753606196534, 0.19423285284447678, 0.18993354072118585, 0.1949451862967272, 0.18881372172402733, 0.19197247411912344, 0.19040316894637022, 0.08643779308270683, 0.09029721402256852, 0.08590824210103531, 0.10033868195157625, 0.08705427645766517, 0.08432923557622418, 0.09046634218444105, 0.08718294029473816, 0.09075135016867675]}, "mutation_prompt": null}
{"id": "ad0efe69-4c3c-4086-a978-45c1bcc91d80", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV6:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)  # Slight increase in initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.6 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        if better_fitness == self.fitness[a] or better_fitness == self.fitness[d]:\n            return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n        else:\n            return mutant2 if np.random.rand() > 0.5 else mutant1\n\n    def crossover(self, target, mutant):\n        CR = 0.85 + 0.05 * np.random.rand()  # Introduced slight randomness in CR\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.25:  # Adjusted probability of applying Lévy flight\n                    trial += 0.004 * self.levy_flight()  # Slightly reduced step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV6", "description": "Combines enhanced crossover strategy and adaptive scaling for mutations to improve convergence efficiency.", "configspace": "", "generation": 79, "fitness": 0.4901345416939218, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV6 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.27.", "error": "", "parent_id": "cee4ffe0-88c3-44be-a212-5d9f49ad494c", "metadata": {"aucs": [0.8855630549534297, 0.8774723978614771, 0.8844588199642337, 0.879574903708268, 0.8887581572729206, 0.8936071133280158, 0.8727636075294696, 0.8795043913616808, 0.8834357296771659, 0.7812702011230588, 0.7664649160438629, 0.7570332235313766, 0.7560155145807801, 0.7673116772281425, 0.6669984047442181, 0.7662630986848432, 0.7441879559435449, 0.7271447281876097, 0.3340575251445519, 0.22382304257359387, 0.13648937749866819, 0.13917025436347852, 0.1277915540177479, 0.40762095770450535, 0.3840626775587309, 0.2762675868725799, 0.5192296129296312, 0.1325420291135433, 0.15434498726699608, 0.14348722832327332, 0.1441898057278751, 0.2431119119843791, 0.1601908933650984, 0.14964686748957634, 0.14780805656607332, 0.13075915410152195, 0.9621770571086715, 0.9650124854442933, 0.9593977695443998, 0.9592589429841148, 0.9879116860153615, 0.9278402156631237, 0.9720271888691093, 0.9802020096181281, 0.9684983979289759, 0.6827279843920031, 0.6928744990231215, 0.6904536631002187, 0.7149026355758212, 0.6768281218781762, 0.7052815983623517, 0.6807288056179872, 0.7038371061674991, 0.7159765930078359, 0.8543569829142418, 0.8497854370876918, 0.856841907734132, 0.9070446551615576, 0.8345876829172993, 0.8442607479562463, 0.8687854734607444, 0.8445937215201585, 0.8276162116530483, 0.6365039093938479, 0.6499040572746566, 0.5647329447191151, 0.539071300054883, 0.6404671943718909, 0.5600802391498372, 0.535425868330829, 0.5983320832083685, 0.615127001589185, 0.4834782072548264, 0.6078201748379979, 0.6242240835244945, 0.5751428544891242, 0.5701757502038078, 0.6102576930523607, 0.6463139763178276, 0.6280391579052018, 0.5422969127216467, 0.5713067519029467, 0.5152779817243185, 0.6041160929782629, 0.5744457061950161, 0.5644613926383826, 0.6133475090185678, 0.5857466422887432, 0.6001238406521721, 0.5064127838285795, 0.6730144466712847, 0.6034897350935726, 0.6735923758699788, 0.6425815728712669, 0.6683965758146018, 0.6111338493472616, 0.6632663441974277, 0.6590230517923596, 0.6569963994835784, 0.14299913850674806, 0.1571853789768829, 0.24924778781005574, 0.4854660580201521, 0.45513590519126523, 0.423424176479792, 0.32488541118354264, 0.28910767608165455, 0.1888950925249555, 0.48270534483328875, 0.4424389164439715, 0.4398549936104863, 0.491905236228367, 0.43484021385061733, 0.4607405147682099, 0.46106581391165713, 0.455520345589551, 0.46355676684438607, 0.8089206991089047, 0.8032330105947123, 0.7940773348440651, 0.7881008719971271, 0.8009643953268427, 0.7915426844434417, 0.8070329817536467, 0.785052261939211, 0.7787846426835434, 0.13309225403586988, 0.11303862806142984, 0.1278293585994681, 0.10996449944669873, 0.11177573705874477, 0.0920230507821369, 0.10651917456603477, 0.13787993402099696, 0.08795927623535627, 0.22537245989025345, 0.1822520454865152, 0.269668489063688, 0.1676899592092268, 0.23439082519198529, 0.22214717934019224, 0.18022731998592678, 0.16018958811593798, 0.3995153216955397, 0.5288120199861911, 0.534353756888219, 0.5665665192547786, 0.49566747434811054, 0.5449863531705816, 0.5836909696544484, 0.5612332883776314, 0.5443470910913364, 0.5656817302333066, 0.41155420122070696, 0.33586028124980993, 0.3637199274988141, 0.4292611541933683, 0.3515183345915862, 0.43861488213736677, 0.4465614461170503, 0.4367880296653187, 0.41460360622701187, 0.19227037109073364, 0.1939768442135964, 0.18814334955603873, 0.19774867600959167, 0.21259125666297007, 0.18127793454434982, 0.21732098954972767, 0.1885143402381686, 0.20275999269375677, 0.5829186081149222, 0.22697432924859617, 0.5706073259665939, 0.23330771284939122, 0.4767868340066648, 0.6400609229916868, 0.19383715260728462, 0.6165393165280664, 0.549793572417418, 0.15907025620425141, 0.7970842979372714, 0.8675920873176005, 0.808026498070359, 0.1944076650670401, 0.8136834631400169, 0.8385380959351164, 0.764117137843102, 0.7953981247578885, 0.1557164359330958, 0.8660146868557677, 0.21180032542539862, 0.8345104773781942, 0.16318543971034583, 0.15078195531810146, 0.21202444877455218, 0.1267818034298227, 0.2110247350329808, 0.2439409853761254, 0.1792280883557521, 0.18974680321393111, 0.20251839580461684, 0.18125717016712273, 0.1827452762816697, 0.1842130054567509, 0.20548524171424665, 0.18951493094578475, 0.08221591729256106, 0.08757373629966714, 0.08217098691538627, 0.08466327357622394, 0.08197339842586748, 0.09105702707297092, 0.08660276115979226, 0.09474342373415989, 0.081825840634841]}, "mutation_prompt": null}
{"id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])  # Dynamic scaling introduced\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 - 0.1 * (self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.20:  # Adjusted probability of applying Lévy flight\n                    trial += 0.003 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV7", "description": "Introduces dynamic scaling factor and adaptive crossover probability to enhance convergence speed.", "configspace": "", "generation": 80, "fitness": 0.5109281017821474, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.51 with standard deviation 0.30.", "error": "", "parent_id": "ad0efe69-4c3c-4086-a978-45c1bcc91d80", "metadata": {"aucs": [0.9158792675068598, 0.9158003389972122, 0.9221910896539993, 0.9123940734011632, 0.9177888107439026, 0.9218029738033999, 0.9203314077050668, 0.9204655171897537, 0.9121380655688268, 0.8565484686085562, 0.8462377597143431, 0.8486332442033451, 0.8317471288852798, 0.8461191426788103, 0.8418411833303125, 0.8563018558533873, 0.851131657049003, 0.848482557187857, 0.563533032742125, 0.16949646246095584, 0.17240513851436312, 0.43460643763233775, 0.5594235892021415, 0.12190056443027875, 0.17186181863279804, 0.5108641560057865, 0.15504288191247617, 0.16001780965784895, 0.5439242408689553, 0.1315436438597617, 0.12046928808229806, 0.1466130464124209, 0.15754658241213126, 0.13573947441401102, 0.12780981362485822, 0.14751367888960498, 0.9508937527238007, 0.9649914011979619, 0.9735986900909863, 0.9922548510275288, 0.9826749034378882, 0.9702784393813471, 0.9872841064650499, 0.9608908046210983, 0.971151082579845, 0.7798528004455796, 0.7468927410956698, 0.798034997382334, 0.7966123479225359, 0.7792269531259979, 0.7957970606690865, 0.7894347290044549, 0.7615020298408698, 0.7936606094777362, 0.9228854857764284, 0.3890204606258457, 0.8687204278776409, 0.9057537652565751, 0.9024174763780959, 0.8971755597597563, 0.9066511815686839, 0.8833969312211856, 0.9078513235187177, 0.679537514119845, 0.6962912167600817, 0.7381576638706969, 0.6539255307117757, 0.6851919609887892, 0.7864943106317746, 0.5764666863377421, 0.30463590997158696, 0.5468791182753603, 0.5518381522988951, 0.43261263979257925, 0.6017255227245581, 0.648617473089836, 0.5141496586548766, 0.5703549204469969, 0.6583042486481221, 0.6041071873971026, 0.49112801499484504, 0.4827357664304802, 0.2403810138478455, 0.25755162071188364, 0.736304058398573, 0.5341210532804862, 0.7045844738461622, 0.5178360563787741, 0.6721402091554205, 0.7512205536599219, 0.8007529784517481, 0.7810551583169669, 0.7768693689646518, 0.46605895876886116, 0.7711940410512776, 0.39532204536832405, 0.8007105340436453, 0.8001430648202986, 0.8054006887589631, 0.13926720271131632, 0.3541127738272545, 0.099753313172808, 0.6967530131446673, 0.6626922321049964, 0.2632701564244463, 0.36934929858383925, 0.15839413907189626, 0.1899505926273387, 0.46395833579963597, 0.5165847672337476, 0.4664910653747817, 0.5755842893908654, 0.6491591164850639, 0.6389083269677427, 0.5415221167065247, 0.5660834616259476, 0.3917516159601767, 0.8225576292297567, 0.881443088637366, 0.8765211438910057, 0.8420373072357357, 0.8579284452138927, 0.8809812681166996, 0.8827069081159667, 0.8125307969978461, 0.8618168778710296, 0.13377352571955858, 0.12927234599650417, 0.1297901553969517, 0.1405985059111039, 0.12911417274453252, 0.12101325846247168, 0.1681844368317541, 0.10712041715929044, 0.12803920274063219, 0.30750580384321735, 0.6964745785430471, 0.6429062004765917, 0.2360651002773244, 0.31176267499616117, 0.2169957780970213, 0.2326815745176305, 0.256285905004625, 0.17126644349453546, 0.5092256584991677, 0.5507439530472205, 0.7133606720029918, 0.5605658942733328, 0.6803711282565765, 0.6855323811046863, 0.5609590903047963, 0.5899225835191306, 0.6121892619975013, 0.5043225240049569, 0.5157399797724644, 0.5303069671411651, 0.4679297394107359, 0.5455961812199097, 0.5002563733712789, 0.4555851433737834, 0.43387065988033724, 0.5006633838706664, 0.208270218948307, 0.20425712096676696, 0.20229169008849757, 0.206296376831001, 0.2149660552772189, 0.20848226165715633, 0.22409255290040286, 0.19924192224010429, 0.21174871714411714, 0.6701616420041003, 0.24701250415794762, 0.6664909469277652, 0.709443349331909, 0.7565323315810628, 0.2499492514423156, 0.24231869519035476, 0.6843923983597029, 0.2444942841584521, 0.19590088072560252, 0.18805553256208252, 0.16515183360641017, 0.16705756213650724, 0.1990716042305789, 0.1689338385922904, 0.8754901934944339, 0.1755129887390392, 0.8887864679110348, 0.8892366432668535, 0.15679801421525585, 0.9095570098662779, 0.2116246662765845, 0.16667679715600625, 0.15523002844808997, 0.211137282100475, 0.12760949576109293, 0.15369589144481033, 0.17809867869796236, 0.17517396242300798, 0.18636530763520398, 0.19517691761866895, 0.17814998950299576, 0.18890285924202166, 0.20056286093939224, 0.2612826410193192, 0.18275920884359143, 0.08969568686098062, 0.08706783577153676, 0.08671146612260217, 0.08741510805478536, 0.09540270864154898, 0.08287411788776478, 0.0872783043118388, 0.08995233119956991, 0.08367952436576342]}, "mutation_prompt": null}
{"id": "3d50e950-0e94-41ef-b880-d0eb7d12a1ee", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])  # Dynamic scaling introduced\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 - 0.1 * (self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.20:  # Adjusted probability of applying Lévy flight\n                    trial += 0.003 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV7", "description": "Introduces dynamic scaling factor and adaptive crossover probability to enhance convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9158792675068598, 0.9158003389972122, 0.9221910896539993, 0.9123940734011632, 0.9177888107439026, 0.9218029738033999, 0.9203314077050668, 0.9204655171897537, 0.9121380655688268, 0.8565484686085562, 0.8462377597143431, 0.8486332442033451, 0.8317471288852798, 0.8461191426788103, 0.8418411833303125, 0.8563018558533873, 0.851131657049003, 0.848482557187857, 0.563533032742125, 0.16949646246095584, 0.17240513851436312, 0.43460643763233775, 0.5594235892021415, 0.12190056443027875, 0.17186181863279804, 0.5108641560057865, 0.15504288191247617, 0.16001780965784895, 0.5439242408689553, 0.1315436438597617, 0.12046928808229806, 0.1466130464124209, 0.15754658241213126, 0.13573947441401102, 0.12780981362485822, 0.14751367888960498, 0.9508937527238007, 0.9649914011979619, 0.9735986900909863, 0.9922548510275288, 0.9826749034378882, 0.9702784393813471, 0.9872841064650499, 0.9608908046210983, 0.971151082579845, 0.7798528004455796, 0.7468927410956698, 0.798034997382334, 0.7966123479225359, 0.7792269531259979, 0.7957970606690865, 0.7894347290044549, 0.7615020298408698, 0.7936606094777362, 0.9228854857764284, 0.3890204606258457, 0.8687204278776409, 0.9057537652565751, 0.9024174763780959, 0.8971755597597563, 0.9066511815686839, 0.8833969312211856, 0.9078513235187177, 0.679537514119845, 0.6962912167600817, 0.7381576638706969, 0.6539255307117757, 0.6851919609887892, 0.7864943106317746, 0.5764666863377421, 0.30463590997158696, 0.5468791182753603, 0.5518381522988951, 0.43261263979257925, 0.6017255227245581, 0.648617473089836, 0.5141496586548766, 0.5703549204469969, 0.6583042486481221, 0.6041071873971026, 0.49112801499484504, 0.4827357664304802, 0.2403810138478455, 0.25755162071188364, 0.736304058398573, 0.5341210532804862, 0.7045844738461622, 0.5178360563787741, 0.6721402091554205, 0.7512205536599219, 0.8007529784517481, 0.7810551583169669, 0.7768693689646518, 0.46605895876886116, 0.7711940410512776, 0.39532204536832405, 0.8007105340436453, 0.8001430648202986, 0.8054006887589631, 0.13926720271131632, 0.3541127738272545, 0.099753313172808, 0.6967530131446673, 0.6626922321049964, 0.2632701564244463, 0.36934929858383925, 0.15839413907189626, 0.1899505926273387, 0.46395833579963597, 0.5165847672337476, 0.4664910653747817, 0.5755842893908654, 0.6491591164850639, 0.6389083269677427, 0.5415221167065247, 0.5660834616259476, 0.3917516159601767, 0.8225576292297567, 0.881443088637366, 0.8765211438910057, 0.8420373072357357, 0.8579284452138927, 0.8809812681166996, 0.8827069081159667, 0.8125307969978461, 0.8618168778710296, 0.13377352571955858, 0.12927234599650417, 0.1297901553969517, 0.1405985059111039, 0.12911417274453252, 0.12101325846247168, 0.1681844368317541, 0.10712041715929044, 0.12803920274063219, 0.30750580384321735, 0.6964745785430471, 0.6429062004765917, 0.2360651002773244, 0.31176267499616117, 0.2169957780970213, 0.2326815745176305, 0.256285905004625, 0.17126644349453546, 0.5092256584991677, 0.5507439530472205, 0.7133606720029918, 0.5605658942733328, 0.6803711282565765, 0.6855323811046863, 0.5609590903047963, 0.5899225835191306, 0.6121892619975013, 0.5043225240049569, 0.5157399797724644, 0.5303069671411651, 0.4679297394107359, 0.5455961812199097, 0.5002563733712789, 0.4555851433737834, 0.43387065988033724, 0.5006633838706664, 0.208270218948307, 0.20425712096676696, 0.20229169008849757, 0.206296376831001, 0.2149660552772189, 0.20848226165715633, 0.22409255290040286, 0.19924192224010429, 0.21174871714411714, 0.6701616420041003, 0.24701250415794762, 0.6664909469277652, 0.709443349331909, 0.7565323315810628, 0.2499492514423156, 0.24231869519035476, 0.6843923983597029, 0.2444942841584521, 0.19590088072560252, 0.18805553256208252, 0.16515183360641017, 0.16705756213650724, 0.1990716042305789, 0.1689338385922904, 0.8754901934944339, 0.1755129887390392, 0.8887864679110348, 0.8892366432668535, 0.15679801421525585, 0.9095570098662779, 0.2116246662765845, 0.16667679715600625, 0.15523002844808997, 0.211137282100475, 0.12760949576109293, 0.15369589144481033, 0.17809867869796236, 0.17517396242300798, 0.18636530763520398, 0.19517691761866895, 0.17814998950299576, 0.18890285924202166, 0.20056286093939224, 0.2612826410193192, 0.18275920884359143, 0.08969568686098062, 0.08706783577153676, 0.08671146612260217, 0.08741510805478536, 0.09540270864154898, 0.08287411788776478, 0.0872783043118388, 0.08995233119956991, 0.08367952436576342]}, "mutation_prompt": null}
{"id": "b4962f61-5976-438e-85d7-f4d3af61c1da", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])  # Dynamic scaling introduced\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 - 0.1 * (self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.20:  # Adjusted probability of applying Lévy flight\n                    trial += 0.003 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV7", "description": "Introduces dynamic scaling factor and adaptive crossover probability to enhance convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9158792675068598, 0.9158003389972122, 0.9221910896539993, 0.9123940734011632, 0.9177888107439026, 0.9218029738033999, 0.9203314077050668, 0.9204655171897537, 0.9121380655688268, 0.8565484686085562, 0.8462377597143431, 0.8486332442033451, 0.8317471288852798, 0.8461191426788103, 0.8418411833303125, 0.8563018558533873, 0.851131657049003, 0.848482557187857, 0.563533032742125, 0.16949646246095584, 0.17240513851436312, 0.43460643763233775, 0.5594235892021415, 0.12190056443027875, 0.17186181863279804, 0.5108641560057865, 0.15504288191247617, 0.16001780965784895, 0.5439242408689553, 0.1315436438597617, 0.12046928808229806, 0.1466130464124209, 0.15754658241213126, 0.13573947441401102, 0.12780981362485822, 0.14751367888960498, 0.9508937527238007, 0.9649914011979619, 0.9735986900909863, 0.9922548510275288, 0.9826749034378882, 0.9702784393813471, 0.9872841064650499, 0.9608908046210983, 0.971151082579845, 0.7798528004455796, 0.7468927410956698, 0.798034997382334, 0.7966123479225359, 0.7792269531259979, 0.7957970606690865, 0.7894347290044549, 0.7615020298408698, 0.7936606094777362, 0.9228854857764284, 0.3890204606258457, 0.8687204278776409, 0.9057537652565751, 0.9024174763780959, 0.8971755597597563, 0.9066511815686839, 0.8833969312211856, 0.9078513235187177, 0.679537514119845, 0.6962912167600817, 0.7381576638706969, 0.6539255307117757, 0.6851919609887892, 0.7864943106317746, 0.5764666863377421, 0.30463590997158696, 0.5468791182753603, 0.5518381522988951, 0.43261263979257925, 0.6017255227245581, 0.648617473089836, 0.5141496586548766, 0.5703549204469969, 0.6583042486481221, 0.6041071873971026, 0.49112801499484504, 0.4827357664304802, 0.2403810138478455, 0.25755162071188364, 0.736304058398573, 0.5341210532804862, 0.7045844738461622, 0.5178360563787741, 0.6721402091554205, 0.7512205536599219, 0.8007529784517481, 0.7810551583169669, 0.7768693689646518, 0.46605895876886116, 0.7711940410512776, 0.39532204536832405, 0.8007105340436453, 0.8001430648202986, 0.8054006887589631, 0.13926720271131632, 0.3541127738272545, 0.099753313172808, 0.6967530131446673, 0.6626922321049964, 0.2632701564244463, 0.36934929858383925, 0.15839413907189626, 0.1899505926273387, 0.46395833579963597, 0.5165847672337476, 0.4664910653747817, 0.5755842893908654, 0.6491591164850639, 0.6389083269677427, 0.5415221167065247, 0.5660834616259476, 0.3917516159601767, 0.8225576292297567, 0.881443088637366, 0.8765211438910057, 0.8420373072357357, 0.8579284452138927, 0.8809812681166996, 0.8827069081159667, 0.8125307969978461, 0.8618168778710296, 0.13377352571955858, 0.12927234599650417, 0.1297901553969517, 0.1405985059111039, 0.12911417274453252, 0.12101325846247168, 0.1681844368317541, 0.10712041715929044, 0.12803920274063219, 0.30750580384321735, 0.6964745785430471, 0.6429062004765917, 0.2360651002773244, 0.31176267499616117, 0.2169957780970213, 0.2326815745176305, 0.256285905004625, 0.17126644349453546, 0.5092256584991677, 0.5507439530472205, 0.7133606720029918, 0.5605658942733328, 0.6803711282565765, 0.6855323811046863, 0.5609590903047963, 0.5899225835191306, 0.6121892619975013, 0.5043225240049569, 0.5157399797724644, 0.5303069671411651, 0.4679297394107359, 0.5455961812199097, 0.5002563733712789, 0.4555851433737834, 0.43387065988033724, 0.5006633838706664, 0.208270218948307, 0.20425712096676696, 0.20229169008849757, 0.206296376831001, 0.2149660552772189, 0.20848226165715633, 0.22409255290040286, 0.19924192224010429, 0.21174871714411714, 0.6701616420041003, 0.24701250415794762, 0.6664909469277652, 0.709443349331909, 0.7565323315810628, 0.2499492514423156, 0.24231869519035476, 0.6843923983597029, 0.2444942841584521, 0.19590088072560252, 0.18805553256208252, 0.16515183360641017, 0.16705756213650724, 0.1990716042305789, 0.1689338385922904, 0.8754901934944339, 0.1755129887390392, 0.8887864679110348, 0.8892366432668535, 0.15679801421525585, 0.9095570098662779, 0.2116246662765845, 0.16667679715600625, 0.15523002844808997, 0.211137282100475, 0.12760949576109293, 0.15369589144481033, 0.17809867869796236, 0.17517396242300798, 0.18636530763520398, 0.19517691761866895, 0.17814998950299576, 0.18890285924202166, 0.20056286093939224, 0.2612826410193192, 0.18275920884359143, 0.08969568686098062, 0.08706783577153676, 0.08671146612260217, 0.08741510805478536, 0.09540270864154898, 0.08287411788776478, 0.0872783043118388, 0.08995233119956991, 0.08367952436576342]}, "mutation_prompt": null}
{"id": "67e6aeb2-8a80-4434-8a21-6bf225882ffb", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])  # Dynamic scaling introduced\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 - 0.1 * (self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.20:  # Adjusted probability of applying Lévy flight\n                    trial += 0.003 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV7", "description": "Introduces dynamic scaling factor and adaptive crossover probability to enhance convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9158792675068598, 0.9158003389972122, 0.9221910896539993, 0.9123940734011632, 0.9177888107439026, 0.9218029738033999, 0.9203314077050668, 0.9204655171897537, 0.9121380655688268, 0.8565484686085562, 0.8462377597143431, 0.8486332442033451, 0.8317471288852798, 0.8461191426788103, 0.8418411833303125, 0.8563018558533873, 0.851131657049003, 0.848482557187857, 0.563533032742125, 0.16949646246095584, 0.17240513851436312, 0.43460643763233775, 0.5594235892021415, 0.12190056443027875, 0.17186181863279804, 0.5108641560057865, 0.15504288191247617, 0.16001780965784895, 0.5439242408689553, 0.1315436438597617, 0.12046928808229806, 0.1466130464124209, 0.15754658241213126, 0.13573947441401102, 0.12780981362485822, 0.14751367888960498, 0.9508937527238007, 0.9649914011979619, 0.9735986900909863, 0.9922548510275288, 0.9826749034378882, 0.9702784393813471, 0.9872841064650499, 0.9608908046210983, 0.971151082579845, 0.7798528004455796, 0.7468927410956698, 0.798034997382334, 0.7966123479225359, 0.7792269531259979, 0.7957970606690865, 0.7894347290044549, 0.7615020298408698, 0.7936606094777362, 0.9228854857764284, 0.3890204606258457, 0.8687204278776409, 0.9057537652565751, 0.9024174763780959, 0.8971755597597563, 0.9066511815686839, 0.8833969312211856, 0.9078513235187177, 0.679537514119845, 0.6962912167600817, 0.7381576638706969, 0.6539255307117757, 0.6851919609887892, 0.7864943106317746, 0.5764666863377421, 0.30463590997158696, 0.5468791182753603, 0.5518381522988951, 0.43261263979257925, 0.6017255227245581, 0.648617473089836, 0.5141496586548766, 0.5703549204469969, 0.6583042486481221, 0.6041071873971026, 0.49112801499484504, 0.4827357664304802, 0.2403810138478455, 0.25755162071188364, 0.736304058398573, 0.5341210532804862, 0.7045844738461622, 0.5178360563787741, 0.6721402091554205, 0.7512205536599219, 0.8007529784517481, 0.7810551583169669, 0.7768693689646518, 0.46605895876886116, 0.7711940410512776, 0.39532204536832405, 0.8007105340436453, 0.8001430648202986, 0.8054006887589631, 0.13926720271131632, 0.3541127738272545, 0.099753313172808, 0.6967530131446673, 0.6626922321049964, 0.2632701564244463, 0.36934929858383925, 0.15839413907189626, 0.1899505926273387, 0.46395833579963597, 0.5165847672337476, 0.4664910653747817, 0.5755842893908654, 0.6491591164850639, 0.6389083269677427, 0.5415221167065247, 0.5660834616259476, 0.3917516159601767, 0.8225576292297567, 0.881443088637366, 0.8765211438910057, 0.8420373072357357, 0.8579284452138927, 0.8809812681166996, 0.8827069081159667, 0.8125307969978461, 0.8618168778710296, 0.13377352571955858, 0.12927234599650417, 0.1297901553969517, 0.1405985059111039, 0.12911417274453252, 0.12101325846247168, 0.1681844368317541, 0.10712041715929044, 0.12803920274063219, 0.30750580384321735, 0.6964745785430471, 0.6429062004765917, 0.2360651002773244, 0.31176267499616117, 0.2169957780970213, 0.2326815745176305, 0.256285905004625, 0.17126644349453546, 0.5092256584991677, 0.5507439530472205, 0.7133606720029918, 0.5605658942733328, 0.6803711282565765, 0.6855323811046863, 0.5609590903047963, 0.5899225835191306, 0.6121892619975013, 0.5043225240049569, 0.5157399797724644, 0.5303069671411651, 0.4679297394107359, 0.5455961812199097, 0.5002563733712789, 0.4555851433737834, 0.43387065988033724, 0.5006633838706664, 0.208270218948307, 0.20425712096676696, 0.20229169008849757, 0.206296376831001, 0.2149660552772189, 0.20848226165715633, 0.22409255290040286, 0.19924192224010429, 0.21174871714411714, 0.6701616420041003, 0.24701250415794762, 0.6664909469277652, 0.709443349331909, 0.7565323315810628, 0.2499492514423156, 0.24231869519035476, 0.6843923983597029, 0.2444942841584521, 0.19590088072560252, 0.18805553256208252, 0.16515183360641017, 0.16705756213650724, 0.1990716042305789, 0.1689338385922904, 0.8754901934944339, 0.1755129887390392, 0.8887864679110348, 0.8892366432668535, 0.15679801421525585, 0.9095570098662779, 0.2116246662765845, 0.16667679715600625, 0.15523002844808997, 0.211137282100475, 0.12760949576109293, 0.15369589144481033, 0.17809867869796236, 0.17517396242300798, 0.18636530763520398, 0.19517691761866895, 0.17814998950299576, 0.18890285924202166, 0.20056286093939224, 0.2612826410193192, 0.18275920884359143, 0.08969568686098062, 0.08706783577153676, 0.08671146612260217, 0.08741510805478536, 0.09540270864154898, 0.08287411788776478, 0.0872783043118388, 0.08995233119956991, 0.08367952436576342]}, "mutation_prompt": null}
{"id": "9d9a9e9b-5dbd-4642-b6af-783d7b813399", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV8:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget * 0.8)\n        F1 *= np.random.choice([1.15, 0.85], p=[0.7, 0.3])  # Adjusted dynamic scaling\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget * 0.8)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.85 - 0.15 * (self.eval_count / self.budget)  # Adjusted adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.5:\n            self.population_size = max(int(self.initial_population_size * 0.6), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.25:  # Adjusted probability of applying Lévy flight\n                    trial += 0.0025 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV8", "description": "Improved balance between exploration and exploitation by adaptive mutation and crossover strategies.", "configspace": "", "generation": 84, "fitness": 0.4860254867668211, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV8 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.29.", "error": "", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9179426544256974, 0.9180326451202433, 0.9077488230572598, 0.9155355020288705, 0.9151837020470275, 0.9211545987820403, 0.9125372293755193, 0.9215070403088719, 0.9217650109944193, 0.8262837738288933, 0.8206459939622748, 0.8439875901935731, 0.8148179799174848, 0.7607458272565375, 0.827888329547599, 0.848547827006755, 0.8410701581174053, 0.827707797507193, 0.605016588492537, 0.16336576331564123, 0.5444544793908226, 0.5678450683054483, 0.5904072099800242, 0.1680473945568045, 0.1487163448391493, 0.5078631297378101, 0.5328499756277773, 0.12233754185011314, 0.17558767870205427, 0.16620913191019648, 0.15295383444332533, 0.4004197257313865, 0.15157536820290174, 0.12544343778704115, 0.16884434135511217, 0.168652254567616, 0.9641409608362721, 0.9592128057290259, 0.9902029857473079, 0.9497937379029195, 0.9701866671050853, 0.9736971191908481, 0.9478882325561211, 0.9710949804199853, 0.9811228308834058, 0.7647691248688886, 0.7583460333041891, 0.7770863838977152, 0.7678376396908854, 0.7868362671928234, 0.7937138895792437, 0.7776471142457702, 0.7767418008912546, 0.7758461343482933, 0.9037667821947858, 0.877619568707023, 0.8711696801561795, 0.8922182737968756, 0.8972419622470333, 0.21275223227267648, 0.8613095298550733, 0.8972971198045199, 0.8807369759360619, 0.564260562476829, 0.34285127995926246, 0.6668023643821804, 0.4011899875741063, 0.6085769343243743, 0.5303282441010551, 0.5141145768507769, 0.5250361686721468, 0.5730812699589766, 0.44959559559552076, 0.5748613048844967, 0.4665716262398124, 0.40993340249598664, 0.39576893638067046, 0.3421818525165987, 0.6520456131592162, 0.40394387709252744, 0.5625835048118011, 0.24817159330683503, 0.5887756868102523, 0.5105555030684217, 0.3200868045274068, 0.5109378223816072, 0.2614777064719851, 0.5637240053504542, 0.14814807909783412, 0.400251298071565, 0.6572696078749134, 0.5838871520553128, 0.6336508845131134, 0.6315453792037324, 0.6703454732225455, 0.5780918917358305, 0.676428586348975, 0.7167246594752474, 0.5801560519515712, 0.2903021668210515, 0.26799678323838505, 0.11729967527464868, 0.4264945278635942, 0.0963161198934207, 0.2308507837424325, 0.12684500334480397, 0.13669971828118355, 0.13983104385991407, 0.416881277729094, 0.3687012595166288, 0.45822621361134086, 0.5039132616562687, 0.4840541070529514, 0.45196780346202337, 0.47090014033836014, 0.4577164365025901, 0.4172696426147635, 0.8299933792330146, 0.8187638615513357, 0.844738463085365, 0.8121583876243705, 0.8364799019148388, 0.8491696760026872, 0.8333643340606545, 0.8236421154847657, 0.8552925945857344, 0.11470001217298154, 0.11606359102377051, 0.11850560181599956, 0.3522093309943011, 0.12923372250176357, 0.15170913831978217, 0.11851429741549213, 0.11882603112391565, 0.16476405511982428, 0.19918456297177, 0.1775508765215429, 0.17355853199697324, 0.16698081186363067, 0.19292913007005896, 0.2698239414285257, 0.2850137603812912, 0.27472035902544856, 0.15790867086614324, 0.655613336835662, 0.6579406683632949, 0.6278257282126678, 0.6512046097897739, 0.5836637166350384, 0.6644809262554034, 0.6144348176523526, 0.6935786727613078, 0.6538444033625986, 0.4611690938264219, 0.38221494725416205, 0.24838289649769107, 0.44254048435143145, 0.43387228950789614, 0.4452398978834542, 0.47263287071671956, 0.4922819956611285, 0.5010086737542478, 0.2189503446004396, 0.19916802454490712, 0.21223489765215853, 0.21049407775238416, 0.1990474276873403, 0.1939493874243502, 0.2097257188753553, 0.2103929831368243, 0.19363328039305616, 0.6432477875552766, 0.2420507367230924, 0.24133970328894494, 0.2420813905938899, 0.6452591336685599, 0.6959702748670358, 0.7646866816293334, 0.24292765302592656, 0.22013172220660682, 0.16414465793117528, 0.18680660632751678, 0.14275792167647283, 0.8996239017882783, 0.16901030972189202, 0.8878281978121204, 0.8898469392150261, 0.19573336359657034, 0.8962540328587726, 0.11224429867230667, 0.1679850175330997, 0.887461446417316, 0.20789358261387947, 0.1664552346134458, 0.8972657095920749, 0.15598777903707084, 0.9076075210945271, 0.1548586594584409, 0.18107994310838615, 0.17331203868472678, 0.18352525116950902, 0.18835421765033444, 0.17410439362294305, 0.18024728594235184, 0.17545381688887796, 0.19551123222342004, 0.17249436347114255, 0.07786636756032927, 0.09622051913732499, 0.083492433500024, 0.08371871507063022, 0.09940787378836102, 0.08736774239745049, 0.08658463130770921, 0.08359561432226092, 0.08619329034379986]}, "mutation_prompt": null}
{"id": "52a1829b-1c58-450e-abc8-8407698aba74", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV8:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.1, 0.9], p=[0.75, 0.25])  # More diversity in scaling\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.45 + (0.2 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F2 *= np.random.choice([1.0, 1.2], p=[0.7, 0.3])  # Alternative scaling enhancement\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.85 - 0.1 * (self.eval_count / self.budget)  # Slightly more aggressive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.5:\n            self.population_size = max(int(self.initial_population_size * 0.5), 5 * self.dim)  # Earlier resizing\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.18:  # Slightly adjusted probability of applying Lévy flight\n                    trial += 0.0025 * self.levy_flight()  # Adjusted step size for stability\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV8", "description": "Introduces strategic mutation diversity and refined population resizing to enhance exploration and convergence speed.", "configspace": "", "generation": 85, "fitness": 0.5029865636076877, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV8 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.28.", "error": "", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9067679921986779, 0.9143021052138742, 0.9048442443519926, 0.910593298389144, 0.912970567859191, 0.9145589222844732, 0.9125347171384961, 0.9103790057690095, 0.9154029654802573, 0.8276273141682572, 0.8276137346434995, 0.8327213068248305, 0.8431076152381756, 0.8427701253474285, 0.8317227897184722, 0.8401014405499208, 0.8387498234692514, 0.8241343042144988, 0.5784194973471188, 0.4368979741563027, 0.5467971713173696, 0.4498541718565704, 0.18013422111678723, 0.14838306698572357, 0.5397674644398993, 0.16691437351623684, 0.4511282240351928, 0.146830492279584, 0.14281174748905978, 0.44085498753914465, 0.1750977729155928, 0.1641045763219372, 0.4659688436668522, 0.15405401848439593, 0.14661616447474024, 0.550459075310918, 0.9787183230196755, 0.9863568800685261, 0.9693296452312608, 0.9657522224841141, 0.9924046537722346, 0.9683549219544196, 0.9740773678041351, 0.9663567244103513, 0.9623933660355999, 0.7720237391621529, 0.7725992311339684, 0.7457261537384003, 0.7543303583280584, 0.7639838210771853, 0.7632577650016811, 0.7630488634055128, 0.7616803299443095, 0.7470967760656482, 0.8904283705500056, 0.8559413062899428, 0.8611092128962794, 0.8862237480837905, 0.8979808186116521, 0.9132623297929255, 0.8913676578287233, 0.882468737722998, 0.8838765536346891, 0.6957543169368645, 0.5475275857500266, 0.6358914175536056, 0.5481599001288637, 0.6524616320147394, 0.13213172284189167, 0.6422032185738438, 0.5651136581739183, 0.6795292265680197, 0.4875928152950748, 0.4610827055259299, 0.6409592464597123, 0.39068936344567395, 0.5589081248709513, 0.6552020279986186, 0.43406152884827065, 0.5133440651102208, 0.5575760002868262, 0.6078626188940892, 0.5790657177080465, 0.47258528416837153, 0.6342602512959826, 0.5551367357144243, 0.23691621955122788, 0.587119340554086, 0.5017878514068286, 0.5230018096253224, 0.6636575354836316, 0.6523260418639352, 0.708641938740205, 0.17975866366871907, 0.6471902633196343, 0.6622255100716955, 0.7186715338147817, 0.7147011390487785, 0.7056670958565769, 0.24542231289217575, 0.07704277858924102, 0.39691458974476923, 0.19308624211133096, 0.5277478629329945, 0.3805514011268927, 0.19367010699263687, 0.25772416127313025, 0.13724013115327072, 0.48426429960187456, 0.39865385712942103, 0.4202167721420589, 0.5209566314967018, 0.5418933517767615, 0.5144013617949562, 0.4146585990574676, 0.38641579670652004, 0.4278716883889184, 0.8565355901175633, 0.7562712093282206, 0.8318251520879142, 0.8430132319500949, 0.760732541584992, 0.7903011165188712, 0.8331543749071466, 0.7175972584541029, 0.8640739295614134, 0.1174228759197371, 0.1370827442938749, 0.10947856095531605, 0.12018479213122879, 0.10645888886700394, 0.14998350214854383, 0.11913522257281928, 0.14347552089495752, 0.10349942309455273, 0.21321667709796033, 0.22197313402025964, 0.265221434201254, 0.16424950567979357, 0.42248974434291775, 0.2911673021816221, 0.45284027746014566, 0.27377230170272426, 0.16256140898292093, 0.6125963603114917, 0.5855869780073448, 0.7093083158124669, 0.6648084139947084, 0.5593076701811147, 0.6221043681064016, 0.6277545264573978, 0.6756791893916488, 0.6539609881344915, 0.4596434591052233, 0.4718532523104516, 0.44103776769580594, 0.47126577134810677, 0.42637946420558726, 0.45775222999869614, 0.49612040084790876, 0.5290504174748598, 0.5276274431650154, 0.1853695056712955, 0.1948642734631073, 0.19001932744028016, 0.20466651955060178, 0.19281731300380656, 0.23385245300585789, 0.1987304665935461, 0.20434359162078441, 0.20856202603965734, 0.5641517885798497, 0.561225800635577, 0.6310745578692898, 0.2412924467481108, 0.7211854183596585, 0.24075608917506885, 0.7645597078538402, 0.7868117541531572, 0.20732067981052338, 0.20743103766349136, 0.19466425601268245, 0.9114399019231195, 0.17655788136952322, 0.1988740190289523, 0.7987425597256129, 0.14127861393910246, 0.16546781545322842, 0.8836539388325565, 0.8807242816059069, 0.16846114566755277, 0.1677732530057945, 0.2045309344684727, 0.8469443703476467, 0.2091527091742984, 0.15643147602659568, 0.20879668475088775, 0.2130497101966533, 0.17041473046190603, 0.18004369799673836, 0.17778170747797872, 0.18541607942146332, 0.46327222953703673, 0.20663933201497164, 0.21362641072333477, 0.18197225011590146, 0.1736840890299427, 0.08406428170211566, 0.07723023963634879, 0.09812715774496705, 0.0852093875780976, 0.08536940149697492, 0.08664293932940614, 0.08600968813168397, 0.07949350393804111, 0.09132552030923757]}, "mutation_prompt": null}
{"id": "c7e51e03-04ba-4043-867b-8372a40d2443", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])  # Dynamic scaling introduced\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 - 0.1 * (self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.20:  # Adjusted probability of applying Lévy flight\n                    trial += 0.003 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV7", "description": "Introduces dynamic scaling factor and adaptive crossover probability to enhance convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9158792675068598, 0.9158003389972122, 0.9221910896539993, 0.9123940734011632, 0.9177888107439026, 0.9218029738033999, 0.9203314077050668, 0.9204655171897537, 0.9121380655688268, 0.8565484686085562, 0.8462377597143431, 0.8486332442033451, 0.8317471288852798, 0.8461191426788103, 0.8418411833303125, 0.8563018558533873, 0.851131657049003, 0.848482557187857, 0.563533032742125, 0.16949646246095584, 0.17240513851436312, 0.43460643763233775, 0.5594235892021415, 0.12190056443027875, 0.17186181863279804, 0.5108641560057865, 0.15504288191247617, 0.16001780965784895, 0.5439242408689553, 0.1315436438597617, 0.12046928808229806, 0.1466130464124209, 0.15754658241213126, 0.13573947441401102, 0.12780981362485822, 0.14751367888960498, 0.9508937527238007, 0.9649914011979619, 0.9735986900909863, 0.9922548510275288, 0.9826749034378882, 0.9702784393813471, 0.9872841064650499, 0.9608908046210983, 0.971151082579845, 0.7798528004455796, 0.7468927410956698, 0.798034997382334, 0.7966123479225359, 0.7792269531259979, 0.7957970606690865, 0.7894347290044549, 0.7615020298408698, 0.7936606094777362, 0.9228854857764284, 0.3890204606258457, 0.8687204278776409, 0.9057537652565751, 0.9024174763780959, 0.8971755597597563, 0.9066511815686839, 0.8833969312211856, 0.9078513235187177, 0.679537514119845, 0.6962912167600817, 0.7381576638706969, 0.6539255307117757, 0.6851919609887892, 0.7864943106317746, 0.5764666863377421, 0.30463590997158696, 0.5468791182753603, 0.5518381522988951, 0.43261263979257925, 0.6017255227245581, 0.648617473089836, 0.5141496586548766, 0.5703549204469969, 0.6583042486481221, 0.6041071873971026, 0.49112801499484504, 0.4827357664304802, 0.2403810138478455, 0.25755162071188364, 0.736304058398573, 0.5341210532804862, 0.7045844738461622, 0.5178360563787741, 0.6721402091554205, 0.7512205536599219, 0.8007529784517481, 0.7810551583169669, 0.7768693689646518, 0.46605895876886116, 0.7711940410512776, 0.39532204536832405, 0.8007105340436453, 0.8001430648202986, 0.8054006887589631, 0.13926720271131632, 0.3541127738272545, 0.099753313172808, 0.6967530131446673, 0.6626922321049964, 0.2632701564244463, 0.36934929858383925, 0.15839413907189626, 0.1899505926273387, 0.46395833579963597, 0.5165847672337476, 0.4664910653747817, 0.5755842893908654, 0.6491591164850639, 0.6389083269677427, 0.5415221167065247, 0.5660834616259476, 0.3917516159601767, 0.8225576292297567, 0.881443088637366, 0.8765211438910057, 0.8420373072357357, 0.8579284452138927, 0.8809812681166996, 0.8827069081159667, 0.8125307969978461, 0.8618168778710296, 0.13377352571955858, 0.12927234599650417, 0.1297901553969517, 0.1405985059111039, 0.12911417274453252, 0.12101325846247168, 0.1681844368317541, 0.10712041715929044, 0.12803920274063219, 0.30750580384321735, 0.6964745785430471, 0.6429062004765917, 0.2360651002773244, 0.31176267499616117, 0.2169957780970213, 0.2326815745176305, 0.256285905004625, 0.17126644349453546, 0.5092256584991677, 0.5507439530472205, 0.7133606720029918, 0.5605658942733328, 0.6803711282565765, 0.6855323811046863, 0.5609590903047963, 0.5899225835191306, 0.6121892619975013, 0.5043225240049569, 0.5157399797724644, 0.5303069671411651, 0.4679297394107359, 0.5455961812199097, 0.5002563733712789, 0.4555851433737834, 0.43387065988033724, 0.5006633838706664, 0.208270218948307, 0.20425712096676696, 0.20229169008849757, 0.206296376831001, 0.2149660552772189, 0.20848226165715633, 0.22409255290040286, 0.19924192224010429, 0.21174871714411714, 0.6701616420041003, 0.24701250415794762, 0.6664909469277652, 0.709443349331909, 0.7565323315810628, 0.2499492514423156, 0.24231869519035476, 0.6843923983597029, 0.2444942841584521, 0.19590088072560252, 0.18805553256208252, 0.16515183360641017, 0.16705756213650724, 0.1990716042305789, 0.1689338385922904, 0.8754901934944339, 0.1755129887390392, 0.8887864679110348, 0.8892366432668535, 0.15679801421525585, 0.9095570098662779, 0.2116246662765845, 0.16667679715600625, 0.15523002844808997, 0.211137282100475, 0.12760949576109293, 0.15369589144481033, 0.17809867869796236, 0.17517396242300798, 0.18636530763520398, 0.19517691761866895, 0.17814998950299576, 0.18890285924202166, 0.20056286093939224, 0.2612826410193192, 0.18275920884359143, 0.08969568686098062, 0.08706783577153676, 0.08671146612260217, 0.08741510805478536, 0.09540270864154898, 0.08287411788776478, 0.0872783043118388, 0.08995233119956991, 0.08367952436576342]}, "mutation_prompt": null}
{"id": "43559787-1333-4dfb-ae60-967e56d53346", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])  # Dynamic scaling introduced\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 - 0.1 * (self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.20:  # Adjusted probability of applying Lévy flight\n                    trial += 0.003 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV7", "description": "Introduces dynamic scaling factor and adaptive crossover probability to enhance convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9158792675068598, 0.9158003389972122, 0.9221910896539993, 0.9123940734011632, 0.9177888107439026, 0.9218029738033999, 0.9203314077050668, 0.9204655171897537, 0.9121380655688268, 0.8565484686085562, 0.8462377597143431, 0.8486332442033451, 0.8317471288852798, 0.8461191426788103, 0.8418411833303125, 0.8563018558533873, 0.851131657049003, 0.848482557187857, 0.563533032742125, 0.16949646246095584, 0.17240513851436312, 0.43460643763233775, 0.5594235892021415, 0.12190056443027875, 0.17186181863279804, 0.5108641560057865, 0.15504288191247617, 0.16001780965784895, 0.5439242408689553, 0.1315436438597617, 0.12046928808229806, 0.1466130464124209, 0.15754658241213126, 0.13573947441401102, 0.12780981362485822, 0.14751367888960498, 0.9508937527238007, 0.9649914011979619, 0.9735986900909863, 0.9922548510275288, 0.9826749034378882, 0.9702784393813471, 0.9872841064650499, 0.9608908046210983, 0.971151082579845, 0.7798528004455796, 0.7468927410956698, 0.798034997382334, 0.7966123479225359, 0.7792269531259979, 0.7957970606690865, 0.7894347290044549, 0.7615020298408698, 0.7936606094777362, 0.9228854857764284, 0.3890204606258457, 0.8687204278776409, 0.9057537652565751, 0.9024174763780959, 0.8971755597597563, 0.9066511815686839, 0.8833969312211856, 0.9078513235187177, 0.679537514119845, 0.6962912167600817, 0.7381576638706969, 0.6539255307117757, 0.6851919609887892, 0.7864943106317746, 0.5764666863377421, 0.30463590997158696, 0.5468791182753603, 0.5518381522988951, 0.43261263979257925, 0.6017255227245581, 0.648617473089836, 0.5141496586548766, 0.5703549204469969, 0.6583042486481221, 0.6041071873971026, 0.49112801499484504, 0.4827357664304802, 0.2403810138478455, 0.25755162071188364, 0.736304058398573, 0.5341210532804862, 0.7045844738461622, 0.5178360563787741, 0.6721402091554205, 0.7512205536599219, 0.8007529784517481, 0.7810551583169669, 0.7768693689646518, 0.46605895876886116, 0.7711940410512776, 0.39532204536832405, 0.8007105340436453, 0.8001430648202986, 0.8054006887589631, 0.13926720271131632, 0.3541127738272545, 0.099753313172808, 0.6967530131446673, 0.6626922321049964, 0.2632701564244463, 0.36934929858383925, 0.15839413907189626, 0.1899505926273387, 0.46395833579963597, 0.5165847672337476, 0.4664910653747817, 0.5755842893908654, 0.6491591164850639, 0.6389083269677427, 0.5415221167065247, 0.5660834616259476, 0.3917516159601767, 0.8225576292297567, 0.881443088637366, 0.8765211438910057, 0.8420373072357357, 0.8579284452138927, 0.8809812681166996, 0.8827069081159667, 0.8125307969978461, 0.8618168778710296, 0.13377352571955858, 0.12927234599650417, 0.1297901553969517, 0.1405985059111039, 0.12911417274453252, 0.12101325846247168, 0.1681844368317541, 0.10712041715929044, 0.12803920274063219, 0.30750580384321735, 0.6964745785430471, 0.6429062004765917, 0.2360651002773244, 0.31176267499616117, 0.2169957780970213, 0.2326815745176305, 0.256285905004625, 0.17126644349453546, 0.5092256584991677, 0.5507439530472205, 0.7133606720029918, 0.5605658942733328, 0.6803711282565765, 0.6855323811046863, 0.5609590903047963, 0.5899225835191306, 0.6121892619975013, 0.5043225240049569, 0.5157399797724644, 0.5303069671411651, 0.4679297394107359, 0.5455961812199097, 0.5002563733712789, 0.4555851433737834, 0.43387065988033724, 0.5006633838706664, 0.208270218948307, 0.20425712096676696, 0.20229169008849757, 0.206296376831001, 0.2149660552772189, 0.20848226165715633, 0.22409255290040286, 0.19924192224010429, 0.21174871714411714, 0.6701616420041003, 0.24701250415794762, 0.6664909469277652, 0.709443349331909, 0.7565323315810628, 0.2499492514423156, 0.24231869519035476, 0.6843923983597029, 0.2444942841584521, 0.19590088072560252, 0.18805553256208252, 0.16515183360641017, 0.16705756213650724, 0.1990716042305789, 0.1689338385922904, 0.8754901934944339, 0.1755129887390392, 0.8887864679110348, 0.8892366432668535, 0.15679801421525585, 0.9095570098662779, 0.2116246662765845, 0.16667679715600625, 0.15523002844808997, 0.211137282100475, 0.12760949576109293, 0.15369589144481033, 0.17809867869796236, 0.17517396242300798, 0.18636530763520398, 0.19517691761866895, 0.17814998950299576, 0.18890285924202166, 0.20056286093939224, 0.2612826410193192, 0.18275920884359143, 0.08969568686098062, 0.08706783577153676, 0.08671146612260217, 0.08741510805478536, 0.09540270864154898, 0.08287411788776478, 0.0872783043118388, 0.08995233119956991, 0.08367952436576342]}, "mutation_prompt": null}
{"id": "55ae069e-cff0-4e8d-a55c-a5acaa941a08", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])  # Dynamic scaling introduced\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 - 0.1 * (self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.20:  # Adjusted probability of applying Lévy flight\n                    trial += 0.003 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV7", "description": "Introduces dynamic scaling factor and adaptive crossover probability to enhance convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9158792675068598, 0.9158003389972122, 0.9221910896539993, 0.9123940734011632, 0.9177888107439026, 0.9218029738033999, 0.9203314077050668, 0.9204655171897537, 0.9121380655688268, 0.8565484686085562, 0.8462377597143431, 0.8486332442033451, 0.8317471288852798, 0.8461191426788103, 0.8418411833303125, 0.8563018558533873, 0.851131657049003, 0.848482557187857, 0.563533032742125, 0.16949646246095584, 0.17240513851436312, 0.43460643763233775, 0.5594235892021415, 0.12190056443027875, 0.17186181863279804, 0.5108641560057865, 0.15504288191247617, 0.16001780965784895, 0.5439242408689553, 0.1315436438597617, 0.12046928808229806, 0.1466130464124209, 0.15754658241213126, 0.13573947441401102, 0.12780981362485822, 0.14751367888960498, 0.9508937527238007, 0.9649914011979619, 0.9735986900909863, 0.9922548510275288, 0.9826749034378882, 0.9702784393813471, 0.9872841064650499, 0.9608908046210983, 0.971151082579845, 0.7798528004455796, 0.7468927410956698, 0.798034997382334, 0.7966123479225359, 0.7792269531259979, 0.7957970606690865, 0.7894347290044549, 0.7615020298408698, 0.7936606094777362, 0.9228854857764284, 0.3890204606258457, 0.8687204278776409, 0.9057537652565751, 0.9024174763780959, 0.8971755597597563, 0.9066511815686839, 0.8833969312211856, 0.9078513235187177, 0.679537514119845, 0.6962912167600817, 0.7381576638706969, 0.6539255307117757, 0.6851919609887892, 0.7864943106317746, 0.5764666863377421, 0.30463590997158696, 0.5468791182753603, 0.5518381522988951, 0.43261263979257925, 0.6017255227245581, 0.648617473089836, 0.5141496586548766, 0.5703549204469969, 0.6583042486481221, 0.6041071873971026, 0.49112801499484504, 0.4827357664304802, 0.2403810138478455, 0.25755162071188364, 0.736304058398573, 0.5341210532804862, 0.7045844738461622, 0.5178360563787741, 0.6721402091554205, 0.7512205536599219, 0.8007529784517481, 0.7810551583169669, 0.7768693689646518, 0.46605895876886116, 0.7711940410512776, 0.39532204536832405, 0.8007105340436453, 0.8001430648202986, 0.8054006887589631, 0.13926720271131632, 0.3541127738272545, 0.099753313172808, 0.6967530131446673, 0.6626922321049964, 0.2632701564244463, 0.36934929858383925, 0.15839413907189626, 0.1899505926273387, 0.46395833579963597, 0.5165847672337476, 0.4664910653747817, 0.5755842893908654, 0.6491591164850639, 0.6389083269677427, 0.5415221167065247, 0.5660834616259476, 0.3917516159601767, 0.8225576292297567, 0.881443088637366, 0.8765211438910057, 0.8420373072357357, 0.8579284452138927, 0.8809812681166996, 0.8827069081159667, 0.8125307969978461, 0.8618168778710296, 0.13377352571955858, 0.12927234599650417, 0.1297901553969517, 0.1405985059111039, 0.12911417274453252, 0.12101325846247168, 0.1681844368317541, 0.10712041715929044, 0.12803920274063219, 0.30750580384321735, 0.6964745785430471, 0.6429062004765917, 0.2360651002773244, 0.31176267499616117, 0.2169957780970213, 0.2326815745176305, 0.256285905004625, 0.17126644349453546, 0.5092256584991677, 0.5507439530472205, 0.7133606720029918, 0.5605658942733328, 0.6803711282565765, 0.6855323811046863, 0.5609590903047963, 0.5899225835191306, 0.6121892619975013, 0.5043225240049569, 0.5157399797724644, 0.5303069671411651, 0.4679297394107359, 0.5455961812199097, 0.5002563733712789, 0.4555851433737834, 0.43387065988033724, 0.5006633838706664, 0.208270218948307, 0.20425712096676696, 0.20229169008849757, 0.206296376831001, 0.2149660552772189, 0.20848226165715633, 0.22409255290040286, 0.19924192224010429, 0.21174871714411714, 0.6701616420041003, 0.24701250415794762, 0.6664909469277652, 0.709443349331909, 0.7565323315810628, 0.2499492514423156, 0.24231869519035476, 0.6843923983597029, 0.2444942841584521, 0.19590088072560252, 0.18805553256208252, 0.16515183360641017, 0.16705756213650724, 0.1990716042305789, 0.1689338385922904, 0.8754901934944339, 0.1755129887390392, 0.8887864679110348, 0.8892366432668535, 0.15679801421525585, 0.9095570098662779, 0.2116246662765845, 0.16667679715600625, 0.15523002844808997, 0.211137282100475, 0.12760949576109293, 0.15369589144481033, 0.17809867869796236, 0.17517396242300798, 0.18636530763520398, 0.19517691761866895, 0.17814998950299576, 0.18890285924202166, 0.20056286093939224, 0.2612826410193192, 0.18275920884359143, 0.08969568686098062, 0.08706783577153676, 0.08671146612260217, 0.08741510805478536, 0.09540270864154898, 0.08287411788776478, 0.0872783043118388, 0.08995233119956991, 0.08367952436576342]}, "mutation_prompt": null}
{"id": "8981698a-ca52-4f5e-b4df-fbc6978eecc7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV8:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.55 + (0.35 * np.random.rand()) * (1 - self.eval_count / self.budget)  # Slightly increased range\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.45 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)  # Slightly increased range\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.88 - 0.12 * (self.eval_count / self.budget)  # Adjusted adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.5:  # Earlier resizing trigger\n            self.population_size = max(int(self.initial_population_size * 0.5), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.25:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.0025 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV8", "description": "Introduces enhanced mutation diversity and time-adaptive population scaling to boost convergence speed.", "configspace": "", "generation": 89, "fitness": 0.49723107293657925, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV8 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.28.", "error": "", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9110354405035949, 0.9216007310120731, 0.9152175734987604, 0.9105822543461133, 0.907182399238752, 0.903092935337995, 0.9009660407793756, 0.9120430230364754, 0.8982819685736823, 0.7675222259720701, 0.8195048997529418, 0.81282606588825, 0.812694699172895, 0.8167965663345719, 0.8062873970038621, 0.8114933177030572, 0.8230319182555316, 0.837730117007546, 0.13971536762424674, 0.14391843587904896, 0.15455889430775538, 0.32606502475632426, 0.16150145057749976, 0.3827129104528556, 0.4463932835950222, 0.6327092091900891, 0.5703168947219932, 0.12795097632535013, 0.4653362829208041, 0.4350864094841347, 0.1577475681738877, 0.14457210547044363, 0.1458324675098569, 0.13003356992642434, 0.3888239003956696, 0.15056877693386628, 0.9724045940509509, 0.979246007419682, 0.9877612298920136, 0.9429970969446996, 0.9541109037043255, 0.9848872786822922, 0.9766212605889211, 0.9607434635221346, 0.9686668591461731, 0.7339829115560166, 0.7633345900803993, 0.7478269774096911, 0.7494806324841664, 0.7369289607810032, 0.745892481997235, 0.7212923747132478, 0.7404204635945701, 0.6835300201354547, 0.8559432827794093, 0.8876760469603786, 0.8879592530883029, 0.8810665437417354, 0.8995777436302492, 0.8591729516921747, 0.2362994950073838, 0.8795170092708084, 0.9100421254554169, 0.6651862310638093, 0.6551270563644727, 0.5697076936217726, 0.2825723895387142, 0.6633893701210741, 0.5821996416535267, 0.6619902297058856, 0.4719236021934725, 0.537557818785699, 0.6391886526462713, 0.26757305489726846, 0.5209302303201293, 0.5873853260763182, 0.6164249176865173, 0.6403495707251259, 0.5431965843406383, 0.5538757884489298, 0.5343478384450424, 0.6228907717188923, 0.612793708548871, 0.5815034628089621, 0.28802282746580965, 0.6090525621283556, 0.6376302793074947, 0.6704855089668104, 0.6276417414427866, 0.6862275046557014, 0.6912278754620755, 0.6467713066627474, 0.7103770985349768, 0.6832702028791612, 0.6190075884150961, 0.6671352188623269, 0.7050695955134323, 0.7135572898630845, 0.6928299987657411, 0.2122385573011526, 0.24267432213758044, 0.2279591554973286, 0.26406894547745063, 0.44830752743750546, 0.277364643375836, 0.17912130038586316, 0.379208318672999, 0.26391029036376124, 0.39945504815980826, 0.5200964410047941, 0.4516069235389669, 0.5302019503247102, 0.529493118455088, 0.5046494189856998, 0.48789355816165825, 0.43915879220049436, 0.427155472959725, 0.8240885257469246, 0.8132228898744838, 0.8309241493813114, 0.8127572211065967, 0.8525378206335061, 0.634899544580037, 0.8110121306236535, 0.8107972300192138, 0.8392394537012037, 0.09936864678543411, 0.11989307880627142, 0.1272809406020593, 0.09937508656649607, 0.09473113970111813, 0.11793251536658245, 0.11198464097750471, 0.10840635140604082, 0.12414638106516673, 0.21400029451375358, 0.26203163342788494, 0.2304455233021553, 0.31207370780851007, 0.14574485225451939, 0.35354096956571535, 0.2748883561485105, 0.6292407058878263, 0.19082831846669623, 0.5979700655955345, 0.6138820005207424, 0.6372118665167695, 0.6006082548263288, 0.6308341561033686, 0.6432600458963857, 0.6713448906263523, 0.6562063567210937, 0.6053724844162002, 0.44537934354329245, 0.5170659347301454, 0.436967624117494, 0.4420278584695898, 0.4694137953669614, 0.4310428653371252, 0.43592430604236787, 0.49620159427631694, 0.5151333665270192, 0.2173632596774675, 0.20628733339163807, 0.22069598001496438, 0.19362940514741067, 0.20266386427109684, 0.2056242378567008, 0.2283188619800416, 0.19825321358066605, 0.1955119755639253, 0.22942215625994544, 0.2331202036800628, 0.6516576473329807, 0.43765512777840665, 0.22855813160624439, 0.7377114746680844, 0.23004592546034008, 0.6144158537277224, 0.2360505313923128, 0.8957013214474572, 0.14588123429354094, 0.1530726214085335, 0.8501565861321871, 0.8371482493714859, 0.9081005322732998, 0.8333772367984198, 0.1973954747361064, 0.8294364546143264, 0.16925059064356207, 0.16873421983928438, 0.20823560347288872, 0.20923028043139957, 0.16796478286254446, 0.1682138532301909, 0.12776977256260247, 0.21141306416868544, 0.12718683132385544, 0.18129951563592417, 0.25088066767258266, 0.20084437829234625, 0.18097960968047677, 0.20837034271961308, 0.18745127053078792, 0.1876520025257673, 0.17890806309691198, 0.17761104368168268, 0.08823580600049385, 0.08634219289484812, 0.10325396805511755, 0.08446849710539772, 0.08957028080432505, 0.08553934492046678, 0.07944257235967145, 0.09936987853068568, 0.08309952577231905]}, "mutation_prompt": null}
{"id": "6674f995-6e51-4dae-a285-4a71202aff15", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])  # Dynamic scaling introduced\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 - 0.1 * (self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.20:  # Adjusted probability of applying Lévy flight\n                    trial += 0.003 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV7", "description": "Introduces dynamic scaling factor and adaptive crossover probability to enhance convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9158792675068598, 0.9158003389972122, 0.9221910896539993, 0.9123940734011632, 0.9177888107439026, 0.9218029738033999, 0.9203314077050668, 0.9204655171897537, 0.9121380655688268, 0.8565484686085562, 0.8462377597143431, 0.8486332442033451, 0.8317471288852798, 0.8461191426788103, 0.8418411833303125, 0.8563018558533873, 0.851131657049003, 0.848482557187857, 0.563533032742125, 0.16949646246095584, 0.17240513851436312, 0.43460643763233775, 0.5594235892021415, 0.12190056443027875, 0.17186181863279804, 0.5108641560057865, 0.15504288191247617, 0.16001780965784895, 0.5439242408689553, 0.1315436438597617, 0.12046928808229806, 0.1466130464124209, 0.15754658241213126, 0.13573947441401102, 0.12780981362485822, 0.14751367888960498, 0.9508937527238007, 0.9649914011979619, 0.9735986900909863, 0.9922548510275288, 0.9826749034378882, 0.9702784393813471, 0.9872841064650499, 0.9608908046210983, 0.971151082579845, 0.7798528004455796, 0.7468927410956698, 0.798034997382334, 0.7966123479225359, 0.7792269531259979, 0.7957970606690865, 0.7894347290044549, 0.7615020298408698, 0.7936606094777362, 0.9228854857764284, 0.3890204606258457, 0.8687204278776409, 0.9057537652565751, 0.9024174763780959, 0.8971755597597563, 0.9066511815686839, 0.8833969312211856, 0.9078513235187177, 0.679537514119845, 0.6962912167600817, 0.7381576638706969, 0.6539255307117757, 0.6851919609887892, 0.7864943106317746, 0.5764666863377421, 0.30463590997158696, 0.5468791182753603, 0.5518381522988951, 0.43261263979257925, 0.6017255227245581, 0.648617473089836, 0.5141496586548766, 0.5703549204469969, 0.6583042486481221, 0.6041071873971026, 0.49112801499484504, 0.4827357664304802, 0.2403810138478455, 0.25755162071188364, 0.736304058398573, 0.5341210532804862, 0.7045844738461622, 0.5178360563787741, 0.6721402091554205, 0.7512205536599219, 0.8007529784517481, 0.7810551583169669, 0.7768693689646518, 0.46605895876886116, 0.7711940410512776, 0.39532204536832405, 0.8007105340436453, 0.8001430648202986, 0.8054006887589631, 0.13926720271131632, 0.3541127738272545, 0.099753313172808, 0.6967530131446673, 0.6626922321049964, 0.2632701564244463, 0.36934929858383925, 0.15839413907189626, 0.1899505926273387, 0.46395833579963597, 0.5165847672337476, 0.4664910653747817, 0.5755842893908654, 0.6491591164850639, 0.6389083269677427, 0.5415221167065247, 0.5660834616259476, 0.3917516159601767, 0.8225576292297567, 0.881443088637366, 0.8765211438910057, 0.8420373072357357, 0.8579284452138927, 0.8809812681166996, 0.8827069081159667, 0.8125307969978461, 0.8618168778710296, 0.13377352571955858, 0.12927234599650417, 0.1297901553969517, 0.1405985059111039, 0.12911417274453252, 0.12101325846247168, 0.1681844368317541, 0.10712041715929044, 0.12803920274063219, 0.30750580384321735, 0.6964745785430471, 0.6429062004765917, 0.2360651002773244, 0.31176267499616117, 0.2169957780970213, 0.2326815745176305, 0.256285905004625, 0.17126644349453546, 0.5092256584991677, 0.5507439530472205, 0.7133606720029918, 0.5605658942733328, 0.6803711282565765, 0.6855323811046863, 0.5609590903047963, 0.5899225835191306, 0.6121892619975013, 0.5043225240049569, 0.5157399797724644, 0.5303069671411651, 0.4679297394107359, 0.5455961812199097, 0.5002563733712789, 0.4555851433737834, 0.43387065988033724, 0.5006633838706664, 0.208270218948307, 0.20425712096676696, 0.20229169008849757, 0.206296376831001, 0.2149660552772189, 0.20848226165715633, 0.22409255290040286, 0.19924192224010429, 0.21174871714411714, 0.6701616420041003, 0.24701250415794762, 0.6664909469277652, 0.709443349331909, 0.7565323315810628, 0.2499492514423156, 0.24231869519035476, 0.6843923983597029, 0.2444942841584521, 0.19590088072560252, 0.18805553256208252, 0.16515183360641017, 0.16705756213650724, 0.1990716042305789, 0.1689338385922904, 0.8754901934944339, 0.1755129887390392, 0.8887864679110348, 0.8892366432668535, 0.15679801421525585, 0.9095570098662779, 0.2116246662765845, 0.16667679715600625, 0.15523002844808997, 0.211137282100475, 0.12760949576109293, 0.15369589144481033, 0.17809867869796236, 0.17517396242300798, 0.18636530763520398, 0.19517691761866895, 0.17814998950299576, 0.18890285924202166, 0.20056286093939224, 0.2612826410193192, 0.18275920884359143, 0.08969568686098062, 0.08706783577153676, 0.08671146612260217, 0.08741510805478536, 0.09540270864154898, 0.08287411788776478, 0.0872783043118388, 0.08995233119956991, 0.08367952436576342]}, "mutation_prompt": null}
{"id": "287b37e2-feac-44a8-9de6-03173924ea46", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])  # Dynamic scaling introduced\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 - 0.1 * (self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.20:  # Adjusted probability of applying Lévy flight\n                    trial += 0.003 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV7", "description": "Introduces dynamic scaling factor and adaptive crossover probability to enhance convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9158792675068598, 0.9158003389972122, 0.9221910896539993, 0.9123940734011632, 0.9177888107439026, 0.9218029738033999, 0.9203314077050668, 0.9204655171897537, 0.9121380655688268, 0.8565484686085562, 0.8462377597143431, 0.8486332442033451, 0.8317471288852798, 0.8461191426788103, 0.8418411833303125, 0.8563018558533873, 0.851131657049003, 0.848482557187857, 0.563533032742125, 0.16949646246095584, 0.17240513851436312, 0.43460643763233775, 0.5594235892021415, 0.12190056443027875, 0.17186181863279804, 0.5108641560057865, 0.15504288191247617, 0.16001780965784895, 0.5439242408689553, 0.1315436438597617, 0.12046928808229806, 0.1466130464124209, 0.15754658241213126, 0.13573947441401102, 0.12780981362485822, 0.14751367888960498, 0.9508937527238007, 0.9649914011979619, 0.9735986900909863, 0.9922548510275288, 0.9826749034378882, 0.9702784393813471, 0.9872841064650499, 0.9608908046210983, 0.971151082579845, 0.7798528004455796, 0.7468927410956698, 0.798034997382334, 0.7966123479225359, 0.7792269531259979, 0.7957970606690865, 0.7894347290044549, 0.7615020298408698, 0.7936606094777362, 0.9228854857764284, 0.3890204606258457, 0.8687204278776409, 0.9057537652565751, 0.9024174763780959, 0.8971755597597563, 0.9066511815686839, 0.8833969312211856, 0.9078513235187177, 0.679537514119845, 0.6962912167600817, 0.7381576638706969, 0.6539255307117757, 0.6851919609887892, 0.7864943106317746, 0.5764666863377421, 0.30463590997158696, 0.5468791182753603, 0.5518381522988951, 0.43261263979257925, 0.6017255227245581, 0.648617473089836, 0.5141496586548766, 0.5703549204469969, 0.6583042486481221, 0.6041071873971026, 0.49112801499484504, 0.4827357664304802, 0.2403810138478455, 0.25755162071188364, 0.736304058398573, 0.5341210532804862, 0.7045844738461622, 0.5178360563787741, 0.6721402091554205, 0.7512205536599219, 0.8007529784517481, 0.7810551583169669, 0.7768693689646518, 0.46605895876886116, 0.7711940410512776, 0.39532204536832405, 0.8007105340436453, 0.8001430648202986, 0.8054006887589631, 0.13926720271131632, 0.3541127738272545, 0.099753313172808, 0.6967530131446673, 0.6626922321049964, 0.2632701564244463, 0.36934929858383925, 0.15839413907189626, 0.1899505926273387, 0.46395833579963597, 0.5165847672337476, 0.4664910653747817, 0.5755842893908654, 0.6491591164850639, 0.6389083269677427, 0.5415221167065247, 0.5660834616259476, 0.3917516159601767, 0.8225576292297567, 0.881443088637366, 0.8765211438910057, 0.8420373072357357, 0.8579284452138927, 0.8809812681166996, 0.8827069081159667, 0.8125307969978461, 0.8618168778710296, 0.13377352571955858, 0.12927234599650417, 0.1297901553969517, 0.1405985059111039, 0.12911417274453252, 0.12101325846247168, 0.1681844368317541, 0.10712041715929044, 0.12803920274063219, 0.30750580384321735, 0.6964745785430471, 0.6429062004765917, 0.2360651002773244, 0.31176267499616117, 0.2169957780970213, 0.2326815745176305, 0.256285905004625, 0.17126644349453546, 0.5092256584991677, 0.5507439530472205, 0.7133606720029918, 0.5605658942733328, 0.6803711282565765, 0.6855323811046863, 0.5609590903047963, 0.5899225835191306, 0.6121892619975013, 0.5043225240049569, 0.5157399797724644, 0.5303069671411651, 0.4679297394107359, 0.5455961812199097, 0.5002563733712789, 0.4555851433737834, 0.43387065988033724, 0.5006633838706664, 0.208270218948307, 0.20425712096676696, 0.20229169008849757, 0.206296376831001, 0.2149660552772189, 0.20848226165715633, 0.22409255290040286, 0.19924192224010429, 0.21174871714411714, 0.6701616420041003, 0.24701250415794762, 0.6664909469277652, 0.709443349331909, 0.7565323315810628, 0.2499492514423156, 0.24231869519035476, 0.6843923983597029, 0.2444942841584521, 0.19590088072560252, 0.18805553256208252, 0.16515183360641017, 0.16705756213650724, 0.1990716042305789, 0.1689338385922904, 0.8754901934944339, 0.1755129887390392, 0.8887864679110348, 0.8892366432668535, 0.15679801421525585, 0.9095570098662779, 0.2116246662765845, 0.16667679715600625, 0.15523002844808997, 0.211137282100475, 0.12760949576109293, 0.15369589144481033, 0.17809867869796236, 0.17517396242300798, 0.18636530763520398, 0.19517691761866895, 0.17814998950299576, 0.18890285924202166, 0.20056286093939224, 0.2612826410193192, 0.18275920884359143, 0.08969568686098062, 0.08706783577153676, 0.08671146612260217, 0.08741510805478536, 0.09540270864154898, 0.08287411788776478, 0.0872783043118388, 0.08995233119956991, 0.08367952436576342]}, "mutation_prompt": null}
{"id": "5c47e9b8-9613-41fa-bb69-e8b9d7f60827", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV8:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        best_idx = np.argmin(self.fitness)\n        \n        F = 0.6 + 0.3 * (1 - self.eval_count / self.budget) * np.random.rand()\n        F *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])\n        \n        if np.random.rand() < 0.4:\n            mutant = self.population[best_idx] + F * (self.population[a] - self.population[b] + self.population[c] - self.population[best_idx])\n        else:\n            mutant = self.population[a] + F * (self.population[b] - self.population[c])\n        \n        return mutant\n\n    def crossover(self, target, mutant):\n        CR = 0.85 - 0.15 * (self.eval_count / self.budget)\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.5:\n            self.population_size = max(int(self.initial_population_size * 0.6), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.15:\n                    trial += 0.005 * self.levy_flight()\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV8", "description": "Incorporates dynamic elitism and adaptive mutation strategies to enhance convergence speed.", "configspace": "", "generation": 92, "fitness": 0.4046193464336796, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV8 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.26.", "error": "", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.859309962308679, 0.8520134242763493, 0.8496689611458619, 0.8679837376789097, 0.8715816333720475, 0.848926973736106, 0.8423791258948391, 0.8640124238342852, 0.8543182175832368, 0.7526010663405782, 0.743168790046397, 0.7650847946602672, 0.7433496523156704, 0.7460855940954396, 0.7441836400636941, 0.7244005899472086, 0.7205598884562399, 0.7397998435690212, 0.36075779695016497, 0.3206841472049152, 0.27675861642616684, 0.2927739934967678, 0.22576981580404354, 0.23518132973129857, 0.300635509281142, 0.33534577796019815, 0.17434133268103247, 0.15359368681599606, 0.13694667175193265, 0.16702427430492006, 0.32262054102068805, 0.24385647760788798, 0.36930681563967493, 0.3214390813724277, 0.1295261171091292, 0.23274919504990454, 0.9606264066978357, 0.9802812236177364, 0.9700616504718838, 0.9410877880347952, 0.9578092760533813, 0.9480756189710878, 0.9520234170784883, 0.9656287677718489, 0.9511698068362646, 0.6300945602148855, 0.5983487734498568, 0.6237357065947078, 0.5985845163206474, 0.6361288608072543, 0.605881982285601, 0.6359475097922749, 0.6208983700572415, 0.614230018199776, 0.8088313821575308, 0.7942628440546456, 0.772196426441374, 0.8150295697722041, 0.7938157317455965, 0.8012707370185509, 0.865068368112658, 0.7816666341692274, 0.7931412512895409, 0.4259913508722929, 0.38084464274769725, 0.4484312452395133, 0.3226550119257612, 0.3959613227037919, 0.5557487702322973, 0.4298818162735897, 0.48929764789255914, 0.5572922509390668, 0.37624627584443826, 0.5653400790673178, 0.23325317368766874, 0.4348465852588569, 0.3397475404643797, 0.36561460490930553, 0.3460365126789764, 0.3705955119546057, 0.41479031382620146, 0.2803743860111667, 0.35944816244525746, 0.2880231847721717, 0.324825502127564, 0.37030944385948683, 0.29613524660391566, 0.2639313362137553, 0.27310013330290406, 0.3575695168280778, 0.44156606416592936, 0.41235957567003345, 0.40530345836723514, 0.44891341351135106, 0.4335717607944186, 0.3769470984360077, 0.47749956757186773, 0.49713417057289, 0.46717542635442566, 0.09279661874190648, 0.1140007490644177, 0.15886574668438647, 0.2060555315009227, 0.20332671021578907, 0.13150609816228442, 0.15280689166659323, 0.18396746249267493, 0.15742439649682305, 0.2746293673182222, 0.291269152892921, 0.2701689459343003, 0.3272770501290516, 0.31744182593238324, 0.32496481981957503, 0.2689744910248638, 0.3121209724028353, 0.2750356493148429, 0.6852494929161392, 0.7102877968264503, 0.7065152301650537, 0.6749095133991995, 0.6934912114718315, 0.6699160499253761, 0.6688162776753701, 0.682277515453136, 0.6927235406701737, 0.09994618244733278, 0.1000138406522798, 0.10036218691693888, 0.10151649928142792, 0.10683475805622511, 0.10090130681078735, 0.1020336754414084, 0.1074976119669343, 0.10569818297769284, 0.15926246640473551, 0.17625949981963263, 0.13056696265238277, 0.13471988734088625, 0.16003395911406149, 0.16802100009506937, 0.21485962530503921, 0.2092512776991593, 0.15172152143413187, 0.4656826803489923, 0.41495109465949587, 0.4196015942596203, 0.443966332142388, 0.45667614075555707, 0.4217162681877157, 0.505869180132352, 0.4608439055892851, 0.47553764018333144, 0.3205635893200369, 0.3158816765400073, 0.34606897301506656, 0.2642420600652322, 0.2993034778190271, 0.26232703816525726, 0.3530718585082002, 0.3352784821794078, 0.37205114330186395, 0.18651695881439811, 0.22431438749408994, 0.19884925467723147, 0.20042521630507848, 0.18747169638932615, 0.23772010657010145, 0.20335735272055577, 0.1795278984130999, 0.1806597210799764, 0.23199115810272697, 0.3969630754665855, 0.40059538889089374, 0.2325622981195301, 0.4314588040622064, 0.3181357961308189, 0.24512852810011443, 0.33714111119319345, 0.3069816483750758, 0.15998637088839918, 0.18582075166801282, 0.1529787473083758, 0.17289552302773004, 0.1742072004968852, 0.7709419129926727, 0.5790916460726505, 0.20355712924607672, 0.7242438533924109, 0.2044593252414445, 0.7800273132186142, 0.20098296020998618, 0.1936582571813027, 0.19642540349708726, 0.16377031876118164, 0.21115925036107464, 0.826401920326802, 0.15437029471863828, 0.20058838502016607, 0.18896318371292642, 0.19012639861005043, 0.17597391958316622, 0.20707666391970092, 0.17108983342239148, 0.16953539360157666, 0.19966884312326405, 0.18304507399377257, 0.0762604332805189, 0.07705064942405437, 0.07499990953543001, 0.08726976037988876, 0.0818956819765132, 0.07951288002814272, 0.07758986058017014, 0.0739963478814365, 0.08700554252400039]}, "mutation_prompt": null}
{"id": "fb77d9aa-1cb0-4cb6-a2cc-d91da63dce59", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])  # Dynamic scaling introduced\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 - 0.1 * (self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.20:  # Adjusted probability of applying Lévy flight\n                    trial += 0.003 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV7", "description": "Introduces dynamic scaling factor and adaptive crossover probability to enhance convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9158792675068598, 0.9158003389972122, 0.9221910896539993, 0.9123940734011632, 0.9177888107439026, 0.9218029738033999, 0.9203314077050668, 0.9204655171897537, 0.9121380655688268, 0.8565484686085562, 0.8462377597143431, 0.8486332442033451, 0.8317471288852798, 0.8461191426788103, 0.8418411833303125, 0.8563018558533873, 0.851131657049003, 0.848482557187857, 0.563533032742125, 0.16949646246095584, 0.17240513851436312, 0.43460643763233775, 0.5594235892021415, 0.12190056443027875, 0.17186181863279804, 0.5108641560057865, 0.15504288191247617, 0.16001780965784895, 0.5439242408689553, 0.1315436438597617, 0.12046928808229806, 0.1466130464124209, 0.15754658241213126, 0.13573947441401102, 0.12780981362485822, 0.14751367888960498, 0.9508937527238007, 0.9649914011979619, 0.9735986900909863, 0.9922548510275288, 0.9826749034378882, 0.9702784393813471, 0.9872841064650499, 0.9608908046210983, 0.971151082579845, 0.7798528004455796, 0.7468927410956698, 0.798034997382334, 0.7966123479225359, 0.7792269531259979, 0.7957970606690865, 0.7894347290044549, 0.7615020298408698, 0.7936606094777362, 0.9228854857764284, 0.3890204606258457, 0.8687204278776409, 0.9057537652565751, 0.9024174763780959, 0.8971755597597563, 0.9066511815686839, 0.8833969312211856, 0.9078513235187177, 0.679537514119845, 0.6962912167600817, 0.7381576638706969, 0.6539255307117757, 0.6851919609887892, 0.7864943106317746, 0.5764666863377421, 0.30463590997158696, 0.5468791182753603, 0.5518381522988951, 0.43261263979257925, 0.6017255227245581, 0.648617473089836, 0.5141496586548766, 0.5703549204469969, 0.6583042486481221, 0.6041071873971026, 0.49112801499484504, 0.4827357664304802, 0.2403810138478455, 0.25755162071188364, 0.736304058398573, 0.5341210532804862, 0.7045844738461622, 0.5178360563787741, 0.6721402091554205, 0.7512205536599219, 0.8007529784517481, 0.7810551583169669, 0.7768693689646518, 0.46605895876886116, 0.7711940410512776, 0.39532204536832405, 0.8007105340436453, 0.8001430648202986, 0.8054006887589631, 0.13926720271131632, 0.3541127738272545, 0.099753313172808, 0.6967530131446673, 0.6626922321049964, 0.2632701564244463, 0.36934929858383925, 0.15839413907189626, 0.1899505926273387, 0.46395833579963597, 0.5165847672337476, 0.4664910653747817, 0.5755842893908654, 0.6491591164850639, 0.6389083269677427, 0.5415221167065247, 0.5660834616259476, 0.3917516159601767, 0.8225576292297567, 0.881443088637366, 0.8765211438910057, 0.8420373072357357, 0.8579284452138927, 0.8809812681166996, 0.8827069081159667, 0.8125307969978461, 0.8618168778710296, 0.13377352571955858, 0.12927234599650417, 0.1297901553969517, 0.1405985059111039, 0.12911417274453252, 0.12101325846247168, 0.1681844368317541, 0.10712041715929044, 0.12803920274063219, 0.30750580384321735, 0.6964745785430471, 0.6429062004765917, 0.2360651002773244, 0.31176267499616117, 0.2169957780970213, 0.2326815745176305, 0.256285905004625, 0.17126644349453546, 0.5092256584991677, 0.5507439530472205, 0.7133606720029918, 0.5605658942733328, 0.6803711282565765, 0.6855323811046863, 0.5609590903047963, 0.5899225835191306, 0.6121892619975013, 0.5043225240049569, 0.5157399797724644, 0.5303069671411651, 0.4679297394107359, 0.5455961812199097, 0.5002563733712789, 0.4555851433737834, 0.43387065988033724, 0.5006633838706664, 0.208270218948307, 0.20425712096676696, 0.20229169008849757, 0.206296376831001, 0.2149660552772189, 0.20848226165715633, 0.22409255290040286, 0.19924192224010429, 0.21174871714411714, 0.6701616420041003, 0.24701250415794762, 0.6664909469277652, 0.709443349331909, 0.7565323315810628, 0.2499492514423156, 0.24231869519035476, 0.6843923983597029, 0.2444942841584521, 0.19590088072560252, 0.18805553256208252, 0.16515183360641017, 0.16705756213650724, 0.1990716042305789, 0.1689338385922904, 0.8754901934944339, 0.1755129887390392, 0.8887864679110348, 0.8892366432668535, 0.15679801421525585, 0.9095570098662779, 0.2116246662765845, 0.16667679715600625, 0.15523002844808997, 0.211137282100475, 0.12760949576109293, 0.15369589144481033, 0.17809867869796236, 0.17517396242300798, 0.18636530763520398, 0.19517691761866895, 0.17814998950299576, 0.18890285924202166, 0.20056286093939224, 0.2612826410193192, 0.18275920884359143, 0.08969568686098062, 0.08706783577153676, 0.08671146612260217, 0.08741510805478536, 0.09540270864154898, 0.08287411788776478, 0.0872783043118388, 0.08995233119956991, 0.08367952436576342]}, "mutation_prompt": null}
{"id": "7f8aff49-c181-4fe0-83b1-6c04ce7b2473", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])  # Dynamic scaling introduced\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 - 0.1 * (self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.20:  # Adjusted probability of applying Lévy flight\n                    trial += 0.003 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV7", "description": "Introduces dynamic scaling factor and adaptive crossover probability to enhance convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9158792675068598, 0.9158003389972122, 0.9221910896539993, 0.9123940734011632, 0.9177888107439026, 0.9218029738033999, 0.9203314077050668, 0.9204655171897537, 0.9121380655688268, 0.8565484686085562, 0.8462377597143431, 0.8486332442033451, 0.8317471288852798, 0.8461191426788103, 0.8418411833303125, 0.8563018558533873, 0.851131657049003, 0.848482557187857, 0.563533032742125, 0.16949646246095584, 0.17240513851436312, 0.43460643763233775, 0.5594235892021415, 0.12190056443027875, 0.17186181863279804, 0.5108641560057865, 0.15504288191247617, 0.16001780965784895, 0.5439242408689553, 0.1315436438597617, 0.12046928808229806, 0.1466130464124209, 0.15754658241213126, 0.13573947441401102, 0.12780981362485822, 0.14751367888960498, 0.9508937527238007, 0.9649914011979619, 0.9735986900909863, 0.9922548510275288, 0.9826749034378882, 0.9702784393813471, 0.9872841064650499, 0.9608908046210983, 0.971151082579845, 0.7798528004455796, 0.7468927410956698, 0.798034997382334, 0.7966123479225359, 0.7792269531259979, 0.7957970606690865, 0.7894347290044549, 0.7615020298408698, 0.7936606094777362, 0.9228854857764284, 0.3890204606258457, 0.8687204278776409, 0.9057537652565751, 0.9024174763780959, 0.8971755597597563, 0.9066511815686839, 0.8833969312211856, 0.9078513235187177, 0.679537514119845, 0.6962912167600817, 0.7381576638706969, 0.6539255307117757, 0.6851919609887892, 0.7864943106317746, 0.5764666863377421, 0.30463590997158696, 0.5468791182753603, 0.5518381522988951, 0.43261263979257925, 0.6017255227245581, 0.648617473089836, 0.5141496586548766, 0.5703549204469969, 0.6583042486481221, 0.6041071873971026, 0.49112801499484504, 0.4827357664304802, 0.2403810138478455, 0.25755162071188364, 0.736304058398573, 0.5341210532804862, 0.7045844738461622, 0.5178360563787741, 0.6721402091554205, 0.7512205536599219, 0.8007529784517481, 0.7810551583169669, 0.7768693689646518, 0.46605895876886116, 0.7711940410512776, 0.39532204536832405, 0.8007105340436453, 0.8001430648202986, 0.8054006887589631, 0.13926720271131632, 0.3541127738272545, 0.099753313172808, 0.6967530131446673, 0.6626922321049964, 0.2632701564244463, 0.36934929858383925, 0.15839413907189626, 0.1899505926273387, 0.46395833579963597, 0.5165847672337476, 0.4664910653747817, 0.5755842893908654, 0.6491591164850639, 0.6389083269677427, 0.5415221167065247, 0.5660834616259476, 0.3917516159601767, 0.8225576292297567, 0.881443088637366, 0.8765211438910057, 0.8420373072357357, 0.8579284452138927, 0.8809812681166996, 0.8827069081159667, 0.8125307969978461, 0.8618168778710296, 0.13377352571955858, 0.12927234599650417, 0.1297901553969517, 0.1405985059111039, 0.12911417274453252, 0.12101325846247168, 0.1681844368317541, 0.10712041715929044, 0.12803920274063219, 0.30750580384321735, 0.6964745785430471, 0.6429062004765917, 0.2360651002773244, 0.31176267499616117, 0.2169957780970213, 0.2326815745176305, 0.256285905004625, 0.17126644349453546, 0.5092256584991677, 0.5507439530472205, 0.7133606720029918, 0.5605658942733328, 0.6803711282565765, 0.6855323811046863, 0.5609590903047963, 0.5899225835191306, 0.6121892619975013, 0.5043225240049569, 0.5157399797724644, 0.5303069671411651, 0.4679297394107359, 0.5455961812199097, 0.5002563733712789, 0.4555851433737834, 0.43387065988033724, 0.5006633838706664, 0.208270218948307, 0.20425712096676696, 0.20229169008849757, 0.206296376831001, 0.2149660552772189, 0.20848226165715633, 0.22409255290040286, 0.19924192224010429, 0.21174871714411714, 0.6701616420041003, 0.24701250415794762, 0.6664909469277652, 0.709443349331909, 0.7565323315810628, 0.2499492514423156, 0.24231869519035476, 0.6843923983597029, 0.2444942841584521, 0.19590088072560252, 0.18805553256208252, 0.16515183360641017, 0.16705756213650724, 0.1990716042305789, 0.1689338385922904, 0.8754901934944339, 0.1755129887390392, 0.8887864679110348, 0.8892366432668535, 0.15679801421525585, 0.9095570098662779, 0.2116246662765845, 0.16667679715600625, 0.15523002844808997, 0.211137282100475, 0.12760949576109293, 0.15369589144481033, 0.17809867869796236, 0.17517396242300798, 0.18636530763520398, 0.19517691761866895, 0.17814998950299576, 0.18890285924202166, 0.20056286093939224, 0.2612826410193192, 0.18275920884359143, 0.08969568686098062, 0.08706783577153676, 0.08671146612260217, 0.08741510805478536, 0.09540270864154898, 0.08287411788776478, 0.0872783043118388, 0.08995233119956991, 0.08367952436576342]}, "mutation_prompt": null}
{"id": "9fb5042e-a5a1-490a-a81a-12719343dd28", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])  # Dynamic scaling introduced\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 - 0.1 * (self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.20:  # Adjusted probability of applying Lévy flight\n                    trial += 0.003 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV7", "description": "Introduces dynamic scaling factor and adaptive crossover probability to enhance convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9158792675068598, 0.9158003389972122, 0.9221910896539993, 0.9123940734011632, 0.9177888107439026, 0.9218029738033999, 0.9203314077050668, 0.9204655171897537, 0.9121380655688268, 0.8565484686085562, 0.8462377597143431, 0.8486332442033451, 0.8317471288852798, 0.8461191426788103, 0.8418411833303125, 0.8563018558533873, 0.851131657049003, 0.848482557187857, 0.563533032742125, 0.16949646246095584, 0.17240513851436312, 0.43460643763233775, 0.5594235892021415, 0.12190056443027875, 0.17186181863279804, 0.5108641560057865, 0.15504288191247617, 0.16001780965784895, 0.5439242408689553, 0.1315436438597617, 0.12046928808229806, 0.1466130464124209, 0.15754658241213126, 0.13573947441401102, 0.12780981362485822, 0.14751367888960498, 0.9508937527238007, 0.9649914011979619, 0.9735986900909863, 0.9922548510275288, 0.9826749034378882, 0.9702784393813471, 0.9872841064650499, 0.9608908046210983, 0.971151082579845, 0.7798528004455796, 0.7468927410956698, 0.798034997382334, 0.7966123479225359, 0.7792269531259979, 0.7957970606690865, 0.7894347290044549, 0.7615020298408698, 0.7936606094777362, 0.9228854857764284, 0.3890204606258457, 0.8687204278776409, 0.9057537652565751, 0.9024174763780959, 0.8971755597597563, 0.9066511815686839, 0.8833969312211856, 0.9078513235187177, 0.679537514119845, 0.6962912167600817, 0.7381576638706969, 0.6539255307117757, 0.6851919609887892, 0.7864943106317746, 0.5764666863377421, 0.30463590997158696, 0.5468791182753603, 0.5518381522988951, 0.43261263979257925, 0.6017255227245581, 0.648617473089836, 0.5141496586548766, 0.5703549204469969, 0.6583042486481221, 0.6041071873971026, 0.49112801499484504, 0.4827357664304802, 0.2403810138478455, 0.25755162071188364, 0.736304058398573, 0.5341210532804862, 0.7045844738461622, 0.5178360563787741, 0.6721402091554205, 0.7512205536599219, 0.8007529784517481, 0.7810551583169669, 0.7768693689646518, 0.46605895876886116, 0.7711940410512776, 0.39532204536832405, 0.8007105340436453, 0.8001430648202986, 0.8054006887589631, 0.13926720271131632, 0.3541127738272545, 0.099753313172808, 0.6967530131446673, 0.6626922321049964, 0.2632701564244463, 0.36934929858383925, 0.15839413907189626, 0.1899505926273387, 0.46395833579963597, 0.5165847672337476, 0.4664910653747817, 0.5755842893908654, 0.6491591164850639, 0.6389083269677427, 0.5415221167065247, 0.5660834616259476, 0.3917516159601767, 0.8225576292297567, 0.881443088637366, 0.8765211438910057, 0.8420373072357357, 0.8579284452138927, 0.8809812681166996, 0.8827069081159667, 0.8125307969978461, 0.8618168778710296, 0.13377352571955858, 0.12927234599650417, 0.1297901553969517, 0.1405985059111039, 0.12911417274453252, 0.12101325846247168, 0.1681844368317541, 0.10712041715929044, 0.12803920274063219, 0.30750580384321735, 0.6964745785430471, 0.6429062004765917, 0.2360651002773244, 0.31176267499616117, 0.2169957780970213, 0.2326815745176305, 0.256285905004625, 0.17126644349453546, 0.5092256584991677, 0.5507439530472205, 0.7133606720029918, 0.5605658942733328, 0.6803711282565765, 0.6855323811046863, 0.5609590903047963, 0.5899225835191306, 0.6121892619975013, 0.5043225240049569, 0.5157399797724644, 0.5303069671411651, 0.4679297394107359, 0.5455961812199097, 0.5002563733712789, 0.4555851433737834, 0.43387065988033724, 0.5006633838706664, 0.208270218948307, 0.20425712096676696, 0.20229169008849757, 0.206296376831001, 0.2149660552772189, 0.20848226165715633, 0.22409255290040286, 0.19924192224010429, 0.21174871714411714, 0.6701616420041003, 0.24701250415794762, 0.6664909469277652, 0.709443349331909, 0.7565323315810628, 0.2499492514423156, 0.24231869519035476, 0.6843923983597029, 0.2444942841584521, 0.19590088072560252, 0.18805553256208252, 0.16515183360641017, 0.16705756213650724, 0.1990716042305789, 0.1689338385922904, 0.8754901934944339, 0.1755129887390392, 0.8887864679110348, 0.8892366432668535, 0.15679801421525585, 0.9095570098662779, 0.2116246662765845, 0.16667679715600625, 0.15523002844808997, 0.211137282100475, 0.12760949576109293, 0.15369589144481033, 0.17809867869796236, 0.17517396242300798, 0.18636530763520398, 0.19517691761866895, 0.17814998950299576, 0.18890285924202166, 0.20056286093939224, 0.2612826410193192, 0.18275920884359143, 0.08969568686098062, 0.08706783577153676, 0.08671146612260217, 0.08741510805478536, 0.09540270864154898, 0.08287411788776478, 0.0872783043118388, 0.08995233119956991, 0.08367952436576342]}, "mutation_prompt": null}
{"id": "b8b60438-3a37-4ad0-9839-9bea043baf52", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])  # Dynamic scaling introduced\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 - 0.1 * (self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.20:  # Adjusted probability of applying Lévy flight\n                    trial += 0.003 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV7", "description": "Introduces dynamic scaling factor and adaptive crossover probability to enhance convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9158792675068598, 0.9158003389972122, 0.9221910896539993, 0.9123940734011632, 0.9177888107439026, 0.9218029738033999, 0.9203314077050668, 0.9204655171897537, 0.9121380655688268, 0.8565484686085562, 0.8462377597143431, 0.8486332442033451, 0.8317471288852798, 0.8461191426788103, 0.8418411833303125, 0.8563018558533873, 0.851131657049003, 0.848482557187857, 0.563533032742125, 0.16949646246095584, 0.17240513851436312, 0.43460643763233775, 0.5594235892021415, 0.12190056443027875, 0.17186181863279804, 0.5108641560057865, 0.15504288191247617, 0.16001780965784895, 0.5439242408689553, 0.1315436438597617, 0.12046928808229806, 0.1466130464124209, 0.15754658241213126, 0.13573947441401102, 0.12780981362485822, 0.14751367888960498, 0.9508937527238007, 0.9649914011979619, 0.9735986900909863, 0.9922548510275288, 0.9826749034378882, 0.9702784393813471, 0.9872841064650499, 0.9608908046210983, 0.971151082579845, 0.7798528004455796, 0.7468927410956698, 0.798034997382334, 0.7966123479225359, 0.7792269531259979, 0.7957970606690865, 0.7894347290044549, 0.7615020298408698, 0.7936606094777362, 0.9228854857764284, 0.3890204606258457, 0.8687204278776409, 0.9057537652565751, 0.9024174763780959, 0.8971755597597563, 0.9066511815686839, 0.8833969312211856, 0.9078513235187177, 0.679537514119845, 0.6962912167600817, 0.7381576638706969, 0.6539255307117757, 0.6851919609887892, 0.7864943106317746, 0.5764666863377421, 0.30463590997158696, 0.5468791182753603, 0.5518381522988951, 0.43261263979257925, 0.6017255227245581, 0.648617473089836, 0.5141496586548766, 0.5703549204469969, 0.6583042486481221, 0.6041071873971026, 0.49112801499484504, 0.4827357664304802, 0.2403810138478455, 0.25755162071188364, 0.736304058398573, 0.5341210532804862, 0.7045844738461622, 0.5178360563787741, 0.6721402091554205, 0.7512205536599219, 0.8007529784517481, 0.7810551583169669, 0.7768693689646518, 0.46605895876886116, 0.7711940410512776, 0.39532204536832405, 0.8007105340436453, 0.8001430648202986, 0.8054006887589631, 0.13926720271131632, 0.3541127738272545, 0.099753313172808, 0.6967530131446673, 0.6626922321049964, 0.2632701564244463, 0.36934929858383925, 0.15839413907189626, 0.1899505926273387, 0.46395833579963597, 0.5165847672337476, 0.4664910653747817, 0.5755842893908654, 0.6491591164850639, 0.6389083269677427, 0.5415221167065247, 0.5660834616259476, 0.3917516159601767, 0.8225576292297567, 0.881443088637366, 0.8765211438910057, 0.8420373072357357, 0.8579284452138927, 0.8809812681166996, 0.8827069081159667, 0.8125307969978461, 0.8618168778710296, 0.13377352571955858, 0.12927234599650417, 0.1297901553969517, 0.1405985059111039, 0.12911417274453252, 0.12101325846247168, 0.1681844368317541, 0.10712041715929044, 0.12803920274063219, 0.30750580384321735, 0.6964745785430471, 0.6429062004765917, 0.2360651002773244, 0.31176267499616117, 0.2169957780970213, 0.2326815745176305, 0.256285905004625, 0.17126644349453546, 0.5092256584991677, 0.5507439530472205, 0.7133606720029918, 0.5605658942733328, 0.6803711282565765, 0.6855323811046863, 0.5609590903047963, 0.5899225835191306, 0.6121892619975013, 0.5043225240049569, 0.5157399797724644, 0.5303069671411651, 0.4679297394107359, 0.5455961812199097, 0.5002563733712789, 0.4555851433737834, 0.43387065988033724, 0.5006633838706664, 0.208270218948307, 0.20425712096676696, 0.20229169008849757, 0.206296376831001, 0.2149660552772189, 0.20848226165715633, 0.22409255290040286, 0.19924192224010429, 0.21174871714411714, 0.6701616420041003, 0.24701250415794762, 0.6664909469277652, 0.709443349331909, 0.7565323315810628, 0.2499492514423156, 0.24231869519035476, 0.6843923983597029, 0.2444942841584521, 0.19590088072560252, 0.18805553256208252, 0.16515183360641017, 0.16705756213650724, 0.1990716042305789, 0.1689338385922904, 0.8754901934944339, 0.1755129887390392, 0.8887864679110348, 0.8892366432668535, 0.15679801421525585, 0.9095570098662779, 0.2116246662765845, 0.16667679715600625, 0.15523002844808997, 0.211137282100475, 0.12760949576109293, 0.15369589144481033, 0.17809867869796236, 0.17517396242300798, 0.18636530763520398, 0.19517691761866895, 0.17814998950299576, 0.18890285924202166, 0.20056286093939224, 0.2612826410193192, 0.18275920884359143, 0.08969568686098062, 0.08706783577153676, 0.08671146612260217, 0.08741510805478536, 0.09540270864154898, 0.08287411788776478, 0.0872783043118388, 0.08995233119956991, 0.08367952436576342]}, "mutation_prompt": null}
{"id": "a88aa4f9-7c19-4969-b8d6-c5db3016264b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV8:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.15, 0.85], p=[0.75, 0.25])  # Refined dynamic scaling\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.85 - 0.15 * (self.eval_count / self.budget)  # Adjusted adaptive crossover\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.5:\n            self.population_size = max(int(self.initial_population_size * 0.50), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.25:  # Increased probability of applying Lévy flight\n                    trial += 0.0025 * self.levy_flight()  # Refined step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV8", "description": "Introduces adaptive mutation strategies with diversified scaling factors and enhances global exploration through a refined Lévy flight step.", "configspace": "", "generation": 97, "fitness": 0.4982778727898464, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV8 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.29.", "error": "", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.920946566112338, 0.9191568347466795, 0.9178662856577088, 0.9181109451758837, 0.9086110614617899, 0.918066638815033, 0.9240490727227868, 0.9161978608313874, 0.9202505219907464, 0.8198626869943744, 0.8464554665908003, 0.8362544073868191, 0.8387997520179289, 0.819569943695999, 0.8412907598080768, 0.8265481743535813, 0.7866919537482019, 0.8345140113638322, 0.4496842486787288, 0.5913593304426736, 0.5633269082968482, 0.4501075128721269, 0.5394311009573074, 0.17458337939626, 0.5840735323164106, 0.5835764057785354, 0.662649623008682, 0.17035661542963987, 0.1565304025230253, 0.1532413560441277, 0.159620998230658, 0.16113319396704373, 0.1634839443881687, 0.16724786321284613, 0.15274613954418814, 0.15436773521043234, 0.964732804574026, 0.9663758216773346, 0.99020219014075, 0.9638772815076665, 0.9679704621095291, 0.9673497247449051, 0.9574369784137273, 0.9600380468267331, 0.9811073596504492, 0.7522799766933883, 0.7836941919197931, 0.7873194185226228, 0.7728424017178079, 0.763929880462382, 0.7426374735547298, 0.7643570738330151, 0.7621060187196413, 0.7581959858241691, 0.8892785655641119, 0.8665293445923892, 0.8780736647818411, 0.8827440493582397, 0.9009754619730242, 0.8919837775555312, 0.8878218255605013, 0.9139885577095764, 0.902237072274486, 0.6698170066676941, 0.5143088932470152, 0.4744038585661936, 0.5075887028831285, 0.13506303118787966, 0.5858279169902274, 0.3638636084259417, 0.5315510700952384, 0.5479036199666854, 0.372802400677253, 0.6244562650989627, 0.5269740543804105, 0.5975821929522809, 0.5553807651174676, 0.5356510770092769, 0.48179832815482515, 0.13075413980985873, 0.5629525610694102, 0.13304479893695387, 0.4749315980885541, 0.5964908920943879, 0.3951566572977979, 0.4960177824451597, 0.4556257686890416, 0.49959873070180394, 0.5139932569380669, 0.47179375749707375, 0.7016623052900075, 0.5418587332685889, 0.3014704434849531, 0.31868001097646104, 0.6882518185833681, 0.4768085979640748, 0.5548448363147647, 0.7046341548823769, 0.709124110619158, 0.3021401804015389, 0.09686962659392007, 0.09725739339545247, 0.4487018209225949, 0.31161574583266516, 0.31243969626683743, 0.18848087636836497, 0.1838843159725735, 0.3111944777127802, 0.4106687537079332, 0.4775861985961858, 0.4297802296235358, 0.511189792327626, 0.4768624084228966, 0.4398332755160317, 0.4452848679018153, 0.4708287610044164, 0.40747184751470866, 0.7850561841773368, 0.8219202701608792, 0.8276190142814677, 0.7747985016241, 0.8285017864526121, 0.7921226298499225, 0.8329039768917466, 0.8250350592473275, 0.8377806139507421, 0.1226735337210948, 0.12924763944782358, 0.1284324514762628, 0.12082055390955082, 0.11330908160860287, 0.10664703425313349, 0.37289727183937826, 0.1349397901960987, 0.13287360329104725, 0.2197832676833159, 0.34016214914190857, 0.1867673643584301, 0.2178810970450975, 0.16326231362523103, 0.1450894899626013, 0.2798802850930563, 0.5703025846505394, 0.5743799166464189, 0.6593226313754534, 0.6384359404509732, 0.626053284116722, 0.6481727777194815, 0.6369220476787899, 0.6118740909994033, 0.6623338533089156, 0.6725148446148435, 0.69800874320937, 0.5025283362912907, 0.5071974611632137, 0.48250294328021714, 0.4483820744712166, 0.23906882874167945, 0.48127668149296954, 0.5225914734645394, 0.47420616341130595, 0.5086980148926887, 0.20127990746158342, 0.20875626146153958, 0.2016204979936117, 0.20581554677252212, 0.2064057857853927, 0.22386673292138393, 0.21660316411032376, 0.22223217912405457, 0.22718550466730736, 0.7114631736883705, 0.22880455373523423, 0.23829579612333873, 0.2356053087169736, 0.6646703270530903, 0.21165614510554764, 0.23717587771864623, 0.23615619862609394, 0.20410229308662498, 0.19412983559023955, 0.18605279560290433, 0.14290831359937584, 0.8555319952096856, 0.8952006930702643, 0.911996526603758, 0.9215440099369703, 0.8889880645734097, 0.8825448645913382, 0.16593786307691694, 0.1669013041560764, 0.8851648407600033, 0.875685131051488, 0.16525005551884764, 0.8505929547263631, 0.1563003025336609, 0.12827479355417493, 0.15328921145671393, 0.18425527229256422, 0.17757391545921652, 0.18872361257130987, 0.18717673973266657, 0.20463185211340074, 0.18517176057017382, 0.2009884279930385, 0.18163787775469187, 0.18589852247631244, 0.07924913963165348, 0.08496826435712101, 0.08268481683657336, 0.08240206351566648, 0.09548356149574844, 0.08766940225151942, 0.08852229746764373, 0.08660043745186141, 0.08560943511477492]}, "mutation_prompt": null}
{"id": "826ee3ec-50a6-4771-b22d-65fb3a3e081e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV8:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        diversity_factor = np.std(self.fitness)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget) + 0.1 * diversity_factor\n        F1 *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget) + 0.1 * diversity_factor\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 - 0.1 * (self.eval_count / self.budget)\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        improvement = (self.fitness[target_idx] - trial_fitness) / self.fitness[target_idx] if self.fitness[target_idx] != 0 else 0\n        if trial_fitness < self.fitness[target_idx] or np.random.rand() < improvement:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.22:  # Slightly increased probability of applying Lévy flight\n                    trial += 0.0025 * self.levy_flight()  # Adjusted step size for more precision\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV8", "description": "Enhances convergence by incorporating dynamic mutation scaling and adaptive fitness-based selection.", "configspace": "", "generation": 98, "fitness": 0.20809743660717747, "feedback": "The algorithm EnhancedAdaptiveLévyDifferentialEvolutionV8 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.28.", "error": "", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.8292370769713824, 0.8452929314369979, 0.8498436774883866, 0.890244013539508, 0.8961909944862119, 0.8785075954132813, 0.14922564574372643, 0.13849651026675747, 0.13695699524764515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036561468091651506, 0.018729350154559676, 9.999999999998899e-05, 0.010043680452218151, 0.01467079663371329, 0.00550492421826998, 0.05077315748439537, 0.0473443494701804, 0.08676432392133626, 0.06616651503664939, 0.05301874534756679, 0.0807626006609673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03947076952674833, 0.11955788724856486, 0.028454597697242012, 0.03207394223434934, 0.02886375808769337, 0.05608506712164796, 0.9493538107958139, 0.9964882644297187, 0.9892382965670854, 0.9943505088707191, 0.9736610377737447, 0.9926637674576719, 0.9873309660064857, 0.9945583727882189, 0.988411858760522, 0.4500232362270019, 0.3087249992299499, 0.42459522786028736, 0.31070037571260645, 0.23022857119789863, 0.07816555363435651, 0.024303690560581126, 0.043357239343541965, 0.056231590942280696, 0.3316087799373645, 0.7770370003897656, 0.7267207591350575, 0.7301578957211095, 0.7580752038326677, 0.7735525134212174, 0.751663862931568, 0.783789105695739, 0.5286463013978078, 0.062141699517824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05189761934951698, 0.15631182709895508, 0.04449192316642825, 0.13710164876326236, 0.07639529795260913, 0.10607876645953696, 9.999999999998899e-05, 0.0003588834918381023, 9.999999999998899e-05, 0.007407559662809815, 0.002344189598635471, 0.04258330246497466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06946036583246784, 0.28998550553851166, 0.1833438364089668, 0.013629965197695326, 0.06788382758278844, 0.04339930804942438, 0.18199337087080691, 0.33357176305933023, 0.11532936624530798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004063455737411958, 0.00016485198128213252, 9.999999999998899e-05, 0.0010208487015040957, 9.999999999998899e-05, 0.10969438327224579, 0.11163495650660493, 0.14838054695461433, 0.1036957711653127, 0.09932949644492983, 0.10313321260931496, 0.8357586923979333, 0.7602075668839463, 0.839400455161189, 0.06923588791873647, 0.08863345045738591, 0.07276634584425379, 0.11594540206108761, 0.05919949456257467, 0.059856094144249306, 0.03934576382258603, 0.03719880727860114, 0.035557683520016536, 0.1705323068028809, 0.1568807299456616, 0.16590812271523592, 0.12536762529713852, 0.14315861386173767, 0.1479907707218615, 0.1544291574757083, 0.1554795842862945, 0.16282728962545479, 0.1296287033638529, 0.14297333846121307, 0.14352810184653642, 0.6141464103734551, 0.6031645059818969, 0.561466613201709, 0.6767760338665614, 0.6746287861000226, 0.7049464756137578, 0.1315603827034858, 0.07260497148824652, 0.11510374369546372, 0.34207929320385655, 0.0774101908799032, 0.2556691598037448, 0.4484392428675714, 0.4589209485294581, 0.48985145312051637, 0.0994426224899051, 0.11182762453656891, 0.13345086981233123, 0.17608168515640843, 0.17103496320602352, 0.19174393479474372, 0.2130258415433457, 0.17977997245105448, 0.19010370459773496, 0.007501311332990701, 0.048852195603516835, 0.06557436487618029, 0.1370241577860154, 0.11493558318313934, 0.03613647850993762, 9.999999999998899e-05, 9.999999999998899e-05, 0.11936389787205859, 0.16909958941719538, 0.1676618074660895, 0.20924032173488827, 0.1803124115790795, 0.21271655144009682, 0.18275014414572865, 0.138531961910773, 0.1585703560079994, 0.12161764549604992, 0.15339450869636206, 0.13530756951766854, 0.12240610323129242, 0.6250384306807182, 0.18116561519612584, 0.19296949092768756, 0.15052648784803346, 0.16941071310386036, 0.16766998760219431, 0.244642572713216, 0.2581354657508569, 0.19723639483368638, 0.21387469003640414, 0.2625202631091992, 0.24674526300386945, 0.2400398510393228, 0.18728546212994246, 0.2004000348794357, 0.05192407341417271, 0.043414769866712, 0.04668719530371779, 0.0523384438303679, 0.057401657022987496, 0.04860750615789333, 0.05102273017885384, 0.049080790059396695, 0.04413964717585983]}, "mutation_prompt": null}
{"id": "80eaae9d-8bee-41dd-a35e-d7a2596daec5", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLévyDifferentialEvolutionV7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(5 * dim, 25)\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n    def mutate(self, target_idx):\n        indices = np.delete(np.arange(self.population_size), target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F1 = 0.5 + (0.3 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        F1 *= np.random.choice([1.1, 0.9], p=[0.8, 0.2])  # Dynamic scaling introduced\n        mutant1 = self.population[a] + F1 * (self.population[b] - self.population[c])\n        \n        d, e, f = np.random.choice(indices, 3, replace=False)\n        F2 = 0.4 + (0.25 * np.random.rand()) * (1 - self.eval_count / self.budget)\n        mutant2 = self.population[d] + F2 * (self.population[e] - self.population[f])\n\n        better_fitness = min(self.fitness[a], self.fitness[b], self.fitness[c], \n                             self.fitness[d], self.fitness[e], self.fitness[f])\n        return mutant1 if self.fitness[a] < self.fitness[d] else mutant2\n\n    def crossover(self, target, mutant):\n        CR = 0.9 - 0.1 * (self.eval_count / self.budget)  # Adaptive crossover probability\n        crossover = np.random.rand(self.dim) < CR\n        return np.where(crossover, mutant, target)\n\n    def select(self, target_idx, trial, func):\n        trial_fitness = func(trial)\n        self.eval_count += 1\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def dynamic_population_resizing(self):\n        if self.eval_count > self.budget * 0.6:\n            self.population_size = max(int(self.initial_population_size * 0.55), 5 * self.dim)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.20:  # Adjusted probability of applying Lévy flight\n                    trial += 0.003 * self.levy_flight()  # Adjusted step size\n\n                self.select(i, trial, func)\n\n            self.dynamic_population_resizing()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveLévyDifferentialEvolutionV7", "description": "Introduces dynamic scaling factor and adaptive crossover probability to enhance convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1a1bfb3-3ee0-4880-9c14-952845451922", "metadata": {"aucs": [0.9158792675068598, 0.9158003389972122, 0.9221910896539993, 0.9123940734011632, 0.9177888107439026, 0.9218029738033999, 0.9203314077050668, 0.9204655171897537, 0.9121380655688268, 0.8565484686085562, 0.8462377597143431, 0.8486332442033451, 0.8317471288852798, 0.8461191426788103, 0.8418411833303125, 0.8563018558533873, 0.851131657049003, 0.848482557187857, 0.563533032742125, 0.16949646246095584, 0.17240513851436312, 0.43460643763233775, 0.5594235892021415, 0.12190056443027875, 0.17186181863279804, 0.5108641560057865, 0.15504288191247617, 0.16001780965784895, 0.5439242408689553, 0.1315436438597617, 0.12046928808229806, 0.1466130464124209, 0.15754658241213126, 0.13573947441401102, 0.12780981362485822, 0.14751367888960498, 0.9508937527238007, 0.9649914011979619, 0.9735986900909863, 0.9922548510275288, 0.9826749034378882, 0.9702784393813471, 0.9872841064650499, 0.9608908046210983, 0.971151082579845, 0.7798528004455796, 0.7468927410956698, 0.798034997382334, 0.7966123479225359, 0.7792269531259979, 0.7957970606690865, 0.7894347290044549, 0.7615020298408698, 0.7936606094777362, 0.9228854857764284, 0.3890204606258457, 0.8687204278776409, 0.9057537652565751, 0.9024174763780959, 0.8971755597597563, 0.9066511815686839, 0.8833969312211856, 0.9078513235187177, 0.679537514119845, 0.6962912167600817, 0.7381576638706969, 0.6539255307117757, 0.6851919609887892, 0.7864943106317746, 0.5764666863377421, 0.30463590997158696, 0.5468791182753603, 0.5518381522988951, 0.43261263979257925, 0.6017255227245581, 0.648617473089836, 0.5141496586548766, 0.5703549204469969, 0.6583042486481221, 0.6041071873971026, 0.49112801499484504, 0.4827357664304802, 0.2403810138478455, 0.25755162071188364, 0.736304058398573, 0.5341210532804862, 0.7045844738461622, 0.5178360563787741, 0.6721402091554205, 0.7512205536599219, 0.8007529784517481, 0.7810551583169669, 0.7768693689646518, 0.46605895876886116, 0.7711940410512776, 0.39532204536832405, 0.8007105340436453, 0.8001430648202986, 0.8054006887589631, 0.13926720271131632, 0.3541127738272545, 0.099753313172808, 0.6967530131446673, 0.6626922321049964, 0.2632701564244463, 0.36934929858383925, 0.15839413907189626, 0.1899505926273387, 0.46395833579963597, 0.5165847672337476, 0.4664910653747817, 0.5755842893908654, 0.6491591164850639, 0.6389083269677427, 0.5415221167065247, 0.5660834616259476, 0.3917516159601767, 0.8225576292297567, 0.881443088637366, 0.8765211438910057, 0.8420373072357357, 0.8579284452138927, 0.8809812681166996, 0.8827069081159667, 0.8125307969978461, 0.8618168778710296, 0.13377352571955858, 0.12927234599650417, 0.1297901553969517, 0.1405985059111039, 0.12911417274453252, 0.12101325846247168, 0.1681844368317541, 0.10712041715929044, 0.12803920274063219, 0.30750580384321735, 0.6964745785430471, 0.6429062004765917, 0.2360651002773244, 0.31176267499616117, 0.2169957780970213, 0.2326815745176305, 0.256285905004625, 0.17126644349453546, 0.5092256584991677, 0.5507439530472205, 0.7133606720029918, 0.5605658942733328, 0.6803711282565765, 0.6855323811046863, 0.5609590903047963, 0.5899225835191306, 0.6121892619975013, 0.5043225240049569, 0.5157399797724644, 0.5303069671411651, 0.4679297394107359, 0.5455961812199097, 0.5002563733712789, 0.4555851433737834, 0.43387065988033724, 0.5006633838706664, 0.208270218948307, 0.20425712096676696, 0.20229169008849757, 0.206296376831001, 0.2149660552772189, 0.20848226165715633, 0.22409255290040286, 0.19924192224010429, 0.21174871714411714, 0.6701616420041003, 0.24701250415794762, 0.6664909469277652, 0.709443349331909, 0.7565323315810628, 0.2499492514423156, 0.24231869519035476, 0.6843923983597029, 0.2444942841584521, 0.19590088072560252, 0.18805553256208252, 0.16515183360641017, 0.16705756213650724, 0.1990716042305789, 0.1689338385922904, 0.8754901934944339, 0.1755129887390392, 0.8887864679110348, 0.8892366432668535, 0.15679801421525585, 0.9095570098662779, 0.2116246662765845, 0.16667679715600625, 0.15523002844808997, 0.211137282100475, 0.12760949576109293, 0.15369589144481033, 0.17809867869796236, 0.17517396242300798, 0.18636530763520398, 0.19517691761866895, 0.17814998950299576, 0.18890285924202166, 0.20056286093939224, 0.2612826410193192, 0.18275920884359143, 0.08969568686098062, 0.08706783577153676, 0.08671146612260217, 0.08741510805478536, 0.09540270864154898, 0.08287411788776478, 0.0872783043118388, 0.08995233119956991, 0.08367952436576342]}, "mutation_prompt": null}
