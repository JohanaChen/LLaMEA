{"id": "41d1e2c4-0264-47e4-9e1e-1d58631f6025", "solution": "import numpy as np\n\nclass DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T_init = 1.0\n        self.T_min = 0.1\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        T = self.T_init\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i in range(self.pop_size):\n                target = self.population[i]\n                mutant = self.population[np.random.choice(np.delete(np.arange(self.pop_size), i, axis=0), 2, replace=False)]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                if new_fitness < func(target):\n                    target = trial\n                else:\n                    if np.exp((func(target) - new_fitness) / T) > np.random.rand():\n                        target = trial\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            T = max(self.alpha * T, self.T_min)\n            \n        return best_solution", "name": "DE_SA_Metaheuristic", "description": "A novel Metaheuristic algorithm based on a combination of Differential Evolution with Simulated Annealing to efficiently optimize black box functions in a high-dimensional search space within a limited budget.", "configspace": "", "generation": 0, "fitness": 0.18069804090781544, "feedback": "The algorithm DE_SA_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": null, "metadata": {"aucs": [0.34154719828163893, 0.3447310497144541, 0.35920173151276935, 0.3357378550213673, 0.34312991501137613, 0.34117772287585835, 0.36731435384679934, 0.3347790653697156, 0.3523805452520343, 0.13926940379890873, 0.11327430484057022, 0.12490440592299656, 0.1412333146987509, 0.11173726994856148, 0.1422559262760129, 0.12456200861514222, 0.14142768018865826, 0.14275556007098134, 0.11596068769611045, 0.12540312180450897, 0.11860432664644016, 0.12660120526142304, 0.11814527998747015, 0.11415173636439924, 0.18189925632236514, 0.14094577970099198, 0.13949545990400725, 0.09853824032504055, 0.08511192955380698, 0.09013355149320845, 0.09986436050883662, 0.09362292876723621, 0.08400422508301797, 0.09744965487352197, 0.10765667497046161, 0.1137407310070192, 0.9593469284704536, 0.9435956885045003, 0.9402672561212084, 0.95714058068851, 0.9274042664136322, 0.9401211284477886, 0.8956863513082469, 0.9514774878619078, 0.9546508066008367, 0.2125430695406464, 0.19250434569641695, 0.2267787363694288, 0.1808072482790194, 0.23095609131261852, 0.21248069484809284, 0.1893158405733837, 0.18683784938429504, 0.20761207937461323, 0.21814714126841972, 0.1941906650238867, 0.21136166754522667, 0.23385421075385027, 0.2265753606009645, 0.25314333688570556, 0.21940331033057459, 0.23073639454759853, 0.24116101402749823, 0.10773773993912406, 0.13106061955446935, 0.13871934338985192, 0.09078515678006605, 0.1135110694686764, 0.10385661983617411, 0.11136089728954479, 0.12025919484750414, 0.16048720035058017, 0.1376424651328203, 0.10218699448543334, 0.11648906536225934, 0.12611906350531443, 0.10870339223413505, 0.13303947739657052, 0.13024625569866077, 0.11772720587873975, 0.1339172202955229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010126582084151181, 0.0378240864954148, 0.04233655006365045, 0.05636556805678772, 0.034272258319898885, 0.010244632452606983, 0.03620464936831469, 0.04923678241893048, 0.050577037125374424, 0.03866861568303159, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08047186372042014, 0.07204485539546424, 0.09430284502111685, 0.10977836960985443, 0.0760998998824356, 0.10274850871246799, 0.0544695281034383, 0.06911091205870434, 0.08181227789663936, 0.3167519894514801, 0.31362515483972586, 0.3303287529902217, 0.32779151612139734, 0.344015581234122, 0.3505042157547589, 0.32282150730700143, 0.3137489573949228, 0.3630335387765671, 0.06776166180350063, 0.07241105902628842, 0.06885202992935624, 0.08128445421684105, 0.07102079924410898, 0.062003292962087064, 0.06913217313973541, 0.06096528006549928, 0.06522878467011073, 0.12229918999969891, 0.14642246445639628, 0.11820898095144639, 0.12665755400528178, 0.12327677967021922, 0.13629090477703998, 0.18367621946220958, 0.11099142801803352, 0.12875286880537462, 0.21604542532402726, 0.17906537106841347, 0.20160768185025524, 0.22839527797753945, 0.2064290265819958, 0.20774554694133707, 0.18872455959767753, 0.20127648011055266, 0.17483139079905685, 0.1307269328025863, 0.14667828927538207, 0.12473157177901595, 0.17719327055078737, 0.14732985151961242, 0.1937488012721419, 0.1345323711342966, 0.14441803493456662, 0.15972677808813696, 0.18942317356620186, 0.18708842154659466, 0.19543144210448393, 0.1785601230863686, 0.1446235476622464, 0.18643257048441852, 0.18155858177349848, 0.15055297156627878, 0.17594451152535107, 0.18860602006327687, 0.19457726000200337, 0.19328325553713832, 0.18421708022316274, 0.18236822699702093, 0.17550943041500489, 0.18417013295829332, 0.1943771634685031, 0.18328813850774073, 0.16496690908351097, 0.15785933494319904, 0.2556242196335634, 0.39172858414210787, 0.17196311529327413, 0.33314614816609545, 0.15139985057341476, 0.1504124526756475, 0.16399680277564332, 0.26901960028759186, 0.1499092341234407, 0.29170977604620507, 0.16368871424197862, 0.16661087991471613, 0.14938551454701554, 0.17493651541575406, 0.18719611563492777, 0.19677225996822512, 0.17420552924320032, 0.16395285015441896, 0.18369383705593445, 0.16623933466490493, 0.16251022019315953, 0.16957416787791657, 0.18790059478847165, 0.16378748009248156, 0.17312959964484775, 0.06321664087821299, 0.06827791237192049, 0.05676590639853385, 0.07347471553455398, 0.07605836726567505, 0.06823559225737752, 0.06103497207469122, 0.0605144474643583, 0.06282389615857498]}, "mutation_prompt": null}
{"id": "0fe3ad29-21db-45c2-8787-bfe0a437ce06", "solution": "import numpy as np\n\nclass Optimized_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.F = budget, dim, 10, 0.5, 0.5\n        self.T_init, self.T_min, self.alpha = 1.0, 0.1, 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        T, budget = self.T_init, self.budget\n        \n        while budget > 0:\n            new_population = []\n            for i in range(self.pop_size):\n                target, mutant = self.population[i], self.population[np.random.choice(np.delete(np.arange(self.pop_size), i, axis=0), 2, replace=False)]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n                if new_fitness < func(target):\n                    target = trial\n                elif np.exp((func(target) - new_fitness) / T) > np.random.rand():\n                    target = trial\n                new_population.append(target)\n                \n            self.population, T, budget = np.array(new_population), max(self.alpha * T, self.T_min), budget - 1\n            \n        return best_solution", "name": "Optimized_DE_SA_Metaheuristic", "description": "Optimized DE_SA_Metaheuristic algorithm with improved data structures and streamlined control flow for better performance.", "configspace": "", "generation": 1, "fitness": 0.18069804090781544, "feedback": "The algorithm Optimized_DE_SA_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "41d1e2c4-0264-47e4-9e1e-1d58631f6025", "metadata": {"aucs": [0.34154719828163893, 0.3447310497144541, 0.35920173151276935, 0.3357378550213673, 0.34312991501137613, 0.34117772287585835, 0.36731435384679934, 0.3347790653697156, 0.3523805452520343, 0.13926940379890873, 0.11327430484057022, 0.12490440592299656, 0.1412333146987509, 0.11173726994856148, 0.1422559262760129, 0.12456200861514222, 0.14142768018865826, 0.14275556007098134, 0.11596068769611045, 0.12540312180450897, 0.11860432664644016, 0.12660120526142304, 0.11814527998747015, 0.11415173636439924, 0.18189925632236514, 0.14094577970099198, 0.13949545990400725, 0.09853824032504055, 0.08511192955380698, 0.09013355149320845, 0.09986436050883662, 0.09362292876723621, 0.08400422508301797, 0.09744965487352197, 0.10765667497046161, 0.1137407310070192, 0.9593469284704536, 0.9435956885045003, 0.9402672561212084, 0.95714058068851, 0.9274042664136322, 0.9401211284477886, 0.8956863513082469, 0.9514774878619078, 0.9546508066008367, 0.2125430695406464, 0.19250434569641695, 0.2267787363694288, 0.1808072482790194, 0.23095609131261852, 0.21248069484809284, 0.1893158405733837, 0.18683784938429504, 0.20761207937461323, 0.21814714126841972, 0.1941906650238867, 0.21136166754522667, 0.23385421075385027, 0.2265753606009645, 0.25314333688570556, 0.21940331033057459, 0.23073639454759853, 0.24116101402749823, 0.10773773993912406, 0.13106061955446935, 0.13871934338985192, 0.09078515678006605, 0.1135110694686764, 0.10385661983617411, 0.11136089728954479, 0.12025919484750414, 0.16048720035058017, 0.1376424651328203, 0.10218699448543334, 0.11648906536225934, 0.12611906350531443, 0.10870339223413505, 0.13303947739657052, 0.13024625569866077, 0.11772720587873975, 0.1339172202955229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010126582084151181, 0.0378240864954148, 0.04233655006365045, 0.05636556805678772, 0.034272258319898885, 0.010244632452606983, 0.03620464936831469, 0.04923678241893048, 0.050577037125374424, 0.03866861568303159, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08047186372042014, 0.07204485539546424, 0.09430284502111685, 0.10977836960985443, 0.0760998998824356, 0.10274850871246799, 0.0544695281034383, 0.06911091205870434, 0.08181227789663936, 0.3167519894514801, 0.31362515483972586, 0.3303287529902217, 0.32779151612139734, 0.344015581234122, 0.3505042157547589, 0.32282150730700143, 0.3137489573949228, 0.3630335387765671, 0.06776166180350063, 0.07241105902628842, 0.06885202992935624, 0.08128445421684105, 0.07102079924410898, 0.062003292962087064, 0.06913217313973541, 0.06096528006549928, 0.06522878467011073, 0.12229918999969891, 0.14642246445639628, 0.11820898095144639, 0.12665755400528178, 0.12327677967021922, 0.13629090477703998, 0.18367621946220958, 0.11099142801803352, 0.12875286880537462, 0.21604542532402726, 0.17906537106841347, 0.20160768185025524, 0.22839527797753945, 0.2064290265819958, 0.20774554694133707, 0.18872455959767753, 0.20127648011055266, 0.17483139079905685, 0.1307269328025863, 0.14667828927538207, 0.12473157177901595, 0.17719327055078737, 0.14732985151961242, 0.1937488012721419, 0.1345323711342966, 0.14441803493456662, 0.15972677808813696, 0.18942317356620186, 0.18708842154659466, 0.19543144210448393, 0.1785601230863686, 0.1446235476622464, 0.18643257048441852, 0.18155858177349848, 0.15055297156627878, 0.17594451152535107, 0.18860602006327687, 0.19457726000200337, 0.19328325553713832, 0.18421708022316274, 0.18236822699702093, 0.17550943041500489, 0.18417013295829332, 0.1943771634685031, 0.18328813850774073, 0.16496690908351097, 0.15785933494319904, 0.2556242196335634, 0.39172858414210787, 0.17196311529327413, 0.33314614816609545, 0.15139985057341476, 0.1504124526756475, 0.16399680277564332, 0.26901960028759186, 0.1499092341234407, 0.29170977604620507, 0.16368871424197862, 0.16661087991471613, 0.14938551454701554, 0.17493651541575406, 0.18719611563492777, 0.19677225996822512, 0.17420552924320032, 0.16395285015441896, 0.18369383705593445, 0.16623933466490493, 0.16251022019315953, 0.16957416787791657, 0.18790059478847165, 0.16378748009248156, 0.17312959964484775, 0.06321664087821299, 0.06827791237192049, 0.05676590639853385, 0.07347471553455398, 0.07605836726567505, 0.06823559225737752, 0.06103497207469122, 0.0605144474643583, 0.06282389615857498]}, "mutation_prompt": null}
{"id": "0fc54696-b45c-4c8e-9640-af6d2376d457", "solution": "import numpy as np\n\nclass DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T_init = 1.0\n        self.T_min = 0.1\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        T = self.T_init\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i in range(self.pop_size):\n                target = self.population[i]\n                mutant = self.population[np.random.choice(np.delete(np.arange(self.pop_size), i, axis=0), 2, replace=False)]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                if new_fitness < func(target):\n                    target = trial\n                else:\n                    if np.exp((func(target) - new_fitness) / T) > np.random.rand():\n                        target = trial\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            T = max(self.alpha * T, self.T_min)\n            \n        return best_solution", "name": "DE_SA_Metaheuristic", "description": "A novel Metaheuristic algorithm based on a combination of Differential Evolution with Simulated Annealing to efficiently optimize black box functions in a high-dimensional search space within a limited budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41d1e2c4-0264-47e4-9e1e-1d58631f6025", "metadata": {"aucs": [0.34154719828163893, 0.3447310497144541, 0.35920173151276935, 0.3357378550213673, 0.34312991501137613, 0.34117772287585835, 0.36731435384679934, 0.3347790653697156, 0.3523805452520343, 0.13926940379890873, 0.11327430484057022, 0.12490440592299656, 0.1412333146987509, 0.11173726994856148, 0.1422559262760129, 0.12456200861514222, 0.14142768018865826, 0.14275556007098134, 0.11596068769611045, 0.12540312180450897, 0.11860432664644016, 0.12660120526142304, 0.11814527998747015, 0.11415173636439924, 0.18189925632236514, 0.14094577970099198, 0.13949545990400725, 0.09853824032504055, 0.08511192955380698, 0.09013355149320845, 0.09986436050883662, 0.09362292876723621, 0.08400422508301797, 0.09744965487352197, 0.10765667497046161, 0.1137407310070192, 0.9593469284704536, 0.9435956885045003, 0.9402672561212084, 0.95714058068851, 0.9274042664136322, 0.9401211284477886, 0.8956863513082469, 0.9514774878619078, 0.9546508066008367, 0.2125430695406464, 0.19250434569641695, 0.2267787363694288, 0.1808072482790194, 0.23095609131261852, 0.21248069484809284, 0.1893158405733837, 0.18683784938429504, 0.20761207937461323, 0.21814714126841972, 0.1941906650238867, 0.21136166754522667, 0.23385421075385027, 0.2265753606009645, 0.25314333688570556, 0.21940331033057459, 0.23073639454759853, 0.24116101402749823, 0.10773773993912406, 0.13106061955446935, 0.13871934338985192, 0.09078515678006605, 0.1135110694686764, 0.10385661983617411, 0.11136089728954479, 0.12025919484750414, 0.16048720035058017, 0.1376424651328203, 0.10218699448543334, 0.11648906536225934, 0.12611906350531443, 0.10870339223413505, 0.13303947739657052, 0.13024625569866077, 0.11772720587873975, 0.1339172202955229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010126582084151181, 0.0378240864954148, 0.04233655006365045, 0.05636556805678772, 0.034272258319898885, 0.010244632452606983, 0.03620464936831469, 0.04923678241893048, 0.050577037125374424, 0.03866861568303159, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08047186372042014, 0.07204485539546424, 0.09430284502111685, 0.10977836960985443, 0.0760998998824356, 0.10274850871246799, 0.0544695281034383, 0.06911091205870434, 0.08181227789663936, 0.3167519894514801, 0.31362515483972586, 0.3303287529902217, 0.32779151612139734, 0.344015581234122, 0.3505042157547589, 0.32282150730700143, 0.3137489573949228, 0.3630335387765671, 0.06776166180350063, 0.07241105902628842, 0.06885202992935624, 0.08128445421684105, 0.07102079924410898, 0.062003292962087064, 0.06913217313973541, 0.06096528006549928, 0.06522878467011073, 0.12229918999969891, 0.14642246445639628, 0.11820898095144639, 0.12665755400528178, 0.12327677967021922, 0.13629090477703998, 0.18367621946220958, 0.11099142801803352, 0.12875286880537462, 0.21604542532402726, 0.17906537106841347, 0.20160768185025524, 0.22839527797753945, 0.2064290265819958, 0.20774554694133707, 0.18872455959767753, 0.20127648011055266, 0.17483139079905685, 0.1307269328025863, 0.14667828927538207, 0.12473157177901595, 0.17719327055078737, 0.14732985151961242, 0.1937488012721419, 0.1345323711342966, 0.14441803493456662, 0.15972677808813696, 0.18942317356620186, 0.18708842154659466, 0.19543144210448393, 0.1785601230863686, 0.1446235476622464, 0.18643257048441852, 0.18155858177349848, 0.15055297156627878, 0.17594451152535107, 0.18860602006327687, 0.19457726000200337, 0.19328325553713832, 0.18421708022316274, 0.18236822699702093, 0.17550943041500489, 0.18417013295829332, 0.1943771634685031, 0.18328813850774073, 0.16496690908351097, 0.15785933494319904, 0.2556242196335634, 0.39172858414210787, 0.17196311529327413, 0.33314614816609545, 0.15139985057341476, 0.1504124526756475, 0.16399680277564332, 0.26901960028759186, 0.1499092341234407, 0.29170977604620507, 0.16368871424197862, 0.16661087991471613, 0.14938551454701554, 0.17493651541575406, 0.18719611563492777, 0.19677225996822512, 0.17420552924320032, 0.16395285015441896, 0.18369383705593445, 0.16623933466490493, 0.16251022019315953, 0.16957416787791657, 0.18790059478847165, 0.16378748009248156, 0.17312959964484775, 0.06321664087821299, 0.06827791237192049, 0.05676590639853385, 0.07347471553455398, 0.07605836726567505, 0.06823559225737752, 0.06103497207469122, 0.0605144474643583, 0.06282389615857498]}, "mutation_prompt": null}
{"id": "80dc8f8d-3cfe-441b-b040-92e60095d95f", "solution": "import numpy as np\n\nclass DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T_init = 1.0\n        self.T_min = 0.1\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        T = self.T_init\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i in range(self.pop_size):\n                target = self.population[i]\n                mutant = self.population[np.random.choice(np.delete(np.arange(self.pop_size), i, axis=0), 2, replace=False)]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                if new_fitness < func(target):\n                    target = trial\n                else:\n                    if np.exp((func(target) - new_fitness) / T) > np.random.rand():\n                        target = trial\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            T = max(self.alpha * T, self.T_min)\n            \n        return best_solution", "name": "DE_SA_Metaheuristic", "description": "A novel Metaheuristic algorithm based on a combination of Differential Evolution with Simulated Annealing to efficiently optimize black box functions in a high-dimensional search space within a limited budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41d1e2c4-0264-47e4-9e1e-1d58631f6025", "metadata": {"aucs": [0.34154719828163893, 0.3447310497144541, 0.35920173151276935, 0.3357378550213673, 0.34312991501137613, 0.34117772287585835, 0.36731435384679934, 0.3347790653697156, 0.3523805452520343, 0.13926940379890873, 0.11327430484057022, 0.12490440592299656, 0.1412333146987509, 0.11173726994856148, 0.1422559262760129, 0.12456200861514222, 0.14142768018865826, 0.14275556007098134, 0.11596068769611045, 0.12540312180450897, 0.11860432664644016, 0.12660120526142304, 0.11814527998747015, 0.11415173636439924, 0.18189925632236514, 0.14094577970099198, 0.13949545990400725, 0.09853824032504055, 0.08511192955380698, 0.09013355149320845, 0.09986436050883662, 0.09362292876723621, 0.08400422508301797, 0.09744965487352197, 0.10765667497046161, 0.1137407310070192, 0.9593469284704536, 0.9435956885045003, 0.9402672561212084, 0.95714058068851, 0.9274042664136322, 0.9401211284477886, 0.8956863513082469, 0.9514774878619078, 0.9546508066008367, 0.2125430695406464, 0.19250434569641695, 0.2267787363694288, 0.1808072482790194, 0.23095609131261852, 0.21248069484809284, 0.1893158405733837, 0.18683784938429504, 0.20761207937461323, 0.21814714126841972, 0.1941906650238867, 0.21136166754522667, 0.23385421075385027, 0.2265753606009645, 0.25314333688570556, 0.21940331033057459, 0.23073639454759853, 0.24116101402749823, 0.10773773993912406, 0.13106061955446935, 0.13871934338985192, 0.09078515678006605, 0.1135110694686764, 0.10385661983617411, 0.11136089728954479, 0.12025919484750414, 0.16048720035058017, 0.1376424651328203, 0.10218699448543334, 0.11648906536225934, 0.12611906350531443, 0.10870339223413505, 0.13303947739657052, 0.13024625569866077, 0.11772720587873975, 0.1339172202955229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010126582084151181, 0.0378240864954148, 0.04233655006365045, 0.05636556805678772, 0.034272258319898885, 0.010244632452606983, 0.03620464936831469, 0.04923678241893048, 0.050577037125374424, 0.03866861568303159, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08047186372042014, 0.07204485539546424, 0.09430284502111685, 0.10977836960985443, 0.0760998998824356, 0.10274850871246799, 0.0544695281034383, 0.06911091205870434, 0.08181227789663936, 0.3167519894514801, 0.31362515483972586, 0.3303287529902217, 0.32779151612139734, 0.344015581234122, 0.3505042157547589, 0.32282150730700143, 0.3137489573949228, 0.3630335387765671, 0.06776166180350063, 0.07241105902628842, 0.06885202992935624, 0.08128445421684105, 0.07102079924410898, 0.062003292962087064, 0.06913217313973541, 0.06096528006549928, 0.06522878467011073, 0.12229918999969891, 0.14642246445639628, 0.11820898095144639, 0.12665755400528178, 0.12327677967021922, 0.13629090477703998, 0.18367621946220958, 0.11099142801803352, 0.12875286880537462, 0.21604542532402726, 0.17906537106841347, 0.20160768185025524, 0.22839527797753945, 0.2064290265819958, 0.20774554694133707, 0.18872455959767753, 0.20127648011055266, 0.17483139079905685, 0.1307269328025863, 0.14667828927538207, 0.12473157177901595, 0.17719327055078737, 0.14732985151961242, 0.1937488012721419, 0.1345323711342966, 0.14441803493456662, 0.15972677808813696, 0.18942317356620186, 0.18708842154659466, 0.19543144210448393, 0.1785601230863686, 0.1446235476622464, 0.18643257048441852, 0.18155858177349848, 0.15055297156627878, 0.17594451152535107, 0.18860602006327687, 0.19457726000200337, 0.19328325553713832, 0.18421708022316274, 0.18236822699702093, 0.17550943041500489, 0.18417013295829332, 0.1943771634685031, 0.18328813850774073, 0.16496690908351097, 0.15785933494319904, 0.2556242196335634, 0.39172858414210787, 0.17196311529327413, 0.33314614816609545, 0.15139985057341476, 0.1504124526756475, 0.16399680277564332, 0.26901960028759186, 0.1499092341234407, 0.29170977604620507, 0.16368871424197862, 0.16661087991471613, 0.14938551454701554, 0.17493651541575406, 0.18719611563492777, 0.19677225996822512, 0.17420552924320032, 0.16395285015441896, 0.18369383705593445, 0.16623933466490493, 0.16251022019315953, 0.16957416787791657, 0.18790059478847165, 0.16378748009248156, 0.17312959964484775, 0.06321664087821299, 0.06827791237192049, 0.05676590639853385, 0.07347471553455398, 0.07605836726567505, 0.06823559225737752, 0.06103497207469122, 0.0605144474643583, 0.06282389615857498]}, "mutation_prompt": null}
{"id": "1e892091-20d1-44c1-922e-88468cf5c367", "solution": "import numpy as np\n\nclass DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T_init = 1.0\n        self.T_min = 0.1\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        T = self.T_init\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i in range(self.pop_size):\n                target = self.population[i]\n                mutant = self.population[np.random.choice(np.delete(np.arange(self.pop_size), i, axis=0), 2, replace=False)]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                if new_fitness < func(target):\n                    target = trial\n                else:\n                    if np.exp((func(target) - new_fitness) / T) > np.random.rand():\n                        target = trial\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            T = max(self.alpha * T, self.T_min)\n            \n        return best_solution", "name": "DE_SA_Metaheuristic", "description": "A novel Metaheuristic algorithm based on a combination of Differential Evolution with Simulated Annealing to efficiently optimize black box functions in a high-dimensional search space within a limited budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41d1e2c4-0264-47e4-9e1e-1d58631f6025", "metadata": {"aucs": [0.34154719828163893, 0.3447310497144541, 0.35920173151276935, 0.3357378550213673, 0.34312991501137613, 0.34117772287585835, 0.36731435384679934, 0.3347790653697156, 0.3523805452520343, 0.13926940379890873, 0.11327430484057022, 0.12490440592299656, 0.1412333146987509, 0.11173726994856148, 0.1422559262760129, 0.12456200861514222, 0.14142768018865826, 0.14275556007098134, 0.11596068769611045, 0.12540312180450897, 0.11860432664644016, 0.12660120526142304, 0.11814527998747015, 0.11415173636439924, 0.18189925632236514, 0.14094577970099198, 0.13949545990400725, 0.09853824032504055, 0.08511192955380698, 0.09013355149320845, 0.09986436050883662, 0.09362292876723621, 0.08400422508301797, 0.09744965487352197, 0.10765667497046161, 0.1137407310070192, 0.9593469284704536, 0.9435956885045003, 0.9402672561212084, 0.95714058068851, 0.9274042664136322, 0.9401211284477886, 0.8956863513082469, 0.9514774878619078, 0.9546508066008367, 0.2125430695406464, 0.19250434569641695, 0.2267787363694288, 0.1808072482790194, 0.23095609131261852, 0.21248069484809284, 0.1893158405733837, 0.18683784938429504, 0.20761207937461323, 0.21814714126841972, 0.1941906650238867, 0.21136166754522667, 0.23385421075385027, 0.2265753606009645, 0.25314333688570556, 0.21940331033057459, 0.23073639454759853, 0.24116101402749823, 0.10773773993912406, 0.13106061955446935, 0.13871934338985192, 0.09078515678006605, 0.1135110694686764, 0.10385661983617411, 0.11136089728954479, 0.12025919484750414, 0.16048720035058017, 0.1376424651328203, 0.10218699448543334, 0.11648906536225934, 0.12611906350531443, 0.10870339223413505, 0.13303947739657052, 0.13024625569866077, 0.11772720587873975, 0.1339172202955229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010126582084151181, 0.0378240864954148, 0.04233655006365045, 0.05636556805678772, 0.034272258319898885, 0.010244632452606983, 0.03620464936831469, 0.04923678241893048, 0.050577037125374424, 0.03866861568303159, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08047186372042014, 0.07204485539546424, 0.09430284502111685, 0.10977836960985443, 0.0760998998824356, 0.10274850871246799, 0.0544695281034383, 0.06911091205870434, 0.08181227789663936, 0.3167519894514801, 0.31362515483972586, 0.3303287529902217, 0.32779151612139734, 0.344015581234122, 0.3505042157547589, 0.32282150730700143, 0.3137489573949228, 0.3630335387765671, 0.06776166180350063, 0.07241105902628842, 0.06885202992935624, 0.08128445421684105, 0.07102079924410898, 0.062003292962087064, 0.06913217313973541, 0.06096528006549928, 0.06522878467011073, 0.12229918999969891, 0.14642246445639628, 0.11820898095144639, 0.12665755400528178, 0.12327677967021922, 0.13629090477703998, 0.18367621946220958, 0.11099142801803352, 0.12875286880537462, 0.21604542532402726, 0.17906537106841347, 0.20160768185025524, 0.22839527797753945, 0.2064290265819958, 0.20774554694133707, 0.18872455959767753, 0.20127648011055266, 0.17483139079905685, 0.1307269328025863, 0.14667828927538207, 0.12473157177901595, 0.17719327055078737, 0.14732985151961242, 0.1937488012721419, 0.1345323711342966, 0.14441803493456662, 0.15972677808813696, 0.18942317356620186, 0.18708842154659466, 0.19543144210448393, 0.1785601230863686, 0.1446235476622464, 0.18643257048441852, 0.18155858177349848, 0.15055297156627878, 0.17594451152535107, 0.18860602006327687, 0.19457726000200337, 0.19328325553713832, 0.18421708022316274, 0.18236822699702093, 0.17550943041500489, 0.18417013295829332, 0.1943771634685031, 0.18328813850774073, 0.16496690908351097, 0.15785933494319904, 0.2556242196335634, 0.39172858414210787, 0.17196311529327413, 0.33314614816609545, 0.15139985057341476, 0.1504124526756475, 0.16399680277564332, 0.26901960028759186, 0.1499092341234407, 0.29170977604620507, 0.16368871424197862, 0.16661087991471613, 0.14938551454701554, 0.17493651541575406, 0.18719611563492777, 0.19677225996822512, 0.17420552924320032, 0.16395285015441896, 0.18369383705593445, 0.16623933466490493, 0.16251022019315953, 0.16957416787791657, 0.18790059478847165, 0.16378748009248156, 0.17312959964484775, 0.06321664087821299, 0.06827791237192049, 0.05676590639853385, 0.07347471553455398, 0.07605836726567505, 0.06823559225737752, 0.06103497207469122, 0.0605144474643583, 0.06282389615857498]}, "mutation_prompt": null}
{"id": "c4250636-a7b4-4450-9a91-697996d664d3", "solution": "import numpy as np\n\nclass DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T_init = 1.0\n        self.T_min = 0.1\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        T = self.T_init\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i in range(self.pop_size):\n                target = self.population[i]\n                mutant = self.population[np.random.choice(np.delete(np.arange(self.pop_size), i, axis=0), 2, replace=False)]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                if new_fitness < func(target):\n                    target = trial\n                else:\n                    if np.exp((func(target) - new_fitness) / T) > np.random.rand():\n                        target = trial\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            T = max(self.alpha * T, self.T_min)\n            \n        return best_solution", "name": "DE_SA_Metaheuristic", "description": "A novel Metaheuristic algorithm based on a combination of Differential Evolution with Simulated Annealing to efficiently optimize black box functions in a high-dimensional search space within a limited budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41d1e2c4-0264-47e4-9e1e-1d58631f6025", "metadata": {"aucs": [0.34154719828163893, 0.3447310497144541, 0.35920173151276935, 0.3357378550213673, 0.34312991501137613, 0.34117772287585835, 0.36731435384679934, 0.3347790653697156, 0.3523805452520343, 0.13926940379890873, 0.11327430484057022, 0.12490440592299656, 0.1412333146987509, 0.11173726994856148, 0.1422559262760129, 0.12456200861514222, 0.14142768018865826, 0.14275556007098134, 0.11596068769611045, 0.12540312180450897, 0.11860432664644016, 0.12660120526142304, 0.11814527998747015, 0.11415173636439924, 0.18189925632236514, 0.14094577970099198, 0.13949545990400725, 0.09853824032504055, 0.08511192955380698, 0.09013355149320845, 0.09986436050883662, 0.09362292876723621, 0.08400422508301797, 0.09744965487352197, 0.10765667497046161, 0.1137407310070192, 0.9593469284704536, 0.9435956885045003, 0.9402672561212084, 0.95714058068851, 0.9274042664136322, 0.9401211284477886, 0.8956863513082469, 0.9514774878619078, 0.9546508066008367, 0.2125430695406464, 0.19250434569641695, 0.2267787363694288, 0.1808072482790194, 0.23095609131261852, 0.21248069484809284, 0.1893158405733837, 0.18683784938429504, 0.20761207937461323, 0.21814714126841972, 0.1941906650238867, 0.21136166754522667, 0.23385421075385027, 0.2265753606009645, 0.25314333688570556, 0.21940331033057459, 0.23073639454759853, 0.24116101402749823, 0.10773773993912406, 0.13106061955446935, 0.13871934338985192, 0.09078515678006605, 0.1135110694686764, 0.10385661983617411, 0.11136089728954479, 0.12025919484750414, 0.16048720035058017, 0.1376424651328203, 0.10218699448543334, 0.11648906536225934, 0.12611906350531443, 0.10870339223413505, 0.13303947739657052, 0.13024625569866077, 0.11772720587873975, 0.1339172202955229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010126582084151181, 0.0378240864954148, 0.04233655006365045, 0.05636556805678772, 0.034272258319898885, 0.010244632452606983, 0.03620464936831469, 0.04923678241893048, 0.050577037125374424, 0.03866861568303159, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08047186372042014, 0.07204485539546424, 0.09430284502111685, 0.10977836960985443, 0.0760998998824356, 0.10274850871246799, 0.0544695281034383, 0.06911091205870434, 0.08181227789663936, 0.3167519894514801, 0.31362515483972586, 0.3303287529902217, 0.32779151612139734, 0.344015581234122, 0.3505042157547589, 0.32282150730700143, 0.3137489573949228, 0.3630335387765671, 0.06776166180350063, 0.07241105902628842, 0.06885202992935624, 0.08128445421684105, 0.07102079924410898, 0.062003292962087064, 0.06913217313973541, 0.06096528006549928, 0.06522878467011073, 0.12229918999969891, 0.14642246445639628, 0.11820898095144639, 0.12665755400528178, 0.12327677967021922, 0.13629090477703998, 0.18367621946220958, 0.11099142801803352, 0.12875286880537462, 0.21604542532402726, 0.17906537106841347, 0.20160768185025524, 0.22839527797753945, 0.2064290265819958, 0.20774554694133707, 0.18872455959767753, 0.20127648011055266, 0.17483139079905685, 0.1307269328025863, 0.14667828927538207, 0.12473157177901595, 0.17719327055078737, 0.14732985151961242, 0.1937488012721419, 0.1345323711342966, 0.14441803493456662, 0.15972677808813696, 0.18942317356620186, 0.18708842154659466, 0.19543144210448393, 0.1785601230863686, 0.1446235476622464, 0.18643257048441852, 0.18155858177349848, 0.15055297156627878, 0.17594451152535107, 0.18860602006327687, 0.19457726000200337, 0.19328325553713832, 0.18421708022316274, 0.18236822699702093, 0.17550943041500489, 0.18417013295829332, 0.1943771634685031, 0.18328813850774073, 0.16496690908351097, 0.15785933494319904, 0.2556242196335634, 0.39172858414210787, 0.17196311529327413, 0.33314614816609545, 0.15139985057341476, 0.1504124526756475, 0.16399680277564332, 0.26901960028759186, 0.1499092341234407, 0.29170977604620507, 0.16368871424197862, 0.16661087991471613, 0.14938551454701554, 0.17493651541575406, 0.18719611563492777, 0.19677225996822512, 0.17420552924320032, 0.16395285015441896, 0.18369383705593445, 0.16623933466490493, 0.16251022019315953, 0.16957416787791657, 0.18790059478847165, 0.16378748009248156, 0.17312959964484775, 0.06321664087821299, 0.06827791237192049, 0.05676590639853385, 0.07347471553455398, 0.07605836726567505, 0.06823559225737752, 0.06103497207469122, 0.0605144474643583, 0.06282389615857498]}, "mutation_prompt": null}
{"id": "c786f654-57ab-492f-8780-afe9b300f170", "solution": "import numpy as np\n\nclass DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T_init = 1.0\n        self.T_min = 0.1\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        T = self.T_init\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i in range(self.pop_size):\n                target = self.population[i]\n                mutant = self.population[np.random.choice(np.delete(np.arange(self.pop_size), i, axis=0), 2, replace=False)]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                if new_fitness < func(target):\n                    target = trial\n                else:\n                    if np.exp((func(target) - new_fitness) / T) > np.random.rand():\n                        target = trial\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            T = max(self.alpha * T, self.T_min)\n            \n        return best_solution", "name": "DE_SA_Metaheuristic", "description": "A novel Metaheuristic algorithm based on a combination of Differential Evolution with Simulated Annealing to efficiently optimize black box functions in a high-dimensional search space within a limited budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41d1e2c4-0264-47e4-9e1e-1d58631f6025", "metadata": {"aucs": [0.34154719828163893, 0.3447310497144541, 0.35920173151276935, 0.3357378550213673, 0.34312991501137613, 0.34117772287585835, 0.36731435384679934, 0.3347790653697156, 0.3523805452520343, 0.13926940379890873, 0.11327430484057022, 0.12490440592299656, 0.1412333146987509, 0.11173726994856148, 0.1422559262760129, 0.12456200861514222, 0.14142768018865826, 0.14275556007098134, 0.11596068769611045, 0.12540312180450897, 0.11860432664644016, 0.12660120526142304, 0.11814527998747015, 0.11415173636439924, 0.18189925632236514, 0.14094577970099198, 0.13949545990400725, 0.09853824032504055, 0.08511192955380698, 0.09013355149320845, 0.09986436050883662, 0.09362292876723621, 0.08400422508301797, 0.09744965487352197, 0.10765667497046161, 0.1137407310070192, 0.9593469284704536, 0.9435956885045003, 0.9402672561212084, 0.95714058068851, 0.9274042664136322, 0.9401211284477886, 0.8956863513082469, 0.9514774878619078, 0.9546508066008367, 0.2125430695406464, 0.19250434569641695, 0.2267787363694288, 0.1808072482790194, 0.23095609131261852, 0.21248069484809284, 0.1893158405733837, 0.18683784938429504, 0.20761207937461323, 0.21814714126841972, 0.1941906650238867, 0.21136166754522667, 0.23385421075385027, 0.2265753606009645, 0.25314333688570556, 0.21940331033057459, 0.23073639454759853, 0.24116101402749823, 0.10773773993912406, 0.13106061955446935, 0.13871934338985192, 0.09078515678006605, 0.1135110694686764, 0.10385661983617411, 0.11136089728954479, 0.12025919484750414, 0.16048720035058017, 0.1376424651328203, 0.10218699448543334, 0.11648906536225934, 0.12611906350531443, 0.10870339223413505, 0.13303947739657052, 0.13024625569866077, 0.11772720587873975, 0.1339172202955229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010126582084151181, 0.0378240864954148, 0.04233655006365045, 0.05636556805678772, 0.034272258319898885, 0.010244632452606983, 0.03620464936831469, 0.04923678241893048, 0.050577037125374424, 0.03866861568303159, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08047186372042014, 0.07204485539546424, 0.09430284502111685, 0.10977836960985443, 0.0760998998824356, 0.10274850871246799, 0.0544695281034383, 0.06911091205870434, 0.08181227789663936, 0.3167519894514801, 0.31362515483972586, 0.3303287529902217, 0.32779151612139734, 0.344015581234122, 0.3505042157547589, 0.32282150730700143, 0.3137489573949228, 0.3630335387765671, 0.06776166180350063, 0.07241105902628842, 0.06885202992935624, 0.08128445421684105, 0.07102079924410898, 0.062003292962087064, 0.06913217313973541, 0.06096528006549928, 0.06522878467011073, 0.12229918999969891, 0.14642246445639628, 0.11820898095144639, 0.12665755400528178, 0.12327677967021922, 0.13629090477703998, 0.18367621946220958, 0.11099142801803352, 0.12875286880537462, 0.21604542532402726, 0.17906537106841347, 0.20160768185025524, 0.22839527797753945, 0.2064290265819958, 0.20774554694133707, 0.18872455959767753, 0.20127648011055266, 0.17483139079905685, 0.1307269328025863, 0.14667828927538207, 0.12473157177901595, 0.17719327055078737, 0.14732985151961242, 0.1937488012721419, 0.1345323711342966, 0.14441803493456662, 0.15972677808813696, 0.18942317356620186, 0.18708842154659466, 0.19543144210448393, 0.1785601230863686, 0.1446235476622464, 0.18643257048441852, 0.18155858177349848, 0.15055297156627878, 0.17594451152535107, 0.18860602006327687, 0.19457726000200337, 0.19328325553713832, 0.18421708022316274, 0.18236822699702093, 0.17550943041500489, 0.18417013295829332, 0.1943771634685031, 0.18328813850774073, 0.16496690908351097, 0.15785933494319904, 0.2556242196335634, 0.39172858414210787, 0.17196311529327413, 0.33314614816609545, 0.15139985057341476, 0.1504124526756475, 0.16399680277564332, 0.26901960028759186, 0.1499092341234407, 0.29170977604620507, 0.16368871424197862, 0.16661087991471613, 0.14938551454701554, 0.17493651541575406, 0.18719611563492777, 0.19677225996822512, 0.17420552924320032, 0.16395285015441896, 0.18369383705593445, 0.16623933466490493, 0.16251022019315953, 0.16957416787791657, 0.18790059478847165, 0.16378748009248156, 0.17312959964484775, 0.06321664087821299, 0.06827791237192049, 0.05676590639853385, 0.07347471553455398, 0.07605836726567505, 0.06823559225737752, 0.06103497207469122, 0.0605144474643583, 0.06282389615857498]}, "mutation_prompt": null}
{"id": "f367387c-a793-4888-b164-562458d4ba40", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 7, "fitness": 0.20305523838055595, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "41d1e2c4-0264-47e4-9e1e-1d58631f6025", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "b027c5ce-ba06-4bbc-95f8-b5c6368c16f3", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "3d78aadf-a7e9-453b-a218-c17bf7456d25", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "63a6ba0f-01d6-4ab4-a31f-b6541ad68a15", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "67850469-1871-47f4-b046-e9529fb1edea", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                rand_indices = np.random.permutation(self.pop_size)\n                mutant = self.population[rand_indices[:2]]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with improved mutation strategy and adaptive temperature control for enhanced performance.", "configspace": "", "generation": 11, "fitness": 0.20305523838055595, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "23f7dd82-dbe1-4b32-b647-8e55f7c0d66e", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "f275b500-db31-4dde-82ae-66f91186d578", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "228ccf37-6b71-4783-8a20-97339037a6fa", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "5a1a082a-5f65-465b-a0f9-43a6816ab628", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "4ff42645-650f-4a42-93da-986ba93b65f3", "solution": "import numpy as np\n\nclass Improved_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.pop_size):\n                target = self.population[_]\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                \n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Improved_DE_SA_Metaheuristic", "description": "Improved Enhanced DE_SA_Metaheuristic algorithm with enhanced convergence control mechanism for efficient exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": 0.0712319025300109, "feedback": "The algorithm Improved_DE_SA_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.14102405257327877, 0.13554606804238434, 0.18110200688409372, 0.06696627505885866, 0.16731062691708887, 0.06316190261333465, 0.12567063633459052, 0.1497674450571269, 0.1141206901208085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030247933364225377, 0.04058070925173174, 0.0382075042895994, 0.030502543748996525, 0.041791877113084186, 0.02490594047152339, 0.04084582671683312, 0.016865439881594613, 0.023743356156699646, 0.02779875509988594, 0.004231581807165319, 0.027197703842115506, 0.042147570622751984, 0.0009223360183284735, 0.016655179782537388, 0.024362960768426256, 0.0002458790434990421, 0.002957794640223832, 0.09103756762511528, 0.07210500529927066, 0.09087277612861222, 0.06255784068453163, 0.08202466907890993, 0.06332538911867758, 0.052625732197638, 0.0789577066527345, 0.053316586637300545, 0.07512405785282827, 0.03528316933618025, 0.04697573620977347, 0.03457382706159928, 0.06394641453991878, 0.059309206261184744, 0.023549502344699658, 0.045883920999119976, 9.999999999998899e-05, 0.155363360166333, 0.07876812590662907, 0.08510175978920687, 0.11567724440978255, 0.024766863894569502, 0.06557990151326698, 0.11347644090066755, 0.0945870635391115, 0.11572705184975784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009102716903458541, 9.999999999998899e-05, 9.999999999998899e-05, 0.01908039010175344, 0.002352828626987824, 9.999999999998899e-05, 9.999999999998899e-05, 0.006451629333972808, 9.999999999998899e-05, 0.008159781394928012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04511585123588391, 0.03790020971534491, 0.05965921002424546, 0.06012043653452914, 0.05203400724047247, 0.0058645464924215185, 0.04157588824467073, 0.046663346778558656, 0.02292290937422825, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18676625423091053, 0.15394838476972272, 0.19620493279744056, 0.14651875160865946, 0.14728039018739603, 0.12966313646244798, 0.19199235147873006, 0.1620765628292704, 0.17609202525100098, 0.021088568242442873, 0.02543795041405994, 0.007743105781305881, 0.039937666111659054, 0.03450340239029592, 0.04648005356913887, 0.02911344614425182, 0.029180166204693547, 0.04445689895554206, 0.11847089733183025, 0.1521140089762374, 0.12879014479212292, 0.14054004309500667, 0.10924524850544426, 0.10564703968606648, 0.10907137792372834, 0.11260861094043029, 0.12036446088487407, 0.14819273184891912, 0.1401636884317572, 0.13797706055134218, 0.15381515627655007, 0.13451390317316347, 0.14796519784805862, 0.12956945163341949, 0.1302902600697322, 0.12309079846415882, 0.07168624877539609, 0.08369699114469553, 0.06795983503452896, 0.09725202031064162, 0.08629530890531589, 0.09030904220842528, 0.07731171576650175, 0.07521566172125671, 0.07472704961334475, 0.15342113704900562, 0.16379745773748977, 0.1572108864758518, 0.18154249079795703, 0.13019319529429252, 0.16206169835540163, 0.14471388419460418, 0.13957487307353444, 0.1442460945447701, 0.12108758650400464, 0.09226465527909478, 0.1498905055638492, 0.12776204779664657, 0.1329021249258251, 0.13210231833901964, 0.1487768124213027, 0.12507834400441242, 0.14500532838008184, 0.11667713724776674, 0.11663378336021413, 0.13765881360103116, 0.13571651930851403, 0.1509674302819214, 0.11507793611992201, 0.11360401242388996, 0.10961393711035439, 0.12443667301130812, 0.13156747981293704, 0.12410105655474324, 0.08457636441399974, 0.10185744015424303, 0.09997139533263122, 0.12412504562796489, 0.09297846840963375, 0.10007505621107249, 0.15914804887960377, 0.1679608042683325, 0.18088941657651325, 0.16748758866526148, 0.16619551660753062, 0.16635440287474645, 0.20092032072652655, 0.17309173049797888, 0.16584833225824858, 0.1685385438186966, 0.049206738833921015, 0.050173467280608786, 0.05739400542389739, 0.04678670621525127, 0.04256213347813298, 0.047168802740610194, 0.037540025737886396, 0.05799796690047754, 0.040979580630373325]}, "mutation_prompt": null}
{"id": "1ecf411b-0b38-48f4-85fa-083a30fd354b", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "cf60f2db-4566-4195-90d5-2377419c0999", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "2eb6f947-360d-4ea2-91a6-f0f567ca2a85", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "4500e2cc-f5ea-41d3-bad5-e9f435398954", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "6df6f2e0-5b34-45de-b34f-b78b2819cad1", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "94f75fa8-d249-4c9d-beac-f170426d559e", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "4e2d9f1d-3e09-47fe-b3d3-29bb65ac8dcc", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "57d13feb-0249-4da4-a961-c52b971130f4", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutant_indices = np.random.randint(self.pop_size, size=(2, self.pop_size))\n            mutant = self.population[mutant_indices]\n            trial = self.population + self.F * (mutant[0] - mutant[1])\n            mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trial[mask] = self.population[mask]\n            \n            new_fitness = np.array([func(individual) for individual in trial])\n            improve_mask = new_fitness < best_fitness\n            best_solution[improve_mask] = trial[improve_mask]\n            best_fitness[improve_mask] = new_fitness[improve_mask]\n            \n            random_mask = np.random.rand(self.pop_size) < np.exp((func(self.population) - new_fitness) / self.T)\n            self.population = np.where(random_mask[:, None], trial, self.population)\n            self.T = np.maximum(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures, simplifying control flow through vectorized operations, and improved mutation strategy for enhanced convergence.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('boolean index did not match indexed array along dimension 0; dimension is 5 but corresponding boolean dimension is 10').", "error": "IndexError('boolean index did not match indexed array along dimension 0; dimension is 5 but corresponding boolean dimension is 10')", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {}, "mutation_prompt": null}
{"id": "801f8c50-eeb7-4596-a919-cf7a2fc0ba22", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "f559a1b5-015b-4097-bab4-706266548792", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "7335ed61-9a45-466a-9b65-c53f9dc4f0b1", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "e13e9ebf-0754-4c8c-8821-f092349c9d30", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n                \n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with improved convergence control by dynamically adjusting the control parameters based on function landscape exploration.", "configspace": "", "generation": 28, "fitness": 0.20305523838055595, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "0587134b-5628-4298-9215-985c742838d3", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "c2a3c27d-9271-4048-a57c-554ff019c012", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "8fb5ab50-f525-4014-aba9-1586f73d9d78", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "1b67ffa2-baf8-4992-8512-9ac9c8d0bf75", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_optimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                accept_prob = np.exp((func(target) - new_fitness) / self.T)\n                target = trial if new_fitness < func(target) else trial if accept_prob > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_optimized", "description": "Improved Enhanced DE_SA_Metaheuristic algorithm with enhanced mutation strategy and adaptive temperature control for faster convergence.", "configspace": "", "generation": 32, "fitness": 0.1988948164899511, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_optimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3745398240522284, 0.40163293268324374, 0.41675224932026345, 0.3524276400113736, 0.38545190817030905, 0.34420555285432386, 0.3731911860972742, 0.3567751038046778, 0.376096822125361, 0.2616375170126223, 0.2604164979851227, 0.24082466633569732, 0.25777799304696647, 0.25064419458278864, 0.25561113053527185, 0.23830874658006485, 0.1999707803240489, 0.2678673336591664, 0.13977649409090265, 0.1152837501265187, 0.14372972188452293, 0.1355652524925437, 0.1411735931788014, 0.11050178479941775, 0.13819964692320263, 0.11796602932110223, 0.12177012169812529, 0.1345575725311764, 0.12165093816658523, 0.12436297318835454, 0.08856013221113013, 0.11491681854740532, 0.11825680983592823, 0.10073454745084387, 0.12200847658223701, 0.11861354247789113, 0.953182783936667, 0.9236687656765956, 0.8616686148001332, 0.9462186470784034, 0.9318873582126974, 0.9109040677986004, 0.9142312487235565, 0.9511789884403805, 0.911016449413057, 0.2845623809904345, 0.22648909898240954, 0.20438873741180996, 0.24087585659908683, 0.24934565517836893, 0.26290872791226605, 0.27094015850208275, 0.23645159745615674, 0.20016500612533916, 0.25672113973855726, 0.21385534058513034, 0.25459777277254503, 0.2721704567757527, 0.2896430432280942, 0.28239875006846515, 0.24884462038346122, 0.25154663915267184, 0.2632466063927923, 0.11721789882656153, 0.18623810434670385, 0.1595702466664628, 0.14100626372191405, 0.13713522855882987, 0.1507547251345721, 0.12829265174075866, 0.1409828904811884, 0.1476087974868575, 0.20139642841105332, 0.12562226744833005, 0.20364998269087642, 0.159056962890318, 0.10374543263585001, 0.12292112964074053, 0.18187650785906084, 0.11941070939903764, 0.15985354769124838, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001079536209072085, 0.0021772572942468926, 9.999999999998899e-05, 0.10643055334173568, 0.04435104725689765, 0.07280006940019734, 0.032761820646307394, 0.06110642951291101, 0.07577000473792883, 0.10230885851566784, 0.10479944949600162, 0.09787409770577438, 0.0037029940116785065, 0.001438374952625554, 9.999999999998899e-05, 9.999999999998899e-05, 0.00412581435180559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11595942934324266, 0.1047600338795106, 0.10265476456632772, 0.11710169759385225, 0.12002162183541876, 0.12840239473745862, 0.09235984915949391, 0.1349288178292103, 0.07383348818630908, 0.3400259975464591, 0.34619298830523015, 0.3569982977538211, 0.36476104906218143, 0.3470555955243203, 0.37623689670079086, 0.3531030882541253, 0.373018372502146, 0.34634124509654063, 0.08502980248758596, 0.08413530806563774, 0.09301098441295619, 0.09785101833689547, 0.0805009840318075, 0.11403703922080788, 0.0808170210831326, 0.0809220093408981, 0.07980403751757115, 0.16928432315604236, 0.13367486491844105, 0.10553516634284477, 0.13121629087373754, 0.1631051615653818, 0.147466649311093, 0.11605786271916918, 0.12561212618211737, 0.161282080333074, 0.21741100349851483, 0.2234369313241521, 0.23185844442011316, 0.23523164404884955, 0.2326958905329629, 0.24111813244480673, 0.2071425465856288, 0.25856156875645386, 0.173439362875615, 0.17999766492994218, 0.15523632559344314, 0.15961311975941972, 0.18143671366090408, 0.2013094906889864, 0.14921757960581583, 0.135599136169251, 0.14250873538699782, 0.16270775885284616, 0.1840820998585333, 0.20519365216443164, 0.17753431673261588, 0.172131785554957, 0.18255962342396304, 0.17513228069012088, 0.17235752882028277, 0.17235030032321608, 0.17947697002895024, 0.19371533873869717, 0.19441881369278669, 0.20542726277666745, 0.19671650999710089, 0.18985150232331438, 0.18313415689525847, 0.1824414562361475, 0.18655477102077733, 0.20510769213509317, 0.17276192773923393, 0.2511056578058014, 0.2679155479843748, 0.2986922416283154, 0.20281735942845103, 0.19039774989527014, 0.15950177929070974, 0.20195804172313614, 0.15929679118470452, 0.23024894483478675, 0.1845408400400138, 0.2585639342455708, 0.1573479469991207, 0.18164712285169493, 0.222983907826523, 0.15424265455073016, 0.13062471312982782, 0.18037428303171743, 0.1726697217277513, 0.16297833064031675, 0.17098453601207697, 0.17782372477404806, 0.16420176234287553, 0.2037041632813429, 0.1625716027776538, 0.16547599474544583, 0.1744216428444424, 0.09128823541701858, 0.07475169654803682, 0.07393604607345827, 0.060482694848548846, 0.05853978346622357, 0.08166658252772863, 0.08541721648881484, 0.07386706883541916, 0.07940834846695055]}, "mutation_prompt": null}
{"id": "a7cfea64-e258-465b-a2c7-56fba0d39017", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "b9526282-1673-4c64-8223-96989a65f449", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "96ecac86-6c57-4c7b-8e58-5399512845f1", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "5c05559b-ec9a-48c2-81bd-6327123f8419", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "6d3413a2-55b3-4e33-b044-e1bd0f3db5d3", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "7253598c-17cd-4065-8fc2-7a002ec1acaf", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "0938f1c1-aa4c-4b8b-8205-29b4a8b6033c", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n\n                new_fitness = func(trial)\n                if new_fitness < func(target):\n                    target = trial\n                    best_solution = trial\n                    best_fitness = new_fitness\n                elif np.exp((func(target) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n                new_population.append(target)\n\n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Improved Enhanced DE_SA_Metaheuristic algorithm with optimized control flow and reduced redundant fitness evaluations for enhanced performance.", "configspace": "", "generation": 39, "fitness": 0.20305523838055595, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "8595ed08-dc7a-462e-80bb-598121c1eb82", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + self.F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with optimized data structures and simplified control flow for improved performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.3907755148278367, 0.3800563321772986, 0.3630122210285822, 0.3657173410936162, 0.37314931617890956, 0.3548026918227696, 0.35514799565062516, 0.3828215039575811, 0.3586535540674468, 0.23643141695010017, 0.24428448616886367, 0.2590033470606743, 0.2582193666093633, 0.2535704323984844, 0.25740861169518126, 0.27343167939617574, 0.2403677211456473, 0.26149926943476487, 0.11243697011621334, 0.13131923695855274, 0.12714373934748746, 0.13567378318805823, 0.14155759881397212, 0.13129316927767598, 0.16721640413260808, 0.13953729729633957, 0.11996873774138261, 0.1125546742617003, 0.10852993014402057, 0.11387989997112091, 0.11506888344182065, 0.12454583806089592, 0.09871327774712413, 0.11517019089315184, 0.09692241565240989, 0.1091137413494575, 0.9560581176486512, 0.9324501269547164, 0.9592288668443238, 0.964777092306184, 0.9587379273311981, 0.9463788472647849, 0.9159683273725702, 0.948101113067169, 0.9405995445556383, 0.2681186626672868, 0.26910420122006695, 0.2740800833599655, 0.24120096722856754, 0.2588617852406494, 0.25079314651368745, 0.23971207011856055, 0.21503967592713913, 0.24013761947892742, 0.2665239264358633, 0.2689812768285026, 0.23484743762870264, 0.3125340341699473, 0.2940050011184995, 0.3206044453815362, 0.2692097611481006, 0.24635547276435033, 0.3005055917477283, 0.15122017469467885, 0.1961099673389095, 0.1767102789770506, 0.1301607177191334, 0.11997801332536295, 0.09477400440413208, 0.19600271533609348, 0.12938442106195602, 0.2226344816196011, 0.16942093610584485, 0.1351014677010256, 0.16065508755350788, 0.13405903619141069, 0.13248763844080436, 0.1775664167551806, 0.14951520762216064, 0.1639311933683617, 0.16578944210862123, 9.999999999998899e-05, 0.001370366293279246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035880934107233586, 9.999999999998899e-05, 0.0007941170508091178, 0.0472598457942226, 0.12307239102073886, 0.05105173391504414, 0.07488104576138233, 0.07794539745295848, 0.03988963512775079, 0.06489909161725116, 0.10232696211366732, 0.08488148314648092, 0.030744161051844854, 0.023990376377626355, 0.03412337127316856, 9.999999999998899e-05, 0.03229762674546088, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003372492331029653, 9.999999999998899e-05, 0.10745977343630198, 0.11124492280363774, 0.13503891997196404, 0.11548259718080212, 0.12133166813479346, 0.12735515246364681, 0.1077114402977215, 0.09410228378913255, 0.11387088302813042, 0.3685330458359627, 0.33543628345061316, 0.3499214134882507, 0.35223156015982027, 0.34942042482012725, 0.3549027118742101, 0.3508625464238858, 0.3433499314075712, 0.350415058928915, 0.06842705617459321, 0.0938410467299634, 0.06386166569070262, 0.07370769918045394, 0.081917388094773, 0.07901016592392118, 0.0856489367938339, 0.09894060487059508, 0.08314876034640983, 0.16174446674095821, 0.1531554366022283, 0.1282256999118465, 0.13409673359010754, 0.12229511505105362, 0.18563071285052202, 0.1323055378344854, 0.14737965634721495, 0.1333410107108688, 0.23044188339894955, 0.19964692265552475, 0.21246180249614022, 0.22997803251421933, 0.22451779946313488, 0.22041017573086197, 0.24518116249406718, 0.2381540204951046, 0.18800444153469376, 0.15430812499148527, 0.17626779411617577, 0.15741225833868844, 0.1912798713495295, 0.18361719550142508, 0.1465631964226055, 0.15072990415894327, 0.19014787918673015, 0.17285383724066727, 0.23518850207619402, 0.19378871026497135, 0.19343441153933472, 0.19059611511046404, 0.18602144894267558, 0.1914778739077284, 0.1941009699834504, 0.16053682118736468, 0.17746022900460667, 0.19138842129527622, 0.19713042671770775, 0.18260378633779806, 0.20866833707078558, 0.18910569651117093, 0.19234928532697126, 0.19263986972655323, 0.17755013039920853, 0.21997786023039312, 0.15604640777862, 0.16617118731024838, 0.1797995344183979, 0.43387764491122394, 0.17197796219345618, 0.2657281435473263, 0.14982910334146637, 0.16505301648357895, 0.1828872124741623, 0.15613630088044594, 0.2500399400718506, 0.27253160424982925, 0.29784883928671313, 0.1559703030054801, 0.20684945849493375, 0.1149119965812535, 0.1874407886204733, 0.1705401747738874, 0.18252945250054442, 0.16886140510526293, 0.1989553173256864, 0.16486071522930779, 0.18771650646895155, 0.17129821144691237, 0.19217879399746374, 0.16167752707546246, 0.18178555688387377, 0.07782950585934634, 0.06795642379049427, 0.06962468592346538, 0.06027537545021, 0.07520699969337696, 0.07549134628207843, 0.0705967386716484, 0.07445902006924021, 0.059484080554708774]}, "mutation_prompt": null}
{"id": "7becfd83-5ccf-4878-b4a7-beff50a5d66a", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant_diff = self.population[mutant_indices[0]] - self.population[mutant_indices[1]]\n                trial = target + self.F * mutant_diff\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = np.where(new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand(), trial, target)\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with improved efficiency by combining mutation and crossover operations.", "configspace": "", "generation": 41, "fitness": 0.2022127656424109, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.37817837914173014, 0.40656957691883466, 0.421248950452901, 0.3584179788966986, 0.3948788290831843, 0.3523345856591168, 0.3787369019659793, 0.3629953828587491, 0.3807027723241093, 0.27586097193843684, 0.2782151703247713, 0.25677076106359475, 0.27558039188362593, 0.26848187412691726, 0.2723038386186202, 0.2537151585873687, 0.21818888524975033, 0.28743641992088154, 0.14338644290359293, 0.11803925667252657, 0.1468754497868764, 0.1389005341518048, 0.14442565282757314, 0.11266918950539351, 0.14043561623435907, 0.12018915412403641, 0.12381155053663784, 0.13719783060690482, 0.12467970959759844, 0.12637269354251635, 0.089906592852942, 0.11717392986792441, 0.12036011806393165, 0.10277349427638582, 0.12558283306190587, 0.12105756140328994, 0.9591816791651004, 0.9320638063204755, 0.8776603115616057, 0.954048585306747, 0.9388964264965217, 0.921393917309997, 0.9250883299471744, 0.9571547218818781, 0.9230215616710166, 0.29362734747267594, 0.23537647806270523, 0.2132621266865764, 0.2537926415355415, 0.256543809670026, 0.2714081482412407, 0.27988730892534874, 0.2453833762574259, 0.20992115510914888, 0.2607254152231462, 0.21783329051968436, 0.2585969666437171, 0.27624596944703683, 0.29343253287003546, 0.2882301283469725, 0.2530513785510916, 0.25683407024933125, 0.26691136233860047, 0.11942534161129081, 0.1897795450952724, 0.16211669642850413, 0.14539696650221412, 0.14218642707033746, 0.15400577455442543, 0.13165817807017588, 0.14468005714791665, 0.15141791661872195, 0.20604226541905746, 0.1279888410165071, 0.20848800847788962, 0.161474491512958, 0.10564535149215304, 0.12550929278010337, 0.187832238078531, 0.12196711894702872, 0.16276656247520382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011961083628264646, 0.0023104019786600594, 9.999999999998899e-05, 0.10760046683498892, 0.04525655192517497, 0.07348454770919, 0.03333966545579081, 0.06243062151046508, 0.07643834390710069, 0.10363007271249802, 0.10618317009859124, 0.09951071268392375, 0.004694891391472611, 0.0015273314935250193, 9.999999999998899e-05, 9.999999999998899e-05, 0.0054447441962571785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12096922504121943, 0.10840144341935642, 0.10687955858473375, 0.12317685799826139, 0.12516782142146554, 0.13451072690709787, 0.09547235225668305, 0.14193035237718854, 0.07935381342101044, 0.3435016777729244, 0.35204198519561136, 0.35939380751071526, 0.3701000845929959, 0.35353715129603247, 0.3810385940049532, 0.3584420318908532, 0.3800183610778891, 0.35358725639548705, 0.08645006670835464, 0.08531396602003893, 0.09448284046359656, 0.09893443813403391, 0.08116165462735003, 0.1149973424259122, 0.08187282807669749, 0.08151700372043702, 0.08038886322227135, 0.16994395146848384, 0.13402103097068307, 0.10563293287782327, 0.13145734763556594, 0.1633909279494301, 0.14798436726829056, 0.11632144545422385, 0.12572162245401997, 0.16154901424660817, 0.2185199013107879, 0.22482676980923533, 0.23340413822765826, 0.23744106778500085, 0.23440166252375705, 0.24348863824020417, 0.20867504639138446, 0.26096323894002604, 0.17405421538238186, 0.18169578404353315, 0.15639787353355972, 0.16069978800993212, 0.1826626869757233, 0.2034767521059142, 0.1501675841596507, 0.13681057641947914, 0.14358582265991915, 0.16437242745724145, 0.18473238638894118, 0.2058551572903038, 0.1780271113850378, 0.17234140686381383, 0.18304642545037608, 0.1755745174309643, 0.17283448761068831, 0.17275070990448516, 0.17989810249764848, 0.19529565289832151, 0.19696316520344237, 0.20717772235875842, 0.19890494368633904, 0.1906415396934854, 0.18442873249586766, 0.1837185740676036, 0.1886311348081765, 0.2064523220027943, 0.1733099506841307, 0.25372585493107425, 0.27068469329643574, 0.3010861681400767, 0.2034310779448011, 0.19216793038614954, 0.160022881218293, 0.20424767396036492, 0.15997069335969094, 0.2332911322795379, 0.1855037042380362, 0.26131035569172545, 0.15796638963189324, 0.18388373945166792, 0.2237476184049132, 0.15487989625750653, 0.13152728870614827, 0.18146652461883006, 0.1728509577663524, 0.16311973141121183, 0.171087138166241, 0.17793633124834285, 0.16428062336054627, 0.2038580513387882, 0.16270254105172677, 0.16552992841097403, 0.17453368324157814, 0.09167967045114622, 0.07509423395741144, 0.07410054353975792, 0.06097830460891296, 0.05870102026498081, 0.08206457139530776, 0.0858180781264748, 0.07427985970576723, 0.07985623573871126]}, "mutation_prompt": null}
{"id": "98180cc8-99bd-44d9-857b-ff12aa723260", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        F_init = self.F\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                adapt_F = np.clip(F_init + 0.1 * np.random.randn(), 0.1, 0.9)\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v2", "description": "Enhanced DE_SA_Metaheuristic algorithm with improved convergence control through adaptive mutation scaling.", "configspace": "", "generation": 42, "fitness": 0.20374233911899023, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "f367387c-a793-4888-b164-562458d4ba40", "metadata": {"aucs": [0.38214419322502713, 0.3722686493411781, 0.46786808960686677, 0.3698078521691107, 0.37520360549210385, 0.35491560017988555, 0.3778687333167312, 0.37929391524853207, 0.3992253103769615, 0.2778815645766134, 0.27703468292758726, 0.28245038424941227, 0.2612977061145373, 0.29393846068623175, 0.266684224443833, 0.2600204498691039, 0.2780375220033642, 0.24413019135460923, 0.1491417505120426, 0.12749761163771967, 0.14491902865186146, 0.13621831874357448, 0.12348571874874636, 0.13147170536587982, 0.11049658906925375, 0.13597353400454049, 0.1429499647281426, 0.1064033222490871, 0.09872072623165273, 0.09687129596388366, 0.11335512419868121, 0.09963146256635702, 0.10479622017248968, 0.12653397677876, 0.09454358576118504, 0.09625945630093724, 0.9714814654848767, 0.9704464682671422, 0.9462924928980749, 0.9464712558491153, 0.946387542285716, 0.9528398688364357, 0.9091721209182564, 0.9532369261247671, 0.9186137383663997, 0.25469990113090735, 0.18470430447300523, 0.23933557231545444, 0.24223705993140432, 0.24223748581714122, 0.23951561617316586, 0.22311282007297073, 0.22641544694780313, 0.23266567600375343, 0.2218610889429521, 0.20167962161227992, 0.3061560944238667, 0.2939364917757853, 0.28058110200402964, 0.22593223589551714, 0.29844664047421676, 0.2799585443379977, 0.27868060717187915, 0.11713069859753089, 0.1243403070699376, 0.17876643114487922, 0.20062943540999512, 0.14475480944199348, 0.13133505765348985, 0.21555299579237774, 0.131122826579104, 0.18714252895974037, 0.14619518702018408, 0.17699247515479422, 0.15906951877905262, 0.13897402337078424, 0.13069145200412602, 0.12997507789476315, 0.14840463711038232, 0.16760247295225073, 0.19321080375006783, 9.999999999998899e-05, 0.0006223721349215561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006890846032222342, 0.0009611968059558551, 9.999999999998899e-05, 0.036419106387007405, 0.06421889406814352, 0.11734369661402466, 0.07878890316200338, 0.07580637817725877, 0.05112702129555524, 0.07624080820248691, 0.06994561569345081, 0.09006602828685606, 9.999999999998899e-05, 0.007358146824269385, 0.033570226023504124, 9.999999999998899e-05, 9.999999999998899e-05, 0.0042322670654449945, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019395929037746562, 0.09677792238807759, 0.10987123599825188, 0.10057242401397304, 0.12706816962011502, 0.12661181381831266, 0.11696432204335983, 0.08434982172728323, 0.11989915437401832, 0.0921832110698575, 0.37375904060825627, 0.3443215640271584, 0.37811055679658157, 0.3559905078691651, 0.3720737527312029, 0.3532232588995541, 0.3453902951759523, 0.3459492057316573, 0.35911990597934496, 0.07829401487340615, 0.07757933444505472, 0.06194341946600379, 0.0969536190034681, 0.08040488031312854, 0.07104193295313765, 0.08202685409516597, 0.0937911230196089, 0.07494834768907255, 0.13284936241765866, 0.1456773081860554, 0.18327321465059154, 0.12241826331835304, 0.18093893548076878, 0.14902819710200843, 0.12662948385657324, 0.12687338658663916, 0.157096866088685, 0.22987128384025635, 0.23507468887738892, 0.23690028771380267, 0.21779802004138227, 0.2339009589701172, 0.24898887510821488, 0.19646514825886485, 0.21978177260571652, 0.21322699387223687, 0.1776912333787517, 0.15788803061733592, 0.16065491745951965, 0.17845398592831074, 0.18093990060700438, 0.16638169401950986, 0.19953345037046688, 0.14641186450029398, 0.15718741840317163, 0.17436579475958003, 0.19193539301397455, 0.18158911138795386, 0.1873998937687722, 0.1644684949263303, 0.162478229301956, 0.20079737462601932, 0.1952996094693089, 0.19544911578572843, 0.18657206135528248, 0.20137553212451154, 0.20183098777838537, 0.20983218478264454, 0.19821490079719473, 0.17961172952231919, 0.17909671299934216, 0.19035713095961804, 0.19479827793515048, 0.170820114830173, 0.1872786398396752, 0.3247011693001912, 0.37847534218020495, 0.28432868520700305, 0.3560144475051994, 0.26403052250734316, 0.14981562660699965, 0.15649342833719748, 0.17638368490947798, 0.1863747562528476, 0.293496335847346, 0.17489840145536895, 0.15981065675887307, 0.24619237486430334, 0.2264545508984781, 0.1439677478077227, 0.17090133270705377, 0.16302856743889027, 0.18527040802204264, 0.18587082653703424, 0.1794800913183986, 0.18679399320985512, 0.17209908135990826, 0.16481791990834227, 0.17022150088183263, 0.1548455400080163, 0.06655166533049794, 0.06469563171699355, 0.07461714892795823, 0.07042892559540048, 0.06883663198115408, 0.06632315406598321, 0.07213309151391945, 0.06327611363315877, 0.06702882038939773]}, "mutation_prompt": null}
{"id": "2eef259a-20d6-43f6-8e9d-4bb5264ea02d", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        F_init = self.F\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                adapt_F = np.clip(F_init + 0.1 * np.random.randn(), 0.1, 0.9)\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) else trial if np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T = max(self.alpha * self.T, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v2", "description": "Enhanced DE_SA_Metaheuristic algorithm with improved convergence control through adaptive mutation scaling.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "98180cc8-99bd-44d9-857b-ff12aa723260", "metadata": {"aucs": [0.38214419322502713, 0.3722686493411781, 0.46786808960686677, 0.3698078521691107, 0.37520360549210385, 0.35491560017988555, 0.3778687333167312, 0.37929391524853207, 0.3992253103769615, 0.2778815645766134, 0.27703468292758726, 0.28245038424941227, 0.2612977061145373, 0.29393846068623175, 0.266684224443833, 0.2600204498691039, 0.2780375220033642, 0.24413019135460923, 0.1491417505120426, 0.12749761163771967, 0.14491902865186146, 0.13621831874357448, 0.12348571874874636, 0.13147170536587982, 0.11049658906925375, 0.13597353400454049, 0.1429499647281426, 0.1064033222490871, 0.09872072623165273, 0.09687129596388366, 0.11335512419868121, 0.09963146256635702, 0.10479622017248968, 0.12653397677876, 0.09454358576118504, 0.09625945630093724, 0.9714814654848767, 0.9704464682671422, 0.9462924928980749, 0.9464712558491153, 0.946387542285716, 0.9528398688364357, 0.9091721209182564, 0.9532369261247671, 0.9186137383663997, 0.25469990113090735, 0.18470430447300523, 0.23933557231545444, 0.24223705993140432, 0.24223748581714122, 0.23951561617316586, 0.22311282007297073, 0.22641544694780313, 0.23266567600375343, 0.2218610889429521, 0.20167962161227992, 0.3061560944238667, 0.2939364917757853, 0.28058110200402964, 0.22593223589551714, 0.29844664047421676, 0.2799585443379977, 0.27868060717187915, 0.11713069859753089, 0.1243403070699376, 0.17876643114487922, 0.20062943540999512, 0.14475480944199348, 0.13133505765348985, 0.21555299579237774, 0.131122826579104, 0.18714252895974037, 0.14619518702018408, 0.17699247515479422, 0.15906951877905262, 0.13897402337078424, 0.13069145200412602, 0.12997507789476315, 0.14840463711038232, 0.16760247295225073, 0.19321080375006783, 9.999999999998899e-05, 0.0006223721349215561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006890846032222342, 0.0009611968059558551, 9.999999999998899e-05, 0.036419106387007405, 0.06421889406814352, 0.11734369661402466, 0.07878890316200338, 0.07580637817725877, 0.05112702129555524, 0.07624080820248691, 0.06994561569345081, 0.09006602828685606, 9.999999999998899e-05, 0.007358146824269385, 0.033570226023504124, 9.999999999998899e-05, 9.999999999998899e-05, 0.0042322670654449945, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019395929037746562, 0.09677792238807759, 0.10987123599825188, 0.10057242401397304, 0.12706816962011502, 0.12661181381831266, 0.11696432204335983, 0.08434982172728323, 0.11989915437401832, 0.0921832110698575, 0.37375904060825627, 0.3443215640271584, 0.37811055679658157, 0.3559905078691651, 0.3720737527312029, 0.3532232588995541, 0.3453902951759523, 0.3459492057316573, 0.35911990597934496, 0.07829401487340615, 0.07757933444505472, 0.06194341946600379, 0.0969536190034681, 0.08040488031312854, 0.07104193295313765, 0.08202685409516597, 0.0937911230196089, 0.07494834768907255, 0.13284936241765866, 0.1456773081860554, 0.18327321465059154, 0.12241826331835304, 0.18093893548076878, 0.14902819710200843, 0.12662948385657324, 0.12687338658663916, 0.157096866088685, 0.22987128384025635, 0.23507468887738892, 0.23690028771380267, 0.21779802004138227, 0.2339009589701172, 0.24898887510821488, 0.19646514825886485, 0.21978177260571652, 0.21322699387223687, 0.1776912333787517, 0.15788803061733592, 0.16065491745951965, 0.17845398592831074, 0.18093990060700438, 0.16638169401950986, 0.19953345037046688, 0.14641186450029398, 0.15718741840317163, 0.17436579475958003, 0.19193539301397455, 0.18158911138795386, 0.1873998937687722, 0.1644684949263303, 0.162478229301956, 0.20079737462601932, 0.1952996094693089, 0.19544911578572843, 0.18657206135528248, 0.20137553212451154, 0.20183098777838537, 0.20983218478264454, 0.19821490079719473, 0.17961172952231919, 0.17909671299934216, 0.19035713095961804, 0.19479827793515048, 0.170820114830173, 0.1872786398396752, 0.3247011693001912, 0.37847534218020495, 0.28432868520700305, 0.3560144475051994, 0.26403052250734316, 0.14981562660699965, 0.15649342833719748, 0.17638368490947798, 0.1863747562528476, 0.293496335847346, 0.17489840145536895, 0.15981065675887307, 0.24619237486430334, 0.2264545508984781, 0.1439677478077227, 0.17090133270705377, 0.16302856743889027, 0.18527040802204264, 0.18587082653703424, 0.1794800913183986, 0.18679399320985512, 0.17209908135990826, 0.16481791990834227, 0.17022150088183263, 0.1548455400080163, 0.06655166533049794, 0.06469563171699355, 0.07461714892795823, 0.07042892559540048, 0.06883663198115408, 0.06632315406598321, 0.07213309151391945, 0.06327611363315877, 0.06702882038939773]}, "mutation_prompt": null}
{"id": "4bada7c3-0c73-4d88-93c1-8c107f4da320", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.CR = 0.5\n        self.F = 0.5\n        self.T = 1.0\n        self.alpha = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        F_init = self.F\n\n        for _ in range(self.budget):\n            new_population = []\n            adapt_F = np.clip(F_init + 0.1 * np.random.randn(), 0.1, 0.9)\n            for target in self.population:\n                mutant_indices = np.random.choice(range(self.pop_size), 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n                \n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = new_fitness\n                    \n                target = trial if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n                \n            self.population = np.array(new_population)\n            self.T *= max(self.alpha, 0.1)\n            \n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v3", "description": "Improved Enhanced DE_SA_Metaheuristic algorithm with enhanced mutation control mechanism and simplified structure.", "configspace": "", "generation": 44, "fitness": 0.225174496966253, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "98180cc8-99bd-44d9-857b-ff12aa723260", "metadata": {"aucs": [0.705307739661542, 0.7086031001118605, 0.7382052250421334, 0.6803508948965526, 0.705884379633856, 0.6614086004875489, 0.7128081086800224, 0.7177990604363502, 0.6844029665983009, 0.31806559042378524, 0.31060326927068427, 0.3853813871525965, 0.35606827446016254, 0.38419187545904543, 0.42215030709131063, 0.4155643361585908, 0.42019225559366724, 0.39911871721470615, 0.1214334576642434, 0.12387930239946165, 0.11742718836215482, 0.14053551010796783, 0.1317366498645448, 0.14427506758217645, 0.12127253555541884, 0.11638232570043128, 0.11751181947929312, 0.10207793298613466, 0.11801761268649147, 0.09958303293545778, 0.09744089398432554, 0.0988189570503899, 0.10738440110090852, 0.10105541064794366, 0.10096718923103087, 0.11054584851941363, 0.9486265653095756, 0.9579966719002652, 0.9023475766196183, 0.9296163142524351, 0.9578561692582183, 0.9299691249260328, 0.9264424476536326, 0.949622342644598, 0.9503729554654259, 0.29871596914804255, 0.24149156401364025, 0.25854958577819964, 0.25302930391744693, 0.3391259043797433, 0.2767371156712487, 0.24058724321970681, 0.2714653599322252, 0.21732459351044153, 0.2653216160028906, 0.2900489227117109, 0.22022706119199087, 0.31878045468844884, 0.26450096402674994, 0.2718277724452859, 0.2979078251835775, 0.2599835375714352, 0.2702061865921418, 0.15675684006218038, 0.12006027499906036, 0.14463317314336654, 0.21572984820600538, 0.12555673477180884, 0.1516880006243153, 0.10869642035116411, 0.13205001813652106, 0.17817206856030365, 0.14393349459061933, 0.16363170388933523, 0.16714689174440867, 0.12016483181430782, 0.15553948052631916, 0.1424094456079531, 0.1494715859513175, 0.14052220759900358, 0.1786863351190222, 0.006066908937811921, 0.0014975710508504658, 0.0004779437075427273, 0.0223612612763201, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005315427012603235, 0.007836431328669069, 9.999999999998899e-05, 0.07679004020619395, 0.05161369590969911, 0.08629297943788883, 0.0804469732249965, 0.057726639531692436, 0.09119098848083651, 0.09949673066920672, 0.06509898223083765, 0.07704826699994682, 9.999999999998899e-05, 0.05290105991858507, 0.048916857608854336, 9.999999999998899e-05, 0.0002066358412199376, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009387176841966216, 9.999999999998899e-05, 0.09325897997380472, 0.1130026382873126, 0.11996065584567206, 0.12438317666674226, 0.11951940366984704, 0.11648326226103567, 0.10313913579639844, 0.09951997269946644, 0.08427646928351018, 0.5027413668516137, 0.4487111689268184, 0.45067839120409936, 0.43498260562127167, 0.4433008048718492, 0.44938994868105897, 0.4835966533292948, 0.4670095249897781, 0.44671777256859246, 0.09045435928682677, 0.0646509505927797, 0.07066059748651443, 0.08720125373575904, 0.08134324049402308, 0.08828654300322847, 0.07984496974420308, 0.08013268880992419, 0.10593528570362865, 0.1413718777400148, 0.13698890783540174, 0.14491245304423483, 0.1216403589323225, 0.13724530385924605, 0.12335694350875148, 0.12144460192743645, 0.1322612724350789, 0.11945780727069089, 0.18496610627548393, 0.22912747560171376, 0.21788363303052405, 0.22558935909712796, 0.23473909110905544, 0.22846042866148908, 0.21851710881469266, 0.25123959321836775, 0.20207558841107331, 0.1514320920560447, 0.19785206873207017, 0.16664593560576813, 0.16485063760666507, 0.18423876040711307, 0.1620404674967002, 0.13150071443337275, 0.14187868479917454, 0.15421807779935393, 0.19181731087631104, 0.19257548654504475, 0.20413522367472514, 0.16478966917062954, 0.1736249160350688, 0.1838416073057405, 0.18316748777011005, 0.1729012655491562, 0.19329369274889285, 0.188743044932143, 0.1902810251342889, 0.19033176637890437, 0.20300396567750212, 0.20152581042488915, 0.20151613668793, 0.1916417888363282, 0.18461508479940636, 0.19331234597688207, 0.24325975807442035, 0.17597760267215712, 0.17253939727536494, 0.4080816071144072, 0.16621300487966928, 0.18529850735162734, 0.2901399551076893, 0.1361167195712818, 0.15436455902973722, 0.2816060474630854, 0.154423701263252, 0.2529238772000001, 0.16325087983253028, 0.1820977656251268, 0.14988179308155336, 0.2923783121320004, 0.28490524450321786, 0.24656620344266134, 0.16596878763957723, 0.1805297210821425, 0.17883447832219757, 0.17466042096682144, 0.1564939179206103, 0.18077379361847123, 0.1748967921679757, 0.174904887696402, 0.17839660324226148, 0.06876067463536051, 0.0649763566117263, 0.07004972966510337, 0.08061786923538039, 0.06379894223569449, 0.07442273962121149, 0.06845592202425088, 0.06645520280866823, 0.06621281629017883]}, "mutation_prompt": null}
{"id": "64733409-94fb-4682-b259-49a282b22dfa", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v4:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha = budget, dim, 10, 0.5, 0.9\n        self.F, self.T, self.population = 0.5, 1.0, np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness, F_init = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim)), self.F\n\n        for _ in range(self.budget):\n            new_population, adapt_F = [], np.clip(F_init + 0.1 * np.random.randn(), 0.1, 0.9)\n            for target in self.population:\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                target = trial if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v4", "description": "Optimized Enhanced DE_SA_Metaheuristic algorithm with improved efficiency in random value generation and convergence speed.", "configspace": "", "generation": 45, "fitness": 0.2285317898173935, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v4 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "4bada7c3-0c73-4d88-93c1-8c107f4da320", "metadata": {"aucs": [0.7054103003326545, 0.7089525183661058, 0.7382094617560857, 0.6804100723372901, 0.7058879023507183, 0.6612553095954815, 0.7128272883864843, 0.7177393186149679, 0.6844126062475144, 0.31806559042378524, 0.31060326927068427, 0.3853813871525965, 0.35606827446016254, 0.38419187545904543, 0.42215030709131063, 0.4155643361585908, 0.42019225559366724, 0.39911871721470615, 0.1214334576642434, 0.12387930239946165, 0.11742718836215482, 0.14053551010796783, 0.1317366498645448, 0.14423100035769365, 0.12127253555541884, 0.11638232570043128, 0.11751181947929312, 0.10207793298613466, 0.11801761268649147, 0.09958303293545778, 0.09744089398432554, 0.0988189570503899, 0.10738440110090852, 0.10105541064794366, 0.10096718923103087, 0.11054584851941363, 0.9486248575790209, 0.9579966719002652, 0.9023457335074261, 0.9296163142524351, 0.9578561692582183, 0.9299623084968851, 0.9264424476536326, 0.949622342644598, 0.9503664831455829, 0.29871596914804255, 0.24149156401364025, 0.25854958577819964, 0.25302930391744693, 0.3391259043797433, 0.2767371156712487, 0.24058724321970681, 0.2714653599322252, 0.21732459351044153, 0.2654510587134826, 0.29073770034208746, 0.2209339046905232, 0.31878045468844884, 0.26450096402674994, 0.2718277724452859, 0.2979078251835775, 0.2599835375714352, 0.2702061865921418, 0.15675684006218038, 0.12006027499906036, 0.14463317314336654, 0.21572984820600538, 0.12555673477180884, 0.1516880006243153, 0.10869642035116411, 0.13205001813652106, 0.17817206856030365, 0.15325684035052067, 0.16943064411963804, 0.1741336320695125, 0.12624565271483568, 0.1591679169157202, 0.1436500453052253, 0.15147237710125538, 0.1450516283176594, 0.1846129904368058, 0.006066908937811921, 0.0014975710508504658, 0.0004779437075427273, 0.0223612612763201, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005315427012603235, 0.007836431328669069, 9.999999999998899e-05, 0.07679004020619395, 0.05161369590969911, 0.08629297943788883, 0.0804469732249965, 0.057726639531692436, 0.09119098848083651, 0.09949673066920672, 0.06509898223083765, 0.07704826699994682, 9.999999999998899e-05, 0.05290105991858507, 0.048916857608854336, 9.999999999998899e-05, 0.0002066358412199376, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009387176841966216, 9.999999999998899e-05, 0.09325897997380472, 0.1130026382873126, 0.11996065584567206, 0.12438317666674226, 0.11951940366984704, 0.11648326226103567, 0.10313913579639844, 0.09951997269946644, 0.08427646928351018, 0.5025833921388181, 0.44871344001511826, 0.4506802097361784, 0.43498757763056206, 0.4433041210289691, 0.44939295048920513, 0.48368186382554357, 0.4673364738423347, 0.44675623049140867, 0.09045435928682677, 0.0646509505927797, 0.07066059748651443, 0.08720125373575904, 0.08134324049402308, 0.08828654300322847, 0.07984496974420308, 0.08013268880992419, 0.10593528570362865, 0.1413485312659727, 0.13698890783540174, 0.14491148186414649, 0.12161282177407517, 0.13227853418679603, 0.12335463693072946, 0.12144460192743645, 0.13226094577375858, 0.11944440089311936, 0.18496569220389403, 0.22913699674631316, 0.21786622058887262, 0.22563759651465443, 0.23485112360397864, 0.22856847690337967, 0.21852652245563553, 0.25124376223360667, 0.20209653536253636, 0.1514323284993948, 0.1978537238355218, 0.16659931869363775, 0.1648990668932343, 0.18431228919907694, 0.16219356779490823, 0.13150186496559313, 0.1418804877020673, 0.15419440716872146, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.188743044932143, 0.1902810251342889, 0.19033176637890437, 0.20300396567750212, 0.20152581042488915, 0.20151613668793, 0.1916417888363282, 0.18461508479940636, 0.19331234597688207, 0.24331072040794566, 0.17600045777977724, 0.17255217798610734, 0.40808122383667056, 0.16621620413857086, 0.18527868540310333, 0.2901397842294686, 0.13611766742200182, 0.15436438754672177, 0.28160413922029814, 0.15427380179033057, 0.2529246232923812, 0.16325242728472045, 0.18209945098174862, 0.14988302798673725, 0.29237521419242374, 0.2848976665269911, 0.24656795938373, 0.16608523656172824, 0.1805428303290597, 0.17887022025291077, 0.17465906771862882, 0.15648915959230258, 0.18077355716996624, 0.17490227549441917, 0.17490263559741126, 0.17840114095617987, 0.068845359547278, 0.06501396273702209, 0.07006202388343374, 0.08066362332520072, 0.06381316207422882, 0.07443863392687966, 0.06845608568309092, 0.06645683939706815, 0.06621297737133192]}, "mutation_prompt": null}
{"id": "b394b123-e135-4764-9ac3-3060a7a12f86", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v4:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha = budget, dim, 10, 0.5, 0.9\n        self.F, self.T, self.population = 0.5, 1.0, np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n\n        for _ in range(self.budget):\n            new_population = []\n            adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n            mutants = self.population[np.random.choice(self.pop_size, (self.pop_size, 2), replace=False)]\n            trials = self.population[:, None, :] + adapt_F * (mutants[:, 0, :] - mutants[:, 1, :])\n            masks = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials[masks] = self.population[masks]\n\n            new_fitness = np.array([func(trial) for trial in trials])\n            improvements = new_fitness < best_fitness\n            best_solution[improvements], best_fitness[improvements] = trials[improvements], new_fitness[improvements]\n\n            exchange = new_fitness < func(self.population) + np.log(np.random.rand(self.pop_size)) * self.T\n            self.population[exchange] = trials[exchange]\n            new_population = np.where(exchange[:, None], trials, self.population)\n\n            self.T = self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v4", "description": "Improve efficiency by vectorizing operations and minimizing repeated calculations.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "64733409-94fb-4682-b259-49a282b22dfa", "metadata": {}, "mutation_prompt": null}
{"id": "f1e34b7e-55f4-4421-a637-94f060d786a4", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v4:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha = budget, dim, 10, 0.5, 0.9\n        self.F, self.T, self.population = 0.5, 1.0, np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness, F_init = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim)), self.F\n\n        for _ in range(self.budget):\n            new_population, adapt_F = [], np.clip(F_init + 0.1 * np.random.randn(), 0.1, 0.9)\n            for target in self.population:\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                target = trial if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v4", "description": "Optimized Enhanced DE_SA_Metaheuristic algorithm with improved efficiency in random value generation and convergence speed.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64733409-94fb-4682-b259-49a282b22dfa", "metadata": {"aucs": [0.7054103003326545, 0.7089525183661058, 0.7382094617560857, 0.6804100723372901, 0.7058879023507183, 0.6612553095954815, 0.7128272883864843, 0.7177393186149679, 0.6844126062475144, 0.31806559042378524, 0.31060326927068427, 0.3853813871525965, 0.35606827446016254, 0.38419187545904543, 0.42215030709131063, 0.4155643361585908, 0.42019225559366724, 0.39911871721470615, 0.1214334576642434, 0.12387930239946165, 0.11742718836215482, 0.14053551010796783, 0.1317366498645448, 0.14423100035769365, 0.12127253555541884, 0.11638232570043128, 0.11751181947929312, 0.10207793298613466, 0.11801761268649147, 0.09958303293545778, 0.09744089398432554, 0.0988189570503899, 0.10738440110090852, 0.10105541064794366, 0.10096718923103087, 0.11054584851941363, 0.9486248575790209, 0.9579966719002652, 0.9023457335074261, 0.9296163142524351, 0.9578561692582183, 0.9299623084968851, 0.9264424476536326, 0.949622342644598, 0.9503664831455829, 0.29871596914804255, 0.24149156401364025, 0.25854958577819964, 0.25302930391744693, 0.3391259043797433, 0.2767371156712487, 0.24058724321970681, 0.2714653599322252, 0.21732459351044153, 0.2654510587134826, 0.29073770034208746, 0.2209339046905232, 0.31878045468844884, 0.26450096402674994, 0.2718277724452859, 0.2979078251835775, 0.2599835375714352, 0.2702061865921418, 0.15675684006218038, 0.12006027499906036, 0.14463317314336654, 0.21572984820600538, 0.12555673477180884, 0.1516880006243153, 0.10869642035116411, 0.13205001813652106, 0.17817206856030365, 0.15325684035052067, 0.16943064411963804, 0.1741336320695125, 0.12624565271483568, 0.1591679169157202, 0.1436500453052253, 0.15147237710125538, 0.1450516283176594, 0.1846129904368058, 0.006066908937811921, 0.0014975710508504658, 0.0004779437075427273, 0.0223612612763201, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005315427012603235, 0.007836431328669069, 9.999999999998899e-05, 0.07679004020619395, 0.05161369590969911, 0.08629297943788883, 0.0804469732249965, 0.057726639531692436, 0.09119098848083651, 0.09949673066920672, 0.06509898223083765, 0.07704826699994682, 9.999999999998899e-05, 0.05290105991858507, 0.048916857608854336, 9.999999999998899e-05, 0.0002066358412199376, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009387176841966216, 9.999999999998899e-05, 0.09325897997380472, 0.1130026382873126, 0.11996065584567206, 0.12438317666674226, 0.11951940366984704, 0.11648326226103567, 0.10313913579639844, 0.09951997269946644, 0.08427646928351018, 0.5025833921388181, 0.44871344001511826, 0.4506802097361784, 0.43498757763056206, 0.4433041210289691, 0.44939295048920513, 0.48368186382554357, 0.4673364738423347, 0.44675623049140867, 0.09045435928682677, 0.0646509505927797, 0.07066059748651443, 0.08720125373575904, 0.08134324049402308, 0.08828654300322847, 0.07984496974420308, 0.08013268880992419, 0.10593528570362865, 0.1413485312659727, 0.13698890783540174, 0.14491148186414649, 0.12161282177407517, 0.13227853418679603, 0.12335463693072946, 0.12144460192743645, 0.13226094577375858, 0.11944440089311936, 0.18496569220389403, 0.22913699674631316, 0.21786622058887262, 0.22563759651465443, 0.23485112360397864, 0.22856847690337967, 0.21852652245563553, 0.25124376223360667, 0.20209653536253636, 0.1514323284993948, 0.1978537238355218, 0.16659931869363775, 0.1648990668932343, 0.18431228919907694, 0.16219356779490823, 0.13150186496559313, 0.1418804877020673, 0.15419440716872146, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.188743044932143, 0.1902810251342889, 0.19033176637890437, 0.20300396567750212, 0.20152581042488915, 0.20151613668793, 0.1916417888363282, 0.18461508479940636, 0.19331234597688207, 0.24331072040794566, 0.17600045777977724, 0.17255217798610734, 0.40808122383667056, 0.16621620413857086, 0.18527868540310333, 0.2901397842294686, 0.13611766742200182, 0.15436438754672177, 0.28160413922029814, 0.15427380179033057, 0.2529246232923812, 0.16325242728472045, 0.18209945098174862, 0.14988302798673725, 0.29237521419242374, 0.2848976665269911, 0.24656795938373, 0.16608523656172824, 0.1805428303290597, 0.17887022025291077, 0.17465906771862882, 0.15648915959230258, 0.18077355716996624, 0.17490227549441917, 0.17490263559741126, 0.17840114095617987, 0.068845359547278, 0.06501396273702209, 0.07006202388343374, 0.08066362332520072, 0.06381316207422882, 0.07443863392687966, 0.06845608568309092, 0.06645683939706815, 0.06621297737133192]}, "mutation_prompt": null}
{"id": "3c24a960-9b53-471c-9922-0eb44f9f8c75", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v4:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha = budget, dim, 10, 0.5, 0.9\n        self.F, self.T, self.population = 0.5, 1.0, np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness, F_init = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim)), self.F\n\n        for _ in range(self.budget):\n            new_population, adapt_F = [], np.clip(F_init + 0.1 * np.random.randn(), 0.1, 0.9)\n            for target in self.population:\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                target = trial if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v4", "description": "Optimized Enhanced DE_SA_Metaheuristic algorithm with improved efficiency in random value generation and convergence speed.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64733409-94fb-4682-b259-49a282b22dfa", "metadata": {"aucs": [0.7054103003326545, 0.7089525183661058, 0.7382094617560857, 0.6804100723372901, 0.7058879023507183, 0.6612553095954815, 0.7128272883864843, 0.7177393186149679, 0.6844126062475144, 0.31806559042378524, 0.31060326927068427, 0.3853813871525965, 0.35606827446016254, 0.38419187545904543, 0.42215030709131063, 0.4155643361585908, 0.42019225559366724, 0.39911871721470615, 0.1214334576642434, 0.12387930239946165, 0.11742718836215482, 0.14053551010796783, 0.1317366498645448, 0.14423100035769365, 0.12127253555541884, 0.11638232570043128, 0.11751181947929312, 0.10207793298613466, 0.11801761268649147, 0.09958303293545778, 0.09744089398432554, 0.0988189570503899, 0.10738440110090852, 0.10105541064794366, 0.10096718923103087, 0.11054584851941363, 0.9486248575790209, 0.9579966719002652, 0.9023457335074261, 0.9296163142524351, 0.9578561692582183, 0.9299623084968851, 0.9264424476536326, 0.949622342644598, 0.9503664831455829, 0.29871596914804255, 0.24149156401364025, 0.25854958577819964, 0.25302930391744693, 0.3391259043797433, 0.2767371156712487, 0.24058724321970681, 0.2714653599322252, 0.21732459351044153, 0.2654510587134826, 0.29073770034208746, 0.2209339046905232, 0.31878045468844884, 0.26450096402674994, 0.2718277724452859, 0.2979078251835775, 0.2599835375714352, 0.2702061865921418, 0.15675684006218038, 0.12006027499906036, 0.14463317314336654, 0.21572984820600538, 0.12555673477180884, 0.1516880006243153, 0.10869642035116411, 0.13205001813652106, 0.17817206856030365, 0.15325684035052067, 0.16943064411963804, 0.1741336320695125, 0.12624565271483568, 0.1591679169157202, 0.1436500453052253, 0.15147237710125538, 0.1450516283176594, 0.1846129904368058, 0.006066908937811921, 0.0014975710508504658, 0.0004779437075427273, 0.0223612612763201, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005315427012603235, 0.007836431328669069, 9.999999999998899e-05, 0.07679004020619395, 0.05161369590969911, 0.08629297943788883, 0.0804469732249965, 0.057726639531692436, 0.09119098848083651, 0.09949673066920672, 0.06509898223083765, 0.07704826699994682, 9.999999999998899e-05, 0.05290105991858507, 0.048916857608854336, 9.999999999998899e-05, 0.0002066358412199376, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009387176841966216, 9.999999999998899e-05, 0.09325897997380472, 0.1130026382873126, 0.11996065584567206, 0.12438317666674226, 0.11951940366984704, 0.11648326226103567, 0.10313913579639844, 0.09951997269946644, 0.08427646928351018, 0.5025833921388181, 0.44871344001511826, 0.4506802097361784, 0.43498757763056206, 0.4433041210289691, 0.44939295048920513, 0.48368186382554357, 0.4673364738423347, 0.44675623049140867, 0.09045435928682677, 0.0646509505927797, 0.07066059748651443, 0.08720125373575904, 0.08134324049402308, 0.08828654300322847, 0.07984496974420308, 0.08013268880992419, 0.10593528570362865, 0.1413485312659727, 0.13698890783540174, 0.14491148186414649, 0.12161282177407517, 0.13227853418679603, 0.12335463693072946, 0.12144460192743645, 0.13226094577375858, 0.11944440089311936, 0.18496569220389403, 0.22913699674631316, 0.21786622058887262, 0.22563759651465443, 0.23485112360397864, 0.22856847690337967, 0.21852652245563553, 0.25124376223360667, 0.20209653536253636, 0.1514323284993948, 0.1978537238355218, 0.16659931869363775, 0.1648990668932343, 0.18431228919907694, 0.16219356779490823, 0.13150186496559313, 0.1418804877020673, 0.15419440716872146, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.188743044932143, 0.1902810251342889, 0.19033176637890437, 0.20300396567750212, 0.20152581042488915, 0.20151613668793, 0.1916417888363282, 0.18461508479940636, 0.19331234597688207, 0.24331072040794566, 0.17600045777977724, 0.17255217798610734, 0.40808122383667056, 0.16621620413857086, 0.18527868540310333, 0.2901397842294686, 0.13611766742200182, 0.15436438754672177, 0.28160413922029814, 0.15427380179033057, 0.2529246232923812, 0.16325242728472045, 0.18209945098174862, 0.14988302798673725, 0.29237521419242374, 0.2848976665269911, 0.24656795938373, 0.16608523656172824, 0.1805428303290597, 0.17887022025291077, 0.17465906771862882, 0.15648915959230258, 0.18077355716996624, 0.17490227549441917, 0.17490263559741126, 0.17840114095617987, 0.068845359547278, 0.06501396273702209, 0.07006202388343374, 0.08066362332520072, 0.06381316207422882, 0.07443863392687966, 0.06845608568309092, 0.06645683939706815, 0.06621297737133192]}, "mutation_prompt": null}
{"id": "bb18b47d-93ca-4cd1-9b5e-e50b0cd48333", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v5:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha = budget, dim, 10, 0.5, 0.9\n        self.F, self.T, self.population = 0.5, 1.0, np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness, F_init = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim)), self.F\n\n        for _ in range(self.budget):\n            adapt_F = np.clip(F_init + 0.1 * np.random.randn(), 0.1, 0.9)\n            new_population = []\n\n            for target in self.population:\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                target = trial if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v5", "description": "Enhanced version of the Enhanced DE_SA_Metaheuristic_v4 algorithm with optimized data structures, streamlined control flow, and consolidated operations for improved efficiency.", "configspace": "", "generation": 49, "fitness": 0.2285317898173935, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "64733409-94fb-4682-b259-49a282b22dfa", "metadata": {"aucs": [0.7054103003326545, 0.7089525183661058, 0.7382094617560857, 0.6804100723372901, 0.7058879023507183, 0.6612553095954815, 0.7128272883864843, 0.7177393186149679, 0.6844126062475144, 0.31806559042378524, 0.31060326927068427, 0.3853813871525965, 0.35606827446016254, 0.38419187545904543, 0.42215030709131063, 0.4155643361585908, 0.42019225559366724, 0.39911871721470615, 0.1214334576642434, 0.12387930239946165, 0.11742718836215482, 0.14053551010796783, 0.1317366498645448, 0.14423100035769365, 0.12127253555541884, 0.11638232570043128, 0.11751181947929312, 0.10207793298613466, 0.11801761268649147, 0.09958303293545778, 0.09744089398432554, 0.0988189570503899, 0.10738440110090852, 0.10105541064794366, 0.10096718923103087, 0.11054584851941363, 0.9486248575790209, 0.9579966719002652, 0.9023457335074261, 0.9296163142524351, 0.9578561692582183, 0.9299623084968851, 0.9264424476536326, 0.949622342644598, 0.9503664831455829, 0.29871596914804255, 0.24149156401364025, 0.25854958577819964, 0.25302930391744693, 0.3391259043797433, 0.2767371156712487, 0.24058724321970681, 0.2714653599322252, 0.21732459351044153, 0.2654510587134826, 0.29073770034208746, 0.2209339046905232, 0.31878045468844884, 0.26450096402674994, 0.2718277724452859, 0.2979078251835775, 0.2599835375714352, 0.2702061865921418, 0.15675684006218038, 0.12006027499906036, 0.14463317314336654, 0.21572984820600538, 0.12555673477180884, 0.1516880006243153, 0.10869642035116411, 0.13205001813652106, 0.17817206856030365, 0.15325684035052067, 0.16943064411963804, 0.1741336320695125, 0.12624565271483568, 0.1591679169157202, 0.1436500453052253, 0.15147237710125538, 0.1450516283176594, 0.1846129904368058, 0.006066908937811921, 0.0014975710508504658, 0.0004779437075427273, 0.0223612612763201, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005315427012603235, 0.007836431328669069, 9.999999999998899e-05, 0.07679004020619395, 0.05161369590969911, 0.08629297943788883, 0.0804469732249965, 0.057726639531692436, 0.09119098848083651, 0.09949673066920672, 0.06509898223083765, 0.07704826699994682, 9.999999999998899e-05, 0.05290105991858507, 0.048916857608854336, 9.999999999998899e-05, 0.0002066358412199376, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009387176841966216, 9.999999999998899e-05, 0.09325897997380472, 0.1130026382873126, 0.11996065584567206, 0.12438317666674226, 0.11951940366984704, 0.11648326226103567, 0.10313913579639844, 0.09951997269946644, 0.08427646928351018, 0.5025833921388181, 0.44871344001511826, 0.4506802097361784, 0.43498757763056206, 0.4433041210289691, 0.44939295048920513, 0.48368186382554357, 0.4673364738423347, 0.44675623049140867, 0.09045435928682677, 0.0646509505927797, 0.07066059748651443, 0.08720125373575904, 0.08134324049402308, 0.08828654300322847, 0.07984496974420308, 0.08013268880992419, 0.10593528570362865, 0.1413485312659727, 0.13698890783540174, 0.14491148186414649, 0.12161282177407517, 0.13227853418679603, 0.12335463693072946, 0.12144460192743645, 0.13226094577375858, 0.11944440089311936, 0.18496569220389403, 0.22913699674631316, 0.21786622058887262, 0.22563759651465443, 0.23485112360397864, 0.22856847690337967, 0.21852652245563553, 0.25124376223360667, 0.20209653536253636, 0.1514323284993948, 0.1978537238355218, 0.16659931869363775, 0.1648990668932343, 0.18431228919907694, 0.16219356779490823, 0.13150186496559313, 0.1418804877020673, 0.15419440716872146, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.188743044932143, 0.1902810251342889, 0.19033176637890437, 0.20300396567750212, 0.20152581042488915, 0.20151613668793, 0.1916417888363282, 0.18461508479940636, 0.19331234597688207, 0.24331072040794566, 0.17600045777977724, 0.17255217798610734, 0.40808122383667056, 0.16621620413857086, 0.18527868540310333, 0.2901397842294686, 0.13611766742200182, 0.15436438754672177, 0.28160413922029814, 0.15427380179033057, 0.2529246232923812, 0.16325242728472045, 0.18209945098174862, 0.14988302798673725, 0.29237521419242374, 0.2848976665269911, 0.24656795938373, 0.16608523656172824, 0.1805428303290597, 0.17887022025291077, 0.17465906771862882, 0.15648915959230258, 0.18077355716996624, 0.17490227549441917, 0.17490263559741126, 0.17840114095617987, 0.068845359547278, 0.06501396273702209, 0.07006202388343374, 0.08066362332520072, 0.06381316207422882, 0.07443863392687966, 0.06845608568309092, 0.06645683939706815, 0.06621297737133192]}, "mutation_prompt": null}
{"id": "3d01b9e3-bc72-4cba-baa7-9496c3e9afd3", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v5:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha = budget, dim, 10, 0.5, 0.9\n        self.F, self.T, self.population = 0.5, 1.0, np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness, F_init = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim)), self.F\n\n        for _ in range(self.budget):\n            new_population, adapt_F = [], np.clip(F_init + 0.1 * np.random.randn(), 0.1, 0.9)\n            for target in self.population:\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                np.putmask(trial, mask, target[mask])\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                target = trial if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v5", "description": "Improved Enhanced DE_SA_Metaheuristic algorithm with enhanced memory efficiency and streamlined control flow for faster convergence.", "configspace": "", "generation": 50, "fitness": 0.18625103127916362, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "64733409-94fb-4682-b259-49a282b22dfa", "metadata": {"aucs": [0.4306480527284374, 0.37938738975072317, 0.4693063663452012, 0.35895169183719255, 0.40284217955066526, 0.3452016363833593, 0.4479350899972703, 0.5047383413787624, 0.43904145672232187, 0.13774824485322168, 0.13523856544251944, 0.08148188660423805, 0.12411228954194686, 0.1451313018177367, 0.15060348468294138, 0.06929616700856911, 0.10567554728001072, 0.05951176821867343, 0.09487063913897853, 0.08401680726164706, 0.09797635832497686, 0.07149350492542617, 0.08335994556671178, 0.11484748744278694, 0.08029960749781162, 0.0768985938624348, 0.08371615580266223, 0.08738391809883594, 0.07018227385028819, 0.08445662047118618, 0.08202031712462865, 0.07966613048377547, 0.06855336431246173, 0.07511706052040823, 0.08357926967956975, 0.09116681737842669, 0.8932943571946688, 0.9611673024951563, 0.940827499607492, 0.9215676376949696, 0.8844728283812562, 0.9399583745501207, 0.9528714247934301, 0.8841039289856905, 0.8999554893736673, 0.17425714852509333, 0.13607076579037058, 0.15621501640843072, 0.1563286013560402, 0.16337062056721385, 0.14538678394750582, 0.13467197091294425, 0.121696108533488, 0.1653801269340618, 0.24477886798566484, 0.20191603801521274, 0.2128958637183459, 0.3081573061332682, 0.203360360127525, 0.20660311894692285, 0.22858710086995393, 0.18685563048375553, 0.23277541186938122, 0.1564776649373889, 0.11698393605462365, 0.125307537688218, 0.13982175648895934, 0.14697109783515083, 0.1334631273550494, 0.1284287905310979, 0.09960055227704545, 0.13644188993187634, 0.13247873884300132, 0.16082561092734393, 0.19018424853448168, 0.13991879868908763, 0.15686736879999919, 0.16063983387467218, 0.17654166928671988, 0.14569772963652228, 0.1685948344171183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002123931002121604, 9.999999999998899e-05, 0.0013396710661434108, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05952899688644464, 0.015637272301696425, 0.06917200199117635, 0.055971399898886776, 0.0018805950676135108, 0.05796993341972412, 0.14323330871993445, 0.08252716306068375, 0.11734794191878462, 9.999999999998899e-05, 0.004144782761046351, 0.003307210612178979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08412854246375934, 0.07556175119733, 0.08563292887988083, 0.07029440066848225, 0.07005724261398572, 0.08768226519367162, 0.06141045175343529, 0.06013204403670103, 0.08049228508304673, 0.35550995911099736, 0.33813394827573573, 0.375254249305195, 0.34298772490418994, 0.3493697638005251, 0.364063935394184, 0.3812284369074611, 0.36136859935658294, 0.3604634690039876, 0.07615846033575058, 0.08321419013624509, 0.07676960585962334, 0.07099899566078693, 0.06956572988584919, 0.06384313199845038, 0.07514035771628857, 0.06511016332404196, 0.061407504631226795, 0.13276824813121624, 0.16499148912926198, 0.13097187261297494, 0.10935323312516465, 0.12778399727939482, 0.170427755415832, 0.11664801005870962, 0.12457312609309501, 0.12559258873137458, 0.24064063109051093, 0.2176989919910245, 0.20685500708655125, 0.2348131890881212, 0.1911303253052492, 0.23317657909376044, 0.20165080232588373, 0.18838422983362912, 0.2249170718101552, 0.17144245254953416, 0.16244922499842873, 0.14520486292756285, 0.1885323743145475, 0.1605317816932046, 0.15971358589290807, 0.1688633125522523, 0.12828662514464217, 0.14654647172713287, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.26094533846374046, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18773881902621503, 0.18365659355077268, 0.1828192228028266, 0.183709886775429, 0.18587804283006515, 0.18136019730251396, 0.17068781440967973, 0.1767378875025264, 0.1867546671459368, 0.1728929711382673, 0.27195451369532, 0.1761695240869814, 0.27316988023908284, 0.2846374903591796, 0.2509923584982984, 0.15034041993614333, 0.20698064959836615, 0.19077881751646708, 0.22881810861375018, 0.20825183167275607, 0.23139094399151705, 0.16054599300261485, 0.22272800137911886, 0.17115817856272264, 0.23470491815252048, 0.16611009093566242, 0.17062126933594468, 0.16189676939954367, 0.18061323215993652, 0.16541323942381492, 0.1712302315448464, 0.18645405531259607, 0.16513374111496726, 0.17284088800532937, 0.16939080247958394, 0.17287857456873512, 0.06249877399368309, 0.06049865213399608, 0.07207774199293149, 0.06625090619024199, 0.07546967453195397, 0.07384653821013776, 0.07157714053089625, 0.07542031452717324, 0.06773679930919929]}, "mutation_prompt": null}
{"id": "c8b639a6-1fa6-4689-a9b3-d27706b96e90", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v5:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha = budget, dim, 10, 0.5, 0.9\n        self.F, self.T, self.population = 0.5, 1.0, np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness, F_init = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim)), self.F\n\n        for _ in range(self.budget):\n            new_population, adapt_F = [], np.clip(F_init + 0.1 * np.random.randn(), 0.1, 0.9)\n            for target in self.population:\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                target = trial if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.11)  # Slight modification in temperature update\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v5", "description": "Enhanced DE-SA Metaheuristic algorithm with adaptive mutation factor for improved convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 51, "fitness": 0.2285317898173935, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "64733409-94fb-4682-b259-49a282b22dfa", "metadata": {"aucs": [0.7054103003326545, 0.7089525183661058, 0.7382094617560857, 0.6804100723372901, 0.7058879023507183, 0.6612553095954815, 0.7128272883864843, 0.7177393186149679, 0.6844126062475144, 0.31806559042378524, 0.31060326927068427, 0.3853813871525965, 0.35606827446016254, 0.38419187545904543, 0.42215030709131063, 0.4155643361585908, 0.42019225559366724, 0.39911871721470615, 0.1214334576642434, 0.12387930239946165, 0.11742718836215482, 0.14053551010796783, 0.1317366498645448, 0.14423100035769365, 0.12127253555541884, 0.11638232570043128, 0.11751181947929312, 0.10207793298613466, 0.11801761268649147, 0.09958303293545778, 0.09744089398432554, 0.0988189570503899, 0.10738440110090852, 0.10105541064794366, 0.10096718923103087, 0.11054584851941363, 0.9486248575790209, 0.9579966719002652, 0.9023457335074261, 0.9296163142524351, 0.9578561692582183, 0.9299623084968851, 0.9264424476536326, 0.949622342644598, 0.9503664831455829, 0.29871596914804255, 0.24149156401364025, 0.25854958577819964, 0.25302930391744693, 0.3391259043797433, 0.2767371156712487, 0.24058724321970681, 0.2714653599322252, 0.21732459351044153, 0.2654510587134826, 0.29073770034208746, 0.2209339046905232, 0.31878045468844884, 0.26450096402674994, 0.2718277724452859, 0.2979078251835775, 0.2599835375714352, 0.2702061865921418, 0.15675684006218038, 0.12006027499906036, 0.14463317314336654, 0.21572984820600538, 0.12555673477180884, 0.1516880006243153, 0.10869642035116411, 0.13205001813652106, 0.17817206856030365, 0.15325684035052067, 0.16943064411963804, 0.1741336320695125, 0.12624565271483568, 0.1591679169157202, 0.1436500453052253, 0.15147237710125538, 0.1450516283176594, 0.1846129904368058, 0.006066908937811921, 0.0014975710508504658, 0.0004779437075427273, 0.0223612612763201, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005315427012603235, 0.007836431328669069, 9.999999999998899e-05, 0.07679004020619395, 0.05161369590969911, 0.08629297943788883, 0.0804469732249965, 0.057726639531692436, 0.09119098848083651, 0.09949673066920672, 0.06509898223083765, 0.07704826699994682, 9.999999999998899e-05, 0.05290105991858507, 0.048916857608854336, 9.999999999998899e-05, 0.0002066358412199376, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009387176841966216, 9.999999999998899e-05, 0.09325897997380472, 0.1130026382873126, 0.11996065584567206, 0.12438317666674226, 0.11951940366984704, 0.11648326226103567, 0.10313913579639844, 0.09951997269946644, 0.08427646928351018, 0.5025833921388181, 0.44871344001511826, 0.4506802097361784, 0.43498757763056206, 0.4433041210289691, 0.44939295048920513, 0.48368186382554357, 0.4673364738423347, 0.44675623049140867, 0.09045435928682677, 0.0646509505927797, 0.07066059748651443, 0.08720125373575904, 0.08134324049402308, 0.08828654300322847, 0.07984496974420308, 0.08013268880992419, 0.10593528570362865, 0.1413485312659727, 0.13698890783540174, 0.14491148186414649, 0.12161282177407517, 0.13227853418679603, 0.12335463693072946, 0.12144460192743645, 0.13226094577375858, 0.11944440089311936, 0.18496569220389403, 0.22913699674631316, 0.21786622058887262, 0.22563759651465443, 0.23485112360397864, 0.22856847690337967, 0.21852652245563553, 0.25124376223360667, 0.20209653536253636, 0.1514323284993948, 0.1978537238355218, 0.16659931869363775, 0.1648990668932343, 0.18431228919907694, 0.16219356779490823, 0.13150186496559313, 0.1418804877020673, 0.15419440716872146, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.188743044932143, 0.1902810251342889, 0.19033176637890437, 0.20300396567750212, 0.20152581042488915, 0.20151613668793, 0.1916417888363282, 0.18461508479940636, 0.19331234597688207, 0.24331072040794566, 0.17600045777977724, 0.17255217798610734, 0.40808122383667056, 0.16621620413857086, 0.18527868540310333, 0.2901397842294686, 0.13611766742200182, 0.15436438754672177, 0.28160413922029814, 0.15427380179033057, 0.2529246232923812, 0.16325242728472045, 0.18209945098174862, 0.14988302798673725, 0.29237521419242374, 0.2848976665269911, 0.24656795938373, 0.16608523656172824, 0.1805428303290597, 0.17887022025291077, 0.17465906771862882, 0.15648915959230258, 0.18077355716996624, 0.17490227549441917, 0.17490263559741126, 0.17840114095617987, 0.068845359547278, 0.06501396273702209, 0.07006202388343374, 0.08066362332520072, 0.06381316207422882, 0.07443863392687966, 0.06845608568309092, 0.06645683939706815, 0.06621297737133192]}, "mutation_prompt": null}
{"id": "443f2782-b334-40c5-a48f-a0a9f8730668", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v4:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha = budget, dim, 10, 0.5, 0.9\n        self.F, self.T, self.population = 0.5, 1.0, np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness, F_init = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim)), self.F\n\n        for _ in range(self.budget):\n            new_population, adapt_F = [], np.clip(F_init + 0.1 * np.random.randn(), 0.1, 0.9)\n            for target in self.population:\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                target = trial if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v4", "description": "Optimized Enhanced DE_SA_Metaheuristic algorithm with improved efficiency in random value generation and convergence speed.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64733409-94fb-4682-b259-49a282b22dfa", "metadata": {"aucs": [0.7054103003326545, 0.7089525183661058, 0.7382094617560857, 0.6804100723372901, 0.7058879023507183, 0.6612553095954815, 0.7128272883864843, 0.7177393186149679, 0.6844126062475144, 0.31806559042378524, 0.31060326927068427, 0.3853813871525965, 0.35606827446016254, 0.38419187545904543, 0.42215030709131063, 0.4155643361585908, 0.42019225559366724, 0.39911871721470615, 0.1214334576642434, 0.12387930239946165, 0.11742718836215482, 0.14053551010796783, 0.1317366498645448, 0.14423100035769365, 0.12127253555541884, 0.11638232570043128, 0.11751181947929312, 0.10207793298613466, 0.11801761268649147, 0.09958303293545778, 0.09744089398432554, 0.0988189570503899, 0.10738440110090852, 0.10105541064794366, 0.10096718923103087, 0.11054584851941363, 0.9486248575790209, 0.9579966719002652, 0.9023457335074261, 0.9296163142524351, 0.9578561692582183, 0.9299623084968851, 0.9264424476536326, 0.949622342644598, 0.9503664831455829, 0.29871596914804255, 0.24149156401364025, 0.25854958577819964, 0.25302930391744693, 0.3391259043797433, 0.2767371156712487, 0.24058724321970681, 0.2714653599322252, 0.21732459351044153, 0.2654510587134826, 0.29073770034208746, 0.2209339046905232, 0.31878045468844884, 0.26450096402674994, 0.2718277724452859, 0.2979078251835775, 0.2599835375714352, 0.2702061865921418, 0.15675684006218038, 0.12006027499906036, 0.14463317314336654, 0.21572984820600538, 0.12555673477180884, 0.1516880006243153, 0.10869642035116411, 0.13205001813652106, 0.17817206856030365, 0.15325684035052067, 0.16943064411963804, 0.1741336320695125, 0.12624565271483568, 0.1591679169157202, 0.1436500453052253, 0.15147237710125538, 0.1450516283176594, 0.1846129904368058, 0.006066908937811921, 0.0014975710508504658, 0.0004779437075427273, 0.0223612612763201, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005315427012603235, 0.007836431328669069, 9.999999999998899e-05, 0.07679004020619395, 0.05161369590969911, 0.08629297943788883, 0.0804469732249965, 0.057726639531692436, 0.09119098848083651, 0.09949673066920672, 0.06509898223083765, 0.07704826699994682, 9.999999999998899e-05, 0.05290105991858507, 0.048916857608854336, 9.999999999998899e-05, 0.0002066358412199376, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009387176841966216, 9.999999999998899e-05, 0.09325897997380472, 0.1130026382873126, 0.11996065584567206, 0.12438317666674226, 0.11951940366984704, 0.11648326226103567, 0.10313913579639844, 0.09951997269946644, 0.08427646928351018, 0.5025833921388181, 0.44871344001511826, 0.4506802097361784, 0.43498757763056206, 0.4433041210289691, 0.44939295048920513, 0.48368186382554357, 0.4673364738423347, 0.44675623049140867, 0.09045435928682677, 0.0646509505927797, 0.07066059748651443, 0.08720125373575904, 0.08134324049402308, 0.08828654300322847, 0.07984496974420308, 0.08013268880992419, 0.10593528570362865, 0.1413485312659727, 0.13698890783540174, 0.14491148186414649, 0.12161282177407517, 0.13227853418679603, 0.12335463693072946, 0.12144460192743645, 0.13226094577375858, 0.11944440089311936, 0.18496569220389403, 0.22913699674631316, 0.21786622058887262, 0.22563759651465443, 0.23485112360397864, 0.22856847690337967, 0.21852652245563553, 0.25124376223360667, 0.20209653536253636, 0.1514323284993948, 0.1978537238355218, 0.16659931869363775, 0.1648990668932343, 0.18431228919907694, 0.16219356779490823, 0.13150186496559313, 0.1418804877020673, 0.15419440716872146, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.188743044932143, 0.1902810251342889, 0.19033176637890437, 0.20300396567750212, 0.20152581042488915, 0.20151613668793, 0.1916417888363282, 0.18461508479940636, 0.19331234597688207, 0.24331072040794566, 0.17600045777977724, 0.17255217798610734, 0.40808122383667056, 0.16621620413857086, 0.18527868540310333, 0.2901397842294686, 0.13611766742200182, 0.15436438754672177, 0.28160413922029814, 0.15427380179033057, 0.2529246232923812, 0.16325242728472045, 0.18209945098174862, 0.14988302798673725, 0.29237521419242374, 0.2848976665269911, 0.24656795938373, 0.16608523656172824, 0.1805428303290597, 0.17887022025291077, 0.17465906771862882, 0.15648915959230258, 0.18077355716996624, 0.17490227549441917, 0.17490263559741126, 0.17840114095617987, 0.068845359547278, 0.06501396273702209, 0.07006202388343374, 0.08066362332520072, 0.06381316207422882, 0.07443863392687966, 0.06845608568309092, 0.06645683939706815, 0.06621297737133192]}, "mutation_prompt": null}
{"id": "19051096-dc88-4982-b296-2ab9f75c533c", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v4:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha = budget, dim, 10, 0.5, 0.9\n        self.F, self.T, self.population = 0.5, 1.0, np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness, F_init = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim)), self.F\n\n        for _ in range(self.budget):\n            new_population, adapt_F = [], np.clip(F_init + 0.1 * np.random.randn(), 0.1, 0.9)\n            for target in self.population:\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                target = trial if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v4", "description": "Optimized Enhanced DE_SA_Metaheuristic algorithm with improved efficiency in random value generation and convergence speed.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64733409-94fb-4682-b259-49a282b22dfa", "metadata": {"aucs": [0.7054103003326545, 0.7089525183661058, 0.7382094617560857, 0.6804100723372901, 0.7058879023507183, 0.6612553095954815, 0.7128272883864843, 0.7177393186149679, 0.6844126062475144, 0.31806559042378524, 0.31060326927068427, 0.3853813871525965, 0.35606827446016254, 0.38419187545904543, 0.42215030709131063, 0.4155643361585908, 0.42019225559366724, 0.39911871721470615, 0.1214334576642434, 0.12387930239946165, 0.11742718836215482, 0.14053551010796783, 0.1317366498645448, 0.14423100035769365, 0.12127253555541884, 0.11638232570043128, 0.11751181947929312, 0.10207793298613466, 0.11801761268649147, 0.09958303293545778, 0.09744089398432554, 0.0988189570503899, 0.10738440110090852, 0.10105541064794366, 0.10096718923103087, 0.11054584851941363, 0.9486248575790209, 0.9579966719002652, 0.9023457335074261, 0.9296163142524351, 0.9578561692582183, 0.9299623084968851, 0.9264424476536326, 0.949622342644598, 0.9503664831455829, 0.29871596914804255, 0.24149156401364025, 0.25854958577819964, 0.25302930391744693, 0.3391259043797433, 0.2767371156712487, 0.24058724321970681, 0.2714653599322252, 0.21732459351044153, 0.2654510587134826, 0.29073770034208746, 0.2209339046905232, 0.31878045468844884, 0.26450096402674994, 0.2718277724452859, 0.2979078251835775, 0.2599835375714352, 0.2702061865921418, 0.15675684006218038, 0.12006027499906036, 0.14463317314336654, 0.21572984820600538, 0.12555673477180884, 0.1516880006243153, 0.10869642035116411, 0.13205001813652106, 0.17817206856030365, 0.15325684035052067, 0.16943064411963804, 0.1741336320695125, 0.12624565271483568, 0.1591679169157202, 0.1436500453052253, 0.15147237710125538, 0.1450516283176594, 0.1846129904368058, 0.006066908937811921, 0.0014975710508504658, 0.0004779437075427273, 0.0223612612763201, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005315427012603235, 0.007836431328669069, 9.999999999998899e-05, 0.07679004020619395, 0.05161369590969911, 0.08629297943788883, 0.0804469732249965, 0.057726639531692436, 0.09119098848083651, 0.09949673066920672, 0.06509898223083765, 0.07704826699994682, 9.999999999998899e-05, 0.05290105991858507, 0.048916857608854336, 9.999999999998899e-05, 0.0002066358412199376, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009387176841966216, 9.999999999998899e-05, 0.09325897997380472, 0.1130026382873126, 0.11996065584567206, 0.12438317666674226, 0.11951940366984704, 0.11648326226103567, 0.10313913579639844, 0.09951997269946644, 0.08427646928351018, 0.5025833921388181, 0.44871344001511826, 0.4506802097361784, 0.43498757763056206, 0.4433041210289691, 0.44939295048920513, 0.48368186382554357, 0.4673364738423347, 0.44675623049140867, 0.09045435928682677, 0.0646509505927797, 0.07066059748651443, 0.08720125373575904, 0.08134324049402308, 0.08828654300322847, 0.07984496974420308, 0.08013268880992419, 0.10593528570362865, 0.1413485312659727, 0.13698890783540174, 0.14491148186414649, 0.12161282177407517, 0.13227853418679603, 0.12335463693072946, 0.12144460192743645, 0.13226094577375858, 0.11944440089311936, 0.18496569220389403, 0.22913699674631316, 0.21786622058887262, 0.22563759651465443, 0.23485112360397864, 0.22856847690337967, 0.21852652245563553, 0.25124376223360667, 0.20209653536253636, 0.1514323284993948, 0.1978537238355218, 0.16659931869363775, 0.1648990668932343, 0.18431228919907694, 0.16219356779490823, 0.13150186496559313, 0.1418804877020673, 0.15419440716872146, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.188743044932143, 0.1902810251342889, 0.19033176637890437, 0.20300396567750212, 0.20152581042488915, 0.20151613668793, 0.1916417888363282, 0.18461508479940636, 0.19331234597688207, 0.24331072040794566, 0.17600045777977724, 0.17255217798610734, 0.40808122383667056, 0.16621620413857086, 0.18527868540310333, 0.2901397842294686, 0.13611766742200182, 0.15436438754672177, 0.28160413922029814, 0.15427380179033057, 0.2529246232923812, 0.16325242728472045, 0.18209945098174862, 0.14988302798673725, 0.29237521419242374, 0.2848976665269911, 0.24656795938373, 0.16608523656172824, 0.1805428303290597, 0.17887022025291077, 0.17465906771862882, 0.15648915959230258, 0.18077355716996624, 0.17490227549441917, 0.17490263559741126, 0.17840114095617987, 0.068845359547278, 0.06501396273702209, 0.07006202388343374, 0.08066362332520072, 0.06381316207422882, 0.07443863392687966, 0.06845608568309092, 0.06645683939706815, 0.06621297737133192]}, "mutation_prompt": null}
{"id": "fd34ea45-8cf0-45a1-98f6-f623207f566e", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v4:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha = budget, dim, 10, 0.5, 0.9\n        self.F, self.T, self.population = 0.5, 1.0, np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness, F_init = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim)), self.F\n\n        for _ in range(self.budget):\n            new_population, adapt_F = [], np.clip(F_init + 0.1 * np.random.randn(), 0.1, 0.9)\n            for target in self.population:\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                target = trial if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v4", "description": "Optimized Enhanced DE_SA_Metaheuristic algorithm with improved efficiency in random value generation and convergence speed.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64733409-94fb-4682-b259-49a282b22dfa", "metadata": {"aucs": [0.7054103003326545, 0.7089525183661058, 0.7382094617560857, 0.6804100723372901, 0.7058879023507183, 0.6612553095954815, 0.7128272883864843, 0.7177393186149679, 0.6844126062475144, 0.31806559042378524, 0.31060326927068427, 0.3853813871525965, 0.35606827446016254, 0.38419187545904543, 0.42215030709131063, 0.4155643361585908, 0.42019225559366724, 0.39911871721470615, 0.1214334576642434, 0.12387930239946165, 0.11742718836215482, 0.14053551010796783, 0.1317366498645448, 0.14423100035769365, 0.12127253555541884, 0.11638232570043128, 0.11751181947929312, 0.10207793298613466, 0.11801761268649147, 0.09958303293545778, 0.09744089398432554, 0.0988189570503899, 0.10738440110090852, 0.10105541064794366, 0.10096718923103087, 0.11054584851941363, 0.9486248575790209, 0.9579966719002652, 0.9023457335074261, 0.9296163142524351, 0.9578561692582183, 0.9299623084968851, 0.9264424476536326, 0.949622342644598, 0.9503664831455829, 0.29871596914804255, 0.24149156401364025, 0.25854958577819964, 0.25302930391744693, 0.3391259043797433, 0.2767371156712487, 0.24058724321970681, 0.2714653599322252, 0.21732459351044153, 0.2654510587134826, 0.29073770034208746, 0.2209339046905232, 0.31878045468844884, 0.26450096402674994, 0.2718277724452859, 0.2979078251835775, 0.2599835375714352, 0.2702061865921418, 0.15675684006218038, 0.12006027499906036, 0.14463317314336654, 0.21572984820600538, 0.12555673477180884, 0.1516880006243153, 0.10869642035116411, 0.13205001813652106, 0.17817206856030365, 0.15325684035052067, 0.16943064411963804, 0.1741336320695125, 0.12624565271483568, 0.1591679169157202, 0.1436500453052253, 0.15147237710125538, 0.1450516283176594, 0.1846129904368058, 0.006066908937811921, 0.0014975710508504658, 0.0004779437075427273, 0.0223612612763201, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005315427012603235, 0.007836431328669069, 9.999999999998899e-05, 0.07679004020619395, 0.05161369590969911, 0.08629297943788883, 0.0804469732249965, 0.057726639531692436, 0.09119098848083651, 0.09949673066920672, 0.06509898223083765, 0.07704826699994682, 9.999999999998899e-05, 0.05290105991858507, 0.048916857608854336, 9.999999999998899e-05, 0.0002066358412199376, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009387176841966216, 9.999999999998899e-05, 0.09325897997380472, 0.1130026382873126, 0.11996065584567206, 0.12438317666674226, 0.11951940366984704, 0.11648326226103567, 0.10313913579639844, 0.09951997269946644, 0.08427646928351018, 0.5025833921388181, 0.44871344001511826, 0.4506802097361784, 0.43498757763056206, 0.4433041210289691, 0.44939295048920513, 0.48368186382554357, 0.4673364738423347, 0.44675623049140867, 0.09045435928682677, 0.0646509505927797, 0.07066059748651443, 0.08720125373575904, 0.08134324049402308, 0.08828654300322847, 0.07984496974420308, 0.08013268880992419, 0.10593528570362865, 0.1413485312659727, 0.13698890783540174, 0.14491148186414649, 0.12161282177407517, 0.13227853418679603, 0.12335463693072946, 0.12144460192743645, 0.13226094577375858, 0.11944440089311936, 0.18496569220389403, 0.22913699674631316, 0.21786622058887262, 0.22563759651465443, 0.23485112360397864, 0.22856847690337967, 0.21852652245563553, 0.25124376223360667, 0.20209653536253636, 0.1514323284993948, 0.1978537238355218, 0.16659931869363775, 0.1648990668932343, 0.18431228919907694, 0.16219356779490823, 0.13150186496559313, 0.1418804877020673, 0.15419440716872146, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.188743044932143, 0.1902810251342889, 0.19033176637890437, 0.20300396567750212, 0.20152581042488915, 0.20151613668793, 0.1916417888363282, 0.18461508479940636, 0.19331234597688207, 0.24331072040794566, 0.17600045777977724, 0.17255217798610734, 0.40808122383667056, 0.16621620413857086, 0.18527868540310333, 0.2901397842294686, 0.13611766742200182, 0.15436438754672177, 0.28160413922029814, 0.15427380179033057, 0.2529246232923812, 0.16325242728472045, 0.18209945098174862, 0.14988302798673725, 0.29237521419242374, 0.2848976665269911, 0.24656795938373, 0.16608523656172824, 0.1805428303290597, 0.17887022025291077, 0.17465906771862882, 0.15648915959230258, 0.18077355716996624, 0.17490227549441917, 0.17490263559741126, 0.17840114095617987, 0.068845359547278, 0.06501396273702209, 0.07006202388343374, 0.08066362332520072, 0.06381316207422882, 0.07443863392687966, 0.06845608568309092, 0.06645683939706815, 0.06621297737133192]}, "mutation_prompt": null}
{"id": "aa8128d1-a079-4e6e-87bd-e21dfff1e97a", "solution": "import numpy as np\n\nclass Adaptive_DE_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha = budget, dim, 10, 0.5, 0.9\n        self.F, self.T, self.population = 0.5, 1.0, np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness, F_init = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim)), self.F\n\n        for _ in range(self.budget):\n            new_population = []\n            adapt_F = np.clip(F_init + 0.1 * np.random.randn(), 0.1, 0.9)\n            for target in self.population:\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Adaptive_DE_SA_Metaheuristic", "description": "Enhanced DE_SA_Metaheuristic algorithm with adaptive control parameters for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": 0.2285317898173935, "feedback": "The algorithm Adaptive_DE_SA_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "64733409-94fb-4682-b259-49a282b22dfa", "metadata": {"aucs": [0.7054103003326545, 0.7089525183661058, 0.7382094617560857, 0.6804100723372901, 0.7058879023507183, 0.6612553095954815, 0.7128272883864843, 0.7177393186149679, 0.6844126062475144, 0.31806559042378524, 0.31060326927068427, 0.3853813871525965, 0.35606827446016254, 0.38419187545904543, 0.42215030709131063, 0.4155643361585908, 0.42019225559366724, 0.39911871721470615, 0.1214334576642434, 0.12387930239946165, 0.11742718836215482, 0.14053551010796783, 0.1317366498645448, 0.14423100035769365, 0.12127253555541884, 0.11638232570043128, 0.11751181947929312, 0.10207793298613466, 0.11801761268649147, 0.09958303293545778, 0.09744089398432554, 0.0988189570503899, 0.10738440110090852, 0.10105541064794366, 0.10096718923103087, 0.11054584851941363, 0.9486248575790209, 0.9579966719002652, 0.9023457335074261, 0.9296163142524351, 0.9578561692582183, 0.9299623084968851, 0.9264424476536326, 0.949622342644598, 0.9503664831455829, 0.29871596914804255, 0.24149156401364025, 0.25854958577819964, 0.25302930391744693, 0.3391259043797433, 0.2767371156712487, 0.24058724321970681, 0.2714653599322252, 0.21732459351044153, 0.2654510587134826, 0.29073770034208746, 0.2209339046905232, 0.31878045468844884, 0.26450096402674994, 0.2718277724452859, 0.2979078251835775, 0.2599835375714352, 0.2702061865921418, 0.15675684006218038, 0.12006027499906036, 0.14463317314336654, 0.21572984820600538, 0.12555673477180884, 0.1516880006243153, 0.10869642035116411, 0.13205001813652106, 0.17817206856030365, 0.15325684035052067, 0.16943064411963804, 0.1741336320695125, 0.12624565271483568, 0.1591679169157202, 0.1436500453052253, 0.15147237710125538, 0.1450516283176594, 0.1846129904368058, 0.006066908937811921, 0.0014975710508504658, 0.0004779437075427273, 0.0223612612763201, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005315427012603235, 0.007836431328669069, 9.999999999998899e-05, 0.07679004020619395, 0.05161369590969911, 0.08629297943788883, 0.0804469732249965, 0.057726639531692436, 0.09119098848083651, 0.09949673066920672, 0.06509898223083765, 0.07704826699994682, 9.999999999998899e-05, 0.05290105991858507, 0.048916857608854336, 9.999999999998899e-05, 0.0002066358412199376, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009387176841966216, 9.999999999998899e-05, 0.09325897997380472, 0.1130026382873126, 0.11996065584567206, 0.12438317666674226, 0.11951940366984704, 0.11648326226103567, 0.10313913579639844, 0.09951997269946644, 0.08427646928351018, 0.5025833921388181, 0.44871344001511826, 0.4506802097361784, 0.43498757763056206, 0.4433041210289691, 0.44939295048920513, 0.48368186382554357, 0.4673364738423347, 0.44675623049140867, 0.09045435928682677, 0.0646509505927797, 0.07066059748651443, 0.08720125373575904, 0.08134324049402308, 0.08828654300322847, 0.07984496974420308, 0.08013268880992419, 0.10593528570362865, 0.1413485312659727, 0.13698890783540174, 0.14491148186414649, 0.12161282177407517, 0.13227853418679603, 0.12335463693072946, 0.12144460192743645, 0.13226094577375858, 0.11944440089311936, 0.18496569220389403, 0.22913699674631316, 0.21786622058887262, 0.22563759651465443, 0.23485112360397864, 0.22856847690337967, 0.21852652245563553, 0.25124376223360667, 0.20209653536253636, 0.1514323284993948, 0.1978537238355218, 0.16659931869363775, 0.1648990668932343, 0.18431228919907694, 0.16219356779490823, 0.13150186496559313, 0.1418804877020673, 0.15419440716872146, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.188743044932143, 0.1902810251342889, 0.19033176637890437, 0.20300396567750212, 0.20152581042488915, 0.20151613668793, 0.1916417888363282, 0.18461508479940636, 0.19331234597688207, 0.24331072040794566, 0.17600045777977724, 0.17255217798610734, 0.40808122383667056, 0.16621620413857086, 0.18527868540310333, 0.2901397842294686, 0.13611766742200182, 0.15436438754672177, 0.28160413922029814, 0.15427380179033057, 0.2529246232923812, 0.16325242728472045, 0.18209945098174862, 0.14988302798673725, 0.29237521419242374, 0.2848976665269911, 0.24656795938373, 0.16608523656172824, 0.1805428303290597, 0.17887022025291077, 0.17465906771862882, 0.15648915959230258, 0.18077355716996624, 0.17490227549441917, 0.17490263559741126, 0.17840114095617987, 0.068845359547278, 0.06501396273702209, 0.07006202388343374, 0.08066362332520072, 0.06381316207422882, 0.07443863392687966, 0.06845608568309092, 0.06645683939706815, 0.06621297737133192]}, "mutation_prompt": null}
{"id": "e5a98af3-ca16-4fff-8dc4-f64da0a4fee2", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v4:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha = budget, dim, 10, 0.5, 0.9\n        self.F, self.T, self.population = 0.5, 1.0, np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness, F_init = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim)), self.F\n\n        for _ in range(self.budget):\n            new_population, adapt_F = [], np.clip(F_init + 0.1 * np.random.randn(), 0.1, 0.9)\n            for target in self.population:\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                target = trial if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand() else target\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v4", "description": "Optimized Enhanced DE_SA_Metaheuristic algorithm with improved efficiency in random value generation and convergence speed.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64733409-94fb-4682-b259-49a282b22dfa", "metadata": {"aucs": [0.7054103003326545, 0.7089525183661058, 0.7382094617560857, 0.6804100723372901, 0.7058879023507183, 0.6612553095954815, 0.7128272883864843, 0.7177393186149679, 0.6844126062475144, 0.31806559042378524, 0.31060326927068427, 0.3853813871525965, 0.35606827446016254, 0.38419187545904543, 0.42215030709131063, 0.4155643361585908, 0.42019225559366724, 0.39911871721470615, 0.1214334576642434, 0.12387930239946165, 0.11742718836215482, 0.14053551010796783, 0.1317366498645448, 0.14423100035769365, 0.12127253555541884, 0.11638232570043128, 0.11751181947929312, 0.10207793298613466, 0.11801761268649147, 0.09958303293545778, 0.09744089398432554, 0.0988189570503899, 0.10738440110090852, 0.10105541064794366, 0.10096718923103087, 0.11054584851941363, 0.9486248575790209, 0.9579966719002652, 0.9023457335074261, 0.9296163142524351, 0.9578561692582183, 0.9299623084968851, 0.9264424476536326, 0.949622342644598, 0.9503664831455829, 0.29871596914804255, 0.24149156401364025, 0.25854958577819964, 0.25302930391744693, 0.3391259043797433, 0.2767371156712487, 0.24058724321970681, 0.2714653599322252, 0.21732459351044153, 0.2654510587134826, 0.29073770034208746, 0.2209339046905232, 0.31878045468844884, 0.26450096402674994, 0.2718277724452859, 0.2979078251835775, 0.2599835375714352, 0.2702061865921418, 0.15675684006218038, 0.12006027499906036, 0.14463317314336654, 0.21572984820600538, 0.12555673477180884, 0.1516880006243153, 0.10869642035116411, 0.13205001813652106, 0.17817206856030365, 0.15325684035052067, 0.16943064411963804, 0.1741336320695125, 0.12624565271483568, 0.1591679169157202, 0.1436500453052253, 0.15147237710125538, 0.1450516283176594, 0.1846129904368058, 0.006066908937811921, 0.0014975710508504658, 0.0004779437075427273, 0.0223612612763201, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005315427012603235, 0.007836431328669069, 9.999999999998899e-05, 0.07679004020619395, 0.05161369590969911, 0.08629297943788883, 0.0804469732249965, 0.057726639531692436, 0.09119098848083651, 0.09949673066920672, 0.06509898223083765, 0.07704826699994682, 9.999999999998899e-05, 0.05290105991858507, 0.048916857608854336, 9.999999999998899e-05, 0.0002066358412199376, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009387176841966216, 9.999999999998899e-05, 0.09325897997380472, 0.1130026382873126, 0.11996065584567206, 0.12438317666674226, 0.11951940366984704, 0.11648326226103567, 0.10313913579639844, 0.09951997269946644, 0.08427646928351018, 0.5025833921388181, 0.44871344001511826, 0.4506802097361784, 0.43498757763056206, 0.4433041210289691, 0.44939295048920513, 0.48368186382554357, 0.4673364738423347, 0.44675623049140867, 0.09045435928682677, 0.0646509505927797, 0.07066059748651443, 0.08720125373575904, 0.08134324049402308, 0.08828654300322847, 0.07984496974420308, 0.08013268880992419, 0.10593528570362865, 0.1413485312659727, 0.13698890783540174, 0.14491148186414649, 0.12161282177407517, 0.13227853418679603, 0.12335463693072946, 0.12144460192743645, 0.13226094577375858, 0.11944440089311936, 0.18496569220389403, 0.22913699674631316, 0.21786622058887262, 0.22563759651465443, 0.23485112360397864, 0.22856847690337967, 0.21852652245563553, 0.25124376223360667, 0.20209653536253636, 0.1514323284993948, 0.1978537238355218, 0.16659931869363775, 0.1648990668932343, 0.18431228919907694, 0.16219356779490823, 0.13150186496559313, 0.1418804877020673, 0.15419440716872146, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.188743044932143, 0.1902810251342889, 0.19033176637890437, 0.20300396567750212, 0.20152581042488915, 0.20151613668793, 0.1916417888363282, 0.18461508479940636, 0.19331234597688207, 0.24331072040794566, 0.17600045777977724, 0.17255217798610734, 0.40808122383667056, 0.16621620413857086, 0.18527868540310333, 0.2901397842294686, 0.13611766742200182, 0.15436438754672177, 0.28160413922029814, 0.15427380179033057, 0.2529246232923812, 0.16325242728472045, 0.18209945098174862, 0.14988302798673725, 0.29237521419242374, 0.2848976665269911, 0.24656795938373, 0.16608523656172824, 0.1805428303290597, 0.17887022025291077, 0.17465906771862882, 0.15648915959230258, 0.18077355716996624, 0.17490227549441917, 0.17490263559741126, 0.17840114095617987, 0.068845359547278, 0.06501396273702209, 0.07006202388343374, 0.08066362332520072, 0.06381316207422882, 0.07443863392687966, 0.06845608568309092, 0.06645683939706815, 0.06621297737133192]}, "mutation_prompt": null}
{"id": "15c87b63-6ebe-47b5-b5af-625902d7ce41", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v5:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha = budget, dim, 10, 0.5, 0.9\n        self.F, self.T, self.population = 0.5, 1.0, np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness, F_init = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim)), self.F\n\n        for _ in range(self.budget):\n            new_population, adapt_F = [], np.clip(F_init + 0.1 * np.random.randn(), 0.1, 0.9)\n            for target in self.population:\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                target = np.where(new_fitness < func(target) | (np.exp((func(target) - new_fitness) / self.T) > np.random.rand()), trial, target)\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v5", "description": "Enhanced DE_SA_Metaheuristic algorithm with improved adaptive differential variation and temperature decay mechanism for enhanced optimization performance.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('NumPy boolean array indexing assignment cannot assign 5 input values to the 1 output values where the mask is true').", "error": "ValueError('NumPy boolean array indexing assignment cannot assign 5 input values to the 1 output values where the mask is true')", "parent_id": "64733409-94fb-4682-b259-49a282b22dfa", "metadata": {}, "mutation_prompt": null}
{"id": "6ecab2b8-53c7-40c1-ae9a-f95179fdbc5e", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v5:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v5", "description": "Enhanced DE_SA_Metaheuristic_v5 with optimized data structure and simplified control flow for improved performance.", "configspace": "", "generation": 58, "fitness": 0.2319710211784657, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "64733409-94fb-4682-b259-49a282b22dfa", "metadata": {"aucs": [0.7431238536370666, 0.6765735613018127, 0.7421386802790263, 0.6818018442277356, 0.6715063419023697, 0.7049938940854842, 0.696818023754699, 0.6921078888273136, 0.6907459252587025, 0.34674594074693, 0.30613598832765, 0.3497117556422905, 0.4317206238643475, 0.3949142460158318, 0.42941145802662584, 0.44890685052860746, 0.4271515771033373, 0.3939289830600914, 0.12180566237214485, 0.1719219173418547, 0.12515996475403957, 0.13150991193649442, 0.14269397079477475, 0.11060353052514726, 0.137983199632986, 0.15354623557266, 0.13268651089750927, 0.11927803008375137, 0.09757852156049451, 0.11069320810821959, 0.11215023700676974, 0.10945868429782846, 0.09063192366914741, 0.09923465630512107, 0.10492420291057203, 0.16439020499691892, 0.9510582220131697, 0.9645298584344608, 0.9305967222885216, 0.9383502896178901, 0.9692143253739258, 0.9637117675236316, 0.9380978175715147, 0.9571235012153888, 0.9332708110046919, 0.2740095068955749, 0.2824892145753466, 0.25991918574129924, 0.28404221796059037, 0.25869280237217995, 0.33381759066863037, 0.27786467310395335, 0.2524993418854785, 0.2624005598357291, 0.25513626028785197, 0.27355107244708443, 0.21046825704796956, 0.23956676394866416, 0.26882690623847816, 0.28538087386714295, 0.39213683120097953, 0.2742930358628606, 0.28395861587267246, 0.12301153428642975, 0.1625594203671763, 0.12683102110270905, 0.13326394355752835, 0.17303786463606707, 0.14505077398887278, 0.18552027865229248, 0.16541222114017962, 0.1820438348467074, 0.17714153381743836, 0.15573852417590406, 0.13839505505720684, 0.19923290397841542, 0.17867469510813205, 0.16513923873422975, 0.1821366550709741, 0.17715455729527096, 0.1629772915876272, 9.999999999998899e-05, 0.008912937535787036, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013877735231911936, 9.999999999998899e-05, 0.011797916839868083, 9.999999999998899e-05, 0.023029290394811275, 0.042966276306031226, 0.05098086421408565, 0.07198325864641741, 0.035083877720520684, 0.07240070722995173, 0.08725255064778903, 0.20336199705242597, 0.12985357735271807, 0.12249372104673695, 0.0027740660935396955, 0.019576087885783244, 0.036025963749081735, 0.0025722949575592846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01930524308608761, 0.09675268886330923, 0.11158714829081018, 0.11089551600718173, 0.12286613773998156, 0.1214069637649351, 0.13184530343212497, 0.07218817836803171, 0.08786757157362024, 0.10398367573248202, 0.47439820285064993, 0.46102960129848713, 0.44864228891008584, 0.4318170426155997, 0.42526561240492533, 0.45189300494146467, 0.4745132446403997, 0.48574039313218964, 0.48210874754660205, 0.072992343230603, 0.080404711723422, 0.0813094781515985, 0.07440579287503679, 0.08621478832692442, 0.07490437212943557, 0.07914840433535031, 0.09006270993107357, 0.07946636677376206, 0.11610394227595966, 0.12871849592105267, 0.1306778937003904, 0.14532287344707207, 0.1789174612880462, 0.13758613747133264, 0.1507659610491986, 0.17912390499685427, 0.19161330950276156, 0.23101874394345656, 0.18739658591123876, 0.21583092311382834, 0.2576978463557935, 0.21566243942767271, 0.25368707607845253, 0.22687194080021789, 0.2244066543198655, 0.18102277349276474, 0.1860396324125979, 0.15844526462292563, 0.12462574921608283, 0.1413649697909779, 0.19839500954402878, 0.1806575917847485, 0.16714614838524722, 0.14858336682049467, 0.17141574502764056, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18546278397680893, 0.19098760257237568, 0.19316695851745602, 0.19031898069112763, 0.18969580136889763, 0.19578942841060476, 0.19523943074478722, 0.20745177038330298, 0.19284650720648422, 0.17128658989549406, 0.14179147537607062, 0.2708279312729792, 0.21800685594572566, 0.26665633018795487, 0.15784203129982088, 0.2957165898330225, 0.17145377228694847, 0.16215350823843933, 0.2753008857096666, 0.24667633607410444, 0.2330133822559879, 0.18567144430557547, 0.17915600959577715, 0.1754882154434968, 0.17984806130384057, 0.22105890521517557, 0.1483835866561798, 0.1766819815476781, 0.17200762034335237, 0.18052622099325033, 0.1745121223742171, 0.17964254952024872, 0.17388669516941224, 0.20337233062376914, 0.17343431427322298, 0.17146113004880448, 0.06523525584291823, 0.08727755023485684, 0.06544104506642912, 0.07005461190602869, 0.0679906132914504, 0.0589704541876952, 0.0662233803746527, 0.06843562261034586, 0.0688764154983621]}, "mutation_prompt": null}
{"id": "ad1a1d0d-c60d-454b-abe7-d2d569952d8a", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v5:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v5", "description": "Enhanced DE_SA_Metaheuristic_v5 with optimized data structure and simplified control flow for improved performance.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ecab2b8-53c7-40c1-ae9a-f95179fdbc5e", "metadata": {"aucs": [0.7431238536370666, 0.6765735613018127, 0.7421386802790263, 0.6818018442277356, 0.6715063419023697, 0.7049938940854842, 0.696818023754699, 0.6921078888273136, 0.6907459252587025, 0.34674594074693, 0.30613598832765, 0.3497117556422905, 0.4317206238643475, 0.3949142460158318, 0.42941145802662584, 0.44890685052860746, 0.4271515771033373, 0.3939289830600914, 0.12180566237214485, 0.1719219173418547, 0.12515996475403957, 0.13150991193649442, 0.14269397079477475, 0.11060353052514726, 0.137983199632986, 0.15354623557266, 0.13268651089750927, 0.11927803008375137, 0.09757852156049451, 0.11069320810821959, 0.11215023700676974, 0.10945868429782846, 0.09063192366914741, 0.09923465630512107, 0.10492420291057203, 0.16439020499691892, 0.9510582220131697, 0.9645298584344608, 0.9305967222885216, 0.9383502896178901, 0.9692143253739258, 0.9637117675236316, 0.9380978175715147, 0.9571235012153888, 0.9332708110046919, 0.2740095068955749, 0.2824892145753466, 0.25991918574129924, 0.28404221796059037, 0.25869280237217995, 0.33381759066863037, 0.27786467310395335, 0.2524993418854785, 0.2624005598357291, 0.25513626028785197, 0.27355107244708443, 0.21046825704796956, 0.23956676394866416, 0.26882690623847816, 0.28538087386714295, 0.39213683120097953, 0.2742930358628606, 0.28395861587267246, 0.12301153428642975, 0.1625594203671763, 0.12683102110270905, 0.13326394355752835, 0.17303786463606707, 0.14505077398887278, 0.18552027865229248, 0.16541222114017962, 0.1820438348467074, 0.17714153381743836, 0.15573852417590406, 0.13839505505720684, 0.19923290397841542, 0.17867469510813205, 0.16513923873422975, 0.1821366550709741, 0.17715455729527096, 0.1629772915876272, 9.999999999998899e-05, 0.008912937535787036, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013877735231911936, 9.999999999998899e-05, 0.011797916839868083, 9.999999999998899e-05, 0.023029290394811275, 0.042966276306031226, 0.05098086421408565, 0.07198325864641741, 0.035083877720520684, 0.07240070722995173, 0.08725255064778903, 0.20336199705242597, 0.12985357735271807, 0.12249372104673695, 0.0027740660935396955, 0.019576087885783244, 0.036025963749081735, 0.0025722949575592846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01930524308608761, 0.09675268886330923, 0.11158714829081018, 0.11089551600718173, 0.12286613773998156, 0.1214069637649351, 0.13184530343212497, 0.07218817836803171, 0.08786757157362024, 0.10398367573248202, 0.47439820285064993, 0.46102960129848713, 0.44864228891008584, 0.4318170426155997, 0.42526561240492533, 0.45189300494146467, 0.4745132446403997, 0.48574039313218964, 0.48210874754660205, 0.072992343230603, 0.080404711723422, 0.0813094781515985, 0.07440579287503679, 0.08621478832692442, 0.07490437212943557, 0.07914840433535031, 0.09006270993107357, 0.07946636677376206, 0.11610394227595966, 0.12871849592105267, 0.1306778937003904, 0.14532287344707207, 0.1789174612880462, 0.13758613747133264, 0.1507659610491986, 0.17912390499685427, 0.19161330950276156, 0.23101874394345656, 0.18739658591123876, 0.21583092311382834, 0.2576978463557935, 0.21566243942767271, 0.25368707607845253, 0.22687194080021789, 0.2244066543198655, 0.18102277349276474, 0.1860396324125979, 0.15844526462292563, 0.12462574921608283, 0.1413649697909779, 0.19839500954402878, 0.1806575917847485, 0.16714614838524722, 0.14858336682049467, 0.17141574502764056, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18546278397680893, 0.19098760257237568, 0.19316695851745602, 0.19031898069112763, 0.18969580136889763, 0.19578942841060476, 0.19523943074478722, 0.20745177038330298, 0.19284650720648422, 0.17128658989549406, 0.14179147537607062, 0.2708279312729792, 0.21800685594572566, 0.26665633018795487, 0.15784203129982088, 0.2957165898330225, 0.17145377228694847, 0.16215350823843933, 0.2753008857096666, 0.24667633607410444, 0.2330133822559879, 0.18567144430557547, 0.17915600959577715, 0.1754882154434968, 0.17984806130384057, 0.22105890521517557, 0.1483835866561798, 0.1766819815476781, 0.17200762034335237, 0.18052622099325033, 0.1745121223742171, 0.17964254952024872, 0.17388669516941224, 0.20337233062376914, 0.17343431427322298, 0.17146113004880448, 0.06523525584291823, 0.08727755023485684, 0.06544104506642912, 0.07005461190602869, 0.0679906132914504, 0.0589704541876952, 0.0662233803746527, 0.06843562261034586, 0.0688764154983621]}, "mutation_prompt": null}
{"id": "96ba0464-c163-4d26-9847-637390a3df24", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant_diff = self.population[mutant_indices[0]] - self.population[mutant_indices[1]]\n                trial = target + adapt_F * mutant_diff\n                mask = np.random.rand(self.dim) < self.CR\n                trial[mask] = target[mask]\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the control flow and simplifying the mutation operation while maintaining core functionality", "configspace": "", "generation": 60, "fitness": 0.2319710211784657, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v6 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "6ecab2b8-53c7-40c1-ae9a-f95179fdbc5e", "metadata": {"aucs": [0.7431238536370666, 0.6765735613018127, 0.7421386802790263, 0.6818018442277356, 0.6715063419023697, 0.7049938940854842, 0.696818023754699, 0.6921078888273136, 0.6907459252587025, 0.34674594074693, 0.30613598832765, 0.3497117556422905, 0.4317206238643475, 0.3949142460158318, 0.42941145802662584, 0.44890685052860746, 0.4271515771033373, 0.3939289830600914, 0.12180566237214485, 0.1719219173418547, 0.12515996475403957, 0.13150991193649442, 0.14269397079477475, 0.11060353052514726, 0.137983199632986, 0.15354623557266, 0.13268651089750927, 0.11927803008375137, 0.09757852156049451, 0.11069320810821959, 0.11215023700676974, 0.10945868429782846, 0.09063192366914741, 0.09923465630512107, 0.10492420291057203, 0.16439020499691892, 0.9510582220131697, 0.9645298584344608, 0.9305967222885216, 0.9383502896178901, 0.9692143253739258, 0.9637117675236316, 0.9380978175715147, 0.9571235012153888, 0.9332708110046919, 0.2740095068955749, 0.2824892145753466, 0.25991918574129924, 0.28404221796059037, 0.25869280237217995, 0.33381759066863037, 0.27786467310395335, 0.2524993418854785, 0.2624005598357291, 0.25513626028785197, 0.27355107244708443, 0.21046825704796956, 0.23956676394866416, 0.26882690623847816, 0.28538087386714295, 0.39213683120097953, 0.2742930358628606, 0.28395861587267246, 0.12301153428642975, 0.1625594203671763, 0.12683102110270905, 0.13326394355752835, 0.17303786463606707, 0.14505077398887278, 0.18552027865229248, 0.16541222114017962, 0.1820438348467074, 0.17714153381743836, 0.15573852417590406, 0.13839505505720684, 0.19923290397841542, 0.17867469510813205, 0.16513923873422975, 0.1821366550709741, 0.17715455729527096, 0.1629772915876272, 9.999999999998899e-05, 0.008912937535787036, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013877735231911936, 9.999999999998899e-05, 0.011797916839868083, 9.999999999998899e-05, 0.023029290394811275, 0.042966276306031226, 0.05098086421408565, 0.07198325864641741, 0.035083877720520684, 0.07240070722995173, 0.08725255064778903, 0.20336199705242597, 0.12985357735271807, 0.12249372104673695, 0.0027740660935396955, 0.019576087885783244, 0.036025963749081735, 0.0025722949575592846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01930524308608761, 0.09675268886330923, 0.11158714829081018, 0.11089551600718173, 0.12286613773998156, 0.1214069637649351, 0.13184530343212497, 0.07218817836803171, 0.08786757157362024, 0.10398367573248202, 0.47439820285064993, 0.46102960129848713, 0.44864228891008584, 0.4318170426155997, 0.42526561240492533, 0.45189300494146467, 0.4745132446403997, 0.48574039313218964, 0.48210874754660205, 0.072992343230603, 0.080404711723422, 0.0813094781515985, 0.07440579287503679, 0.08621478832692442, 0.07490437212943557, 0.07914840433535031, 0.09006270993107357, 0.07946636677376206, 0.11610394227595966, 0.12871849592105267, 0.1306778937003904, 0.14532287344707207, 0.1789174612880462, 0.13758613747133264, 0.1507659610491986, 0.17912390499685427, 0.19161330950276156, 0.23101874394345656, 0.18739658591123876, 0.21583092311382834, 0.2576978463557935, 0.21566243942767271, 0.25368707607845253, 0.22687194080021789, 0.2244066543198655, 0.18102277349276474, 0.1860396324125979, 0.15844526462292563, 0.12462574921608283, 0.1413649697909779, 0.19839500954402878, 0.1806575917847485, 0.16714614838524722, 0.14858336682049467, 0.17141574502764056, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18546278397680893, 0.19098760257237568, 0.19316695851745602, 0.19031898069112763, 0.18969580136889763, 0.19578942841060476, 0.19523943074478722, 0.20745177038330298, 0.19284650720648422, 0.17128658989549406, 0.14179147537607062, 0.2708279312729792, 0.21800685594572566, 0.26665633018795487, 0.15784203129982088, 0.2957165898330225, 0.17145377228694847, 0.16215350823843933, 0.2753008857096666, 0.24667633607410444, 0.2330133822559879, 0.18567144430557547, 0.17915600959577715, 0.1754882154434968, 0.17984806130384057, 0.22105890521517557, 0.1483835866561798, 0.1766819815476781, 0.17200762034335237, 0.18052622099325033, 0.1745121223742171, 0.17964254952024872, 0.17388669516941224, 0.20337233062376914, 0.17343431427322298, 0.17146113004880448, 0.06523525584291823, 0.08727755023485684, 0.06544104506642912, 0.07005461190602869, 0.0679906132914504, 0.0589704541876952, 0.0662233803746527, 0.06843562261034586, 0.0688764154983621]}, "mutation_prompt": null}
{"id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 61, "fitness": 0.2320564093185308, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v6 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "6ecab2b8-53c7-40c1-ae9a-f95179fdbc5e", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "00dd3d52-f9e6-4eb0-b12c-ff637b14a3d3", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v7:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant_diff = self.population[mutant_indices[0]] - self.population[mutant_indices[1]]\n                trial = target + adapt_F * mutant_diff\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v7", "description": "Enhancing the algorithm by optimizing the mutation strategy using a more efficient approach.", "configspace": "", "generation": 62, "fitness": 0.2320564093185308, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "155fc29d-8bf8-4bfe-bf05-c8b806f6306f", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "5073cfc5-0d8e-4c9a-937b-1e45a0ea3b43", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "f1f29ccf-edd7-458b-af8c-ac441219c4e3", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "17cfe73d-a79d-4304-ab66-331b375a2b11", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "0847719c-5470-4f69-a0c3-5927e0d2fffe", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v7:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.CR, self.alpha, self.F, self.T = budget, dim, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (10, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(10, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n            if np.random.rand() < 0.1:  # Introduce dynamic population size adaptation\n                self.population = np.concatenate([self.population, np.random.uniform(-5.0, 5.0, (1, self.dim))])\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v7", "description": "Introducing a dynamic adaptation of population size to enhance diversity and exploration.", "configspace": "", "generation": 67, "fitness": 0.19630579709382806, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.6187704186829979, 0.5624063060657682, 0.5226759529803808, 0.4515682448413574, 0.5192336871500767, 0.45118271016516653, 0.4856997122545075, 0.5160242789662878, 0.5223985947675018, 0.1560034827105199, 0.1629544397669046, 0.19114153617745988, 0.10309273815697761, 0.21453956355300952, 0.21355534946169985, 0.2053244429297011, 0.17179845531346272, 0.12672264502117414, 0.09254847113218279, 0.12506023233789887, 0.1196783994864461, 0.11323101281858095, 0.10703906370846905, 0.117093028291547, 0.0931787321512918, 0.09017544892779039, 0.10135180759014584, 0.07477823915441828, 0.08737818361518335, 0.1160078751553516, 0.0974471789354544, 0.07988475300159648, 0.08586894740353745, 0.08918099109489341, 0.10329657855736674, 0.09767613936038855, 0.9491046976713515, 0.9503273257875735, 0.9494604652466634, 0.9091959142610334, 0.9719366449685534, 0.9353028836510389, 0.9030580842772793, 0.9728457964368287, 0.9491842242640672, 0.18378604093784157, 0.1698859534623287, 0.1956148451720553, 0.16893130086639174, 0.22671000632648564, 0.2185552875740424, 0.19023476162035402, 0.16113765530232427, 0.18794720502415718, 0.1889666315696965, 0.23806582584707336, 0.26639204609908973, 0.25892726593624305, 0.27089276190558953, 0.26887170640678537, 0.1959390731694346, 0.21449648757568907, 0.23829868789915443, 0.1282431255831663, 0.13745910512481818, 0.1587586659417748, 0.12555602341427896, 0.12714052633346873, 0.1243422397256645, 0.10922078230071197, 0.15118661210981177, 0.1563875869833803, 0.19053933707116222, 0.1325575147360789, 0.12435320310737008, 0.14570751446641628, 0.12627580719970988, 0.10979164941369124, 0.1399458622014912, 0.13088791039669345, 0.1289178236610774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013197688907035099, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055815794165978705, 0.05683008508545262, 0.06311151382725566, 0.05016987938311468, 0.013724867877368707, 0.04016433748095716, 0.035283712969687464, 0.09529243294938916, 0.06799435474947335, 0.0642067042772787, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08030526133133842, 0.06983845229046837, 0.0961008299657542, 0.06463330993564398, 0.09596605022066307, 0.09581175485166371, 0.07833157680348612, 0.06453725772628627, 0.09536729561624235, 0.41235246715246765, 0.41697283735465884, 0.41997176963733907, 0.38404445866518067, 0.3829039718808259, 0.3796909303540281, 0.42268196798354607, 0.42888416372210547, 0.40005322904033824, 0.06576059110091559, 0.07093639028609044, 0.0544510613060174, 0.09362730101177463, 0.06117463629617359, 0.06106018010865677, 0.07375934485610891, 0.07221096568195806, 0.06375087233493937, 0.1245750077941915, 0.13535273685746085, 0.11808910871378053, 0.11471904350922091, 0.12203165487444889, 0.11901639756852711, 0.14726620383112077, 0.1369937343761971, 0.13729553033250463, 0.21094131591490406, 0.1992444724487732, 0.17358583328582722, 0.219745569921727, 0.20839432053010376, 0.19918345482236433, 0.19206389807972624, 0.22882583378777055, 0.2039639909151172, 0.13787796191004875, 0.15191428608724822, 0.15608198496815762, 0.1601901656617798, 0.1518664753199106, 0.15484030837430796, 0.14810662547077935, 0.15365465760669827, 0.15459467309512898, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.19982678840934687, 0.17978704805190737, 0.18370907123634983, 0.17341452718070383, 0.175649064398683, 0.18434825820928213, 0.23241986470685794, 0.1990607266362655, 0.18410832196979254, 0.1584172300155542, 0.21946065460720643, 0.1889893841921335, 0.2536679816437317, 0.16850753494384985, 0.27283109585577603, 0.17637924734617172, 0.14579545384290027, 0.22252609284913816, 0.22752610102680537, 0.26719655258297126, 0.21370521866326786, 0.16775054673634782, 0.17227804244679723, 0.18402364203888555, 0.17492482936839082, 0.16850067858309536, 0.17207345169064026, 0.1625807558791661, 0.1668831476741217, 0.16301295474530075, 0.18367485990828325, 0.17346361486782846, 0.19021134478683088, 0.16655994649213357, 0.16814333689321925, 0.18389151825985117, 0.06754529870980963, 0.07760632358356834, 0.06054863464357152, 0.081045882848092, 0.0576876556155852, 0.07278006934860026, 0.06516362404971932, 0.06421993799163117, 0.06003796585411891]}, "mutation_prompt": null}
{"id": "f6b22ed4-1edd-4ffb-a8f4-8656acc321c3", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v7:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                adapt_CR = np.clip(self.CR + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < adapt_CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v7", "description": "Enhancing the mutation strategy by introducing adaptive crossover and mutation scaling factors.", "configspace": "", "generation": 68, "fitness": 0.22964442792277476, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7186817188044237, 0.6605752284806032, 0.6623364596451475, 0.6679619481842098, 0.6840449054448358, 0.674574443665094, 0.6817867556950425, 0.7404455402596728, 0.6917340620769774, 0.4039344287967658, 0.3700030464514328, 0.36447822950755304, 0.3516128864033765, 0.33507517486142624, 0.3493624772637325, 0.41661870596198136, 0.42653399773059764, 0.37835774411704837, 0.1345143604467126, 0.18155155916578258, 0.11572677874617943, 0.12199907677295474, 0.12598783924500456, 0.12827585845722278, 0.11571557208883554, 0.10723232436851193, 0.1050258597320286, 0.10465197300508522, 0.12084859739817111, 0.11115571504435606, 0.10984811287827889, 0.13004695797734478, 0.10915508342803171, 0.10786908752735436, 0.10756107512465551, 0.12245879885786837, 0.9548981314338022, 0.9766262078303634, 0.9328165973998652, 0.9369127225489241, 0.9642263556366198, 0.9182084513431569, 0.9360400087304649, 0.9530239395276681, 0.9220373259776219, 0.2818925141854315, 0.24363209586586432, 0.302686502039781, 0.2288313905407635, 0.2780581095539193, 0.29929087017389033, 0.21756268974674198, 0.19024459937875515, 0.24632209810795347, 0.2447982216693999, 0.2261066399834789, 0.29421933550125123, 0.32044269034003026, 0.31430308105103133, 0.42676131132769046, 0.2782211307006345, 0.24351325460402085, 0.2674546947922789, 0.15151770485051497, 0.18775620899047318, 0.17104862762217543, 0.14951748159065248, 0.1260070546457437, 0.21930304083036667, 0.2134553261924096, 0.15701331173473332, 0.15835461855971422, 0.19435135173387486, 0.13251807480056377, 0.16207924685718222, 0.1529807117471329, 0.1651656327425417, 0.18752448749492778, 0.17667676419642686, 0.17657800195011497, 0.17074685332659068, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002486175201047214, 0.00010038937869905062, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030927273380966236, 0.001345414191633254, 0.0788150328800622, 0.06347142393930771, 0.08950945024089885, 0.05442436886471602, 0.07400167590782736, 0.05516502255342859, 0.12124015483973594, 0.13036090388646393, 0.114290703809242, 9.999999999998899e-05, 0.0039160940565252655, 0.015045207122977633, 0.0045801236702865955, 0.003288645730144313, 0.00018063281030333833, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11405868249138218, 0.11048382639203425, 0.1130666440528354, 0.0974288355544799, 0.11847699187235672, 0.14231765915353667, 0.08829529659596569, 0.12185191565253828, 0.09135453456942055, 0.4807992856369322, 0.4468483867299339, 0.46059817797855807, 0.45599577302036887, 0.4700193174496605, 0.46109645457905435, 0.46089219435461914, 0.45763193274846137, 0.4426996812428553, 0.0950795845929, 0.0772377799546522, 0.07868007094316876, 0.07173243688721054, 0.09169418010720987, 0.08664351528036573, 0.05544039991574756, 0.07746004477168333, 0.06969061321838743, 0.12301828539758952, 0.11959212753704307, 0.13374500166245473, 0.12450926331918022, 0.12941233532090102, 0.13129511497340374, 0.10618860436333366, 0.10870189438962985, 0.14255409321346013, 0.244568820097249, 0.250614777977884, 0.2253487523791462, 0.2388913775212651, 0.20961306288966086, 0.2617143885609421, 0.2393285059646706, 0.2099945157235047, 0.1616809967194336, 0.16855389403032017, 0.1518401354837854, 0.161030103910893, 0.17062066862231584, 0.1717925054819358, 0.19169197096710588, 0.14911241863898106, 0.14936842184689814, 0.14791226690144244, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.19363759341175546, 0.1776835434158509, 0.21120964531075892, 0.19071534337283091, 0.1884874257996666, 0.19673982652015298, 0.20906880209873424, 0.18568816563808943, 0.19263923777228742, 0.3406725371624888, 0.18890572604195488, 0.35601041074709183, 0.31384433577410675, 0.1728998729830753, 0.2994214749288161, 0.2079518135831555, 0.3049189415503937, 0.1574860652133513, 0.1820545485715207, 0.19887542535982183, 0.1603128564950621, 0.19750714150669013, 0.16872271876522738, 0.1646019925382176, 0.127723512426834, 0.16012359110512175, 0.19900148087555813, 0.16081008298983868, 0.19372275941382677, 0.170909376878858, 0.1696733158630821, 0.17018722477689352, 0.1607287116029933, 0.153653167534888, 0.16024127626481643, 0.16385193428315648, 0.08716430597131986, 0.08196830290287693, 0.06718404809058087, 0.0709730764942178, 0.0791197470409748, 0.06899802647454212, 0.058550351466918116, 0.06824305270655828, 0.06242715237498686]}, "mutation_prompt": null}
{"id": "d3ad014e-c807-4afb-95e6-a85410617717", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v7:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                if new_fitness < func(target) or np.random.rand() < np.exp((func(target) - new_fitness) / self.T):\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v7", "description": "Optimizing the mutation process by simplifying control flow and enhancing population update strategy.", "configspace": "", "generation": 69, "fitness": 0.2320564093185308, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "4fa30a58-b5f0-405c-ae95-3b3bc8782e04", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v7:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v7", "description": "Enhancing the adaptation of mutation parameters to improve exploration-exploitation balance.", "configspace": "", "generation": 70, "fitness": 0.2320564093185308, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "e33c65ba-cba3-4c40-b55f-fa95a79a5b36", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v7:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population = np.array(new_population)\n            self.T = self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v7", "description": "Enhancing the selection process by incorporating a dynamic update mechanism to improve exploration-exploitation balance.", "configspace": "", "generation": 71, "fitness": 0.2320564093185308, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "6b814d1a-c480-48d6-8436-dd872ef9c9c0", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v7:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1) + 0.001 * np.random.randn()\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v7", "description": "Enhancing the population update strategy by introducing a novel adaptive approach to control the mutation process and improving convergence behavior.", "configspace": "", "generation": 72, "fitness": 0.16219696000329548, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.3836436051453995, 0.3739386356024501, 0.4960272427181551, 0.31197144199515925, 0.3297486871510874, 0.38844075484912477, 0.47042058101151396, 0.37874507480905895, 0.26528605549109274, 0.02253626492152927, 0.10991836995071858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059515593355705665, 9.999999999998899e-05, 0.08005126771682824, 0.009075371369737018, 0.11668691777775897, 0.09079634524379887, 0.1060984022049759, 0.10284819456022176, 0.08532472214076403, 0.07761970074820179, 0.08294711128097843, 0.06490009785745166, 0.08276886376437764, 0.07168805287666913, 0.06719310166065484, 0.07358647084813097, 0.07704370918586612, 0.0719576617448403, 0.09461198976005691, 0.07345129713932497, 0.06006798487864162, 0.07705902361803929, 0.9611318052095812, 0.9702204013019124, 0.9687591425528667, 0.9554659972223091, 0.9046763988129236, 0.9710397763073855, 0.9229437301905812, 0.9585837192713496, 0.9378649858944446, 0.14208502077954932, 0.10263538710857012, 0.11545972466175958, 0.12537492393401295, 0.12665136939574806, 0.1436991106584652, 0.14024294348371458, 0.10149178109107904, 0.07430362115434197, 0.1967762178691016, 0.14834546503919177, 0.12973971893950387, 0.21533158985827827, 0.18349898742462256, 0.22144024715802646, 0.1706835841662553, 0.1393124216493814, 0.19547974735779838, 0.038084233467745254, 0.11932034035005235, 0.05707670495949391, 0.0962186008925382, 0.12807649424239242, 0.08997868922317653, 0.1156640557427927, 0.04256434699631917, 0.08740189968570744, 0.12930117383071427, 0.10147029197186697, 0.0927976260365172, 0.1056535657917721, 0.06656708130024491, 0.08037395488329035, 0.2039683338429985, 0.10564160325685679, 0.13984600976185835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06068888997463073, 0.029157929390094095, 0.053343476818188185, 0.0439310103027194, 0.003123408038191, 0.0031896893657928915, 0.05383150651286872, 0.026834994064794393, 0.057870688028956674, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03919191530902755, 0.06007001610320439, 0.055203820829141104, 0.040173176212655703, 0.04091762140058275, 0.030540339162189567, 0.015002852537737588, 0.027069738129179455, 0.03967256974709832, 0.3751862401084006, 0.3538621633150135, 0.3707708942978486, 0.3197037939672843, 0.346744446985213, 0.3064932733505934, 0.33505015270511207, 0.36006094588854487, 0.40126961018586915, 0.07153059532000716, 0.07330281404452454, 0.0657454506748627, 0.07308508251907553, 0.04130728738602807, 0.060159955656097774, 0.07065005086466858, 0.10112597165701553, 0.05735268107283842, 0.11970842407373783, 0.11341768542801978, 0.12238656059539132, 0.09854758956804222, 0.11978697639409397, 0.0977708495983668, 0.09762541582917872, 0.1245683071389565, 0.1343797825360734, 0.15773442368016477, 0.1787486223728605, 0.16461386583854998, 0.19137219933974325, 0.19796706278980036, 0.20270070421635622, 0.18446737537465718, 0.181373629682839, 0.1495447171460833, 0.09776183516119685, 0.15377795484060242, 0.14411620415518955, 0.11498229959584494, 0.15014697827679935, 0.14021922036361867, 0.09257205195478146, 0.1353493019305062, 0.13218497365514814, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.1827029402413094, 0.17171809576596153, 0.17050018334617256, 0.16909491749641548, 0.1726764425420806, 0.16551873967780317, 0.17799872908793568, 0.1652268987811535, 0.17058580679644786, 0.2678037451960483, 0.14486200909573277, 0.2742536809290922, 0.15753058912474371, 0.15101135087814999, 0.15915932521096798, 0.11394333393596368, 0.1560450098315529, 0.13052802337547187, 0.16341060144846598, 0.15522379696422883, 0.13422114282675535, 0.1618254703512645, 0.10886661664951802, 0.11513427831743306, 0.15967497976397227, 0.10472198676755784, 0.10533764155232517, 0.17290134304500226, 0.15799445312872307, 0.1787366397937452, 0.15741527251541887, 0.1663993955042533, 0.16438747441299528, 0.14823323662507137, 0.14661799562762512, 0.15001481084169332, 0.06476557546860573, 0.04893426025270331, 0.07824142206980889, 0.05539634387055825, 0.054984943065657155, 0.0488860407805678, 0.04386199799120771, 0.052184424346837344, 0.05062394416134508]}, "mutation_prompt": null}
{"id": "534afc49-5c1f-455f-a558-0488ed23b0f5", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "758f9997-89a6-434f-ae80-114c2981819b", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "8221900c-bbbf-49b3-869a-4f2237b95e3a", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v7:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.mutation_indices = np.random.randint(0, self.pop_size, (self.pop_size, 2))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for idx, target in enumerate(self.population):\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant = self.population[self.mutation_indices[idx]]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v7", "description": "Improve efficiency by pre-calculating the mutation indices outside the loop and consolidating repeated operations.", "configspace": "", "generation": 75, "fitness": 0.095119888727593, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.16.", "error": "", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.12189744685284098, 0.15432587843574042, 0.10894474691648615, 0.06883783139566568, 0.150438260973069, 0.1090224967565635, 0.12491916079762944, 0.08673334080506645, 0.1166108091454644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042366286108462936, 0.04103507777804294, 0.01638933255609687, 0.0061866190984090075, 0.03513412452922715, 0.07047034809700159, 0.031601572562599545, 0.026450969743618602, 0.017466410529879406, 0.016550574650020966, 9.999999999998899e-05, 0.03772341769889409, 0.04197704292818849, 9.999999999998899e-05, 0.030790600203903007, 9.999999999998899e-05, 0.00010077712157230412, 0.0346166701946633, 0.9119088533968346, 0.9516184825459391, 0.9634774144880935, 0.9094944251183947, 0.148044681582305, 0.8800981732145264, 0.34484159830070493, 0.09348247283853761, 0.8333349049579375, 0.0902591038487568, 0.03584166761014984, 9.999999999998899e-05, 0.0064696714594614235, 0.025024494513049667, 0.04642123079994709, 9.999999999998899e-05, 0.017935130691442258, 0.0020212872146150307, 0.10159904553844024, 0.08831388505335858, 0.12815820726712568, 0.08052400247570846, 0.06877787940793145, 0.06694350339594335, 0.06908305729685871, 0.025185152055792637, 0.09282386594250625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05859681493614566, 0.05859681493614566, 0.059866456830804826, 0.05859681493614566, 0.05859681493614566, 0.05859681493614566, 0.05859681493614566, 0.05859681493614566, 0.05859681493614566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02946762067748787, 0.013706358780058325, 9.999999999998899e-05, 9.999999999998899e-05, 0.021182154857292357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11694762880936194, 0.11479423987460557, 0.15835561219645877, 0.14764902958695425, 0.10624899159238488, 0.11777788814402868, 0.1589061603128855, 0.12381757254787185, 0.1682767734652464, 0.018037815570816518, 9.999999999998899e-05, 0.04148957572131384, 0.03821297905805254, 0.046021678843702785, 0.04253629830333172, 0.022171473936855146, 0.023634342896827754, 0.054493128136859914, 0.10974361789100118, 0.09457486877353927, 0.16706882607661722, 0.10646979946793855, 0.09817930801260732, 0.13088458508659717, 0.07821796573579465, 0.08952052640907826, 0.14459259815086478, 0.11804426892774211, 0.11671165365751823, 0.19954695245318943, 0.15403902772650113, 0.11606448139585968, 0.17760578505744928, 0.13712719808173446, 0.12384503090005816, 0.11937548546327292, 0.09439019833479667, 0.05875104142484655, 0.08195234883253832, 0.0946673582143629, 0.08607314529280152, 0.08510747944672326, 0.08802407416975033, 0.06989266099551072, 0.07854690241127904, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.15083974453521554, 9.999999999998899e-05, 0.11983673289365526, 9.999999999998899e-05, 9.999999999998899e-05, 0.136146369627566, 0.141661375601972, 9.999999999998899e-05, 0.15359067204054777, 0.10451912765913507, 0.11512616354034688, 0.06797176572591235, 0.14428477441810372, 0.13892115946025552, 0.11200942710545636, 0.08483284167579352, 0.11357767566924937, 0.1090806759971531, 0.1633556077146161, 0.09918208547676821, 0.1156389459278826, 0.0739957568994487, 0.09557400317792564, 0.04549862702551777, 0.10088347525121533, 0.06561911772367346, 0.2700623244087418, 0.15322770647968376, 0.15482551976243775, 0.17565799416673744, 0.1776249913754191, 0.1823159600062212, 0.15520061952815667, 0.1818804983472614, 0.15111168441580725, 0.18757998303344126, 0.053735380022169044, 0.04992511076256556, 0.04799539773660344, 0.04979596340055159, 0.015911875161548572, 0.050375399975659096, 0.03863361405340493, 0.028326528898761527, 0.03786984387628167]}, "mutation_prompt": null}
{"id": "2495684d-304a-43c2-9a21-85d85c57943f", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "3000c61a-c70f-41e8-a393-cd8e2e4603d3", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "67718b59-8b15-4f23-8414-722d445b038c", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "236d0ff8-ebc9-4931-ad62-2b679f50a183", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "f83037c2-6415-4d7e-af66-9dd22a5ef822", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "0ef49fbc-8cf3-408f-a936-208c718dc8f8", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v7:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v7", "description": "Enhancing the mutation process by introducing adaptive scaling of differential weights and probability thresholds for improved convergence.", "configspace": "", "generation": 81, "fitness": 0.2320564093185308, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "0bb4e4aa-dcf3-4a5c-9862-0c6b9f07cf70", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "c47debdf-4b5c-42d7-8dd0-5cfea79e4ce7", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "01dd32d4-5180-48ce-9bbf-4b609cb99abc", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "0e960527-0629-4661-b202-90a6eeb01e27", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v7:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.05 * np.random.randn(), 0.1, 0.9)  # Fine-tuned F adaptation\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v7", "description": "Optimizing the mutation process by fine-tuning parameter adaptation for increased efficiency.", "configspace": "", "generation": 85, "fitness": 0.2289674590205884, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7172322944013152, 0.6958351834327381, 0.7455515787456856, 0.666706990049468, 0.7109738508677558, 0.6649970093012354, 0.6912510020778498, 0.6566541748660949, 0.658029281722197, 0.37886370413260284, 0.3327250254308769, 0.351833567699096, 0.38548677945041754, 0.42592696455145573, 0.41917018014290675, 0.3845195065625129, 0.3751643534784296, 0.3278116596622531, 0.10938686101359818, 0.12025082890868288, 0.11929717132564477, 0.11548246071577595, 0.11625571343388996, 0.1438100255222451, 0.11705498051618812, 0.1386341528527324, 0.11395183209544213, 0.09645561010443948, 0.1271143324064773, 0.11947232710077405, 0.10703015444420139, 0.11264549910663968, 0.1340770542342805, 0.12045263056232802, 0.10983514079047874, 0.12710850884625724, 0.9431914771456363, 0.9518892438158063, 0.9471040847766113, 0.8954258450330336, 0.9448971273298951, 0.940321522073387, 0.9306415250475969, 0.9364534326697287, 0.9256254836486073, 0.27793647300118596, 0.30083897137903515, 0.285867022461081, 0.31299350437374673, 0.26119210132515225, 0.2799017020363147, 0.2733227392761147, 0.27188544189556074, 0.28276826751482753, 0.2400271418728549, 0.20769744750929808, 0.2608790107473976, 0.3120966859414669, 0.2825393910824806, 0.31060881610102375, 0.257688607635126, 0.2699561492136999, 0.2813778218748504, 0.16970036710229108, 0.1630203274554528, 0.20857737966237966, 0.16333363415498092, 0.17433713515689686, 0.1928606307083205, 0.1390802196332721, 0.1770272296864539, 0.17263562871070914, 0.20411973731193256, 0.15352920893923383, 0.22400729295392952, 0.14812400872290965, 0.14633346033542927, 0.17261134423207714, 0.16486399647964045, 0.1405973961090553, 0.19136085177448026, 9.999999999998899e-05, 9.999999999998899e-05, 0.002682311691481698, 9.999999999998899e-05, 0.00011988458847322914, 0.008553817786737805, 0.023244231183112807, 9.999999999998899e-05, 0.01017530400344624, 0.09579848902942345, 0.044056200738254114, 0.1221287839866525, 0.082261231816806, 0.04717953639968797, 0.07051462787608365, 0.06847773434152282, 0.0640247380295157, 0.08996185523490496, 9.999999999998899e-05, 0.0007683280210987187, 0.03782658498318525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005451517467567335, 0.037342546719089986, 9.999999999998899e-05, 0.1122422959508047, 0.11509009234074097, 0.11387496907229655, 0.133525281126172, 0.11369755723278907, 0.15236564687610443, 0.08755498498314607, 0.09998826839275354, 0.11847315512540912, 0.4377054695959569, 0.4589955817504685, 0.45896509634726235, 0.4745415661546465, 0.4382726218396056, 0.43192642416421956, 0.4440453181376872, 0.45844322665979964, 0.4795730173752677, 0.08922175325896409, 0.08956843193079989, 0.07271279772591877, 0.074660321210131, 0.09714948381195188, 0.07499135063822648, 0.08798261674695618, 0.08857731075363828, 0.06880547832944739, 0.16037688710388398, 0.13122084576921667, 0.12825444090908245, 0.1436725761333053, 0.10300442273413568, 0.139940861772744, 0.13125739258093272, 0.11317466553163391, 0.14908130427009314, 0.2280462691946714, 0.21252555512744253, 0.20967965416063006, 0.20813332097573845, 0.24048861673223643, 0.21682061067214387, 0.22904745112507363, 0.2524633792443096, 0.1776252610758251, 0.15686018645866262, 0.15601674644875696, 0.17849409509403014, 0.1619836368101063, 0.18125005071932865, 0.18249657087394344, 0.12667173008399002, 0.14093759322469757, 0.16658112384676482, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18756928770240033, 0.19211906706854132, 0.18567695512568494, 0.20418255506560734, 0.19459545198814554, 0.19390408134927162, 0.1988803966153081, 0.17519325410220377, 0.20718569432387013, 0.15783393501749177, 0.16499861791328896, 0.2582149404859384, 0.5175412283542418, 0.17366314797205928, 0.163619598482997, 0.23306032891273898, 0.21570962970284602, 0.15117285973990569, 0.16518529327493037, 0.16923469795952006, 0.18728106799916844, 0.15832621486061993, 0.17570739407817804, 0.1943365562817475, 0.2847035029217041, 0.14801434897235488, 0.16087511000965582, 0.18811122544387604, 0.16574064063687033, 0.156212607659157, 0.16827559881726106, 0.16914393343632272, 0.19832531989030866, 0.16258632385547167, 0.1772706419393646, 0.17067538823693817, 0.0721424597410758, 0.0611679843886066, 0.07778789664246011, 0.06954889283576682, 0.060334580869480514, 0.06657027636610868, 0.05165652870885429, 0.0747050683578393, 0.07208259380878712]}, "mutation_prompt": null}
{"id": "d3266704-23c0-4c2d-8628-a5fcf9029531", "solution": "# import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v7:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n            mutant_indices = np.random.choice(self.pop_size, (2, self.dim), replace=False)\n            mutant = self.population[mutant_indices]\n            trial = self.population + adapt_F * (mutant[0] - mutant[1])\n            mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trial = np.where(mask, trial, self.population)\n\n            new_fitness = np.array([func(trial[i]) for i in range(self.pop_size)])\n            improved_mask = new_fitness < best_fitness\n            best_solution[improved_mask] = trial[improved_mask]\n            best_fitness[improved_mask] = new_fitness[improved_mask]\n\n            P = self.population\n            update_mask = new_fitness < np.array([func(P[i]) for i in range(self.pop_size)]) \\\n                          + np.exp((np.array([func(P[i]) for i in range(self.pop_size)]) - new_fitness) / self.T) > np.random.rand(self.pop_size)\n            self.population[update_mask] = trial[update_mask]\n\n            self.T = self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v7", "description": "Utilizing vectorized operations for improved performance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,5) (5,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (10,5) (5,5) ')", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {}, "mutation_prompt": null}
{"id": "afa31e65-f505-46e7-9c1e-363506d8099a", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "3e168890-4309-4fc7-8884-fadb6320b364", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v7:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                trial = target + adapt_F * (self.population[mutant_indices[0]] - self.population[mutant_indices[1]])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                if new_fitness < func(target) or np.exp((func(target) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v7", "description": "Optimizing the mutation process by reducing unnecessary variable assignments and enhancing convergence speed.", "configspace": "", "generation": 88, "fitness": 0.2320564093185308, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "84f1edaf-bd96-4945-af62-bfc0450c89ad", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v7:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = max(0.1, min(0.9, self.F + 0.1 * np.random.randn()))\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v7", "description": "Optimizing the mutation process and control flow by introducing a dynamic adaptation mechanism for the scaling factor F.", "configspace": "", "generation": 89, "fitness": 0.2320564093185308, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "686e9e42-8b56-4302-96b0-d58da2a7b478", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "711254df-b8ff-4b29-8c85-d8f11b9ed75a", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "1cadfc3e-7c45-4d98-90b6-77324dcd5829", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "7c968f7b-0132-4008-afda-b8013f5920b2", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "e973089d-bc7b-4999-b3cd-a64b049c6c61", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n            mutant_indices = np.random.choice(self.pop_size, (2, self.dim), replace=False)\n            mutants = self.population[mutant_indices]\n            trial = self.population + adapt_F * (mutants[0] - mutants[1])\n            \n            mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trial = np.where(mask, trial, self.population)\n\n            new_fitness = func(trial.T)\n            improve_mask = new_fitness < best_fitness\n            best_solution = np.where(improve_mask, trial, best_solution)\n            best_fitness = np.where(improve_mask, new_fitness, best_fitness)\n\n            P = self.population\n            improve_mask = new_fitness < func(P.T).T\n            accept_mask = np.exp((func(P.T) - new_fitness) / self.T) > np.random.rand(self.pop_size)\n            target = np.where(improve_mask | accept_mask[:, np.newaxis], trial, P)\n\n            self.population, self.T = target, self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Utilizing NumPy vectorized operations for enhanced computational efficiency.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,5) (5,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (10,5) (5,5) ')", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {}, "mutation_prompt": null}
{"id": "24f68268-e06d-4b90-b502-f4b5a1f7ac73", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "a4e7d895-6923-47a5-962f-996a96f233cd", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v7:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v7", "description": "Optimizing the mutation strategy by introducing a hybrid scheme of differential evolution with simulated annealing to enhance exploration-exploitation balance.", "configspace": "", "generation": 96, "fitness": 0.2320564093185308, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "d7cd3cb8-cffb-40b8-85b6-887f4b07cab8", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v7:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, max(10, dim), 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v7", "description": "Introducing dynamic adaptation of population size based on the dimensionality to enhance exploration in the search space.", "configspace": "", "generation": 97, "fitness": 0.2320564093185308, "feedback": "The algorithm Enhanced_DE_SA_Metaheuristic_v7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "add8918c-2ef9-4da4-bc33-05c9d5a0aac0", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
{"id": "09117a04-7982-4ce2-a2c9-c51bd3a2a490", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Metaheuristic_v6:\n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.pop_size, self.CR, self.alpha, self.F, self.T = budget, dim, 10, 0.5, 0.9, 0.5, 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        best_solution, best_fitness = np.random.uniform(-5.0, 5.0, self.dim), func(np.zeros(self.dim))\n        for _ in range(self.budget):\n            new_population = []\n            for target in self.population:\n                adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)\n                mutant_indices = np.random.choice(self.pop_size, 2, replace=False)\n                mutant = self.population[mutant_indices]\n                trial = target + adapt_F * (mutant[0] - mutant[1])\n                mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(mask, trial, target)\n\n                new_fitness = func(trial)\n                if new_fitness < best_fitness:\n                    best_solution, best_fitness = trial, new_fitness\n\n                P = target\n                if new_fitness < func(target) or np.exp((func(P) - new_fitness) / self.T) > np.random.rand():\n                    target = trial\n\n                new_population.append(target)\n\n            self.population, self.T = np.array(new_population), self.T * max(self.alpha, 0.1)\n\n        return best_solution", "name": "Enhanced_DE_SA_Metaheuristic_v6", "description": "Optimizing the mutation process by consolidating operations and simplifying control flow to enhance performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2431b7f-6788-44a2-968e-ccca222dfd24", "metadata": {"aucs": [0.7020476229851507, 0.6942933833712142, 0.7170776898118113, 0.6766136864158986, 0.6614795732580123, 0.7067130950879448, 0.6631152564960098, 0.6461359796377053, 0.7322190023956212, 0.32746098731289863, 0.4059839058451207, 0.38164218902777003, 0.4365925014393224, 0.3826989041145854, 0.31488202538690824, 0.37973761753549595, 0.3913091006785463, 0.3951372013954835, 0.14302435201411967, 0.12247446621760738, 0.11643239154122553, 0.13715580113016435, 0.12874879539567352, 0.1366167237441639, 0.12337875134897236, 0.12580589180781776, 0.1548128499241882, 0.10254182328251304, 0.09877578592643965, 0.11188349394499897, 0.115410627577054, 0.10139320577439392, 0.1157815678967985, 0.09823997644657634, 0.09991592906697566, 0.09432601161918153, 0.9574263797237311, 0.958702486982407, 0.9534294724550889, 0.9294694535113723, 0.9508393687110941, 0.9482063340953742, 0.9513628392924736, 0.9433729748164752, 0.9446334022766291, 0.3016768831916937, 0.3008783957714237, 0.2946178088739976, 0.3001206319854943, 0.27418331758910264, 0.29462316460603666, 0.2540574835680549, 0.24324574933105425, 0.27245056122245104, 0.3698158328794179, 0.24638311802788693, 0.2751454099555931, 0.29309257975460146, 0.2676208389067255, 0.270855091314088, 0.21774858730547875, 0.25559557068226557, 0.3053271890443291, 0.15637831369039845, 0.14678569894118332, 0.16409334048414914, 0.16140958542171024, 0.14883427437487007, 0.16049072711011558, 0.1467847464379871, 0.171351036534668, 0.25803489912508715, 0.14319390902443663, 0.19440353409127775, 0.1455702080636282, 0.16455913978863335, 0.1650816104288113, 0.13759681126199652, 0.1695484061128425, 0.12510297008970084, 0.17478542164265076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015119711349025455, 9.999999999998899e-05, 9.999999999998899e-05, 0.016964948572184557, 0.0823706646983966, 0.04304448102683123, 0.09884988191747612, 0.07127395601448006, 0.046757327334463694, 0.04171055517262934, 0.11428563830344629, 0.09273667268803987, 0.1346577662176629, 0.0002104371523652393, 9.999999999998899e-05, 0.08362654425616056, 0.00135581313305011, 9.999999999998899e-05, 0.004767512446268496, 0.002077462324274193, 0.023447795203895616, 9.999999999998899e-05, 0.10269905982845973, 0.10783774231928656, 0.11412468725215785, 0.12284454634404707, 0.12524057031165792, 0.12281580163403727, 0.08811778359417877, 0.10607740576072211, 0.08787008947893626, 0.4508938524648439, 0.45311565361609685, 0.48190771573419855, 0.4565335423461201, 0.47990487969144024, 0.4384652438639073, 0.4650035108978865, 0.462358269624617, 0.47551968769119446, 0.08363769644491514, 0.08270242843392062, 0.07839318827070674, 0.061372504437722686, 0.08409468428791456, 0.079274837181741, 0.08298967309357708, 0.07343329858691428, 0.07786790725070336, 0.13208247565864328, 0.159439110190152, 0.148777158142686, 0.15316957437116419, 0.12781182352335196, 0.13819523493727925, 0.1278952868039056, 0.10694057824612502, 0.13636819789044985, 0.2228388279673591, 0.20788850986569674, 0.2058759603335527, 0.2588119421584121, 0.26353112822548763, 0.21271912790116632, 0.23010441139470872, 0.2165299214505001, 0.21018604352271952, 0.15823966603297246, 0.17414912376920966, 0.17022993420472887, 0.1917188475226087, 0.1603122741786146, 0.1775973847672525, 0.14380381641325546, 0.14199540880502737, 0.15097069439878852, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.2602151077428243, 0.18818193618928403, 0.18523068745910343, 0.202744916894521, 0.19918970629905142, 0.19335812449612877, 0.18512804917982617, 0.1891436485757073, 0.19377604674461235, 0.1918772414852833, 0.16495461881666884, 0.1845743178521838, 0.28655062871703896, 0.334899768281839, 0.17497240915685475, 0.37627257236114275, 0.4132136869854689, 0.1782203985091284, 0.1634488672736013, 0.21239634718092326, 0.2826710628497674, 0.18292177330734982, 0.1649268657995473, 0.15380128126594483, 0.1800482796597238, 0.22570530166004132, 0.2834436498545536, 0.15969561872701343, 0.17356160151890254, 0.15864441969106757, 0.1918834991814926, 0.14040177942409449, 0.16993381115828166, 0.18855821815408136, 0.17433497077789029, 0.16849958768207274, 0.16810493705906426, 0.08691569993369863, 0.08720556494034648, 0.07077507151714912, 0.06376823565648482, 0.0720382933653887, 0.09104745657222524, 0.07225086510590684, 0.082503760421904, 0.0721932490936571]}, "mutation_prompt": null}
