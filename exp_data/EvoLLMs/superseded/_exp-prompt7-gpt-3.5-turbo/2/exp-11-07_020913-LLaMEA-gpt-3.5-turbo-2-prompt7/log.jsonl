{"id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 0, "fitness": 0.12615916709563368, "feedback": "The algorithm FusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "bf8f9b13-a170-4d9e-bf68-67fa8c32d89a", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Fusion Swarm Optimization by optimizing initialization and consolidation of fitness evaluation.", "configspace": "", "generation": 1, "fitness": 0.10263728667416151, "feedback": "The algorithm ImprovedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.18.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.4785851918204901, 0.06432772651221763, 0.22492847889378742, 0.35106779685144407, 0.07894169900257297, 0.33837038017504817, 0.479255894064736, 0.07431300570909605, 0.3276323372698242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028147380359596408, 0.01467079663371329, 0.0270911367642237, 0.09815574502220248, 0.0012186513362246743, 0.04065590377391615, 0.05159070752030426, 9.999999999998899e-05, 0.038468350139264085, 0.028931906618332115, 9.999999999998899e-05, 0.015216570526917494, 0.019856259043667168, 0.0004952459975243739, 0.009522574538355144, 0.04053391216075797, 9.999999999998899e-05, 0.01665023775767982, 0.9893642560190473, 0.9941493117412633, 0.9835091747279648, 0.9885760322287744, 0.11422622447608011, 0.9773804448995382, 0.9839672734128213, 0.15956042709176543, 0.9801738511390591, 0.013436303546299655, 9.999999999998899e-05, 0.029121920985923144, 9.999999999998899e-05, 0.00031549654350837564, 0.09213032838025159, 9.999999999998899e-05, 0.011293333694524565, 0.0909931057382759, 0.1315322923807022, 0.03775594762470191, 0.1426178360034701, 0.15533012196588136, 0.02725496812965944, 0.06916187312161604, 0.11308596965045858, 0.05931056463008866, 0.09996795557621663, 0.1291521260876891, 9.999999999998899e-05, 9.999999999998899e-05, 0.11998364669769768, 9.999999999998899e-05, 9.999999999998899e-05, 0.14321629649496903, 9.999999999998899e-05, 0.040566274836765115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12457389159319243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017821094033329765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03611891539033418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11300925422913877, 9.999999999998899e-05, 0.0530084541297563, 0.060539176000614536, 9.999999999998899e-05, 0.03089599949472921, 0.0038818319878176633, 9.999999999998899e-05, 0.029967653485201473, 0.11069119867540944, 0.13879659513922615, 0.20881354060812185, 0.21620354847652667, 0.09708865527373767, 0.17948354229938346, 0.3714527478256454, 0.09716408355800721, 0.16487373321444243, 0.006361289893393796, 9.999999999998899e-05, 0.018989371483764783, 0.022013838708676348, 9.999999999998899e-05, 0.05259069081834733, 0.03731643766163617, 9.999999999998899e-05, 0.04463388458086681, 0.07037543064596374, 0.08609370886951495, 0.08810396189903624, 0.09855305120349966, 0.10852972522114013, 0.11406011486990597, 0.08808199726801991, 0.06064507323521173, 0.12052667397816352, 0.13060387615216662, 0.0962505644704219, 0.14352810184653642, 0.1591614233167895, 0.1138073754026484, 0.13270085560653455, 0.12180272177394413, 0.17377774300845283, 0.174657112819123, 0.08293997640249873, 0.034008147686441226, 0.13838479483603783, 0.12823903257739022, 0.06406947898089654, 0.09637038814869192, 0.08969268270864872, 0.0997711199450243, 0.0992457540369942, 0.11943364695601921, 0.09388200728521401, 0.1534217633464826, 0.11645082599284706, 0.07855245954393053, 0.1408278992272053, 0.15118562191905605, 0.07872931414554718, 0.1651287355047849, 0.1541943500121199, 9.999999999998899e-05, 9.999999999998899e-05, 0.16363309520964753, 9.999999999998899e-05, 0.1562047711045863, 0.1513827961645886, 9.999999999998899e-05, 0.15931769042367228, 0.08254543067693665, 0.07466602457976645, 0.09942041391347078, 0.1515460687819803, 0.1207914665021157, 0.11446848539734888, 0.09200561064297341, 0.09643604708838482, 0.0963337776039922, 0.24221314928654392, 0.10051730792859848, 0.17222008222502116, 0.0964634924653186, 0.047217988911599784, 0.19072451324693862, 0.11077395359844155, 0.04019044166964181, 0.10440804948255589, 0.15823721702839744, 0.128372137474824, 0.14763022729669195, 0.17079128076585226, 0.11402400224796383, 0.15063556409485412, 0.1630724935274278, 0.11383213438624773, 0.14689007985489466, 0.04489689372992256, 0.015916393435176368, 0.0336416103865782, 0.035509342744885375, 0.03425093938292756, 0.047203551047218184, 0.028004831993050594, 9.999999999998899e-05, 0.03902637959674027]}, "mutation_prompt": null}
{"id": "cb43f93b-5553-497f-9d13-1c2e07e6ddb5", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "4d32f6c8-e123-4cf9-890d-326e82dfd117", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "42bc43ea-5b73-42f4-9e5b-a078eeba3cfd", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "44cf3631-23a9-460c-af28-39484798ce52", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget, self.dim, self.num_particles, self.alpha, self.beta, self.gamma = budget, dim, num_particles, alpha, beta, gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_process():\n            nonlocal best_global_pos\n            r1, r2 = np.random.rand(2)\n            velocity[:] = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population[:] += velocity\n\n        population, velocity = initialize_particles(), np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            update_process()\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with streamlined velocity update and enhanced population initialization.", "configspace": "", "generation": 5, "fitness": 0.10263728667416151, "feedback": "The algorithm OptimizedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.18.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.4785851918204901, 0.06432772651221763, 0.22492847889378742, 0.35106779685144407, 0.07894169900257297, 0.33837038017504817, 0.479255894064736, 0.07431300570909605, 0.3276323372698242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028147380359596408, 0.01467079663371329, 0.0270911367642237, 0.09815574502220248, 0.0012186513362246743, 0.04065590377391615, 0.05159070752030426, 9.999999999998899e-05, 0.038468350139264085, 0.028931906618332115, 9.999999999998899e-05, 0.015216570526917494, 0.019856259043667168, 0.0004952459975243739, 0.009522574538355144, 0.04053391216075797, 9.999999999998899e-05, 0.01665023775767982, 0.9893642560190473, 0.9941493117412633, 0.9835091747279648, 0.9885760322287744, 0.11422622447608011, 0.9773804448995382, 0.9839672734128213, 0.15956042709176543, 0.9801738511390591, 0.013436303546299655, 9.999999999998899e-05, 0.029121920985923144, 9.999999999998899e-05, 0.00031549654350837564, 0.09213032838025159, 9.999999999998899e-05, 0.011293333694524565, 0.0909931057382759, 0.1315322923807022, 0.03775594762470191, 0.1426178360034701, 0.15533012196588136, 0.02725496812965944, 0.06916187312161604, 0.11308596965045858, 0.05931056463008866, 0.09996795557621663, 0.1291521260876891, 9.999999999998899e-05, 9.999999999998899e-05, 0.11998364669769768, 9.999999999998899e-05, 9.999999999998899e-05, 0.14321629649496903, 9.999999999998899e-05, 0.040566274836765115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12457389159319243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017821094033329765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03611891539033418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11300925422913877, 9.999999999998899e-05, 0.0530084541297563, 0.060539176000614536, 9.999999999998899e-05, 0.03089599949472921, 0.0038818319878176633, 9.999999999998899e-05, 0.029967653485201473, 0.11069119867540944, 0.13879659513922615, 0.20881354060812185, 0.21620354847652667, 0.09708865527373767, 0.17948354229938346, 0.3714527478256454, 0.09716408355800721, 0.16487373321444243, 0.006361289893393796, 9.999999999998899e-05, 0.018989371483764783, 0.022013838708676348, 9.999999999998899e-05, 0.05259069081834733, 0.03731643766163617, 9.999999999998899e-05, 0.04463388458086681, 0.07037543064596374, 0.08609370886951495, 0.08810396189903624, 0.09855305120349966, 0.10852972522114013, 0.11406011486990597, 0.08808199726801991, 0.06064507323521173, 0.12052667397816352, 0.13060387615216662, 0.0962505644704219, 0.14352810184653642, 0.1591614233167895, 0.1138073754026484, 0.13270085560653455, 0.12180272177394413, 0.17377774300845283, 0.174657112819123, 0.08293997640249873, 0.034008147686441226, 0.13838479483603783, 0.12823903257739022, 0.06406947898089654, 0.09637038814869192, 0.08969268270864872, 0.0997711199450243, 0.0992457540369942, 0.11943364695601921, 0.09388200728521401, 0.1534217633464826, 0.11645082599284706, 0.07855245954393053, 0.1408278992272053, 0.15118562191905605, 0.07872931414554718, 0.1651287355047849, 0.1541943500121199, 9.999999999998899e-05, 9.999999999998899e-05, 0.16363309520964753, 9.999999999998899e-05, 0.1562047711045863, 0.1513827961645886, 9.999999999998899e-05, 0.15931769042367228, 0.08254543067693665, 0.07466602457976645, 0.09942041391347078, 0.1515460687819803, 0.1207914665021157, 0.11446848539734888, 0.09200561064297341, 0.09643604708838482, 0.0963337776039922, 0.24221314928654392, 0.10051730792859848, 0.17222008222502116, 0.0964634924653186, 0.047217988911599784, 0.19072451324693862, 0.11077395359844155, 0.04019044166964181, 0.10440804948255589, 0.15823721702839744, 0.128372137474824, 0.14763022729669195, 0.17079128076585226, 0.11402400224796383, 0.15063556409485412, 0.1630724935274278, 0.11383213438624773, 0.14689007985489466, 0.04489689372992256, 0.015916393435176368, 0.0336416103865782, 0.035509342744885375, 0.03425093938292756, 0.047203551047218184, 0.028004831993050594, 9.999999999998899e-05, 0.03902637959674027]}, "mutation_prompt": null}
{"id": "b6757471-df80-4665-b7a2-ddafd8ec94c3", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm by minimizing unnecessary variable assignments and consolidating repeated operations.", "configspace": "", "generation": 6, "fitness": 0.10263728667416151, "feedback": "The algorithm FusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.18.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.4785851918204901, 0.06432772651221763, 0.22492847889378742, 0.35106779685144407, 0.07894169900257297, 0.33837038017504817, 0.479255894064736, 0.07431300570909605, 0.3276323372698242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028147380359596408, 0.01467079663371329, 0.0270911367642237, 0.09815574502220248, 0.0012186513362246743, 0.04065590377391615, 0.05159070752030426, 9.999999999998899e-05, 0.038468350139264085, 0.028931906618332115, 9.999999999998899e-05, 0.015216570526917494, 0.019856259043667168, 0.0004952459975243739, 0.009522574538355144, 0.04053391216075797, 9.999999999998899e-05, 0.01665023775767982, 0.9893642560190473, 0.9941493117412633, 0.9835091747279648, 0.9885760322287744, 0.11422622447608011, 0.9773804448995382, 0.9839672734128213, 0.15956042709176543, 0.9801738511390591, 0.013436303546299655, 9.999999999998899e-05, 0.029121920985923144, 9.999999999998899e-05, 0.00031549654350837564, 0.09213032838025159, 9.999999999998899e-05, 0.011293333694524565, 0.0909931057382759, 0.1315322923807022, 0.03775594762470191, 0.1426178360034701, 0.15533012196588136, 0.02725496812965944, 0.06916187312161604, 0.11308596965045858, 0.05931056463008866, 0.09996795557621663, 0.1291521260876891, 9.999999999998899e-05, 9.999999999998899e-05, 0.11998364669769768, 9.999999999998899e-05, 9.999999999998899e-05, 0.14321629649496903, 9.999999999998899e-05, 0.040566274836765115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12457389159319243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017821094033329765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03611891539033418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11300925422913877, 9.999999999998899e-05, 0.0530084541297563, 0.060539176000614536, 9.999999999998899e-05, 0.03089599949472921, 0.0038818319878176633, 9.999999999998899e-05, 0.029967653485201473, 0.11069119867540944, 0.13879659513922615, 0.20881354060812185, 0.21620354847652667, 0.09708865527373767, 0.17948354229938346, 0.3714527478256454, 0.09716408355800721, 0.16487373321444243, 0.006361289893393796, 9.999999999998899e-05, 0.018989371483764783, 0.022013838708676348, 9.999999999998899e-05, 0.05259069081834733, 0.03731643766163617, 9.999999999998899e-05, 0.04463388458086681, 0.07037543064596374, 0.08609370886951495, 0.08810396189903624, 0.09855305120349966, 0.10852972522114013, 0.11406011486990597, 0.08808199726801991, 0.06064507323521173, 0.12052667397816352, 0.13060387615216662, 0.0962505644704219, 0.14352810184653642, 0.1591614233167895, 0.1138073754026484, 0.13270085560653455, 0.12180272177394413, 0.17377774300845283, 0.174657112819123, 0.08293997640249873, 0.034008147686441226, 0.13838479483603783, 0.12823903257739022, 0.06406947898089654, 0.09637038814869192, 0.08969268270864872, 0.0997711199450243, 0.0992457540369942, 0.11943364695601921, 0.09388200728521401, 0.1534217633464826, 0.11645082599284706, 0.07855245954393053, 0.1408278992272053, 0.15118562191905605, 0.07872931414554718, 0.1651287355047849, 0.1541943500121199, 9.999999999998899e-05, 9.999999999998899e-05, 0.16363309520964753, 9.999999999998899e-05, 0.1562047711045863, 0.1513827961645886, 9.999999999998899e-05, 0.15931769042367228, 0.08254543067693665, 0.07466602457976645, 0.09942041391347078, 0.1515460687819803, 0.1207914665021157, 0.11446848539734888, 0.09200561064297341, 0.09643604708838482, 0.0963337776039922, 0.24221314928654392, 0.10051730792859848, 0.17222008222502116, 0.0964634924653186, 0.047217988911599784, 0.19072451324693862, 0.11077395359844155, 0.04019044166964181, 0.10440804948255589, 0.15823721702839744, 0.128372137474824, 0.14763022729669195, 0.17079128076585226, 0.11402400224796383, 0.15063556409485412, 0.1630724935274278, 0.11383213438624773, 0.14689007985489466, 0.04489689372992256, 0.015916393435176368, 0.0336416103865782, 0.035509342744885375, 0.03425093938292756, 0.047203551047218184, 0.028004831993050594, 9.999999999998899e-05, 0.03902637959674027]}, "mutation_prompt": null}
{"id": "da46e0e7-903c-4e76-8210-450c7e58d889", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "ec97da9d-8fa2-468e-b237-0c13e902b400", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "66569fc4-b858-4189-913e-7795d1b2112a", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n        self.population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        self.velocity = np.zeros((self.num_particles, self.dim))\n\n    def __call__(self, func):\n        fitness = np.array([func(individual) for individual in self.population])\n        best_global_pos = self.population[np.argmin(fitness)]\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2)\n            self.velocity = self.alpha * self.velocity + self.beta * r1 * (best_global_pos - self.population) + self.gamma * r2 * (self.population - self.population.mean(axis=0))\n            self.population += self.velocity\n            fitness = np.array([func(individual) for individual in self.population])\n            best_global_pos = self.population[np.argmin(fitness)]\n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "Optimizing data structure and simplifying control flow in Fusion Swarm Optimization algorithm for better performance.", "configspace": "", "generation": 9, "fitness": 0.10263728667416151, "feedback": "The algorithm FusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.18.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.4785851918204901, 0.06432772651221763, 0.22492847889378742, 0.35106779685144407, 0.07894169900257297, 0.33837038017504817, 0.479255894064736, 0.07431300570909605, 0.3276323372698242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028147380359596408, 0.01467079663371329, 0.0270911367642237, 0.09815574502220248, 0.0012186513362246743, 0.04065590377391615, 0.05159070752030426, 9.999999999998899e-05, 0.038468350139264085, 0.028931906618332115, 9.999999999998899e-05, 0.015216570526917494, 0.019856259043667168, 0.0004952459975243739, 0.009522574538355144, 0.04053391216075797, 9.999999999998899e-05, 0.01665023775767982, 0.9893642560190473, 0.9941493117412633, 0.9835091747279648, 0.9885760322287744, 0.11422622447608011, 0.9773804448995382, 0.9839672734128213, 0.15956042709176543, 0.9801738511390591, 0.013436303546299655, 9.999999999998899e-05, 0.029121920985923144, 9.999999999998899e-05, 0.00031549654350837564, 0.09213032838025159, 9.999999999998899e-05, 0.011293333694524565, 0.0909931057382759, 0.1315322923807022, 0.03775594762470191, 0.1426178360034701, 0.15533012196588136, 0.02725496812965944, 0.06916187312161604, 0.11308596965045858, 0.05931056463008866, 0.09996795557621663, 0.1291521260876891, 9.999999999998899e-05, 9.999999999998899e-05, 0.11998364669769768, 9.999999999998899e-05, 9.999999999998899e-05, 0.14321629649496903, 9.999999999998899e-05, 0.040566274836765115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12457389159319243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017821094033329765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03611891539033418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11300925422913877, 9.999999999998899e-05, 0.0530084541297563, 0.060539176000614536, 9.999999999998899e-05, 0.03089599949472921, 0.0038818319878176633, 9.999999999998899e-05, 0.029967653485201473, 0.11069119867540944, 0.13879659513922615, 0.20881354060812185, 0.21620354847652667, 0.09708865527373767, 0.17948354229938346, 0.3714527478256454, 0.09716408355800721, 0.16487373321444243, 0.006361289893393796, 9.999999999998899e-05, 0.018989371483764783, 0.022013838708676348, 9.999999999998899e-05, 0.05259069081834733, 0.03731643766163617, 9.999999999998899e-05, 0.04463388458086681, 0.07037543064596374, 0.08609370886951495, 0.08810396189903624, 0.09855305120349966, 0.10852972522114013, 0.11406011486990597, 0.08808199726801991, 0.06064507323521173, 0.12052667397816352, 0.13060387615216662, 0.0962505644704219, 0.14352810184653642, 0.1591614233167895, 0.1138073754026484, 0.13270085560653455, 0.12180272177394413, 0.17377774300845283, 0.174657112819123, 0.08293997640249873, 0.034008147686441226, 0.13838479483603783, 0.12823903257739022, 0.06406947898089654, 0.09637038814869192, 0.08969268270864872, 0.0997711199450243, 0.0992457540369942, 0.11943364695601921, 0.09388200728521401, 0.1534217633464826, 0.11645082599284706, 0.07855245954393053, 0.1408278992272053, 0.15118562191905605, 0.07872931414554718, 0.1651287355047849, 0.1541943500121199, 9.999999999998899e-05, 9.999999999998899e-05, 0.16363309520964753, 9.999999999998899e-05, 0.1562047711045863, 0.1513827961645886, 9.999999999998899e-05, 0.15931769042367228, 0.08254543067693665, 0.07466602457976645, 0.09942041391347078, 0.1515460687819803, 0.1207914665021157, 0.11446848539734888, 0.09200561064297341, 0.09643604708838482, 0.0963337776039922, 0.24221314928654392, 0.10051730792859848, 0.17222008222502116, 0.0964634924653186, 0.047217988911599784, 0.19072451324693862, 0.11077395359844155, 0.04019044166964181, 0.10440804948255589, 0.15823721702839744, 0.128372137474824, 0.14763022729669195, 0.17079128076585226, 0.11402400224796383, 0.15063556409485412, 0.1630724935274278, 0.11383213438624773, 0.14689007985489466, 0.04489689372992256, 0.015916393435176368, 0.0336416103865782, 0.035509342744885375, 0.03425093938292756, 0.047203551047218184, 0.028004831993050594, 9.999999999998899e-05, 0.03902637959674027]}, "mutation_prompt": null}
{"id": "7a67009c-9239-4775-ae2c-ab5806167574", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget, self.dim, self.num_particles, self.alpha, self.beta, self.gamma = budget, dim, num_particles, alpha, beta, gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n\n        for _ in range(self.budget - self.num_particles):\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n            r1, r2 = np.random.rand(2)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n        \n        return population[np.argmin([func(individual) for individual in population])]", "name": "FusionSwarmOptimization", "description": "Optimization of data structures and control flow for improved performance.", "configspace": "", "generation": 10, "fitness": 0.10263728667416151, "feedback": "The algorithm FusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.18.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.4785851918204901, 0.06432772651221763, 0.22492847889378742, 0.35106779685144407, 0.07894169900257297, 0.33837038017504817, 0.479255894064736, 0.07431300570909605, 0.3276323372698242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028147380359596408, 0.01467079663371329, 0.0270911367642237, 0.09815574502220248, 0.0012186513362246743, 0.04065590377391615, 0.05159070752030426, 9.999999999998899e-05, 0.038468350139264085, 0.028931906618332115, 9.999999999998899e-05, 0.015216570526917494, 0.019856259043667168, 0.0004952459975243739, 0.009522574538355144, 0.04053391216075797, 9.999999999998899e-05, 0.01665023775767982, 0.9893642560190473, 0.9941493117412633, 0.9835091747279648, 0.9885760322287744, 0.11422622447608011, 0.9773804448995382, 0.9839672734128213, 0.15956042709176543, 0.9801738511390591, 0.013436303546299655, 9.999999999998899e-05, 0.029121920985923144, 9.999999999998899e-05, 0.00031549654350837564, 0.09213032838025159, 9.999999999998899e-05, 0.011293333694524565, 0.0909931057382759, 0.1315322923807022, 0.03775594762470191, 0.1426178360034701, 0.15533012196588136, 0.02725496812965944, 0.06916187312161604, 0.11308596965045858, 0.05931056463008866, 0.09996795557621663, 0.1291521260876891, 9.999999999998899e-05, 9.999999999998899e-05, 0.11998364669769768, 9.999999999998899e-05, 9.999999999998899e-05, 0.14321629649496903, 9.999999999998899e-05, 0.040566274836765115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12457389159319243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017821094033329765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03611891539033418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11300925422913877, 9.999999999998899e-05, 0.0530084541297563, 0.060539176000614536, 9.999999999998899e-05, 0.03089599949472921, 0.0038818319878176633, 9.999999999998899e-05, 0.029967653485201473, 0.11069119867540944, 0.13879659513922615, 0.20881354060812185, 0.21620354847652667, 0.09708865527373767, 0.17948354229938346, 0.3714527478256454, 0.09716408355800721, 0.16487373321444243, 0.006361289893393796, 9.999999999998899e-05, 0.018989371483764783, 0.022013838708676348, 9.999999999998899e-05, 0.05259069081834733, 0.03731643766163617, 9.999999999998899e-05, 0.04463388458086681, 0.07037543064596374, 0.08609370886951495, 0.08810396189903624, 0.09855305120349966, 0.10852972522114013, 0.11406011486990597, 0.08808199726801991, 0.06064507323521173, 0.12052667397816352, 0.13060387615216662, 0.0962505644704219, 0.14352810184653642, 0.1591614233167895, 0.1138073754026484, 0.13270085560653455, 0.12180272177394413, 0.17377774300845283, 0.174657112819123, 0.08293997640249873, 0.034008147686441226, 0.13838479483603783, 0.12823903257739022, 0.06406947898089654, 0.09637038814869192, 0.08969268270864872, 0.0997711199450243, 0.0992457540369942, 0.11943364695601921, 0.09388200728521401, 0.1534217633464826, 0.11645082599284706, 0.07855245954393053, 0.1408278992272053, 0.15118562191905605, 0.07872931414554718, 0.1651287355047849, 0.1541943500121199, 9.999999999998899e-05, 9.999999999998899e-05, 0.16363309520964753, 9.999999999998899e-05, 0.1562047711045863, 0.1513827961645886, 9.999999999998899e-05, 0.15931769042367228, 0.08254543067693665, 0.07466602457976645, 0.09942041391347078, 0.1515460687819803, 0.1207914665021157, 0.11446848539734888, 0.09200561064297341, 0.09643604708838482, 0.0963337776039922, 0.24221314928654392, 0.10051730792859848, 0.17222008222502116, 0.0964634924653186, 0.047217988911599784, 0.19072451324693862, 0.11077395359844155, 0.04019044166964181, 0.10440804948255589, 0.15823721702839744, 0.128372137474824, 0.14763022729669195, 0.17079128076585226, 0.11402400224796383, 0.15063556409485412, 0.1630724935274278, 0.11383213438624773, 0.14689007985489466, 0.04489689372992256, 0.015916393435176368, 0.0336416103865782, 0.035509342744885375, 0.03425093938292756, 0.047203551047218184, 0.028004831993050594, 9.999999999998899e-05, 0.03902637959674027]}, "mutation_prompt": null}
{"id": "eee85ce1-fd56-4088-826f-1f76ba36596a", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget, self.dim, self.num_particles, self.alpha, self.beta, self.gamma = budget, dim, num_particles, alpha, beta, gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array(list(map(func, population)))\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - np.mean(population, axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved array indexing for enhanced performance.", "configspace": "", "generation": 11, "fitness": 0.12615916709563368, "feedback": "The algorithm FusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "dea43faf-1822-4bf4-ba8a-9d0cc9b5d593", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget, self.dim, self.num_particles, self.alpha, self.beta, self.gamma = budget, dim, num_particles, alpha, beta, gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - population.mean(axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "Optimization of Fusion Swarm Optimization algorithm through vectorized computation and consolidated operations.", "configspace": "", "generation": 12, "fitness": 0.10263728667416151, "feedback": "The algorithm FusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.18.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.4785851918204901, 0.06432772651221763, 0.22492847889378742, 0.35106779685144407, 0.07894169900257297, 0.33837038017504817, 0.479255894064736, 0.07431300570909605, 0.3276323372698242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028147380359596408, 0.01467079663371329, 0.0270911367642237, 0.09815574502220248, 0.0012186513362246743, 0.04065590377391615, 0.05159070752030426, 9.999999999998899e-05, 0.038468350139264085, 0.028931906618332115, 9.999999999998899e-05, 0.015216570526917494, 0.019856259043667168, 0.0004952459975243739, 0.009522574538355144, 0.04053391216075797, 9.999999999998899e-05, 0.01665023775767982, 0.9893642560190473, 0.9941493117412633, 0.9835091747279648, 0.9885760322287744, 0.11422622447608011, 0.9773804448995382, 0.9839672734128213, 0.15956042709176543, 0.9801738511390591, 0.013436303546299655, 9.999999999998899e-05, 0.029121920985923144, 9.999999999998899e-05, 0.00031549654350837564, 0.09213032838025159, 9.999999999998899e-05, 0.011293333694524565, 0.0909931057382759, 0.1315322923807022, 0.03775594762470191, 0.1426178360034701, 0.15533012196588136, 0.02725496812965944, 0.06916187312161604, 0.11308596965045858, 0.05931056463008866, 0.09996795557621663, 0.1291521260876891, 9.999999999998899e-05, 9.999999999998899e-05, 0.11998364669769768, 9.999999999998899e-05, 9.999999999998899e-05, 0.14321629649496903, 9.999999999998899e-05, 0.040566274836765115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12457389159319243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017821094033329765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03611891539033418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11300925422913877, 9.999999999998899e-05, 0.0530084541297563, 0.060539176000614536, 9.999999999998899e-05, 0.03089599949472921, 0.0038818319878176633, 9.999999999998899e-05, 0.029967653485201473, 0.11069119867540944, 0.13879659513922615, 0.20881354060812185, 0.21620354847652667, 0.09708865527373767, 0.17948354229938346, 0.3714527478256454, 0.09716408355800721, 0.16487373321444243, 0.006361289893393796, 9.999999999998899e-05, 0.018989371483764783, 0.022013838708676348, 9.999999999998899e-05, 0.05259069081834733, 0.03731643766163617, 9.999999999998899e-05, 0.04463388458086681, 0.07037543064596374, 0.08609370886951495, 0.08810396189903624, 0.09855305120349966, 0.10852972522114013, 0.11406011486990597, 0.08808199726801991, 0.06064507323521173, 0.12052667397816352, 0.13060387615216662, 0.0962505644704219, 0.14352810184653642, 0.1591614233167895, 0.1138073754026484, 0.13270085560653455, 0.12180272177394413, 0.17377774300845283, 0.174657112819123, 0.08293997640249873, 0.034008147686441226, 0.13838479483603783, 0.12823903257739022, 0.06406947898089654, 0.09637038814869192, 0.08969268270864872, 0.0997711199450243, 0.0992457540369942, 0.11943364695601921, 0.09388200728521401, 0.1534217633464826, 0.11645082599284706, 0.07855245954393053, 0.1408278992272053, 0.15118562191905605, 0.07872931414554718, 0.1651287355047849, 0.1541943500121199, 9.999999999998899e-05, 9.999999999998899e-05, 0.16363309520964753, 9.999999999998899e-05, 0.1562047711045863, 0.1513827961645886, 9.999999999998899e-05, 0.15931769042367228, 0.08254543067693665, 0.07466602457976645, 0.09942041391347078, 0.1515460687819803, 0.1207914665021157, 0.11446848539734888, 0.09200561064297341, 0.09643604708838482, 0.0963337776039922, 0.24221314928654392, 0.10051730792859848, 0.17222008222502116, 0.0964634924653186, 0.047217988911599784, 0.19072451324693862, 0.11077395359844155, 0.04019044166964181, 0.10440804948255589, 0.15823721702839744, 0.128372137474824, 0.14763022729669195, 0.17079128076585226, 0.11402400224796383, 0.15063556409485412, 0.1630724935274278, 0.11383213438624773, 0.14689007985489466, 0.04489689372992256, 0.015916393435176368, 0.0336416103865782, 0.035509342744885375, 0.03425093938292756, 0.047203551047218184, 0.028004831993050594, 9.999999999998899e-05, 0.03902637959674027]}, "mutation_prompt": null}
{"id": "59b1dd57-2e1a-4e1b-a51a-8c11f09bb49c", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "33c6f959-6064-41cd-b639-1b51459c8b28", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "7cd40096-bfba-481d-9f92-6d815fce1720", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "f1860d39-c582-49c8-b9ed-7f7b2b2068ea", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "5385c48e-2dd5-4f18-949f-ffad492d0ce5", "solution": "import numpy as np\n\nclass ImprovedFSO:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget, self.dim, self.num_particles, self.alpha, self.beta, self.gamma = budget, dim, num_particles, alpha, beta, gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n\n        def evaluate_fitness(population):\n            return np.array(list(map(func, population)))\n\n        def update_position_velocity(best_global_pos, population, velocity):\n            r = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r[0] * (best_global_pos - population[i]) + self.gamma * r[1] * (population[i] - np.mean(population, axis=0))\n                population[i] += velocity[i]\n\n        population, velocity = initialize_particles(), np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "ImprovedFSO", "description": "Improved Fusion Swarm Optimization algorithm with optimized control flow and simplified operations.", "configspace": "", "generation": 17, "fitness": 0.12615916709563368, "feedback": "The algorithm ImprovedFSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "f17124ed-666d-42c2-8477-7d5d4becef6f", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "3be2d4e9-a12f-466e-8536-2c92aa4be801", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget, self.dim, self.num_particles, self.alpha, self.beta, self.gamma = budget, dim, num_particles, alpha, beta, gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        evaluate_fitness = lambda pop: np.array([func(ind) for ind in pop])\n\n        best_global_pos = population[np.argmin(evaluate_fitness(population))]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - population.mean(axis=0))\n            population += velocity\n            best_global_pos = population[np.argmin(evaluate_fitness(population))]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Improved Fusion Swarm Optimization algorithm through optimized array operations and streamlined velocity update process.", "configspace": "", "generation": 19, "fitness": 0.10263728667416151, "feedback": "The algorithm OptimizedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.18.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.4785851918204901, 0.06432772651221763, 0.22492847889378742, 0.35106779685144407, 0.07894169900257297, 0.33837038017504817, 0.479255894064736, 0.07431300570909605, 0.3276323372698242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028147380359596408, 0.01467079663371329, 0.0270911367642237, 0.09815574502220248, 0.0012186513362246743, 0.04065590377391615, 0.05159070752030426, 9.999999999998899e-05, 0.038468350139264085, 0.028931906618332115, 9.999999999998899e-05, 0.015216570526917494, 0.019856259043667168, 0.0004952459975243739, 0.009522574538355144, 0.04053391216075797, 9.999999999998899e-05, 0.01665023775767982, 0.9893642560190473, 0.9941493117412633, 0.9835091747279648, 0.9885760322287744, 0.11422622447608011, 0.9773804448995382, 0.9839672734128213, 0.15956042709176543, 0.9801738511390591, 0.013436303546299655, 9.999999999998899e-05, 0.029121920985923144, 9.999999999998899e-05, 0.00031549654350837564, 0.09213032838025159, 9.999999999998899e-05, 0.011293333694524565, 0.0909931057382759, 0.1315322923807022, 0.03775594762470191, 0.1426178360034701, 0.15533012196588136, 0.02725496812965944, 0.06916187312161604, 0.11308596965045858, 0.05931056463008866, 0.09996795557621663, 0.1291521260876891, 9.999999999998899e-05, 9.999999999998899e-05, 0.11998364669769768, 9.999999999998899e-05, 9.999999999998899e-05, 0.14321629649496903, 9.999999999998899e-05, 0.040566274836765115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12457389159319243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017821094033329765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03611891539033418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11300925422913877, 9.999999999998899e-05, 0.0530084541297563, 0.060539176000614536, 9.999999999998899e-05, 0.03089599949472921, 0.0038818319878176633, 9.999999999998899e-05, 0.029967653485201473, 0.11069119867540944, 0.13879659513922615, 0.20881354060812185, 0.21620354847652667, 0.09708865527373767, 0.17948354229938346, 0.3714527478256454, 0.09716408355800721, 0.16487373321444243, 0.006361289893393796, 9.999999999998899e-05, 0.018989371483764783, 0.022013838708676348, 9.999999999998899e-05, 0.05259069081834733, 0.03731643766163617, 9.999999999998899e-05, 0.04463388458086681, 0.07037543064596374, 0.08609370886951495, 0.08810396189903624, 0.09855305120349966, 0.10852972522114013, 0.11406011486990597, 0.08808199726801991, 0.06064507323521173, 0.12052667397816352, 0.13060387615216662, 0.0962505644704219, 0.14352810184653642, 0.1591614233167895, 0.1138073754026484, 0.13270085560653455, 0.12180272177394413, 0.17377774300845283, 0.174657112819123, 0.08293997640249873, 0.034008147686441226, 0.13838479483603783, 0.12823903257739022, 0.06406947898089654, 0.09637038814869192, 0.08969268270864872, 0.0997711199450243, 0.0992457540369942, 0.11943364695601921, 0.09388200728521401, 0.1534217633464826, 0.11645082599284706, 0.07855245954393053, 0.1408278992272053, 0.15118562191905605, 0.07872931414554718, 0.1651287355047849, 0.1541943500121199, 9.999999999998899e-05, 9.999999999998899e-05, 0.16363309520964753, 9.999999999998899e-05, 0.1562047711045863, 0.1513827961645886, 9.999999999998899e-05, 0.15931769042367228, 0.08254543067693665, 0.07466602457976645, 0.09942041391347078, 0.1515460687819803, 0.1207914665021157, 0.11446848539734888, 0.09200561064297341, 0.09643604708838482, 0.0963337776039922, 0.24221314928654392, 0.10051730792859848, 0.17222008222502116, 0.0964634924653186, 0.047217988911599784, 0.19072451324693862, 0.11077395359844155, 0.04019044166964181, 0.10440804948255589, 0.15823721702839744, 0.128372137474824, 0.14763022729669195, 0.17079128076585226, 0.11402400224796383, 0.15063556409485412, 0.1630724935274278, 0.11383213438624773, 0.14689007985489466, 0.04489689372992256, 0.015916393435176368, 0.0336416103865782, 0.035509342744885375, 0.03425093938292756, 0.047203551047218184, 0.028004831993050594, 9.999999999998899e-05, 0.03902637959674027]}, "mutation_prompt": null}
{"id": "ec278467-2293-4ce6-aa66-6e28dfc64a28", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "897237e5-202a-4664-b8a1-47e297395bef", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "92db842d-c554-42dc-bd18-96592e33d062", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "3ffa7aff-d2ad-41a7-a572-d11d7b5352db", "solution": "import numpy as np\n\nclass EnhancedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget, self.dim, self.num_particles, self.alpha, self.beta, self.gamma = budget, dim, num_particles, alpha, beta, gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        \n        def update_position_velocity(best_global_pos):\n            nonlocal population, velocity\n            r1, r2 = np.random.rand(2)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - population.mean(axis=0))\n            population += velocity\n        \n        fitness = np.apply_along_axis(func, 1, population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos)\n            fitness = np.apply_along_axis(func, 1, population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "EnhancedFusionSwarmOptimization", "description": "Improving efficiency by vectorizing fitness evaluation and position updates.", "configspace": "", "generation": 23, "fitness": 0.10263728667416151, "feedback": "The algorithm EnhancedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.18.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.4785851918204901, 0.06432772651221763, 0.22492847889378742, 0.35106779685144407, 0.07894169900257297, 0.33837038017504817, 0.479255894064736, 0.07431300570909605, 0.3276323372698242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028147380359596408, 0.01467079663371329, 0.0270911367642237, 0.09815574502220248, 0.0012186513362246743, 0.04065590377391615, 0.05159070752030426, 9.999999999998899e-05, 0.038468350139264085, 0.028931906618332115, 9.999999999998899e-05, 0.015216570526917494, 0.019856259043667168, 0.0004952459975243739, 0.009522574538355144, 0.04053391216075797, 9.999999999998899e-05, 0.01665023775767982, 0.9893642560190473, 0.9941493117412633, 0.9835091747279648, 0.9885760322287744, 0.11422622447608011, 0.9773804448995382, 0.9839672734128213, 0.15956042709176543, 0.9801738511390591, 0.013436303546299655, 9.999999999998899e-05, 0.029121920985923144, 9.999999999998899e-05, 0.00031549654350837564, 0.09213032838025159, 9.999999999998899e-05, 0.011293333694524565, 0.0909931057382759, 0.1315322923807022, 0.03775594762470191, 0.1426178360034701, 0.15533012196588136, 0.02725496812965944, 0.06916187312161604, 0.11308596965045858, 0.05931056463008866, 0.09996795557621663, 0.1291521260876891, 9.999999999998899e-05, 9.999999999998899e-05, 0.11998364669769768, 9.999999999998899e-05, 9.999999999998899e-05, 0.14321629649496903, 9.999999999998899e-05, 0.040566274836765115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12457389159319243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017821094033329765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03611891539033418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11300925422913877, 9.999999999998899e-05, 0.0530084541297563, 0.060539176000614536, 9.999999999998899e-05, 0.03089599949472921, 0.0038818319878176633, 9.999999999998899e-05, 0.029967653485201473, 0.11069119867540944, 0.13879659513922615, 0.20881354060812185, 0.21620354847652667, 0.09708865527373767, 0.17948354229938346, 0.3714527478256454, 0.09716408355800721, 0.16487373321444243, 0.006361289893393796, 9.999999999998899e-05, 0.018989371483764783, 0.022013838708676348, 9.999999999998899e-05, 0.05259069081834733, 0.03731643766163617, 9.999999999998899e-05, 0.04463388458086681, 0.07037543064596374, 0.08609370886951495, 0.08810396189903624, 0.09855305120349966, 0.10852972522114013, 0.11406011486990597, 0.08808199726801991, 0.06064507323521173, 0.12052667397816352, 0.13060387615216662, 0.0962505644704219, 0.14352810184653642, 0.1591614233167895, 0.1138073754026484, 0.13270085560653455, 0.12180272177394413, 0.17377774300845283, 0.174657112819123, 0.08293997640249873, 0.034008147686441226, 0.13838479483603783, 0.12823903257739022, 0.06406947898089654, 0.09637038814869192, 0.08969268270864872, 0.0997711199450243, 0.0992457540369942, 0.11943364695601921, 0.09388200728521401, 0.1534217633464826, 0.11645082599284706, 0.07855245954393053, 0.1408278992272053, 0.15118562191905605, 0.07872931414554718, 0.1651287355047849, 0.1541943500121199, 9.999999999998899e-05, 9.999999999998899e-05, 0.16363309520964753, 9.999999999998899e-05, 0.1562047711045863, 0.1513827961645886, 9.999999999998899e-05, 0.15931769042367228, 0.08254543067693665, 0.07466602457976645, 0.09942041391347078, 0.1515460687819803, 0.1207914665021157, 0.11446848539734888, 0.09200561064297341, 0.09643604708838482, 0.0963337776039922, 0.24221314928654392, 0.10051730792859848, 0.17222008222502116, 0.0964634924653186, 0.047217988911599784, 0.19072451324693862, 0.11077395359844155, 0.04019044166964181, 0.10440804948255589, 0.15823721702839744, 0.128372137474824, 0.14763022729669195, 0.17079128076585226, 0.11402400224796383, 0.15063556409485412, 0.1630724935274278, 0.11383213438624773, 0.14689007985489466, 0.04489689372992256, 0.015916393435176368, 0.0336416103865782, 0.035509342744885375, 0.03425093938292756, 0.047203551047218184, 0.028004831993050594, 9.999999999998899e-05, 0.03902637959674027]}, "mutation_prompt": null}
{"id": "cc4cd7dc-157b-4fd6-bf29-f2811c35839b", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "f1edfe96-fcd4-480f-98d9-d08ef9223ae3", "solution": "import numpy as np\n\nclass EnhancedFSO:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget, self.dim, self.num_particles, self.alpha, self.beta, self.gamma = budget, dim, num_particles, alpha, beta, gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        evaluate_fitness = lambda pop: np.array([func(individual) for individual in pop])\n\n        for _ in range(self.budget - self.num_particles):\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n            r1, r2 = np.random.rand(2)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - population.mean(axis=0))\n            population += velocity\n        \n        return population[np.argmin(evaluate_fitness(population))]", "name": "EnhancedFSO", "description": "Enhanced Fusion Swarm Optimization algorithm by optimizing memory usage and simplifying velocity update calculations.", "configspace": "", "generation": 25, "fitness": 0.10263728667416151, "feedback": "The algorithm EnhancedFSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.18.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.4785851918204901, 0.06432772651221763, 0.22492847889378742, 0.35106779685144407, 0.07894169900257297, 0.33837038017504817, 0.479255894064736, 0.07431300570909605, 0.3276323372698242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028147380359596408, 0.01467079663371329, 0.0270911367642237, 0.09815574502220248, 0.0012186513362246743, 0.04065590377391615, 0.05159070752030426, 9.999999999998899e-05, 0.038468350139264085, 0.028931906618332115, 9.999999999998899e-05, 0.015216570526917494, 0.019856259043667168, 0.0004952459975243739, 0.009522574538355144, 0.04053391216075797, 9.999999999998899e-05, 0.01665023775767982, 0.9893642560190473, 0.9941493117412633, 0.9835091747279648, 0.9885760322287744, 0.11422622447608011, 0.9773804448995382, 0.9839672734128213, 0.15956042709176543, 0.9801738511390591, 0.013436303546299655, 9.999999999998899e-05, 0.029121920985923144, 9.999999999998899e-05, 0.00031549654350837564, 0.09213032838025159, 9.999999999998899e-05, 0.011293333694524565, 0.0909931057382759, 0.1315322923807022, 0.03775594762470191, 0.1426178360034701, 0.15533012196588136, 0.02725496812965944, 0.06916187312161604, 0.11308596965045858, 0.05931056463008866, 0.09996795557621663, 0.1291521260876891, 9.999999999998899e-05, 9.999999999998899e-05, 0.11998364669769768, 9.999999999998899e-05, 9.999999999998899e-05, 0.14321629649496903, 9.999999999998899e-05, 0.040566274836765115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12457389159319243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017821094033329765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03611891539033418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11300925422913877, 9.999999999998899e-05, 0.0530084541297563, 0.060539176000614536, 9.999999999998899e-05, 0.03089599949472921, 0.0038818319878176633, 9.999999999998899e-05, 0.029967653485201473, 0.11069119867540944, 0.13879659513922615, 0.20881354060812185, 0.21620354847652667, 0.09708865527373767, 0.17948354229938346, 0.3714527478256454, 0.09716408355800721, 0.16487373321444243, 0.006361289893393796, 9.999999999998899e-05, 0.018989371483764783, 0.022013838708676348, 9.999999999998899e-05, 0.05259069081834733, 0.03731643766163617, 9.999999999998899e-05, 0.04463388458086681, 0.07037543064596374, 0.08609370886951495, 0.08810396189903624, 0.09855305120349966, 0.10852972522114013, 0.11406011486990597, 0.08808199726801991, 0.06064507323521173, 0.12052667397816352, 0.13060387615216662, 0.0962505644704219, 0.14352810184653642, 0.1591614233167895, 0.1138073754026484, 0.13270085560653455, 0.12180272177394413, 0.17377774300845283, 0.174657112819123, 0.08293997640249873, 0.034008147686441226, 0.13838479483603783, 0.12823903257739022, 0.06406947898089654, 0.09637038814869192, 0.08969268270864872, 0.0997711199450243, 0.0992457540369942, 0.11943364695601921, 0.09388200728521401, 0.1534217633464826, 0.11645082599284706, 0.07855245954393053, 0.1408278992272053, 0.15118562191905605, 0.07872931414554718, 0.1651287355047849, 0.1541943500121199, 9.999999999998899e-05, 9.999999999998899e-05, 0.16363309520964753, 9.999999999998899e-05, 0.1562047711045863, 0.1513827961645886, 9.999999999998899e-05, 0.15931769042367228, 0.08254543067693665, 0.07466602457976645, 0.09942041391347078, 0.1515460687819803, 0.1207914665021157, 0.11446848539734888, 0.09200561064297341, 0.09643604708838482, 0.0963337776039922, 0.24221314928654392, 0.10051730792859848, 0.17222008222502116, 0.0964634924653186, 0.047217988911599784, 0.19072451324693862, 0.11077395359844155, 0.04019044166964181, 0.10440804948255589, 0.15823721702839744, 0.128372137474824, 0.14763022729669195, 0.17079128076585226, 0.11402400224796383, 0.15063556409485412, 0.1630724935274278, 0.11383213438624773, 0.14689007985489466, 0.04489689372992256, 0.015916393435176368, 0.0336416103865782, 0.035509342744885375, 0.03425093938292756, 0.047203551047218184, 0.028004831993050594, 9.999999999998899e-05, 0.03902637959674027]}, "mutation_prompt": null}
{"id": "2a189979-90f2-499d-9a0a-8e0aee8efe4d", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget, self.dim, self.num_particles, self.alpha, self.beta, self.gamma = budget, dim, num_particles, alpha, beta, gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        evaluate_fitness = lambda pop: np.array([func(ind) for ind in pop])\n        update_pos_vel = lambda best_pos, pop, vel: [vel[i] := self.alpha * vel[i] + self.beta * r1 * (best_pos - pop[i]) + self.gamma * r2 * (pop[i] - pop.mean(axis=0)) for i, (r1, r2) in enumerate(np.random.rand(2, self.num_particles))]\n        \n        for _ in range(self.budget - self.num_particles):\n            fitness = evaluate_fitness(population)\n            best_pos = population[np.argmin(fitness)]\n            update_pos_vel(best_pos, population, velocity)\n        \n        return population[np.argmin(fitness)]", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with streamlined operations for improved efficiency.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('cannot use assignment expressions with subscript', ('<string>', 11, 54, None)).", "error": "SyntaxError('cannot use assignment expressions with subscript', ('<string>', 11, 54, None))", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {}, "mutation_prompt": null}
{"id": "94146d0c-18f5-44f0-a12d-3ba0b4f0ab60", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n                fitness[i] = func(population[i])\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improve efficiency and readability by consolidating the fitness evaluation in the main loop.", "configspace": "", "generation": 27, "fitness": 0.12615916709563368, "feedback": "The algorithm ImprovedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "0b9ec3ce-5cd9-4658-aa19-4b94f75a3d40", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "a042f14b-c33e-483f-b360-54d0f01081c8", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "c8222eba-107d-41ed-bfc6-63192038c768", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "85363f28-a501-4854-9407-87e32fc29849", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget, self.dim, self.num_particles, self.alpha, self.beta, self.gamma = budget, dim, num_particles, alpha, beta, gamma\n\n    def __call__(self, func):\n        population, velocity = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim)), np.zeros((self.num_particles, self.dim))\n        evaluate_fitness = lambda pop: np.array([func(individual) for individual in pop])\n        update_position_velocity = lambda best_pos: [((velocity[i] := self.alpha * velocity[i] + self.beta * (r1 := np.random.rand()) * (best_pos - population[i]) + self.gamma * (r2 := np.random.rand()) * (population[i] - population.mean(axis=0))) or (population[i] += velocity[i])) for i in range(self.num_particles)]\n        \n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with enhanced memory efficiency and streamlined loop operations.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 10, 267, '        update_position_velocity = lambda best_pos: [((velocity[i] := self.alpha * velocity[i] + self.beta * (r1 := np.random.rand()) * (best_pos - population[i]) + self.gamma * (r2 := np.random.rand()) * (population[i] - population.mean(axis=0))) or (population[i] += velocity[i])) for i in range(self.num_particles)]\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 10, 267, '        update_position_velocity = lambda best_pos: [((velocity[i] := self.alpha * velocity[i] + self.beta * (r1 := np.random.rand()) * (best_pos - population[i]) + self.gamma * (r2 := np.random.rand()) * (population[i] - population.mean(axis=0))) or (population[i] += velocity[i])) for i in range(self.num_particles)]\\n'))", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {}, "mutation_prompt": null}
{"id": "5e4403ed-ce70-4eec-ac02-752b651779fa", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            velocity += self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - population.mean(axis=0))\n            population += velocity\n\n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization (FSO) algorithm with enhanced efficiency and performance.", "configspace": "", "generation": 32, "fitness": 0.08785588018648943, "feedback": "The algorithm FusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.20.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.08774815958588056, 0.0770588130072396, 0.204929884168367, 0.08952233024927114, 0.062138895920524906, 0.19539452488704034, 0.07795415841203734, 0.07431300570909605, 0.13773432694312282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 0.03114942831135814, 0.010643411704069683, 0.0012186513362246743, 0.023587988617243316, 0.018248263482334326, 9.999999999998899e-05, 0.02123865844110473, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.0004952459975243739, 0.018521957491923757, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005121966673923284, 0.9916931652824074, 0.9941486127753307, 0.9859228617623582, 0.9887610649443903, 0.9809512371131694, 0.9748862607729837, 0.989078604285098, 0.9840638158188367, 0.9851424361685416, 9.999999999998899e-05, 9.999999999998899e-05, 0.029319769879581514, 9.999999999998899e-05, 0.00031549654350837564, 0.045940832241871066, 9.999999999998899e-05, 0.011293333694524565, 0.021976002810216833, 0.10027683525177622, 0.03775594762470191, 0.08984977924349746, 0.1272232085193976, 0.02725496812965944, 0.06344320696607397, 0.036450453319020526, 0.05931056463008866, 0.061622769786783604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.13879659513922615, 0.17146600803684764, 0.10159365130943443, 0.09708865527373767, 0.1950566640531023, 0.16112956940342849, 0.09716408355800721, 0.1631387841752352, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025443078855652557, 0.006101769545772684, 9.999999999998899e-05, 0.033201390245959694, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.07037543064596374, 0.08609370886951495, 0.07205673260227108, 0.09855305120349966, 0.10852972522114013, 0.0777113402582218, 0.08808199726801991, 0.06064507323521173, 0.08460422503495335, 0.09606267484187503, 0.1066805658848905, 0.14352810184653642, 0.13800672315110074, 0.1138073754026484, 0.13969656859506485, 0.12028165949079228, 0.17377774300845283, 0.14017014919825177, 0.05202839006188986, 0.04132001167530086, 0.08789876773345173, 0.057769032239117446, 0.06406947898089654, 0.07688513869771174, 0.0837317855149382, 0.0997711199450243, 0.07109722171848065, 0.11943364695601921, 0.09388200728521401, 0.16619806910081458, 0.10289055837941885, 0.07855245954393053, 0.11156068360780502, 0.12245976138762271, 0.07872931414554718, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 0.08190896690685845, 9.999999999998899e-05, 9.999999999998899e-05, 0.13959766946174135, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06681004561493376, 0.07466602457976645, 0.10308546867255353, 0.09230094165316893, 0.1207914665021157, 0.12411359190753013, 0.07245568600050101, 0.09643604708838482, 0.11629862375296729, 0.24221314928654392, 0.10051730792859848, 0.06894928545470391, 0.0506857903344724, 0.03738259240699027, 0.08442516242732323, 0.04690376827171172, 0.04019044166964181, 0.09181978969355242, 0.13480174570059533, 0.128372137474824, 0.14763022729669195, 0.1797917086911075, 0.11402400224796383, 0.1630330881714277, 0.14969714796693134, 0.11383213438624773, 0.16471561022514725, 0.007141279024827196, 0.015916393435176368, 0.040141413457069564, 0.027015293023570086, 0.03425093938292756, 0.039093068775601925, 0.016228383701229143, 9.999999999998899e-05, 0.031507972455673605]}, "mutation_prompt": null}
{"id": "79029e66-3475-41aa-8eba-5c8330b978ce", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n\n        for _ in range(self.budget - self.num_particles):\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n            r1, r2 = np.random.rand(2)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - population.mean(axis=0))\n            population += velocity\n\n        return population[np.argmin([func(individual) for individual in population])]", "name": "FusionSwarmOptimization", "description": "Optimizing data structures and simplifying control flow for Fusion Swarm Optimization.", "configspace": "", "generation": 33, "fitness": 0.10263728667416151, "feedback": "The algorithm FusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.18.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.4785851918204901, 0.06432772651221763, 0.22492847889378742, 0.35106779685144407, 0.07894169900257297, 0.33837038017504817, 0.479255894064736, 0.07431300570909605, 0.3276323372698242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028147380359596408, 0.01467079663371329, 0.0270911367642237, 0.09815574502220248, 0.0012186513362246743, 0.04065590377391615, 0.05159070752030426, 9.999999999998899e-05, 0.038468350139264085, 0.028931906618332115, 9.999999999998899e-05, 0.015216570526917494, 0.019856259043667168, 0.0004952459975243739, 0.009522574538355144, 0.04053391216075797, 9.999999999998899e-05, 0.01665023775767982, 0.9893642560190473, 0.9941493117412633, 0.9835091747279648, 0.9885760322287744, 0.11422622447608011, 0.9773804448995382, 0.9839672734128213, 0.15956042709176543, 0.9801738511390591, 0.013436303546299655, 9.999999999998899e-05, 0.029121920985923144, 9.999999999998899e-05, 0.00031549654350837564, 0.09213032838025159, 9.999999999998899e-05, 0.011293333694524565, 0.0909931057382759, 0.1315322923807022, 0.03775594762470191, 0.1426178360034701, 0.15533012196588136, 0.02725496812965944, 0.06916187312161604, 0.11308596965045858, 0.05931056463008866, 0.09996795557621663, 0.1291521260876891, 9.999999999998899e-05, 9.999999999998899e-05, 0.11998364669769768, 9.999999999998899e-05, 9.999999999998899e-05, 0.14321629649496903, 9.999999999998899e-05, 0.040566274836765115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12457389159319243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017821094033329765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03611891539033418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11300925422913877, 9.999999999998899e-05, 0.0530084541297563, 0.060539176000614536, 9.999999999998899e-05, 0.03089599949472921, 0.0038818319878176633, 9.999999999998899e-05, 0.029967653485201473, 0.11069119867540944, 0.13879659513922615, 0.20881354060812185, 0.21620354847652667, 0.09708865527373767, 0.17948354229938346, 0.3714527478256454, 0.09716408355800721, 0.16487373321444243, 0.006361289893393796, 9.999999999998899e-05, 0.018989371483764783, 0.022013838708676348, 9.999999999998899e-05, 0.05259069081834733, 0.03731643766163617, 9.999999999998899e-05, 0.04463388458086681, 0.07037543064596374, 0.08609370886951495, 0.08810396189903624, 0.09855305120349966, 0.10852972522114013, 0.11406011486990597, 0.08808199726801991, 0.06064507323521173, 0.12052667397816352, 0.13060387615216662, 0.0962505644704219, 0.14352810184653642, 0.1591614233167895, 0.1138073754026484, 0.13270085560653455, 0.12180272177394413, 0.17377774300845283, 0.174657112819123, 0.08293997640249873, 0.034008147686441226, 0.13838479483603783, 0.12823903257739022, 0.06406947898089654, 0.09637038814869192, 0.08969268270864872, 0.0997711199450243, 0.0992457540369942, 0.11943364695601921, 0.09388200728521401, 0.1534217633464826, 0.11645082599284706, 0.07855245954393053, 0.1408278992272053, 0.15118562191905605, 0.07872931414554718, 0.1651287355047849, 0.1541943500121199, 9.999999999998899e-05, 9.999999999998899e-05, 0.16363309520964753, 9.999999999998899e-05, 0.1562047711045863, 0.1513827961645886, 9.999999999998899e-05, 0.15931769042367228, 0.08254543067693665, 0.07466602457976645, 0.09942041391347078, 0.1515460687819803, 0.1207914665021157, 0.11446848539734888, 0.09200561064297341, 0.09643604708838482, 0.0963337776039922, 0.24221314928654392, 0.10051730792859848, 0.17222008222502116, 0.0964634924653186, 0.047217988911599784, 0.19072451324693862, 0.11077395359844155, 0.04019044166964181, 0.10440804948255589, 0.15823721702839744, 0.128372137474824, 0.14763022729669195, 0.17079128076585226, 0.11402400224796383, 0.15063556409485412, 0.1630724935274278, 0.11383213438624773, 0.14689007985489466, 0.04489689372992256, 0.015916393435176368, 0.0336416103865782, 0.035509342744885375, 0.03425093938292756, 0.047203551047218184, 0.028004831993050594, 9.999999999998899e-05, 0.03902637959674027]}, "mutation_prompt": null}
{"id": "162d347d-953c-4465-8720-2a45ba7f4c2e", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget, self.dim, self.num_particles, self.alpha, self.beta, self.gamma = budget, dim, num_particles, alpha, beta, gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        \n        for _ in range(self.budget - self.num_particles):\n            fitness = np.array([func(individual) for individual in population])\n            best_idx = np.argmin(fitness)\n            best_global_pos = population[best_idx]\n            \n            r1, r2 = np.random.rand(2)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - population.mean(axis=0))\n            population += velocity\n        \n        return population[best_idx]", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm for improved performance.", "configspace": "", "generation": 34, "fitness": 0.10263728667416151, "feedback": "The algorithm OptimizedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.18.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.4785851918204901, 0.06432772651221763, 0.22492847889378742, 0.35106779685144407, 0.07894169900257297, 0.33837038017504817, 0.479255894064736, 0.07431300570909605, 0.3276323372698242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028147380359596408, 0.01467079663371329, 0.0270911367642237, 0.09815574502220248, 0.0012186513362246743, 0.04065590377391615, 0.05159070752030426, 9.999999999998899e-05, 0.038468350139264085, 0.028931906618332115, 9.999999999998899e-05, 0.015216570526917494, 0.019856259043667168, 0.0004952459975243739, 0.009522574538355144, 0.04053391216075797, 9.999999999998899e-05, 0.01665023775767982, 0.9893642560190473, 0.9941493117412633, 0.9835091747279648, 0.9885760322287744, 0.11422622447608011, 0.9773804448995382, 0.9839672734128213, 0.15956042709176543, 0.9801738511390591, 0.013436303546299655, 9.999999999998899e-05, 0.029121920985923144, 9.999999999998899e-05, 0.00031549654350837564, 0.09213032838025159, 9.999999999998899e-05, 0.011293333694524565, 0.0909931057382759, 0.1315322923807022, 0.03775594762470191, 0.1426178360034701, 0.15533012196588136, 0.02725496812965944, 0.06916187312161604, 0.11308596965045858, 0.05931056463008866, 0.09996795557621663, 0.1291521260876891, 9.999999999998899e-05, 9.999999999998899e-05, 0.11998364669769768, 9.999999999998899e-05, 9.999999999998899e-05, 0.14321629649496903, 9.999999999998899e-05, 0.040566274836765115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12457389159319243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017821094033329765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03611891539033418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11300925422913877, 9.999999999998899e-05, 0.0530084541297563, 0.060539176000614536, 9.999999999998899e-05, 0.03089599949472921, 0.0038818319878176633, 9.999999999998899e-05, 0.029967653485201473, 0.11069119867540944, 0.13879659513922615, 0.20881354060812185, 0.21620354847652667, 0.09708865527373767, 0.17948354229938346, 0.3714527478256454, 0.09716408355800721, 0.16487373321444243, 0.006361289893393796, 9.999999999998899e-05, 0.018989371483764783, 0.022013838708676348, 9.999999999998899e-05, 0.05259069081834733, 0.03731643766163617, 9.999999999998899e-05, 0.04463388458086681, 0.07037543064596374, 0.08609370886951495, 0.08810396189903624, 0.09855305120349966, 0.10852972522114013, 0.11406011486990597, 0.08808199726801991, 0.06064507323521173, 0.12052667397816352, 0.13060387615216662, 0.0962505644704219, 0.14352810184653642, 0.1591614233167895, 0.1138073754026484, 0.13270085560653455, 0.12180272177394413, 0.17377774300845283, 0.174657112819123, 0.08293997640249873, 0.034008147686441226, 0.13838479483603783, 0.12823903257739022, 0.06406947898089654, 0.09637038814869192, 0.08969268270864872, 0.0997711199450243, 0.0992457540369942, 0.11943364695601921, 0.09388200728521401, 0.1534217633464826, 0.11645082599284706, 0.07855245954393053, 0.1408278992272053, 0.15118562191905605, 0.07872931414554718, 0.1651287355047849, 0.1541943500121199, 9.999999999998899e-05, 9.999999999998899e-05, 0.16363309520964753, 9.999999999998899e-05, 0.1562047711045863, 0.1513827961645886, 9.999999999998899e-05, 0.15931769042367228, 0.08254543067693665, 0.07466602457976645, 0.09942041391347078, 0.1515460687819803, 0.1207914665021157, 0.11446848539734888, 0.09200561064297341, 0.09643604708838482, 0.0963337776039922, 0.24221314928654392, 0.10051730792859848, 0.17222008222502116, 0.0964634924653186, 0.047217988911599784, 0.19072451324693862, 0.11077395359844155, 0.04019044166964181, 0.10440804948255589, 0.15823721702839744, 0.128372137474824, 0.14763022729669195, 0.17079128076585226, 0.11402400224796383, 0.15063556409485412, 0.1630724935274278, 0.11383213438624773, 0.14689007985489466, 0.04489689372992256, 0.015916393435176368, 0.0336416103865782, 0.035509342744885375, 0.03425093938292756, 0.047203551047218184, 0.028004831993050594, 9.999999999998899e-05, 0.03902637959674027]}, "mutation_prompt": null}
{"id": "e10b1a5a-5bac-4938-ba53-3fab14d2de9f", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "8918337a-21ec-4d13-98c1-0ea367fbec08", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "8188beeb-a9bb-47a4-ac94-8766ff0c52dd", "solution": "import numpy as np\n\nclass FusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        \n        def evaluate_fitness(population):\n            return np.array([func(individual) for individual in population])\n        \n        def update_position_velocity(best_global_pos, population, velocity):\n            r1, r2 = np.random.rand(2)\n            for i in range(self.num_particles):\n                velocity[i] = self.alpha * velocity[i] + self.beta * r1 * (best_global_pos - population[i]) + self.gamma * r2 * (population[i] - population.mean(axis=0))\n                population[i] += velocity[i]\n        \n        population = initialize_particles()\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = evaluate_fitness(population)\n        best_global_pos = population[np.argmin(fitness)]\n        \n        for _ in range(self.budget - self.num_particles):\n            update_position_velocity(best_global_pos, population, velocity)\n            fitness = evaluate_fitness(population)\n            best_global_pos = population[np.argmin(fitness)]\n        \n        return best_global_pos", "name": "FusionSwarmOptimization", "description": "A novel metaheuristic algorithm called \"Fusion Swarm Optimization (FSO)\" that combines the principles of Particle Swarm Optimization (PSO) and Firefly Algorithm (FA) to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.30644015002089386, 0.31140999497761557, 0.316743596391613, 0.26726798105420946, 0.13868690968837805, 0.2779230458775702, 0.2417623916384325, 0.17224021912903553, 0.42413522556178795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055594131195568774, 0.01467079663371329, 0.05639842708494014, 0.04710954349091967, 0.007182433717729864, 0.05662686392497562, 0.036642906640575346, 0.030199778862249005, 0.03628810922115322, 0.013242816999679219, 0.028243588178079482, 0.05999801882446243, 0.01959972157639278, 0.004518143975762001, 0.023202255622369217, 9.999999999998899e-05, 9.999999999998899e-05, 0.04252200077051016, 0.9891461716133232, 0.9941298809203264, 0.98363407286559, 0.9886115804148714, 0.9322007373700638, 0.9811890309402023, 0.9861440311657057, 0.9445205605054198, 0.9537018494371665, 9.999999999998899e-05, 0.004960390833235739, 0.08748029623182085, 9.999999999998899e-05, 0.0032678610488589, 0.1782213317987531, 9.999999999998899e-05, 0.0606845887139148, 0.08773456841603167, 0.10419342667674814, 0.10158603332353, 0.1168579348351434, 0.15004371207051448, 0.1651571458238339, 0.09456756831379443, 0.036450453319020526, 0.0748707853000049, 0.0771285095477744, 0.0736466537979793, 9.999999999998899e-05, 0.13337293467961042, 0.015660001408149715, 0.03011390588313312, 0.14809069094900496, 0.11679476919408238, 0.03763281511016159, 0.11665959408581206, 9.999999999998899e-05, 0.14144292957150884, 0.06922889725778747, 9.999999999998899e-05, 0.06303370260331753, 0.12774349544660857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010635355618544229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028908536690463005, 0.017222157141575378, 9.999999999998899e-05, 0.008813404977245365, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892712480302166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049494135420742214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020541420622434803, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337153149011617, 0.10888030686047845, 0.16097878674522947, 0.26628160009954194, 0.3380237306769711, 0.16210654471931596, 0.29578123711765736, 0.20636676108926566, 0.16760166862871517, 0.1684284120056595, 0.06966689637691725, 0.023592850878948024, 0.0034995622695063178, 0.032110480695100696, 0.022350005856270783, 0.024690549388132976, 0.052781441686950537, 0.07026017759871539, 0.05368694135156382, 0.099814094644877, 0.14178800031419092, 0.12354932368708182, 0.09855305120349966, 0.10852972522114013, 0.07738225243147157, 0.08808199726801991, 0.2164963319592471, 0.15454968585440743, 0.1776866122169607, 0.12233955937783025, 0.14352810184653642, 0.1438950973285973, 0.1138073754026484, 0.17883954687348447, 0.1254097801922326, 0.17377774300845283, 0.17739381846098567, 0.05628591285910878, 0.04690501312077233, 0.08669719881975557, 0.09754426480166623, 0.06406947898089654, 0.09679019555149171, 0.1293570215620421, 0.0997711199450243, 0.1046569868107261, 0.12362607501055334, 0.14365761087700735, 0.17740347239195775, 0.17580828929476267, 0.2009832526377886, 0.15509407753176951, 0.14375659321204515, 0.18569537285308502, 0.17062161030476586, 0.15765838282059463, 0.17056239938774764, 0.2050784320499277, 0.15590424705836214, 0.153362000690344, 0.16871949000695297, 0.15177233751875863, 0.14665135948984875, 0.16974759002543727, 0.12687981835950213, 0.07980696513276597, 0.11156012234574175, 0.15245486147298493, 0.1207914665021157, 0.11322476547483018, 0.12014244221112114, 0.09643604708838482, 0.09983193632441312, 0.2756868852921378, 0.22536995800480786, 0.21552933307770494, 0.0506857903344724, 0.0602824876907051, 0.18901875601089313, 0.13708595301860516, 0.139610798400034, 0.1048521325174373, 0.17344840493539193, 0.128372137474824, 0.18595480328266623, 0.13065542363777038, 0.16947650263777336, 0.1720315111174694, 0.17821313037546627, 0.16598338574229654, 0.19918297868787016, 0.06513436968547881, 0.06376741094056182, 0.04328447978121763, 0.07563194555981356, 0.09358326144938112, 0.062141201608161833, 0.06689418575318973, 0.04861986476675828, 0.04786820613388132]}, "mutation_prompt": null}
{"id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 38, "fitness": 0.15651153814565605, "feedback": "The algorithm OptimizedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "1df6d1d9-fd52-4682-afcc-48beea6a6937", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "a83b6d8e-8d00-42ea-a60e-2f90e4cefd9b", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "49d45805-eba7-432b-a29c-ee0fdc36c4ee", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "6d1a4bdd-142f-44e2-8f58-bff6b4c16990", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "077a2f65-8127-43d2-957f-b5e16feb7072", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "0e216637-c8fb-40c8-8a90-11a5b1861c83", "solution": "import numpy as np\n\nclass ImprovedOptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.apply_along_axis(func, 1, population)\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "ImprovedOptimizedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm with optimized data structure access and streamlined control flow for enhanced performance.", "configspace": "", "generation": 43, "fitness": 0.15651153814565605, "feedback": "The algorithm ImprovedOptimizedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "d65a902a-cc59-4aba-b402-5dc2c1b0452b", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "96518cb3-ca65-4204-a301-3e49cd7949c8", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "8fdc1424-cb09-4cf7-b145-059caa89a85a", "solution": "import numpy as np\n\nclass EnhancedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.apply_along_axis(func, 1, population)\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "EnhancedFusionSwarmOptimization", "description": "Improved version of Optimized Fusion Swarm Optimization with enhanced memory efficiency and streamlined computation flow.", "configspace": "", "generation": 46, "fitness": 0.15651153814565605, "feedback": "The algorithm EnhancedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "a9a18c01-ccf9-468f-9e1a-1d60f100bbf6", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "788ea875-f3ee-4264-99a2-e144ca7d0d4e", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "f2eccb0b-68db-486a-8258-3bb3faafcc44", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "8a4c27df-cffe-4213-9ec6-3858c342c45d", "solution": "import numpy as np\n\nclass EnhancedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros_like(population)\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            mean_population = np.mean(population, axis=0)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - mean_population)\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "EnhancedFusionSwarmOptimization", "description": "Enhanced Optimized Fusion Swarm Optimization algorithm with streamlined computation and improved convergence by reducing unnecessary calculations.", "configspace": "", "generation": 50, "fitness": 0.15651153814565605, "feedback": "The algorithm EnhancedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "95c3d6b6-c261-41c7-92b4-c5b849dc3022", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "de0f00de-e4c8-4672-bc46-c8f8d56a09ea", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "2cef56e4-83b3-4433-a8e1-cf48393419f8", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "e234a02e-7bac-4721-a3f0-f9a752d003bc", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "3e4505ca-b4f7-42e8-860e-ebe3c4cc49ef", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "c3f81b05-1f69-4300-a7c7-b4de96f300c0", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.apply_along_axis(func, 1, population)\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved performance of Optimized Fusion Swarm Optimization by optimizing memory allocation and reducing redundant computations.", "configspace": "", "generation": 56, "fitness": 0.15651153814565605, "feedback": "The algorithm ImprovedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "e7f16d86-6129-4e92-8e8a-4877343ceb0f", "solution": "import numpy as np\n\nclass EnhancedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros_like(population)\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "EnhancedFusionSwarmOptimization", "description": "Enhanced Fusion Swarm Optimization algorithm with optimized data structures and improved convergence speed.", "configspace": "", "generation": 57, "fitness": 0.15651153814565605, "feedback": "The algorithm EnhancedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "2c6753e6-0d49-420f-a80b-a44b5a82d5df", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "a8b84e17-ff75-4c2f-af42-7a845f3ffadb", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "9903d4ac-57e2-437a-8ad5-6532669bbbe2", "solution": "import numpy as np\n\nclass EnhancedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n        self.rand_vals = np.random.rand(3, self.num_particles, self.dim)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = self.rand_vals[:2]\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "EnhancedFusionSwarmOptimization", "description": "Enhance efficiency by precomputing the random values and minimizing redundant function evaluations.", "configspace": "", "generation": 60, "fitness": 0.09378399415731391, "feedback": "The algorithm EnhancedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.19.", "error": "", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.1591717514730846, 0.15119460772106885, 0.16763028507149957, 0.16324240537223544, 0.06765439911715188, 0.14225738294667534, 0.13355549421195612, 0.08162412506420591, 0.09932050679645676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03652101636372396, 0.01831259223591497, 0.0281849971145266, 0.030917994104161184, 0.031619762498325654, 0.028823069319375838, 0.034686223795874715, 0.034622708098638766, 0.03553398156978016, 0.006724503344961108, 0.020769130986328155, 0.013950856715783222, 0.007852180956559485, 0.006872706957302355, 0.030408219827167904, 0.0034394013310751204, 9.999999999998899e-05, 0.029925185826751632, 0.9921548691838769, 0.9937640682181874, 0.993094050405932, 0.9907587465214123, 0.9884949642498293, 0.9863218469316873, 0.9860175465636173, 0.9911943737199658, 0.9906389875421717, 9.999999999998899e-05, 0.03752254508229613, 0.019066614662173742, 0.06166355069061791, 0.03759270750020838, 0.036259799094045975, 9.999999999998899e-05, 9.999999999998899e-05, 0.030542731415058588, 0.09427662936800096, 0.06519705451660707, 0.09849883736234077, 0.03900596284405733, 0.06094607406222008, 0.06887992250011865, 0.04622425752586534, 0.04818613303628494, 0.07610276377991598, 0.013763544231845892, 9.999999999998899e-05, 0.08496520597133916, 9.999999999998899e-05, 0.03950014207553576, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14799764132861382, 0.12626501274334567, 0.17028933826677517, 0.15905050999745596, 0.16614187591339302, 0.17413240480428904, 0.1446556718998483, 0.12267417897152277, 0.13486287165368394, 0.012375262509686014, 0.02336659465944413, 0.011331562236780335, 0.0181084255908579, 0.016019235884511374, 0.03345245542742359, 0.012715735382112903, 0.013436011157723637, 0.03506275839147144, 0.0819108444289337, 0.0901807210543506, 0.10550253833208734, 0.06246421614327413, 0.07035299378700366, 0.07024701841855463, 0.0679251150372866, 0.10440585487690002, 0.07280448649485638, 0.11772644528253529, 0.11897787786648528, 0.12366925112886096, 0.14620328252664772, 0.11591862891567961, 0.1257208266966856, 0.12533333891606202, 0.1445317755203951, 0.1647426449574495, 0.042345848464885205, 0.053155260278822225, 0.08590164838118564, 0.06931850209162183, 0.06796442166883643, 0.07549734866068813, 0.09379428412131308, 0.08538413475181428, 0.07380235231673615, 0.16023558895488754, 0.15435590854334946, 0.13867580891640063, 0.1279625555692936, 0.11626406101961018, 0.16219350012507805, 0.11882586915716964, 0.11957223944574291, 0.15181249938407804, 9.999999999998899e-05, 9.999999999998899e-05, 0.13073645739436357, 0.1477737690257338, 9.999999999998899e-05, 0.14447906320265957, 9.999999999998899e-05, 9.999999999998899e-05, 0.16355105147791615, 0.12405482935924739, 0.07381333910495091, 0.09933679313741273, 0.08950845101861593, 0.11144743582115757, 0.062012667606919925, 0.10437808150970196, 0.08634705538286458, 0.08037823020353319, 0.039688415060423865, 0.108503549337579, 0.03155395907543157, 0.06368570809528651, 0.07285016176497516, 0.07271072592683903, 0.054098641924449686, 0.06243257666965307, 0.026031694385881377, 0.1406266757378467, 0.18445511380283763, 0.135106926109252, 0.13401771140324814, 0.12693542047584438, 0.1771780822704332, 0.12822655563912322, 0.1358997121280514, 0.1321636233266178, 0.03404355768443801, 0.01580726795362064, 0.01992827678887754, 0.009519020978234538, 0.034868254338500604, 0.027783537180362305, 0.05060707331086467, 0.03098003430201446, 0.019856581133744444]}, "mutation_prompt": null}
{"id": "148cb10d-9ea4-469e-986b-85ca691d17ba", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "ca8ceca9-af25-4c67-9396-8421949ef01a", "solution": "import numpy as np\n\nclass EnhancedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "EnhancedFusionSwarmOptimization", "description": "Enhanced Optimized Fusion Swarm Optimization algorithm by efficiently updating velocity computation using numpy operations.", "configspace": "", "generation": 62, "fitness": 0.15651153814565605, "feedback": "The algorithm EnhancedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "a09426ce-7af1-4a64-be91-978faa9cb7a6", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "7fc25a76-2026-495e-8d8b-441e238eea5a", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "590cbf0a-bf50-4ff0-957b-775b41f9ee1a", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population = population + velocity\n            fitness = np.apply_along_axis(func, 1, population)\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved version of Optimized Fusion Swarm Optimization by optimizing computation and control flow for enhanced efficiency.", "configspace": "", "generation": 65, "fitness": 0.15651153814565605, "feedback": "The algorithm ImprovedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "2f414111-6906-4f0c-9878-851df50a7586", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.apply_along_axis(func, 1, population)\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Fusion Swarm Optimization utilizing efficient array operations and streamlined control flow for enhanced performance.", "configspace": "", "generation": 66, "fitness": 0.15651153814565605, "feedback": "The algorithm ImprovedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "109dbb52-fed2-40af-b72d-4e006fdf0a48", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "e08411ff-a6af-419e-bf21-ce3bc707ee0b", "solution": "import numpy as np\n\nclass DynamicInertiaSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0, inertia_max=0.9, inertia_min=0.4):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n        self.inertia_max = inertia_max\n        self.inertia_min = inertia_min\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = inertia_weight * velocity + self.alpha * r1 * (best_global_pos - population) + self.beta * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n            inertia_weight = self.inertia_max - ((_ + 1) / (self.budget - self.num_particles)) * (self.inertia_max - self.inertia_min)\n\n        return best_global_pos", "name": "DynamicInertiaSwarmOptimization", "description": "Implementing dynamic inertia weight for better convergence and diversity maintenance.", "configspace": "", "generation": 68, "fitness": 0.0804561733809569, "feedback": "The algorithm DynamicInertiaSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.20.", "error": "", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.08774815958588056, 0.06432772651221763, 0.09229713590554589, 0.08952233024927114, 0.062138895920524906, 0.08903139493000423, 0.07795415841203734, 0.07431300570909605, 0.06863468668670525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 0.02646647193977003, 0.010643411704069683, 0.0012186513362246743, 0.006669962766643223, 0.018248263482334326, 9.999999999998899e-05, 0.01089184614434291, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.0004952459975243739, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9896311445682153, 0.9927036242303094, 0.9887755352923986, 0.9914209187656476, 0.9902699322314815, 0.9905291707618297, 0.984815799593486, 0.9833663623848445, 0.9906342997709388, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.052233822106523387, 0.0667108215001172, 0.02725496812965944, 9.999999999998899e-05, 0.043754516431378176, 0.05931056463008866, 0.03380249082872355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.13879659513922615, 0.14838054695461433, 0.11440874657968414, 0.09708865527373767, 0.09580441870675127, 0.16112956940342849, 0.09716408355800721, 0.1210557193025883, 0.004444758132443494, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 9.999999999998899e-05, 0.023305026933594264, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.07037543064596374, 0.08609370886951495, 0.06711483439607213, 0.09855305120349966, 0.10852972522114013, 0.05643121168494414, 0.08808199726801991, 0.06064507323521173, 0.07726393575557644, 0.09606267484187503, 0.0962505644704219, 0.14352810184653642, 0.13800672315110074, 0.1138073754026484, 0.13536282465897198, 0.12840042553543263, 0.17377774300845283, 0.11363346445524236, 0.03812976025022474, 0.034008147686441226, 0.05463654710198407, 0.056957211629895754, 0.06406947898089654, 0.06342850570876157, 0.0837317855149382, 0.0997711199450243, 0.06412526395900253, 0.11943364695601921, 0.09388200728521401, 0.13345086981233123, 0.10289055837941885, 0.07855245954393053, 0.09307045902971678, 0.12245976138762271, 0.07872931414554718, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568623559107733, 0.07466602457976645, 0.11327688776199174, 0.12521544353717795, 0.1207914665021157, 0.06661401029160186, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.12491801117018564, 0.10051730792859848, 0.020576850526452972, 0.07841363264715162, 0.05010991203336268, 0.045511073114331335, 0.04690376827171172, 0.04019044166964181, 0.04143420019681854, 0.14558813454508268, 0.128372137474824, 0.14763022729669195, 0.11599487746987158, 0.11402400224796383, 0.12465113207635137, 0.14969714796693134, 0.11383213438624773, 0.1503892178010967, 0.007141279024827196, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.020045516730027746, 0.016228383701229143, 9.999999999998899e-05, 0.03128944448255333]}, "mutation_prompt": null}
{"id": "2d90b280-3021-4310-a6f3-cf8950c176f6", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "2c3f43f8-ff7e-43e1-ba93-a19474468042", "solution": "import numpy as np\n\nclass EnhancedOptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.apply_along_axis(func, 1, population)\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "EnhancedOptimizedFusionSwarmOptimization", "description": "Enhanced Optimized Fusion Swarm Optimization algorithm with optimized data structures and simplified control flow for improved efficiency without changing core functionality.", "configspace": "", "generation": 70, "fitness": 0.15651153814565605, "feedback": "The algorithm EnhancedOptimizedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "4e3e93e6-49b3-415f-b69f-940b5205d42f", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "924296e2-8a8a-4c93-9968-1f4e763aa6c5", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "ff3f7bb9-9435-4a8e-b893-ff84d549a9b5", "solution": "import numpy as np\n\nclass EnhancedOptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros_like(population)\n        fitness = np.apply_along_axis(func, 1, population)\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.apply_along_axis(func, 1, population)\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "EnhancedOptimizedFusionSwarmOptimization", "description": "Enhanced Optimized Fusion Swarm Optimization algorithm with improved memory efficiency and reduced redundant computations for faster convergence.", "configspace": "", "generation": 73, "fitness": 0.15651153814565605, "feedback": "The algorithm EnhancedOptimizedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "72cee0b8-fd7c-4228-87af-6f94cb6a63c6", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "97fa4840-e0e9-46fc-a7aa-a56daaf8a748", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "112c3561-e9bc-42f9-98f5-f3c6495b26ec", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "6692cec9-175b-4b23-83e5-8f757c7e3c97", "solution": "import numpy as np\n\nclass OptimizedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            population += velocity\n            fitness = np.array([func(individual) for individual in population])\n            best_global_pos = population[np.argmin(fitness)]\n\n        return best_global_pos", "name": "OptimizedFusionSwarmOptimization", "description": "Optimized Fusion Swarm Optimization algorithm with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.3886926922129137, 0.40742765009303095, 0.3325261385485869, 0.4447075932534724, 0.4485349204496998, 0.4151723329481921, 0.30924189332755236, 0.3557170846864979, 0.27587314077313396, 0.009764502765980287, 0.003942288443324671, 0.041513539572566205, 0.01588160010077244, 0.1048864865960899, 0.13977094408317448, 0.018556284140181067, 0.07484253950933784, 0.0687087045255752, 0.07973200839393246, 0.09783441567006235, 0.05387334062128535, 0.0629731271049232, 0.05364250624597067, 0.07445905882865589, 0.10208925753231946, 0.06317477796732651, 0.04990143932255764, 0.05247425605315781, 0.06031394276986635, 0.04674452370091531, 0.05272763070032338, 0.04714335943115222, 0.04385939009937878, 0.047152886108217884, 0.04827327008270599, 0.03689441757937151, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.1791226099786387, 0.10207200284724516, 0.0345580947407772, 0.13144372957899286, 0.047187782290730285, 0.06230354989075626, 0.07660567521087924, 0.10255581850319717, 0.039901698882342185, 0.27735788353145663, 0.21072208225685884, 0.20338604620837264, 0.29931732722999804, 0.22299208552287386, 0.20538235721663745, 0.2092822652655515, 0.2370553025160097, 0.23755296040638885, 0.09710674446477274, 0.021723967024364743, 0.02869778141180379, 0.002876137172102111, 0.0923165670208076, 9.999999999998899e-05, 0.07258791449661806, 9.999999999998899e-05, 0.1228071878498529, 9.999999999998899e-05, 0.07881060702975595, 0.029783033338146914, 0.07000487317766291, 0.11615292949022682, 0.1614210976774546, 0.005084195246365164, 0.06236902235920261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07315912995534235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00580704728225423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05305310348643111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11278714307584392, 0.07581536520635868, 0.11855127415937172, 0.06802434538170277, 0.10587614743616447, 0.0647305602073005, 0.027476561110964526, 0.07847360267886017, 0.030151613984778836, 0.28258097184326647, 0.3453601378478819, 0.28816284687704696, 0.33447729862957354, 0.3525464186128756, 0.24995302135355402, 0.3644514324369499, 0.2996017948496378, 0.3338071740356997, 0.06975244300954453, 0.06999075086983297, 0.0633393416855097, 0.047399771078007635, 0.057662661435227025, 0.0729309914608044, 0.05793175835168296, 0.07388816802485232, 0.04833864699506629, 0.12117159443638847, 0.10108177405722907, 0.12204552367820798, 0.09947002453917253, 0.1250257182997857, 0.11338396091375669, 0.09265924659875913, 0.08385268421450531, 0.08505357244519274, 0.16713918529090765, 0.2220799879871297, 0.1662437677892793, 0.15777344983407404, 0.19006517722376937, 0.152598819443181, 0.16213370031664476, 0.2192943630752645, 0.19125671453908155, 0.11496969793664358, 0.1508159140531985, 0.1495968201451353, 0.13451614489460006, 0.1462763644516457, 0.1214873980980874, 0.11492752217418734, 0.18136559748268632, 0.10705296581546786, 0.15153575967108046, 0.15944439586067805, 0.1777824661496077, 0.15543367018468557, 0.13899284364865794, 0.14091154432658537, 0.15037191054202592, 0.15261685693602045, 0.15958940804665434, 0.15520351154030743, 0.16683361706480915, 0.16349013303148807, 0.16460849990572113, 0.15210056806914596, 0.16854527813837228, 0.16368037264044377, 0.16793222716636647, 0.17075411222029524, 0.7163155709706652, 0.15230027127556756, 0.16849514728924242, 0.10512545414760532, 0.1207914665021157, 0.14897859696266935, 0.1265170937816067, 0.15391169400088967, 0.11269875863743983, 0.44424868800028317, 0.15914514986841533, 0.1016245092463931, 0.09658913207325182, 0.10590667914574914, 0.15752920970495166, 0.15216231674891767, 0.08637441863705375, 0.14712009152965644, 0.16163045176077373, 0.16017735980603198, 0.18200523947646285, 0.18582272608261907, 0.1449062087430335, 0.16444319273736197, 0.1708801480618326, 0.16581251569097677, 0.15942026195098302, 0.06510893675600404, 0.06116422828287782, 0.05260767997815963, 0.042512887344137607, 0.05391284403052998, 0.04811389372251784, 0.049752341491314245, 0.04814121119116044, 0.05461234165959572]}, "mutation_prompt": null}
{"id": "a105bcc8-443d-411b-9c21-82a33de561bb", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 78, "fitness": 0.28772184158497255, "feedback": "The algorithm ImprovedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "3a45b23a-922a-4401-8b2a-dc8809483a0a", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "354ede57-8a99-412d-8470-70aeead6d9e9", "solution": "import numpy as np\n\nclass EnhancedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population, fitness = new_population, new_fitness\n\n        return best_global_pos", "name": "EnhancedFusionSwarmOptimization", "description": "Enhanced Fusion Swarm Optimization utilizing a more efficient approach for velocity updates and population evolution.", "configspace": "", "generation": 79, "fitness": 0.28772184158497255, "feedback": "The algorithm EnhancedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "7cbcb71b-cdcf-4647-bc3b-ae1f539fc601", "solution": "import numpy as np\n\nclass EnhancedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population, fitness = new_population, new_fitness\n\n        return best_global_pos", "name": "EnhancedFusionSwarmOptimization", "description": "Enhanced Fusion Swarm Optimization algorithm by optimizing memory usage and streamlining operation updates.", "configspace": "", "generation": 80, "fitness": 0.28772184158497255, "feedback": "The algorithm EnhancedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "4b5510aa-f5c8-4bbe-b047-b6cbf7521bbc", "solution": "import numpy as np\n\nclass EnhancedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity_update = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity_update\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population, velocity, fitness = new_population, velocity_update, new_fitness\n\n        return best_global_pos", "name": "EnhancedFusionSwarmOptimization", "description": "Improved Fusion Swarm Optimization algorithm with enhanced velocity update mechanism and reduced redundant operations.", "configspace": "", "generation": 81, "fitness": 0.28772184158497255, "feedback": "The algorithm EnhancedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "7d8a2377-328c-4671-9597-c1f9b354316f", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "bc5d65fd-8912-48c5-9df6-3a167104e27a", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "1dac40cf-a0b9-4688-8882-88d3ee4f17f1", "solution": "import numpy as np\n\nclass StreamlinedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget, self.dim, self.num_particles, self.alpha, self.beta, self.gamma = budget, dim, num_particles, alpha, beta, gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population, fitness = new_population, new_fitness\n\n        return best_global_pos", "name": "StreamlinedFusionSwarmOptimization", "description": "Optimized Improved Fusion Swarm Optimization by streamlining velocity computation and reducing redundant operations.", "configspace": "", "generation": 84, "fitness": 0.28772184158497255, "feedback": "The algorithm StreamlinedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "4a1170c1-cc2e-4270-a09d-b6217752b3f4", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "1b084b3e-f3f2-470a-a3d7-fdde30310b5e", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "7a2e624b-1dfa-47d7-a9ea-0f69d72896e7", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "5f2bb0b3-04bb-43a3-a149-b77eb82d3dfd", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "68042c87-7652-45cd-96e5-34e693fb2e1b", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "748d0db8-136c-497d-ae79-c7cec6e03c89", "solution": "import numpy as np\n\nclass EnhancedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            min_idx = np.argmin(new_fitness)\n            if new_fitness[min_idx] < fitness.min():\n                best_global_pos = new_population[min_idx]\n            population, fitness = new_population, new_fitness\n\n        return best_global_pos", "name": "EnhancedFusionSwarmOptimization", "description": "Enhanced Fusion Swarm Optimization algorithm with improved memory management and reduced redundant calculations.", "configspace": "", "generation": 90, "fitness": 0.28772184158497255, "feedback": "The algorithm EnhancedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "956a7a76-542e-43ec-8dbb-d9d07189c3ae", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "1c4289eb-161f-4973-8f4b-b87c9a1bcc5f", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "31927990-cdfb-4ab6-aa9a-c4a5fb46887f", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "7fd1c73d-b520-4acb-9a23-b8c7304af162", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "e124ed28-fc80-4b5d-be79-de91f6bd6b86", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "fb39a545-a1d3-4cec-b883-eb1b6f3c60b5", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "d95022f1-9514-4f2d-b96e-f74ea80aa18f", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "b738b456-a1f5-45ff-b963-7c9f42ecfdc3", "solution": "import numpy as np\n\nclass ImprovedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.array([func(individual) for individual in new_population])\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population = new_population\n            fitness = new_fitness\n\n        return best_global_pos", "name": "ImprovedFusionSwarmOptimization", "description": "Improved Optimized Fusion Swarm Optimization algorithm by reducing redundant fitness function evaluations and optimizing velocity computation.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
{"id": "b60b621c-adf5-40fc-807e-36ae80d4090a", "solution": "import numpy as np\n\nclass EnhancedFusionSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.5, beta=2.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_global_pos = population[np.argmin(fitness)]\n\n        for _ in range(self.budget - self.num_particles):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = self.alpha * velocity + self.beta * r1 * (best_global_pos - population) + self.gamma * r2 * (population - np.mean(population, axis=0))\n            new_population = population + velocity\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            idx = np.argmin(new_fitness)\n            if new_fitness[idx] < fitness.min():\n                best_global_pos = new_population[idx]\n            population, fitness = new_population, new_fitness\n\n        return best_global_pos", "name": "EnhancedFusionSwarmOptimization", "description": "Enhanced Fusion Swarm Optimization with efficiency improvements through vectorized operations and streamlined update rules.", "configspace": "", "generation": 99, "fitness": 0.28772184158497255, "feedback": "The algorithm EnhancedFusionSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "a105bcc8-443d-411b-9c21-82a33de561bb", "metadata": {"aucs": [0.7060002797221611, 0.7837004184515239, 0.6917459676267013, 0.7201415691993467, 0.7486456744727298, 0.6268677173253143, 0.6785699131086059, 0.7774434572580583, 0.6704138668895818, 0.40002014442406486, 0.5005643312590986, 0.48581256062992384, 0.4465720583227464, 0.5178389170451385, 0.472108397714849, 0.3867236164298351, 0.5159262704851469, 0.41464229840110445, 0.09538408266690457, 0.16380155818339392, 0.14628720108267534, 0.1494746522361613, 0.13324810697262224, 0.14064971517697378, 0.12210584222924703, 0.13275649824319535, 0.12821995948112963, 0.12187617155472164, 0.14119814583611678, 0.132196212118444, 0.11267571146254307, 0.11783683618906526, 0.10861372684083859, 0.09738022696771753, 0.10610321396313249, 0.10474810900048159, 0.9915192246798137, 0.9943603594042756, 0.9918054849981832, 0.9918178124055005, 0.9917400115054509, 0.9916838637069876, 0.9942839334364145, 0.9914878567955434, 0.9893233129223368, 0.5711653857678767, 0.5773728292665965, 0.48549993773937217, 0.570794774502198, 0.5248886465318188, 0.5901622278063607, 0.5301234441559907, 0.587841441371358, 0.5710236121797501, 0.24281096395802715, 0.35798082446679014, 0.16750278164300247, 0.6942733822013775, 0.36296127550450497, 0.3529355134026908, 0.23149722779554582, 0.2505766045940684, 0.2084407439159227, 0.11848524921042847, 0.2951156104596647, 0.2262878640248579, 0.11377749768195955, 0.19731801074895916, 0.2170970722255171, 0.1830035897634562, 0.2567538192237713, 0.20323173376157133, 0.2372433490634802, 0.13652662831385165, 0.1216543652662806, 0.23535075187916144, 0.22634332556452563, 0.21473507105919076, 0.21276823790292143, 0.05692268950987922, 0.054545821457219756, 9.999999999998899e-05, 0.024945707725876898, 0.0037193581854442215, 0.007964109113047013, 0.014849221414891312, 9.999999999998899e-05, 0.0008678167858213737, 9.999999999998899e-05, 9.999999999998899e-05, 0.025755148612020107, 0.003891154037070521, 0.08939159243275085, 0.02617059608890271, 0.0005860185362520642, 0.004806394368135125, 0.01580865379971952, 0.002775052089113328, 0.03601322103671356, 0.031007705068572644, 0.056522143199500885, 9.999999999998899e-05, 0.018640420633144084, 0.14478831490304767, 0.09549156267263748, 9.999999999998899e-05, 0.20559194631838074, 0.1602486066666171, 0.22637650873155513, 0.11154671387352333, 0.028919918139458267, 0.10639938410879823, 0.0361518230572585, 0.1790357563031555, 0.13364616500714877, 0.20261626889399653, 0.05258340615049928, 0.49835670814011257, 0.5343977974578618, 0.47896207498581567, 0.512224934784711, 0.5887834849346465, 0.5364252173101184, 0.5212286175252998, 0.5842520107622942, 0.5598002180725024, 0.13012699767579106, 0.13324254140942993, 0.10435713807412872, 0.1251840700511544, 0.1149821549223441, 0.10454256222734948, 0.09770473109414579, 0.09058667558915079, 0.127990300537423, 0.1503421506880671, 0.19025976424435365, 0.20396808196579963, 0.22923604995768743, 0.24544003875374198, 0.23603773284193308, 0.2297787549941236, 0.16006266498236177, 0.29404742150976904, 0.37647076363518484, 0.4159749903136287, 0.33469988474002954, 0.3455844686062831, 0.3651863240470471, 0.3552216012043936, 0.34388982998675643, 0.30420945844353076, 0.3818192086204474, 0.2637159463156369, 0.26341229922579, 0.34690005216432085, 0.21082963492677798, 0.23696697527535648, 0.2041673767645088, 0.22233873888201705, 0.2248082424639909, 0.2412570866684821, 0.20305555504060935, 0.19927283017513164, 0.1821683819841362, 0.189616089220904, 0.2077146089318217, 0.1605186607461797, 0.18583854660368004, 0.22456221351250683, 0.17832575680742213, 0.2396379080862001, 0.2426778142206163, 0.21153849464532337, 0.20460027770155753, 0.2054627074124863, 0.19513489909591464, 0.2093511506696415, 0.23035874903712916, 0.18427496876901217, 0.8332081633081095, 0.8292518869082856, 0.1744260620471335, 0.8467319776421738, 0.8224902312866499, 0.1950101804912152, 0.1329937548400416, 0.2273975892551724, 0.8426481989313565, 0.7992007687916451, 0.15525242042964094, 0.16427644087438364, 0.8132856957482409, 0.16823599144596368, 0.2066671030030599, 0.11147609834772976, 0.10368359033366992, 0.5524313496373343, 0.1713785737129807, 0.17239119491539856, 0.18738059095531467, 0.1869769012423037, 0.18495374872525283, 0.1687838883448276, 0.16508971443168485, 0.16427813277007575, 0.17298975054289767, 0.06878531095506935, 0.07302573125215461, 0.08436869612107745, 0.07575016310292026, 0.0730459101632871, 0.08791468286840887, 0.08814810808381679, 0.08824887166270723, 0.122818638046711]}, "mutation_prompt": null}
