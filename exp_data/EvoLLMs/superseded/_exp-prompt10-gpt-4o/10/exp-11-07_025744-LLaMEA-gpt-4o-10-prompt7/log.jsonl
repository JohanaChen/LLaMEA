{"id": "f5c7b47a-c9bb-450d-ae55-c8ea0ae33963", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = X + V\n            X = np.clip(X, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution for efficient global search leveraging swarm intelligence and adaptive mutation.", "configspace": "", "generation": 0, "fitness": 0.3386031644073196, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.29.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8596140741976193, 0.8696325712044372, 0.8524655865359922, 0.8788388305505872, 0.8822610891895218, 0.8792523748663894, 0.8677575687378922, 0.8751086393146844, 0.8541574320356716, 0.7539073724188774, 0.7556602545461464, 0.7544119908520504, 0.7723905742872907, 0.7434484128375227, 0.6695224388387269, 0.7514683688097413, 0.7193702002753829, 0.7567602220122823, 0.15348527287650104, 0.17535289129656506, 0.12741565594882454, 0.13038884042141086, 0.1746477474479834, 0.15052229666028016, 0.16518133765494003, 0.14468297229272975, 0.563793531296352, 0.13053729322830043, 0.13544031839599668, 0.16867994605667225, 0.13417899544183198, 0.12925408616959666, 0.051719319536498776, 0.1316592577994692, 0.1448792897775375, 0.12971032529522686, 0.9895614682532213, 0.9839629323482373, 0.9924024136536378, 0.9815986159542922, 0.9915462493218776, 0.9905271647775874, 0.9902872666818385, 0.9936562440869099, 0.9923089973124989, 0.6985840375420341, 0.7279947106691418, 0.6948786196390473, 0.6617731740845207, 0.6828743259385404, 0.6886520055565354, 0.6763512140146672, 0.7068135605518502, 0.05164508586725114, 0.8554436449833749, 0.8163839408876213, 0.8379025242618033, 0.21213495850034203, 0.8691349648588889, 0.21159979010177976, 0.8313911661976431, 0.23537387237257368, 0.17577832618779377, 0.1471579777965799, 0.2416507935757043, 0.23146104595433104, 0.23604956014492928, 0.24695142880792864, 0.23452989109767408, 0.24442994245824046, 0.25547620910297286, 0.2481831284641005, 0.23072273344343952, 0.2346215245376726, 0.23308005588722902, 0.23516371288992743, 0.23921363740292267, 0.26230877682687836, 0.25678897644882304, 0.13622523239967455, 0.2491515729101912, 0.054816612591794156, 0.04753703953203914, 9.999999999998899e-05, 0.00042337178544260556, 9.999999999998899e-05, 0.009648423944842555, 0.06050252554850355, 9.999999999998899e-05, 0.05843617781297694, 0.07099589291528208, 0.0942942067410173, 0.04377192061402713, 0.07732959221872993, 0.007580591151269966, 0.0046716001839886, 0.02627802654428235, 0.06221377015264462, 0.03312551307661793, 0.04099042785523577, 0.07547761502234263, 0.051138514479696084, 0.07329544999631421, 0.19633623111349108, 0.07088369557336083, 0.09982567913057228, 0.07329663891113047, 0.07128606158584572, 0.10973381031402607, 0.09148771042715775, 0.2698937581873131, 0.3237097785344468, 0.12457966491752215, 0.11159412020062176, 0.05894748819383, 0.14267662053553432, 0.11294506557797013, 0.5810918724525673, 0.5657319238692686, 0.572925365637663, 0.5917463951432615, 0.5490550171810676, 0.5874337974807615, 0.6021519845620646, 0.5581604516093301, 0.5629677895397543, 0.12022040045036753, 0.13448898396772768, 0.11798902187531712, 0.13578580337356927, 0.12893782359296346, 0.13641310564008802, 0.13383223935943678, 0.11335134478596842, 0.11166545256677474, 0.20668169904021105, 0.2415762583639285, 0.2828361703814465, 0.1418185901678729, 0.13187313394265532, 0.44179877479060015, 0.21449428793333225, 0.23715691966988728, 0.36309622095961025, 0.612287798927236, 0.5836277065065731, 0.5372184298611394, 0.5263530596147974, 0.6267648151400729, 0.6221338447923217, 0.6466001471024941, 0.5853029839416234, 0.6118894526228948, 0.3305891268874145, 0.35048557066762953, 0.2013645383902226, 0.2329625457109119, 0.38947562757525434, 0.28341094315116644, 0.3624287562069801, 0.4014967386358328, 0.27183422390519296, 0.19766324534401203, 0.23392035518813992, 0.22799930476584163, 0.22313331953217452, 0.19533320791746156, 0.20236378111731979, 0.23232215517439858, 0.20753129383362223, 0.19778906434104282, 0.21414364955470577, 0.2452543666141641, 0.7177611114854964, 0.21847760996724142, 0.23727871009949564, 0.22040500604266633, 0.21503631808091028, 0.2047657243247818, 0.2420704831931696, 0.9022713980505013, 0.15658676041167274, 0.15437532994613135, 0.16534657919544626, 0.20007324758075207, 0.19793013274715, 0.09989495344249388, 0.1697467857761774, 0.8537856770915971, 0.08299062803879675, 0.16916761668570912, 0.12567899418767525, 0.7231978280410356, 0.16884332651360656, 0.8042857416959123, 0.21260518204336698, 0.1977147774222744, 0.21160662726335933, 0.19569851145350148, 0.1774505646120379, 0.19991598876172445, 0.1863190215721766, 0.18026380944606302, 0.18814711294542108, 0.1797690761410644, 0.18599160066397813, 0.18402054901988585, 0.08496407869581513, 0.08653383557355632, 0.09073103324244713, 0.10374145823150116, 0.08843578422378817, 0.08243853638824927, 0.08697357235402181, 0.09320358525317951, 0.08151951348292519]}, "mutation_prompt": null}
{"id": "bcb08e21-e1e0-40b3-b818-bfdb3c53bc3e", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = X + V\n            X = np.clip(X, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution for efficient global search leveraging swarm intelligence and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5c7b47a-c9bb-450d-ae55-c8ea0ae33963", "metadata": {"aucs": [0.8596140741976193, 0.8696325712044372, 0.8524655865359922, 0.8788388305505872, 0.8822610891895218, 0.8792523748663894, 0.8677575687378922, 0.8751086393146844, 0.8541574320356716, 0.7539073724188774, 0.7556602545461464, 0.7544119908520504, 0.7723905742872907, 0.7434484128375227, 0.6695224388387269, 0.7514683688097413, 0.7193702002753829, 0.7567602220122823, 0.15348527287650104, 0.17535289129656506, 0.12741565594882454, 0.13038884042141086, 0.1746477474479834, 0.15052229666028016, 0.16518133765494003, 0.14468297229272975, 0.563793531296352, 0.13053729322830043, 0.13544031839599668, 0.16867994605667225, 0.13417899544183198, 0.12925408616959666, 0.051719319536498776, 0.1316592577994692, 0.1448792897775375, 0.12971032529522686, 0.9895614682532213, 0.9839629323482373, 0.9924024136536378, 0.9815986159542922, 0.9915462493218776, 0.9905271647775874, 0.9902872666818385, 0.9936562440869099, 0.9923089973124989, 0.6985840375420341, 0.7279947106691418, 0.6948786196390473, 0.6617731740845207, 0.6828743259385404, 0.6886520055565354, 0.6763512140146672, 0.7068135605518502, 0.05164508586725114, 0.8554436449833749, 0.8163839408876213, 0.8379025242618033, 0.21213495850034203, 0.8691349648588889, 0.21159979010177976, 0.8313911661976431, 0.23537387237257368, 0.17577832618779377, 0.1471579777965799, 0.2416507935757043, 0.23146104595433104, 0.23604956014492928, 0.24695142880792864, 0.23452989109767408, 0.24442994245824046, 0.25547620910297286, 0.2481831284641005, 0.23072273344343952, 0.2346215245376726, 0.23308005588722902, 0.23516371288992743, 0.23921363740292267, 0.26230877682687836, 0.25678897644882304, 0.13622523239967455, 0.2491515729101912, 0.054816612591794156, 0.04753703953203914, 9.999999999998899e-05, 0.00042337178544260556, 9.999999999998899e-05, 0.009648423944842555, 0.06050252554850355, 9.999999999998899e-05, 0.05843617781297694, 0.07099589291528208, 0.0942942067410173, 0.04377192061402713, 0.07732959221872993, 0.007580591151269966, 0.0046716001839886, 0.02627802654428235, 0.06221377015264462, 0.03312551307661793, 0.04099042785523577, 0.07547761502234263, 0.051138514479696084, 0.07329544999631421, 0.19633623111349108, 0.07088369557336083, 0.09982567913057228, 0.07329663891113047, 0.07128606158584572, 0.10973381031402607, 0.09148771042715775, 0.2698937581873131, 0.3237097785344468, 0.12457966491752215, 0.11159412020062176, 0.05894748819383, 0.14267662053553432, 0.11294506557797013, 0.5810918724525673, 0.5657319238692686, 0.572925365637663, 0.5917463951432615, 0.5490550171810676, 0.5874337974807615, 0.6021519845620646, 0.5581604516093301, 0.5629677895397543, 0.12022040045036753, 0.13448898396772768, 0.11798902187531712, 0.13578580337356927, 0.12893782359296346, 0.13641310564008802, 0.13383223935943678, 0.11335134478596842, 0.11166545256677474, 0.20668169904021105, 0.2415762583639285, 0.2828361703814465, 0.1418185901678729, 0.13187313394265532, 0.44179877479060015, 0.21449428793333225, 0.23715691966988728, 0.36309622095961025, 0.612287798927236, 0.5836277065065731, 0.5372184298611394, 0.5263530596147974, 0.6267648151400729, 0.6221338447923217, 0.6466001471024941, 0.5853029839416234, 0.6118894526228948, 0.3305891268874145, 0.35048557066762953, 0.2013645383902226, 0.2329625457109119, 0.38947562757525434, 0.28341094315116644, 0.3624287562069801, 0.4014967386358328, 0.27183422390519296, 0.19766324534401203, 0.23392035518813992, 0.22799930476584163, 0.22313331953217452, 0.19533320791746156, 0.20236378111731979, 0.23232215517439858, 0.20753129383362223, 0.19778906434104282, 0.21414364955470577, 0.2452543666141641, 0.7177611114854964, 0.21847760996724142, 0.23727871009949564, 0.22040500604266633, 0.21503631808091028, 0.2047657243247818, 0.2420704831931696, 0.9022713980505013, 0.15658676041167274, 0.15437532994613135, 0.16534657919544626, 0.20007324758075207, 0.19793013274715, 0.09989495344249388, 0.1697467857761774, 0.8537856770915971, 0.08299062803879675, 0.16916761668570912, 0.12567899418767525, 0.7231978280410356, 0.16884332651360656, 0.8042857416959123, 0.21260518204336698, 0.1977147774222744, 0.21160662726335933, 0.19569851145350148, 0.1774505646120379, 0.19991598876172445, 0.1863190215721766, 0.18026380944606302, 0.18814711294542108, 0.1797690761410644, 0.18599160066397813, 0.18402054901988585, 0.08496407869581513, 0.08653383557355632, 0.09073103324244713, 0.10374145823150116, 0.08843578422378817, 0.08243853638824927, 0.08697357235402181, 0.09320358525317951, 0.08151951348292519]}, "mutation_prompt": null}
{"id": "21fd0c0d-ad05-4fec-b798-8770709e145b", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = X + V\n            X = np.clip(X, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution for efficient global search leveraging swarm intelligence and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5c7b47a-c9bb-450d-ae55-c8ea0ae33963", "metadata": {"aucs": [0.8596140741976193, 0.8696325712044372, 0.8524655865359922, 0.8788388305505872, 0.8822610891895218, 0.8792523748663894, 0.8677575687378922, 0.8751086393146844, 0.8541574320356716, 0.7539073724188774, 0.7556602545461464, 0.7544119908520504, 0.7723905742872907, 0.7434484128375227, 0.6695224388387269, 0.7514683688097413, 0.7193702002753829, 0.7567602220122823, 0.15348527287650104, 0.17535289129656506, 0.12741565594882454, 0.13038884042141086, 0.1746477474479834, 0.15052229666028016, 0.16518133765494003, 0.14468297229272975, 0.563793531296352, 0.13053729322830043, 0.13544031839599668, 0.16867994605667225, 0.13417899544183198, 0.12925408616959666, 0.051719319536498776, 0.1316592577994692, 0.1448792897775375, 0.12971032529522686, 0.9895614682532213, 0.9839629323482373, 0.9924024136536378, 0.9815986159542922, 0.9915462493218776, 0.9905271647775874, 0.9902872666818385, 0.9936562440869099, 0.9923089973124989, 0.6985840375420341, 0.7279947106691418, 0.6948786196390473, 0.6617731740845207, 0.6828743259385404, 0.6886520055565354, 0.6763512140146672, 0.7068135605518502, 0.05164508586725114, 0.8554436449833749, 0.8163839408876213, 0.8379025242618033, 0.21213495850034203, 0.8691349648588889, 0.21159979010177976, 0.8313911661976431, 0.23537387237257368, 0.17577832618779377, 0.1471579777965799, 0.2416507935757043, 0.23146104595433104, 0.23604956014492928, 0.24695142880792864, 0.23452989109767408, 0.24442994245824046, 0.25547620910297286, 0.2481831284641005, 0.23072273344343952, 0.2346215245376726, 0.23308005588722902, 0.23516371288992743, 0.23921363740292267, 0.26230877682687836, 0.25678897644882304, 0.13622523239967455, 0.2491515729101912, 0.054816612591794156, 0.04753703953203914, 9.999999999998899e-05, 0.00042337178544260556, 9.999999999998899e-05, 0.009648423944842555, 0.06050252554850355, 9.999999999998899e-05, 0.05843617781297694, 0.07099589291528208, 0.0942942067410173, 0.04377192061402713, 0.07732959221872993, 0.007580591151269966, 0.0046716001839886, 0.02627802654428235, 0.06221377015264462, 0.03312551307661793, 0.04099042785523577, 0.07547761502234263, 0.051138514479696084, 0.07329544999631421, 0.19633623111349108, 0.07088369557336083, 0.09982567913057228, 0.07329663891113047, 0.07128606158584572, 0.10973381031402607, 0.09148771042715775, 0.2698937581873131, 0.3237097785344468, 0.12457966491752215, 0.11159412020062176, 0.05894748819383, 0.14267662053553432, 0.11294506557797013, 0.5810918724525673, 0.5657319238692686, 0.572925365637663, 0.5917463951432615, 0.5490550171810676, 0.5874337974807615, 0.6021519845620646, 0.5581604516093301, 0.5629677895397543, 0.12022040045036753, 0.13448898396772768, 0.11798902187531712, 0.13578580337356927, 0.12893782359296346, 0.13641310564008802, 0.13383223935943678, 0.11335134478596842, 0.11166545256677474, 0.20668169904021105, 0.2415762583639285, 0.2828361703814465, 0.1418185901678729, 0.13187313394265532, 0.44179877479060015, 0.21449428793333225, 0.23715691966988728, 0.36309622095961025, 0.612287798927236, 0.5836277065065731, 0.5372184298611394, 0.5263530596147974, 0.6267648151400729, 0.6221338447923217, 0.6466001471024941, 0.5853029839416234, 0.6118894526228948, 0.3305891268874145, 0.35048557066762953, 0.2013645383902226, 0.2329625457109119, 0.38947562757525434, 0.28341094315116644, 0.3624287562069801, 0.4014967386358328, 0.27183422390519296, 0.19766324534401203, 0.23392035518813992, 0.22799930476584163, 0.22313331953217452, 0.19533320791746156, 0.20236378111731979, 0.23232215517439858, 0.20753129383362223, 0.19778906434104282, 0.21414364955470577, 0.2452543666141641, 0.7177611114854964, 0.21847760996724142, 0.23727871009949564, 0.22040500604266633, 0.21503631808091028, 0.2047657243247818, 0.2420704831931696, 0.9022713980505013, 0.15658676041167274, 0.15437532994613135, 0.16534657919544626, 0.20007324758075207, 0.19793013274715, 0.09989495344249388, 0.1697467857761774, 0.8537856770915971, 0.08299062803879675, 0.16916761668570912, 0.12567899418767525, 0.7231978280410356, 0.16884332651360656, 0.8042857416959123, 0.21260518204336698, 0.1977147774222744, 0.21160662726335933, 0.19569851145350148, 0.1774505646120379, 0.19991598876172445, 0.1863190215721766, 0.18026380944606302, 0.18814711294542108, 0.1797690761410644, 0.18599160066397813, 0.18402054901988585, 0.08496407869581513, 0.08653383557355632, 0.09073103324244713, 0.10374145823150116, 0.08843578422378817, 0.08243853638824927, 0.08697357235402181, 0.09320358525317951, 0.08151951348292519]}, "mutation_prompt": null}
{"id": "2a59ca44-bb77-4bb6-9b20-d4a4d14df2e5", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = X + V\n            X = np.clip(X, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution for efficient global search leveraging swarm intelligence and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5c7b47a-c9bb-450d-ae55-c8ea0ae33963", "metadata": {"aucs": [0.8596140741976193, 0.8696325712044372, 0.8524655865359922, 0.8788388305505872, 0.8822610891895218, 0.8792523748663894, 0.8677575687378922, 0.8751086393146844, 0.8541574320356716, 0.7539073724188774, 0.7556602545461464, 0.7544119908520504, 0.7723905742872907, 0.7434484128375227, 0.6695224388387269, 0.7514683688097413, 0.7193702002753829, 0.7567602220122823, 0.15348527287650104, 0.17535289129656506, 0.12741565594882454, 0.13038884042141086, 0.1746477474479834, 0.15052229666028016, 0.16518133765494003, 0.14468297229272975, 0.563793531296352, 0.13053729322830043, 0.13544031839599668, 0.16867994605667225, 0.13417899544183198, 0.12925408616959666, 0.051719319536498776, 0.1316592577994692, 0.1448792897775375, 0.12971032529522686, 0.9895614682532213, 0.9839629323482373, 0.9924024136536378, 0.9815986159542922, 0.9915462493218776, 0.9905271647775874, 0.9902872666818385, 0.9936562440869099, 0.9923089973124989, 0.6985840375420341, 0.7279947106691418, 0.6948786196390473, 0.6617731740845207, 0.6828743259385404, 0.6886520055565354, 0.6763512140146672, 0.7068135605518502, 0.05164508586725114, 0.8554436449833749, 0.8163839408876213, 0.8379025242618033, 0.21213495850034203, 0.8691349648588889, 0.21159979010177976, 0.8313911661976431, 0.23537387237257368, 0.17577832618779377, 0.1471579777965799, 0.2416507935757043, 0.23146104595433104, 0.23604956014492928, 0.24695142880792864, 0.23452989109767408, 0.24442994245824046, 0.25547620910297286, 0.2481831284641005, 0.23072273344343952, 0.2346215245376726, 0.23308005588722902, 0.23516371288992743, 0.23921363740292267, 0.26230877682687836, 0.25678897644882304, 0.13622523239967455, 0.2491515729101912, 0.054816612591794156, 0.04753703953203914, 9.999999999998899e-05, 0.00042337178544260556, 9.999999999998899e-05, 0.009648423944842555, 0.06050252554850355, 9.999999999998899e-05, 0.05843617781297694, 0.07099589291528208, 0.0942942067410173, 0.04377192061402713, 0.07732959221872993, 0.007580591151269966, 0.0046716001839886, 0.02627802654428235, 0.06221377015264462, 0.03312551307661793, 0.04099042785523577, 0.07547761502234263, 0.051138514479696084, 0.07329544999631421, 0.19633623111349108, 0.07088369557336083, 0.09982567913057228, 0.07329663891113047, 0.07128606158584572, 0.10973381031402607, 0.09148771042715775, 0.2698937581873131, 0.3237097785344468, 0.12457966491752215, 0.11159412020062176, 0.05894748819383, 0.14267662053553432, 0.11294506557797013, 0.5810918724525673, 0.5657319238692686, 0.572925365637663, 0.5917463951432615, 0.5490550171810676, 0.5874337974807615, 0.6021519845620646, 0.5581604516093301, 0.5629677895397543, 0.12022040045036753, 0.13448898396772768, 0.11798902187531712, 0.13578580337356927, 0.12893782359296346, 0.13641310564008802, 0.13383223935943678, 0.11335134478596842, 0.11166545256677474, 0.20668169904021105, 0.2415762583639285, 0.2828361703814465, 0.1418185901678729, 0.13187313394265532, 0.44179877479060015, 0.21449428793333225, 0.23715691966988728, 0.36309622095961025, 0.612287798927236, 0.5836277065065731, 0.5372184298611394, 0.5263530596147974, 0.6267648151400729, 0.6221338447923217, 0.6466001471024941, 0.5853029839416234, 0.6118894526228948, 0.3305891268874145, 0.35048557066762953, 0.2013645383902226, 0.2329625457109119, 0.38947562757525434, 0.28341094315116644, 0.3624287562069801, 0.4014967386358328, 0.27183422390519296, 0.19766324534401203, 0.23392035518813992, 0.22799930476584163, 0.22313331953217452, 0.19533320791746156, 0.20236378111731979, 0.23232215517439858, 0.20753129383362223, 0.19778906434104282, 0.21414364955470577, 0.2452543666141641, 0.7177611114854964, 0.21847760996724142, 0.23727871009949564, 0.22040500604266633, 0.21503631808091028, 0.2047657243247818, 0.2420704831931696, 0.9022713980505013, 0.15658676041167274, 0.15437532994613135, 0.16534657919544626, 0.20007324758075207, 0.19793013274715, 0.09989495344249388, 0.1697467857761774, 0.8537856770915971, 0.08299062803879675, 0.16916761668570912, 0.12567899418767525, 0.7231978280410356, 0.16884332651360656, 0.8042857416959123, 0.21260518204336698, 0.1977147774222744, 0.21160662726335933, 0.19569851145350148, 0.1774505646120379, 0.19991598876172445, 0.1863190215721766, 0.18026380944606302, 0.18814711294542108, 0.1797690761410644, 0.18599160066397813, 0.18402054901988585, 0.08496407869581513, 0.08653383557355632, 0.09073103324244713, 0.10374145823150116, 0.08843578422378817, 0.08243853638824927, 0.08697357235402181, 0.09320358525317951, 0.08151951348292519]}, "mutation_prompt": null}
{"id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 4, "fitness": 0.48111654607220083, "feedback": "The algorithm OptimizedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.31.", "error": "", "parent_id": "f5c7b47a-c9bb-450d-ae55-c8ea0ae33963", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "898ab8f2-2ddb-456a-9ee3-561d54a7ee3e", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "aa2cdc45-e141-4f11-9384-6cc4bafa64e4", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "0fa378d9-8724-4a1e-bc48-c5b68a5038e8", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "8cc4d987-aa49-4336-984a-764f1748b1f8", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "7941df1d-2e35-41fc-88c4-4395ceeab989", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "292a250f-a9bd-4951-95f8-e046e06d2306", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "810f52bc-7081-40ae-8d76-6f01b25ed7ca", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "a14ba79f-f043-4e10-801e-18a16f4ae93c", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "3d1a66c8-a522-4fcd-a981-90502b4083b4", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "3df190bf-8cc6-4917-b6fb-b02a486bf0d7", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "a370ecbd-07c3-43d9-9a20-b43ec20beea8", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "fe8fa0ec-cd69-4cbf-8c9d-7152f2b3af9b", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "debc1c74-66de-480f-ab33-c782997ccbe5", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "0d7ca597-e37a-459d-a47f-b8b6632bf7b4", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "4f43b6db-d5e9-448f-bc2b-99a4de0ecd93", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "5fdf97c4-c639-4f28-b04f-85d7946f0b6d", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "b761a91a-009a-41b8-ad23-051de92317e4", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "96b17bfd-674e-47d9-bec6-9e92d331216c", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "7008d8c8-55e2-4b7b-b9de-a2a92e82031f", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "600fd6c4-f6ef-4643-b481-e85c03a24661", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "7e38e1a0-33d5-46cf-998a-a9465936b601", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "00f7e248-9bd0-4dfd-a3e3-d6f80c63caae", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "85e9c599-3714-42bc-b61d-250ca3e4ff8c", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "b627a5c6-ff7d-4c70-93b1-313d0c691a89", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "ac3539fe-1a21-4a50-97f0-95965b379984", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "1ea8e268-09f3-420c-9bb8-6f0c6def53e1", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "c33beb3b-be24-4a45-b96f-348bb1ab4e9d", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "e93714c4-d155-4676-a787-eceda11a61e8", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "b4f95829-8b24-4c86-92bb-416759994f2b", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "b489fda7-a0cb-40f2-a774-d99329bd6004", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "33a9e771-b43b-44ba-8090-a3657a218eac", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5\n        self.c1 = 1.2 + 0.5 * np.random.rand()  # dynamic adjustment\n        self.c2 = 1.2 + 0.5 * np.random.rand()  # dynamic adjustment\n        self.F = 0.8\n        self.CR = 0.8  # reduced crossover for diversity\n\n    def __call__(self, func):\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]\n        G_fitness = np.min(P_fitness)\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                indices = np.delete(np.arange(self.pop_size), i)\n                np.random.shuffle(indices)\n                a, b, c = X[indices[:3]]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n\n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n        return G", "name": "EnhancedHybridPSODE", "description": "Enhanced Hybrid PSO-DE with dynamic parameter adjustment and efficient evaluation termination, aimed at reducing computation while maintaining solution quality.", "configspace": "", "generation": 35, "fitness": 0.4670586125437745, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.30.", "error": "", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8893447182773427, 0.9058622092050443, 0.8999162063211599, 0.9046530637650888, 0.9031674977288794, 0.9054048375769576, 0.9045757952518503, 0.8981054839570488, 0.9064133476547414, 0.8023837499887854, 0.8028563432296609, 0.7873970363179318, 0.8108104539436158, 0.8075530993613926, 0.8159672928789901, 0.8018160135095188, 0.8131726151613672, 0.8335550683928026, 0.17935887295899133, 0.7389670797874348, 0.15494900574208226, 0.15566786906116126, 0.15944303550893513, 0.15536948481251966, 0.14043610217331337, 0.17242490076022676, 0.15211749941736852, 0.08446305280766941, 0.10762817297051552, 0.12086914381964453, 0.13953503665324674, 0.11381123404116356, 0.13262026030217844, 0.10188297492972254, 0.11304258705146619, 0.1520889237360683, 0.9935556864744226, 0.9890796536786276, 0.9920638101135053, 0.9923807562138368, 0.9816963845048774, 0.9929378135548362, 0.9876508345285736, 0.9853230057233785, 0.9889795998217725, 0.7482099572944039, 0.8178463755915114, 0.8040513967798145, 0.7337200105981828, 0.8025636008110942, 0.8094709418473138, 0.7374544259693885, 0.77380887556582, 0.8177758061626186, 0.8794459080308976, 0.8721348454882005, 0.8881856672164377, 0.16112223693531502, 0.16055786159286234, 0.28102638068725394, 0.8560783856417107, 0.904294109255113, 0.3933578604781589, 0.7164606655491439, 0.6885023959229694, 0.6870445215919811, 0.7220221018377757, 0.7295428348131274, 0.7223712698690637, 0.6738370471543773, 0.7054113379070917, 0.7112822600928951, 0.6250007503817512, 0.7246010669636689, 0.6729140376712235, 0.6970493910611038, 0.6889606006366038, 0.7566846547808015, 0.7292499240350054, 0.659048170722563, 0.7288449993512435, 0.440822811257892, 0.41304498576874216, 0.6081209400736892, 0.07559066551643878, 9.999999999998899e-05, 0.06699046768383854, 0.3258654114431372, 0.6120276818274053, 0.4699081110111468, 0.5591169647767629, 0.45716331397926235, 0.6781751313448106, 0.5213399539178644, 0.6744844443286795, 0.5762089692631049, 0.5358564317231485, 0.5590957506517873, 0.6996035841517159, 0.26688806195038284, 0.07996363543614804, 0.2170017816948866, 0.1294253065383385, 0.374048037274166, 0.5543655052207999, 0.10222625936654062, 0.12828487898003493, 0.2439119607829261, 0.5766351827835988, 0.4477640048479239, 0.5685032470605285, 0.5227332099416886, 0.5862549364973233, 0.5919190252663604, 0.4159565814732623, 0.40139180401962626, 0.451019698074392, 0.8232031969733999, 0.8425419071759948, 0.8395747513236521, 0.8033959748726512, 0.8556602779964856, 0.8303838203766716, 0.8476448279130411, 0.8520990388209733, 0.8378718510299444, 0.15259254884966011, 0.1594527724279764, 0.1211253898327066, 0.12334917966437264, 0.12486008321276754, 0.15690962771974004, 0.140676613613392, 0.11962516034007564, 0.14061163276141164, 0.17742609362035144, 0.21614387337245067, 0.7448163032885934, 0.8274005544781393, 0.3457065176737837, 0.08522578721663088, 0.45788943437362406, 0.22612345354422714, 0.7372848141231236, 0.42577747134090194, 0.5672419503235864, 0.5014366592971982, 0.6992753815480501, 0.6247416514304855, 0.569604169242494, 0.541141803609422, 0.7433194822344881, 0.7523327080916199, 0.2927050439987986, 0.3961843625706336, 0.41956356140882434, 0.6168996881987505, 0.3348396001229338, 0.3121269894011115, 0.6715218258000781, 0.28389707735967595, 0.35745361983315005, 0.20133571064383649, 0.23473452761293012, 0.23147435413725215, 0.23968579663149014, 0.23159157924016305, 0.2155782550997809, 0.22855451644286362, 0.2148503007072553, 0.20547353026674542, 0.18375971888916098, 0.22735226868584624, 0.20862295270240017, 0.20672872438632162, 0.2230891381445549, 0.1936561290413289, 0.2013794326118593, 0.20772201907831678, 0.207679430717579, 0.16622007503065084, 0.9220978906357229, 0.15387596919939028, 0.21098784231863688, 0.16876494311338408, 0.20083089349321903, 0.13608182557811688, 0.16305344440067604, 0.16913060494122634, 0.2108959317496184, 0.1694992720564127, 0.9164912462882503, 0.1692882835459324, 0.21290403695663918, 0.21236520886117738, 0.16829273606088646, 0.8971570544318975, 0.1851955669808426, 0.17943534873035938, 0.18966823402007071, 0.19381481488581087, 0.1850545784211166, 0.19620603879861787, 0.17829084126866723, 0.18445121684202315, 0.1735122472864461, 0.18875386409261108, 0.09670937830339044, 0.09418205530933921, 0.10522542993397388, 0.08150758801220725, 0.08639438347007067, 0.1015482989133406, 0.09815562615323292, 0.08503386139462576, 0.08761773464243439]}, "mutation_prompt": null}
{"id": "63379f55-07c9-40e3-8d25-97afd028365c", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "9af0a54c-cfa1-4ce9-85c4-c0a730e401f3", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "3c418fa1-669f-47ab-b2ba-aa86289e2844", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "1a0c9bec-2c76-429d-8f36-7b9caf6e8f9a", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "0d8a5bbc-9277-43d2-98cc-70d227600de9", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "06dce252-114d-4595-9721-f7814010017c", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "f1119611-d15a-4ae8-b2dd-33e1e603e699", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "7706d172-10ca-4194-b6c9-4065d82a6a29", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "e8807afc-61f8-44e9-82fb-861d4d564cb9", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "11f5e07c-bd2d-4d97-b436-f07dc21f13b2", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "02a7eb13-4f54-4555-83ba-781daf539aaa", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "a263d340-c640-4c3b-a11e-deef9571354d", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "80aa3113-5a58-4e09-86bc-c4df4631880f", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "ba5d8a73-46ca-4ff3-95e7-a591ba1f76bb", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "90a3c048-be58-4a2d-9257-9810e42cafb0", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "4eab8d67-106d-4478-a815-0c85f737f55d", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for iter in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Adaptive inertia weight\n            self.w = 0.9 - 0.5 * (iter / self.max_iter)\n\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with adaptive weight adjustment for improved convergence efficiency.", "configspace": "", "generation": 51, "fitness": 0.2978568022558819, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.6650118036471093, 0.627937487566136, 0.6352512617534842, 0.6731050687972981, 0.6827294731045556, 0.6666272680525941, 0.6605826737143351, 0.6639461375432668, 0.6504809947114842, 0.4525401642062895, 0.3018116826362821, 0.4570948405452824, 0.42551845280666567, 0.40184022107055284, 0.46570345384742495, 0.012759318649269935, 0.420566240714528, 0.45055579775616783, 0.12968033409489177, 0.11006650020255948, 0.0948294238791847, 0.1203696609561995, 0.11830287859559918, 0.11872258885508091, 0.11994899275622373, 0.11993968084802276, 0.12878038095564048, 0.09120298881975164, 0.11096968984566191, 0.10943241317505248, 0.10914872091526762, 0.11272735191464689, 0.09752333949398784, 0.10340027285666853, 0.1122009337804224, 0.11224702694544952, 0.9944852424701015, 0.9916784098265499, 0.9939122337536445, 0.9890401793498032, 0.9924700365034943, 0.9916782596471682, 0.9916784390589095, 0.9926139140187704, 0.9917816152500308, 0.4798217468281789, 0.47002992569330215, 0.4854500713533729, 0.4712936539080239, 0.48534402230084916, 0.4509654896661859, 0.08216019569648891, 0.4837504377421762, 0.08522556936595915, 0.1366539236262272, 0.5916503698520541, 0.20415047982426826, 0.6645776954550228, 0.24826912409218638, 0.18570243549881382, 0.12336145411078048, 0.12413712191531612, 0.1148499965568961, 0.4546445862559255, 0.37584343320317537, 0.3930438066756031, 0.3675849752209869, 0.36980523649972663, 0.1011114737629718, 0.10775167765607652, 0.38646454748764514, 0.38006594125051496, 0.38868753661856403, 0.010076414661428501, 0.009693684087206722, 0.39423351082009017, 0.08994976234706642, 0.3731935458996526, 0.42363129514219855, 0.09572644188978341, 0.42991193082459267, 0.00518508187646971, 9.999999999998899e-05, 9.999999999998899e-05, 0.22446771838055757, 0.1122203807577613, 0.226390647383782, 0.25381092686366247, 0.1771215455154428, 0.3527110159535697, 0.20789542673736916, 0.2077039102899393, 0.3445418106126441, 0.3121239756750229, 0.24289504122566752, 0.14349699406832384, 0.0505484365382084, 0.24800678592156056, 0.1393682629369103, 9.999999999998899e-05, 0.1717896940003797, 0.050875625204057195, 0.1453109302978952, 0.2041622514640561, 0.21522268188639204, 0.17386356480610632, 0.07648294884020546, 0.04846048010251702, 0.2844583920928112, 0.285868904911213, 0.2596770406809108, 0.004779343033476491, 0.30744363467571745, 0.004722427926448058, 0.06801482462249098, 0.06773308083202079, 0.2926186104801449, 0.5909854913316968, 0.5828961656901788, 0.6213368315911199, 0.6237262598778752, 0.18146949860602368, 0.6166867701738872, 0.6028679784843913, 0.5830141719918496, 0.6005805932438162, 0.14063105779068807, 0.10329800132687872, 0.08245374545436612, 0.11485014529295767, 0.13752209233092616, 0.12163026706525382, 0.11193927584698227, 0.11103728818989422, 0.11176088787389904, 0.17159899609809748, 0.15250983554374575, 0.4333077591246757, 0.3685823779450479, 0.1701483385093281, 0.2787462818639842, 0.18221699791267043, 0.19453446734780888, 0.17612998662102486, 0.4298740148297434, 0.43488686441090874, 0.4244147318294599, 0.42000910346763454, 0.42280971293862335, 0.39050582704452397, 0.43195873321911027, 0.4278875844919493, 0.15719503169371563, 0.35439396221783603, 0.3597823325910504, 0.27799970806049923, 0.1948126214413468, 0.18875991738558429, 0.3193352230206715, 0.36037039263365245, 0.3393146103523088, 0.339203141698589, 0.19602267882710356, 0.19719827458676042, 0.17474865893040403, 0.168244377859743, 0.20794268476890454, 0.19039050978056837, 0.20776935897099857, 0.1890244002983721, 0.191723008745593, 0.19556412246692145, 0.19835605548790003, 0.41485212001390515, 0.20941514976481435, 0.19403385310674504, 0.3807463410710423, 0.2177766860838577, 0.19748659087838738, 0.20039344526154534, 0.17131345759829275, 0.16584640476740875, 0.17724399915950984, 0.7037686414985386, 0.1899502621639927, 0.7158884419877976, 0.09922449755298224, 0.16791200898354186, 0.14359147096309166, 0.6554439352993996, 0.15902597088602155, 0.6707354989470278, 0.673060341858666, 0.6127288982181863, 0.19702132791975768, 0.11582057638640053, 0.1253099640587041, 0.6404919433286433, 0.18211546733703932, 0.1807847644974545, 0.19065759665054294, 0.20403436192050994, 0.1855320641274959, 0.18478929763772178, 0.17384583141147925, 0.19174997117935044, 0.17266708075643422, 0.07870734695564663, 0.07994433667521605, 0.0755173470916739, 0.07750305898413612, 0.07573809372154117, 0.07667960683687847, 0.08772059359826012, 0.08100278023502672, 0.07005889244173236]}, "mutation_prompt": null}
{"id": "a40b6991-efff-4f16-977f-66772e4af353", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "61df521e-f001-4fa6-ba13-98a0da7bfeb8", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "b267ef34-3957-4655-965a-c5e99873e191", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "8f505ef2-469b-4292-8c8c-a6549173a91a", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "72a12820-c2fe-4a95-9682-e52b3be9209c", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w_min = 0.3  # minimum inertia weight\n        self.w_max = 0.7  # maximum inertia weight\n        self.c1 = 1.7     # cognitive (particle) weight\n        self.c2 = 1.3     # social (swarm) weight\n        self.F = 0.9      # differential weight\n        self.CR = 0.85    # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n        evals = self.pop_size\n\n        for iteration in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Adapt inertia weight\n            w = self.w_max - (self.w_max - self.w_min) * (iteration / self.max_iter)\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step with enhanced selective pressure\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE by implementing dynamic adaptation of velocity parameters and enhancing selective pressure in DE.", "configspace": "", "generation": 56, "fitness": 0.4223619585969451, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.27.", "error": "", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8028095437407128, 0.7900880372602144, 0.804548929216574, 0.8331856650814854, 0.7939611812401944, 0.8136442162058344, 0.8111054531828826, 0.8276386227160033, 0.8144394089327276, 0.6691451845781278, 0.6600424467713473, 0.5826897191165066, 0.6500415337182195, 0.5603163755769567, 9.999999999998899e-05, 0.6549914221110722, 0.6652104550020439, 0.6517991511700035, 0.15854473686706938, 0.10402063090161573, 0.1198985211301713, 0.15025659186997842, 0.5455572348073259, 0.07270888596874447, 0.12611030213018437, 0.4002930153925307, 0.4364433651529688, 0.12386768167092799, 0.13885047698556496, 0.10404319011370933, 0.13172006183995943, 0.11021333947221046, 0.09846613050448827, 0.11737944294355207, 0.11302109645675829, 0.14719958141198808, 0.9910416540940412, 0.9918891660858398, 0.9933189221696043, 0.9891538643172212, 0.9912114531065096, 0.9901664974646536, 0.9904753788791049, 0.9913796485639226, 0.9903347960950823, 0.6415507378518328, 0.601247305336666, 0.6537256569125613, 0.6562353829411173, 0.6382028959433101, 0.5845433880598767, 0.6476108812803442, 0.6394960686176453, 0.08846255534204117, 0.8378894939007464, 0.7902507370234592, 0.22055957538347848, 0.8126185887593782, 0.8240876535972208, 0.8014504028212379, 0.7991739526816404, 0.7910261788126398, 0.8379599732473382, 0.5473990280043806, 0.566310460025638, 0.5294930860540163, 0.5228041339474414, 0.5639506927965907, 0.5666404534196376, 0.5144988416358249, 0.45278668553394796, 0.569185538989212, 0.5792498095184968, 0.009878305266512455, 0.053176058951971195, 0.5537585726229397, 0.5307596586379542, 0.5848069879899729, 0.5926178256701796, 0.5783798196729386, 0.5672123109500864, 0.3389812171419747, 0.2609970747241849, 0.5473116227863433, 0.05453300063957778, 0.3959807373622565, 0.4318015794345139, 0.49318046754146827, 0.38168655722237377, 9.999999999998899e-05, 0.5574476343065345, 0.3615808978387214, 0.070935719745156, 0.47890397369058946, 0.32673864840095446, 0.15780181696228213, 0.5094088362378002, 0.5411709198075889, 0.5490468348414131, 0.3483696950844143, 0.0727668854796284, 0.10053146087599196, 0.30237548372350986, 0.43778007162516874, 0.42250731163197575, 0.20233472120728602, 0.17467993646161684, 0.23779602610463246, 0.4487450906823104, 0.3843619118488576, 0.4168573117444644, 0.47442561506574077, 0.39601567321915965, 0.3127664985809193, 0.05648468628147252, 0.4229136854415111, 0.46321414366658464, 0.734187413726996, 0.7349282740845682, 0.7383435538606884, 0.7565390287953152, 0.7382498277143825, 0.7569532079481021, 0.7450821431164891, 0.730979372543737, 0.7577304793055808, 0.13585688702086174, 0.0823652817370063, 0.08037422467638045, 0.10675070735696823, 0.1485092622214128, 0.10738231573063095, 0.1079953764754884, 0.09179338998813835, 0.1273667021542353, 0.3755958168652048, 0.5178455292164401, 0.40388863091140415, 0.4142504597879916, 0.49808073295889266, 0.1971068423977258, 0.18757102478566878, 0.2398709644153343, 0.5300753808051737, 0.5958730635902492, 0.44196858873336264, 0.5264269826287789, 0.5195985916520163, 0.5014626819441976, 0.44568113531214226, 0.5804279844938305, 0.5902281485831551, 0.5554698510239113, 0.353418538965662, 0.43067299011473015, 0.4323711392969023, 0.4815482914965876, 0.5136561948513714, 0.4928409907091609, 0.5036774763692243, 0.4110891968406555, 0.47355984060180756, 0.18725720764192322, 0.19863619441560398, 0.20313913955330543, 0.192876707733037, 0.20323154938663657, 0.1918522147822158, 0.2157741310169996, 0.19895911802176347, 0.2151608247165594, 0.6383044658617821, 0.18913047272830774, 0.231911840498899, 0.24188543558882625, 0.5740817969931491, 0.19775785051575168, 0.23711543698345927, 0.6431556842269008, 0.23046909618579103, 0.8704265439189574, 0.1851737373494069, 0.15227226438583952, 0.8369958473303526, 0.1993122383393846, 0.8411507693595657, 0.09940566976045917, 0.16775361199931704, 0.1852078125611718, 0.12533847047343094, 0.1692179491730199, 0.16638556586829467, 0.2081873056648852, 0.8095469974558154, 0.22011219310571617, 0.1883971394056262, 0.8388618199235004, 0.19707164752195117, 0.19048189552907557, 0.1746393167576169, 0.2157642996838991, 0.17813563479712902, 0.21886546883646163, 0.19790044774578497, 0.18326028832191754, 0.16769945612000647, 0.19428976258962172, 0.08240741297712884, 0.08052941883813058, 0.07869473974608387, 0.08353072353726598, 0.08685853373273789, 0.09517148410579845, 0.10342624742300499, 0.0825655759942392, 0.08394462432217864]}, "mutation_prompt": null}
{"id": "f79f2caf-4559-44b5-b1cf-8b1316d4fa35", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "4d6f16be-641d-42ee-9c27-68027e46579b", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "5407a77d-7bca-4840-bc1b-3560970d2e0d", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "dcfa54e2-4a79-40b9-aaf1-dde366af3d7b", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "4c134227-2b26-415a-9862-e6ae90608f1e", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "38602a10-8afc-43e4-9f11-f1090172401f", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "4becf354-f5ab-471c-a2c7-b0559cfe28e3", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "44825949-fefc-4df6-bf0b-253dbe7067be", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "21416a16-2571-44d1-a2b0-64aa4e5a1059", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "2a489027-eab9-4356-be40-3865c88eedb5", "solution": "import numpy as np\n\nclass ImprovedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.4  # reduced inertia weight for faster convergence\n        self.c1 = 1.7 # increased cognitive weight for better exploration exploitation balance\n        self.c2 = 1.5\n        self.F = 0.9  # increased differential weight for better mutation strength\n        self.CR = 0.9\n\n    def __call__(self, func):\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.random() < self.CR\n                trial = mutant if cross_points else X[i]  # conditional crossover without full vector comparison\n\n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "ImprovedHybridPSO_DE", "description": "Improved Hybrid PSO-DE by optimizing particle updates and reducing dimensional crossover computation.", "configspace": "", "generation": 66, "fitness": 0.46056204569471215, "feedback": "The algorithm ImprovedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.32.", "error": "", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.9019670790257837, 0.9019276282529736, 0.894581752319441, 0.8676759281220919, 0.9012553776500464, 0.18989505535773576, 0.9060115721818587, 0.9093988112798144, 0.8821211702920639, 0.791785203987103, 0.8191153302312922, 0.7358823406875616, 0.7829043877237913, 0.724482920075949, 0.7920651148072637, 0.7261561662053868, 0.7381086056933003, 0.7313706431046907, 0.11969650658147435, 0.15449142064318677, 0.12169414449973903, 0.1168935924960266, 0.11668265167524061, 0.12281853660774145, 0.16265361610315254, 0.12182264420095235, 0.10585624874231858, 0.09166810712784523, 0.039318219284669054, 0.1220878761373837, 0.0855116074213047, 0.1097189852546957, 0.11742038087973927, 0.09186934803412483, 0.10389523098200804, 0.10966660948968199, 0.9908219076644309, 0.96899392632586, 0.9937405516409541, 0.985322809568828, 0.9921899164361174, 0.9903281429909525, 0.9926191630529011, 0.991099534826645, 0.9930558980520734, 0.8094562889670245, 0.7432004871587163, 0.742447983223806, 0.8150648864946729, 0.7842028767600896, 0.7842820198167224, 0.08884053242956402, 0.8070905617239703, 0.7657247439215995, 0.22901314607648016, 0.9402240673562453, 0.2090763881146781, 0.20786929871042736, 0.1944176969321787, 0.2755550545801826, 0.12677613483269, 0.13117045592223353, 0.9294419140194096, 0.7155475619585208, 0.6433044555303862, 0.12540390803926893, 0.7624848139063594, 0.7502389703666313, 0.7162683112641905, 0.7829697903008457, 0.13503758766411178, 0.135098124800619, 0.7090749459140009, 0.6753731015996741, 0.7025575237508968, 0.7368388178378628, 0.7941345088180548, 0.1325660439030084, 0.6827168354138808, 0.12803229020496842, 0.7476769562230066, 0.795942016189815, 0.7070945804098729, 0.6234491669985525, 0.7676125690155964, 0.7835955971105745, 0.7419373097027229, 0.7642892867991352, 0.6353254068999812, 0.7837121734259104, 0.7027774405579423, 0.7790813566890898, 0.7569559713144067, 0.7271818435453812, 0.7706304552411017, 0.6828721157878318, 0.7945046278454058, 0.7943218102154912, 0.7413294423278727, 0.3736946534487986, 0.3410968743840225, 0.49911194032401995, 0.615170807160472, 0.4161257481906673, 0.7646441871791263, 0.5910966719043707, 0.21096985278553726, 0.27367152933781125, 0.6259333518812927, 0.7498178366900712, 0.7241479248673424, 0.7229295503162925, 0.7309789374787359, 0.7309032164823955, 9.999999999998899e-05, 0.7116204842180183, 0.7469648450365051, 0.8875273323958792, 0.8624782711242818, 0.8512811078402976, 0.8890579461480382, 0.874027669046685, 0.854286543939979, 0.8542573654377803, 0.8792909322333156, 0.8689087332168781, 0.11525660889056288, 0.10657473168240317, 0.15745262230467982, 0.08971157903925653, 0.14787459897446753, 0.14371877902741959, 0.14720494360183078, 0.10948408829239631, 0.11176150904012816, 0.16396135221119168, 0.22616553113449878, 0.22647890040771168, 0.14457995528185363, 0.3553158046794511, 0.1389619330371381, 0.17305302581731918, 0.21916830635162232, 0.19334978619768906, 0.34096547640593877, 0.40546937736660915, 0.47967549331134207, 0.3825237484659111, 0.3448212441466644, 0.4837664435191874, 0.46084973855688083, 0.3979184637739904, 0.4157719761329587, 0.08691050168609671, 0.42364776045083974, 0.2840762030003393, 0.4339237204836657, 0.42697392947025814, 0.33094035348232786, 0.22367085198413228, 0.49424024657720433, 0.31859178940129773, 0.24280228929333914, 0.23035675274335765, 0.20700702707642826, 0.23090523614787306, 0.24167767679488195, 0.19995259820827893, 0.23162531999390468, 0.24674632323180146, 0.25382114745763285, 0.22400208066709426, 0.19940302974621404, 0.18883726307496917, 0.17880396108526442, 0.1897008824277454, 0.20055559633828857, 0.19954277112214158, 0.18225946289850603, 0.24768636680774447, 0.9292929331765584, 0.16794526910266905, 0.15474549241284863, 0.17315852814843513, 0.20135659562489727, 0.198926368449737, 0.10003376682733156, 0.16987894325462216, 0.1624380047307037, 0.08310175446312007, 0.21173567057463627, 0.9268763953622694, 0.9318277729643909, 0.8543941250959619, 0.9178176824391235, 0.21314194442905277, 0.9149100404080613, 0.15472157859237068, 0.21948642156049658, 0.18512502326585312, 0.18875770151206805, 0.18826989728090116, 0.18999200640473157, 0.19275120843059157, 0.1866624120050535, 0.1835437505904044, 0.20689712007789962, 0.10064397617282883, 0.09844852461706632, 0.12762955913544394, 0.08695284336649689, 0.10597523538533438, 0.10285027182390727, 0.08501141573206572, 0.09463864853761039, 0.1004365973990825]}, "mutation_prompt": null}
{"id": "4ba2c7ea-1c53-4f18-80e6-621675b73525", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "08de1397-8314-4913-bdfb-0b6916d70d85", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "d1b7ccc5-7c4b-477f-950d-5cf6ef5cce7e", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "b3dc5e6b-2fef-4cce-bea3-ba8facec5999", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "034bb49d-6aae-483c-98eb-3a4f5151c0fd", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "27148020-9927-4bdc-9753-ffdceb67ecbc", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "29c90a40-c39b-4263-848f-adc10dc2725d", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "83089f9f-af80-4208-ae3f-d5395fca540b", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "96e9c068-782e-4370-9075-d0524a324ddc", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "f2432b1b-74b4-42e0-b2d2-5d315324cee8", "solution": "import numpy as np\n\nclass EnhancedPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w_max = 0.9  # maximum inertia weight\n        self.w_min = 0.4  # minimum inertia weight\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.9  # optimized differential weight\n        self.CR = 0.8  # optimized crossover probability\n\n    def __call__(self, func):\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for iter_num in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            w = self.w_max - ((self.w_max - self.w_min) * iter_num / self.max_iter)  # adaptive inertia weight\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            for i in range(self.pop_size):\n                idxs = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                a, b, c = X[idxs]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "EnhancedPSO_DE", "description": "Enhanced PSO-DE with adaptive inertia and mutation strategies to improve convergence speed and solution quality.", "configspace": "", "generation": 76, "fitness": 0.30196128866971067, "feedback": "The algorithm EnhancedPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.6495480476704997, 0.6305243437635211, 0.6171037845472627, 0.6731655578109306, 0.6667431454476797, 0.6819757839060006, 0.6625056089626626, 0.6311311059952194, 0.6777979690190771, 0.458245682479804, 0.4619508646186494, 0.4143531132033622, 0.05499585775459237, 0.4263830171189209, 0.43186003338565737, 0.45158756702321423, 0.44187821844357866, 0.47105896013097703, 0.10026499104372766, 0.11149187676422012, 0.10653324229208705, 0.10026823535838136, 0.1345326839998957, 0.11225426858925347, 0.10862453059200139, 0.102523807667115, 0.09835113801855166, 0.09315773149647322, 0.08960056466350486, 0.10244410715403451, 0.11883340082615801, 0.09745397369456554, 0.10122454717790241, 0.10378065060497343, 0.09130137671302618, 0.10761719315727425, 0.992696017604297, 0.9927583147298771, 0.994836259473626, 0.991614123532025, 0.9924334086099285, 0.990673420760814, 0.9927794291311841, 0.9910764416599562, 0.9935633537065716, 0.4308226222079562, 0.46385078705493865, 0.10889945054636496, 0.466338854952588, 0.1409114255638939, 0.4431705646330577, 0.05146180327002292, 0.46598509152306955, 0.08572703279599914, 0.6507484904218217, 0.5818412438609135, 0.6521292955239812, 0.6155271009215176, 0.6458522684441098, 0.2504941826498168, 0.12427409073988205, 0.6720890923044425, 0.6453990288012459, 0.0977144087654318, 0.34412842910545627, 0.42395951531067, 0.3809372645668202, 0.3792279352924518, 0.3540199822837943, 0.3685905318470728, 0.40410640222087135, 0.3690818230068206, 0.37022285671235755, 0.02248996190294561, 0.009860687330114914, 0.2948300191448485, 0.26309034594705594, 0.3159611299198216, 0.3482040689203967, 0.030622039736206585, 0.39793945652318674, 0.18942894385165987, 0.1650636747996952, 0.04510826001561363, 0.00048759742108595017, 0.08820119029155327, 0.004038545175930275, 0.24436339222084125, 0.005277853598670168, 0.16527548184129137, 0.1897107182597897, 0.19333619396514778, 0.19558398638696328, 0.16231597404924092, 0.016616415728330725, 0.11381543896321966, 0.21402377384250093, 0.10015914448022345, 0.06437855506424806, 0.033937122751449555, 0.10413911794789199, 0.024864845428210214, 0.14628840296743806, 0.06212342451817188, 0.14970783324996773, 0.0697439276398969, 0.12466172368435802, 0.048226860324300125, 0.20846700213199065, 0.1486409108953647, 0.23280022338521833, 0.2668368275297356, 0.20320288025460742, 0.25218079073942967, 0.0425525697227811, 0.21695652554830847, 0.21148577586923867, 0.5693184625754031, 0.5737291298623788, 0.586278779139807, 0.5748248200797558, 0.5641211634617669, 0.577650364407666, 0.5497356369705986, 0.5303301197189046, 0.6051710060484969, 0.1184721442549409, 0.08341655828947336, 0.04985375999857555, 0.35691621939706153, 0.10528073457256726, 0.09310450531303871, 0.07709664991406173, 0.11831663500058676, 0.0960727921332104, 0.14261331537704114, 0.3518844653417885, 0.39771712875891774, 0.23618437327727682, 0.17317618114510136, 0.15722251053860015, 0.23621870203904494, 0.494575628496179, 0.18696579910904376, 0.4222873390215124, 0.37946490429375446, 0.3945026818461348, 0.3671855476040722, 0.3714127666538207, 0.34979499232078026, 0.43051673650782607, 0.4201151814119112, 0.26205811184309447, 0.268598725450616, 0.167508904552211, 0.316796031141231, 0.2886585058829998, 0.18449991477086936, 0.18257115491040332, 0.2629111965359956, 0.33322343828941337, 0.29121203094620374, 0.1884374846932796, 0.19000165091314625, 0.18088788757833008, 0.18064153118198722, 0.19364782409797932, 0.18060933559455317, 0.1877431499682004, 0.19500534635793143, 0.21957415207462794, 0.2137892707173321, 0.2146039746431967, 0.2133577545954467, 0.19978499379129366, 0.19126664224028522, 0.2019094617248004, 0.1920535409266908, 0.39630498514258383, 0.20590662949942085, 0.7278080918551287, 0.6854122059810996, 0.15400566618551115, 0.7146586568733639, 0.6454192288932623, 0.6503156732646252, 0.09878957299314783, 0.16877908037008404, 0.1438669658141435, 0.16601683533006706, 0.16131531343028804, 0.12265463604093163, 0.614262422421146, 0.5506824779988828, 0.6411283453622079, 0.18521723395629974, 0.11009247866558491, 0.5764500906298632, 0.18016502955507785, 0.1842980060682048, 0.18778780217784385, 0.18210654238631574, 0.18492706324418973, 0.20067012560980724, 0.18498286863230673, 0.1895911184703828, 0.17952131088072187, 0.07593074844372627, 0.08086109499759708, 0.08804543741429205, 0.07238787674287073, 0.07705290803232634, 0.06931750358290978, 0.0801818188001453, 0.077729053816878, 0.07610676319170984]}, "mutation_prompt": null}
{"id": "999edf3e-4790-4f8a-897d-447974275601", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "306b1e7d-f973-4f0f-8d66-9cc936e9615d", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "46cdff49-a293-419f-859b-466cd6e80d48", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "28b0b0ed-398c-425d-99ef-df94b5f21764", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.7  # adjusted inertia weight\n        self.c1 = 1.4 # adjusted cognitive weight\n        self.c2 = 1.6 # adjusted social weight\n        self.F = 0.7  # adjusted differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE by optimizing velocity update and removing redundant fitness checks for improved performance.", "configspace": "", "generation": 80, "fitness": 0.38630927671395504, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.27.", "error": "", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8098203884911769, 0.7868176839941434, 0.7730233119713236, 0.8131409581444937, 0.8021507409552582, 0.8035213615778205, 0.7962030085032707, 0.8125603822517958, 0.7906888986981122, 0.5652157159989695, 0.5584878632877687, 9.999999999998899e-05, 0.6064629635289078, 0.5782746282065379, 0.5738549818256471, 0.6338075747393385, 0.5810798172482965, 0.016913294601829, 0.14199806334248444, 0.11128451951995666, 0.14404673636676912, 0.14243877891445245, 0.14294608666008846, 0.10570167157488342, 0.15808449003604164, 0.12752784208852086, 0.14230890924022876, 0.12853383329713075, 0.1079451303267619, 0.10334969729400723, 0.11177049206462963, 0.11331224877850199, 0.12855562415409272, 0.12430805467632233, 0.13798837840568556, 0.10181349988702637, 0.9945340053561603, 0.98951828657763, 0.9939049235868281, 0.989423412325019, 0.9919466166104186, 0.9913972562007906, 0.9924163414565724, 0.991153455095064, 0.9912258338084773, 0.644553738695357, 0.5108218932406824, 0.6596089795660827, 0.5582270478960738, 0.5993589689863201, 0.14910261833736638, 0.1261245636539401, 0.08844705161498545, 0.5674979948614338, 0.22562318511244983, 0.8079419773127565, 0.8140269381354026, 0.20943818657384905, 0.8664818155283088, 0.8070486881751121, 0.13788440905122368, 0.8157709819142951, 0.7961853948842594, 0.12604463907135433, 0.12184631102813526, 0.12005826751780446, 0.5192965578919317, 0.5980540368157401, 0.12921200811302425, 0.506997745022822, 0.5591138359439565, 0.12575483915488206, 0.57060981756836, 0.5343659709044442, 0.4780045705231517, 0.4503888188952594, 0.5621521516311229, 0.12776533697638548, 0.5002849133007821, 0.5626566366448552, 0.5324848208759225, 0.02765329866381505, 0.06129942415766931, 0.08593616075700283, 0.48359760624584136, 0.42766570502137424, 0.3649099234044545, 0.3523586694040517, 0.3288378276349708, 0.4219803424844635, 0.43480937078185167, 0.3004831505805674, 0.3870291942848786, 0.4438278849674707, 0.020081172135250958, 0.04308776210426479, 0.5511923480831387, 0.5012873489359246, 0.5275811968125027, 0.3303979390128857, 0.3031778127024596, 0.12355228825002829, 0.34923805472644254, 0.0928589450451347, 0.3228362284721982, 0.12739134910704342, 0.08799471050339525, 0.14108001342940335, 0.40079679243280175, 0.3781678860350959, 0.37750816057040815, 0.41437582234952675, 0.39675354418480135, 0.35262190088975554, 0.3242797605770269, 0.2999643577923401, 0.366191733779225, 0.7431222906197075, 0.7015394959088823, 0.7235253369515848, 0.7321910399912145, 0.7436042214316325, 0.7476300601181147, 0.7489355050365889, 0.7427249183503672, 0.7517040139851338, 0.09387835105323827, 0.12667003565702306, 0.07866372186863901, 0.1473149860913121, 0.1312644348147829, 0.12352441837783334, 0.13519714928895732, 0.14142266787098778, 0.14346065283499154, 0.5904754346762111, 0.31294336551473967, 0.651549545162424, 0.44781862332675126, 0.501998966517242, 0.28589732767314213, 0.5962162465399645, 0.22311386023720525, 0.24642367127800413, 0.5036681368869553, 0.4778014791266755, 0.4565974901765033, 0.5017027032920929, 0.4979525235230092, 0.46884690554084496, 0.48481362007899775, 0.5271774435564665, 0.49857371509798765, 0.3857600520194002, 0.4196110204023221, 0.38640725423808187, 0.42549884934689897, 0.4312624392366339, 0.44092930170628386, 0.42131597627367157, 0.411397812329945, 0.4250759484036294, 0.22130531068301196, 0.21726228283218296, 0.2278054731286948, 0.22108441395508072, 0.20123750233654314, 0.22446949896811497, 0.1893743311169649, 0.20842830049067995, 0.19708970590627284, 0.18347906268911618, 0.24242128159181575, 0.21134598773430757, 0.19898991967925916, 0.6232519871660639, 0.21461865282407622, 0.21951303441803194, 0.23687842001097958, 0.22991302871432584, 0.8904248448560766, 0.8698646363299172, 0.1840291410831083, 0.8589122586081938, 0.19891861929322208, 0.19932686373489084, 0.12256946168304328, 0.16846278906558143, 0.15114153544718523, 0.08295913498137675, 0.16854710821128704, 0.07250122026265982, 0.8291294465944864, 0.7943306422362355, 0.20911742790329702, 0.2040143708099742, 0.15216920572830073, 0.8151101130717158, 0.17762456218903766, 0.204210426728486, 0.18613186891306854, 0.19355061276518637, 0.1843202268644687, 0.18534251443045824, 0.18503764746288298, 0.18418560181274402, 0.18069767286530336, 0.08863895786596954, 0.08333852816243326, 0.08908609822517832, 0.083346489332499, 0.08259328022391255, 0.08646982520588076, 0.09276234598814792, 0.08746622171153717, 0.08720170349939649]}, "mutation_prompt": null}
{"id": "9805c02d-82f8-4bbc-b47d-be3713fe98b2", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "596f1c0d-e15f-4b9d-90f0-d55d5fc2ff2c", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "8c948ca5-7e7a-4a04-8901-848660845b1d", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "0b20c8fd-8605-4ffe-814d-f9e043f875e1", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.6  # increased inertia weight for better exploration\n        self.c1 = 1.4 # slightly reduced cognitive weight\n        self.c2 = 1.6 # slightly increased social weight\n        self.F = 0.9  # increased differential weight\n        self.CR = 0.85 # slightly reduced crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n        resample_prob = 0.1  # probability to randomly resample a particle position\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if np.random.rand() < resample_prob:\n                    X[i] = np.random.uniform(self.lb, self.ub, self.dim)  # resample position\n                \n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with intelligent population resampling strategy to boost exploration without exceeding budget limits.", "configspace": "", "generation": 84, "fitness": 0.17368051455077443, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.3297569594121065, 0.2987894395217522, 0.3259607925893805, 0.32452242438308276, 0.32884925551324484, 0.34776460108584784, 0.3452502869049645, 0.3092904923090215, 0.3179645838780615, 9.999999999998899e-05, 0.0010554103285088656, 9.999999999998899e-05, 0.0018346485987771333, 9.999999999998899e-05, 0.0043505409168914655, 0.0021846375289445996, 0.0026244469636425016, 9.999999999998899e-05, 0.08400314495881123, 0.09446725657987154, 0.07189992226648245, 0.0914279488320291, 0.08765498417788842, 0.08793274278807128, 0.07326895347765217, 0.0693952912130118, 0.07844522896714368, 0.07640194817919788, 0.06120361713532163, 0.08005317223408548, 0.06953256979617639, 0.05953769089220262, 0.0737355765890021, 0.06724812329777963, 0.06526173561182969, 0.06576881663974032, 0.9927237692041727, 0.9852789844638105, 0.9944500873829831, 0.992582934335676, 0.9885007512493984, 0.991383996137224, 0.9925530647853614, 0.9907429770992877, 0.9942355411587552, 0.16713879564622025, 0.15814778211464509, 0.1705965829783901, 0.17207136433599535, 0.19069890148261515, 0.1828548567992634, 0.1628132658275162, 0.1369575244888105, 0.17526736076876936, 0.20449608232417005, 0.21275186511270017, 0.2331709497435439, 0.18130796955910522, 0.186242173406848, 0.17625052497656857, 0.1915032583785915, 0.20469374938565865, 0.22778356804904865, 0.0700078159295423, 0.1108501266247014, 0.08185023290651039, 0.08812523729565147, 0.09006398827856132, 0.08358201162949375, 0.06944621545188034, 0.09914117847135606, 0.08861388791652225, 0.10803613572369142, 0.09084743492977598, 0.1125700817191917, 0.09825568377346883, 0.0967756270266904, 0.1063862278560509, 0.08723931036793442, 0.0922643419928636, 0.11804804696236149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07054038757825709, 0.056853506314988755, 0.062103597988037995, 0.053607841666165945, 0.06594945743928149, 0.06454725984153697, 0.05018157565813475, 0.0815415189829799, 0.07208096235418848, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03956938405762267, 0.03573851992150845, 0.03758442383069427, 0.05968596367255319, 0.037593349274684607, 0.06158627255985738, 0.03811460021101554, 0.0380320865150614, 0.04676428867063609, 0.36265806189611616, 0.32630676402256, 0.32388972879453715, 0.30675086426655507, 0.34988350723494166, 0.3408724239880183, 0.2900474028332076, 0.30890183701532836, 0.30764443640620753, 0.08175142455265816, 0.05779088111912767, 0.09413296930743031, 0.07294203497895213, 0.07861252822024911, 0.0781594070957532, 0.07532931787698038, 0.07491974781672583, 0.09211634875250418, 0.14314247824427728, 0.19327097922612813, 0.15417654119970226, 0.14007219425142126, 0.1654433638219316, 0.1530531791537102, 0.17381672105008095, 0.18479526488012166, 0.14648227130897862, 0.21046015404512886, 0.2238516705351682, 0.21592931215400923, 0.22578929560533745, 0.2089142405933917, 0.2170443289568711, 0.24356253839391895, 0.24226714541808703, 0.22884419548749013, 0.1787039816334518, 0.1577467007110388, 0.1694315582030902, 0.15640294440274793, 0.1450065116463145, 0.15364087253106062, 0.19392540125126523, 0.1742810185469198, 0.16776365678236493, 0.18138865272972793, 0.20446836357097598, 0.2168197217380221, 0.1955436331795306, 0.17558961156453623, 0.17788385217351277, 0.19453242012714722, 0.17955358243811648, 0.19514028439219033, 0.16599339395773038, 0.16822477022570037, 0.1747237649068022, 0.1713387634903576, 0.16207773926603863, 0.17113711366823514, 0.15841769432853414, 0.16153248565668232, 0.18519960327552376, 0.4352163465810961, 0.1748834690576685, 0.1534369511178031, 0.3741474160099588, 0.1861569856353522, 0.17691467043813414, 0.1250684703611218, 0.16779155340869367, 0.14625276843471235, 0.34390254181537927, 0.19746603898034587, 0.17333600490355805, 0.2756273906159452, 0.3155679271356292, 0.3003441818970356, 0.2095434371750975, 0.2017120199505985, 0.20686056114263862, 0.1793892018736929, 0.19645209834586042, 0.17518480958237648, 0.17816072387583304, 0.198195698693712, 0.1953980344316879, 0.1908977181762559, 0.18597672955101763, 0.18497246330931938, 0.07452989461150716, 0.06629480090875672, 0.06872253673947126, 0.060388187543211624, 0.07304888708850399, 0.0800808785477839, 0.06933734180169016, 0.06058873957060018, 0.06203550059489649]}, "mutation_prompt": null}
{"id": "44100f84-0b97-41e9-9d10-c1422934b6fc", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "2a66f844-45f4-4b4e-b9d7-2bff1fbb168c", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "35645710-60a7-448a-bc3c-7d55c1039d43", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "32d9eae7-5a02-4d13-9c0e-3fd955639145", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "bb34f796-7493-452e-b5fa-c3e71dbbc953", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "18f94f90-1a87-484d-aa75-34f98f8d6185", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "951bcb74-acee-4c6e-b063-9565cfdc0c9f", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "f064f0c5-2935-457a-9038-16863b38cbc1", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "9db49ec1-6c1a-4c43-a654-6b0133a7ba41", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "d9f1bcca-16af-48fe-bb9e-6b2d92d343be", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "2acbfd69-918d-4bab-a1f0-6e5ef4be47e8", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "9f269abe-a50c-47d1-8cb7-b042265d79fb", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "dae8549b-9355-4533-a494-61bdbb67e6fc", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "a5b632ff-c80a-4677-9752-f0a375f3eab6", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
{"id": "ca8232dc-66c6-4698-841b-cdce256b28d2", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) weight\n        self.c2 = 1.5 # social (swarm) weight\n        self.F = 0.8  # differential weight\n        self.CR = 0.9 # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        P = X.copy()  # personal best positions\n        P_fitness = np.array([func(p) for p in P])\n        G = P[np.argmin(P_fitness)]  # global best position\n        G_fitness = np.min(P_fitness)\n\n        evals = self.pop_size\n\n        for _ in range(self.max_iter):\n            if evals >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, 1), np.random.rand(self.pop_size, 1)\n            V = self.w * V + self.c1 * r1 * (P - X) + self.c2 * r2 * (G - X)\n            X = np.clip(X + V, self.lb, self.ub)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.delete(np.arange(self.pop_size), i)\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not cross_points.any():\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < P_fitness[i]:\n                    P[i], P_fitness[i] = trial, trial_fitness\n                    if trial_fitness < G_fitness:\n                        G, G_fitness = trial, trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        return G", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO-DE by improving efficiency in update rules and reducing redundant operations.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1477c082-014b-4777-82b0-97d0a9c09d1c", "metadata": {"aucs": [0.8845867930383359, 0.8794304456192503, 0.8813317795066232, 0.8840374045424513, 0.8795873357421556, 0.8923697730378773, 0.895939290286812, 0.8894290275526935, 0.884008253429562, 0.7784980862781994, 0.7905849351200462, 0.7724788114703453, 0.7608999702788108, 0.7864679982916845, 0.7651215705263636, 0.7765311648272538, 0.7788175378824977, 0.7679218444927677, 0.12059389309375623, 0.1425677487494429, 0.17586567849916213, 0.09885257710373585, 0.11694570655410574, 0.1292841053984095, 0.1409018705270879, 0.13542806958089026, 0.15588072789418495, 0.13519658348157115, 0.1414120303179357, 0.09107676694662281, 0.15520388463784707, 0.1086943902682791, 0.11403728089751552, 0.10781162763883823, 0.11539006579133926, 0.13786385174689608, 0.9940495512947418, 0.9921351300423088, 0.9947474713613179, 0.9882942867670539, 0.9912058108588628, 0.9881571888731615, 0.9881370189419793, 0.9885226831250224, 0.9909825785212878, 0.7901770101284992, 0.7839428253121659, 0.7666829920670855, 0.8054276626123371, 0.7317532807708551, 0.7809217478644315, 0.7798713254181561, 0.7905509298913482, 0.6965184018611925, 0.17199810796376713, 0.8908819748764988, 0.8970985817440893, 0.9039243915137258, 0.2785866575664824, 0.9000892278122301, 0.8788629738675973, 0.8328218193733944, 0.8563473544241703, 0.6725205452296156, 0.7395157145155905, 0.12767823117577337, 0.753092250515202, 0.714710501455815, 0.6335991947913513, 0.6886805956912732, 0.7170883572578046, 0.7241321091518735, 0.13421282341757468, 0.7142709433203978, 0.6849523115434026, 0.7634309839061357, 0.7362246657871045, 0.6759225097204931, 0.6862663478424444, 0.7824505389715379, 0.6983382136935299, 0.5659491811052346, 0.6417241976538126, 0.7060173193148676, 0.7053992899411428, 0.6657506457651761, 0.20657992478738674, 0.687362112399351, 0.6363955805316597, 0.60163676734563, 0.7660044251849432, 0.6279056813467796, 0.7116715099317275, 0.6827927670726136, 0.5988533789644983, 0.60402603752627, 0.7774650538875696, 0.7546025579762414, 0.73770275941068, 0.12938223250011727, 0.31257301879143906, 0.2524281323813552, 0.6776116789977848, 0.27311982859890827, 0.6054314355851746, 0.21389208366192436, 0.1540078914961832, 0.24588754988187045, 0.5787213980589574, 0.6403359124397838, 0.5721722925472192, 0.6124715858076442, 0.6432393609517357, 0.6493840740232479, 0.5953212852969771, 0.5279652275476008, 0.6676695297333292, 0.8266727253636217, 0.8618261512411415, 0.8669954865998518, 0.8417863654521931, 0.8348610743561822, 0.8467295135318375, 0.8429217423864295, 0.8434953676248255, 0.8477734979253151, 0.0732882287479868, 0.12821940617814054, 0.14042481135883877, 0.09631800806664903, 0.15819587425203385, 0.13312106349376485, 0.12609248651090388, 0.1207873802166941, 0.1577797982554071, 0.767887629558351, 0.20182274778221498, 0.365640251073195, 0.807894300464481, 0.8185880637308901, 0.7450148615396233, 0.18211314767151088, 0.10377240605822169, 0.21275958921345095, 0.6807314174442596, 0.6382483183573917, 0.6918454993818365, 0.7047058261087866, 0.7210753336322899, 0.37079451108863637, 0.7061926130296268, 0.5438677726965953, 0.291287535436202, 0.27495766533921173, 0.23964067344628603, 0.23304913544881722, 0.2617551940418378, 0.21646405320816342, 0.5302802398781125, 0.49352957937099073, 0.6641123731536699, 0.16920760796526813, 0.23352596532275394, 0.2050381798432771, 0.20634216679833128, 0.21393248911662377, 0.2023183657071278, 0.2093633955089097, 0.2498521307496181, 0.2086019811859754, 0.25582234448670527, 0.22367610042223474, 0.24656537797036682, 0.25121508247335733, 0.2211976711716308, 0.1784942937494658, 0.19512380701285492, 0.19296369493581766, 0.2453716494623318, 0.20931781070094235, 0.17096042751491825, 0.16697513432470423, 0.18815716440562258, 0.91508243936547, 0.20146738752304294, 0.1703192998509927, 0.15262907716119767, 0.17006702570573684, 0.16735027646071754, 0.0831353763224868, 0.16938993239376288, 0.20987923658919838, 0.21114760864586002, 0.16856494721768045, 0.20986523305461802, 0.2138491999367439, 0.167750515462451, 0.8981397657156486, 0.22820464372086557, 0.16938995471906926, 0.1871132295987783, 0.18057148531226286, 0.20420192791132374, 0.17980425161082803, 0.17704724554152618, 0.1958579337810724, 0.21161625173519727, 0.09427798879582294, 0.0914128359503138, 0.06762078158104268, 0.09899915740934817, 0.08976816312215619, 0.08968446010479669, 0.09117410086591116, 0.0948904012991516, 0.10128084424613915]}, "mutation_prompt": null}
